ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/C7_infer_design1_no_eyetracking_2015_Sep_28_1221
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1_no_eyetracking'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vr
sVcontacts
p57
Vn
sS'frameRate'
p58
cnumpy.core.multiarray
scalar
p59
(cnumpy
dtype
p60
(S'f8'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x1bS\x9c\x00\x8d\xfeM@'
tRp62
sVsession
p63
V001
p64
sS'date'
p65
V2015_Sep_28_1221
p66
sVparticipant
p67
VC7
p68
sVglasses
p69
Vn
ssS'loopsUnfinished'
p70
(lp71
sS'saveWideText'
p72
I01
sS'thisEntry'
p73
(dp74
sS'version'
p75
S''
sS'_paramNamesSoFar'
p76
(lp77
Vbdm_img
p78
aS'choice_left'
p79
aS'choice_right'
p80
aS'img_correct'
p81
aS'img_left'
p82
aS'img_wrong'
p83
aS'img_right'
p84
asS'entries'
p85
(lp86
(dp87
g63
g64
sg56
Vr
sg15
F0.73358948422355752
sg14
S'space'
p88
sg58
g62
sg57
Vn
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp89
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg16
S'space'
p90
sg55
g11
sg65
g66
sg67
g68
sg18
F6.3665160589907828
sg17
cnumpy.core.multiarray
_reconstruct
p91
(cnumpy
ndarray
p92
(I0
tS'b'
tRp93
(I1
(I1
tg60
(S'S3'
I0
I1
tRp94
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P9\x00'
tbsg69
Vn
sa(dp95
g63
g64
sg20
F14.933999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p96
I0
sg19
F0.77999999999999958
sg55
g11
sS'bdm_loop1.thisIndex'
p97
g59
(g60
(S'i4'
I0
I1
tRp98
(I3
S'<'
NNNI-1
I-1
I0
tbS'"\x00\x00\x00'
tRp99
sS'bdm_loop1.thisRepN'
p100
I0
sS'bdm_loop1.thisTrialN'
p101
I0
sg65
g66
sg67
g68
sg78
V45-chewy_nougat_redo.png
p102
sg21
F1.3
sg69
Vn
sa(dp103
g63
g64
sg20
F9.1170000000000009
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p104
I1
sg19
F0.95999999999999908
sg55
g11
sS'bdm_loop1.thisIndex'
p105
g59
(g98
S'\x15\x00\x00\x00'
tRp106
sS'bdm_loop1.thisRepN'
p107
I0
sS'bdm_loop1.thisTrialN'
p108
I1
sg65
g66
sg67
g68
sg78
V29-beans.png
p109
sg21
F2
sg69
Vn
sa(dp110
g63
g64
sg20
F4.617
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p111
I2
sg19
F1.1399999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p112
g59
(g98
S'\x1b\x00\x00\x00'
tRp113
sS'bdm_loop1.thisRepN'
p114
I0
sS'bdm_loop1.thisTrialN'
p115
I2
sg65
g66
sg67
g68
sg78
V36-fig_rolls.png
p116
sg21
F1.7
sg69
Vn
sa(dp117
g63
g64
sg20
F10.516999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p118
I3
sg19
F0.97999999999999932
sg55
g11
sS'bdm_loop1.thisIndex'
p119
g59
(g98
S'\x16\x00\x00\x00'
tRp120
sS'bdm_loop1.thisRepN'
p121
I0
sS'bdm_loop1.thisTrialN'
p122
I3
sg65
g66
sg67
g68
sg78
V30-spaghetti_hoops.png
p123
sg21
F1.7
sg69
Vn
sa(dp124
g63
g64
sg20
F15.917
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p125
I4
sg19
F1.1399999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p126
g59
(g98
S'\x01\x00\x00\x00'
tRp127
sS'bdm_loop1.thisRepN'
p128
I0
sS'bdm_loop1.thisTrialN'
p129
I4
sg65
g66
sg67
g68
sg78
V2-steamed_puddings.png
p130
sg21
F1.6000000000000001
sg69
Vn
sa(dp131
g63
g64
sg20
F12.75
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p132
I5
sg19
F1.3199999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p133
g59
(g98
S'\x1f\x00\x00\x00'
tRp134
sS'bdm_loop1.thisRepN'
p135
I0
sS'bdm_loop1.thisTrialN'
p136
I5
sg65
g66
sg67
g68
sg78
V42-mrkipling_lemon_slices.png
p137
sg21
F1.3999999999999999
sg69
Vn
sa(dp138
g63
g64
sg20
F6.2510000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p139
I6
sg19
F0.95999999999999952
sg55
g11
sS'bdm_loop1.thisIndex'
p140
g59
(g98
S'\x08\x00\x00\x00'
tRp141
sS'bdm_loop1.thisRepN'
p142
I0
sS'bdm_loop1.thisTrialN'
p143
I6
sg65
g66
sg67
g68
sg78
V10-bounty_redo.png
p144
sg21
F1.6000000000000001
sg69
Vn
sa(dp145
g63
g64
sg20
F7.7009999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p146
I7
sg19
F0.9399999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p147
g59
(g98
S'\x18\x00\x00\x00'
tRp148
sS'bdm_loop1.thisRepN'
p149
I0
sS'bdm_loop1.thisTrialN'
p150
I7
sg65
g66
sg67
g68
sg78
V33-ambrosia_rice.png
p151
sg21
F1.5
sg69
Vn
sa(dp152
g63
g64
sg20
F9.4499999999999993
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p153
I8
sg19
F1
sg55
g11
sS'bdm_loop1.thisIndex'
p154
g59
(g98
S'\x10\x00\x00\x00'
tRp155
sS'bdm_loop1.thisRepN'
p156
I0
sS'bdm_loop1.thisTrialN'
p157
I8
sg65
g66
sg67
g68
sg78
V22-daim.png
p158
sg21
F1
sg69
Vn
sa(dp159
g63
g64
sg20
F4.6509999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p160
I9
sg19
F0.79999999999999938
sg55
g11
sS'bdm_loop1.thisIndex'
p161
g59
(g98
S'\x0e\x00\x00\x00'
tRp162
sS'bdm_loop1.thisRepN'
p163
I0
sS'bdm_loop1.thisTrialN'
p164
I9
sg65
g66
sg67
g68
sg78
V20-fruit_pastilles.png
p165
sg21
F1.5
sg69
Vn
sa(dp166
g63
g64
sg20
F9.3010000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p167
I10
sg19
F1.2399999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p168
g59
(g98
S'\x00\x00\x00\x00'
tRp169
sS'bdm_loop1.thisRepN'
p170
I0
sS'bdm_loop1.thisTrialN'
p171
I10
sg65
g66
sg67
g68
sg78
V1-treacle_cookies.png
p172
sg21
F1.6000000000000001
sg69
Vn
sa(dp173
g63
g64
sg20
F5.101
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p174
I11
sg19
F0.7599999999999989
sg55
g11
sS'bdm_loop1.thisIndex'
p175
g59
(g98
S'\x13\x00\x00\x00'
tRp176
sS'bdm_loop1.thisRepN'
p177
I0
sS'bdm_loop1.thisTrialN'
p178
I11
sg65
g66
sg67
g68
sg78
V26-walkers_smoky_bacon.png
p179
sg21
F2
sg69
Vn
sa(dp180
g63
g64
sg20
F4.234
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p181
I12
sg19
F1.0199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p182
g59
(g98
S'$\x00\x00\x00'
tRp183
sS'bdm_loop1.thisRepN'
p184
I0
sS'bdm_loop1.thisTrialN'
p185
I12
sg65
g66
sg67
g68
sg78
V48-twix.png
p186
sg21
F1.8
sg69
Vn
sa(dp187
g63
g64
sg20
F16.984000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p188
I13
sg19
F0.83999999999999941
sg55
g11
sS'bdm_loop1.thisIndex'
p189
g59
(g98
S'\x11\x00\x00\x00'
tRp190
sS'bdm_loop1.thisRepN'
p191
I0
sS'bdm_loop1.thisTrialN'
p192
I13
sg65
g66
sg67
g68
sg78
V23-crunchie_redo.png
p193
sg21
F1.3999999999999999
sg69
Vn
sa(dp194
g63
g64
sg20
F14.034000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p195
I14
sg19
F1.0599999999999992
sg55
g11
sS'bdm_loop1.thisIndex'
p196
g59
(g98
S'\x12\x00\x00\x00'
tRp197
sS'bdm_loop1.thisRepN'
p198
I0
sS'bdm_loop1.thisTrialN'
p199
I14
sg65
g66
sg67
g68
sg78
V25-kitkat.png
p200
sg21
F1.8999999999999999
sg69
Vn
sa(dp201
g63
g64
sg20
F14.534000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p202
I15
sg19
F0.87999999999999923
sg55
g11
sS'bdm_loop1.thisIndex'
p203
g59
(g98
S'\x14\x00\x00\x00'
tRp204
sS'bdm_loop1.thisRepN'
p205
I0
sS'bdm_loop1.thisTrialN'
p206
I15
sg65
g66
sg67
g68
sg78
V27-hartleys_raspberries_jelly.png
p207
sg21
F1.8
sg69
Vn
sa(dp208
g63
g64
sg20
F7.3010000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p209
I16
sg19
F1.1600000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p210
g59
(g98
S'\x0c\x00\x00\x00'
tRp211
sS'bdm_loop1.thisRepN'
p212
I0
sS'bdm_loop1.thisTrialN'
p213
I16
sg65
g66
sg67
g68
sg78
V18-mms.png
p214
sg21
F1.1000000000000001
sg69
Vn
sa(dp215
g63
g64
sg20
F10.6
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p216
I17
sg19
F0.99999999999999956
sg55
g11
sS'bdm_loop1.thisIndex'
p217
g59
(g98
S'\x0f\x00\x00\x00'
tRp218
sS'bdm_loop1.thisRepN'
p219
I0
sS'bdm_loop1.thisTrialN'
p220
I17
sg65
g66
sg67
g68
sg78
V21-nakd_banana_crunch.png
p221
sg21
F1.6000000000000001
sg69
Vn
sa(dp222
g63
g64
sg20
F8.0169999999999995
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p223
I18
sg19
F1.3199999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p224
g59
(g98
S'\x06\x00\x00\x00'
tRp225
sS'bdm_loop1.thisRepN'
p226
I0
sS'bdm_loop1.thisTrialN'
p227
I18
sg65
g66
sg67
g68
sg78
V7-olives.png
p228
sg21
F1.7
sg69
Vn
sa(dp229
g63
g64
sg20
F4.984
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p230
I19
sg19
F0.87999999999999945
sg55
g11
sS'bdm_loop1.thisIndex'
p231
g59
(g98
S'\r\x00\x00\x00'
tRp232
sS'bdm_loop1.thisRepN'
p233
I0
sS'bdm_loop1.thisTrialN'
p234
I19
sg65
g66
sg67
g68
sg78
V19-caramello_redo.png
p235
sg21
F1.5
sg69
Vn
sa(dp236
g63
g64
sg20
F14.484
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p237
I20
sg19
F0.99999999999999956
sg55
g11
sS'bdm_loop1.thisIndex'
p238
g59
(g98
S'\x04\x00\x00\x00'
tRp239
sS'bdm_loop1.thisRepN'
p240
I0
sS'bdm_loop1.thisTrialN'
p241
I20
sg65
g66
sg67
g68
sg78
V5-pineapple.png
p242
sg21
F1.5
sg69
Vn
sa(dp243
g63
g64
sg20
F5.4509999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p244
I21
sg19
F0.83999999999999941
sg55
g11
sS'bdm_loop1.thisIndex'
p245
g59
(g98
S'\x19\x00\x00\x00'
tRp246
sS'bdm_loop1.thisRepN'
p247
I0
sS'bdm_loop1.thisTrialN'
p248
I21
sg65
g66
sg67
g68
sg78
V34-hula_hoops_bbq_beef_redo.png
p249
sg21
F1.6000000000000001
sg69
Vn
sa(dp250
g63
g64
sg20
F11.467000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p251
I22
sg19
F1.0599999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p252
g59
(g98
S'#\x00\x00\x00'
tRp253
sS'bdm_loop1.thisRepN'
p254
I0
sS'bdm_loop1.thisTrialN'
p255
I22
sg65
g66
sg67
g68
sg78
V46-pistachios.png
p256
sg21
F1.3999999999999999
sg69
Vn
sa(dp257
g63
g64
sg20
F1.8839999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p258
I23
sg19
F0.83999999999999986
sg55
g11
sS'bdm_loop1.thisIndex'
p259
g59
(g98
S'\t\x00\x00\x00'
tRp260
sS'bdm_loop1.thisRepN'
p261
I0
sS'bdm_loop1.thisTrialN'
p262
I23
sg65
g66
sg67
g68
sg78
V13-mccoys_steak_crisps.png
p263
sg21
F1.1000000000000001
sg69
Vn
sa(dp264
g63
g64
sg20
F4.3840000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p265
I24
sg19
F0.69999999999999973
sg55
g11
sS'bdm_loop1.thisIndex'
p266
g59
(g98
S'\x1e\x00\x00\x00'
tRp267
sS'bdm_loop1.thisRepN'
p268
I0
sS'bdm_loop1.thisTrialN'
p269
I24
sg65
g66
sg67
g68
sg78
V41-peanuts_redo.png
p270
sg21
F1.1000000000000001
sg69
Vn
sa(dp271
g63
g64
sg20
F5.0839999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p272
I25
sg19
F0.7399999999999991
sg55
g11
sS'bdm_loop1.thisIndex'
p273
g59
(g98
S'\x03\x00\x00\x00'
tRp274
sS'bdm_loop1.thisRepN'
p275
I0
sS'bdm_loop1.thisTrialN'
p276
I25
sg65
g66
sg67
g68
sg78
V4-corn.png
p277
sg21
F1.7
sg69
Vn
sa(dp278
g63
g64
sg20
F7.734
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p279
I26
sg19
F1.0799999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p280
g59
(g98
S'\x17\x00\x00\x00'
tRp281
sS'bdm_loop1.thisRepN'
p282
I0
sS'bdm_loop1.thisTrialN'
p283
I26
sg65
g66
sg67
g68
sg78
V31-hobnobs.png
p284
sg21
F1.8
sg69
Vn
sa(dp285
g63
g64
sg20
F2.851
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p286
I27
sg19
F0.9399999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p287
g59
(g98
S'\x1a\x00\x00\x00'
tRp288
sS'bdm_loop1.thisRepN'
p289
I0
sS'bdm_loop1.thisTrialN'
p290
I27
sg65
g66
sg67
g68
sg78
V35-raisins.png
p291
sg21
F1.5
sg69
Vn
sa(dp292
g63
g64
sg20
F3.0339999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p293
I28
sg19
F0.83999999999999897
sg55
g11
sS'bdm_loop1.thisIndex'
p294
g59
(g98
S"'\x00\x00\x00"
tRp295
sS'bdm_loop1.thisRepN'
p296
I0
sS'bdm_loop1.thisTrialN'
p297
I28
sg65
g66
sg67
g68
sg78
V51-mars.png
p298
sg21
F2
sg69
Vn
sa(dp299
g63
g64
sg20
F10.701000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p300
I29
sg19
F0.5399999999999987
sg55
g11
sS'bdm_loop1.thisIndex'
p301
g59
(g98
S'\x02\x00\x00\x00'
tRp302
sS'bdm_loop1.thisRepN'
p303
I0
sS'bdm_loop1.thisTrialN'
p304
I29
sg65
g66
sg67
g68
sg78
V3-ellas_strawberries_apples.png
p305
sg21
F2
sg69
Vn
sa(dp306
g63
g64
sg20
F2.7839999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p307
I30
sg19
F0.83999999999999897
sg55
g11
sS'bdm_loop1.thisIndex'
p308
g59
(g98
S'\n\x00\x00\x00'
tRp309
sS'bdm_loop1.thisRepN'
p310
I0
sS'bdm_loop1.thisTrialN'
p311
I30
sg65
g66
sg67
g68
sg78
V16-skips_prawn.png
p312
sg21
F1.8999999999999999
sg69
Vn
sa(dp313
g63
g64
sg20
F3.234
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p314
I31
sg19
F0.77999999999999914
sg55
g11
sS'bdm_loop1.thisIndex'
p315
g59
(g98
S' \x00\x00\x00'
tRp316
sS'bdm_loop1.thisRepN'
p317
I0
sS'bdm_loop1.thisTrialN'
p318
I31
sg65
g66
sg67
g68
sg78
V43-mrporky_pork_crackles_redo.png
p319
sg21
F1.8
sg69
Vn
sa(dp320
g63
g64
sg20
F3.9510000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p321
I32
sg19
F0.91999999999999948
sg55
g11
sS'bdm_loop1.thisIndex'
p322
g59
(g98
S'!\x00\x00\x00'
tRp323
sS'bdm_loop1.thisRepN'
p324
I0
sS'bdm_loop1.thisTrialN'
p325
I32
sg65
g66
sg67
g68
sg78
V44-crunch.png
p326
sg21
F1.3999999999999999
sg69
Vn
sa(dp327
g63
g64
sg20
F2.8340000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p328
I33
sg19
F0.79999999999999982
sg55
g11
sS'bdm_loop1.thisIndex'
p329
g59
(g98
S'\x0b\x00\x00\x00'
tRp330
sS'bdm_loop1.thisRepN'
p331
I0
sS'bdm_loop1.thisTrialN'
p332
I33
sg65
g66
sg67
g68
sg78
V17-jacobs_mini_cheddars_redo.png
p333
sg21
F1.1000000000000001
sg69
Vn
sa(dp334
g63
g64
sg20
F6.0170000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p335
I34
sg19
F1.1399999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p336
g59
(g98
S'\x1c\x00\x00\x00'
tRp337
sS'bdm_loop1.thisRepN'
p338
I0
sS'bdm_loop1.thisTrialN'
p339
I34
sg65
g66
sg67
g68
sg78
V38-maltesers.png
p340
sg21
F1.8
sg69
Vn
sa(dp341
g63
g64
sg20
F4.7169999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p342
I35
sg19
F0.51999999999999891
sg55
g11
sS'bdm_loop1.thisIndex'
p343
g59
(g98
S'&\x00\x00\x00'
tRp344
sS'bdm_loop1.thisRepN'
p345
I0
sS'bdm_loop1.thisTrialN'
p346
I35
sg65
g66
sg67
g68
sg78
V50-polo.png
p347
sg21
F1.7
sg69
Vn
sa(dp348
g63
g64
sg20
F2.5169999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p349
I36
sg19
F0.81999999999999917
sg55
g11
sS'bdm_loop1.thisIndex'
p350
g59
(g98
S'%\x00\x00\x00'
tRp351
sS'bdm_loop1.thisRepN'
p352
I0
sS'bdm_loop1.thisTrialN'
p353
I36
sg65
g66
sg67
g68
sg78
V49-yorkie.png
p354
sg21
F1.8
sg69
Vn
sa(dp355
g63
g64
sg20
F8.9000000000000004
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p356
I37
sg19
F1.0399999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p357
g59
(g98
S'\x07\x00\x00\x00'
tRp358
sS'bdm_loop1.thisRepN'
p359
I0
sS'bdm_loop1.thisTrialN'
p360
I37
sg65
g66
sg67
g68
sg78
V8-liquorice_catherine_wheels.png
p361
sg21
F1.8
sg69
Vn
sa(dp362
g63
g64
sg20
F7.0010000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p363
I38
sg19
F0.93999999999999906
sg55
g11
sS'bdm_loop1.thisIndex'
p364
g59
(g98
S'\x05\x00\x00\x00'
tRp365
sS'bdm_loop1.thisRepN'
p366
I0
sS'bdm_loop1.thisTrialN'
p367
I38
sg65
g66
sg67
g68
sg78
V6-sour_patch_kids.png
p368
sg21
F2
sg69
Vn
sa(dp369
g63
g64
sg20
F5.8010000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p370
I39
sg19
F1.0199999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p371
g59
(g98
S'\x1d\x00\x00\x00'
tRp372
sS'bdm_loop1.thisRepN'
p373
I0
sS'bdm_loop1.thisTrialN'
p374
I39
sg65
g66
sg67
g68
sg78
V40-sardines.png
p375
sg21
F1.6000000000000001
sg69
Vn
sa(dp376
g63
g64
sg55
g11
sg56
Vr
sg23
F12.350276601908263
sg57
Vn
sg58
g62
sg22
S'space'
p377
sg65
g66
sg67
g68
sg69
Vn
sa(dp378
g63
g64
sS'binary.thisRepN'
p379
I0
sg67
g68
sg79
S'1-treacle_cookies.png'
p380
sg26
F4.2000000000000011
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'21-nakd_banana_crunch.png'
p381
sg65
g66
sg55
g11
sS'binary.thisN'
p382
I0
sg56
Vr
sS'binary.thisIndex'
p383
g59
(g98
S'\x00\x00\x00\x00'
tRp384
sg24
S'right'
p385
sS'binary.thisTrialN'
p386
I0
sg25
F8.9166470899490378
sg27
F11.467000000000001
sg69
Vn
sa(dp387
g63
g64
sS'binary.thisRepN'
p388
I0
sg67
g68
sg79
S'30-spaghetti_hoops.png'
p389
sg26
F4.2000000000000002
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'19-caramello_redo.png'
p390
sg65
g66
sg55
g11
sS'binary.thisN'
p391
I1
sg56
Vr
sS'binary.thisIndex'
p392
g59
(g98
S'\x01\x00\x00\x00'
tRp393
sg24
S'left'
p394
sS'binary.thisTrialN'
p395
I1
sg25
F1.7667919766627165
sg27
F5.1840000000000002
sg69
Vn
sa(dp396
g63
g64
sS'binary.thisRepN'
p397
I0
sg67
g68
sg79
S'18-mms.png'
p398
sg26
F5.0000000000000009
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'43-mrporky_pork_crackles_redo.png'
p399
sg65
g66
sg55
g11
sS'binary.thisN'
p400
I2
sg56
Vr
sS'binary.thisIndex'
p401
g59
(g98
S'\x02\x00\x00\x00'
tRp402
sg24
S'left'
p403
sS'binary.thisTrialN'
p404
I2
sg25
F1.3499304931510778
sg27
F3.9510000000000001
sg69
Vn
sa(dp405
g63
g64
sS'binary.thisRepN'
p406
I0
sg67
g68
sg79
S'22-daim.png'
p407
sg26
F4.2000000000000011
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'7-olives.png'
p408
sg65
g66
sg55
g11
sS'binary.thisN'
p409
I3
sg56
Vr
sS'binary.thisIndex'
p410
g59
(g98
S'\x03\x00\x00\x00'
tRp411
sg24
S'right'
p412
sS'binary.thisTrialN'
p413
I3
sg25
F3.4001262413166842
sg27
F3.2010000000000001
sg69
Vn
sa(dp414
g63
g64
sS'binary.thisRepN'
p415
I0
sg67
g68
sg79
S'50-polo.png'
p416
sg26
F3.8000000000000003
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'48-twix.png'
p417
sg65
g66
sg55
g11
sS'binary.thisN'
p418
I4
sg56
Vr
sS'binary.thisIndex'
p419
g59
(g98
S'\x04\x00\x00\x00'
tRp420
sg24
S'right'
p421
sS'binary.thisTrialN'
p422
I4
sg25
F5.0999125319876839
sg27
F2.4340000000000002
sg69
Vn
sa(dp423
g63
g64
sS'binary.thisRepN'
p424
I0
sg67
g68
sg79
S'17-jacobs_mini_cheddars_redo.png'
p425
sg26
F5.0000000000000018
sg28
F3
sg58
g62
sg57
Vn
sg80
S'8-liquorice_catherine_wheels.png'
p426
sg65
g66
sg55
g11
sS'binary.thisN'
p427
I5
sg56
Vr
sS'binary.thisIndex'
p428
g59
(g98
S'\x05\x00\x00\x00'
tRp429
sg24
S'left'
p430
sS'binary.thisTrialN'
p431
I5
sg25
F1.5668354825911592
sg27
F4.101
sg69
Vn
sa(dp432
g63
g64
sS'binary.thisRepN'
p433
I0
sg67
g68
sg79
S'43-mrporky_pork_crackles_redo.png'
p434
sg26
F5.2000000000000011
sg28
F3
sg58
g62
sg57
Vn
sg80
S'18-mms.png'
p435
sg65
g66
sg55
g11
sS'binary.thisN'
p436
I6
sg56
Vr
sS'binary.thisIndex'
p437
g59
(g98
S'\x06\x00\x00\x00'
tRp438
sg24
S'right'
p439
sS'binary.thisTrialN'
p440
I6
sg25
F2.0000590152485529
sg27
F3.0670000000000002
sg69
Vn
sa(dp441
g63
g64
sS'binary.thisRepN'
p442
I0
sg67
g68
sg79
S'27-hartleys_raspberries_jelly.png'
p443
sg26
F4.6000000000000014
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'51-mars.png'
p444
sg65
g66
sg55
g11
sS'binary.thisN'
p445
I7
sg56
Vr
sS'binary.thisIndex'
p446
g59
(g98
S'\x07\x00\x00\x00'
tRp447
sg24
S'right'
p448
sS'binary.thisTrialN'
p449
I7
sg25
F2.0834033723649554
sg27
F2.117
sg69
Vn
sa(dp450
g63
g64
sS'binary.thisRepN'
p451
I0
sg67
g68
sg79
S'46-pistachios.png'
p452
sg26
F3.8999999999999995
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'29-beans.png'
p453
sg65
g66
sg55
g11
sS'binary.thisN'
p454
I8
sg56
Vr
sS'binary.thisIndex'
p455
g59
(g98
S'\x08\x00\x00\x00'
tRp456
sg24
S'left'
p457
sS'binary.thisTrialN'
p458
I8
sg25
F10.899791821570034
sg27
F1.5009999999999999
sg69
Vn
sa(dp459
g63
g64
sS'binary.thisRepN'
p460
I0
sg67
g68
sg79
S'40-sardines.png'
p461
sg26
F5.1000000000000014
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'5-pineapple.png'
p462
sg65
g66
sg55
g11
sS'binary.thisN'
p463
I9
sg56
Vr
sS'binary.thisIndex'
p464
g59
(g98
S'\t\x00\x00\x00'
tRp465
sg24
S'right'
p466
sS'binary.thisTrialN'
p467
I9
sg25
F1.3168138151559106
sg27
F2.0009999999999999
sg69
Vn
sa(dp468
g63
g64
sS'binary.thisRepN'
p469
I0
sg67
g68
sg79
S'42-mrkipling_lemon_slices.png'
p470
sg26
F3.7000000000000006
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'16-skips_prawn.png'
p471
sg65
g66
sg55
g11
sS'binary.thisN'
p472
I10
sg56
Vr
sS'binary.thisIndex'
p473
g59
(g98
S'\n\x00\x00\x00'
tRp474
sg24
S'left'
p475
sS'binary.thisTrialN'
p476
I10
sg25
F8.1165656660114109
sg27
F4.3840000000000003
sg69
Vn
sa(dp477
g63
g64
sS'binary.thisRepN'
p478
I0
sg67
g68
sg79
S'48-twix.png'
p479
sg26
F4.7000000000000011
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'50-polo.png'
p480
sg65
g66
sg55
g11
sS'binary.thisN'
p481
I11
sg56
Vr
sS'binary.thisIndex'
p482
g59
(g98
S'\x0b\x00\x00\x00'
tRp483
sg24
S'left'
p484
sS'binary.thisTrialN'
p485
I11
sg25
F1.4500428787123383
sg27
F1.5509999999999999
sg69
Vn
sa(dp486
g63
g64
sS'binary.thisRepN'
p487
I0
sg67
g68
sg79
S'25-kitkat.png'
p488
sg26
F4.4000000000000012
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'31-hobnobs.png'
p489
sg65
g66
sg55
g11
sS'binary.thisN'
p490
I12
sg56
Vr
sS'binary.thisIndex'
p491
g59
(g98
S'\x0c\x00\x00\x00'
tRp492
sg24
S'right'
p493
sS'binary.thisTrialN'
p494
I12
sg25
F3.0167110088814297
sg27
F1.234
sg69
Vn
sa(dp495
g63
g64
sS'binary.thisRepN'
p496
I0
sg67
g68
sg79
S'19-caramello_redo.png'
p497
sg26
F4.6000000000000005
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'30-spaghetti_hoops.png'
p498
sg65
g66
sg55
g11
sS'binary.thisN'
p499
I13
sg56
Vr
sS'binary.thisIndex'
p500
g59
(g98
S'\r\x00\x00\x00'
tRp501
sg24
S'right'
p502
sS'binary.thisTrialN'
p503
I13
sg25
F2.0501116443074352
sg27
F1.234
sg69
Vn
sa(dp504
g63
g64
sS'binary.thisRepN'
p505
I0
sg67
g68
sg79
S'45-chewy_nougat_redo.png'
p506
sg26
F4.8000000000000016
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'41-peanuts_redo.png'
p507
sg65
g66
sg55
g11
sS'binary.thisN'
p508
I14
sg56
Vr
sS'binary.thisIndex'
p509
g59
(g98
S'\x0e\x00\x00\x00'
tRp510
sg24
S'right'
p511
sS'binary.thisTrialN'
p512
I14
sg25
F1.983433250617054
sg27
F1.6339999999999999
sg69
Vn
sa(dp513
g63
g64
sS'binary.thisRepN'
p514
I0
sg67
g68
sg79
S'38-maltesers.png'
p515
sg26
F4.8000000000000007
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'6-sour_patch_kids.png'
p516
sg65
g66
sg55
g11
sS'binary.thisN'
p517
I15
sg56
Vr
sS'binary.thisIndex'
p518
g59
(g98
S'\x0f\x00\x00\x00'
tRp519
sg24
S'left'
p520
sS'binary.thisTrialN'
p521
I15
sg25
F1.1164906852845888
sg27
F1.667
sg69
Vn
sa(dp522
g63
g64
sS'binary.thisRepN'
p523
I0
sg67
g68
sg79
S'7-olives.png'
p524
sg26
F4.9000000000000012
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'22-daim.png'
p525
sg65
g66
sg55
g11
sS'binary.thisN'
p526
I16
sg56
Vr
sS'binary.thisIndex'
p527
g59
(g98
S'\x10\x00\x00\x00'
tRp528
sg24
S'left'
p529
sS'binary.thisTrialN'
p530
I16
sg25
F1.3835315523456302
sg27
F1.851
sg69
Vn
sa(dp531
g63
g64
sS'binary.thisRepN'
p532
I0
sg67
g68
sg79
S'34-hula_hoops_bbq_beef_redo.png'
p533
sg26
F3.5
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'36-fig_rolls.png'
p534
sg65
g66
sg55
g11
sS'binary.thisN'
p535
I17
sg56
Vr
sS'binary.thisIndex'
p536
g59
(g98
S'\x11\x00\x00\x00'
tRp537
sg24
S'right'
p538
sS'binary.thisTrialN'
p539
I17
sg25
F8.7666394493280677
sg27
F2.3010000000000002
sg69
Vn
sa(dp540
g63
g64
sS'binary.thisRepN'
p541
I0
sg67
g68
sg79
S'8-liquorice_catherine_wheels.png'
p542
sg26
F3.9000000000000004
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'17-jacobs_mini_cheddars_redo.png'
p543
sg65
g66
sg55
g11
sS'binary.thisN'
p544
I18
sg56
Vr
sS'binary.thisIndex'
p545
g59
(g98
S'\x12\x00\x00\x00'
tRp546
sg24
S'right'
p547
sS'binary.thisTrialN'
p548
I18
sg25
F1.0668617115907182
sg27
F2.3170000000000002
sg69
Vn
sa(dp549
g63
g64
sS'binary.thisRepN'
p550
I0
sg67
g68
sg79
S'31-hobnobs.png'
p551
sg26
F4.5000000000000018
sg28
F3
sg58
g62
sg57
Vn
sg80
S'25-kitkat.png'
p552
sg65
g66
sg55
g11
sS'binary.thisN'
p553
I19
sg56
Vr
sS'binary.thisIndex'
p554
g59
(g98
S'\x13\x00\x00\x00'
tRp555
sg24
S'left'
p556
sS'binary.thisTrialN'
p557
I19
sg25
F1.5835370832446642
sg27
F3.1509999999999998
sg69
Vn
sa(dp558
g63
g64
sS'binary.thisRepN'
p559
I0
sg67
g68
sg79
S'4-corn.png'
p560
sg26
F4.5000000000000018
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'10-bounty_redo.png'
p561
sg65
g66
sg55
g11
sS'binary.thisN'
p562
I20
sg56
Vr
sS'binary.thisIndex'
p563
g59
(g98
S'\x14\x00\x00\x00'
tRp564
sg24
S'left'
p565
sS'binary.thisTrialN'
p566
I20
sg25
F2.5837725740457245
sg27
F3.6509999999999998
sg69
Vn
sa(dp567
g63
g64
sS'binary.thisRepN'
p568
I0
sg67
g68
sg79
S'23-crunchie_redo.png'
p569
sg26
F4.5000000000000009
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'33-ambrosia_rice.png'
p570
sg65
g66
sg55
g11
sS'binary.thisN'
p571
I21
sg56
Vr
sS'binary.thisIndex'
p572
g59
(g98
S'\x15\x00\x00\x00'
tRp573
sg24
S'right'
p574
sS'binary.thisTrialN'
p575
I21
sg25
F1.6000211542577745
sg27
F3.867
sg69
Vn
sa(dp576
g63
g64
sS'binary.thisRepN'
p577
I0
sg67
g68
sg79
S'13-mccoys_steak_crisps.png'
p578
sg26
F5.1000000000000014
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'3-ellas_strawberries_apples.png'
p579
sg65
g66
sg55
g11
sS'binary.thisN'
p580
I22
sg56
Vr
sS'binary.thisIndex'
p581
g59
(g98
S'\x16\x00\x00\x00'
tRp582
sg24
S'right'
p583
sS'binary.thisTrialN'
p584
I22
sg25
F1.0833805645388566
sg27
F3.2839999999999998
sg69
Vn
sa(dp585
g63
g64
sS'binary.thisRepN'
p586
I0
sg67
g68
sg79
S'6-sour_patch_kids.png'
p587
sg26
F4.6000000000000005
sg28
F4
sg58
g62
sg57
Vn
sg80
S'38-maltesers.png'
p588
sg65
g66
sg55
g11
sS'binary.thisN'
p589
I23
sg56
Vr
sS'binary.thisIndex'
p590
g59
(g98
S'\x17\x00\x00\x00'
tRp591
sg24
S'right'
p592
sS'binary.thisTrialN'
p593
I23
sg25
F0.91644495559285133
sg27
F1.1339999999999999
sg69
Vn
sa(dp594
g63
g64
sS'binary.thisRepN'
p595
I0
sg67
g68
sg79
S'3-ellas_strawberries_apples.png'
p596
sg26
F5.3000000000000007
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'13-mccoys_steak_crisps.png'
p597
sg65
g66
sg55
g11
sS'binary.thisN'
p598
I24
sg56
Vr
sS'binary.thisIndex'
p599
g59
(g98
S'\x18\x00\x00\x00'
tRp600
sg24
S'left'
p601
sS'binary.thisTrialN'
p602
I24
sg25
F1.0167167108374997
sg27
F1.3169999999999999
sg69
Vn
sa(dp603
g63
g64
sS'binary.thisRepN'
p604
I0
sg67
g68
sg79
S'20-fruit_pastilles.png'
p605
sg26
F3.6000000000000001
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'2-steamed_puddings.png'
p606
sg65
g66
sg55
g11
sS'binary.thisN'
p607
I25
sg56
Vr
sS'binary.thisIndex'
p608
g59
(g98
S'\x19\x00\x00\x00'
tRp609
sg24
S'right'
p610
sS'binary.thisTrialN'
p611
I25
sg25
F2.0334633569473226
sg27
F2.7170000000000001
sg69
Vn
sa(dp612
g63
g64
sS'binary.thisRepN'
p613
I0
sg67
g68
sg79
S'16-skips_prawn.png'
p614
sg26
F4.2999999999999998
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'42-mrkipling_lemon_slices.png'
p615
sg65
g66
sg55
g11
sS'binary.thisN'
p616
I26
sg56
Vr
sS'binary.thisIndex'
p617
g59
(g98
S'\x1a\x00\x00\x00'
tRp618
sg24
S'right'
p619
sS'binary.thisTrialN'
p620
I26
sg25
F2.0832562618888915
sg27
F2.8839999999999999
sg69
Vn
sa(dp621
g63
g64
sS'binary.thisRepN'
p622
I0
sg67
g68
sg79
S'10-bounty_redo.png'
p623
sg26
F4.4000000000000004
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'4-corn.png'
p624
sg65
g66
sg55
g11
sS'binary.thisN'
p625
I27
sg56
Vr
sS'binary.thisIndex'
p626
g59
(g98
S'\x1b\x00\x00\x00'
tRp627
sg24
S'right'
p628
sS'binary.thisTrialN'
p629
I27
sg25
F2.8333375147685729
sg27
F2.4510000000000001
sg69
Vn
sa(dp630
g63
g64
sS'binary.thisRepN'
p631
I0
sg67
g68
sg79
S'2-steamed_puddings.png'
p632
sg26
F4.7000000000000011
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'20-fruit_pastilles.png'
p633
sg65
g66
sg55
g11
sS'binary.thisN'
p634
I28
sg56
Vr
sS'binary.thisIndex'
p635
g59
(g98
S'\x1c\x00\x00\x00'
tRp636
sg24
S'left'
p637
sS'binary.thisTrialN'
p638
I28
sg25
F1.3000494929819979
sg27
F2.0510000000000002
sg69
Vn
sa(dp639
g63
g64
sS'binary.thisRepN'
p640
I0
sg67
g68
sg79
S'51-mars.png'
p641
sg26
F4.4000000000000004
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'27-hartleys_raspberries_jelly.png'
p642
sg65
g66
sg55
g11
sS'binary.thisN'
p643
I29
sg56
Vr
sS'binary.thisIndex'
p644
g59
(g98
S'\x1d\x00\x00\x00'
tRp645
sg24
S'left'
p646
sS'binary.thisTrialN'
p647
I29
sg25
F0.88352413980283018
sg27
F0.86699999999999999
sg69
Vn
sa(dp648
g63
g64
sS'binary.thisRepN'
p649
I0
sg67
g68
sg79
S'36-fig_rolls.png'
p650
sg26
F3.5000000000000004
sg28
F3
sg58
g62
sg57
Vn
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p651
sg65
g66
sg55
g11
sS'binary.thisN'
p652
I30
sg56
Vr
sS'binary.thisIndex'
p653
g59
(g98
S'\x1e\x00\x00\x00'
tRp654
sg24
S'left'
p655
sS'binary.thisTrialN'
p656
I30
sg25
F0.95043203724071645
sg27
F1.2010000000000001
sg69
Vn
sa(dp657
g63
g64
sS'binary.thisRepN'
p658
I0
sg67
g68
sg79
S'29-beans.png'
p659
sg26
F4.7000000000000011
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'46-pistachios.png'
p660
sg65
g66
sg55
g11
sS'binary.thisN'
p661
I31
sg56
Vr
sS'binary.thisIndex'
p662
g59
(g98
S'\x1f\x00\x00\x00'
tRp663
sg24
S'right'
p664
sS'binary.thisTrialN'
p665
I31
sg25
F1.2833715554479568
sg27
F1.151
sg69
Vn
sa(dp666
g63
g64
sS'binary.thisRepN'
p667
I0
sg67
g68
sg79
S'44-crunch.png'
p668
sg26
F4.2000000000000002
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'26-walkers_smoky_bacon.png'
p669
sg65
g66
sg55
g11
sS'binary.thisN'
p670
I32
sg56
Vr
sS'binary.thisIndex'
p671
g59
(g98
S' \x00\x00\x00'
tRp672
sg24
S'left'
p673
sS'binary.thisTrialN'
p674
I32
sg25
F1.4834095874975901
sg27
F2.4009999999999998
sg69
Vn
sa(dp675
g63
g64
sS'binary.thisRepN'
p676
I0
sg67
g68
sg79
S'21-nakd_banana_crunch.png'
p677
sg26
F4.3000000000000007
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'1-treacle_cookies.png'
p678
sg65
g66
sg55
g11
sS'binary.thisN'
p679
I33
sg56
Vr
sS'binary.thisIndex'
p680
g59
(g98
S'!\x00\x00\x00'
tRp681
sg24
S'left'
p682
sS'binary.thisTrialN'
p683
I33
sg25
F1.4333843278309359
sg27
F1.917
sg69
Vn
sa(dp684
g63
g64
sS'binary.thisRepN'
p685
I0
sg67
g68
sg79
S'35-raisins.png'
p686
sg26
F4.2000000000000011
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'49-yorkie.png'
p687
sg65
g66
sg55
g11
sS'binary.thisN'
p688
I34
sg56
Vr
sS'binary.thisIndex'
p689
g59
(g98
S'"\x00\x00\x00'
tRp690
sg24
S'left'
p691
sS'binary.thisTrialN'
p692
I34
sg25
F1.2000403128322432
sg27
F1.167
sg69
Vn
sa(dp693
g63
g64
sS'binary.thisRepN'
p694
I0
sg67
g68
sg79
S'33-ambrosia_rice.png'
p695
sg26
F5.0000000000000009
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'23-crunchie_redo.png'
p696
sg65
g66
sg55
g11
sS'binary.thisN'
p697
I35
sg56
Vr
sS'binary.thisIndex'
p698
g59
(g98
S'#\x00\x00\x00'
tRp699
sg24
S'left'
p700
sS'binary.thisTrialN'
p701
I35
sg25
F1.2333710992916167
sg27
F2.867
sg69
Vn
sa(dp702
g63
g64
sS'binary.thisRepN'
p703
I0
sg67
g68
sg79
S'26-walkers_smoky_bacon.png'
p704
sg26
F4.6000000000000014
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'44-crunch.png'
p705
sg65
g66
sg55
g11
sS'binary.thisN'
p706
I36
sg56
Vr
sS'binary.thisIndex'
p707
g59
(g98
S'$\x00\x00\x00'
tRp708
sg24
S'right'
p709
sS'binary.thisTrialN'
p710
I36
sg25
F0.9166798761989412
sg27
F1.2669999999999999
sg69
Vn
sa(dp711
g63
g64
sS'binary.thisRepN'
p712
I0
sg67
g68
sg79
S'49-yorkie.png'
p713
sg26
F5.1000000000000005
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'35-raisins.png'
p714
sg65
g66
sg55
g11
sS'binary.thisN'
p715
I37
sg56
Vr
sS'binary.thisIndex'
p716
g59
(g98
S'%\x00\x00\x00'
tRp717
sg24
S'right'
p718
sS'binary.thisTrialN'
p719
I37
sg25
F0.83339653001712577
sg27
F2.8340000000000001
sg69
Vn
sa(dp720
g63
g64
sS'binary.thisRepN'
p721
I0
sg67
g68
sg79
S'5-pineapple.png'
p722
sg26
F4.3000000000000007
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'40-sardines.png'
p723
sg65
g66
sg55
g11
sS'binary.thisN'
p724
I38
sg56
Vr
sS'binary.thisIndex'
p725
g59
(g98
S'&\x00\x00\x00'
tRp726
sg24
S'left'
p727
sS'binary.thisTrialN'
p728
I38
sg25
F6.2497545307742257
sg27
F2.5510000000000002
sg69
Vn
sa(dp729
g63
g64
sS'binary.thisRepN'
p730
I0
sg67
g68
sg79
S'41-peanuts_redo.png'
p731
sg26
F4
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'45-chewy_nougat_redo.png'
p732
sg65
g66
sg55
g11
sS'binary.thisN'
p733
I39
sg56
Vr
sS'binary.thisIndex'
p734
g59
(g98
S"'\x00\x00\x00"
tRp735
sg24
S'left'
p736
sS'binary.thisTrialN'
p737
I39
sg25
F1.2834291452090838
sg27
F1.484
sg69
Vn
sa(dp738
g63
g64
sg56
Vr
sg29
S'space'
p739
sg57
Vn
sg58
g62
sg30
F441.7882222098051
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp740
g63
g64
sg56
Vr
sg57
Vn
sg31
S'space'
p741
sg58
g62
sg55
g11
sg32
F18.833091475347828
sg65
g66
sg67
g68
sg69
Vn
sa(dp742
g63
g64
sg81
S'12-topic.png'
p743
sg82
S'39-mackerel.png'
p744
sg56
Vr
sS'practice_loop.thisN'
p745
I0
sS'practice_loop.thisTrialN'
p746
I0
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p747
I0
sg83
S'39-mackerel.png'
p748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'12-topic.png'
p749
sS'practice_loop.thisIndex'
p750
g59
(g98
S'\x00\x00\x00\x00'
tRp751
sg34
cdatetime
datetime
p752
(S'\x07\xdf\t\x1c\x0c)\x05\x04&\x80'
tRp753
sa(dp754
g63
g64
sg81
S'11-snickers.png'
p755
sg82
S'54-frubes_yogurt.png'
p756
sg56
Vr
sS'practice_loop.thisN'
p757
I1
sS'practice_loop.thisTrialN'
p758
I1
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p759
I0
sg83
S'54-frubes_yogurt.png'
p760
sg33
g760
sg55
g11
sg65
g66
sg67
g68
sg84
S'11-snickers.png'
p761
sS'practice_loop.thisIndex'
p762
g59
(g98
S'\x01\x00\x00\x00'
tRp763
sg34
g752
(S'\x07\xdf\t\x1c\x0c)\x0b\r\xc3p'
tRp764
sa(dp765
g63
g64
sg81
S'53-cheestrings.png'
p766
sg82
S'47-picnic.png'
p767
sg56
Vr
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p770
I0
sg83
S'47-picnic.png'
p771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'53-cheestrings.png'
p772
sS'practice_loop.thisIndex'
p773
g59
(g98
S'\x02\x00\x00\x00'
tRp774
sg34
g752
(S'\x07\xdf\t\x1c\x0c)\x13\x08T\xd0'
tRp775
sa(dp776
g63
g64
sg81
S'15-walnut_whip.png'
p777
sg82
S'15-walnut_whip.png'
p778
sg56
Vr
sS'practice_loop.thisN'
p779
I3
sS'practice_loop.thisTrialN'
p780
I3
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p781
I0
sg83
S'28-maple_pecan.png'
p782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'28-maple_pecan.png'
p783
sS'practice_loop.thisIndex'
p784
g59
(g98
S'\x03\x00\x00\x00'
tRp785
sg34
g752
(S'\x07\xdf\t\x1c\x0c)\x1a\x077\xa8'
tRp786
sa(dp787
g63
g64
sg81
g755
sg82
S'11-snickers.png'
p788
sg56
Vr
sS'practice_loop.thisN'
p789
I4
sS'practice_loop.thisTrialN'
p790
I4
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p791
I0
sg83
g760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'54-frubes_yogurt.png'
p792
sS'practice_loop.thisIndex'
p793
g59
(g98
S'\x04\x00\x00\x00'
tRp794
sg34
g752
(S'\x07\xdf\t\x1c\x0c)!\x00#('
tRp795
sa(dp796
g63
g64
sg81
S'37-nakd_cashew_cookie.png'
p797
sg82
S'9-yu_mango_pieces.png'
p798
sg56
Vr
sS'practice_loop.thisN'
p799
I5
sS'practice_loop.thisTrialN'
p800
I5
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p801
I0
sg83
S'9-yu_mango_pieces.png'
p802
sg33
g797
sg55
g11
sg65
g66
sg67
g68
sg84
S'37-nakd_cashew_cookie.png'
p803
sS'practice_loop.thisIndex'
p804
g59
(g98
S'\x05\x00\x00\x00'
tRp805
sg34
g752
(S"\x07\xdf\t\x1c\x0c)'\t\x81\x98"
tRp806
sa(dp807
g63
g64
sg81
g777
sg82
S'28-maple_pecan.png'
p808
sg56
Vr
sS'practice_loop.thisN'
p809
I6
sS'practice_loop.thisTrialN'
p810
I6
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p811
I0
sg83
g782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'15-walnut_whip.png'
p812
sS'practice_loop.thisIndex'
p813
g59
(g98
S'\x06\x00\x00\x00'
tRp814
sg34
g752
(S'\x07\xdf\t\x1c\x0c)-\r\xa8\x18'
tRp815
sa(dp816
g63
g64
sg81
g743
sg82
S'12-topic.png'
p817
sg56
Vr
sS'practice_loop.thisN'
p818
I7
sS'practice_loop.thisTrialN'
p819
I7
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p820
I0
sg83
g748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'39-mackerel.png'
p821
sS'practice_loop.thisIndex'
p822
g59
(g98
S'\x07\x00\x00\x00'
tRp823
sg34
g752
(S'\x07\xdf\t\x1c\x0c)5\x00]\xc0'
tRp824
sa(dp825
g63
g64
sg81
S'32-hovis_crackers.png'
p826
sg82
S'32-hovis_crackers.png'
p827
sg56
Vr
sS'practice_loop.thisN'
p828
I8
sS'practice_loop.thisTrialN'
p829
I8
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p830
I0
sg83
S'24-food_doctor_apple_walnut_bar.png'
p831
sg33
g831
sg55
g11
sg65
g66
sg67
g68
sg84
S'24-food_doctor_apple_walnut_bar.png'
p832
sS'practice_loop.thisIndex'
p833
g59
(g98
S'\x08\x00\x00\x00'
tRp834
sg34
g752
(S'\x07\xdf\t\x1c\x0c);\x0b+`'
tRp835
sa(dp836
g63
g64
sg81
g766
sg82
S'53-cheestrings.png'
p837
sg56
Vr
sS'practice_loop.thisN'
p838
I9
sS'practice_loop.thisTrialN'
p839
I9
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p840
I0
sg83
g771
sg33
g771
sg55
g11
sg65
g66
sg67
g68
sg84
S'47-picnic.png'
p841
sS'practice_loop.thisIndex'
p842
g59
(g98
S'\t\x00\x00\x00'
tRp843
sg34
g752
(S'\x07\xdf\t\x1c\x0c*\x06\t\x18 '
tRp844
sa(dp845
g63
g64
sg81
g826
sg82
S'24-food_doctor_apple_walnut_bar.png'
p846
sg56
Vr
sS'practice_loop.thisN'
p847
I10
sS'practice_loop.thisTrialN'
p848
I10
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p849
I0
sg83
g831
sg33
g826
sg55
g11
sg65
g66
sg67
g68
sg84
S'32-hovis_crackers.png'
p850
sS'practice_loop.thisIndex'
p851
g59
(g98
S'\n\x00\x00\x00'
tRp852
sg34
g752
(S'\x07\xdf\t\x1c\x0c*\x0c\n\x9a\xd8'
tRp853
sa(dp854
g63
g64
sg81
S'52-aero_mousse.png'
p855
sg82
S'52-aero_mousse.png'
p856
sg56
Vr
sS'practice_loop.thisN'
p857
I11
sS'practice_loop.thisTrialN'
p858
I11
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p859
I0
sg83
S'14-discos_salt_vinegar.png'
p860
sg33
g855
sg55
g11
sg65
g66
sg67
g68
sg84
S'14-discos_salt_vinegar.png'
p861
sS'practice_loop.thisIndex'
p862
g59
(g98
S'\x0b\x00\x00\x00'
tRp863
sg34
g752
(S'\x07\xdf\t\x1c\x0c*\x12\x0e\t\xc0'
tRp864
sa(dp865
g63
g64
sg81
g797
sg82
S'37-nakd_cashew_cookie.png'
p866
sg56
Vr
sS'practice_loop.thisN'
p867
I12
sS'practice_loop.thisTrialN'
p868
I12
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p869
I0
sg83
g802
sg33
g797
sg55
g11
sg65
g66
sg67
g68
sg84
S'9-yu_mango_pieces.png'
p870
sS'practice_loop.thisIndex'
p871
g59
(g98
S'\x0c\x00\x00\x00'
tRp872
sg34
g752
(S'\x07\xdf\t\x1c\x0c*\x19\x05\x0c\xf8'
tRp873
sa(dp874
g63
g64
sg81
g855
sg82
S'14-discos_salt_vinegar.png'
p875
sg56
Vr
sS'practice_loop.thisN'
p876
I13
sS'practice_loop.thisTrialN'
p877
I13
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p878
I0
sg83
g860
sg33
g855
sg55
g11
sg65
g66
sg67
g68
sg84
S'52-aero_mousse.png'
p879
sS'practice_loop.thisIndex'
p880
g59
(g98
S'\r\x00\x00\x00'
tRp881
sg34
g752
(S'\x07\xdf\t\x1c\x0c*\x1f\x0428'
tRp882
sa(dp883
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg35
S'space'
p884
sg55
g11
sg36
F5.7167852483544266
sg65
g66
sg67
g68
sg69
Vn
sa(dp885
S'block_loop.thisRepN'
p886
I0
sg56
Vr
sS'block_loop.thisIndex'
p887
g59
(g98
S'\x00\x00\x00\x00'
tRp888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p889
I0
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p890
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p891
I0
sg69
Vn
sa(dp892
S'trial_loop.thisTrialN'
p893
I0
sS'img_left'
p894
S'21-nakd_banana_crunch.png'
p895
sS'block_loop.thisIndex'
p896
g888
sg38
S'left'
p897
sg58
g62
sS'trial_loop.thisN'
p898
I0
sg33
S'1-treacle_cookies.png'
p899
sg63
g64
sS'trial_loop.thisIndex'
p900
g59
(g98
S'\x00\x00\x00\x00'
tRp901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p902
I0
sS'img_right'
p903
S'1-treacle_cookies.png'
p904
sS'block_loop.thisRepN'
p905
I0
sS'img_correct'
p906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p907
I0
sS'img_wrong'
p908
S'21-nakd_banana_crunch.png'
p909
sg55
g11
sS'block_loop.thisTrial'
p910
Nsg69
Vn
sS'block_loop.thisTrialN'
p911
I0
sg39
F1.3167733312657219
sg34
g752
(S'\x07\xdf\t\x1c\x0c*3\x06U\x18'
tRp912
sa(dp913
S'trial_loop.thisTrialN'
p914
I1
sg894
S'22-daim.png'
p915
sS'block_loop.thisIndex'
p916
g888
sg38
S'right'
p917
sg58
g62
sS'trial_loop.thisN'
p918
I1
sg33
S'22-daim.png'
p919
sg63
g64
sS'trial_loop.thisIndex'
p920
g59
(g98
S'\x01\x00\x00\x00'
tRp921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p922
I0
sg903
S'7-olives.png'
p923
sS'block_loop.thisRepN'
p924
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p925
I0
sg908
S'7-olives.png'
p926
sg55
g11
sS'block_loop.thisTrial'
p927
Nsg69
Vn
sS'block_loop.thisTrialN'
p928
I0
sg39
F1.0834803487778117
sg34
g752
(S'\x07\xdf\t\x1c\x0c*9\x0b\xa8`'
tRp929
sa(dp930
S'trial_loop.thisTrialN'
p931
I2
sg894
S'3-ellas_strawberries_apples.png'
p932
sS'block_loop.thisIndex'
p933
g888
sg38
S'left'
p934
sg58
g62
sS'trial_loop.thisN'
p935
I2
sg33
S'3-ellas_strawberries_apples.png'
p936
sg63
g64
sS'trial_loop.thisIndex'
p937
g59
(g98
S'\x02\x00\x00\x00'
tRp938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p939
I0
sg903
S'13-mccoys_steak_crisps.png'
p940
sS'block_loop.thisRepN'
p941
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p942
I0
sg908
S'13-mccoys_steak_crisps.png'
p943
sg55
g11
sS'block_loop.thisTrial'
p944
Nsg69
Vn
sS'block_loop.thisTrialN'
p945
I0
sg39
F1.3334173421571904
sg34
g752
(S'\x07\xdf\t\x1c\x0c+\x03\ri\x98'
tRp946
sa(dp947
S'trial_loop.thisTrialN'
p948
I3
sg894
S'33-ambrosia_rice.png'
p949
sS'block_loop.thisIndex'
p950
g888
sg38
S'left'
p951
sg58
g62
sS'trial_loop.thisN'
p952
I3
sg33
S'23-crunchie_redo.png'
p953
sg63
g64
sS'trial_loop.thisIndex'
p954
g59
(g98
S'\x03\x00\x00\x00'
tRp955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p956
I0
sg903
S'23-crunchie_redo.png'
p957
sS'block_loop.thisRepN'
p958
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p959
I0
sg908
S'33-ambrosia_rice.png'
p960
sg55
g11
sS'block_loop.thisTrial'
p961
Nsg69
Vn
sS'block_loop.thisTrialN'
p962
I0
sg39
F1.133550083704904
sg34
g752
(S'\x07\xdf\t\x1c\x0c+\n\x03\xb9 '
tRp963
sa(dp964
S'trial_loop.thisTrialN'
p965
I4
sg894
S'44-crunch.png'
p966
sS'block_loop.thisIndex'
p967
g888
sg38
S'left'
p968
sg58
g62
sS'trial_loop.thisN'
p969
I4
sg33
S'44-crunch.png'
p970
sg63
g64
sS'trial_loop.thisIndex'
p971
g59
(g98
S'\x04\x00\x00\x00'
tRp972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p973
I0
sg903
S'26-walkers_smoky_bacon.png'
p974
sS'block_loop.thisRepN'
p975
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p976
I0
sg908
S'26-walkers_smoky_bacon.png'
p977
sg55
g11
sS'block_loop.thisTrial'
p978
Nsg69
Vn
sS'block_loop.thisTrialN'
p979
I0
sg39
F1.5168507068137842
sg34
g752
(S'\x07\xdf\t\x1c\x0c+\x10\x061\xf0'
tRp980
sa(dp981
S'trial_loop.thisTrialN'
p982
I5
sg894
S'17-jacobs_mini_cheddars_redo.png'
p983
sS'block_loop.thisIndex'
p984
g888
sg38
S'right'
p985
sg58
g62
sS'trial_loop.thisN'
p986
I5
sg33
S'17-jacobs_mini_cheddars_redo.png'
p987
sg63
g64
sS'trial_loop.thisIndex'
p988
g59
(g98
S'\x05\x00\x00\x00'
tRp989
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p990
I0
sg903
S'8-liquorice_catherine_wheels.png'
p991
sS'block_loop.thisRepN'
p992
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p993
I0
sg908
S'8-liquorice_catherine_wheels.png'
p994
sg55
g11
sS'block_loop.thisTrial'
p995
Nsg69
Vn
sS'block_loop.thisTrialN'
p996
I0
sg39
F1.4504690999583545
sg34
g752
(S'\x07\xdf\t\x1c\x0c+\x16\x0e\x9e0'
tRp997
sa(dp998
S'trial_loop.thisTrialN'
p999
I6
sg894
S'5-pineapple.png'
p1000
sS'block_loop.thisIndex'
p1001
g888
sg38
S'left'
p1002
sg58
g62
sS'trial_loop.thisN'
p1003
I6
sg33
S'40-sardines.png'
p1004
sg63
g64
sS'trial_loop.thisIndex'
p1005
g59
(g98
S'\x06\x00\x00\x00'
tRp1006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1007
I0
sg903
S'40-sardines.png'
p1008
sS'block_loop.thisRepN'
p1009
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1010
I0
sg908
S'5-pineapple.png'
p1011
sg55
g11
sS'block_loop.thisTrial'
p1012
Nsg69
Vn
sS'block_loop.thisTrialN'
p1013
I0
sg39
F1.1334979108032712
sg34
g752
(S'\x07\xdf\t\x1c\x0c+\x1d\x06\xd6\x00'
tRp1014
sa(dp1015
S'trial_loop.thisTrialN'
p1016
I7
sg894
S'35-raisins.png'
p1017
sS'block_loop.thisIndex'
p1018
g888
sg38
S'left'
p1019
sg58
g62
sS'trial_loop.thisN'
p1020
I7
sg33
S'49-yorkie.png'
p1021
sg63
g64
sS'trial_loop.thisIndex'
p1022
g59
(g98
S'\x07\x00\x00\x00'
tRp1023
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1024
I0
sg903
S'49-yorkie.png'
p1025
sS'block_loop.thisRepN'
p1026
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1027
I0
sg908
S'35-raisins.png'
p1028
sg55
g11
sS'block_loop.thisTrial'
p1029
Nsg69
Vn
sS'block_loop.thisTrialN'
p1030
I0
sg39
F0.98351706937683048
sg34
g752
(S'\x07\xdf\t\x1c\x0c+#\tN\xd0'
tRp1031
sa(dp1032
S'trial_loop.thisTrialN'
p1033
I8
sg894
g932
sS'block_loop.thisIndex'
p1034
g888
sg38
S'left'
p1035
sg58
g62
sS'trial_loop.thisN'
p1036
I8
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1037
g59
(g98
S'\x08\x00\x00\x00'
tRp1038
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1039
I0
sg903
g940
sS'block_loop.thisRepN'
p1040
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1041
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1042
Nsg69
Vn
sS'block_loop.thisTrialN'
p1043
I0
sg39
F1.9334809759930067
sg34
g752
(S'\x07\xdf\t\x1c\x0c+)\t\xa0\xd8'
tRp1044
sa(dp1045
S'trial_loop.thisTrialN'
p1046
I9
sg894
S'26-walkers_smoky_bacon.png'
p1047
sS'block_loop.thisIndex'
p1048
g888
sg38
S'right'
p1049
sg58
g62
sS'trial_loop.thisN'
p1050
I9
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1051
g59
(g98
S'\t\x00\x00\x00'
tRp1052
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1053
I0
sg903
S'44-crunch.png'
p1054
sS'block_loop.thisRepN'
p1055
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1056
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1057
Nsg69
Vn
sS'block_loop.thisTrialN'
p1058
I0
sg39
F2.0334237283495895
sg34
g752
(S'\x07\xdf\t\x1c\x0c+0\x08\xfc\xc8'
tRp1059
sa(dp1060
S'trial_loop.thisTrialN'
p1061
I10
sg894
S'45-chewy_nougat_redo.png'
p1062
sS'block_loop.thisIndex'
p1063
g888
sg38
S'right'
p1064
sg58
g62
sS'trial_loop.thisN'
p1065
I10
sg33
S'41-peanuts_redo.png'
p1066
sg63
g64
sS'trial_loop.thisIndex'
p1067
g59
(g98
S'\n\x00\x00\x00'
tRp1068
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1069
I0
sg903
S'41-peanuts_redo.png'
p1070
sS'block_loop.thisRepN'
p1071
I0
sg906
g1066
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1072
I0
sg908
S'45-chewy_nougat_redo.png'
p1073
sg55
g11
sS'block_loop.thisTrial'
p1074
Nsg69
Vn
sS'block_loop.thisTrialN'
p1075
I0
sg39
F1.066880242949992
sg34
g752
(S'\x07\xdf\t\x1c\x0c+7\n\x02\x80'
tRp1076
sa(dp1077
S'trial_loop.thisTrialN'
p1078
I11
sg894
S'48-twix.png'
p1079
sS'block_loop.thisIndex'
p1080
g888
sg38
S'left'
p1081
sg58
g62
sS'trial_loop.thisN'
p1082
I11
sg33
S'48-twix.png'
p1083
sg63
g64
sS'trial_loop.thisIndex'
p1084
g59
(g98
S'\x0b\x00\x00\x00'
tRp1085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1086
I0
sg903
S'50-polo.png'
p1087
sS'block_loop.thisRepN'
p1088
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1089
I0
sg908
S'50-polo.png'
p1090
sg55
g11
sS'block_loop.thisTrial'
p1091
Nsg69
Vn
sS'block_loop.thisTrialN'
p1092
I0
sg39
F1.5668383335705585
sg34
g752
(S'\x07\xdf\t\x1c\x0c,\x01\x0b\x858'
tRp1093
sa(dp1094
S'trial_loop.thisTrialN'
p1095
I12
sg894
S'49-yorkie.png'
p1096
sS'block_loop.thisIndex'
p1097
g888
sg38
S'right'
p1098
sg58
g62
sS'trial_loop.thisN'
p1099
I12
sg33
g1028
sg63
g64
sS'trial_loop.thisIndex'
p1100
g59
(g98
S'\x0c\x00\x00\x00'
tRp1101
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1102
I0
sg903
S'35-raisins.png'
p1103
sS'block_loop.thisRepN'
p1104
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1105
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p1106
Nsg69
Vn
sS'block_loop.thisTrialN'
p1107
I0
sg39
F1.0168393029016443
sg34
g752
(S'\x07\xdf\t\x1c\x0c,\x08\x05f\xd0'
tRp1108
sa(dp1109
S'trial_loop.thisTrialN'
p1110
I13
sg894
g895
sS'block_loop.thisIndex'
p1111
g888
sg38
S'left'
p1112
sg58
g62
sS'trial_loop.thisN'
p1113
I13
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1114
g59
(g98
S'\r\x00\x00\x00'
tRp1115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1116
I0
sg903
g904
sS'block_loop.thisRepN'
p1117
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1118
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1119
Nsg69
Vn
sS'block_loop.thisTrialN'
p1120
I0
sg39
F1.6501042887830408
sg34
g752
(S'\x07\xdf\t\x1c\x0c,\x0e\x065\xd8'
tRp1121
sa(dp1122
S'trial_loop.thisTrialN'
p1123
I14
sg894
S'31-hobnobs.png'
p1124
sS'block_loop.thisIndex'
p1125
g888
sg38
S'right'
p1126
sg58
g62
sS'trial_loop.thisN'
p1127
I14
sg33
S'25-kitkat.png'
p1128
sg63
g64
sS'trial_loop.thisIndex'
p1129
g59
(g98
S'\x0e\x00\x00\x00'
tRp1130
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1131
I0
sg903
S'25-kitkat.png'
p1132
sS'block_loop.thisRepN'
p1133
I0
sg906
g1128
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1134
I0
sg908
S'31-hobnobs.png'
p1135
sg55
g11
sS'block_loop.thisTrial'
p1136
Nsg69
Vn
sS'block_loop.thisTrialN'
p1137
I0
sg39
F1.7668629660220176
sg34
g752
(S'\x07\xdf\t\x1c\x0c,\x15\x01\x82\xb8'
tRp1138
sa(dp1139
S'trial_loop.thisTrialN'
p1140
I15
sg894
S'50-polo.png'
p1141
sS'block_loop.thisIndex'
p1142
g888
sg38
S'right'
p1143
sg58
g62
sS'trial_loop.thisN'
p1144
I15
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p1145
g59
(g98
S'\x0f\x00\x00\x00'
tRp1146
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1147
I0
sg903
S'48-twix.png'
p1148
sS'block_loop.thisRepN'
p1149
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1150
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p1151
Nsg69
Vn
sS'block_loop.thisTrialN'
p1152
I0
sg39
F1.0501509878067736
sg34
g752
(S'\x07\xdf\t\x1c\x0c,\x1b\r\xbf\x88'
tRp1153
sa(dp1154
S'trial_loop.thisTrialN'
p1155
I16
sg894
g1047
sS'block_loop.thisIndex'
p1156
g888
sg38
S'right'
p1157
sg58
g62
sS'trial_loop.thisN'
p1158
I16
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p1159
g59
(g98
S'\x10\x00\x00\x00'
tRp1160
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1161
I0
sg903
g1054
sS'block_loop.thisRepN'
p1162
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1163
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1164
Nsg69
Vn
sS'block_loop.thisTrialN'
p1165
I0
sg39
F1.1835288724269049
sg34
g752
(S'\x07\xdf\t\x1c\x0c,!\x0f\x07\xa8'
tRp1166
sa(dp1167
S'trial_loop.thisTrialN'
p1168
I17
sg894
S'13-mccoys_steak_crisps.png'
p1169
sS'block_loop.thisIndex'
p1170
g888
sg38
S'right'
p1171
sg58
g62
sS'trial_loop.thisN'
p1172
I17
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1173
g59
(g98
S'\x11\x00\x00\x00'
tRp1174
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1175
I0
sg903
S'3-ellas_strawberries_apples.png'
p1176
sS'block_loop.thisRepN'
p1177
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1178
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1179
Nsg69
Vn
sS'block_loop.thisTrialN'
p1180
I0
sg39
F0.96676101504090184
sg34
g752
(S'\x07\xdf\t\x1c\x0c,(\x02\xf5\xd0'
tRp1181
sa(dp1182
S'trial_loop.thisTrialN'
p1183
I18
sg894
g983
sS'block_loop.thisIndex'
p1184
g888
sg38
S'left'
p1185
sg58
g62
sS'trial_loop.thisN'
p1186
I18
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1187
g59
(g98
S'\x12\x00\x00\x00'
tRp1188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1189
I0
sg903
g991
sS'block_loop.thisRepN'
p1190
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1191
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p1192
Nsg69
Vn
sS'block_loop.thisTrialN'
p1193
I0
sg39
F1.2502326398243895
sg34
g752
(S'\x07\xdf\t\x1c\x0c,.\x03\r@'
tRp1194
sa(dp1195
S'trial_loop.thisTrialN'
p1196
I19
sg894
g1079
sS'block_loop.thisIndex'
p1197
g888
sg38
S'left'
p1198
sg58
g62
sS'trial_loop.thisN'
p1199
I19
sg33
g1090
sg63
g64
sS'trial_loop.thisIndex'
p1200
g59
(g98
S'\x13\x00\x00\x00'
tRp1201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1202
I0
sg903
g1087
sS'block_loop.thisRepN'
p1203
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1204
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p1205
Nsg69
Vn
sS'block_loop.thisTrialN'
p1206
I0
sg39
F1.3501414655383996
sg34
g752
(S'\x07\xdf\t\x1c\x0c,4\x07/\xd8'
tRp1207
sa(dp1208
S'trial_loop.thisTrialN'
p1209
I20
sg894
S'43-mrporky_pork_crackles_redo.png'
p1210
sS'block_loop.thisIndex'
p1211
g888
sg38
S'right'
p1212
sg58
g62
sS'trial_loop.thisN'
p1213
I20
sg33
S'18-mms.png'
p1214
sg63
g64
sS'trial_loop.thisIndex'
p1215
g59
(g98
S'\x14\x00\x00\x00'
tRp1216
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1217
I0
sg903
S'18-mms.png'
p1218
sS'block_loop.thisRepN'
p1219
I0
sg906
g1214
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1220
I0
sg908
S'43-mrporky_pork_crackles_redo.png'
p1221
sg55
g11
sS'block_loop.thisTrial'
p1222
Nsg69
Vn
sS'block_loop.thisTrialN'
p1223
I0
sg39
F0.98387372675279039
sg34
g752
(S'\x07\xdf\t\x1c\x0c,:\r:\xb8'
tRp1224
sa(dp1225
S'trial_loop.thisTrialN'
p1226
I21
sg894
S'2-steamed_puddings.png'
p1227
sS'block_loop.thisIndex'
p1228
g888
sg38
S'right'
p1229
sg58
g62
sS'trial_loop.thisN'
p1230
I21
sg33
S'2-steamed_puddings.png'
p1231
sg63
g64
sS'trial_loop.thisIndex'
p1232
g59
(g98
S'\x15\x00\x00\x00'
tRp1233
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1234
I0
sg903
S'20-fruit_pastilles.png'
p1235
sS'block_loop.thisRepN'
p1236
I0
sg906
g1231
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1237
I0
sg908
S'20-fruit_pastilles.png'
p1238
sg55
g11
sS'block_loop.thisTrial'
p1239
Nsg69
Vn
sS'block_loop.thisTrialN'
p1240
I0
sg39
F1.5167429398370587
sg34
g752
(S'\x07\xdf\t\x1c\x0c-\x04\rR('
tRp1241
sa(dp1242
S'trial_loop.thisTrialN'
p1243
I22
sg894
S'27-hartleys_raspberries_jelly.png'
p1244
sS'block_loop.thisIndex'
p1245
g888
sg38
S'right'
p1246
sg58
g62
sS'trial_loop.thisN'
p1247
I22
sg33
S'51-mars.png'
p1248
sg63
g64
sS'trial_loop.thisIndex'
p1249
g59
(g98
S'\x16\x00\x00\x00'
tRp1250
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1251
I0
sg903
S'51-mars.png'
p1252
sS'block_loop.thisRepN'
p1253
I0
sg906
g1248
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1254
I0
sg908
S'27-hartleys_raspberries_jelly.png'
p1255
sg55
g11
sS'block_loop.thisTrial'
p1256
Nsg69
Vn
sS'block_loop.thisTrialN'
p1257
I0
sg39
F0.98350794624639093
sg34
g752
(S'\x07\xdf\t\x1c\x0c-\x0b\x06|('
tRp1258
sa(dp1259
S'trial_loop.thisTrialN'
p1260
I23
sg894
S'20-fruit_pastilles.png'
p1261
sS'block_loop.thisIndex'
p1262
g888
sg38
S'left'
p1263
sg58
g62
sS'trial_loop.thisN'
p1264
I23
sg33
g1231
sg63
g64
sS'trial_loop.thisIndex'
p1265
g59
(g98
S'\x17\x00\x00\x00'
tRp1266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1267
I0
sg903
S'2-steamed_puddings.png'
p1268
sS'block_loop.thisRepN'
p1269
I0
sg906
g1231
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1270
I0
sg908
g1238
sg55
g11
sS'block_loop.thisTrial'
p1271
Nsg69
Vn
sS'block_loop.thisTrialN'
p1272
I0
sg39
F1.5001511018472229
sg34
g752
(S'\x07\xdf\t\x1c\x0c-\x11\x06\xd2\x18'
tRp1273
sa(dp1274
S'trial_loop.thisTrialN'
p1275
I24
sg894
g949
sS'block_loop.thisIndex'
p1276
g888
sg38
S'right'
p1277
sg58
g62
sS'trial_loop.thisN'
p1278
I24
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1279
g59
(g98
S'\x18\x00\x00\x00'
tRp1280
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1281
I0
sg903
g957
sS'block_loop.thisRepN'
p1282
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1283
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1284
Nsg69
Vn
sS'block_loop.thisTrialN'
p1285
I0
sg39
F1.1335232845085557
sg34
g752
(S'\x07\xdf\t\x1c\x0c-\x17\x0e\xff\xd8'
tRp1286
sa(dp1287
S'trial_loop.thisTrialN'
p1288
I25
sg894
S'7-olives.png'
p1289
sS'block_loop.thisIndex'
p1290
g888
sg38
S'left'
p1291
sg58
g62
sS'trial_loop.thisN'
p1292
I25
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1293
g59
(g98
S'\x19\x00\x00\x00'
tRp1294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1295
I0
sg903
S'22-daim.png'
p1296
sS'block_loop.thisRepN'
p1297
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1298
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1299
Nsg69
Vn
sS'block_loop.thisTrialN'
p1300
I0
sg39
F2.200527545011937
sg34
g752
(S'\x07\xdf\t\x1c\x0c-\x1e\x026h'
tRp1301
sa(dp1302
S'trial_loop.thisTrialN'
p1303
I26
sg894
S'46-pistachios.png'
p1304
sS'block_loop.thisIndex'
p1305
g888
sg38
S'left'
p1306
sg58
g62
sS'trial_loop.thisN'
p1307
I26
sg33
S'29-beans.png'
p1308
sg63
g64
sS'trial_loop.thisIndex'
p1309
g59
(g98
S'\x1a\x00\x00\x00'
tRp1310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1311
I0
sg903
S'29-beans.png'
p1312
sS'block_loop.thisRepN'
p1313
I0
sg906
S'46-pistachios.png'
p1314
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1315
I0
sg908
g1308
sg55
g11
sS'block_loop.thisTrial'
p1316
Nsg69
Vn
sS'block_loop.thisTrialN'
p1317
I0
sg39
F1.166764265153688
sg34
g752
(S'\x07\xdf\t\x1c\x0c-%\x05\xd8\x18'
tRp1318
sa(dp1319
S'trial_loop.thisTrialN'
p1320
I27
sg894
S'36-fig_rolls.png'
p1321
sS'block_loop.thisIndex'
p1322
g888
sg38
S'right'
p1323
sg58
g62
sS'trial_loop.thisN'
p1324
I27
sg33
S'36-fig_rolls.png'
p1325
sg63
g64
sS'trial_loop.thisIndex'
p1326
g59
(g98
S'\x1b\x00\x00\x00'
tRp1327
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1328
I0
sg903
S'34-hula_hoops_bbq_beef_redo.png'
p1329
sS'block_loop.thisRepN'
p1330
I0
sg906
g1325
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1331
I0
sg908
S'34-hula_hoops_bbq_beef_redo.png'
p1332
sg55
g11
sS'block_loop.thisTrial'
p1333
Nsg69
Vn
sS'block_loop.thisTrialN'
p1334
I0
sg39
F1.4334855375564075
sg34
g752
(S'\x07\xdf\t\x1c\x0c-+\x08\xcd\xe8'
tRp1335
sa(dp1336
S'trial_loop.thisTrialN'
p1337
I28
sg894
g1261
sS'block_loop.thisIndex'
p1338
g888
sg38
S'left'
p1339
sg58
g62
sS'trial_loop.thisN'
p1340
I28
sg33
g1238
sg63
g64
sS'trial_loop.thisIndex'
p1341
g59
(g98
S'\x1c\x00\x00\x00'
tRp1342
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1343
I0
sg903
g1268
sS'block_loop.thisRepN'
p1344
I0
sg906
g1231
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1345
I0
sg908
g1238
sg55
g11
sS'block_loop.thisTrial'
p1346
Nsg69
Vn
sS'block_loop.thisTrialN'
p1347
I0
sg39
F1.0667932881133311
sg34
g752
(S'\x07\xdf\t\x1c\x0c-2\x00\xc78'
tRp1348
sa(dp1349
S'trial_loop.thisTrialN'
p1350
I29
sg894
S'29-beans.png'
p1351
sS'block_loop.thisIndex'
p1352
g888
sg38
S'left'
p1353
sg58
g62
sS'trial_loop.thisN'
p1354
I29
sg33
g1308
sg63
g64
sS'trial_loop.thisIndex'
p1355
g59
(g98
S'\x1d\x00\x00\x00'
tRp1356
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1357
I0
sg903
S'46-pistachios.png'
p1358
sS'block_loop.thisRepN'
p1359
I0
sg906
g1314
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1360
I0
sg908
g1308
sg55
g11
sS'block_loop.thisTrial'
p1361
Nsg69
Vn
sS'block_loop.thisTrialN'
p1362
I0
sg39
F1.3835158719666651
sg34
g752
(S'\x07\xdf\t\x1c\x0c-8\x02I\xf0'
tRp1363
sa(dp1364
S'trial_loop.thisTrialN'
p1365
I30
sg894
S'8-liquorice_catherine_wheels.png'
p1366
sS'block_loop.thisIndex'
p1367
g888
sg38
S'right'
p1368
sg58
g62
sS'trial_loop.thisN'
p1369
I30
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1370
g59
(g98
S'\x1e\x00\x00\x00'
tRp1371
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1372
I0
sg903
S'17-jacobs_mini_cheddars_redo.png'
p1373
sS'block_loop.thisRepN'
p1374
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1375
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p1376
Nsg69
Vn
sS'block_loop.thisTrialN'
p1377
I0
sg39
F1.4005516072684259
sg34
g752
(S'\x07\xdf\t\x1c\x0c.\x02\x08\x93P'
tRp1378
sa(dp1379
S'trial_loop.thisTrialN'
p1380
I31
sg894
S'1-treacle_cookies.png'
p1381
sS'block_loop.thisIndex'
p1382
g888
sg38
S'right'
p1383
sg58
g62
sS'trial_loop.thisN'
p1384
I31
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p1385
g59
(g98
S'\x1f\x00\x00\x00'
tRp1386
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1387
I0
sg903
S'21-nakd_banana_crunch.png'
p1388
sS'block_loop.thisRepN'
p1389
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1390
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1391
Nsg69
Vn
sS'block_loop.thisTrialN'
p1392
I0
sg39
F1.2334044557374
sg34
g752
(S'\x07\xdf\t\x1c\x0c.\x08\x0f\x17H'
tRp1393
sa(dp1394
S'trial_loop.thisTrialN'
p1395
I32
sg894
g932
sS'block_loop.thisIndex'
p1396
g888
sg38
S'left'
p1397
sg58
g62
sS'trial_loop.thisN'
p1398
I32
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1399
g59
(g98
S' \x00\x00\x00'
tRp1400
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1401
I0
sg903
g940
sS'block_loop.thisRepN'
p1402
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1403
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1404
Nsg69
Vn
sS'block_loop.thisTrialN'
p1405
I0
sg39
F2.3834682606302522
sg34
g752
(S'\x07\xdf\t\x1c\x0c.\x0f\x03\xf7\xa0'
tRp1406
sa(dp1407
S'trial_loop.thisTrialN'
p1408
I33
sg894
S'25-kitkat.png'
p1409
sS'block_loop.thisIndex'
p1410
g888
sg38
S'right'
p1411
sg58
g62
sS'trial_loop.thisN'
p1412
I33
sg33
g1135
sg63
g64
sS'trial_loop.thisIndex'
p1413
g59
(g98
S'!\x00\x00\x00'
tRp1414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1415
I0
sg903
S'31-hobnobs.png'
p1416
sS'block_loop.thisRepN'
p1417
I0
sg906
g1128
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1418
I0
sg908
g1135
sg55
g11
sS'block_loop.thisTrial'
p1419
Nsg69
Vn
sS'block_loop.thisTrialN'
p1420
I0
sg39
F1.2501351363680442
sg34
g752
(S'\x07\xdf\t\x1c\x0c.\x16\n90'
tRp1421
sa(dp1422
S'trial_loop.thisTrialN'
p1423
I34
sg894
S'51-mars.png'
p1424
sS'block_loop.thisIndex'
p1425
g888
sg38
S'left'
p1426
sg58
g62
sS'trial_loop.thisN'
p1427
I34
sg33
g1248
sg63
g64
sS'trial_loop.thisIndex'
p1428
g59
(g98
S'"\x00\x00\x00'
tRp1429
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1430
I0
sg903
S'27-hartleys_raspberries_jelly.png'
p1431
sS'block_loop.thisRepN'
p1432
I0
sg906
g1248
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1433
I0
sg908
g1255
sg55
g11
sS'block_loop.thisTrial'
p1434
Nsg69
Vn
sS'block_loop.thisTrialN'
p1435
I0
sg39
F0.93347299325250788
sg34
g752
(S'\x07\xdf\t\x1c\x0c.\x1c\x0e\x9aH'
tRp1436
sa(dp1437
S'trial_loop.thisTrialN'
p1438
I35
sg894
g1304
sS'block_loop.thisIndex'
p1439
g888
sg38
S'right'
p1440
sg58
g62
sS'trial_loop.thisN'
p1441
I35
sg33
g1314
sg63
g64
sS'trial_loop.thisIndex'
p1442
g59
(g98
S'#\x00\x00\x00'
tRp1443
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1444
I0
sg903
g1312
sS'block_loop.thisRepN'
p1445
I0
sg906
g1314
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1446
I0
sg908
g1308
sg55
g11
sS'block_loop.thisTrial'
p1447
Nsg69
Vn
sS'block_loop.thisTrialN'
p1448
I0
sg39
F1.1669159371958813
sg34
g752
(S'\x07\xdf\t\x1c\x0c."\x0e8\xa0'
tRp1449
sa(dp1450
S'trial_loop.thisTrialN'
p1451
I36
sg894
g1244
sS'block_loop.thisIndex'
p1452
g888
sg38
S'right'
p1453
sg58
g62
sS'trial_loop.thisN'
p1454
I36
sg33
g1248
sg63
g64
sS'trial_loop.thisIndex'
p1455
g59
(g98
S'$\x00\x00\x00'
tRp1456
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1457
I0
sg903
g1252
sS'block_loop.thisRepN'
p1458
I0
sg906
g1248
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1459
I0
sg908
g1255
sg55
g11
sS'block_loop.thisTrial'
p1460
Nsg69
Vn
sS'block_loop.thisTrialN'
p1461
I0
sg39
F1.1001232192793395
sg34
g752
(S'\x07\xdf\t\x1c\x0c.)\x01\xe8H'
tRp1462
sa(dp1463
S'trial_loop.thisTrialN'
p1464
I37
sg894
S'18-mms.png'
p1465
sS'block_loop.thisIndex'
p1466
g888
sg38
S'left'
p1467
sg58
g62
sS'trial_loop.thisN'
p1468
I37
sg33
g1214
sg63
g64
sS'trial_loop.thisIndex'
p1469
g59
(g98
S'%\x00\x00\x00'
tRp1470
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1471
I0
sg903
S'43-mrporky_pork_crackles_redo.png'
p1472
sS'block_loop.thisRepN'
p1473
I0
sg906
g1214
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1474
I0
sg908
g1221
sg55
g11
sS'block_loop.thisTrial'
p1475
Nsg69
Vn
sS'block_loop.thisTrialN'
p1476
I0
sg39
F1.2501895900513773
sg34
g752
(S'\x07\xdf\t\x1c\x0c./\x03\xe8\x00'
tRp1477
sa(dp1478
S'trial_loop.thisTrialN'
p1479
I38
sg894
S'4-corn.png'
p1480
sS'block_loop.thisIndex'
p1481
g888
sg38
S'left'
p1482
sg58
g62
sS'trial_loop.thisN'
p1483
I38
sg33
S'10-bounty_redo.png'
p1484
sg63
g64
sS'trial_loop.thisIndex'
p1485
g59
(g98
S'&\x00\x00\x00'
tRp1486
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1487
I0
sg903
S'10-bounty_redo.png'
p1488
sS'block_loop.thisRepN'
p1489
I0
sg906
g1484
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1490
I0
sg908
S'4-corn.png'
p1491
sg55
g11
sS'block_loop.thisTrial'
p1492
Nsg69
Vn
sS'block_loop.thisTrialN'
p1493
I0
sg39
F1.7670325992257858
sg34
g752
(S'\x07\xdf\t\x1c\x0c.5\x08I\x18'
tRp1494
sa(dp1495
S'trial_loop.thisTrialN'
p1496
I39
sg894
S'38-maltesers.png'
p1497
sS'block_loop.thisIndex'
p1498
g888
sg38
S'left'
p1499
sg58
g62
sS'trial_loop.thisN'
p1500
I39
sg33
S'38-maltesers.png'
p1501
sg63
g64
sS'trial_loop.thisIndex'
p1502
g59
(g98
S"'\x00\x00\x00"
tRp1503
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1504
I0
sg903
S'6-sour_patch_kids.png'
p1505
sS'block_loop.thisRepN'
p1506
I0
sg906
g1501
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1507
I0
sg908
S'6-sour_patch_kids.png'
p1508
sg55
g11
sS'block_loop.thisTrial'
p1509
Nsg69
Vn
sS'block_loop.thisTrialN'
p1510
I0
sg39
F1.1331734694813349
sg34
g752
(S'\x07\xdf\t\x1c\x0c/\x00\x05?\xc0'
tRp1511
sa(dp1512
S'trial_loop.thisTrialN'
p1513
I40
sg894
S'10-bounty_redo.png'
p1514
sS'block_loop.thisIndex'
p1515
g888
sg38
S'left'
p1516
sg58
g62
sS'trial_loop.thisN'
p1517
I40
sg33
g1484
sg63
g64
sS'trial_loop.thisIndex'
p1518
g59
(g98
S'(\x00\x00\x00'
tRp1519
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1520
I0
sg903
S'4-corn.png'
p1521
sS'block_loop.thisRepN'
p1522
I0
sg906
g1484
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1523
I0
sg908
g1491
sg55
g11
sS'block_loop.thisTrial'
p1524
Nsg69
Vn
sS'block_loop.thisTrialN'
p1525
I0
sg39
F1.5671462392165267
sg34
g752
(S'\x07\xdf\t\x1c\x0c/\x06\x07\xb8\x90'
tRp1526
sa(dp1527
S'trial_loop.thisTrialN'
p1528
I41
sg894
g1227
sS'block_loop.thisIndex'
p1529
g888
sg38
S'left'
p1530
sg58
g62
sS'trial_loop.thisN'
p1531
I41
sg33
g1231
sg63
g64
sS'trial_loop.thisIndex'
p1532
g59
(g98
S')\x00\x00\x00'
tRp1533
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1534
I0
sg903
g1235
sS'block_loop.thisRepN'
p1535
I0
sg906
g1231
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1536
I0
sg908
g1238
sg55
g11
sS'block_loop.thisTrial'
p1537
Nsg69
Vn
sS'block_loop.thisTrialN'
p1538
I0
sg39
F1.3834927790430811
sg34
g752
(S'\x07\xdf\t\x1c\x0c/\r\x01\x9a('
tRp1539
sa(dp1540
S'trial_loop.thisTrialN'
p1541
I42
sg894
g1244
sS'block_loop.thisIndex'
p1542
g888
sg38
S'right'
p1543
sg58
g62
sS'trial_loop.thisN'
p1544
I42
sg33
g1255
sg63
g64
sS'trial_loop.thisIndex'
p1545
g59
(g98
S'*\x00\x00\x00'
tRp1546
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1547
I0
sg903
g1252
sS'block_loop.thisRepN'
p1548
I0
sg906
g1248
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1549
I0
sg908
g1255
sg55
g11
sS'block_loop.thisTrial'
p1550
Nsg69
Vn
sS'block_loop.thisTrialN'
p1551
I0
sg39
F1.0500999552969006
sg34
g752
(S'\x07\xdf\t\x1c\x0c/\x13\x08\x1e '
tRp1552
sa(dp1553
S'trial_loop.thisTrialN'
p1554
I43
sg894
S'42-mrkipling_lemon_slices.png'
p1555
sS'block_loop.thisIndex'
p1556
g888
sg38
S'right'
p1557
sg58
g62
sS'trial_loop.thisN'
p1558
I43
sg33
S'42-mrkipling_lemon_slices.png'
p1559
sg63
g64
sS'trial_loop.thisIndex'
p1560
g59
(g98
S'+\x00\x00\x00'
tRp1561
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1562
I0
sg903
S'16-skips_prawn.png'
p1563
sS'block_loop.thisRepN'
p1564
I0
sg906
g1559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1565
I0
sg908
S'16-skips_prawn.png'
p1566
sg55
g11
sS'block_loop.thisTrial'
p1567
Nsg69
Vn
sS'block_loop.thisTrialN'
p1568
I0
sg39
F3.4667219566363201
sg34
g752
(S'\x07\xdf\t\x1c\x0c/\x19\tf@'
tRp1569
sa(dp1570
S'trial_loop.thisTrialN'
p1571
I44
sg894
g949
sS'block_loop.thisIndex'
p1572
g888
sg38
S'left'
p1573
sg58
g62
sS'trial_loop.thisN'
p1574
I44
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1575
g59
(g98
S',\x00\x00\x00'
tRp1576
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1577
I0
sg903
g957
sS'block_loop.thisRepN'
p1578
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1579
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1580
Nsg69
Vn
sS'block_loop.thisTrialN'
p1581
I0
sg39
F1.4500961920057307
sg34
g752
(S'\x07\xdf\t\x1c\x0c/"\x01\x92X'
tRp1582
sa(dp1583
S'trial_loop.thisTrialN'
p1584
I45
sg894
g983
sS'block_loop.thisIndex'
p1585
g888
sg38
S'left'
p1586
sg58
g62
sS'trial_loop.thisN'
p1587
I45
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1588
g59
(g98
S'-\x00\x00\x00'
tRp1589
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1590
I0
sg903
g991
sS'block_loop.thisRepN'
p1591
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1592
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p1593
Nsg69
Vn
sS'block_loop.thisTrialN'
p1594
I0
sg39
F0.91721956637775293
sg34
g752
(S'\x07\xdf\t\x1c\x0c/(\t\x08\x80'
tRp1595
sa(dp1596
S'trial_loop.thisTrialN'
p1597
I46
sg894
S'16-skips_prawn.png'
p1598
sS'block_loop.thisIndex'
p1599
g888
sg38
S'right'
p1600
sg58
g62
sS'trial_loop.thisN'
p1601
I46
sg33
g1559
sg63
g64
sS'trial_loop.thisIndex'
p1602
g59
(g98
S'.\x00\x00\x00'
tRp1603
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1604
I0
sg903
S'42-mrkipling_lemon_slices.png'
p1605
sS'block_loop.thisRepN'
p1606
I0
sg906
g1559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1607
I0
sg908
g1566
sg55
g11
sS'block_loop.thisTrial'
p1608
Nsg69
Vn
sS'block_loop.thisTrialN'
p1609
I0
sg39
F1.3334087892235402
sg34
g752
(S'\x07\xdf\t\x1c\x0c/.\x08-\xc0'
tRp1610
sa(dp1611
S'trial_loop.thisTrialN'
p1612
I47
sg894
S'19-caramello_redo.png'
p1613
sS'block_loop.thisIndex'
p1614
g888
sg38
S'right'
p1615
sg58
g62
sS'trial_loop.thisN'
p1616
I47
sg33
S'19-caramello_redo.png'
p1617
sg63
g64
sS'trial_loop.thisIndex'
p1618
g59
(g98
S'/\x00\x00\x00'
tRp1619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1620
I0
sg903
S'30-spaghetti_hoops.png'
p1621
sS'block_loop.thisRepN'
p1622
I0
sg906
g1617
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1623
I0
sg908
S'30-spaghetti_hoops.png'
p1624
sg55
g11
sS'block_loop.thisTrial'
p1625
Nsg69
Vn
sS'block_loop.thisTrialN'
p1626
I0
sg39
F1.3335048671906407
sg34
g752
(S'\x07\xdf\t\x1c\x0c/4\r\xfa '
tRp1627
sa(dp1628
S'trial_loop.thisTrialN'
p1629
I48
sg894
g1514
sS'block_loop.thisIndex'
p1630
g888
sg38
S'right'
p1631
sg58
g62
sS'trial_loop.thisN'
p1632
I48
sg33
g1484
sg63
g64
sS'trial_loop.thisIndex'
p1633
g59
(g98
S'0\x00\x00\x00'
tRp1634
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1635
I0
sg903
g1521
sS'block_loop.thisRepN'
p1636
I0
sg906
g1484
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1637
I0
sg908
g1491
sg55
g11
sS'block_loop.thisTrial'
p1638
Nsg69
Vn
sS'block_loop.thisTrialN'
p1639
I0
sg39
F1.283373551132172
sg34
g752
(S'\x07\xdf\t\x1c\x0c/;\x04I\xa8'
tRp1640
sa(dp1641
S'trial_loop.thisTrialN'
p1642
I49
sg894
g1321
sS'block_loop.thisIndex'
p1643
g888
sg38
S'left'
p1644
sg58
g62
sS'trial_loop.thisN'
p1645
I49
sg33
g1325
sg63
g64
sS'trial_loop.thisIndex'
p1646
g59
(g98
S'1\x00\x00\x00'
tRp1647
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1648
I0
sg903
g1329
sS'block_loop.thisRepN'
p1649
I0
sg906
g1325
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1650
I0
sg908
g1332
sg55
g11
sS'block_loop.thisTrial'
p1651
Nsg69
Vn
sS'block_loop.thisTrialN'
p1652
I0
sg39
F1.3501842302139266
sg34
g752
(S'\x07\xdf\t\x1c\x0c0\x05\t#\xd8'
tRp1653
sa(dp1654
S'trial_loop.thisTrialN'
p1655
I50
sg894
g915
sS'block_loop.thisIndex'
p1656
g888
sg38
S'right'
p1657
sg58
g62
sS'trial_loop.thisN'
p1658
I50
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p1659
g59
(g98
S'2\x00\x00\x00'
tRp1660
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1661
I0
sg903
g923
sS'block_loop.thisRepN'
p1662
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1663
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1664
Nsg69
Vn
sS'block_loop.thisTrialN'
p1665
I0
sg39
F1.1006765941529011
sg34
g752
(S'\x07\xdf\t\x1c\x0c0\x0b\x0e\xf4 '
tRp1666
sa(dp1667
S'trial_loop.thisTrialN'
p1668
I51
sg894
S'30-spaghetti_hoops.png'
p1669
sS'block_loop.thisIndex'
p1670
g888
sg38
S'right'
p1671
sg58
g62
sS'trial_loop.thisN'
p1672
I51
sg33
g1617
sg63
g64
sS'trial_loop.thisIndex'
p1673
g59
(g98
S'3\x00\x00\x00'
tRp1674
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1675
I0
sg903
S'19-caramello_redo.png'
p1676
sS'block_loop.thisRepN'
p1677
I0
sg906
g1617
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1678
I0
sg908
g1624
sg55
g11
sS'block_loop.thisTrial'
p1679
Nsg69
Vn
sS'block_loop.thisTrialN'
p1680
I0
sg39
F1.7001783001796866
sg34
g752
(S'\x07\xdf\t\x1c\x0c0\x12\x01\xad\xb0'
tRp1681
sa(dp1682
S'trial_loop.thisTrialN'
p1683
I52
sg894
g1321
sS'block_loop.thisIndex'
p1684
g888
sg38
S'left'
p1685
sg58
g62
sS'trial_loop.thisN'
p1686
I52
sg33
g1325
sg63
g64
sS'trial_loop.thisIndex'
p1687
g59
(g98
S'4\x00\x00\x00'
tRp1688
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1689
I0
sg903
g1329
sS'block_loop.thisRepN'
p1690
I0
sg906
g1325
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1691
I0
sg908
g1332
sg55
g11
sS'block_loop.thisTrial'
p1692
Nsg69
Vn
sS'block_loop.thisTrialN'
p1693
I0
sg39
F1.5334767565454968
sg34
g752
(S'\x07\xdf\t\x1c\x0c0\x18\x0c\xf8P'
tRp1694
sa(dp1695
S'trial_loop.thisTrialN'
p1696
I53
sg894
g1169
sS'block_loop.thisIndex'
p1697
g888
sg38
S'right'
p1698
sg58
g62
sS'trial_loop.thisN'
p1699
I53
sg33
g943
sg63
g64
sS'trial_loop.thisIndex'
p1700
g59
(g98
S'5\x00\x00\x00'
tRp1701
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1702
I0
sg903
g1176
sS'block_loop.thisRepN'
p1703
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1704
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1705
Nsg69
Vn
sS'block_loop.thisTrialN'
p1706
I0
sg39
F1.0001995684760914
sg34
g752
(S'\x07\xdf\t\x1c\x0c0\x1f\x06"P'
tRp1707
sa(dp1708
S'trial_loop.thisTrialN'
p1709
I54
sg894
g1000
sS'block_loop.thisIndex'
p1710
g888
sg38
S'left'
p1711
sg58
g62
sS'trial_loop.thisN'
p1712
I54
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p1713
g59
(g98
S'6\x00\x00\x00'
tRp1714
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1715
I0
sg903
g1008
sS'block_loop.thisRepN'
p1716
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1717
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p1718
Nsg69
Vn
sS'block_loop.thisTrialN'
p1719
I0
sg39
F1.7168456890922243
sg34
g752
(S'\x07\xdf\t\x1c\x0c0%\x06\xb2\xd8'
tRp1720
sa(dp1721
S'trial_loop.thisTrialN'
p1722
I55
sg894
g932
sS'block_loop.thisIndex'
p1723
g888
sg38
S'left'
p1724
sg58
g62
sS'trial_loop.thisN'
p1725
I55
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1726
g59
(g98
S'7\x00\x00\x00'
tRp1727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1728
I0
sg903
g940
sS'block_loop.thisRepN'
p1729
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1730
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1731
Nsg69
Vn
sS'block_loop.thisTrialN'
p1732
I0
sg39
F1.0506194035297085
sg34
g752
(S'\x07\xdf\t\x1c\x0c0,\x02\xf5\xd0'
tRp1733
sa(dp1734
S'trial_loop.thisTrialN'
p1735
I56
sg894
g1047
sS'block_loop.thisIndex'
p1736
g888
sg38
S'right'
p1737
sg58
g62
sS'trial_loop.thisN'
p1738
I56
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1739
g59
(g98
S'8\x00\x00\x00'
tRp1740
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1741
I0
sg903
g1054
sS'block_loop.thisRepN'
p1742
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1743
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1744
Nsg69
Vn
sS'block_loop.thisTrialN'
p1745
I0
sg39
F1.1168142713140696
sg34
g752
(S'\x07\xdf\t\x1c\x0c02\x04=\xf0'
tRp1746
sa(dp1747
S'trial_loop.thisTrialN'
p1748
I57
sg894
S'6-sour_patch_kids.png'
p1749
sS'block_loop.thisIndex'
p1750
g888
sg38
S'right'
p1751
sg58
g62
sS'trial_loop.thisN'
p1752
I57
sg33
g1501
sg63
g64
sS'trial_loop.thisIndex'
p1753
g59
(g98
S'9\x00\x00\x00'
tRp1754
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1755
I0
sg903
S'38-maltesers.png'
p1756
sS'block_loop.thisRepN'
p1757
I0
sg906
g1501
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1758
I0
sg908
g1508
sg55
g11
sS'block_loop.thisTrial'
p1759
Nsg69
Vn
sS'block_loop.thisTrialN'
p1760
I0
sg39
F1.0665891580720199
sg34
g752
(S'\x07\xdf\t\x1c\x0c08\x06x@'
tRp1761
sa(dp1762
S'trial_loop.thisTrialN'
p1763
I58
sg894
g1124
sS'block_loop.thisIndex'
p1764
g888
sg38
S'left'
p1765
sg58
g62
sS'trial_loop.thisN'
p1766
I58
sg33
g1128
sg63
g64
sS'trial_loop.thisIndex'
p1767
g59
(g98
S':\x00\x00\x00'
tRp1768
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1769
I0
sg903
g1132
sS'block_loop.thisRepN'
p1770
I0
sg906
g1128
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1771
I0
sg908
g1135
sg55
g11
sS'block_loop.thisTrial'
p1772
Nsg69
Vn
sS'block_loop.thisTrialN'
p1773
I0
sg39
F1.2168314342015947
sg34
g752
(S'\x07\xdf\t\x1c\x0c1\x02\x07\xfe\xe0'
tRp1774
sa(dp1775
S'trial_loop.thisTrialN'
p1776
I59
sg894
g1555
sS'block_loop.thisIndex'
p1777
g888
sg38
S'left'
p1778
sg58
g62
sS'trial_loop.thisN'
p1779
I59
sg33
g1566
sg63
g64
sS'trial_loop.thisIndex'
p1780
g59
(g98
S';\x00\x00\x00'
tRp1781
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1782
I0
sg903
g1563
sS'block_loop.thisRepN'
p1783
I0
sg906
g1559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1784
I0
sg908
g1566
sg55
g11
sS'block_loop.thisTrial'
p1785
Nsg69
Vn
sS'block_loop.thisTrialN'
p1786
I0
sg39
F1.3667276015748939
sg34
g752
(S'\x07\xdf\t\x1c\x0c1\x08\x0b\xe2\xf8'
tRp1787
sa(dp1788
S'trial_loop.thisTrialN'
p1789
I60
sg894
g1227
sS'block_loop.thisIndex'
p1790
g888
sg38
S'left'
p1791
sg58
g62
sS'trial_loop.thisN'
p1792
I60
sg33
g1231
sg63
g64
sS'trial_loop.thisIndex'
p1793
g59
(g98
S'<\x00\x00\x00'
tRp1794
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1795
I0
sg903
g1235
sS'block_loop.thisRepN'
p1796
I0
sg906
g1231
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1797
I0
sg908
g1238
sg55
g11
sS'block_loop.thisTrial'
p1798
Nsg69
Vn
sS'block_loop.thisTrialN'
p1799
I0
sg39
F2.6335295566623245
sg34
g752
(S'\x07\xdf\t\x1c\x0c1\x0f\x02\xab\x98'
tRp1800
sa(dp1801
S'trial_loop.thisTrialN'
p1802
I61
sg894
g1598
sS'block_loop.thisIndex'
p1803
g888
sg38
S'right'
p1804
sg58
g62
sS'trial_loop.thisN'
p1805
I61
sg33
g1559
sg63
g64
sS'trial_loop.thisIndex'
p1806
g59
(g98
S'=\x00\x00\x00'
tRp1807
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1808
I0
sg903
g1605
sS'block_loop.thisRepN'
p1809
I0
sg906
g1559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1810
I0
sg908
g1566
sg55
g11
sS'block_loop.thisTrial'
p1811
Nsg69
Vn
sS'block_loop.thisTrialN'
p1812
I0
sg39
F1.1500449884370028
sg34
g752
(S'\x07\xdf\t\x1c\x0c1\x16\x0c\xbd\xb8'
tRp1813
sa(dp1814
S'trial_loop.thisTrialN'
p1815
I62
sg894
g1424
sS'block_loop.thisIndex'
p1816
g888
sg38
S'left'
p1817
sg58
g62
sS'trial_loop.thisN'
p1818
I62
sg33
g1248
sg63
g64
sS'trial_loop.thisIndex'
p1819
g59
(g98
S'>\x00\x00\x00'
tRp1820
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1821
I0
sg903
g1431
sS'block_loop.thisRepN'
p1822
I0
sg906
g1248
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1823
I0
sg908
g1255
sg55
g11
sS'block_loop.thisTrial'
p1824
Nsg69
Vn
sS'block_loop.thisTrialN'
p1825
I0
sg39
F1.3000905470689759
sg34
g752
(S'\x07\xdf\t\x1c\x0c1\x1d\x00m`'
tRp1826
sa(dp1827
S'trial_loop.thisTrialN'
p1828
I63
sg894
g1210
sS'block_loop.thisIndex'
p1829
g888
sg38
S'right'
p1830
sg58
g62
sS'trial_loop.thisN'
p1831
I63
sg33
g1214
sg63
g64
sS'trial_loop.thisIndex'
p1832
g59
(g98
S'?\x00\x00\x00'
tRp1833
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1834
I0
sg903
g1218
sS'block_loop.thisRepN'
p1835
I0
sg906
g1214
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1836
I0
sg908
g1221
sg55
g11
sS'block_loop.thisTrial'
p1837
Nsg69
Vn
sS'block_loop.thisTrialN'
p1838
I0
sg39
F0.96686365025561827
sg34
g752
(S'\x07\xdf\t\x1c\x0c1#\x05\x86\x10'
tRp1839
sa(dp1840
S'trial_loop.thisTrialN'
p1841
I64
sg894
g1669
sS'block_loop.thisIndex'
p1842
g888
sg38
S'right'
p1843
sg58
g62
sS'trial_loop.thisN'
p1844
I64
sg33
g1617
sg63
g64
sS'trial_loop.thisIndex'
p1845
g59
(g98
S'@\x00\x00\x00'
tRp1846
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1847
I0
sg903
g1676
sS'block_loop.thisRepN'
p1848
I0
sg906
g1617
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1849
I0
sg908
g1624
sg55
g11
sS'block_loop.thisTrial'
p1850
Nsg69
Vn
sS'block_loop.thisTrialN'
p1851
I0
sg39
F1.4834973976267065
sg34
g752
(S'\x07\xdf\t\x1c\x0c1)\x05_\x00'
tRp1852
sa(dp1853
S'trial_loop.thisTrialN'
p1854
I65
sg894
g1227
sS'block_loop.thisIndex'
p1855
g888
sg38
S'right'
p1856
sg58
g62
sS'trial_loop.thisN'
p1857
I65
sg33
g1231
sg63
g64
sS'trial_loop.thisIndex'
p1858
g59
(g98
S'A\x00\x00\x00'
tRp1859
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1860
I0
sg903
g1235
sS'block_loop.thisRepN'
p1861
I0
sg906
g1231
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1862
I0
sg908
g1238
sg55
g11
sS'block_loop.thisTrial'
p1863
Nsg69
Vn
sS'block_loop.thisTrialN'
p1864
I0
sg39
F1.150188392641212
sg34
g752
(S'\x07\xdf\t\x1c\x0c1/\rR('
tRp1865
sa(dp1866
S'trial_loop.thisTrialN'
p1867
I66
sg894
g1244
sS'block_loop.thisIndex'
p1868
g888
sg38
S'right'
p1869
sg58
g62
sS'trial_loop.thisN'
p1870
I66
sg33
g1248
sg63
g64
sS'trial_loop.thisIndex'
p1871
g59
(g98
S'B\x00\x00\x00'
tRp1872
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1873
I0
sg903
g1252
sS'block_loop.thisRepN'
p1874
I0
sg906
g1248
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1875
I0
sg908
g1255
sg55
g11
sS'block_loop.thisTrial'
p1876
Nsg69
Vn
sS'block_loop.thisTrialN'
p1877
I0
sg39
F0.80011078901407018
sg34
g752
(S'\x07\xdf\t\x1c\x0c16\x00\xc78'
tRp1878
sa(dp1879
S'trial_loop.thisTrialN'
p1880
I67
sg894
g1017
sS'block_loop.thisIndex'
p1881
g888
sg38
S'left'
p1882
sg58
g62
sS'trial_loop.thisN'
p1883
I67
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p1884
g59
(g98
S'C\x00\x00\x00'
tRp1885
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1886
I0
sg903
g1025
sS'block_loop.thisRepN'
p1887
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1888
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p1889
Nsg69
Vn
sS'block_loop.thisTrialN'
p1890
I0
sg39
F1.2002102311344061
sg34
g752
(S'\x07\xdf\t\x1c\x0c1;\r\x81\x08'
tRp1891
sa(dp1892
S'trial_loop.thisTrialN'
p1893
I68
sg894
g966
sS'block_loop.thisIndex'
p1894
g888
sg38
S'left'
p1895
sg58
g62
sS'trial_loop.thisN'
p1896
I68
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p1897
g59
(g98
S'D\x00\x00\x00'
tRp1898
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1899
I0
sg903
g974
sS'block_loop.thisRepN'
p1900
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1901
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1902
Nsg69
Vn
sS'block_loop.thisTrialN'
p1903
I0
sg39
F0.91678051573035191
sg34
g752
(S'\x07\xdf\t\x1c\x0c2\x06\x01\xe8H'
tRp1904
sa(dp1905
S'trial_loop.thisTrialN'
p1906
I69
sg894
g1409
sS'block_loop.thisIndex'
p1907
g888
sg38
S'left'
p1908
sg58
g62
sS'trial_loop.thisN'
p1909
I69
sg33
g1128
sg63
g64
sS'trial_loop.thisIndex'
p1910
g59
(g98
S'E\x00\x00\x00'
tRp1911
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1912
I0
sg903
g1416
sS'block_loop.thisRepN'
p1913
I0
sg906
g1128
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1914
I0
sg908
g1135
sg55
g11
sS'block_loop.thisTrial'
p1915
Nsg69
Vn
sS'block_loop.thisTrialN'
p1916
I0
sg39
F2.2834801777189568
sg34
g752
(S'\x07\xdf\t\x1c\x0c2\x0c\x01\r\x88'
tRp1917
sa(dp1918
S'trial_loop.thisTrialN'
p1919
I70
sg894
g1141
sS'block_loop.thisIndex'
p1920
g888
sg38
S'right'
p1921
sg58
g62
sS'trial_loop.thisN'
p1922
I70
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p1923
g59
(g98
S'F\x00\x00\x00'
tRp1924
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1925
I0
sg903
g1148
sS'block_loop.thisRepN'
p1926
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1927
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p1928
Nsg69
Vn
sS'block_loop.thisTrialN'
p1929
I0
sg39
F0.88343433398767957
sg34
g752
(S'\x07\xdf\t\x1c\x0c2\x13\x05\xdf\xe8'
tRp1930
sa(dp1931
S'trial_loop.thisTrialN'
p1932
I71
sg894
S'23-crunchie_redo.png'
p1933
sS'block_loop.thisIndex'
p1934
g888
sg38
S'left'
p1935
sg58
g62
sS'trial_loop.thisN'
p1936
I71
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p1937
g59
(g98
S'G\x00\x00\x00'
tRp1938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1939
I0
sg903
S'33-ambrosia_rice.png'
p1940
sS'block_loop.thisRepN'
p1941
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1942
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1943
Nsg69
Vn
sS'block_loop.thisTrialN'
p1944
I0
sg39
F1.3668433512902993
sg34
g752
(S'\x07\xdf\t\x1c\x0c2\x19\x04\xc6\xa8'
tRp1945
sa(dp1946
S'trial_loop.thisTrialN'
p1947
I72
sg894
S'41-peanuts_redo.png'
p1948
sS'block_loop.thisIndex'
p1949
g888
sg38
S'right'
p1950
sg58
g62
sS'trial_loop.thisN'
p1951
I72
sg33
g1073
sg63
g64
sS'trial_loop.thisIndex'
p1952
g59
(g98
S'H\x00\x00\x00'
tRp1953
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1954
I0
sg903
S'45-chewy_nougat_redo.png'
p1955
sS'block_loop.thisRepN'
p1956
I0
sg906
g1066
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1957
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p1958
Nsg69
Vn
sS'block_loop.thisTrialN'
p1959
I0
sg39
F1.9001199691629154
sg34
g752
(S'\x07\xdf\t\x1c\x0c2\x1f\n\xd1\x88'
tRp1960
sa(dp1961
S'trial_loop.thisTrialN'
p1962
I73
sg894
g1244
sS'block_loop.thisIndex'
p1963
g888
sg38
S'right'
p1964
sg58
g62
sS'trial_loop.thisN'
p1965
I73
sg33
g1248
sg63
g64
sS'trial_loop.thisIndex'
p1966
g59
(g98
S'I\x00\x00\x00'
tRp1967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1968
I0
sg903
g1252
sS'block_loop.thisRepN'
p1969
I0
sg906
g1248
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1970
I0
sg908
g1255
sg55
g11
sS'block_loop.thisTrial'
p1971
Nsg69
Vn
sS'block_loop.thisTrialN'
p1972
I0
sg39
F1.266751777870013
sg34
g752
(S'\x07\xdf\t\x1c\x0c2&\t\xb0x'
tRp1973
sa(dp1974
S'trial_loop.thisTrialN'
p1975
I74
sg894
g1351
sS'block_loop.thisIndex'
p1976
g888
sg38
S'right'
p1977
sg58
g62
sS'trial_loop.thisN'
p1978
I74
sg33
g1308
sg63
g64
sS'trial_loop.thisIndex'
p1979
g59
(g98
S'J\x00\x00\x00'
tRp1980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1981
I0
sg903
g1358
sS'block_loop.thisRepN'
p1982
I0
sg906
g1314
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1983
I0
sg908
g1308
sg55
g11
sS'block_loop.thisTrial'
p1984
Nsg69
Vn
sS'block_loop.thisTrialN'
p1985
I0
sg39
F0.88352442490031535
sg34
g752
(S'\x07\xdf\t\x1c\x0c2,\x0eP\x10'
tRp1986
sa(dp1987
S'trial_loop.thisTrialN'
p1988
I75
sg894
g1169
sS'block_loop.thisIndex'
p1989
g888
sg38
S'right'
p1990
sg58
g62
sS'trial_loop.thisN'
p1991
I75
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1992
g59
(g98
S'K\x00\x00\x00'
tRp1993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1994
I0
sg903
g1176
sS'block_loop.thisRepN'
p1995
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1996
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1997
Nsg69
Vn
sS'block_loop.thisTrialN'
p1998
I0
sg39
F0.66688486153361737
sg34
g752
(S'\x07\xdf\t\x1c\x0c22\x0c\xf8P'
tRp1999
sa(dp2000
S'trial_loop.thisTrialN'
p2001
I76
sg894
g1480
sS'block_loop.thisIndex'
p2002
g888
sg38
S'right'
p2003
sg58
g62
sS'trial_loop.thisN'
p2004
I76
sg33
g1484
sg63
g64
sS'trial_loop.thisIndex'
p2005
g59
(g98
S'L\x00\x00\x00'
tRp2006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2007
I0
sg903
g1488
sS'block_loop.thisRepN'
p2008
I0
sg906
g1484
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2009
I0
sg908
g1491
sg55
g11
sS'block_loop.thisTrial'
p2010
Nsg69
Vn
sS'block_loop.thisTrialN'
p2011
I0
sg39
F0.95016775156000222
sg34
g752
(S'\x07\xdf\t\x1c\x0c28\x08\x8b\x80'
tRp2012
sa(dp2013
S'trial_loop.thisTrialN'
p2014
I77
sg894
g1289
sS'block_loop.thisIndex'
p2015
g888
sg38
S'left'
p2016
sg58
g62
sS'trial_loop.thisN'
p2017
I77
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2018
g59
(g98
S'M\x00\x00\x00'
tRp2019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2020
I0
sg903
g1296
sS'block_loop.thisRepN'
p2021
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2022
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2023
Nsg69
Vn
sS'block_loop.thisTrialN'
p2024
I0
sg39
F0.96684682948398404
sg34
g752
(S'\x07\xdf\t\x1c\x0c3\x02\x08)\xd8'
tRp2025
sa(dp2026
S'trial_loop.thisTrialN'
p2027
I78
sg894
g983
sS'block_loop.thisIndex'
p2028
g888
sg38
S'left'
p2029
sg58
g62
sS'trial_loop.thisN'
p2030
I78
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2031
g59
(g98
S'N\x00\x00\x00'
tRp2032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2033
I0
sg903
g991
sS'block_loop.thisRepN'
p2034
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2035
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p2036
Nsg69
Vn
sS'block_loop.thisTrialN'
p2037
I0
sg39
F1.0501239035147591
sg34
g752
(S'\x07\xdf\t\x1c\x0c3\x08\x08AH'
tRp2038
sa(dp2039
S'trial_loop.thisTrialN'
p2040
I79
sg894
S'34-hula_hoops_bbq_beef_redo.png'
p2041
sS'block_loop.thisIndex'
p2042
g888
sg38
S'right'
p2043
sg58
g62
sS'trial_loop.thisN'
p2044
I79
sg33
g1332
sg63
g64
sS'trial_loop.thisIndex'
p2045
g59
(g98
S'O\x00\x00\x00'
tRp2046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2047
I0
sg903
S'36-fig_rolls.png'
p2048
sS'block_loop.thisRepN'
p2049
I0
sg906
g1325
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2050
I0
sg908
g1332
sg55
g11
sS'block_loop.thisTrial'
p2051
Nsg69
Vn
sS'block_loop.thisTrialN'
p2052
I0
sg39
F0.98351108232236584
sg34
g752
(S'\x07\xdf\t\x1c\x0c3\x0e\t\x89h'
tRp2053
sa(dp2054
S'trial_loop.thisTrialN'
p2055
I80
sg894
g966
sS'block_loop.thisIndex'
p2056
g888
sg38
S'left'
p2057
sg58
g62
sS'trial_loop.thisN'
p2058
I80
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2059
g59
(g98
S'P\x00\x00\x00'
tRp2060
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2061
I0
sg903
g974
sS'block_loop.thisRepN'
p2062
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2063
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2064
Nsg69
Vn
sS'block_loop.thisTrialN'
p2065
I0
sg39
F0.88353810959597467
sg34
g752
(S'\x07\xdf\t\x1c\x0c3\x14\t\xdbp'
tRp2066
sa(dp2067
S'trial_loop.thisTrialN'
p2068
I81
sg894
g1514
sS'block_loop.thisIndex'
p2069
g888
sg38
S'left'
p2070
sg58
g62
sS'trial_loop.thisN'
p2071
I81
sg33
g1484
sg63
g64
sS'trial_loop.thisIndex'
p2072
g59
(g98
S'Q\x00\x00\x00'
tRp2073
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2074
I0
sg903
g1521
sS'block_loop.thisRepN'
p2075
I0
sg906
g1484
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2076
I0
sg908
g1491
sg55
g11
sS'block_loop.thisTrial'
p2077
Nsg69
Vn
sS'block_loop.thisTrialN'
p2078
I0
sg39
F1.0168398730984336
sg34
g752
(S'\x07\xdf\t\x1c\x0c3\x1a\x08\x87\x98'
tRp2079
sa(dp2080
S'trial_loop.thisTrialN'
p2081
I82
sg894
g1062
sS'block_loop.thisIndex'
p2082
g888
sg38
S'left'
p2083
sg58
g62
sS'trial_loop.thisN'
p2084
I82
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p2085
g59
(g98
S'R\x00\x00\x00'
tRp2086
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2087
I0
sg903
g1070
sS'block_loop.thisRepN'
p2088
I0
sg906
g1066
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2089
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p2090
Nsg69
Vn
sS'block_loop.thisTrialN'
p2091
I0
sg39
F1.6000704761809175
sg34
g752
(S'\x07\xdf\t\x1c\x0c3 \tV\xa0'
tRp2092
sa(dp2093
S'trial_loop.thisTrialN'
p2094
I83
sg894
g1261
sS'block_loop.thisIndex'
p2095
g888
sg38
S'right'
p2096
sg58
g62
sS'trial_loop.thisN'
p2097
I83
sg33
g1231
sg63
g64
sS'trial_loop.thisIndex'
p2098
g59
(g98
S'S\x00\x00\x00'
tRp2099
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2100
I0
sg903
g1268
sS'block_loop.thisRepN'
p2101
I0
sg906
g1231
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2102
I0
sg908
g1238
sg55
g11
sS'block_loop.thisTrial'
p2103
Nsg69
Vn
sS'block_loop.thisTrialN'
p2104
I0
sg39
F1.4167799455353816
sg34
g752
(S"\x07\xdf\t\x1c\x0c3'\x03\xb1P"
tRp2105
sa(dp2106
S'trial_loop.thisTrialN'
p2107
I84
sg894
g1017
sS'block_loop.thisIndex'
p2108
g888
sg38
S'left'
p2109
sg58
g62
sS'trial_loop.thisN'
p2110
I84
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p2111
g59
(g98
S'T\x00\x00\x00'
tRp2112
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2113
I0
sg903
g1025
sS'block_loop.thisRepN'
p2114
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2115
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p2116
Nsg69
Vn
sS'block_loop.thisTrialN'
p2117
I0
sg39
F0.86685760618274799
sg34
g752
(S'\x07\xdf\t\x1c\x0c3-\no\xe0'
tRp2118
sa(dp2119
S'trial_loop.thisTrialN'
p2120
I85
sg894
g1062
sS'block_loop.thisIndex'
p2121
g888
sg38
S'right'
p2122
sg58
g62
sS'trial_loop.thisN'
p2123
I85
sg33
g1073
sg63
g64
sS'trial_loop.thisIndex'
p2124
g59
(g98
S'U\x00\x00\x00'
tRp2125
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2126
I0
sg903
g1070
sS'block_loop.thisRepN'
p2127
I0
sg906
g1066
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2128
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p2129
Nsg69
Vn
sS'block_loop.thisTrialN'
p2130
I0
sg39
F0.9002898874659877
sg34
g752
(S'\x07\xdf\t\x1c\x0c33\t\x1c\x08'
tRp2131
sa(dp2132
S'trial_loop.thisTrialN'
p2133
I86
sg894
g1017
sS'block_loop.thisIndex'
p2134
g888
sg38
S'right'
p2135
sg58
g62
sS'trial_loop.thisN'
p2136
I86
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p2137
g59
(g98
S'V\x00\x00\x00'
tRp2138
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2139
I0
sg903
g1025
sS'block_loop.thisRepN'
p2140
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2141
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p2142
Nsg69
Vn
sS'block_loop.thisTrialN'
p2143
I0
sg39
F0.91685948782833293
sg34
g752
(S'\x07\xdf\t\x1c\x0c39\x08\x02\xc8'
tRp2144
sa(dp2145
S'trial_loop.thisTrialN'
p2146
I87
sg894
g1480
sS'block_loop.thisIndex'
p2147
g888
sg38
S'right'
p2148
sg58
g62
sS'trial_loop.thisN'
p2149
I87
sg33
g1484
sg63
g64
sS'trial_loop.thisIndex'
p2150
g59
(g98
S'W\x00\x00\x00'
tRp2151
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2152
I0
sg903
g1488
sS'block_loop.thisRepN'
p2153
I0
sg906
g1484
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2154
I0
sg908
g1491
sg55
g11
sS'block_loop.thisTrial'
p2155
Nsg69
Vn
sS'block_loop.thisTrialN'
p2156
I0
sg39
F1.216836851061089
sg34
g752
(S'\x07\xdf\t\x1c\x0c4\x03\x07$ '
tRp2157
sa(dp2158
S'trial_loop.thisTrialN'
p2159
I88
sg894
g1289
sS'block_loop.thisIndex'
p2160
g888
sg38
S'left'
p2161
sg58
g62
sS'trial_loop.thisN'
p2162
I88
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2163
g59
(g98
S'X\x00\x00\x00'
tRp2164
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2165
I0
sg903
g1296
sS'block_loop.thisRepN'
p2166
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2167
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2168
Nsg69
Vn
sS'block_loop.thisTrialN'
p2169
I0
sg39
F0.96684340831052396
sg34
g752
(S'\x07\xdf\t\x1c\x0c4\t\x0b\x0c '
tRp2170
sa(dp2171
S'trial_loop.thisTrialN'
p2172
I89
sg894
g1497
sS'block_loop.thisIndex'
p2173
g888
sg38
S'left'
p2174
sg58
g62
sS'trial_loop.thisN'
p2175
I89
sg33
g1501
sg63
g64
sS'trial_loop.thisIndex'
p2176
g59
(g98
S'Y\x00\x00\x00'
tRp2177
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2178
I0
sg903
g1505
sS'block_loop.thisRepN'
p2179
I0
sg906
g1501
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2180
I0
sg908
g1508
sg55
g11
sS'block_loop.thisTrial'
p2181
Nsg69
Vn
sS'block_loop.thisTrialN'
p2182
I0
sg39
F0.99986600402189652
sg34
g752
(S'\x07\xdf\t\x1c\x0c4\x0f\x0b#\x90'
tRp2183
sa(dp2184
S'trial_loop.thisTrialN'
p2185
I90
sg894
g1480
sS'block_loop.thisIndex'
p2186
g888
sg38
S'right'
p2187
sg58
g62
sS'trial_loop.thisN'
p2188
I90
sg33
g1484
sg63
g64
sS'trial_loop.thisIndex'
p2189
g59
(g98
S'Z\x00\x00\x00'
tRp2190
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2191
I0
sg903
g1488
sS'block_loop.thisRepN'
p2192
I0
sg906
g1484
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2193
I0
sg908
g1491
sg55
g11
sS'block_loop.thisTrial'
p2194
Nsg69
Vn
sS'block_loop.thisTrialN'
p2195
I0
sg39
F0.90055417314761144
sg34
g752
(S'\x07\xdf\t\x1c\x0c4\x15\x0by\x80'
tRp2196
sa(dp2197
S'trial_loop.thisTrialN'
p2198
I91
sg894
g1124
sS'block_loop.thisIndex'
p2199
g888
sg38
S'left'
p2200
sg58
g62
sS'trial_loop.thisN'
p2201
I91
sg33
g1135
sg63
g64
sS'trial_loop.thisIndex'
p2202
g59
(g98
S'[\x00\x00\x00'
tRp2203
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2204
I0
sg903
g1132
sS'block_loop.thisRepN'
p2205
I0
sg906
g1128
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2206
I0
sg908
g1135
sg55
g11
sS'block_loop.thisTrial'
p2207
Nsg69
Vn
sS'block_loop.thisTrialN'
p2208
I0
sg39
F3.6000699059859471
sg34
g752
(S'\x07\xdf\t\x1c\x0c4\x1b\n\x9a\xd8'
tRp2209
sa(dp2210
S'trial_loop.thisTrialN'
p2211
I92
sg894
g1749
sS'block_loop.thisIndex'
p2212
g888
sg38
S'right'
p2213
sg58
g62
sS'trial_loop.thisN'
p2214
I92
sg33
g1501
sg63
g64
sS'trial_loop.thisIndex'
p2215
g59
(g98
S'\\\x00\x00\x00'
tRp2216
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2217
I0
sg903
g1756
sS'block_loop.thisRepN'
p2218
I0
sg906
g1501
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2219
I0
sg908
g1508
sg55
g11
sS'block_loop.thisTrial'
p2220
Nsg69
Vn
sS'block_loop.thisTrialN'
p2221
I0
sg39
F1.1498422838831175
sg34
g752
(S'\x07\xdf\t\x1c\x0c4$\x04\xe9\xd0'
tRp2222
sa(dp2223
S'trial_loop.thisTrialN'
p2224
I93
sg894
g2041
sS'block_loop.thisIndex'
p2225
g888
sg38
S'right'
p2226
sg58
g62
sS'trial_loop.thisN'
p2227
I93
sg33
g1325
sg63
g64
sS'trial_loop.thisIndex'
p2228
g59
(g98
S']\x00\x00\x00'
tRp2229
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2230
I0
sg903
g2048
sS'block_loop.thisRepN'
p2231
I0
sg906
g1325
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2232
I0
sg908
g1332
sg55
g11
sS'block_loop.thisTrial'
p2233
Nsg69
Vn
sS'block_loop.thisTrialN'
p2234
I0
sg39
F1.5835256793307053
sg34
g752
(S'\x07\xdf\t\x1c\x0c4*\x07\xa1 '
tRp2235
sa(dp2236
S'trial_loop.thisTrialN'
p2237
I94
sg894
g1381
sS'block_loop.thisIndex'
p2238
g888
sg38
S'right'
p2239
sg58
g62
sS'trial_loop.thisN'
p2240
I94
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p2241
g59
(g98
S'^\x00\x00\x00'
tRp2242
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2243
I0
sg903
g1388
sS'block_loop.thisRepN'
p2244
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2245
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2246
Nsg69
Vn
sS'block_loop.thisTrialN'
p2247
I0
sg39
F1.2335880587343127
sg34
g752
(S'\x07\xdf\t\x1c\x0c41\x01\xfb\xd0'
tRp2248
sa(dp2249
S'trial_loop.thisTrialN'
p2250
I95
sg894
g1555
sS'block_loop.thisIndex'
p2251
g888
sg38
S'left'
p2252
sg58
g62
sS'trial_loop.thisN'
p2253
I95
sg33
g1559
sg63
g64
sS'trial_loop.thisIndex'
p2254
g59
(g98
S'_\x00\x00\x00'
tRp2255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2256
I0
sg903
g1563
sS'block_loop.thisRepN'
p2257
I0
sg906
g1559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2258
I0
sg908
g1566
sg55
g11
sS'block_loop.thisTrial'
p2259
Nsg69
Vn
sS'block_loop.thisTrialN'
p2260
I0
sg39
F0.91672121538249485
sg34
g752
(S'\x07\xdf\t\x1c\x0c47\x05\xdf\xe8'
tRp2261
sa(dp2262
S'trial_loop.thisTrialN'
p2263
I96
sg894
g1141
sS'block_loop.thisIndex'
p2264
g888
sg38
S'right'
p2265
sg58
g62
sS'trial_loop.thisN'
p2266
I96
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p2267
g59
(g98
S'`\x00\x00\x00'
tRp2268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2269
I0
sg903
g1148
sS'block_loop.thisRepN'
p2270
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2271
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p2272
Nsg69
Vn
sS'block_loop.thisTrialN'
p2273
I0
sg39
F1.0335146745564998
sg34
g752
(S'\x07\xdf\t\x1c\x0c5\x01\x05C\xa8'
tRp2274
sa(dp2275
S'trial_loop.thisTrialN'
p2276
I97
sg894
S'40-sardines.png'
p2277
sS'block_loop.thisIndex'
p2278
g888
sg38
S'right'
p2279
sg58
g62
sS'trial_loop.thisN'
p2280
I97
sg33
g1011
sg63
g64
sS'trial_loop.thisIndex'
p2281
g59
(g98
S'a\x00\x00\x00'
tRp2282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2283
I0
sg903
S'5-pineapple.png'
p2284
sS'block_loop.thisRepN'
p2285
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2286
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2287
Nsg69
Vn
sS'block_loop.thisTrialN'
p2288
I0
sg39
F1.1001682647347479
sg34
g752
(S'\x07\xdf\t\x1c\x0c5\x07\x06MH'
tRp2289
sa(dp2290
S'trial_loop.thisTrialN'
p2291
I98
sg894
g1465
sS'block_loop.thisIndex'
p2292
g888
sg38
S'left'
p2293
sg58
g62
sS'trial_loop.thisN'
p2294
I98
sg33
g1221
sg63
g64
sS'trial_loop.thisIndex'
p2295
g59
(g98
S'b\x00\x00\x00'
tRp2296
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2297
I0
sg903
g1472
sS'block_loop.thisRepN'
p2298
I0
sg906
g1214
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2299
I0
sg908
g1221
sg55
g11
sS'block_loop.thisTrial'
p2300
Nsg69
Vn
sS'block_loop.thisTrialN'
p2301
I0
sg39
F0.88355635585685377
sg34
g752
(S'\x07\xdf\t\x1c\x0c5\r\x08M\x00'
tRp2302
sa(dp2303
S'trial_loop.thisTrialN'
p2304
I99
sg894
g1321
sS'block_loop.thisIndex'
p2305
g888
sg38
S'left'
p2306
sg58
g62
sS'trial_loop.thisN'
p2307
I99
sg33
g1332
sg63
g64
sS'trial_loop.thisIndex'
p2308
g59
(g98
S'c\x00\x00\x00'
tRp2309
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2310
I0
sg903
g1329
sS'block_loop.thisRepN'
p2311
I0
sg906
g1325
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2312
I0
sg908
g1332
sg55
g11
sS'block_loop.thisTrial'
p2313
Nsg69
Vn
sS'block_loop.thisTrialN'
p2314
I0
sg39
F1.3834223598805693
sg34
g752
(S'\x07\xdf\t\x1c\x0c5\x13\x06\xf5@'
tRp2315
sa(dp2316
S'trial_loop.thisTrialN'
p2317
I100
sg894
g1514
sS'block_loop.thisIndex'
p2318
g888
sg38
S'left'
p2319
sg58
g62
sS'trial_loop.thisN'
p2320
I100
sg33
g1484
sg63
g64
sS'trial_loop.thisIndex'
p2321
g59
(g98
S'd\x00\x00\x00'
tRp2322
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2323
I0
sg903
g1521
sS'block_loop.thisRepN'
p2324
I0
sg906
g1484
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2325
I0
sg908
g1491
sg55
g11
sS'block_loop.thisTrial'
p2326
Nsg69
Vn
sS'block_loop.thisTrialN'
p2327
I0
sg39
F0.88392812341771787
sg34
g752
(S'\x07\xdf\t\x1c\x0c5\x19\r>\xa0'
tRp2328
sa(dp2329
S'trial_loop.thisTrialN'
p2330
I101
sg894
g895
sS'block_loop.thisIndex'
p2331
g888
sg38
S'right'
p2332
sg58
g62
sS'trial_loop.thisN'
p2333
I101
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2334
g59
(g98
S'e\x00\x00\x00'
tRp2335
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2336
I0
sg903
g904
sS'block_loop.thisRepN'
p2337
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2338
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2339
Nsg69
Vn
sS'block_loop.thisTrialN'
p2340
I0
sg39
F1.4501649005796935
sg34
g752
(S'\x07\xdf\t\x1c\x0c5\x1f\x0c%`'
tRp2341
sa(dp2342
S'trial_loop.thisTrialN'
p2343
I102
sg894
g1351
sS'block_loop.thisIndex'
p2344
g888
sg38
S'right'
p2345
sg58
g62
sS'trial_loop.thisN'
p2346
I102
sg33
g1314
sg63
g64
sS'trial_loop.thisIndex'
p2347
g59
(g98
S'f\x00\x00\x00'
tRp2348
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2349
I0
sg903
g1358
sS'block_loop.thisRepN'
p2350
I0
sg906
g1314
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2351
I0
sg908
g1308
sg55
g11
sS'block_loop.thisTrial'
p2352
Nsg69
Vn
sS'block_loop.thisTrialN'
p2353
I0
sg39
F1.566788156351322
sg34
g752
(S'\x07\xdf\t\x1c\x0c5&\x04\x1e\xb0'
tRp2354
sa(dp2355
S'trial_loop.thisTrialN'
p2356
I103
sg894
g1141
sS'block_loop.thisIndex'
p2357
g888
sg38
S'right'
p2358
sg58
g62
sS'trial_loop.thisN'
p2359
I103
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p2360
g59
(g98
S'g\x00\x00\x00'
tRp2361
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2362
I0
sg903
g1148
sS'block_loop.thisRepN'
p2363
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2364
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p2365
Nsg69
Vn
sS'block_loop.thisTrialN'
p2366
I0
sg39
F1.0167979637171811
sg34
g752
(S'\x07\xdf\t\x1c\x0c5,\rB\x88'
tRp2367
sa(dp2368
S'trial_loop.thisTrialN'
p2369
I104
sg894
g915
sS'block_loop.thisIndex'
p2370
g888
sg38
S'right'
p2371
sg58
g62
sS'trial_loop.thisN'
p2372
I104
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2373
g59
(g98
S'h\x00\x00\x00'
tRp2374
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2375
I0
sg903
g923
sS'block_loop.thisRepN'
p2376
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2377
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2378
Nsg69
Vn
sS'block_loop.thisTrialN'
p2379
I0
sg39
F1.2334366717896046
sg34
g752
(S'\x07\xdf\t\x1c\x0c52\x0e\r\xa8'
tRp2380
sa(dp2381
S'trial_loop.thisTrialN'
p2382
I105
sg894
g1598
sS'block_loop.thisIndex'
p2383
g888
sg38
S'right'
p2384
sg58
g62
sS'trial_loop.thisN'
p2385
I105
sg33
g1566
sg63
g64
sS'trial_loop.thisIndex'
p2386
g59
(g98
S'i\x00\x00\x00'
tRp2387
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2388
I0
sg903
g1605
sS'block_loop.thisRepN'
p2389
I0
sg906
g1559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2390
I0
sg908
g1566
sg55
g11
sS'block_loop.thisTrial'
p2391
Nsg69
Vn
sS'block_loop.thisTrialN'
p2392
I0
sg39
F1.3500875820518559
sg34
g752
(S'\x07\xdf\t\x1c\x0c59\x02\xf1\xe8'
tRp2393
sa(dp2394
S'trial_loop.thisTrialN'
p2395
I106
sg894
g1169
sS'block_loop.thisIndex'
p2396
g888
sg38
S'right'
p2397
sg58
g62
sS'trial_loop.thisN'
p2398
I106
sg33
g943
sg63
g64
sS'trial_loop.thisIndex'
p2399
g59
(g98
S'j\x00\x00\x00'
tRp2400
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2401
I0
sg903
g1176
sS'block_loop.thisRepN'
p2402
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2403
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p2404
Nsg69
Vn
sS'block_loop.thisTrialN'
p2405
I0
sg39
F0.93354113163331931
sg34
g752
(S'\x07\xdf\t\x1c\x0c6\x03\x08\xbeH'
tRp2406
sa(dp2407
S'trial_loop.thisTrialN'
p2408
I107
sg894
g2277
sS'block_loop.thisIndex'
p2409
g888
sg38
S'right'
p2410
sg58
g62
sS'trial_loop.thisN'
p2411
I107
sg33
g1011
sg63
g64
sS'trial_loop.thisIndex'
p2412
g59
(g98
S'k\x00\x00\x00'
tRp2413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2414
I0
sg903
g2284
sS'block_loop.thisRepN'
p2415
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2416
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2417
Nsg69
Vn
sS'block_loop.thisTrialN'
p2418
I0
sg39
F0.73342156160651939
sg34
g752
(S'\x07\xdf\t\x1c\x0c6\t\x08\x1e '
tRp2419
sa(dp2420
S'trial_loop.thisTrialN'
p2421
I108
sg894
g1366
sS'block_loop.thisIndex'
p2422
g888
sg38
S'right'
p2423
sg58
g62
sS'trial_loop.thisN'
p2424
I108
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2425
g59
(g98
S'l\x00\x00\x00'
tRp2426
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2427
I0
sg903
g1373
sS'block_loop.thisRepN'
p2428
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2429
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p2430
Nsg69
Vn
sS'block_loop.thisTrialN'
p2431
I0
sg39
F1.6169197575054568
sg34
g752
(S'\x07\xdf\t\x1c\x0c6\x0f\x04\xa3\x80'
tRp2432
sa(dp2433
S'trial_loop.thisTrialN'
p2434
I109
sg894
g1948
sS'block_loop.thisIndex'
p2435
g888
sg38
S'left'
p2436
sg58
g62
sS'trial_loop.thisN'
p2437
I109
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p2438
g59
(g98
S'm\x00\x00\x00'
tRp2439
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2440
I0
sg903
g1955
sS'block_loop.thisRepN'
p2441
I0
sg906
g1066
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2442
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p2443
Nsg69
Vn
sS'block_loop.thisTrialN'
p2444
I0
sg39
F1.0001881645621324
sg34
g752
(S'\x07\xdf\t\x1c\x0c6\x15\x0e~\xf0'
tRp2445
sa(dp2446
S'trial_loop.thisTrialN'
p2447
I110
sg894
g966
sS'block_loop.thisIndex'
p2448
g888
sg38
S'left'
p2449
sg58
g62
sS'trial_loop.thisN'
p2450
I110
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2451
g59
(g98
S'n\x00\x00\x00'
tRp2452
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2453
I0
sg903
g974
sS'block_loop.thisRepN'
p2454
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2455
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2456
Nsg69
Vn
sS'block_loop.thisTrialN'
p2457
I0
sg39
F0.98352334152878029
sg34
g752
(S'\x07\xdf\t\x1c\x0c6\x1b\x0f\x0fx'
tRp2458
sa(dp2459
S'trial_loop.thisTrialN'
p2460
I111
sg894
g1933
sS'block_loop.thisIndex'
p2461
g888
sg38
S'left'
p2462
sg58
g62
sS'trial_loop.thisN'
p2463
I111
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2464
g59
(g98
S'o\x00\x00\x00'
tRp2465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2466
I0
sg903
g1940
sS'block_loop.thisRepN'
p2467
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2468
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2469
Nsg69
Vn
sS'block_loop.thisTrialN'
p2470
I0
sg39
F1.9667453346592083
sg34
g752
(S'\x07\xdf\t\x1c\x0c6"\x00#('
tRp2471
sa(dp2472
S'trial_loop.thisTrialN'
p2473
I112
sg894
g983
sS'block_loop.thisIndex'
p2474
g888
sg38
S'left'
p2475
sg58
g62
sS'trial_loop.thisN'
p2476
I112
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2477
g59
(g98
S'p\x00\x00\x00'
tRp2478
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2479
I0
sg903
g991
sS'block_loop.thisRepN'
p2480
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2481
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p2482
Nsg69
Vn
sS'block_loop.thisTrialN'
p2483
I0
sg39
F0.81682179789459042
sg34
g752
(S'\x07\xdf\t\x1c\x0c6(\x0f:p'
tRp2484
sa(dp2485
S'trial_loop.thisTrialN'
p2486
I113
sg894
g1304
sS'block_loop.thisIndex'
p2487
g888
sg38
S'left'
p2488
sg58
g62
sS'trial_loop.thisN'
p2489
I113
sg33
g1314
sg63
g64
sS'trial_loop.thisIndex'
p2490
g59
(g98
S'q\x00\x00\x00'
tRp2491
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2492
I0
sg903
g1312
sS'block_loop.thisRepN'
p2493
I0
sg906
g1314
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2494
I0
sg908
g1308
sg55
g11
sS'block_loop.thisTrial'
p2495
Nsg69
Vn
sS'block_loop.thisTrialN'
p2496
I0
sg39
F0.90020834948882111
sg34
g752
(S'\x07\xdf\t\x1c\x0c6.\x0c\xf0\x80'
tRp2497
sa(dp2498
S'trial_loop.thisTrialN'
p2499
I114
sg894
g1381
sS'block_loop.thisIndex'
p2500
g888
sg38
S'left'
p2501
sg58
g62
sS'trial_loop.thisN'
p2502
I114
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2503
g59
(g98
S'r\x00\x00\x00'
tRp2504
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2505
I0
sg903
g1388
sS'block_loop.thisRepN'
p2506
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2507
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2508
Nsg69
Vn
sS'block_loop.thisTrialN'
p2509
I0
sg39
F0.95013325472245924
sg34
g752
(S'\x07\xdf\t\x1c\x0c64\x0c\x11\xd8'
tRp2510
sa(dp2511
S'trial_loop.thisTrialN'
p2512
I115
sg894
g1096
sS'block_loop.thisIndex'
p2513
g888
sg38
S'left'
p2514
sg58
g62
sS'trial_loop.thisN'
p2515
I115
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p2516
g59
(g98
S's\x00\x00\x00'
tRp2517
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2518
I0
sg903
g1103
sS'block_loop.thisRepN'
p2519
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2520
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p2521
Nsg69
Vn
sS'block_loop.thisTrialN'
p2522
I0
sg39
F1.9501899891893117
sg34
g752
(S'\x07\xdf\t\x1c\x0c6:\x0b\xb00'
tRp2523
sa(dp2524
S'trial_loop.thisTrialN'
p2525
I116
sg894
g966
sS'block_loop.thisIndex'
p2526
g888
sg38
S'left'
p2527
sg58
g62
sS'trial_loop.thisN'
p2528
I116
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p2529
g59
(g98
S't\x00\x00\x00'
tRp2530
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2531
I0
sg903
g974
sS'block_loop.thisRepN'
p2532
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2533
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2534
Nsg69
Vn
sS'block_loop.thisTrialN'
p2535
I0
sg39
F0.91676740122966294
sg34
g752
(S'\x07\xdf\t\x1c\x0c7\x05\x0b\x858'
tRp2536
sa(dp2537
S'trial_loop.thisTrialN'
p2538
I117
sg894
g1124
sS'block_loop.thisIndex'
p2539
g888
sg38
S'left'
p2540
sg58
g62
sS'trial_loop.thisN'
p2541
I117
sg33
g1128
sg63
g64
sS'trial_loop.thisIndex'
p2542
g59
(g98
S'u\x00\x00\x00'
tRp2543
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2544
I0
sg903
g1132
sS'block_loop.thisRepN'
p2545
I0
sg906
g1128
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2546
I0
sg908
g1135
sg55
g11
sS'block_loop.thisTrial'
p2547
Nsg69
Vn
sS'block_loop.thisTrialN'
p2548
I0
sg39
F1.2668361668256694
sg34
g752
(S'\x07\xdf\t\x1c\x0c7\x0b\n\xa6\x90'
tRp2549
sa(dp2550
S'trial_loop.thisTrialN'
p2551
I118
sg894
g2277
sS'block_loop.thisIndex'
p2552
g888
sg38
S'right'
p2553
sg58
g62
sS'trial_loop.thisN'
p2554
I118
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2555
g59
(g98
S'v\x00\x00\x00'
tRp2556
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2557
I0
sg903
g2284
sS'block_loop.thisRepN'
p2558
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2559
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2560
Nsg69
Vn
sS'block_loop.thisTrialN'
p2561
I0
sg39
F0.83350144601536158
sg34
g752
(S'\x07\xdf\t\x1c\x0c7\x12\x00\x03\xe8'
tRp2562
sa(dp2563
S'trial_loop.thisTrialN'
p2564
I119
sg894
g1598
sS'block_loop.thisIndex'
p2565
g888
sg38
S'right'
p2566
sg58
g62
sS'trial_loop.thisN'
p2567
I119
sg33
g1559
sg63
g64
sS'trial_loop.thisIndex'
p2568
g59
(g98
S'w\x00\x00\x00'
tRp2569
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2570
I0
sg903
g1605
sS'block_loop.thisRepN'
p2571
I0
sg906
g1559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2572
I0
sg908
g1566
sg55
g11
sS'block_loop.thisTrial'
p2573
Nsg69
Vn
sS'block_loop.thisTrialN'
p2574
I0
sg39
F1.2333306153996091
sg34
g752
(S'\x07\xdf\t\x1c\x0c7\x17\r6\xd0'
tRp2575
sa(dp2576
S'trial_loop.thisTrialN'
p2577
I120
sg894
g1366
sS'block_loop.thisIndex'
p2578
g888
sg38
S'right'
p2579
sg58
g62
sS'trial_loop.thisN'
p2580
I120
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2581
g59
(g98
S'x\x00\x00\x00'
tRp2582
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2583
I0
sg903
g1373
sS'block_loop.thisRepN'
p2584
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2585
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p2586
Nsg69
Vn
sS'block_loop.thisTrialN'
p2587
I0
sg39
F1.0502276791212353
sg34
g752
(S'\x07\xdf\t\x1c\x0c7\x1e\x02\x1b\x10'
tRp2588
sa(dp2589
S'trial_loop.thisTrialN'
p2590
I121
sg894
g1409
sS'block_loop.thisIndex'
p2591
g888
sg38
S'right'
p2592
sg58
g62
sS'trial_loop.thisN'
p2593
I121
sg33
g1128
sg63
g64
sS'trial_loop.thisIndex'
p2594
g59
(g98
S'y\x00\x00\x00'
tRp2595
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2596
I0
sg903
g1416
sS'block_loop.thisRepN'
p2597
I0
sg906
g1128
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2598
I0
sg908
g1135
sg55
g11
sS'block_loop.thisTrial'
p2599
Nsg69
Vn
sS'block_loop.thisTrialN'
p2600
I0
sg39
F0.75021524885596591
sg34
g752
(S'\x07\xdf\t\x1c\x0c7$\x03c0'
tRp2601
sa(dp2602
S'trial_loop.thisTrialN'
p2603
I122
sg894
g1933
sS'block_loop.thisIndex'
p2604
g888
sg38
S'left'
p2605
sg58
g62
sS'trial_loop.thisN'
p2606
I122
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p2607
g59
(g98
S'z\x00\x00\x00'
tRp2608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2609
I0
sg903
g1940
sS'block_loop.thisRepN'
p2610
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2611
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2612
Nsg69
Vn
sS'block_loop.thisTrialN'
p2613
I0
sg39
F0.93346415522137249
sg34
g752
(S'\x07\xdf\t\x1c\x0c7*\x00#('
tRp2614
sa(dp2615
S'trial_loop.thisTrialN'
p2616
I123
sg894
g2277
sS'block_loop.thisIndex'
p2617
g888
sg38
S'right'
p2618
sg58
g62
sS'trial_loop.thisN'
p2619
I123
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2620
g59
(g98
S'{\x00\x00\x00'
tRp2621
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2622
I0
sg903
g2284
sS'block_loop.thisRepN'
p2623
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2624
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2625
Nsg69
Vn
sS'block_loop.thisTrialN'
p2626
I0
sg39
F0.70014294804786914
sg34
g752
(S'\x07\xdf\t\x1c\x0c7/\x0e\xc5@'
tRp2627
sa(dp2628
S'trial_loop.thisTrialN'
p2629
I124
sg894
g1465
sS'block_loop.thisIndex'
p2630
g888
sg38
S'left'
p2631
sg58
g62
sS'trial_loop.thisN'
p2632
I124
sg33
g1214
sg63
g64
sS'trial_loop.thisIndex'
p2633
g59
(g98
S'|\x00\x00\x00'
tRp2634
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2635
I0
sg903
g1472
sS'block_loop.thisRepN'
p2636
I0
sg906
g1214
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2637
I0
sg908
g1221
sg55
g11
sS'block_loop.thisTrial'
p2638
Nsg69
Vn
sS'block_loop.thisTrialN'
p2639
I0
sg39
F0.73344950119280838
sg34
g752
(S'\x07\xdf\t\x1c\x0c75\n\xd1\x88'
tRp2640
sa(dp2641
S'trial_loop.thisTrialN'
p2642
I125
sg894
g1227
sS'block_loop.thisIndex'
p2643
g888
sg38
S'left'
p2644
sg58
g62
sS'trial_loop.thisN'
p2645
I125
sg33
g1231
sg63
g64
sS'trial_loop.thisIndex'
p2646
g59
(g98
S'}\x00\x00\x00'
tRp2647
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2648
I0
sg903
g1235
sS'block_loop.thisRepN'
p2649
I0
sg906
g1231
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2650
I0
sg908
g1238
sg55
g11
sS'block_loop.thisTrial'
p2651
Nsg69
Vn
sS'block_loop.thisTrialN'
p2652
I0
sg39
F0.85010981968116539
sg34
g752
(S'\x07\xdf\t\x1c\x0c7;\x07\x1cP'
tRp2653
sa(dp2654
S'trial_loop.thisTrialN'
p2655
I126
sg894
g949
sS'block_loop.thisIndex'
p2656
g888
sg38
S'right'
p2657
sg58
g62
sS'trial_loop.thisN'
p2658
I126
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2659
g59
(g98
S'~\x00\x00\x00'
tRp2660
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2661
I0
sg903
g957
sS'block_loop.thisRepN'
p2662
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2663
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2664
Nsg69
Vn
sS'block_loop.thisTrialN'
p2665
I0
sg39
F1.1005443087615276
sg34
g752
(S'\x07\xdf\t\x1c\x0c8\x05\x05Kx'
tRp2666
sa(dp2667
S'trial_loop.thisTrialN'
p2668
I127
sg894
g1381
sS'block_loop.thisIndex'
p2669
g888
sg38
S'left'
p2670
sg58
g62
sS'trial_loop.thisN'
p2671
I127
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p2672
g59
(g98
S'\x7f\x00\x00\x00'
tRp2673
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2674
I0
sg903
g1388
sS'block_loop.thisRepN'
p2675
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2676
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2677
Nsg69
Vn
sS'block_loop.thisTrialN'
p2678
I0
sg39
F0.78347960752398649
sg34
g752
(S'\x07\xdf\t\x1c\x0c8\x0b\x07\x85\xc8'
tRp2679
sa(dp2680
S'trial_loop.thisTrialN'
p2681
I128
sg894
g1933
sS'block_loop.thisIndex'
p2682
g888
sg38
S'left'
p2683
sg58
g62
sS'trial_loop.thisN'
p2684
I128
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2685
g59
(g98
S'\x80\x00\x00\x00'
tRp2686
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2687
I0
sg903
g1940
sS'block_loop.thisRepN'
p2688
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2689
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2690
Nsg69
Vn
sS'block_loop.thisTrialN'
p2691
I0
sg39
F0.80012304822048463
sg34
g752
(S'\x07\xdf\t\x1c\x0c8\x11\x04\x84@'
tRp2692
sa(dp2693
S'trial_loop.thisTrialN'
p2694
I129
sg894
g1079
sS'block_loop.thisIndex'
p2695
g888
sg38
S'left'
p2696
sg58
g62
sS'trial_loop.thisN'
p2697
I129
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p2698
g59
(g98
S'\x81\x00\x00\x00'
tRp2699
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2700
I0
sg903
g1087
sS'block_loop.thisRepN'
p2701
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2702
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p2703
Nsg69
Vn
sS'block_loop.thisTrialN'
p2704
I0
sg39
F0.85019135765833198
sg34
g752
(S'\x07\xdf\t\x1c\x0c8\x17\x01\xff\xb8'
tRp2705
sa(dp2706
S'trial_loop.thisTrialN'
p2707
I130
sg894
g1669
sS'block_loop.thisIndex'
p2708
g888
sg38
S'left'
p2709
sg58
g62
sS'trial_loop.thisN'
p2710
I130
sg33
g1617
sg63
g64
sS'trial_loop.thisIndex'
p2711
g59
(g98
S'\x82\x00\x00\x00'
tRp2712
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2713
I0
sg903
g1676
sS'block_loop.thisRepN'
p2714
I0
sg906
g1617
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2715
I0
sg908
g1624
sg55
g11
sS'block_loop.thisTrial'
p2716
Nsg69
Vn
sS'block_loop.thisTrialN'
p2717
I0
sg39
F0.9335434124150197
sg34
g752
(S'\x07\xdf\t\x1c\x0c8\x1d\x00m`'
tRp2718
sa(dp2719
S'trial_loop.thisTrialN'
p2720
I131
sg894
g1598
sS'block_loop.thisIndex'
p2721
g888
sg38
S'left'
p2722
sg58
g62
sS'trial_loop.thisN'
p2723
I131
sg33
g1559
sg63
g64
sS'trial_loop.thisIndex'
p2724
g59
(g98
S'\x83\x00\x00\x00'
tRp2725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2726
I0
sg903
g1605
sS'block_loop.thisRepN'
p2727
I0
sg906
g1559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2728
I0
sg908
g1566
sg55
g11
sS'block_loop.thisTrial'
p2729
Nsg69
Vn
sS'block_loop.thisTrialN'
p2730
I0
sg39
F0.83333238300838275
sg34
g752
(S'\x07\xdf\t\x1c\x0c8"\x0f\x0fx'
tRp2731
sa(dp2732
S'trial_loop.thisTrialN'
p2733
I132
sg894
g915
sS'block_loop.thisIndex'
p2734
g888
sg38
S'left'
p2735
sg58
g62
sS'trial_loop.thisN'
p2736
I132
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2737
g59
(g98
S'\x84\x00\x00\x00'
tRp2738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2739
I0
sg903
g923
sS'block_loop.thisRepN'
p2740
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2741
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2742
Nsg69
Vn
sS'block_loop.thisTrialN'
p2743
I0
sg39
F1.966759589549838
sg34
g752
(S'\x07\xdf\t\x1c\x0c8(\r\x04\x08'
tRp2744
sa(dp2745
S'trial_loop.thisTrialN'
p2746
I133
sg894
g1047
sS'block_loop.thisIndex'
p2747
g888
sg38
S'right'
p2748
sg58
g62
sS'trial_loop.thisN'
p2749
I133
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2750
g59
(g98
S'\x85\x00\x00\x00'
tRp2751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2752
I0
sg903
g1054
sS'block_loop.thisRepN'
p2753
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2754
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2755
Nsg69
Vn
sS'block_loop.thisTrialN'
p2756
I0
sg39
F1.1001540098441183
sg34
g752
(S'\x07\xdf\t\x1c\x0c8/\r\x13\xa8'
tRp2757
sa(dp2758
S'trial_loop.thisTrialN'
p2759
I134
sg894
g949
sS'block_loop.thisIndex'
p2760
g888
sg38
S'right'
p2761
sg58
g62
sS'trial_loop.thisN'
p2762
I134
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2763
g59
(g98
S'\x86\x00\x00\x00'
tRp2764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2765
I0
sg903
g957
sS'block_loop.thisRepN'
p2766
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2767
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2768
Nsg69
Vn
sS'block_loop.thisTrialN'
p2769
I0
sg39
F1.6169351527896652
sg34
g752
(S'\x07\xdf\t\x1c\x0c85\x0f\x13`'
tRp2770
sa(dp2771
S'trial_loop.thisTrialN'
p2772
I135
sg894
g895
sS'block_loop.thisIndex'
p2773
g888
sg38
S'left'
p2774
sg58
g62
sS'trial_loop.thisN'
p2775
I135
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2776
g59
(g98
S'\x87\x00\x00\x00'
tRp2777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2778
I0
sg903
g904
sS'block_loop.thisRepN'
p2779
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2780
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2781
Nsg69
Vn
sS'block_loop.thisTrialN'
p2782
I0
sg39
F2.4167482996763283
sg34
g752
(S'\x07\xdf\t\x1c\x0c9\x00\t\xa8\xa8'
tRp2783
sa(dp2784
S'trial_loop.thisTrialN'
p2785
I136
sg894
g1141
sS'block_loop.thisIndex'
p2786
g888
sg38
S'right'
p2787
sg58
g62
sS'trial_loop.thisN'
p2788
I136
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p2789
g59
(g98
S'\x88\x00\x00\x00'
tRp2790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2791
I0
sg903
g1148
sS'block_loop.thisRepN'
p2792
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2793
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p2794
Nsg69
Vn
sS'block_loop.thisTrialN'
p2795
I0
sg39
F1.0668614264923235
sg34
g752
(S'\x07\xdf\t\x1c\x0c9\x08\x01_\x90'
tRp2796
sa(dp2797
S'trial_loop.thisTrialN'
p2798
I137
sg894
g1948
sS'block_loop.thisIndex'
p2799
g888
sg38
S'left'
p2800
sg58
g62
sS'trial_loop.thisN'
p2801
I137
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p2802
g59
(g98
S'\x89\x00\x00\x00'
tRp2803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2804
I0
sg903
g1955
sS'block_loop.thisRepN'
p2805
I0
sg906
g1066
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2806
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p2807
Nsg69
Vn
sS'block_loop.thisTrialN'
p2808
I0
sg39
F1.0172652390483563
sg34
g752
(S'\x07\xdf\t\x1c\x0c9\x0e\x02\xe60'
tRp2809
sa(dp2810
S'trial_loop.thisTrialN'
p2811
I138
sg894
g1749
sS'block_loop.thisIndex'
p2812
g888
sg38
S'right'
p2813
sg58
g62
sS'trial_loop.thisN'
p2814
I138
sg33
g1501
sg63
g64
sS'trial_loop.thisIndex'
p2815
g59
(g98
S'\x8a\x00\x00\x00'
tRp2816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2817
I0
sg903
g1756
sS'block_loop.thisRepN'
p2818
I0
sg906
g1501
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2819
I0
sg908
g1508
sg55
g11
sS'block_loop.thisTrial'
p2820
Nsg69
Vn
sS'block_loop.thisTrialN'
p2821
I0
sg39
F0.71659394771450025
sg34
g752
(S'\x07\xdf\t\x1c\x0c9\x14\x03\xb58'
tRp2822
sa(dp2823
S'trial_loop.thisTrialN'
p2824
I139
sg894
g1424
sS'block_loop.thisIndex'
p2825
g888
sg38
S'left'
p2826
sg58
g62
sS'trial_loop.thisN'
p2827
I139
sg33
g1248
sg63
g64
sS'trial_loop.thisIndex'
p2828
g59
(g98
S'\x8b\x00\x00\x00'
tRp2829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2830
I0
sg903
g1431
sS'block_loop.thisRepN'
p2831
I0
sg906
g1248
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2832
I0
sg908
g1255
sg55
g11
sS'block_loop.thisTrial'
p2833
Nsg69
Vn
sS'block_loop.thisTrialN'
p2834
I0
sg39
F1.5669070421445213
sg34
g752
(S'\x07\xdf\t\x1c\x0c9\x19\x0e\xff\xd8'
tRp2835
sa(dp2836
S'trial_loop.thisTrialN'
p2837
I140
sg894
g1079
sS'block_loop.thisIndex'
p2838
g888
sg38
S'left'
p2839
sg58
g62
sS'trial_loop.thisN'
p2840
I140
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p2841
g59
(g98
S'\x8c\x00\x00\x00'
tRp2842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2843
I0
sg903
g1087
sS'block_loop.thisRepN'
p2844
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2845
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p2846
Nsg69
Vn
sS'block_loop.thisTrialN'
p2847
I0
sg39
F0.96660706221518922
sg34
g752
(S'\x07\xdf\t\x1c\x0c9 \x08\xe1p'
tRp2848
sa(dp2849
S'trial_loop.thisTrialN'
p2850
I141
sg894
g2041
sS'block_loop.thisIndex'
p2851
g888
sg38
S'right'
p2852
sg58
g62
sS'trial_loop.thisN'
p2853
I141
sg33
g1332
sg63
g64
sS'trial_loop.thisIndex'
p2854
g59
(g98
S'\x8d\x00\x00\x00'
tRp2855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2856
I0
sg903
g2048
sS'block_loop.thisRepN'
p2857
I0
sg906
g1325
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2858
I0
sg908
g1332
sg55
g11
sS'block_loop.thisTrial'
p2859
Nsg69
Vn
sS'block_loop.thisTrialN'
p2860
I0
sg39
F1.9001185436736705
sg34
g752
(S'\x07\xdf\t\x1c\x0c9&\x08\xf8\xe0'
tRp2861
sa(dp2862
S'trial_loop.thisTrialN'
p2863
I142
sg894
g1424
sS'block_loop.thisIndex'
p2864
g888
sg38
S'left'
p2865
sg58
g62
sS'trial_loop.thisN'
p2866
I142
sg33
g1255
sg63
g64
sS'trial_loop.thisIndex'
p2867
g59
(g98
S'\x8e\x00\x00\x00'
tRp2868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2869
I0
sg903
g1431
sS'block_loop.thisRepN'
p2870
I0
sg906
g1248
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2871
I0
sg908
g1255
sg55
g11
sS'block_loop.thisTrial'
p2872
Nsg69
Vn
sS'block_loop.thisTrialN'
p2873
I0
sg39
F0.83388005592496484
sg34
g752
(S'\x07\xdf\t\x1c\x0c9-\x07\xdb\xb8'
tRp2874
sa(dp2875
S'trial_loop.thisTrialN'
p2876
I143
sg894
g1210
sS'block_loop.thisIndex'
p2877
g888
sg38
S'right'
p2878
sg58
g62
sS'trial_loop.thisN'
p2879
I143
sg33
g1214
sg63
g64
sS'trial_loop.thisIndex'
p2880
g59
(g98
S'\x8f\x00\x00\x00'
tRp2881
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2882
I0
sg903
g1218
sS'block_loop.thisRepN'
p2883
I0
sg906
g1214
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2884
I0
sg908
g1221
sg55
g11
sS'block_loop.thisTrial'
p2885
Nsg69
Vn
sS'block_loop.thisTrialN'
p2886
I0
sg39
F0.88351245079320506
sg34
g752
(S'\x07\xdf\t\x1c\x0c93\x05\xcc`'
tRp2887
sa(dp2888
S'trial_loop.thisTrialN'
p2889
I144
sg894
g1304
sS'block_loop.thisIndex'
p2890
g888
sg38
S'left'
p2891
sg58
g62
sS'trial_loop.thisN'
p2892
I144
sg33
g1314
sg63
g64
sS'trial_loop.thisIndex'
p2893
g59
(g98
S'\x90\x00\x00\x00'
tRp2894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2895
I0
sg903
g1312
sS'block_loop.thisRepN'
p2896
I0
sg906
g1314
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2897
I0
sg908
g1308
sg55
g11
sS'block_loop.thisTrial'
p2898
Nsg69
Vn
sS'block_loop.thisTrialN'
p2899
I0
sg39
F1.2001224210034707
sg34
g752
(S'\x07\xdf\t\x1c\x0c99\x04\xb3 '
tRp2900
sa(dp2901
S'trial_loop.thisTrialN'
p2902
I145
sg894
g895
sS'block_loop.thisIndex'
p2903
g888
sg38
S'right'
p2904
sg58
g62
sS'trial_loop.thisN'
p2905
I145
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p2906
g59
(g98
S'\x91\x00\x00\x00'
tRp2907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2908
I0
sg903
g904
sS'block_loop.thisRepN'
p2909
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2910
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2911
Nsg69
Vn
sS'block_loop.thisTrialN'
p2912
I0
sg39
F1.1335190080408211
sg34
g752
(S'\x07\xdf\t\x1c\x0c:\x03\x08"\x08'
tRp2913
sa(dp2914
S'trial_loop.thisTrialN'
p2915
I146
sg894
g1351
sS'block_loop.thisIndex'
p2916
g888
sg38
S'right'
p2917
sg58
g62
sS'trial_loop.thisN'
p2918
I146
sg33
g1314
sg63
g64
sS'trial_loop.thisIndex'
p2919
g59
(g98
S'\x92\x00\x00\x00'
tRp2920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2921
I0
sg903
g1358
sS'block_loop.thisRepN'
p2922
I0
sg906
g1314
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2923
I0
sg908
g1308
sg55
g11
sS'block_loop.thisTrial'
p2924
Nsg69
Vn
sS'block_loop.thisTrialN'
p2925
I0
sg39
F0.86687955871457234
sg34
g752
(S'\x07\xdf\t\x1c\x0c:\t\n\xd5p'
tRp2926
sa(dp2927
S'trial_loop.thisTrialN'
p2928
I147
sg894
g1749
sS'block_loop.thisIndex'
p2929
g888
sg38
S'right'
p2930
sg58
g62
sS'trial_loop.thisN'
p2931
I147
sg33
g1501
sg63
g64
sS'trial_loop.thisIndex'
p2932
g59
(g98
S'\x93\x00\x00\x00'
tRp2933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2934
I0
sg903
g1756
sS'block_loop.thisRepN'
p2935
I0
sg906
g1501
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2936
I0
sg908
g1508
sg55
g11
sS'block_loop.thisTrial'
p2937
Nsg69
Vn
sS'block_loop.thisTrialN'
p2938
I0
sg39
F0.78372678733649082
sg34
g752
(S'\x07\xdf\t\x1c\x0c:\x0f\tC\x18'
tRp2939
sa(dp2940
S'trial_loop.thisTrialN'
p2941
I148
sg894
g2277
sS'block_loop.thisIndex'
p2942
g888
sg38
S'right'
p2943
sg58
g62
sS'trial_loop.thisN'
p2944
I148
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2945
g59
(g98
S'\x94\x00\x00\x00'
tRp2946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2947
I0
sg903
g2284
sS'block_loop.thisRepN'
p2948
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2949
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2950
Nsg69
Vn
sS'block_loop.thisTrialN'
p2951
I0
sg39
F0.80019546306721168
sg34
g752
(S'\x07\xdf\t\x1c\x0c:\x15\x06\x80\x10'
tRp2952
sa(dp2953
S'trial_loop.thisTrialN'
p2954
I149
sg894
g1289
sS'block_loop.thisIndex'
p2955
g888
sg38
S'right'
p2956
sg58
g62
sS'trial_loop.thisN'
p2957
I149
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2958
g59
(g98
S'\x95\x00\x00\x00'
tRp2959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2960
I0
sg903
g1296
sS'block_loop.thisRepN'
p2961
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2962
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2963
Nsg69
Vn
sS'block_loop.thisTrialN'
p2964
I0
sg39
F2.2001515009833383
sg34
g752
(S'\x07\xdf\t\x1c\x0c:\x1b\x03\xf7\xa0'
tRp2965
sa(dp2966
S'trial_loop.thisTrialN'
p2967
I150
sg894
g1948
sS'block_loop.thisIndex'
p2968
g888
sg38
S'left'
p2969
sg58
g62
sS'trial_loop.thisN'
p2970
I150
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p2971
g59
(g98
S'\x96\x00\x00\x00'
tRp2972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2973
I0
sg903
g1955
sS'block_loop.thisRepN'
p2974
I0
sg906
g1066
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2975
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p2976
Nsg69
Vn
sS'block_loop.thisTrialN'
p2977
I0
sg39
F0.93351575792803487
sg34
g752
(S'\x07\xdf\t\x1c\x0c:"\x07^\xb8'
tRp2978
sa(dp2979
S'trial_loop.thisTrialN'
p2980
I151
sg894
g1261
sS'block_loop.thisIndex'
p2981
g888
sg38
S'right'
p2982
sg58
g62
sS'trial_loop.thisN'
p2983
I151
sg33
g1231
sg63
g64
sS'trial_loop.thisIndex'
p2984
g59
(g98
S'\x97\x00\x00\x00'
tRp2985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2986
I0
sg903
g1268
sS'block_loop.thisRepN'
p2987
I0
sg906
g1231
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2988
I0
sg908
g1238
sg55
g11
sS'block_loop.thisTrial'
p2989
Nsg69
Vn
sS'block_loop.thisTrialN'
p2990
I0
sg39
F1.4334590234611824
sg34
g752
(S'\x07\xdf\t\x1c\x0c:(\x06\xfd\x10'
tRp2991
sa(dp2992
S'trial_loop.thisTrialN'
p2993
I152
sg894
g1669
sS'block_loop.thisIndex'
p2994
g888
sg38
S'left'
p2995
sg58
g62
sS'trial_loop.thisN'
p2996
I152
sg33
g1617
sg63
g64
sS'trial_loop.thisIndex'
p2997
g59
(g98
S'\x98\x00\x00\x00'
tRp2998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2999
I0
sg903
g1676
sS'block_loop.thisRepN'
p3000
I0
sg906
g1617
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3001
I0
sg908
g1624
sg55
g11
sS'block_loop.thisTrial'
p3002
Nsg69
Vn
sS'block_loop.thisTrialN'
p3003
I0
sg39
F1.767202232429554
sg34
g752
(S'\x07\xdf\t\x1c\x0c:.\r\xfa '
tRp3004
sa(dp3005
S'trial_loop.thisTrialN'
p3006
I153
sg894
g1465
sS'block_loop.thisIndex'
p3007
g888
sg38
S'left'
p3008
sg58
g62
sS'trial_loop.thisN'
p3009
I153
sg33
g1214
sg63
g64
sS'trial_loop.thisIndex'
p3010
g59
(g98
S'\x99\x00\x00\x00'
tRp3011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3012
I0
sg903
g1472
sS'block_loop.thisRepN'
p3013
I0
sg906
g1214
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3014
I0
sg908
g1221
sg55
g11
sS'block_loop.thisTrial'
p3015
Nsg69
Vn
sS'block_loop.thisTrialN'
p3016
I0
sg39
F0.63355835154106899
sg34
g752
(S'\x07\xdf\t\x1c\x0c:5\n\xf4\xb0'
tRp3017
sa(dp3018
S'trial_loop.thisTrialN'
p3019
I154
sg894
g1079
sS'block_loop.thisIndex'
p3020
g888
sg38
S'left'
p3021
sg58
g62
sS'trial_loop.thisN'
p3022
I154
sg33
g1090
sg63
g64
sS'trial_loop.thisIndex'
p3023
g59
(g98
S'\x9a\x00\x00\x00'
tRp3024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3025
I0
sg903
g1087
sS'block_loop.thisRepN'
p3026
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3027
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p3028
Nsg69
Vn
sS'block_loop.thisTrialN'
p3029
I0
sg39
F0.76680794214007619
sg34
g752
(S'\x07\xdf\t\x1c\x0c:;\x05\xd0H'
tRp3030
sa(dp3031
S'trial_loop.thisTrialN'
p3032
I155
sg894
g932
sS'block_loop.thisIndex'
p3033
g888
sg38
S'left'
p3034
sg58
g62
sS'trial_loop.thisN'
p3035
I155
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3036
g59
(g98
S'\x9b\x00\x00\x00'
tRp3037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3038
I0
sg903
g940
sS'block_loop.thisRepN'
p3039
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3040
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p3041
Nsg69
Vn
sS'block_loop.thisTrialN'
p3042
I0
sg39
F0.65013365386039368
sg34
g752
(S'\x07\xdf\t\x1c\x0c;\x05\x02\xce\xc0'
tRp3043
sa(dp3044
S'trial_loop.thisTrialN'
p3045
I156
sg894
g1381
sS'block_loop.thisIndex'
p3046
g888
sg38
S'left'
p3047
sg58
g62
sS'trial_loop.thisN'
p3048
I156
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p3049
g59
(g98
S'\x9c\x00\x00\x00'
tRp3050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3051
I0
sg903
g1388
sS'block_loop.thisRepN'
p3052
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3053
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3054
Nsg69
Vn
sS'block_loop.thisTrialN'
p3055
I0
sg39
F0.95014836490736343
sg34
g752
(S"\x07\xdf\t\x1c\x0c;\n\r'0"
tRp3056
sa(dp3057
S'trial_loop.thisTrialN'
p3058
I157
sg894
g1000
sS'block_loop.thisIndex'
p3059
g888
sg38
S'left'
p3060
sg58
g62
sS'trial_loop.thisN'
p3061
I157
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p3062
g59
(g98
S'\x9d\x00\x00\x00'
tRp3063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3064
I0
sg903
g1008
sS'block_loop.thisRepN'
p3065
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3066
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p3067
Nsg69
Vn
sS'block_loop.thisTrialN'
p3068
I0
sg39
F0.78352094670844963
sg34
g752
(S'\x07\xdf\t\x1c\x0c;\x10\r\x04\x08'
tRp3069
sa(dp3070
S'trial_loop.thisTrialN'
p3071
I158
sg894
g1497
sS'block_loop.thisIndex'
p3072
g888
sg38
S'left'
p3073
sg58
g62
sS'trial_loop.thisN'
p3074
I158
sg33
g1501
sg63
g64
sS'trial_loop.thisIndex'
p3075
g59
(g98
S'\x9e\x00\x00\x00'
tRp3076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3077
I0
sg903
g1505
sS'block_loop.thisRepN'
p3078
I0
sg906
g1501
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3079
I0
sg908
g1508
sg55
g11
sS'block_loop.thisTrial'
p3080
Nsg69
Vn
sS'block_loop.thisTrialN'
p3081
I0
sg39
F0.81661339138736366
sg34
g752
(S'\x07\xdf\t\x1c\x0c;\x16\nA\x00'
tRp3082
sa(dp3083
S'trial_loop.thisTrialN'
p3084
I159
sg894
g1000
sS'block_loop.thisIndex'
p3085
g888
sg38
S'left'
p3086
sg58
g62
sS'trial_loop.thisN'
p3087
I159
sg33
g1011
sg63
g64
sS'trial_loop.thisIndex'
p3088
g59
(g98
S'\x9f\x00\x00\x00'
tRp3089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3090
I0
sg903
g1008
sS'block_loop.thisRepN'
p3091
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3092
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p3093
Nsg69
Vn
sS'block_loop.thisTrialN'
p3094
I0
sg39
F0.90018839264121198
sg34
g752
(S'\x07\xdf\t\x1c\x0c;\x1c\x07\xf7\x10'
tRp3095
sa(dp3096
S'trial_loop.thisTrialN'
p3097
I160
sg894
g1613
sS'block_loop.thisIndex'
p3098
g888
sg38
S'right'
p3099
sg58
g62
sS'trial_loop.thisN'
p3100
I160
sg33
g1617
sg63
g64
sS'trial_loop.thisIndex'
p3101
g59
(g98
S'\xa0\x00\x00\x00'
tRp3102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3103
I0
sg903
g1621
sS'block_loop.thisRepN'
p3104
I0
sg906
g1617
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3105
I0
sg908
g1624
sg55
g11
sS'block_loop.thisTrial'
p3106
Nsg69
Vn
sS'block_loop.thisTrialN'
p3107
I0
sg39
F1.1167749278120027
sg34
g752
(S'\x07\xdf\t\x1c\x0c;"\x06\xdd\xd0'
tRp3108
sa(dp3109
S'trial_loop.thisTrialN'
p3110
I161
sg894
g1321
sS'block_loop.thisIndex'
p3111
g888
sg38
S'left'
p3112
sg58
g62
sS'trial_loop.thisN'
p3113
I161
sg33
g1332
sg63
g64
sS'trial_loop.thisIndex'
p3114
g59
(g98
S'\xa1\x00\x00\x00'
tRp3115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3116
I0
sg903
g1329
sS'block_loop.thisRepN'
p3117
I0
sg906
g1325
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3118
I0
sg908
g1332
sg55
g11
sS'block_loop.thisTrial'
p3119
Nsg69
Vn
sS'block_loop.thisTrialN'
p3120
I0
sg39
F1.0668069728089904
sg34
g752
(S'\x07\xdf\t\x1c\x0c;(\t\x18 '
tRp3121
sa(dp3122
S'trial_loop.thisTrialN'
p3123
I162
sg894
g1497
sS'block_loop.thisIndex'
p3124
g888
sg38
S'left'
p3125
sg58
g62
sS'trial_loop.thisN'
p3126
I162
sg33
g1501
sg63
g64
sS'trial_loop.thisIndex'
p3127
g59
(g98
S'\xa2\x00\x00\x00'
tRp3128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3129
I0
sg903
g1505
sS'block_loop.thisRepN'
p3130
I0
sg906
g1501
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3131
I0
sg908
g1508
sg55
g11
sS'block_loop.thisTrial'
p3132
Nsg69
Vn
sS'block_loop.thisTrialN'
p3133
I0
sg39
F1.0832559767895873
sg34
g752
(S'\x07\xdf\t\x1c\x0c;.\n\x9e\xc0'
tRp3134
sa(dp3135
S'trial_loop.thisTrialN'
p3136
I163
sg894
g1351
sS'block_loop.thisIndex'
p3137
g888
sg38
S'left'
p3138
sg58
g62
sS'trial_loop.thisN'
p3139
I163
sg33
g1314
sg63
g64
sS'trial_loop.thisIndex'
p3140
g59
(g98
S'\xa3\x00\x00\x00'
tRp3141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3142
I0
sg903
g1358
sS'block_loop.thisRepN'
p3143
I0
sg906
g1314
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3144
I0
sg908
g1308
sg55
g11
sS'block_loop.thisTrial'
p3145
Nsg69
Vn
sS'block_loop.thisTrialN'
p3146
I0
sg39
F1.0838153387194325
sg34
g752
(S'\x07\xdf\t\x1c\x0c;4\x0c_\xf8'
tRp3147
sa(dp3148
S'trial_loop.thisTrialN'
p3149
I164
sg894
g1613
sS'block_loop.thisIndex'
p3150
g888
sg38
S'right'
p3151
sg58
g62
sS'trial_loop.thisN'
p3152
I164
sg33
g1624
sg63
g64
sS'trial_loop.thisIndex'
p3153
g59
(g98
S'\xa4\x00\x00\x00'
tRp3154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3155
I0
sg903
g1621
sS'block_loop.thisRepN'
p3156
I0
sg906
g1617
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3157
I0
sg908
g1624
sg55
g11
sS'block_loop.thisTrial'
p3158
Nsg69
Vn
sS'block_loop.thisTrialN'
p3159
I0
sg39
F1.0334482467624184
sg34
g752
(S'\x07\xdf\t\x1c\x0c;:\x0e_\xb0'
tRp3160
sa(dp3161
S'trial_loop.thisTrialN'
p3162
I165
sg894
g1000
sS'block_loop.thisIndex'
p3163
g888
sg38
S'left'
p3164
sg58
g62
sS'trial_loop.thisN'
p3165
I165
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p3166
g59
(g98
S'\xa5\x00\x00\x00'
tRp3167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3168
I0
sg903
g1008
sS'block_loop.thisRepN'
p3169
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3170
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p3171
Nsg69
Vn
sS'block_loop.thisTrialN'
p3172
I0
sg39
F1.1001477376921684
sg34
g752
(S'\x07\xdf\t\x1c\r\x00\x04\x0f*\xd0'
tRp3173
sa(dp3174
S'trial_loop.thisTrialN'
p3175
I166
sg894
g1096
sS'block_loop.thisIndex'
p3176
g888
sg38
S'right'
p3177
sg58
g62
sS'trial_loop.thisN'
p3178
I166
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p3179
g59
(g98
S'\xa6\x00\x00\x00'
tRp3180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3181
I0
sg903
g1103
sS'block_loop.thisRepN'
p3182
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3183
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p3184
Nsg69
Vn
sS'block_loop.thisTrialN'
p3185
I0
sg39
F5.0501107890140702
sg34
g752
(S'\x07\xdf\t\x1c\r\x00\x0b\x02&\xc8'
tRp3186
sa(dp3187
S'trial_loop.thisTrialN'
p3188
I167
sg894
g1366
sS'block_loop.thisIndex'
p3189
g888
sg38
S'right'
p3190
sg58
g62
sS'trial_loop.thisN'
p3191
I167
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p3192
g59
(g98
S'\xa7\x00\x00\x00'
tRp3193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3194
I0
sg903
g1373
sS'block_loop.thisRepN'
p3195
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3196
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p3197
Nsg69
Vn
sS'block_loop.thisTrialN'
p3198
I0
sg39
F1.0168204864457948
sg34
g752
(S'\x07\xdf\t\x1c\r\x00\x15\x03Wx'
tRp3199
sa(dp3200
S'trial_loop.thisTrialN'
p3201
I168
sg894
g2041
sS'block_loop.thisIndex'
p3202
g888
sg38
S'right'
p3203
sg58
g62
sS'trial_loop.thisN'
p3204
I168
sg33
g1325
sg63
g64
sS'trial_loop.thisIndex'
p3205
g59
(g98
S'\xa8\x00\x00\x00'
tRp3206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3207
I0
sg903
g2048
sS'block_loop.thisRepN'
p3208
I0
sg906
g1325
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3209
I0
sg908
g1332
sg55
g11
sS'block_loop.thisTrial'
p3210
Nsg69
Vn
sS'block_loop.thisTrialN'
p3211
I0
sg39
F1.4668585184954281
sg34
g752
(S'\x07\xdf\t\x1c\r\x00\x1b\x04"\x98'
tRp3212
sa(dp3213
S'trial_loop.thisTrialN'
p3214
I169
sg894
g1933
sS'block_loop.thisIndex'
p3215
g888
sg38
S'left'
p3216
sg58
g62
sS'trial_loop.thisN'
p3217
I169
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p3218
g59
(g98
S'\xa9\x00\x00\x00'
tRp3219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3220
I0
sg903
g1940
sS'block_loop.thisRepN'
p3221
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3222
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p3223
Nsg69
Vn
sS'block_loop.thisTrialN'
p3224
I0
sg39
F1.1001508737681434
sg34
g752
(S'\x07\xdf\t\x1c\r\x00!\x0b\x9c\xa8'
tRp3225
sa(dp3226
S'trial_loop.thisTrialN'
p3227
I170
sg894
g1948
sS'block_loop.thisIndex'
p3228
g888
sg38
S'left'
p3229
sg58
g62
sS'trial_loop.thisN'
p3230
I170
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p3231
g59
(g98
S'\xaa\x00\x00\x00'
tRp3232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3233
I0
sg903
g1955
sS'block_loop.thisRepN'
p3234
I0
sg906
g1066
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3235
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p3236
Nsg69
Vn
sS'block_loop.thisTrialN'
p3237
I0
sg39
F0.76687665071585798
sg34
g752
(S"\x07\xdf\t\x1c\r\x00'\r\xd6\xf8"
tRp3238
sa(dp3239
S'trial_loop.thisTrialN'
p3240
I171
sg894
g1047
sS'block_loop.thisIndex'
p3241
g888
sg38
S'right'
p3242
sg58
g62
sS'trial_loop.thisN'
p3243
I171
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p3244
g59
(g98
S'\xab\x00\x00\x00'
tRp3245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3246
I0
sg903
g1054
sS'block_loop.thisRepN'
p3247
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3248
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p3249
Nsg69
Vn
sS'block_loop.thisTrialN'
p3250
I0
sg39
F0.91688856780638162
sg34
g752
(S'\x07\xdf\t\x1c\r\x00-\n\x9a\xd8'
tRp3251
sa(dp3252
S'trial_loop.thisTrialN'
p3253
I172
sg894
g1261
sS'block_loop.thisIndex'
p3254
g888
sg38
S'right'
p3255
sg58
g62
sS'trial_loop.thisN'
p3256
I172
sg33
g1231
sg63
g64
sS'trial_loop.thisIndex'
p3257
g59
(g98
S'\xac\x00\x00\x00'
tRp3258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3259
I0
sg903
g1268
sS'block_loop.thisRepN'
p3260
I0
sg906
g1231
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3261
I0
sg908
g1238
sg55
g11
sS'block_loop.thisTrial'
p3262
Nsg69
Vn
sS'block_loop.thisTrialN'
p3263
I0
sg39
F1.050179497589852
sg34
g752
(S'\x07\xdf\t\x1c\r\x003\t\xfa\xb0'
tRp3264
sa(dp3265
S'trial_loop.thisTrialN'
p3266
I173
sg894
g1669
sS'block_loop.thisIndex'
p3267
g888
sg38
S'right'
p3268
sg58
g62
sS'trial_loop.thisN'
p3269
I173
sg33
g1617
sg63
g64
sS'trial_loop.thisIndex'
p3270
g59
(g98
S'\xad\x00\x00\x00'
tRp3271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3272
I0
sg903
g1676
sS'block_loop.thisRepN'
p3273
I0
sg906
g1617
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3274
I0
sg908
g1624
sg55
g11
sS'block_loop.thisTrial'
p3275
Nsg69
Vn
sS'block_loop.thisTrialN'
p3276
I0
sg39
F1.0672286324879678
sg34
g752
(S'\x07\xdf\t\x1c\r\x009\x0bB\xd0'
tRp3277
sa(dp3278
S'trial_loop.thisTrialN'
p3279
I174
sg894
g1210
sS'block_loop.thisIndex'
p3280
g888
sg38
S'right'
p3281
sg58
g62
sS'trial_loop.thisN'
p3282
I174
sg33
g1214
sg63
g64
sS'trial_loop.thisIndex'
p3283
g59
(g98
S'\xae\x00\x00\x00'
tRp3284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3285
I0
sg903
g1218
sS'block_loop.thisRepN'
p3286
I0
sg906
g1214
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3287
I0
sg908
g1221
sg55
g11
sS'block_loop.thisTrial'
p3288
Nsg69
Vn
sS'block_loop.thisTrialN'
p3289
I0
sg39
F0.76688434835705266
sg34
g752
(S'\x07\xdf\t\x1c\r\x01\x03\x0c\xc9p'
tRp3290
sa(dp3291
S'trial_loop.thisTrialN'
p3292
I175
sg894
g1096
sS'block_loop.thisIndex'
p3293
g888
sg38
S'left'
p3294
sg58
g62
sS'trial_loop.thisN'
p3295
I175
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p3296
g59
(g98
S'\xaf\x00\x00\x00'
tRp3297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3298
I0
sg903
g1103
sS'block_loop.thisRepN'
p3299
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3300
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p3301
Nsg69
Vn
sS'block_loop.thisTrialN'
p3302
I0
sg39
F1.4168577772416029
sg34
g752
(S'\x07\xdf\t\x1c\r\x01\t\t\xc7\xe8'
tRp3303
sa(dp3304
S'trial_loop.thisTrialN'
p3305
I176
sg894
g1062
sS'block_loop.thisIndex'
p3306
g888
sg38
S'right'
p3307
sg58
g62
sS'trial_loop.thisN'
p3308
I176
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p3309
g59
(g98
S'\xb0\x00\x00\x00'
tRp3310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3311
I0
sg903
g1070
sS'block_loop.thisRepN'
p3312
I0
sg906
g1066
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3313
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p3314
Nsg69
Vn
sS'block_loop.thisTrialN'
p3315
I0
sg39
F1.3835620578120142
sg34
g752
(S'\x07\xdf\t\x1c\r\x01\x10\x01H '
tRp3316
sa(dp3317
S'trial_loop.thisTrialN'
p3318
I177
sg894
g1613
sS'block_loop.thisIndex'
p3319
g888
sg38
S'left'
p3320
sg58
g62
sS'trial_loop.thisN'
p3321
I177
sg33
g1617
sg63
g64
sS'trial_loop.thisIndex'
p3322
g59
(g98
S'\xb1\x00\x00\x00'
tRp3323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3324
I0
sg903
g1621
sS'block_loop.thisRepN'
p3325
I0
sg906
g1617
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3326
I0
sg908
g1624
sg55
g11
sS'block_loop.thisTrial'
p3327
Nsg69
Vn
sS'block_loop.thisTrialN'
p3328
I0
sg39
F1.5000826783689263
sg34
g752
(S'\x07\xdf\t\x1c\r\x01\x16\x07\x8d\x98'
tRp3329
sa(dp3330
S'trial_loop.thisTrialN'
p3331
I178
sg894
g1497
sS'block_loop.thisIndex'
p3332
g888
sg38
S'left'
p3333
sg58
g62
sS'trial_loop.thisN'
p3334
I178
sg33
g1501
sg63
g64
sS'trial_loop.thisIndex'
p3335
g59
(g98
S'\xb2\x00\x00\x00'
tRp3336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3337
I0
sg903
g1505
sS'block_loop.thisRepN'
p3338
I0
sg906
g1501
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3339
I0
sg908
g1508
sg55
g11
sS'block_loop.thisTrial'
p3340
Nsg69
Vn
sS'block_loop.thisTrialN'
p3341
I0
sg39
F1.0336081866425957
sg34
g752
(S'\x07\xdf\t\x1c\r\x01\x1d\x00}\x00'
tRp3342
sa(dp3343
S'trial_loop.thisTrialN'
p3344
I179
sg894
g1514
sS'block_loop.thisIndex'
p3345
g888
sg38
S'left'
p3346
sg58
g62
sS'trial_loop.thisN'
p3347
I179
sg33
g1491
sg63
g64
sS'trial_loop.thisIndex'
p3348
g59
(g98
S'\xb3\x00\x00\x00'
tRp3349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3350
I0
sg903
g1521
sS'block_loop.thisRepN'
p3351
I0
sg906
g1484
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3352
I0
sg908
g1491
sg55
g11
sS'block_loop.thisTrial'
p3353
Nsg69
Vn
sS'block_loop.thisTrialN'
p3354
I0
sg39
F1.3001940375779668
sg34
g752
(S'\x07\xdf\t\x1c\r\x01#\x01\x86\xa0'
tRp3355
sa(dp3356
S'trial_loop.thisTrialN'
p3357
I180
sg894
g1124
sS'block_loop.thisIndex'
p3358
g888
sg38
S'left'
p3359
sg58
g62
sS'trial_loop.thisN'
p3360
I180
sg33
g1135
sg63
g64
sS'trial_loop.thisIndex'
p3361
g59
(g98
S'\xb4\x00\x00\x00'
tRp3362
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3363
I0
sg903
g1132
sS'block_loop.thisRepN'
p3364
I0
sg906
g1128
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3365
I0
sg908
g1135
sg55
g11
sS'block_loop.thisTrial'
p3366
Nsg69
Vn
sS'block_loop.thisTrialN'
p3367
I0
sg39
F0.93352231517565087
sg34
g752
(S'\x07\xdf\t\x1c\r\x01)\x06\x9fP'
tRp3368
sa(dp3369
S'trial_loop.thisTrialN'
p3370
I181
sg894
g1555
sS'block_loop.thisIndex'
p3371
g888
sg38
S'left'
p3372
sg58
g62
sS'trial_loop.thisN'
p3373
I181
sg33
g1559
sg63
g64
sS'trial_loop.thisIndex'
p3374
g59
(g98
S'\xb5\x00\x00\x00'
tRp3375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3376
I0
sg903
g1563
sS'block_loop.thisRepN'
p3377
I0
sg906
g1559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3378
I0
sg908
g1566
sg55
g11
sS'block_loop.thisTrial'
p3379
Nsg69
Vn
sS'block_loop.thisTrialN'
p3380
I0
sg39
F1.0333250845033035
sg34
g752
(S'\x07\xdf\t\x1c\r\x01/\x06=\xa8'
tRp3381
sa(dp3382
S'trial_loop.thisTrialN'
p3383
I182
sg894
g1096
sS'block_loop.thisIndex'
p3384
g888
sg38
S'left'
p3385
sg58
g62
sS'trial_loop.thisN'
p3386
I182
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p3387
g59
(g98
S'\xb6\x00\x00\x00'
tRp3388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3389
I0
sg903
g1103
sS'block_loop.thisRepN'
p3390
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3391
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p3392
Nsg69
Vn
sS'block_loop.thisTrialN'
p3393
I0
sg39
F0.91685806233726908
sg34
g752
(S'\x07\xdf\t\x1c\r\x015\x07\x08\xc8'
tRp3394
sa(dp3395
S'trial_loop.thisTrialN'
p3396
I183
sg894
g2041
sS'block_loop.thisIndex'
p3397
g888
sg38
S'right'
p3398
sg58
g62
sS'trial_loop.thisN'
p3399
I183
sg33
g1325
sg63
g64
sS'trial_loop.thisIndex'
p3400
g59
(g98
S'\xb7\x00\x00\x00'
tRp3401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3402
I0
sg903
g2048
sS'block_loop.thisRepN'
p3403
I0
sg906
g1325
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3404
I0
sg908
g1332
sg55
g11
sS'block_loop.thisTrial'
p3405
Nsg69
Vn
sS'block_loop.thisTrialN'
p3406
I0
sg39
F1.0172122108542681
sg34
g752
(S'\x07\xdf\t\x1c\r\x01;\x06l\x88'
tRp3407
sa(dp3408
S'trial_loop.thisTrialN'
p3409
I184
sg894
g1409
sS'block_loop.thisIndex'
p3410
g888
sg38
S'right'
p3411
sg58
g62
sS'trial_loop.thisN'
p3412
I184
sg33
g1128
sg63
g64
sS'trial_loop.thisIndex'
p3413
g59
(g98
S'\xb8\x00\x00\x00'
tRp3414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3415
I0
sg903
g1416
sS'block_loop.thisRepN'
p3416
I0
sg906
g1128
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3417
I0
sg908
g1135
sg55
g11
sS'block_loop.thisTrial'
p3418
Nsg69
Vn
sS'block_loop.thisTrialN'
p3419
I0
sg39
F0.93353172340539459
sg34
g752
(S'\x07\xdf\t\x1c\r\x02\x05\x07;\x90'
tRp3420
sa(dp3421
S'trial_loop.thisTrialN'
p3422
I185
sg894
g1465
sS'block_loop.thisIndex'
p3423
g888
sg38
S'left'
p3424
sg58
g62
sS'trial_loop.thisN'
p3425
I185
sg33
g1214
sg63
g64
sS'trial_loop.thisIndex'
p3426
g59
(g98
S'\xb9\x00\x00\x00'
tRp3427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3428
I0
sg903
g1472
sS'block_loop.thisRepN'
p3429
I0
sg906
g1214
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3430
I0
sg908
g1221
sg55
g11
sS'block_loop.thisTrial'
p3431
Nsg69
Vn
sS'block_loop.thisTrialN'
p3432
I0
sg39
F0.73345605844406236
sg34
g752
(S'\x07\xdf\t\x1c\r\x02\x0b\x06\x9bh'
tRp3433
sa(dp3434
S'trial_loop.thisTrialN'
p3435
I186
sg894
g1062
sS'block_loop.thisIndex'
p3436
g888
sg38
S'right'
p3437
sg58
g62
sS'trial_loop.thisN'
p3438
I186
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p3439
g59
(g98
S'\xba\x00\x00\x00'
tRp3440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3441
I0
sg903
g1070
sS'block_loop.thisRepN'
p3442
I0
sg906
g1066
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3443
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p3444
Nsg69
Vn
sS'block_loop.thisTrialN'
p3445
I0
sg39
F1.466873058483543
sg34
g752
(S'\x07\xdf\t\x1c\r\x02\x11\x03 \xc8'
tRp3446
sa(dp3447
S'trial_loop.thisTrialN'
p3448
I187
sg894
g1424
sS'block_loop.thisIndex'
p3449
g888
sg38
S'left'
p3450
sg58
g62
sS'trial_loop.thisN'
p3451
I187
sg33
g1248
sg63
g64
sS'trial_loop.thisIndex'
p3452
g59
(g98
S'\xbb\x00\x00\x00'
tRp3453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3454
I0
sg903
g1431
sS'block_loop.thisRepN'
p3455
I0
sg906
g1248
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3456
I0
sg908
g1255
sg55
g11
sS'block_loop.thisTrial'
p3457
Nsg69
Vn
sS'block_loop.thisTrialN'
p3458
I0
sg39
F0.83353594285290455
sg34
g752
(S'\x07\xdf\t\x1c\r\x02\x17\n\x96\xf0'
tRp3459
sa(dp3460
S'trial_loop.thisTrialN'
p3461
I188
sg894
g1480
sS'block_loop.thisIndex'
p3462
g888
sg38
S'right'
p3463
sg58
g62
sS'trial_loop.thisN'
p3464
I188
sg33
g1484
sg63
g64
sS'trial_loop.thisIndex'
p3465
g59
(g98
S'\xbc\x00\x00\x00'
tRp3466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3467
I0
sg903
g1488
sS'block_loop.thisRepN'
p3468
I0
sg906
g1484
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3469
I0
sg908
g1491
sg55
g11
sS'block_loop.thisTrial'
p3470
Nsg69
Vn
sS'block_loop.thisTrialN'
p3471
I0
sg39
F1.0505695114115952
sg34
g752
(S'\x07\xdf\t\x1c\r\x02\x1d\x08\x8b\x80'
tRp3472
sa(dp3473
S'trial_loop.thisTrialN'
p3474
I189
sg894
g1304
sS'block_loop.thisIndex'
p3475
g888
sg38
S'left'
p3476
sg58
g62
sS'trial_loop.thisN'
p3477
I189
sg33
g1314
sg63
g64
sS'trial_loop.thisIndex'
p3478
g59
(g98
S'\xbd\x00\x00\x00'
tRp3479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3480
I0
sg903
g1312
sS'block_loop.thisRepN'
p3481
I0
sg906
g1314
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3482
I0
sg908
g1308
sg55
g11
sS'block_loop.thisTrial'
p3483
Nsg69
Vn
sS'block_loop.thisTrialN'
p3484
I0
sg39
F0.95022990288453002
sg34
g752
(S'\x07\xdf\t\x1c\r\x02#\t\xd3\xa0'
tRp3485
sa(dp3486
S'trial_loop.thisTrialN'
p3487
I190
sg894
g1210
sS'block_loop.thisIndex'
p3488
g888
sg38
S'right'
p3489
sg58
g62
sS'trial_loop.thisN'
p3490
I190
sg33
g1214
sg63
g64
sS'trial_loop.thisIndex'
p3491
g59
(g98
S'\xbe\x00\x00\x00'
tRp3492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3493
I0
sg903
g1218
sS'block_loop.thisRepN'
p3494
I0
sg906
g1214
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3495
I0
sg908
g1221
sg55
g11
sS'block_loop.thisTrial'
p3496
Nsg69
Vn
sS'block_loop.thisTrialN'
p3497
I0
sg39
F1.0001325704888586
sg34
g752
(S'\x07\xdf\t\x1c\r\x02)\t\xac\x90'
tRp3498
sa(dp3499
S'trial_loop.thisTrialN'
p3500
I191
sg894
g1613
sS'block_loop.thisIndex'
p3501
g888
sg38
S'left'
p3502
sg58
g62
sS'trial_loop.thisN'
p3503
I191
sg33
g1624
sg63
g64
sS'trial_loop.thisIndex'
p3504
g59
(g98
S'\xbf\x00\x00\x00'
tRp3505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3506
I0
sg903
g1621
sS'block_loop.thisRepN'
p3507
I0
sg906
g1617
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3508
I0
sg908
g1624
sg55
g11
sS'block_loop.thisTrial'
p3509
Nsg69
Vn
sS'block_loop.thisTrialN'
p3510
I0
sg39
F1.0002200955204898
sg34
g752
(S'\x07\xdf\t\x1c\r\x02/\nA\x00'
tRp3511
sa(dp3512
S'trial_loop.thisTrialN'
p3513
I192
sg894
g1169
sS'block_loop.thisIndex'
p3514
g888
sg38
S'right'
p3515
sg58
g62
sS'trial_loop.thisN'
p3516
I192
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3517
g59
(g98
S'\xc0\x00\x00\x00'
tRp3518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3519
I0
sg903
g1176
sS'block_loop.thisRepN'
p3520
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3521
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p3522
Nsg69
Vn
sS'block_loop.thisTrialN'
p3523
I0
sg39
F0.88349933629251609
sg34
g752
(S'\x07\xdf\t\x1c\r\x025\n\x93\x08'
tRp3524
sa(dp3525
S'trial_loop.thisTrialN'
p3526
I193
sg894
g915
sS'block_loop.thisIndex'
p3527
g888
sg38
S'right'
p3528
sg58
g62
sS'trial_loop.thisN'
p3529
I193
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3530
g59
(g98
S'\xc1\x00\x00\x00'
tRp3531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3532
I0
sg903
g923
sS'block_loop.thisRepN'
p3533
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3534
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3535
Nsg69
Vn
sS'block_loop.thisTrialN'
p3536
I0
sg39
F1.1172584537216608
sg34
g752
(S'\x07\xdf\t\x1c\r\x02;\ty\xc8'
tRp3537
sa(dp3538
S'trial_loop.thisTrialN'
p3539
I194
sg894
g1366
sS'block_loop.thisIndex'
p3540
g888
sg38
S'right'
p3541
sg58
g62
sS'trial_loop.thisN'
p3542
I194
sg33
g994
sg63
g64
sS'trial_loop.thisIndex'
p3543
g59
(g98
S'\xc2\x00\x00\x00'
tRp3544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3545
I0
sg903
g1373
sS'block_loop.thisRepN'
p3546
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3547
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p3548
Nsg69
Vn
sS'block_loop.thisTrialN'
p3549
I0
sg39
F1.0668357676877349
sg34
g752
(S'\x07\xdf\t\x1c\r\x03\x05\x0b\xb8\x00'
tRp3550
sa(dp3551
S'trial_loop.thisTrialN'
p3552
I195
sg894
g1409
sS'block_loop.thisIndex'
p3553
g888
sg38
S'right'
p3554
sg58
g62
sS'trial_loop.thisN'
p3555
I195
sg33
g1135
sg63
g64
sS'trial_loop.thisIndex'
p3556
g59
(g98
S'\xc3\x00\x00\x00'
tRp3557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3558
I0
sg903
g1416
sS'block_loop.thisRepN'
p3559
I0
sg906
g1128
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3560
I0
sg908
g1135
sg55
g11
sS'block_loop.thisTrial'
p3561
Nsg69
Vn
sS'block_loop.thisTrialN'
p3562
I0
sg39
F1.7001831468423916
sg34
g752
(S'\x07\xdf\t\x1c\r\x03\x0b\r:\xb8'
tRp3563
sa(dp3564
S'trial_loop.thisTrialN'
p3565
I196
sg894
g1555
sS'block_loop.thisIndex'
p3566
g888
sg38
S'right'
p3567
sg58
g62
sS'trial_loop.thisN'
p3568
I196
sg33
g1559
sg63
g64
sS'trial_loop.thisIndex'
p3569
g59
(g98
S'\xc4\x00\x00\x00'
tRp3570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3571
I0
sg903
g1563
sS'block_loop.thisRepN'
p3572
I0
sg906
g1559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3573
I0
sg908
g1566
sg55
g11
sS'block_loop.thisTrial'
p3574
Nsg69
Vn
sS'block_loop.thisTrialN'
p3575
I0
sg39
F1.1167321631401137
sg34
g752
(S'\x07\xdf\t\x1c\r\x03\x12\t?0'
tRp3576
sa(dp3577
S'trial_loop.thisTrialN'
p3578
I197
sg894
g1017
sS'block_loop.thisIndex'
p3579
g888
sg38
S'left'
p3580
sg58
g62
sS'trial_loop.thisN'
p3581
I197
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p3582
g59
(g98
S'\xc5\x00\x00\x00'
tRp3583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3584
I0
sg903
g1025
sS'block_loop.thisRepN'
p3585
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3586
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p3587
Nsg69
Vn
sS'block_loop.thisTrialN'
p3588
I0
sg39
F1.2501140391286754
sg34
g752
(S'\x07\xdf\t\x1c\r\x03\x18\x0b}h'
tRp3589
sa(dp3590
S'trial_loop.thisTrialN'
p3591
I198
sg894
g1749
sS'block_loop.thisIndex'
p3592
g888
sg38
S'right'
p3593
sg58
g62
sS'trial_loop.thisN'
p3594
I198
sg33
g1508
sg63
g64
sS'trial_loop.thisIndex'
p3595
g59
(g98
S'\xc6\x00\x00\x00'
tRp3596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3597
I0
sg903
g1756
sS'block_loop.thisRepN'
p3598
I0
sg906
g1501
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3599
I0
sg908
g1508
sg55
g11
sS'block_loop.thisTrial'
p3600
Nsg69
Vn
sS'block_loop.thisTrialN'
p3601
I0
sg39
F0.71697027684058412
sg34
g752
(S'\x07\xdf\t\x1c\r\x03\x1f\x00\x9c@'
tRp3602
sa(dp3603
S'trial_loop.thisTrialN'
p3604
I199
sg894
g1289
sS'block_loop.thisIndex'
p3605
g888
sg38
S'right'
p3606
sg58
g62
sS'trial_loop.thisN'
p3607
I199
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p3608
g59
(g98
S'\xc7\x00\x00\x00'
tRp3609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3610
I0
sg903
g1296
sS'block_loop.thisRepN'
p3611
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3612
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3613
Nsg69
Vn
sS'block_loop.thisTrialN'
p3614
I0
sg39
F1.1834678614923178
sg34
g752
(S'\x07\xdf\t\x1c\r\x03$\x0b\xe6\xe0'
tRp3615
sa(dp3616
S'block_loop.thisRepN'
p3617
I0
sg55
g11
sg41
F3.9834771556816122
sg56
Vr
sS'block_loop.thisIndex'
p3618
g888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3619
I0
sg40
S'space'
p3620
sg63
g64
sS'block_loop.thisTrial'
p3621
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3622
I0
sg69
Vn
sa(dp3623
S'block_loop.thisRepN'
p3624
I1
sg56
Vr
sS'block_loop.thisIndex'
p3625
g59
(g98
S'\x00\x00\x00\x00'
tRp3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3627
I1
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p3628
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3629
I0
sg69
Vn
sa(dp3630
S'trial_loop.thisTrialN'
p3631
I0
sS'img_left'
p3632
S'33-ambrosia_rice.png'
p3633
sS'block_loop.thisIndex'
p3634
g3626
sg38
S'right'
p3635
sg58
g62
sS'trial_loop.thisN'
p3636
I0
sg33
S'23-crunchie_redo.png'
p3637
sg63
g64
sS'trial_loop.thisIndex'
p3638
g59
(g98
S'\x00\x00\x00\x00'
tRp3639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3640
I0
sS'img_right'
p3641
S'23-crunchie_redo.png'
p3642
sS'block_loop.thisRepN'
p3643
I1
sS'img_correct'
p3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3645
I1
sS'img_wrong'
p3646
S'33-ambrosia_rice.png'
p3647
sg55
g11
sS'block_loop.thisTrial'
p3648
Nsg69
Vn
sS'block_loop.thisTrialN'
p3649
I0
sg39
F2.2834337067743036
sg34
g752
(S'\x07\xdf\t\x1c\r\x034\x00U\xf0'
tRp3650
sa(dp3651
S'trial_loop.thisTrialN'
p3652
I1
sg3632
S'6-sour_patch_kids.png'
p3653
sS'block_loop.thisIndex'
p3654
g3626
sg38
S'right'
p3655
sg58
g62
sS'trial_loop.thisN'
p3656
I1
sg33
S'38-maltesers.png'
p3657
sg63
g64
sS'trial_loop.thisIndex'
p3658
g59
(g98
S'\x01\x00\x00\x00'
tRp3659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3660
I0
sg3641
S'38-maltesers.png'
p3661
sS'block_loop.thisRepN'
p3662
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3663
I1
sg3646
S'6-sour_patch_kids.png'
p3664
sg55
g11
sS'block_loop.thisTrial'
p3665
Nsg69
Vn
sS'block_loop.thisTrialN'
p3666
I0
sg39
F1.1665014049631282
sg34
g752
(S'\x07\xdf\t\x1c\r\x03;\x05(P'
tRp3667
sa(dp3668
S'trial_loop.thisTrialN'
p3669
I2
sg3632
S'46-pistachios.png'
p3670
sS'block_loop.thisIndex'
p3671
g3626
sg38
S'left'
p3672
sg58
g62
sS'trial_loop.thisN'
p3673
I2
sg33
S'46-pistachios.png'
p3674
sg63
g64
sS'trial_loop.thisIndex'
p3675
g59
(g98
S'\x02\x00\x00\x00'
tRp3676
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3677
I0
sg3641
S'29-beans.png'
p3678
sS'block_loop.thisRepN'
p3679
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3680
I1
sg3646
S'29-beans.png'
p3681
sg55
g11
sS'block_loop.thisTrial'
p3682
Nsg69
Vn
sS'block_loop.thisTrialN'
p3683
I0
sg39
F0.88380239527759841
sg34
g752
(S'\x07\xdf\t\x1c\r\x04\x05\x08\x1a8'
tRp3684
sa(dp3685
S'trial_loop.thisTrialN'
p3686
I3
sg3632
S'13-mccoys_steak_crisps.png'
p3687
sS'block_loop.thisIndex'
p3688
g3626
sg38
S'right'
p3689
sg58
g62
sS'trial_loop.thisN'
p3690
I3
sg33
S'3-ellas_strawberries_apples.png'
p3691
sg63
g64
sS'trial_loop.thisIndex'
p3692
g59
(g98
S'\x03\x00\x00\x00'
tRp3693
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3694
I0
sg3641
S'3-ellas_strawberries_apples.png'
p3695
sS'block_loop.thisRepN'
p3696
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3697
I1
sg3646
S'13-mccoys_steak_crisps.png'
p3698
sg55
g11
sS'block_loop.thisTrial'
p3699
Nsg69
Vn
sS'block_loop.thisTrialN'
p3700
I0
sg39
F0.85020105098374188
sg34
g752
(S'\x07\xdf\t\x1c\r\x04\x0b\x06\xc6`'
tRp3701
sa(dp3702
S'trial_loop.thisTrialN'
p3703
I4
sg3632
S'16-skips_prawn.png'
p3704
sS'block_loop.thisIndex'
p3705
g3626
sg38
S'right'
p3706
sg58
g62
sS'trial_loop.thisN'
p3707
I4
sg33
S'42-mrkipling_lemon_slices.png'
p3708
sg63
g64
sS'trial_loop.thisIndex'
p3709
g59
(g98
S'\x04\x00\x00\x00'
tRp3710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3711
I0
sg3641
S'42-mrkipling_lemon_slices.png'
p3712
sS'block_loop.thisRepN'
p3713
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3714
I1
sg3646
S'16-skips_prawn.png'
p3715
sg55
g11
sS'block_loop.thisTrial'
p3716
Nsg69
Vn
sS'block_loop.thisTrialN'
p3717
I0
sg39
F1.0833799943429767
sg34
g752
(S'\x07\xdf\t\x1c\r\x04\x11\x04\xf5\x88'
tRp3718
sa(dp3719
S'trial_loop.thisTrialN'
p3720
I5
sg3632
S'40-sardines.png'
p3721
sS'block_loop.thisIndex'
p3722
g3626
sg38
S'left'
p3723
sg58
g62
sS'trial_loop.thisN'
p3724
I5
sg33
S'40-sardines.png'
p3725
sg63
g64
sS'trial_loop.thisIndex'
p3726
g59
(g98
S'\x05\x00\x00\x00'
tRp3727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3728
I0
sg3641
S'5-pineapple.png'
p3729
sS'block_loop.thisRepN'
p3730
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3731
I1
sg3646
S'5-pineapple.png'
p3732
sg55
g11
sS'block_loop.thisTrial'
p3733
Nsg69
Vn
sS'block_loop.thisTrialN'
p3734
I0
sg39
F1.8335259644300095
sg34
g752
(S'\x07\xdf\t\x1c\r\x04\x17\x06\xf5@'
tRp3735
sa(dp3736
S'trial_loop.thisTrialN'
p3737
I6
sg3632
S'21-nakd_banana_crunch.png'
p3738
sS'block_loop.thisIndex'
p3739
g3626
sg38
S'right'
p3740
sg58
g62
sS'trial_loop.thisN'
p3741
I6
sg33
S'1-treacle_cookies.png'
p3742
sg63
g64
sS'trial_loop.thisIndex'
p3743
g59
(g98
S'\x06\x00\x00\x00'
tRp3744
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3745
I0
sg3641
S'1-treacle_cookies.png'
p3746
sS'block_loop.thisRepN'
p3747
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3748
I1
sg3646
S'21-nakd_banana_crunch.png'
p3749
sg55
g11
sS'block_loop.thisTrial'
p3750
Nsg69
Vn
sS'block_loop.thisTrialN'
p3751
I0
sg39
F0.85014745259468327
sg34
g752
(S'\x07\xdf\t\x1c\r\x04\x1e\x04\xe2\x00'
tRp3752
sa(dp3753
S'trial_loop.thisTrialN'
p3754
I7
sg3632
S'2-steamed_puddings.png'
p3755
sS'block_loop.thisIndex'
p3756
g3626
sg38
S'left'
p3757
sg58
g62
sS'trial_loop.thisN'
p3758
I7
sg33
S'2-steamed_puddings.png'
p3759
sg63
g64
sS'trial_loop.thisIndex'
p3760
g59
(g98
S'\x07\x00\x00\x00'
tRp3761
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3762
I0
sg3641
S'20-fruit_pastilles.png'
p3763
sS'block_loop.thisRepN'
p3764
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3765
I1
sg3646
S'20-fruit_pastilles.png'
p3766
sg55
g11
sS'block_loop.thisTrial'
p3767
Nsg69
Vn
sS'block_loop.thisTrialN'
p3768
I0
sg39
F1.2168887388652365
sg34
g752
(S'\x07\xdf\t\x1c\r\x04$\x03\x11('
tRp3769
sa(dp3770
S'trial_loop.thisTrialN'
p3771
I8
sg3632
S'29-beans.png'
p3772
sS'block_loop.thisIndex'
p3773
g3626
sg38
S'right'
p3774
sg58
g62
sS'trial_loop.thisN'
p3775
I8
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p3776
g59
(g98
S'\x08\x00\x00\x00'
tRp3777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3778
I0
sg3641
S'46-pistachios.png'
p3779
sS'block_loop.thisRepN'
p3780
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3781
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p3782
Nsg69
Vn
sS'block_loop.thisTrialN'
p3783
I0
sg39
F0.73358919912607234
sg34
g752
(S'\x07\xdf\t\x1c\r\x04*\x06\xf9('
tRp3784
sa(dp3785
S'trial_loop.thisTrialN'
p3786
I9
sg3632
S'45-chewy_nougat_redo.png'
p3787
sS'block_loop.thisIndex'
p3788
g3626
sg38
S'right'
p3789
sg58
g62
sS'trial_loop.thisN'
p3790
I9
sg33
S'41-peanuts_redo.png'
p3791
sg63
g64
sS'trial_loop.thisIndex'
p3792
g59
(g98
S'\t\x00\x00\x00'
tRp3793
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3794
I0
sg3641
S'41-peanuts_redo.png'
p3795
sS'block_loop.thisRepN'
p3796
I1
sg3644
g3791
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3797
I1
sg3646
S'45-chewy_nougat_redo.png'
p3798
sg55
g11
sS'block_loop.thisTrial'
p3799
Nsg69
Vn
sS'block_loop.thisTrialN'
p3800
I0
sg39
F1.3834996213900013
sg34
g752
(S'\x07\xdf\t\x1c\r\x040\x03@\x08'
tRp3801
sa(dp3802
S'trial_loop.thisTrialN'
p3803
I10
sg3632
S'7-olives.png'
p3804
sS'block_loop.thisIndex'
p3805
g3626
sg38
S'right'
p3806
sg58
g62
sS'trial_loop.thisN'
p3807
I10
sg33
S'22-daim.png'
p3808
sg63
g64
sS'trial_loop.thisIndex'
p3809
g59
(g98
S'\n\x00\x00\x00'
tRp3810
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3811
I0
sg3641
S'22-daim.png'
p3812
sS'block_loop.thisRepN'
p3813
I1
sg3644
g3808
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3814
I1
sg3646
S'7-olives.png'
p3815
sg55
g11
sS'block_loop.thisTrial'
p3816
Nsg69
Vn
sS'block_loop.thisTrialN'
p3817
I0
sg39
F0.81685543943785888
sg34
g752
(S'\x07\xdf\t\x1c\r\x046\t\xc4\x00'
tRp3818
sa(dp3819
S'trial_loop.thisTrialN'
p3820
I11
sg3632
S'30-spaghetti_hoops.png'
p3821
sS'block_loop.thisIndex'
p3822
g3626
sg38
S'left'
p3823
sg58
g62
sS'trial_loop.thisN'
p3824
I11
sg33
S'19-caramello_redo.png'
p3825
sg63
g64
sS'trial_loop.thisIndex'
p3826
g59
(g98
S'\x0b\x00\x00\x00'
tRp3827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3828
I0
sg3641
S'19-caramello_redo.png'
p3829
sS'block_loop.thisRepN'
p3830
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3831
I1
sg3646
S'30-spaghetti_hoops.png'
p3832
sg55
g11
sS'block_loop.thisTrial'
p3833
Nsg69
Vn
sS'block_loop.thisTrialN'
p3834
I0
sg39
F1.0834273205819045
sg34
g752
(S'\x07\xdf\t\x1c\r\x05\x00\x07?x'
tRp3835
sa(dp3836
S'trial_loop.thisTrialN'
p3837
I12
sg3632
S'10-bounty_redo.png'
p3838
sS'block_loop.thisIndex'
p3839
g3626
sg38
S'left'
p3840
sg58
g62
sS'trial_loop.thisN'
p3841
I12
sg33
S'10-bounty_redo.png'
p3842
sg63
g64
sS'trial_loop.thisIndex'
p3843
g59
(g98
S'\x0c\x00\x00\x00'
tRp3844
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3845
I0
sg3641
S'4-corn.png'
p3846
sS'block_loop.thisRepN'
p3847
I1
sg3644
g3842
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3848
I1
sg3646
S'4-corn.png'
p3849
sg55
g11
sS'block_loop.thisTrial'
p3850
Nsg69
Vn
sS'block_loop.thisTrialN'
p3851
I0
sg39
F1.1501972306741663
sg34
g752
(S'\x07\xdf\t\x1c\r\x05\x06\t;H'
tRp3852
sa(dp3853
S'trial_loop.thisTrialN'
p3854
I13
sg3632
S'38-maltesers.png'
p3855
sS'block_loop.thisIndex'
p3856
g3626
sg38
S'left'
p3857
sg58
g62
sS'trial_loop.thisN'
p3858
I13
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p3859
g59
(g98
S'\r\x00\x00\x00'
tRp3860
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3861
I0
sg3641
S'6-sour_patch_kids.png'
p3862
sS'block_loop.thisRepN'
p3863
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3864
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p3865
Nsg69
Vn
sS'block_loop.thisTrialN'
p3866
I0
sg39
F0.79987985977822973
sg34
g752
(S'\x07\xdf\t\x1c\r\x05\x0c\x0b\xf2\x98'
tRp3867
sa(dp3868
S'trial_loop.thisTrialN'
p3869
I14
sg3632
S'41-peanuts_redo.png'
p3870
sS'block_loop.thisIndex'
p3871
g3626
sg38
S'left'
p3872
sg58
g62
sS'trial_loop.thisN'
p3873
I14
sg33
g3791
sg63
g64
sS'trial_loop.thisIndex'
p3874
g59
(g98
S'\x0e\x00\x00\x00'
tRp3875
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3876
I0
sg3641
S'45-chewy_nougat_redo.png'
p3877
sS'block_loop.thisRepN'
p3878
I1
sg3644
g3791
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3879
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p3880
Nsg69
Vn
sS'block_loop.thisTrialN'
p3881
I0
sg39
F1.2168938706236077
sg34
g752
(S'\x07\xdf\t\x1c\r\x05\x12\tj('
tRp3882
sa(dp3883
S'trial_loop.thisTrialN'
p3884
I15
sg3632
S'50-polo.png'
p3885
sS'block_loop.thisIndex'
p3886
g3626
sg38
S'right'
p3887
sg58
g62
sS'trial_loop.thisN'
p3888
I15
sg33
S'48-twix.png'
p3889
sg63
g64
sS'trial_loop.thisIndex'
p3890
g59
(g98
S'\x0f\x00\x00\x00'
tRp3891
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3892
I0
sg3641
S'48-twix.png'
p3893
sS'block_loop.thisRepN'
p3894
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3895
I1
sg3646
S'50-polo.png'
p3896
sg55
g11
sS'block_loop.thisTrial'
p3897
Nsg69
Vn
sS'block_loop.thisTrialN'
p3898
I0
sg39
F1.9667424836807186
sg34
g752
(S'\x07\xdf\t\x1c\r\x05\x18\rR('
tRp3899
sa(dp3900
S'trial_loop.thisTrialN'
p3901
I16
sg3632
S'51-mars.png'
p3902
sS'block_loop.thisIndex'
p3903
g3626
sg38
S'left'
p3904
sg58
g62
sS'trial_loop.thisN'
p3905
I16
sg33
S'51-mars.png'
p3906
sg63
g64
sS'trial_loop.thisIndex'
p3907
g59
(g98
S'\x10\x00\x00\x00'
tRp3908
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3909
I0
sg3641
S'27-hartleys_raspberries_jelly.png'
p3910
sS'block_loop.thisRepN'
p3911
I1
sg3644
g3906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3912
I1
sg3646
S'27-hartleys_raspberries_jelly.png'
p3913
sg55
g11
sS'block_loop.thisTrial'
p3914
Nsg69
Vn
sS'block_loop.thisTrialN'
p3915
I0
sg39
F0.88343319359773886
sg34
g752
(S"\x07\xdf\t\x1c\r\x05\x1f\r'0"
tRp3916
sa(dp3917
S'trial_loop.thisTrialN'
p3918
I17
sg3632
S'19-caramello_redo.png'
p3919
sS'block_loop.thisIndex'
p3920
g3626
sg38
S'right'
p3921
sg58
g62
sS'trial_loop.thisN'
p3922
I17
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p3923
g59
(g98
S'\x11\x00\x00\x00'
tRp3924
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3925
I0
sg3641
S'30-spaghetti_hoops.png'
p3926
sS'block_loop.thisRepN'
p3927
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3928
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p3929
Nsg69
Vn
sS'block_loop.thisTrialN'
p3930
I0
sg39
F1.2835041259349964
sg34
g752
(S'\x07\xdf\t\x1c\r\x05%\x0b\xcfp'
tRp3931
sa(dp3932
S'trial_loop.thisTrialN'
p3933
I18
sg3632
g3838
sS'block_loop.thisIndex'
p3934
g3626
sg38
S'left'
p3935
sg58
g62
sS'trial_loop.thisN'
p3936
I18
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p3937
g59
(g98
S'\x12\x00\x00\x00'
tRp3938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3939
I0
sg3641
g3846
sS'block_loop.thisRepN'
p3940
I1
sg3644
g3842
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3941
I1
sg3646
g3849
sg55
g11
sS'block_loop.thisTrial'
p3942
Nsg69
Vn
sS'block_loop.thisTrialN'
p3943
I0
sg39
F0.83352197305794107
sg34
g752
(S'\x07\xdf\t\x1c\r\x05,\x01g`'
tRp3944
sa(dp3945
S'trial_loop.thisTrialN'
p3946
I19
sg3632
g3687
sS'block_loop.thisIndex'
p3947
g3626
sg38
S'right'
p3948
sg58
g62
sS'trial_loop.thisN'
p3949
I19
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p3950
g59
(g98
S'\x13\x00\x00\x00'
tRp3951
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3952
I0
sg3641
g3695
sS'block_loop.thisRepN'
p3953
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3954
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p3955
Nsg69
Vn
sS'block_loop.thisTrialN'
p3956
I0
sg39
F0.81685458414540335
sg34
g752
(S'\x07\xdf\t\x1c\r\x051\x0e\x9e0'
tRp3957
sa(dp3958
S'trial_loop.thisTrialN'
p3959
I20
sg3632
S'36-fig_rolls.png'
p3960
sS'block_loop.thisIndex'
p3961
g3626
sg38
S'left'
p3962
sg58
g62
sS'trial_loop.thisN'
p3963
I20
sg33
S'36-fig_rolls.png'
p3964
sg63
g64
sS'trial_loop.thisIndex'
p3965
g59
(g98
S'\x14\x00\x00\x00'
tRp3966
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3967
I0
sg3641
S'34-hula_hoops_bbq_beef_redo.png'
p3968
sS'block_loop.thisRepN'
p3969
I1
sg3644
g3964
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3970
I1
sg3646
S'34-hula_hoops_bbq_beef_redo.png'
p3971
sg55
g11
sS'block_loop.thisTrial'
p3972
Nsg69
Vn
sS'block_loop.thisTrialN'
p3973
I0
sg39
F1.3167696249929577
sg34
g752
(S'\x07\xdf\t\x1c\r\x057\x0cT@'
tRp3974
sa(dp3975
S'trial_loop.thisTrialN'
p3976
I21
sg3632
S'23-crunchie_redo.png'
p3977
sS'block_loop.thisIndex'
p3978
g3626
sg38
S'left'
p3979
sg58
g62
sS'trial_loop.thisN'
p3980
I21
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p3981
g59
(g98
S'\x15\x00\x00\x00'
tRp3982
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3983
I0
sg3641
S'33-ambrosia_rice.png'
p3984
sS'block_loop.thisRepN'
p3985
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3986
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p3987
Nsg69
Vn
sS'block_loop.thisTrialN'
p3988
I0
sg39
F1.8501645584638027
sg34
g752
(S'\x07\xdf\t\x1c\r\x06\x02\x02\xa3\xc8'
tRp3989
sa(dp3990
S'trial_loop.thisTrialN'
p3991
I22
sg3632
g3919
sS'block_loop.thisIndex'
p3992
g3626
sg38
S'right'
p3993
sg58
g62
sS'trial_loop.thisN'
p3994
I22
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p3995
g59
(g98
S'\x16\x00\x00\x00'
tRp3996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3997
I0
sg3641
g3926
sS'block_loop.thisRepN'
p3998
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3999
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p4000
Nsg69
Vn
sS'block_loop.thisTrialN'
p4001
I0
sg39
F1.5002617198024382
sg34
g752
(S'\x07\xdf\t\x1c\r\x06\t\x00\xcb '
tRp4002
sa(dp4003
S'trial_loop.thisTrialN'
p4004
I23
sg3632
S'35-raisins.png'
p4005
sS'block_loop.thisIndex'
p4006
g3626
sg38
S'left'
p4007
sg58
g62
sS'trial_loop.thisN'
p4008
I23
sg33
S'49-yorkie.png'
p4009
sg63
g64
sS'trial_loop.thisIndex'
p4010
g59
(g98
S'\x17\x00\x00\x00'
tRp4011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4012
I0
sg3641
S'49-yorkie.png'
p4013
sS'block_loop.thisRepN'
p4014
I1
sg3644
g4009
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4015
I1
sg3646
S'35-raisins.png'
p4016
sg55
g11
sS'block_loop.thisTrial'
p4017
Nsg69
Vn
sS'block_loop.thisTrialN'
p4018
I0
sg39
F0.86685275951822405
sg34
g752
(S'\x07\xdf\t\x1c\r\x06\x0f\x08\xfc\xc8'
tRp4019
sa(dp4020
S'trial_loop.thisTrialN'
p4021
I24
sg3632
S'25-kitkat.png'
p4022
sS'block_loop.thisIndex'
p4023
g3626
sg38
S'right'
p4024
sg58
g62
sS'trial_loop.thisN'
p4025
I24
sg33
S'31-hobnobs.png'
p4026
sg63
g64
sS'trial_loop.thisIndex'
p4027
g59
(g98
S'\x18\x00\x00\x00'
tRp4028
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4029
I0
sg3641
S'31-hobnobs.png'
p4030
sS'block_loop.thisRepN'
p4031
I1
sg3644
S'25-kitkat.png'
p4032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4033
I1
sg3646
g4026
sg55
g11
sS'block_loop.thisTrial'
p4034
Nsg69
Vn
sS'block_loop.thisTrialN'
p4035
I0
sg39
F1.8168400441572885
sg34
g752
(S'\x07\xdf\t\x1c\r\x06\x15\x07jp'
tRp4036
sa(dp4037
S'trial_loop.thisTrialN'
p4038
I25
sg3632
g3902
sS'block_loop.thisIndex'
p4039
g3626
sg38
S'left'
p4040
sg58
g62
sS'trial_loop.thisN'
p4041
I25
sg33
g3913
sg63
g64
sS'trial_loop.thisIndex'
p4042
g59
(g98
S'\x19\x00\x00\x00'
tRp4043
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4044
I0
sg3641
g3910
sS'block_loop.thisRepN'
p4045
I1
sg3644
g3906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4046
I1
sg3646
g3913
sg55
g11
sS'block_loop.thisTrial'
p4047
Nsg69
Vn
sS'block_loop.thisTrialN'
p4048
I0
sg39
F1.0001727692797431
sg34
g752
(S'\x07\xdf\t\x1c\r\x06\x1c\x05\x18\xb0'
tRp4049
sa(dp4050
S'trial_loop.thisTrialN'
p4051
I26
sg3632
S'49-yorkie.png'
p4052
sS'block_loop.thisIndex'
p4053
g3626
sg38
S'left'
p4054
sg58
g62
sS'trial_loop.thisN'
p4055
I26
sg33
g4009
sg63
g64
sS'trial_loop.thisIndex'
p4056
g59
(g98
S'\x1a\x00\x00\x00'
tRp4057
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4058
I0
sg3641
S'35-raisins.png'
p4059
sS'block_loop.thisRepN'
p4060
I1
sg3644
g4009
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4061
I1
sg3646
g4016
sg55
g11
sS'block_loop.thisTrial'
p4062
Nsg69
Vn
sS'block_loop.thisTrialN'
p4063
I0
sg39
F0.98349882311595138
sg34
g752
(S'\x07\xdf\t\x1c\r\x06"\x05\xa98'
tRp4064
sa(dp4065
S'trial_loop.thisTrialN'
p4066
I27
sg3632
g3772
sS'block_loop.thisIndex'
p4067
g3626
sg38
S'right'
p4068
sg58
g62
sS'trial_loop.thisN'
p4069
I27
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4070
g59
(g98
S'\x1b\x00\x00\x00'
tRp4071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4072
I0
sg3641
g3779
sS'block_loop.thisRepN'
p4073
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4074
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4075
Nsg69
Vn
sS'block_loop.thisTrialN'
p4076
I0
sg39
F0.80021285403381626
sg34
g752
(S'\x07\xdf\t\x1c\r\x06(\x05\xc0\xa8'
tRp4077
sa(dp4078
S'trial_loop.thisTrialN'
p4079
I28
sg3632
g3787
sS'block_loop.thisIndex'
p4080
g3626
sg38
S'right'
p4081
sg58
g62
sS'trial_loop.thisN'
p4082
I28
sg33
g3798
sg63
g64
sS'trial_loop.thisIndex'
p4083
g59
(g98
S'\x1c\x00\x00\x00'
tRp4084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4085
I0
sg3641
g3795
sS'block_loop.thisRepN'
p4086
I1
sg3644
g3791
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4087
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p4088
Nsg69
Vn
sS'block_loop.thisTrialN'
p4089
I0
sg39
F0.83347521701762162
sg34
g752
(S'\x07\xdf\t\x1c\r\x06.\x03< '
tRp4090
sa(dp4091
S'trial_loop.thisTrialN'
p4092
I29
sg3632
g3838
sS'block_loop.thisIndex'
p4093
g3626
sg38
S'left'
p4094
sg58
g62
sS'trial_loop.thisN'
p4095
I29
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p4096
g59
(g98
S'\x1d\x00\x00\x00'
tRp4097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4098
I0
sg3641
g3846
sS'block_loop.thisRepN'
p4099
I1
sg3644
g3842
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4100
I1
sg3646
g3849
sg55
g11
sS'block_loop.thisTrial'
p4101
Nsg69
Vn
sS'block_loop.thisTrialN'
p4102
I0
sg39
F1.1667859325880272
sg34
g752
(S'\x07\xdf\t\x1c\r\x064\x01,\xc8'
tRp4103
sa(dp4104
S'trial_loop.thisTrialN'
p4105
I30
sg3632
S'26-walkers_smoky_bacon.png'
p4106
sS'block_loop.thisIndex'
p4107
g3626
sg38
S'right'
p4108
sg58
g62
sS'trial_loop.thisN'
p4109
I30
sg33
S'44-crunch.png'
p4110
sg63
g64
sS'trial_loop.thisIndex'
p4111
g59
(g98
S'\x1e\x00\x00\x00'
tRp4112
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4113
I0
sg3641
S'44-crunch.png'
p4114
sS'block_loop.thisRepN'
p4115
I1
sg3644
g4110
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4116
I1
sg3646
S'26-walkers_smoky_bacon.png'
p4117
sg55
g11
sS'block_loop.thisTrial'
p4118
Nsg69
Vn
sS'block_loop.thisTrialN'
p4119
I0
sg39
F0.93343564543829416
sg34
g752
(S'\x07\xdf\t\x1c\r\x06:\x04]0'
tRp4120
sa(dp4121
S'trial_loop.thisTrialN'
p4122
I31
sg3632
S'27-hartleys_raspberries_jelly.png'
p4123
sS'block_loop.thisIndex'
p4124
g3626
sg38
S'right'
p4125
sg58
g62
sS'trial_loop.thisN'
p4126
I31
sg33
g3913
sg63
g64
sS'trial_loop.thisIndex'
p4127
g59
(g98
S'\x1f\x00\x00\x00'
tRp4128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4129
I0
sg3641
S'51-mars.png'
p4130
sS'block_loop.thisRepN'
p4131
I1
sg3644
g3906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4132
I1
sg3646
g3913
sg55
g11
sS'block_loop.thisTrial'
p4133
Nsg69
Vn
sS'block_loop.thisTrialN'
p4134
I0
sg39
F1.2001406672661687
sg34
g752
(S'\x07\xdf\t\x1c\r\x07\x04\x03\xbd\x08'
tRp4135
sa(dp4136
S'trial_loop.thisTrialN'
p4137
I32
sg3632
S'4-corn.png'
p4138
sS'block_loop.thisIndex'
p4139
g3626
sg38
S'right'
p4140
sg58
g62
sS'trial_loop.thisN'
p4141
I32
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p4142
g59
(g98
S' \x00\x00\x00'
tRp4143
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4144
I0
sg3641
S'10-bounty_redo.png'
p4145
sS'block_loop.thisRepN'
p4146
I1
sg3644
g3842
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4147
I1
sg3646
g3849
sg55
g11
sS'block_loop.thisTrial'
p4148
Nsg69
Vn
sS'block_loop.thisTrialN'
p4149
I0
sg39
F1.1006095961638493
sg34
g752
(S'\x07\xdf\t\x1c\r\x07\n\x07f\x88'
tRp4150
sa(dp4151
S'trial_loop.thisTrialN'
p4152
I33
sg3632
S'8-liquorice_catherine_wheels.png'
p4153
sS'block_loop.thisIndex'
p4154
g3626
sg38
S'right'
p4155
sg58
g62
sS'trial_loop.thisN'
p4156
I33
sg33
S'17-jacobs_mini_cheddars_redo.png'
p4157
sg63
g64
sS'trial_loop.thisIndex'
p4158
g59
(g98
S'!\x00\x00\x00'
tRp4159
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4160
I0
sg3641
S'17-jacobs_mini_cheddars_redo.png'
p4161
sS'block_loop.thisRepN'
p4162
I1
sg3644
g4157
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4163
I1
sg3646
S'8-liquorice_catherine_wheels.png'
p4164
sg55
g11
sS'block_loop.thisTrial'
p4165
Nsg69
Vn
sS'block_loop.thisTrialN'
p4166
I0
sg39
F0.90009431036014576
sg34
g752
(S'\x07\xdf\t\x1c\r\x07\x10\tf@'
tRp4167
sa(dp4168
S'trial_loop.thisTrialN'
p4169
I34
sg3632
g3653
sS'block_loop.thisIndex'
p4170
g3626
sg38
S'right'
p4171
sg58
g62
sS'trial_loop.thisN'
p4172
I34
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4173
g59
(g98
S'"\x00\x00\x00'
tRp4174
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4175
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4176
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4177
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4178
Nsg69
Vn
sS'block_loop.thisTrialN'
p4179
I0
sg39
F0.7663095911466371
sg34
g752
(S'\x07\xdf\t\x1c\r\x07\x16\x08M\x00'
tRp4180
sa(dp4181
S'trial_loop.thisTrialN'
p4182
I35
sg3632
g4153
sS'block_loop.thisIndex'
p4183
g3626
sg38
S'right'
p4184
sg58
g62
sS'trial_loop.thisN'
p4185
I35
sg33
g4157
sg63
g64
sS'trial_loop.thisIndex'
p4186
g59
(g98
S'#\x00\x00\x00'
tRp4187
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4188
I0
sg3641
g4161
sS'block_loop.thisRepN'
p4189
I1
sg3644
g4157
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4190
I1
sg3646
g4164
sg55
g11
sS'block_loop.thisTrial'
p4191
Nsg69
Vn
sS'block_loop.thisTrialN'
p4192
I0
sg39
F1.0001231622591149
sg34
g752
(S'\x07\xdf\t\x1c\r\x07\x1c\x05Kx'
tRp4193
sa(dp4194
S'trial_loop.thisTrialN'
p4195
I36
sg3632
S'31-hobnobs.png'
p4196
sS'block_loop.thisIndex'
p4197
g3626
sg38
S'left'
p4198
sg58
g62
sS'trial_loop.thisN'
p4199
I36
sg33
g4032
sg63
g64
sS'trial_loop.thisIndex'
p4200
g59
(g98
S'$\x00\x00\x00'
tRp4201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4202
I0
sg3641
S'25-kitkat.png'
p4203
sS'block_loop.thisRepN'
p4204
I1
sg3644
g4032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4205
I1
sg3646
g4026
sg55
g11
sS'block_loop.thisTrial'
p4206
Nsg69
Vn
sS'block_loop.thisTrialN'
p4207
I0
sg39
F2.3667295972609281
sg34
g752
(S'\x07\xdf\t\x1c\r\x07"\x05\xdc\x00'
tRp4208
sa(dp4209
S'trial_loop.thisTrialN'
p4210
I37
sg3632
S'44-crunch.png'
p4211
sS'block_loop.thisIndex'
p4212
g3626
sg38
S'left'
p4213
sg58
g62
sS'trial_loop.thisN'
p4214
I37
sg33
g4117
sg63
g64
sS'trial_loop.thisIndex'
p4215
g59
(g98
S'%\x00\x00\x00'
tRp4216
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4217
I0
sg3641
S'26-walkers_smoky_bacon.png'
p4218
sS'block_loop.thisRepN'
p4219
I1
sg3644
g4110
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4220
I1
sg3646
g4117
sg55
g11
sS'block_loop.thisTrial'
p4221
Nsg69
Vn
sS'block_loop.thisTrialN'
p4222
I0
sg39
F0.88381579487577255
sg34
g752
(S'\x07\xdf\t\x1c\r\x07)\x0b\xe2\xf8'
tRp4223
sa(dp4224
S'trial_loop.thisTrialN'
p4225
I38
sg3632
g3960
sS'block_loop.thisIndex'
p4226
g3626
sg38
S'left'
p4227
sg58
g62
sS'trial_loop.thisN'
p4228
I38
sg33
g3971
sg63
g64
sS'trial_loop.thisIndex'
p4229
g59
(g98
S'&\x00\x00\x00'
tRp4230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4231
I0
sg3641
g3968
sS'block_loop.thisRepN'
p4232
I1
sg3644
g3964
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4233
I1
sg3646
g3971
sg55
g11
sS'block_loop.thisTrial'
p4234
Nsg69
Vn
sS'block_loop.thisTrialN'
p4235
I0
sg39
F1.2668643915094435
sg34
g752
(S'\x07\xdf\t\x1c\r\x07/\n\x8b8'
tRp4236
sa(dp4237
S'trial_loop.thisTrialN'
p4238
I39
sg3632
S'1-treacle_cookies.png'
p4239
sS'block_loop.thisIndex'
p4240
g3626
sg38
S'left'
p4241
sg58
g62
sS'trial_loop.thisN'
p4242
I39
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4243
g59
(g98
S"'\x00\x00\x00"
tRp4244
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4245
I0
sg3641
S'21-nakd_banana_crunch.png'
p4246
sS'block_loop.thisRepN'
p4247
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4248
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4249
Nsg69
Vn
sS'block_loop.thisTrialN'
p4250
I0
sg39
F0.83348177426705661
sg34
g752
(S'\x07\xdf\t\x1c\r\x075\x0f*\xd0'
tRp4251
sa(dp4252
S'trial_loop.thisTrialN'
p4253
I40
sg3632
g3633
sS'block_loop.thisIndex'
p4254
g3626
sg38
S'right'
p4255
sg58
g62
sS'trial_loop.thisN'
p4256
I40
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p4257
g59
(g98
S'(\x00\x00\x00'
tRp4258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4259
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4260
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4261
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4262
Nsg69
Vn
sS'block_loop.thisTrialN'
p4263
I0
sg39
F0.7332875656284159
sg34
g752
(S'\x07\xdf\t\x1c\r\x07;\r\x1bx'
tRp4264
sa(dp4265
S'trial_loop.thisTrialN'
p4266
I41
sg3632
g3738
sS'block_loop.thisIndex'
p4267
g3626
sg38
S'right'
p4268
sg58
g62
sS'trial_loop.thisN'
p4269
I41
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4270
g59
(g98
S')\x00\x00\x00'
tRp4271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4272
I0
sg3641
g3746
sS'block_loop.thisRepN'
p4273
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4274
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4275
Nsg69
Vn
sS'block_loop.thisTrialN'
p4276
I0
sg39
F0.73344265884406923
sg34
g752
(S'\x07\xdf\t\x1c\r\x08\x05\t\xa0\xd8'
tRp4277
sa(dp4278
S'trial_loop.thisTrialN'
p4279
I42
sg3632
S'20-fruit_pastilles.png'
p4280
sS'block_loop.thisIndex'
p4281
g3626
sg38
S'right'
p4282
sg58
g62
sS'trial_loop.thisN'
p4283
I42
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4284
g59
(g98
S'*\x00\x00\x00'
tRp4285
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4286
I0
sg3641
S'2-steamed_puddings.png'
p4287
sS'block_loop.thisRepN'
p4288
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4289
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4290
Nsg69
Vn
sS'block_loop.thisTrialN'
p4291
I0
sg39
F0.95019768682868744
sg34
g752
(S'\x07\xdf\t\x1c\r\x08\x0b\x06&8'
tRp4292
sa(dp4293
S'trial_loop.thisTrialN'
p4294
I43
sg3632
g4106
sS'block_loop.thisIndex'
p4295
g3626
sg38
S'right'
p4296
sg58
g62
sS'trial_loop.thisN'
p4297
I43
sg33
g4117
sg63
g64
sS'trial_loop.thisIndex'
p4298
g59
(g98
S'+\x00\x00\x00'
tRp4299
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4300
I0
sg3641
g4114
sS'block_loop.thisRepN'
p4301
I1
sg3644
g4110
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4302
I1
sg3646
g4117
sg55
g11
sS'block_loop.thisTrial'
p4303
Nsg69
Vn
sS'block_loop.thisTrialN'
p4304
I0
sg39
F0.88387338463508058
sg34
g752
(S'\x07\xdf\t\x1c\r\x08\x11\x05\xc4\x90'
tRp4305
sa(dp4306
S'trial_loop.thisTrialN'
p4307
I44
sg3632
g3919
sS'block_loop.thisIndex'
p4308
g3626
sg38
S'left'
p4309
sg58
g62
sS'trial_loop.thisN'
p4310
I44
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p4311
g59
(g98
S',\x00\x00\x00'
tRp4312
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4313
I0
sg3641
g3926
sS'block_loop.thisRepN'
p4314
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4315
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p4316
Nsg69
Vn
sS'block_loop.thisTrialN'
p4317
I0
sg39
F5.1167102106082893
sg34
g752
(S'\x07\xdf\t\x1c\r\x08\x17\x04p\xb8'
tRp4318
sa(dp4319
S'trial_loop.thisTrialN'
p4320
I45
sg3632
S'17-jacobs_mini_cheddars_redo.png'
p4321
sS'block_loop.thisIndex'
p4322
g3626
sg38
S'left'
p4323
sg58
g62
sS'trial_loop.thisN'
p4324
I45
sg33
g4157
sg63
g64
sS'trial_loop.thisIndex'
p4325
g59
(g98
S'-\x00\x00\x00'
tRp4326
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4327
I0
sg3641
S'8-liquorice_catherine_wheels.png'
p4328
sS'block_loop.thisRepN'
p4329
I1
sg3644
g4157
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4330
I1
sg3646
g4164
sg55
g11
sS'block_loop.thisTrial'
p4331
Nsg69
Vn
sS'block_loop.thisTrialN'
p4332
I0
sg39
F0.95013639079843415
sg34
g752
(S'\x07\xdf\t\x1c\r\x08!\x06\xce0'
tRp4333
sa(dp4334
S'trial_loop.thisTrialN'
p4335
I46
sg3632
g3687
sS'block_loop.thisIndex'
p4336
g3626
sg38
S'right'
p4337
sg58
g62
sS'trial_loop.thisN'
p4338
I46
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4339
g59
(g98
S'.\x00\x00\x00'
tRp4340
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4341
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4342
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4343
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4344
Nsg69
Vn
sS'block_loop.thisTrialN'
p4345
I0
sg39
F0.9334886736342014
sg34
g752
(S"\x07\xdf\t\x1c\r\x08'\x06\xab\x08"
tRp4346
sa(dp4347
S'trial_loop.thisTrialN'
p4348
I47
sg3632
S'42-mrkipling_lemon_slices.png'
p4349
sS'block_loop.thisIndex'
p4350
g3626
sg38
S'left'
p4351
sg58
g62
sS'trial_loop.thisN'
p4352
I47
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p4353
g59
(g98
S'/\x00\x00\x00'
tRp4354
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4355
I0
sg3641
S'16-skips_prawn.png'
p4356
sS'block_loop.thisRepN'
p4357
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4358
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4359
Nsg69
Vn
sS'block_loop.thisTrialN'
p4360
I0
sg39
F0.91670753068865451
sg34
g752
(S'\x07\xdf\t\x1c\r\x08-\x06\n\xe0'
tRp4361
sa(dp4362
S'trial_loop.thisTrialN'
p4363
I48
sg3632
g4211
sS'block_loop.thisIndex'
p4364
g3626
sg38
S'left'
p4365
sg58
g62
sS'trial_loop.thisN'
p4366
I48
sg33
g4110
sg63
g64
sS'trial_loop.thisIndex'
p4367
g59
(g98
S'0\x00\x00\x00'
tRp4368
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4369
I0
sg3641
g4218
sS'block_loop.thisRepN'
p4370
I1
sg3644
g4110
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4371
I1
sg3646
g4117
sg55
g11
sS'block_loop.thisTrial'
p4372
Nsg69
Vn
sS'block_loop.thisTrialN'
p4373
I0
sg39
F0.85020675294072134
sg34
g752
(S'\x07\xdf\t\x1c\r\x083\x05,8'
tRp4374
sa(dp4375
S'trial_loop.thisTrialN'
p4376
I49
sg3632
g3855
sS'block_loop.thisIndex'
p4377
g3626
sg38
S'left'
p4378
sg58
g62
sS'trial_loop.thisN'
p4379
I49
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4380
g59
(g98
S'1\x00\x00\x00'
tRp4381
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4382
I0
sg3641
g3862
sS'block_loop.thisRepN'
p4383
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4384
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4385
Nsg69
Vn
sS'block_loop.thisTrialN'
p4386
I0
sg39
F0.74986543382692616
sg34
g752
(S'\x07\xdf\t\x1c\r\x089\x03\x99\xe0'
tRp4387
sa(dp4388
S'trial_loop.thisTrialN'
p4389
I50
sg3632
g3902
sS'block_loop.thisIndex'
p4390
g3626
sg38
S'right'
p4391
sg58
g62
sS'trial_loop.thisN'
p4392
I50
sg33
g3906
sg63
g64
sS'trial_loop.thisIndex'
p4393
g59
(g98
S'2\x00\x00\x00'
tRp4394
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4395
I0
sg3641
g3910
sS'block_loop.thisRepN'
p4396
I1
sg3644
g3906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4397
I1
sg3646
g3913
sg55
g11
sS'block_loop.thisTrial'
p4398
Nsg69
Vn
sS'block_loop.thisTrialN'
p4399
I0
sg39
F1.7668278989895043
sg34
g752
(S'\x07\xdf\t\x1c\r\t\x03\x00\x1f@'
tRp4400
sa(dp4401
S'trial_loop.thisTrialN'
p4402
I51
sg3632
g3821
sS'block_loop.thisIndex'
p4403
g3626
sg38
S'right'
p4404
sg58
g62
sS'trial_loop.thisN'
p4405
I51
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p4406
g59
(g98
S'3\x00\x00\x00'
tRp4407
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4408
I0
sg3641
g3829
sS'block_loop.thisRepN'
p4409
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4410
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p4411
Nsg69
Vn
sS'block_loop.thisTrialN'
p4412
I0
sg39
F2.9500944814190007
sg34
g752
(S'\x07\xdf\t\x1c\r\t\t\x0c\\\x10'
tRp4413
sa(dp4414
S'trial_loop.thisTrialN'
p4415
I52
sg3632
g4153
sS'block_loop.thisIndex'
p4416
g3626
sg38
S'right'
p4417
sg58
g62
sS'trial_loop.thisN'
p4418
I52
sg33
g4157
sg63
g64
sS'trial_loop.thisIndex'
p4419
g59
(g98
S'4\x00\x00\x00'
tRp4420
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4421
I0
sg3641
g4161
sS'block_loop.thisRepN'
p4422
I1
sg3644
g4157
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4423
I1
sg3646
g4164
sg55
g11
sS'block_loop.thisTrial'
p4424
Nsg69
Vn
sS'block_loop.thisTrialN'
p4425
I0
sg39
F0.80016068113400252
sg34
g752
(S'\x07\xdf\t\x1c\r\t\x11\x0c)H'
tRp4426
sa(dp4427
S'trial_loop.thisTrialN'
p4428
I53
sg3632
g4022
sS'block_loop.thisIndex'
p4429
g3626
sg38
S'right'
p4430
sg58
g62
sS'trial_loop.thisN'
p4431
I53
sg33
g4032
sg63
g64
sS'trial_loop.thisIndex'
p4432
g59
(g98
S'5\x00\x00\x00'
tRp4433
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4434
I0
sg3641
g4030
sS'block_loop.thisRepN'
p4435
I1
sg3644
g4032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4436
I1
sg3646
g4026
sg55
g11
sS'block_loop.thisTrial'
p4437
Nsg69
Vn
sS'block_loop.thisTrialN'
p4438
I0
sg39
F1.9172671777141659
sg34
g752
(S'\x07\xdf\t\x1c\r\t\x17\t\xa0\xd8'
tRp4439
sa(dp4440
S'trial_loop.thisTrialN'
p4441
I54
sg3632
S'43-mrporky_pork_crackles_redo.png'
p4442
sS'block_loop.thisIndex'
p4443
g3626
sg38
S'right'
p4444
sg58
g62
sS'trial_loop.thisN'
p4445
I54
sg33
S'18-mms.png'
p4446
sg63
g64
sS'trial_loop.thisIndex'
p4447
g59
(g98
S'6\x00\x00\x00'
tRp4448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4449
I0
sg3641
S'18-mms.png'
p4450
sS'block_loop.thisRepN'
p4451
I1
sg3644
g4446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4452
I1
sg3646
S'43-mrporky_pork_crackles_redo.png'
p4453
sg55
g11
sS'block_loop.thisTrial'
p4454
Nsg69
Vn
sS'block_loop.thisTrialN'
p4455
I0
sg39
F0.73349369135576126
sg34
g752
(S'\x07\xdf\t\x1c\r\t\x1e\x08\xbeH'
tRp4456
sa(dp4457
S'trial_loop.thisTrialN'
p4458
I55
sg3632
g3772
sS'block_loop.thisIndex'
p4459
g3626
sg38
S'right'
p4460
sg58
g62
sS'trial_loop.thisN'
p4461
I55
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4462
g59
(g98
S'7\x00\x00\x00'
tRp4463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4464
I0
sg3641
g3779
sS'block_loop.thisRepN'
p4465
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4466
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4467
Nsg69
Vn
sS'block_loop.thisTrialN'
p4468
I0
sg39
F0.80013359683835006
sg34
g752
(S'\x07\xdf\t\x1c\r\t$\x05C\xa8'
tRp4469
sa(dp4470
S'trial_loop.thisTrialN'
p4471
I56
sg3632
S'34-hula_hoops_bbq_beef_redo.png'
p4472
sS'block_loop.thisIndex'
p4473
g3626
sg38
S'right'
p4474
sg58
g62
sS'trial_loop.thisN'
p4475
I56
sg33
g3971
sg63
g64
sS'trial_loop.thisIndex'
p4476
g59
(g98
S'8\x00\x00\x00'
tRp4477
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4478
I0
sg3641
S'36-fig_rolls.png'
p4479
sS'block_loop.thisRepN'
p4480
I1
sg3644
g3964
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4481
I1
sg3646
g3971
sg55
g11
sS'block_loop.thisTrial'
p4482
Nsg69
Vn
sS'block_loop.thisTrialN'
p4483
I0
sg39
F1.1506593742433324
sg34
g752
(S'\x07\xdf\t\x1c\r\t*\x02\xbf '
tRp4484
sa(dp4485
S'trial_loop.thisTrialN'
p4486
I57
sg3632
g3919
sS'block_loop.thisIndex'
p4487
g3626
sg38
S'right'
p4488
sg58
g62
sS'trial_loop.thisN'
p4489
I57
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p4490
g59
(g98
S'9\x00\x00\x00'
tRp4491
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4492
I0
sg3641
g3926
sS'block_loop.thisRepN'
p4493
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4494
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p4495
Nsg69
Vn
sS'block_loop.thisTrialN'
p4496
I0
sg39
F0.85019363844185136
sg34
g752
(S'\x07\xdf\t\x1c\r\t0\x05vp'
tRp4497
sa(dp4498
S'trial_loop.thisTrialN'
p4499
I58
sg3632
g3960
sS'block_loop.thisIndex'
p4500
g3626
sg38
S'left'
p4501
sg58
g62
sS'trial_loop.thisN'
p4502
I58
sg33
g3971
sg63
g64
sS'trial_loop.thisIndex'
p4503
g59
(g98
S':\x00\x00\x00'
tRp4504
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4505
I0
sg3641
g3968
sS'block_loop.thisRepN'
p4506
I1
sg3644
g3964
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4507
I1
sg3646
g3971
sg55
g11
sS'block_loop.thisTrial'
p4508
Nsg69
Vn
sS'block_loop.thisTrialN'
p4509
I0
sg39
F3.9334496152314387
sg34
g752
(S'\x07\xdf\t\x1c\r\t6\x03\xa5\x98'
tRp4510
sa(dp4511
S'trial_loop.thisTrialN'
p4512
I59
sg3632
g3855
sS'block_loop.thisIndex'
p4513
g3626
sg38
S'left'
p4514
sg58
g62
sS'trial_loop.thisN'
p4515
I59
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4516
g59
(g98
S';\x00\x00\x00'
tRp4517
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4518
I0
sg3641
g3862
sS'block_loop.thisRepN'
p4519
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4520
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4521
Nsg69
Vn
sS'block_loop.thisTrialN'
p4522
I0
sg39
F0.76649461963461363
sg34
g752
(S'\x07\xdf\t\x1c\r\n\x03\x030h'
tRp4523
sa(dp4524
S'trial_loop.thisTrialN'
p4525
I60
sg3632
g4123
sS'block_loop.thisIndex'
p4526
g3626
sg38
S'right'
p4527
sg58
g62
sS'trial_loop.thisN'
p4528
I60
sg33
g3906
sg63
g64
sS'trial_loop.thisIndex'
p4529
g59
(g98
S'<\x00\x00\x00'
tRp4530
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4531
I0
sg3641
g4130
sS'block_loop.thisRepN'
p4532
I1
sg3644
g3906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4533
I1
sg3646
g3913
sg55
g11
sS'block_loop.thisTrial'
p4534
Nsg69
Vn
sS'block_loop.thisTrialN'
p4535
I0
sg39
F0.85019506392927724
sg34
g752
(S'\x07\xdf\t\x1c\r\n\t\x00.\xe0'
tRp4536
sa(dp4537
S'trial_loop.thisTrialN'
p4538
I61
sg3632
S'22-daim.png'
p4539
sS'block_loop.thisIndex'
p4540
g3626
sg38
S'left'
p4541
sg58
g62
sS'trial_loop.thisN'
p4542
I61
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p4543
g59
(g98
S'=\x00\x00\x00'
tRp4544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4545
I0
sg3641
S'7-olives.png'
p4546
sS'block_loop.thisRepN'
p4547
I1
sg3644
g3808
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4548
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p4549
Nsg69
Vn
sS'block_loop.thisTrialN'
p4550
I0
sg39
F1.716843408310524
sg34
g752
(S'\x07\xdf\t\x1c\r\n\x0e\r\xa0H'
tRp4551
sa(dp4552
S'trial_loop.thisTrialN'
p4553
I62
sg3632
g3670
sS'block_loop.thisIndex'
p4554
g3626
sg38
S'left'
p4555
sg58
g62
sS'trial_loop.thisN'
p4556
I62
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4557
g59
(g98
S'>\x00\x00\x00'
tRp4558
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4559
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4560
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4561
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4562
Nsg69
Vn
sS'block_loop.thisTrialN'
p4563
I0
sg39
F0.88343661477119895
sg34
g752
(S'\x07\xdf\t\x1c\r\n\x15\t\xe3@'
tRp4564
sa(dp4565
S'trial_loop.thisTrialN'
p4566
I63
sg3632
g4138
sS'block_loop.thisIndex'
p4567
g3626
sg38
S'right'
p4568
sg58
g62
sS'trial_loop.thisN'
p4569
I63
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p4570
g59
(g98
S'?\x00\x00\x00'
tRp4571
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4572
I0
sg3641
g4145
sS'block_loop.thisRepN'
p4573
I1
sg3644
g3842
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4574
I1
sg3646
g3849
sg55
g11
sS'block_loop.thisTrial'
p4575
Nsg69
Vn
sS'block_loop.thisTrialN'
p4576
I0
sg39
F0.78382258020428708
sg34
g752
(S'\x07\xdf\t\x1c\r\n\x1b\x08\x8b\x80'
tRp4577
sa(dp4578
S'trial_loop.thisTrialN'
p4579
I64
sg3632
g4239
sS'block_loop.thisIndex'
p4580
g3626
sg38
S'left'
p4581
sg58
g62
sS'trial_loop.thisN'
p4582
I64
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4583
g59
(g98
S'@\x00\x00\x00'
tRp4584
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4585
I0
sg3641
g4246
sS'block_loop.thisRepN'
p4586
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4587
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4588
Nsg69
Vn
sS'block_loop.thisTrialN'
p4589
I0
sg39
F0.9168620537075185
sg34
g752
(S'\x07\xdf\t\x1c\r\n!\x05\xc8x'
tRp4590
sa(dp4591
S'trial_loop.thisTrialN'
p4592
I65
sg3632
g3787
sS'block_loop.thisIndex'
p4593
g3626
sg38
S'right'
p4594
sg58
g62
sS'trial_loop.thisN'
p4595
I65
sg33
g3791
sg63
g64
sS'trial_loop.thisIndex'
p4596
g59
(g98
S'A\x00\x00\x00'
tRp4597
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4598
I0
sg3641
g3795
sS'block_loop.thisRepN'
p4599
I1
sg3644
g3791
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4600
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p4601
Nsg69
Vn
sS'block_loop.thisTrialN'
p4602
I0
sg39
F1.0500839898195409
sg34
g752
(S"\x07\xdf\t\x1c\r\n'\x04\xed\xb8"
tRp4603
sa(dp4604
S'trial_loop.thisTrialN'
p4605
I66
sg3632
S'18-mms.png'
p4606
sS'block_loop.thisIndex'
p4607
g3626
sg38
S'left'
p4608
sg58
g62
sS'trial_loop.thisN'
p4609
I66
sg33
g4446
sg63
g64
sS'trial_loop.thisIndex'
p4610
g59
(g98
S'B\x00\x00\x00'
tRp4611
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4612
I0
sg3641
S'43-mrporky_pork_crackles_redo.png'
p4613
sS'block_loop.thisRepN'
p4614
I1
sg3644
g4446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4615
I1
sg3646
g4453
sg55
g11
sS'block_loop.thisTrial'
p4616
Nsg69
Vn
sS'block_loop.thisTrialN'
p4617
I0
sg39
F0.83354250010233955
sg34
g752
(S'\x07\xdf\t\x1c\r\n-\x065\xd8'
tRp4618
sa(dp4619
S'trial_loop.thisTrialN'
p4620
I67
sg3632
g3738
sS'block_loop.thisIndex'
p4621
g3626
sg38
S'right'
p4622
sg58
g62
sS'trial_loop.thisN'
p4623
I67
sg33
g3749
sg63
g64
sS'trial_loop.thisIndex'
p4624
g59
(g98
S'C\x00\x00\x00'
tRp4625
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4626
I0
sg3641
g3746
sS'block_loop.thisRepN'
p4627
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4628
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4629
Nsg69
Vn
sS'block_loop.thisTrialN'
p4630
I0
sg39
F1.2001777299828973
sg34
g752
(S'\x07\xdf\t\x1c\r\n3\x04&\x80'
tRp4631
sa(dp4632
S'trial_loop.thisTrialN'
p4633
I68
sg3632
g3633
sS'block_loop.thisIndex'
p4634
g3626
sg38
S'right'
p4635
sg58
g62
sS'trial_loop.thisN'
p4636
I68
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4637
g59
(g98
S'D\x00\x00\x00'
tRp4638
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4639
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4640
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4641
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4642
Nsg69
Vn
sS'block_loop.thisTrialN'
p4643
I0
sg39
F1.40045980576906
sg34
g752
(S'\x07\xdf\t\x1c\r\n9\x07\xd0\x00'
tRp4644
sa(dp4645
S'trial_loop.thisTrialN'
p4646
I69
sg3632
g4138
sS'block_loop.thisIndex'
p4647
g3626
sg38
S'right'
p4648
sg58
g62
sS'trial_loop.thisN'
p4649
I69
sg33
g3849
sg63
g64
sS'trial_loop.thisIndex'
p4650
g59
(g98
S'E\x00\x00\x00'
tRp4651
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4652
I0
sg3641
g4145
sS'block_loop.thisRepN'
p4653
I1
sg3644
g3842
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4654
I1
sg3646
g3849
sg55
g11
sS'block_loop.thisTrial'
p4655
Nsg69
Vn
sS'block_loop.thisTrialN'
p4656
I0
sg39
F1.5334111840456899
sg34
g752
(S'\x07\xdf\t\x1c\r\x0b\x03\x0eW\xe0'
tRp4657
sa(dp4658
S'trial_loop.thisTrialN'
p4659
I70
sg3632
g3787
sS'block_loop.thisIndex'
p4660
g3626
sg38
S'right'
p4661
sg58
g62
sS'trial_loop.thisN'
p4662
I70
sg33
g3791
sg63
g64
sS'trial_loop.thisIndex'
p4663
g59
(g98
S'F\x00\x00\x00'
tRp4664
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4665
I0
sg3641
g3795
sS'block_loop.thisRepN'
p4666
I1
sg3644
g3791
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4667
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p4668
Nsg69
Vn
sS'block_loop.thisTrialN'
p4669
I0
sg39
F0.93343678583005385
sg34
g752
(S'\x07\xdf\t\x1c\r\x0b\n\x07\xbcx'
tRp4670
sa(dp4671
S'trial_loop.thisTrialN'
p4672
I71
sg3632
S'5-pineapple.png'
p4673
sS'block_loop.thisIndex'
p4674
g3626
sg38
S'right'
p4675
sg58
g62
sS'trial_loop.thisN'
p4676
I71
sg33
g3732
sg63
g64
sS'trial_loop.thisIndex'
p4677
g59
(g98
S'G\x00\x00\x00'
tRp4678
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4679
I0
sg3641
S'40-sardines.png'
p4680
sS'block_loop.thisRepN'
p4681
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4682
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4683
Nsg69
Vn
sS'block_loop.thisTrialN'
p4684
I0
sg39
F1.2001794405696273
sg34
g752
(S'\x07\xdf\t\x1c\r\x0b\x10\x07Z\xd0'
tRp4685
sa(dp4686
S'trial_loop.thisTrialN'
p4687
I72
sg3632
g4022
sS'block_loop.thisIndex'
p4688
g3626
sg38
S'right'
p4689
sg58
g62
sS'trial_loop.thisN'
p4690
I72
sg33
g4032
sg63
g64
sS'trial_loop.thisIndex'
p4691
g59
(g98
S'H\x00\x00\x00'
tRp4692
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4693
I0
sg3641
g4030
sS'block_loop.thisRepN'
p4694
I1
sg3644
g4032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4695
I1
sg3646
g4026
sg55
g11
sS'block_loop.thisTrial'
p4696
Nsg69
Vn
sS'block_loop.thisTrialN'
p4697
I0
sg39
F0.80020829246859648
sg34
g752
(S'\x07\xdf\t\x1c\r\x0b\x16\n\xc5\xd0'
tRp4698
sa(dp4699
S'trial_loop.thisTrialN'
p4700
I73
sg3632
g4539
sS'block_loop.thisIndex'
p4701
g3626
sg38
S'left'
p4702
sg58
g62
sS'trial_loop.thisN'
p4703
I73
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p4704
g59
(g98
S'I\x00\x00\x00'
tRp4705
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4706
I0
sg3641
g4546
sS'block_loop.thisRepN'
p4707
I1
sg3644
g3808
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4708
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p4709
Nsg69
Vn
sS'block_loop.thisTrialN'
p4710
I0
sg39
F2.0168829228678078
sg34
g752
(S'\x07\xdf\t\x1c\r\x0b\x1c\x08AH'
tRp4711
sa(dp4712
S'trial_loop.thisTrialN'
p4713
I74
sg3632
g4239
sS'block_loop.thisIndex'
p4714
g3626
sg38
S'left'
p4715
sg58
g62
sS'trial_loop.thisN'
p4716
I74
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4717
g59
(g98
S'J\x00\x00\x00'
tRp4718
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4719
I0
sg3641
g4246
sS'block_loop.thisRepN'
p4720
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4721
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4722
Nsg69
Vn
sS'block_loop.thisTrialN'
p4723
I0
sg39
F1.4668362808642996
sg34
g752
(S'\x07\xdf\t\x1c\r\x0b#\t\x08\x80'
tRp4724
sa(dp4725
S'trial_loop.thisTrialN'
p4726
I75
sg3632
g4673
sS'block_loop.thisIndex'
p4727
g3626
sg38
S'left'
p4728
sg58
g62
sS'trial_loop.thisN'
p4729
I75
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4730
g59
(g98
S'K\x00\x00\x00'
tRp4731
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4732
I0
sg3641
g4680
sS'block_loop.thisRepN'
p4733
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4734
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4735
Nsg69
Vn
sS'block_loop.thisTrialN'
p4736
I0
sg39
F1.1834402070053329
sg34
g752
(S'\x07\xdf\t\x1c\r\x0b*\x01z\xe8'
tRp4737
sa(dp4738
S'trial_loop.thisTrialN'
p4739
I76
sg3632
g3670
sS'block_loop.thisIndex'
p4740
g3626
sg38
S'left'
p4741
sg58
g62
sS'trial_loop.thisN'
p4742
I76
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4743
g59
(g98
S'L\x00\x00\x00'
tRp4744
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4745
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4746
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4747
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4748
Nsg69
Vn
sS'block_loop.thisTrialN'
p4749
I0
sg39
F0.95010417474441056
sg34
g752
(S'\x07\xdf\t\x1c\r\x0b0\x04\xabP'
tRp4750
sa(dp4751
S'trial_loop.thisTrialN'
p4752
I77
sg3632
S'48-twix.png'
p4753
sS'block_loop.thisIndex'
p4754
g3626
sg38
S'left'
p4755
sg58
g62
sS'trial_loop.thisN'
p4756
I77
sg33
g3896
sg63
g64
sS'trial_loop.thisIndex'
p4757
g59
(g98
S'M\x00\x00\x00'
tRp4758
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4759
I0
sg3641
S'50-polo.png'
p4760
sS'block_loop.thisRepN'
p4761
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4762
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p4763
Nsg69
Vn
sS'block_loop.thisTrialN'
p4764
I0
sg39
F1.3334427158661128
sg34
g752
(S'\x07\xdf\t\x1c\r\x0b6\x04\x88('
tRp4765
sa(dp4766
S'trial_loop.thisTrialN'
p4767
I78
sg3632
g4239
sS'block_loop.thisIndex'
p4768
g3626
sg38
S'left'
p4769
sg58
g62
sS'trial_loop.thisN'
p4770
I78
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4771
g59
(g98
S'N\x00\x00\x00'
tRp4772
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4773
I0
sg3641
g4246
sS'block_loop.thisRepN'
p4774
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4775
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4776
Nsg69
Vn
sS'block_loop.thisTrialN'
p4777
I0
sg39
F0.81721238191312295
sg34
g752
(S'\x07\xdf\t\x1c\r\x0c\x00\n\x16\x08'
tRp4778
sa(dp4779
S'trial_loop.thisTrialN'
p4780
I79
sg3632
g3721
sS'block_loop.thisIndex'
p4781
g3626
sg38
S'right'
p4782
sg58
g62
sS'trial_loop.thisN'
p4783
I79
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4784
g59
(g98
S'O\x00\x00\x00'
tRp4785
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4786
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4787
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4788
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4789
Nsg69
Vn
sS'block_loop.thisTrialN'
p4790
I0
sg39
F1.6334822304233967
sg34
g752
(S'\x07\xdf\t\x1c\r\x0c\x06\x07\xcc\x18'
tRp4791
sa(dp4792
S'trial_loop.thisTrialN'
p4793
I80
sg3632
g4606
sS'block_loop.thisIndex'
p4794
g3626
sg38
S'left'
p4795
sg58
g62
sS'trial_loop.thisN'
p4796
I80
sg33
g4446
sg63
g64
sS'trial_loop.thisIndex'
p4797
g59
(g98
S'P\x00\x00\x00'
tRp4798
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4799
I0
sg3641
g4613
sS'block_loop.thisRepN'
p4800
I1
sg3644
g4446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4801
I1
sg3646
g4453
sg55
g11
sS'block_loop.thisTrial'
p4802
Nsg69
Vn
sS'block_loop.thisTrialN'
p4803
I0
sg39
F1.0668659880575433
sg34
g752
(S'\x07\xdf\t\x1c\r\x0c\r\x02\xa3\xc8'
tRp4804
sa(dp4805
S'trial_loop.thisTrialN'
p4806
I81
sg3632
g4280
sS'block_loop.thisIndex'
p4807
g3626
sg38
S'right'
p4808
sg58
g62
sS'trial_loop.thisN'
p4809
I81
sg33
g3766
sg63
g64
sS'trial_loop.thisIndex'
p4810
g59
(g98
S'Q\x00\x00\x00'
tRp4811
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4812
I0
sg3641
g4287
sS'block_loop.thisRepN'
p4813
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4814
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4815
Nsg69
Vn
sS'block_loop.thisTrialN'
p4816
I0
sg39
F0.91683240353449946
sg34
g752
(S'\x07\xdf\t\x1c\r\x0c\x13\x04&\x80'
tRp4817
sa(dp4818
S'trial_loop.thisTrialN'
p4819
I82
sg3632
g4472
sS'block_loop.thisIndex'
p4820
g3626
sg38
S'right'
p4821
sg58
g62
sS'trial_loop.thisN'
p4822
I82
sg33
g3964
sg63
g64
sS'trial_loop.thisIndex'
p4823
g59
(g98
S'R\x00\x00\x00'
tRp4824
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4825
I0
sg3641
g4479
sS'block_loop.thisRepN'
p4826
I1
sg3644
g3964
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4827
I1
sg3646
g3971
sg55
g11
sS'block_loop.thisTrial'
p4828
Nsg69
Vn
sS'block_loop.thisTrialN'
p4829
I0
sg39
F1.300108793329855
sg34
g752
(S'\x07\xdf\t\x1c\r\x0c\x19\x03\x86X'
tRp4830
sa(dp4831
S'trial_loop.thisTrialN'
p4832
I83
sg3632
g4753
sS'block_loop.thisIndex'
p4833
g3626
sg38
S'left'
p4834
sg58
g62
sS'trial_loop.thisN'
p4835
I83
sg33
g3889
sg63
g64
sS'trial_loop.thisIndex'
p4836
g59
(g98
S'S\x00\x00\x00'
tRp4837
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4838
I0
sg3641
g4760
sS'block_loop.thisRepN'
p4839
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4840
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p4841
Nsg69
Vn
sS'block_loop.thisTrialN'
p4842
I0
sg39
F1.183930290160788
sg34
g752
(S'\x07\xdf\t\x1c\r\x0c\x1f\x08\x9f\x08'
tRp4843
sa(dp4844
S'trial_loop.thisTrialN'
p4845
I84
sg3632
g3787
sS'block_loop.thisIndex'
p4846
g3626
sg38
S'right'
p4847
sg58
g62
sS'trial_loop.thisN'
p4848
I84
sg33
g3791
sg63
g64
sS'trial_loop.thisIndex'
p4849
g59
(g98
S'T\x00\x00\x00'
tRp4850
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4851
I0
sg3641
g3795
sS'block_loop.thisRepN'
p4852
I1
sg3644
g3791
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4853
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p4854
Nsg69
Vn
sS'block_loop.thisTrialN'
p4855
I0
sg39
F0.86678062977080117
sg34
g752
(S'\x07\xdf\t\x1c\r\x0c%\x0b\xcfp'
tRp4856
sa(dp4857
S'trial_loop.thisTrialN'
p4858
I85
sg3632
g4196
sS'block_loop.thisIndex'
p4859
g3626
sg38
S'left'
p4860
sg58
g62
sS'trial_loop.thisN'
p4861
I85
sg33
g4032
sg63
g64
sS'trial_loop.thisIndex'
p4862
g59
(g98
S'U\x00\x00\x00'
tRp4863
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4864
I0
sg3641
g4203
sS'block_loop.thisRepN'
p4865
I1
sg3644
g4032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4866
I1
sg3646
g4026
sg55
g11
sS'block_loop.thisTrial'
p4867
Nsg69
Vn
sS'block_loop.thisTrialN'
p4868
I0
sg39
F1.0001012097272906
sg34
g752
(S'\x07\xdf\t\x1c\r\x0c+\n=\x18'
tRp4869
sa(dp4870
S'trial_loop.thisTrialN'
p4871
I86
sg3632
g3704
sS'block_loop.thisIndex'
p4872
g3626
sg38
S'right'
p4873
sg58
g62
sS'trial_loop.thisN'
p4874
I86
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4875
g59
(g98
S'V\x00\x00\x00'
tRp4876
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4877
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4878
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4879
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4880
Nsg69
Vn
sS'block_loop.thisTrialN'
p4881
I0
sg39
F1.3167003462240245
sg34
g752
(S'\x07\xdf\t\x1c\r\x0c1\n\xcd\xa0'
tRp4882
sa(dp4883
S'trial_loop.thisTrialN'
p4884
I87
sg3632
g4442
sS'block_loop.thisIndex'
p4885
g3626
sg38
S'right'
p4886
sg58
g62
sS'trial_loop.thisN'
p4887
I87
sg33
g4446
sg63
g64
sS'trial_loop.thisIndex'
p4888
g59
(g98
S'W\x00\x00\x00'
tRp4889
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4890
I0
sg3641
g4450
sS'block_loop.thisRepN'
p4891
I1
sg3644
g4446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4892
I1
sg3646
g4453
sg55
g11
sS'block_loop.thisTrial'
p4893
Nsg69
Vn
sS'block_loop.thisTrialN'
p4894
I0
sg39
F0.88347766885635792
sg34
g752
(S'\x07\xdf\t\x1c\r\x0c8\x00\xde\xa8'
tRp4895
sa(dp4896
S'trial_loop.thisTrialN'
p4897
I88
sg3632
g4005
sS'block_loop.thisIndex'
p4898
g3626
sg38
S'right'
p4899
sg58
g62
sS'trial_loop.thisN'
p4900
I88
sg33
g4009
sg63
g64
sS'trial_loop.thisIndex'
p4901
g59
(g98
S'X\x00\x00\x00'
tRp4902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4903
I0
sg3641
g4013
sS'block_loop.thisRepN'
p4904
I1
sg3644
g4009
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4905
I1
sg3646
g4016
sg55
g11
sS'block_loop.thisTrial'
p4906
Nsg69
Vn
sS'block_loop.thisTrialN'
p4907
I0
sg39
F2.2165885308568249
sg34
g752
(S'\x07\xdf\t\x1c\r\r\x01\x0f\x07\xa8'
tRp4908
sa(dp4909
S'trial_loop.thisTrialN'
p4910
I89
sg3632
g3755
sS'block_loop.thisIndex'
p4911
g3626
sg38
S'left'
p4912
sg58
g62
sS'trial_loop.thisN'
p4913
I89
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4914
g59
(g98
S'Y\x00\x00\x00'
tRp4915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4916
I0
sg3641
g3763
sS'block_loop.thisRepN'
p4917
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4918
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4919
Nsg69
Vn
sS'block_loop.thisTrialN'
p4920
I0
sg39
F0.95009448141718167
sg34
g752
(S'\x07\xdf\t\x1c\r\r\t\x03g\x18'
tRp4921
sa(dp4922
S'trial_loop.thisTrialN'
p4923
I90
sg3632
g3870
sS'block_loop.thisIndex'
p4924
g3626
sg38
S'left'
p4925
sg58
g62
sS'trial_loop.thisN'
p4926
I90
sg33
g3798
sg63
g64
sS'trial_loop.thisIndex'
p4927
g59
(g98
S'Z\x00\x00\x00'
tRp4928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4929
I0
sg3641
g3877
sS'block_loop.thisRepN'
p4930
I1
sg3644
g3791
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4931
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p4932
Nsg69
Vn
sS'block_loop.thisTrialN'
p4933
I0
sg39
F0.88345172495610313
sg34
g752
(S'\x07\xdf\t\x1c\r\r\x0f\x03C\xf0'
tRp4934
sa(dp4935
S'trial_loop.thisTrialN'
p4936
I91
sg3632
g4539
sS'block_loop.thisIndex'
p4937
g3626
sg38
S'left'
p4938
sg58
g62
sS'trial_loop.thisN'
p4939
I91
sg33
g3815
sg63
g64
sS'trial_loop.thisIndex'
p4940
g59
(g98
S'[\x00\x00\x00'
tRp4941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4942
I0
sg3641
g4546
sS'block_loop.thisRepN'
p4943
I1
sg3644
g3808
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4944
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p4945
Nsg69
Vn
sS'block_loop.thisTrialN'
p4946
I0
sg39
F1.6001457420061342
sg34
g752
(S'\x07\xdf\t\x1c\r\r\x15\x01\xec0'
tRp4947
sa(dp4948
S'trial_loop.thisTrialN'
p4949
I92
sg3632
g3821
sS'block_loop.thisIndex'
p4950
g3626
sg38
S'right'
p4951
sg58
g62
sS'trial_loop.thisN'
p4952
I92
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p4953
g59
(g98
S'\\\x00\x00\x00'
tRp4954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4955
I0
sg3641
g3829
sS'block_loop.thisRepN'
p4956
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4957
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p4958
Nsg69
Vn
sS'block_loop.thisTrialN'
p4959
I0
sg39
F2.9000466990237328
sg34
g752
(S'\x07\xdf\t\x1c\r\r\x1b\x0b\x89 '
tRp4960
sa(dp4961
S'trial_loop.thisTrialN'
p4962
I93
sg3632
g4239
sS'block_loop.thisIndex'
p4963
g3626
sg38
S'left'
p4964
sg58
g62
sS'trial_loop.thisN'
p4965
I93
sg33
g3749
sg63
g64
sS'trial_loop.thisIndex'
p4966
g59
(g98
S']\x00\x00\x00'
tRp4967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4968
I0
sg3641
g4246
sS'block_loop.thisRepN'
p4969
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4970
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4971
Nsg69
Vn
sS'block_loop.thisTrialN'
p4972
I0
sg39
F1.067258567760291
sg34
g752
(S'\x07\xdf\t\x1c\r\r#\n\xa2\xa8'
tRp4973
sa(dp4974
S'trial_loop.thisTrialN'
p4975
I94
sg3632
g4196
sS'block_loop.thisIndex'
p4976
g3626
sg38
S'left'
p4977
sg58
g62
sS'trial_loop.thisN'
p4978
I94
sg33
g4032
sg63
g64
sS'trial_loop.thisIndex'
p4979
g59
(g98
S'^\x00\x00\x00'
tRp4980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4981
I0
sg3641
g4203
sS'block_loop.thisRepN'
p4982
I1
sg3644
g4032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4983
I1
sg3646
g4026
sg55
g11
sS'block_loop.thisTrial'
p4984
Nsg69
Vn
sS'block_loop.thisTrialN'
p4985
I0
sg39
F0.81680839829823526
sg34
g752
(S'\x07\xdf\t\x1c\r\r)\x0c%`'
tRp4986
sa(dp4987
S'trial_loop.thisTrialN'
p4988
I95
sg3632
g4106
sS'block_loop.thisIndex'
p4989
g3626
sg38
S'right'
p4990
sg58
g62
sS'trial_loop.thisN'
p4991
I95
sg33
g4110
sg63
g64
sS'trial_loop.thisIndex'
p4992
g59
(g98
S'_\x00\x00\x00'
tRp4993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4994
I0
sg3641
g4114
sS'block_loop.thisRepN'
p4995
I1
sg3644
g4110
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4996
I1
sg3646
g4117
sg55
g11
sS'block_loop.thisTrial'
p4997
Nsg69
Vn
sS'block_loop.thisTrialN'
p4998
I0
sg39
F1.0334847392841766
sg34
g752
(S'\x07\xdf\t\x1c\r\r/\t\xdbp'
tRp4999
sa(dp5000
S'trial_loop.thisTrialN'
p5001
I96
sg3632
g4196
sS'block_loop.thisIndex'
p5002
g3626
sg38
S'right'
p5003
sg58
g62
sS'trial_loop.thisN'
p5004
I96
sg33
g4026
sg63
g64
sS'trial_loop.thisIndex'
p5005
g59
(g98
S'`\x00\x00\x00'
tRp5006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5007
I0
sg3641
g4203
sS'block_loop.thisRepN'
p5008
I1
sg3644
g4032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5009
I1
sg3646
g4026
sg55
g11
sS'block_loop.thisTrial'
p5010
Nsg69
Vn
sS'block_loop.thisTrialN'
p5011
I0
sg39
F1.7001862829183665
sg34
g752
(S'\x07\xdf\t\x1c\r\r5\n\xe8\xf8'
tRp5012
sa(dp5013
S'trial_loop.thisTrialN'
p5014
I97
sg3632
g4472
sS'block_loop.thisIndex'
p5015
g3626
sg38
S'right'
p5016
sg58
g62
sS'trial_loop.thisN'
p5017
I97
sg33
g3964
sg63
g64
sS'trial_loop.thisIndex'
p5018
g59
(g98
S'a\x00\x00\x00'
tRp5019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5020
I0
sg3641
g4479
sS'block_loop.thisRepN'
p5021
I1
sg3644
g3964
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5022
I1
sg3646
g3971
sg55
g11
sS'block_loop.thisTrial'
p5023
Nsg69
Vn
sS'block_loop.thisTrialN'
p5024
I0
sg39
F0.9001345091528492
sg34
g752
(S'\x07\xdf\t\x1c\r\x0e\x00\x06\xae\xf0'
tRp5025
sa(dp5026
S'trial_loop.thisTrialN'
p5027
I98
sg3632
g4349
sS'block_loop.thisIndex'
p5028
g3626
sg38
S'left'
p5029
sg58
g62
sS'trial_loop.thisN'
p5030
I98
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p5031
g59
(g98
S'b\x00\x00\x00'
tRp5032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5033
I0
sg3641
g4356
sS'block_loop.thisRepN'
p5034
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5035
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5036
Nsg69
Vn
sS'block_loop.thisTrialN'
p5037
I0
sg39
F1.0504303836733015
sg34
g752
(S'\x07\xdf\t\x1c\r\x0e\x06\x05\xd40'
tRp5038
sa(dp5039
S'trial_loop.thisTrialN'
p5040
I99
sg3632
g3977
sS'block_loop.thisIndex'
p5041
g3626
sg38
S'left'
p5042
sg58
g62
sS'trial_loop.thisN'
p5043
I99
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p5044
g59
(g98
S'c\x00\x00\x00'
tRp5045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5046
I0
sg3641
g3984
sS'block_loop.thisRepN'
p5047
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5048
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5049
Nsg69
Vn
sS'block_loop.thisTrialN'
p5050
I0
sg39
F2.7334412333566434
sg34
g752
(S'\x07\xdf\t\x1c\r\x0e\x0c\x07\x1cP'
tRp5051
sa(dp5052
S'trial_loop.thisTrialN'
p5053
I100
sg3632
g4052
sS'block_loop.thisIndex'
p5054
g3626
sg38
S'right'
p5055
sg58
g62
sS'trial_loop.thisN'
p5056
I100
sg33
g4009
sg63
g64
sS'trial_loop.thisIndex'
p5057
g59
(g98
S'd\x00\x00\x00'
tRp5058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5059
I0
sg3641
g4059
sS'block_loop.thisRepN'
p5060
I1
sg3644
g4009
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5061
I1
sg3646
g4016
sg55
g11
sS'block_loop.thisTrial'
p5062
Nsg69
Vn
sS'block_loop.thisTrialN'
p5063
I0
sg39
F1.1835491143719992
sg34
g752
(S'\x07\xdf\t\x1c\r\x0e\x14\x03Wx'
tRp5064
sa(dp5065
S'trial_loop.thisTrialN'
p5066
I101
sg3632
g3870
sS'block_loop.thisIndex'
p5067
g3626
sg38
S'left'
p5068
sg58
g62
sS'trial_loop.thisN'
p5069
I101
sg33
g3791
sg63
g64
sS'trial_loop.thisIndex'
p5070
g59
(g98
S'e\x00\x00\x00'
tRp5071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5072
I0
sg3641
g3877
sS'block_loop.thisRepN'
p5073
I1
sg3644
g3791
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5074
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p5075
Nsg69
Vn
sS'block_loop.thisTrialN'
p5076
I0
sg39
F1.0501909015019919
sg34
g752
(S'\x07\xdf\t\x1c\r\x0e\x1a\x06\xc6`'
tRp5077
sa(dp5078
S'trial_loop.thisTrialN'
p5079
I102
sg3632
g3704
sS'block_loop.thisIndex'
p5080
g3626
sg38
S'right'
p5081
sg58
g62
sS'trial_loop.thisN'
p5082
I102
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p5083
g59
(g98
S'f\x00\x00\x00'
tRp5084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5085
I0
sg3641
g3712
sS'block_loop.thisRepN'
p5086
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5087
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5088
Nsg69
Vn
sS'block_loop.thisTrialN'
p5089
I0
sg39
F0.94999840345190023
sg34
g752
(S'\x07\xdf\t\x1c\r\x0e \x08\x0e\x80'
tRp5090
sa(dp5091
S'trial_loop.thisTrialN'
p5092
I103
sg3632
g3902
sS'block_loop.thisIndex'
p5093
g3626
sg38
S'left'
p5094
sg58
g62
sS'trial_loop.thisN'
p5095
I103
sg33
g3906
sg63
g64
sS'trial_loop.thisIndex'
p5096
g59
(g98
S'g\x00\x00\x00'
tRp5097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5098
I0
sg3641
g3910
sS'block_loop.thisRepN'
p5099
I1
sg3644
g3906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5100
I1
sg3646
g3913
sg55
g11
sS'block_loop.thisTrial'
p5101
Nsg69
Vn
sS'block_loop.thisTrialN'
p5102
I0
sg39
F1.0505236106619122
sg34
g752
(S'\x07\xdf\t\x1c\r\x0e&\x07\xa8\xf0'
tRp5103
sa(dp5104
S'trial_loop.thisTrialN'
p5105
I104
sg3632
g3738
sS'block_loop.thisIndex'
p5106
g3626
sg38
S'right'
p5107
sg58
g62
sS'trial_loop.thisN'
p5108
I104
sg33
g3749
sg63
g64
sS'trial_loop.thisIndex'
p5109
g59
(g98
S'h\x00\x00\x00'
tRp5110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5111
I0
sg3641
g3746
sS'block_loop.thisRepN'
p5112
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5113
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5114
Nsg69
Vn
sS'block_loop.thisTrialN'
p5115
I0
sg39
F0.96680691578876576
sg34
g752
(S'\x07\xdf\t\x1c\r\x0e,\x08\xf1\x10'
tRp5116
sa(dp5117
S'trial_loop.thisTrialN'
p5118
I105
sg3632
g4606
sS'block_loop.thisIndex'
p5119
g3626
sg38
S'left'
p5120
sg58
g62
sS'trial_loop.thisN'
p5121
I105
sg33
g4453
sg63
g64
sS'trial_loop.thisIndex'
p5122
g59
(g98
S'i\x00\x00\x00'
tRp5123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5124
I0
sg3641
g4613
sS'block_loop.thisRepN'
p5125
I1
sg3644
g4446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5126
I1
sg3646
g4453
sg55
g11
sS'block_loop.thisTrial'
p5127
Nsg69
Vn
sS'block_loop.thisTrialN'
p5128
I0
sg39
F0.78360191448882688
sg34
g752
(S'\x07\xdf\t\x1c\r\x0e2\t\x08\x80'
tRp5129
sa(dp5130
S'trial_loop.thisTrialN'
p5131
I106
sg3632
g4052
sS'block_loop.thisIndex'
p5132
g3626
sg38
S'left'
p5133
sg58
g62
sS'trial_loop.thisN'
p5134
I106
sg33
g4009
sg63
g64
sS'trial_loop.thisIndex'
p5135
g59
(g98
S'j\x00\x00\x00'
tRp5136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5137
I0
sg3641
g4059
sS'block_loop.thisRepN'
p5138
I1
sg3644
g4009
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5139
I1
sg3646
g4016
sg55
g11
sS'block_loop.thisTrial'
p5140
Nsg69
Vn
sS'block_loop.thisTrialN'
p5141
I0
sg39
F0.96685139104920381
sg34
g752
(S'\x07\xdf\t\x1c\r\x0e8\x06Ex'
tRp5142
sa(dp5143
S'trial_loop.thisTrialN'
p5144
I107
sg3632
g4753
sS'block_loop.thisIndex'
p5145
g3626
sg38
S'left'
p5146
sg58
g62
sS'trial_loop.thisN'
p5147
I107
sg33
g3889
sg63
g64
sS'trial_loop.thisIndex'
p5148
g59
(g98
S'k\x00\x00\x00'
tRp5149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5150
I0
sg3641
g4760
sS'block_loop.thisRepN'
p5151
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5152
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p5153
Nsg69
Vn
sS'block_loop.thisTrialN'
p5154
I0
sg39
F1.383444882609183
sg34
g752
(S'\x07\xdf\t\x1c\r\x0f\x02\x06\\\xe8'
tRp5155
sa(dp5156
S'trial_loop.thisTrialN'
p5157
I108
sg3632
g4539
sS'block_loop.thisIndex'
p5158
g3626
sg38
S'left'
p5159
sg58
g62
sS'trial_loop.thisN'
p5160
I108
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p5161
g59
(g98
S'l\x00\x00\x00'
tRp5162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5163
I0
sg3641
g4546
sS'block_loop.thisRepN'
p5164
I1
sg3644
g3808
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5165
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p5166
Nsg69
Vn
sS'block_loop.thisTrialN'
p5167
I0
sg39
F1.4838985302631045
sg34
g752
(S'\x07\xdf\t\x1c\r\x0f\x08\x0c\xa6H'
tRp5168
sa(dp5169
S'trial_loop.thisTrialN'
p5170
I109
sg3632
g3755
sS'block_loop.thisIndex'
p5171
g3626
sg38
S'left'
p5172
sg58
g62
sS'trial_loop.thisN'
p5173
I109
sg33
g3766
sg63
g64
sS'trial_loop.thisIndex'
p5174
g59
(g98
S'm\x00\x00\x00'
tRp5175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5176
I0
sg3641
g3763
sS'block_loop.thisRepN'
p5177
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5178
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5179
Nsg69
Vn
sS'block_loop.thisTrialN'
p5180
I0
sg39
F1.1835052093083505
sg34
g752
(S'\x07\xdf\t\x1c\r\x0f\x0f\x05W0'
tRp5181
sa(dp5182
S'trial_loop.thisTrialN'
p5183
I110
sg3632
g3870
sS'block_loop.thisIndex'
p5184
g3626
sg38
S'left'
p5185
sg58
g62
sS'trial_loop.thisN'
p5186
I110
sg33
g3798
sg63
g64
sS'trial_loop.thisIndex'
p5187
g59
(g98
S'n\x00\x00\x00'
tRp5188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5189
I0
sg3641
g3877
sS'block_loop.thisRepN'
p5190
I1
sg3644
g3791
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5191
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p5192
Nsg69
Vn
sS'block_loop.thisTrialN'
p5193
I0
sg39
F0.88353012685729482
sg34
g752
(S'\x07\xdf\t\x1c\r\x0f\x15\x08\x83\xb0'
tRp5194
sa(dp5195
S'trial_loop.thisTrialN'
p5196
I111
sg3632
g3885
sS'block_loop.thisIndex'
p5197
g3626
sg38
S'right'
p5198
sg58
g62
sS'trial_loop.thisN'
p5199
I111
sg33
g3889
sg63
g64
sS'trial_loop.thisIndex'
p5200
g59
(g98
S'o\x00\x00\x00'
tRp5201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5202
I0
sg3641
g3893
sS'block_loop.thisRepN'
p5203
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5204
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p5205
Nsg69
Vn
sS'block_loop.thisTrialN'
p5206
I0
sg39
F0.98341671494381444
sg34
g752
(S'\x07\xdf\t\x1c\r\x0f\x1b\x07/\xd8'
tRp5207
sa(dp5208
S'trial_loop.thisTrialN'
p5209
I112
sg3632
S'3-ellas_strawberries_apples.png'
p5210
sS'block_loop.thisIndex'
p5211
g3626
sg38
S'left'
p5212
sg58
g62
sS'trial_loop.thisN'
p5213
I112
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5214
g59
(g98
S'p\x00\x00\x00'
tRp5215
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5216
I0
sg3641
S'13-mccoys_steak_crisps.png'
p5217
sS'block_loop.thisRepN'
p5218
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5219
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5220
Nsg69
Vn
sS'block_loop.thisTrialN'
p5221
I0
sg39
F0.95012413159201969
sg34
g752
(S'\x07\xdf\t\x1c\r\x0f!\x07\x85\xc8'
tRp5222
sa(dp5223
S'trial_loop.thisTrialN'
p5224
I113
sg3632
g4005
sS'block_loop.thisIndex'
p5225
g3626
sg38
S'right'
p5226
sg58
g62
sS'trial_loop.thisN'
p5227
I113
sg33
g4016
sg63
g64
sS'trial_loop.thisIndex'
p5228
g59
(g98
S'q\x00\x00\x00'
tRp5229
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5230
I0
sg3641
g4013
sS'block_loop.thisRepN'
p5231
I1
sg3644
g4009
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5232
I1
sg3646
g4016
sg55
g11
sS'block_loop.thisTrial'
p5233
Nsg69
Vn
sS'block_loop.thisTrialN'
p5234
I0
sg39
F1.7836466748467501
sg34
g752
(S"\x07\xdf\t\x1c\r\x0f'\x07^\xb8"
tRp5235
sa(dp5236
S'trial_loop.thisTrialN'
p5237
I114
sg3632
g4472
sS'block_loop.thisIndex'
p5238
g3626
sg38
S'right'
p5239
sg58
g62
sS'trial_loop.thisN'
p5240
I114
sg33
g3964
sg63
g64
sS'trial_loop.thisIndex'
p5241
g59
(g98
S'r\x00\x00\x00'
tRp5242
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5243
I0
sg3641
g4479
sS'block_loop.thisRepN'
p5244
I1
sg3644
g3964
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5245
I1
sg3646
g3971
sg55
g11
sS'block_loop.thisTrial'
p5246
Nsg69
Vn
sS'block_loop.thisTrialN'
p5247
I0
sg39
F1.1501672954036621
sg34
g752
(S'\x07\xdf\t\x1c\r\x0f.\x04\x93\xe0'
tRp5248
sa(dp5249
S'trial_loop.thisTrialN'
p5250
I115
sg3632
g4349
sS'block_loop.thisIndex'
p5251
g3626
sg38
S'left'
p5252
sg58
g62
sS'trial_loop.thisN'
p5253
I115
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5254
g59
(g98
S's\x00\x00\x00'
tRp5255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5256
I0
sg3641
g4356
sS'block_loop.thisRepN'
p5257
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5258
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5259
Nsg69
Vn
sS'block_loop.thisTrialN'
p5260
I0
sg39
F1.6000995561589662
sg34
g752
(S'\x07\xdf\t\x1c\r\x0f4\x07K0'
tRp5261
sa(dp5262
S'trial_loop.thisTrialN'
p5263
I116
sg3632
g4673
sS'block_loop.thisIndex'
p5264
g3626
sg38
S'left'
p5265
sg58
g62
sS'trial_loop.thisN'
p5266
I116
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5267
g59
(g98
S't\x00\x00\x00'
tRp5268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5269
I0
sg3641
g4680
sS'block_loop.thisRepN'
p5270
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5271
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5272
Nsg69
Vn
sS'block_loop.thisTrialN'
p5273
I0
sg39
F1.583498880136176
sg34
g752
(S'\x07\xdf\t\x1c\r\x0f;\x01\xa5\xe0'
tRp5274
sa(dp5275
S'trial_loop.thisTrialN'
p5276
I117
sg3632
g5210
sS'block_loop.thisIndex'
p5277
g3626
sg38
S'left'
p5278
sg58
g62
sS'trial_loop.thisN'
p5279
I117
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5280
g59
(g98
S'u\x00\x00\x00'
tRp5281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5282
I0
sg3641
g5217
sS'block_loop.thisRepN'
p5283
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5284
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5285
Nsg69
Vn
sS'block_loop.thisTrialN'
p5286
I0
sg39
F0.81692756918710074
sg34
g752
(S'\x07\xdf\t\x1c\r\x10\x05\x0b\x04P'
tRp5287
sa(dp5288
S'trial_loop.thisTrialN'
p5289
I118
sg3632
g3870
sS'block_loop.thisIndex'
p5290
g3626
sg38
S'left'
p5291
sg58
g62
sS'trial_loop.thisN'
p5292
I118
sg33
g3791
sg63
g64
sS'trial_loop.thisIndex'
p5293
g59
(g98
S'v\x00\x00\x00'
tRp5294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5295
I0
sg3641
g3877
sS'block_loop.thisRepN'
p5296
I1
sg3644
g3791
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5297
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p5298
Nsg69
Vn
sS'block_loop.thisTrialN'
p5299
I0
sg39
F6.1667274875362637
sg34
g752
(S'\x07\xdf\t\x1c\r\x10\x0b\x08\xba`'
tRp5300
sa(dp5301
S'trial_loop.thisTrialN'
p5302
I119
sg3632
g4321
sS'block_loop.thisIndex'
p5303
g3626
sg38
S'left'
p5304
sg58
g62
sS'trial_loop.thisN'
p5305
I119
sg33
g4164
sg63
g64
sS'trial_loop.thisIndex'
p5306
g59
(g98
S'w\x00\x00\x00'
tRp5307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5308
I0
sg3641
g4328
sS'block_loop.thisRepN'
p5309
I1
sg3644
g4157
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5310
I1
sg3646
g4164
sg55
g11
sS'block_loop.thisTrial'
p5311
Nsg69
Vn
sS'block_loop.thisTrialN'
p5312
I0
sg39
F1.3001820634690375
sg34
g752
(S'\x07\xdf\t\x1c\r\x10\x16\x0b\xcb\x88'
tRp5313
sa(dp5314
S'trial_loop.thisTrialN'
p5315
I120
sg3632
g3977
sS'block_loop.thisIndex'
p5316
g3626
sg38
S'left'
p5317
sg58
g62
sS'trial_loop.thisN'
p5318
I120
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5319
g59
(g98
S'x\x00\x00\x00'
tRp5320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5321
I0
sg3641
g3984
sS'block_loop.thisRepN'
p5322
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5323
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5324
Nsg69
Vn
sS'block_loop.thisTrialN'
p5325
I0
sg39
F0.91684238195739454
sg34
g752
(S'\x07\xdf\t\x1c\r\x10\x1d\x01\xa1\xf8'
tRp5326
sa(dp5327
S'trial_loop.thisTrialN'
p5328
I121
sg3632
g4052
sS'block_loop.thisIndex'
p5329
g3626
sg38
S'left'
p5330
sg58
g62
sS'trial_loop.thisN'
p5331
I121
sg33
g4009
sg63
g64
sS'trial_loop.thisIndex'
p5332
g59
(g98
S'y\x00\x00\x00'
tRp5333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5334
I0
sg3641
g4059
sS'block_loop.thisRepN'
p5335
I1
sg3644
g4009
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5336
I1
sg3646
g4016
sg55
g11
sS'block_loop.thisTrial'
p5337
Nsg69
Vn
sS'block_loop.thisTrialN'
p5338
I0
sg39
F1.3502443858542392
sg34
g752
(S'\x07\xdf\t\x1c\r\x10#\x01\x01\xd0'
tRp5339
sa(dp5340
S'trial_loop.thisTrialN'
p5341
I122
sg3632
g4153
sS'block_loop.thisIndex'
p5342
g3626
sg38
S'right'
p5343
sg58
g62
sS'trial_loop.thisN'
p5344
I122
sg33
g4157
sg63
g64
sS'trial_loop.thisIndex'
p5345
g59
(g98
S'z\x00\x00\x00'
tRp5346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5347
I0
sg3641
g4161
sS'block_loop.thisRepN'
p5348
I1
sg3644
g4157
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5349
I1
sg3646
g4164
sg55
g11
sS'block_loop.thisTrial'
p5350
Nsg69
Vn
sS'block_loop.thisTrialN'
p5351
I0
sg39
F0.90019751577165152
sg34
g752
(S'\x07\xdf\t\x1c\r\x10)\x06\xce0'
tRp5352
sa(dp5353
S'trial_loop.thisTrialN'
p5354
I123
sg3632
g3902
sS'block_loop.thisIndex'
p5355
g3626
sg38
S'left'
p5356
sg58
g62
sS'trial_loop.thisN'
p5357
I123
sg33
g3906
sg63
g64
sS'trial_loop.thisIndex'
p5358
g59
(g98
S'{\x00\x00\x00'
tRp5359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5360
I0
sg3641
g3910
sS'block_loop.thisRepN'
p5361
I1
sg3644
g3906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5362
I1
sg3646
g3913
sg55
g11
sS'block_loop.thisTrial'
p5363
Nsg69
Vn
sS'block_loop.thisTrialN'
p5364
I0
sg39
F1.050542997312732
sg34
g752
(S'\x07\xdf\t\x1c\r\x10/\x05\xb4\xf0'
tRp5365
sa(dp5366
S'trial_loop.thisTrialN'
p5367
I124
sg3632
g3704
sS'block_loop.thisIndex'
p5368
g3626
sg38
S'right'
p5369
sg58
g62
sS'trial_loop.thisN'
p5370
I124
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5371
g59
(g98
S'|\x00\x00\x00'
tRp5372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5373
I0
sg3641
g3712
sS'block_loop.thisRepN'
p5374
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5375
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5376
Nsg69
Vn
sS'block_loop.thisTrialN'
p5377
I0
sg39
F1.5833241151703987
sg34
g752
(S'\x07\xdf\t\x1c\r\x105\x06\xfd\x10'
tRp5378
sa(dp5379
S'trial_loop.thisTrialN'
p5380
I125
sg3632
g4321
sS'block_loop.thisIndex'
p5381
g3626
sg38
S'left'
p5382
sg58
g62
sS'trial_loop.thisN'
p5383
I125
sg33
g4157
sg63
g64
sS'trial_loop.thisIndex'
p5384
g59
(g98
S'}\x00\x00\x00'
tRp5385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5386
I0
sg3641
g4328
sS'block_loop.thisRepN'
p5387
I1
sg3644
g4157
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5388
I1
sg3646
g4164
sg55
g11
sS'block_loop.thisTrial'
p5389
Nsg69
Vn
sS'block_loop.thisTrialN'
p5390
I0
sg39
F0.90022688084718538
sg34
g752
(S'\x07\xdf\t\x1c\r\x11\x00\x01\x1d('
tRp5391
sa(dp5392
S'trial_loop.thisTrialN'
p5393
I126
sg3632
g4673
sS'block_loop.thisIndex'
p5394
g3626
sg38
S'left'
p5395
sg58
g62
sS'trial_loop.thisN'
p5396
I126
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5397
g59
(g98
S'~\x00\x00\x00'
tRp5398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5399
I0
sg3641
g4680
sS'block_loop.thisRepN'
p5400
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5401
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5402
Nsg69
Vn
sS'block_loop.thisTrialN'
p5403
I0
sg39
F1.7001643303865421
sg34
g752
(S'\x07\xdf\t\x1c\r\x11\x06\x00>\x80'
tRp5404
sa(dp5405
S'trial_loop.thisTrialN'
p5406
I127
sg3632
g4753
sS'block_loop.thisIndex'
p5407
g3626
sg38
S'left'
p5408
sg58
g62
sS'trial_loop.thisN'
p5409
I127
sg33
g3889
sg63
g64
sS'trial_loop.thisIndex'
p5410
g59
(g98
S'\x7f\x00\x00\x00'
tRp5411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5412
I0
sg3641
g4760
sS'block_loop.thisRepN'
p5413
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5414
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p5415
Nsg69
Vn
sS'block_loop.thisTrialN'
p5416
I0
sg39
F0.81685287355867331
sg34
g752
(S'\x07\xdf\t\x1c\r\x11\x0c\x0bJ\xa0'
tRp5417
sa(dp5418
S'trial_loop.thisTrialN'
p5419
I128
sg3632
g3919
sS'block_loop.thisIndex'
p5420
g3626
sg38
S'right'
p5421
sg58
g62
sS'trial_loop.thisN'
p5422
I128
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p5423
g59
(g98
S'\x80\x00\x00\x00'
tRp5424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5425
I0
sg3641
g3926
sS'block_loop.thisRepN'
p5426
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5427
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p5428
Nsg69
Vn
sS'block_loop.thisTrialN'
p5429
I0
sg39
F0.91718392915026925
sg34
g752
(S'\x07\xdf\t\x1c\r\x11\x12\t\x00\xb0'
tRp5430
sa(dp5431
S'trial_loop.thisTrialN'
p5432
I129
sg3632
g4442
sS'block_loop.thisIndex'
p5433
g3626
sg38
S'right'
p5434
sg58
g62
sS'trial_loop.thisN'
p5435
I129
sg33
g4446
sg63
g64
sS'trial_loop.thisIndex'
p5436
g59
(g98
S'\x81\x00\x00\x00'
tRp5437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5438
I0
sg3641
g4450
sS'block_loop.thisRepN'
p5439
I1
sg3644
g4446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5440
I1
sg3646
g4453
sg55
g11
sS'block_loop.thisTrial'
p5441
Nsg69
Vn
sS'block_loop.thisTrialN'
p5442
I0
sg39
F0.8168691241335182
sg34
g752
(S'\x07\xdf\t\x1c\r\x11\x18\x08`\x88'
tRp5443
sa(dp5444
S'trial_loop.thisTrialN'
p5445
I130
sg3632
g4321
sS'block_loop.thisIndex'
p5446
g3626
sg38
S'left'
p5447
sg58
g62
sS'trial_loop.thisN'
p5448
I130
sg33
g4164
sg63
g64
sS'trial_loop.thisIndex'
p5449
g59
(g98
S'\x82\x00\x00\x00'
tRp5450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5451
I0
sg3641
g4328
sS'block_loop.thisRepN'
p5452
I1
sg3644
g4157
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5453
I1
sg3646
g4164
sg55
g11
sS'block_loop.thisTrial'
p5454
Nsg69
Vn
sS'block_loop.thisTrialN'
p5455
I0
sg39
F1.4000951656526013
sg34
g752
(S'\x07\xdf\t\x1c\r\x11\x1e\x06\x16\x98'
tRp5456
sa(dp5457
S'trial_loop.thisTrialN'
p5458
I131
sg3632
g3838
sS'block_loop.thisIndex'
p5459
g3626
sg38
S'left'
p5460
sg58
g62
sS'trial_loop.thisN'
p5461
I131
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p5462
g59
(g98
S'\x83\x00\x00\x00'
tRp5463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5464
I0
sg3641
g3846
sS'block_loop.thisRepN'
p5465
I1
sg3644
g3842
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5466
I1
sg3646
g3849
sg55
g11
sS'block_loop.thisTrial'
p5467
Nsg69
Vn
sS'block_loop.thisTrialN'
p5468
I0
sg39
F0.85011894281160494
sg34
g752
(S'\x07\xdf\t\x1c\r\x11$\x0c\x9a\x90'
tRp5469
sa(dp5470
S'trial_loop.thisTrialN'
p5471
I132
sg3632
g3772
sS'block_loop.thisIndex'
p5472
g3626
sg38
S'right'
p5473
sg58
g62
sS'trial_loop.thisN'
p5474
I132
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5475
g59
(g98
S'\x84\x00\x00\x00'
tRp5476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5477
I0
sg3641
g3779
sS'block_loop.thisRepN'
p5478
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5479
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5480
Nsg69
Vn
sS'block_loop.thisTrialN'
p5481
I0
sg39
F0.81682635946162918
sg34
g752
(S'\x07\xdf\t\x1c\r\x11*\n\xcd\xa0'
tRp5482
sa(dp5483
S'trial_loop.thisTrialN'
p5484
I133
sg3632
g3977
sS'block_loop.thisIndex'
p5485
g3626
sg38
S'left'
p5486
sg58
g62
sS'trial_loop.thisN'
p5487
I133
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p5488
g59
(g98
S'\x85\x00\x00\x00'
tRp5489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5490
I0
sg3641
g3984
sS'block_loop.thisRepN'
p5491
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5492
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5493
Nsg69
Vn
sS'block_loop.thisTrialN'
p5494
I0
sg39
F0.85017596237776161
sg34
g752
(S'\x07\xdf\t\x1c\r\x110\x08\x83\xb0'
tRp5495
sa(dp5496
S'trial_loop.thisTrialN'
p5497
I134
sg3632
g5210
sS'block_loop.thisIndex'
p5498
g3626
sg38
S'left'
p5499
sg58
g62
sS'trial_loop.thisN'
p5500
I134
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5501
g59
(g98
S'\x86\x00\x00\x00'
tRp5502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5503
I0
sg3641
g5217
sS'block_loop.thisRepN'
p5504
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5505
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5506
Nsg69
Vn
sS'block_loop.thisTrialN'
p5507
I0
sg39
F0.73347630038915668
sg34
g752
(S'\x07\xdf\t\x1c\r\x116\x06\xb2\xd8'
tRp5508
sa(dp5509
S'trial_loop.thisTrialN'
p5510
I135
sg3632
g4022
sS'block_loop.thisIndex'
p5511
g3626
sg38
S'right'
p5512
sg58
g62
sS'trial_loop.thisN'
p5513
I135
sg33
g4032
sg63
g64
sS'trial_loop.thisIndex'
p5514
g59
(g98
S'\x87\x00\x00\x00'
tRp5515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5516
I0
sg3641
g4030
sS'block_loop.thisRepN'
p5517
I1
sg3644
g4032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5518
I1
sg3646
g4026
sg55
g11
sS'block_loop.thisTrial'
p5519
Nsg69
Vn
sS'block_loop.thisTrialN'
p5520
I0
sg39
F0.91677766475186218
sg34
g752
(S'\x07\xdf\t\x1c\r\x12\x00\x0388'
tRp5521
sa(dp5522
S'trial_loop.thisTrialN'
p5523
I136
sg3632
g4052
sS'block_loop.thisIndex'
p5524
g3626
sg38
S'left'
p5525
sg58
g62
sS'trial_loop.thisN'
p5526
I136
sg33
g4009
sg63
g64
sS'trial_loop.thisIndex'
p5527
g59
(g98
S'\x88\x00\x00\x00'
tRp5528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5529
I0
sg3641
g4059
sS'block_loop.thisRepN'
p5530
I1
sg3644
g4009
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5531
I1
sg3646
g4016
sg55
g11
sS'block_loop.thisTrial'
p5532
Nsg69
Vn
sS'block_loop.thisTrialN'
p5533
I0
sg39
F0.83353565775541938
sg34
g752
(S'\x07\xdf\t\x1c\r\x12\x06\x02Y\x90'
tRp5534
sa(dp5535
S'trial_loop.thisTrialN'
p5536
I137
sg3632
g4022
sS'block_loop.thisIndex'
p5537
g3626
sg38
S'right'
p5538
sg58
g62
sS'trial_loop.thisN'
p5539
I137
sg33
g4032
sg63
g64
sS'trial_loop.thisIndex'
p5540
g59
(g98
S'\x89\x00\x00\x00'
tRp5541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5542
I0
sg3641
g4030
sS'block_loop.thisRepN'
p5543
I1
sg3644
g4032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5544
I1
sg3646
g4026
sg55
g11
sS'block_loop.thisTrial'
p5545
Nsg69
Vn
sS'block_loop.thisTrialN'
p5546
I0
sg39
F0.76684757073780929
sg34
g752
(S'\x07\xdf\t\x1c\r\x12\x0c\x00N '
tRp5547
sa(dp5548
S'trial_loop.thisTrialN'
p5549
I138
sg3632
g3653
sS'block_loop.thisIndex'
p5550
g3626
sg38
S'right'
p5551
sg58
g62
sS'trial_loop.thisN'
p5552
I138
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5553
g59
(g98
S'\x8a\x00\x00\x00'
tRp5554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5555
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5556
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5557
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5558
Nsg69
Vn
sS'block_loop.thisTrialN'
p5559
I0
sg39
F1.016544511752727
sg34
g752
(S'\x07\xdf\t\x1c\r\x12\x11\x0c\x8e\xd8'
tRp5560
sa(dp5561
S'trial_loop.thisTrialN'
p5562
I139
sg3632
g3821
sS'block_loop.thisIndex'
p5563
g3626
sg38
S'right'
p5564
sg58
g62
sS'trial_loop.thisN'
p5565
I139
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p5566
g59
(g98
S'\x8b\x00\x00\x00'
tRp5567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5568
I0
sg3641
g3829
sS'block_loop.thisRepN'
p5569
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5570
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p5571
Nsg69
Vn
sS'block_loop.thisTrialN'
p5572
I0
sg39
F2.3999223963728582
sg34
g752
(S'\x07\xdf\t\x1c\r\x12\x17\r]\xe0'
tRp5573
sa(dp5574
S'trial_loop.thisTrialN'
p5575
I140
sg3632
g3687
sS'block_loop.thisIndex'
p5576
g3626
sg38
S'right'
p5577
sg58
g62
sS'trial_loop.thisN'
p5578
I140
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5579
g59
(g98
S'\x8c\x00\x00\x00'
tRp5580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5581
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5582
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5583
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5584
Nsg69
Vn
sS'block_loop.thisTrialN'
p5585
I0
sg39
F0.7168354255718441
sg34
g752
(S'\x07\xdf\t\x1c\r\x12\x1f\x04\x9b\xb0'
tRp5586
sa(dp5587
S'trial_loop.thisTrialN'
p5588
I141
sg3632
g3838
sS'block_loop.thisIndex'
p5589
g3626
sg38
S'left'
p5590
sg58
g62
sS'trial_loop.thisN'
p5591
I141
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p5592
g59
(g98
S'\x8d\x00\x00\x00'
tRp5593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5594
I0
sg3641
g3846
sS'block_loop.thisRepN'
p5595
I1
sg3644
g3842
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5596
I1
sg3646
g3849
sg55
g11
sS'block_loop.thisTrial'
p5597
Nsg69
Vn
sS'block_loop.thisTrialN'
p5598
I0
sg39
F2.4167351851756393
sg34
g752
(S'\x07\xdf\t\x1c\r\x12%\x00\xe2\x90'
tRp5599
sa(dp5600
S'trial_loop.thisTrialN'
p5601
I142
sg3632
g3721
sS'block_loop.thisIndex'
p5602
g3626
sg38
S'right'
p5603
sg58
g62
sS'trial_loop.thisN'
p5604
I142
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5605
g59
(g98
S'\x8e\x00\x00\x00'
tRp5606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5607
I0
sg3641
g3729
sS'block_loop.thisRepN'
p5608
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5609
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5610
Nsg69
Vn
sS'block_loop.thisTrialN'
p5611
I0
sg39
F0.90022374477121048
sg34
g752
(S'\x07\xdf\t\x1c\r\x12,\x07\xdb\xb8'
tRp5612
sa(dp5613
S'trial_loop.thisTrialN'
p5614
I143
sg3632
g4753
sS'block_loop.thisIndex'
p5615
g3626
sg38
S'left'
p5616
sg58
g62
sS'trial_loop.thisN'
p5617
I143
sg33
g3896
sg63
g64
sS'trial_loop.thisIndex'
p5618
g59
(g98
S'\x8f\x00\x00\x00'
tRp5619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5620
I0
sg3641
g4760
sS'block_loop.thisRepN'
p5621
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5622
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p5623
Nsg69
Vn
sS'block_loop.thisTrialN'
p5624
I0
sg39
F0.91678536239305686
sg34
g752
(S'\x07\xdf\t\x1c\r\x122\x06\xc2x'
tRp5625
sa(dp5626
S'trial_loop.thisTrialN'
p5627
I144
sg3632
g3738
sS'block_loop.thisIndex'
p5628
g3626
sg38
S'right'
p5629
sg58
g62
sS'trial_loop.thisN'
p5630
I144
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5631
g59
(g98
S'\x90\x00\x00\x00'
tRp5632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5633
I0
sg3641
g3746
sS'block_loop.thisRepN'
p5634
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5635
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5636
Nsg69
Vn
sS'block_loop.thisTrialN'
p5637
I0
sg39
F0.96718609589333937
sg34
g752
(S'\x07\xdf\t\x1c\r\x128\x05\xe3\xd0'
tRp5638
sa(dp5639
S'trial_loop.thisTrialN'
p5640
I145
sg3632
g3821
sS'block_loop.thisIndex'
p5641
g3626
sg38
S'left'
p5642
sg58
g62
sS'trial_loop.thisN'
p5643
I145
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p5644
g59
(g98
S'\x91\x00\x00\x00'
tRp5645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5646
I0
sg3641
g3829
sS'block_loop.thisRepN'
p5647
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5648
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p5649
Nsg69
Vn
sS'block_loop.thisTrialN'
p5650
I0
sg39
F4.4667561683763779
sg34
g752
(S'\x07\xdf\t\x1c\r\x13\x02\x05\xfb@'
tRp5651
sa(dp5652
S'trial_loop.thisTrialN'
p5653
I146
sg3632
g3670
sS'block_loop.thisIndex'
p5654
g3626
sg38
S'left'
p5655
sg58
g62
sS'trial_loop.thisN'
p5656
I146
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5657
g59
(g98
S'\x92\x00\x00\x00'
tRp5658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5659
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5660
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5661
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5662
Nsg69
Vn
sS'block_loop.thisTrialN'
p5663
I0
sg39
F0.80014414545985346
sg34
g752
(S'\x07\xdf\t\x1c\r\x13\x0b\r\xa0H'
tRp5664
sa(dp5665
S'trial_loop.thisTrialN'
p5666
I147
sg3632
g3687
sS'block_loop.thisIndex'
p5667
g3626
sg38
S'right'
p5668
sg58
g62
sS'trial_loop.thisN'
p5669
I147
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5670
g59
(g98
S'\x93\x00\x00\x00'
tRp5671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5672
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5673
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5674
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5675
Nsg69
Vn
sS'block_loop.thisTrialN'
p5676
I0
sg39
F0.76678028765309136
sg34
g752
(S'\x07\xdf\t\x1c\r\x13\x11\x0b\x17\xd8'
tRp5677
sa(dp5678
S'trial_loop.thisTrialN'
p5679
I148
sg3632
g3855
sS'block_loop.thisIndex'
p5680
g3626
sg38
S'left'
p5681
sg58
g62
sS'trial_loop.thisN'
p5682
I148
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p5683
g59
(g98
S'\x94\x00\x00\x00'
tRp5684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5685
I0
sg3641
g3862
sS'block_loop.thisRepN'
p5686
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5687
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5688
Nsg69
Vn
sS'block_loop.thisTrialN'
p5689
I0
sg39
F1.6332282082621532
sg34
g752
(S'\x07\xdf\t\x1c\r\x13\x17\x08\x1a8'
tRp5690
sa(dp5691
S'trial_loop.thisTrialN'
p5692
I149
sg3632
g3721
sS'block_loop.thisIndex'
p5693
g3626
sg38
S'left'
p5694
sg58
g62
sS'trial_loop.thisN'
p5695
I149
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5696
g59
(g98
S'\x95\x00\x00\x00'
tRp5697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5698
I0
sg3641
g3729
sS'block_loop.thisRepN'
p5699
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5700
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5701
Nsg69
Vn
sS'block_loop.thisTrialN'
p5702
I0
sg39
F0.93391746075940318
sg34
g752
(S'\x07\xdf\t\x1c\r\x13\x1e\x02\xee\x00'
tRp5703
sa(dp5704
S'trial_loop.thisTrialN'
p5705
I150
sg3632
g4472
sS'block_loop.thisIndex'
p5706
g3626
sg38
S'right'
p5707
sg58
g62
sS'trial_loop.thisN'
p5708
I150
sg33
g3964
sg63
g64
sS'trial_loop.thisIndex'
p5709
g59
(g98
S'\x96\x00\x00\x00'
tRp5710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5711
I0
sg3641
g4479
sS'block_loop.thisRepN'
p5712
I1
sg3644
g3964
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5713
I1
sg3646
g3971
sg55
g11
sS'block_loop.thisTrial'
p5714
Nsg69
Vn
sS'block_loop.thisTrialN'
p5715
I0
sg39
F2.3834964853140264
sg34
g752
(S'\x07\xdf\t\x1c\r\x13$\x02M\xd8'
tRp5716
sa(dp5717
S'trial_loop.thisTrialN'
p5718
I151
sg3632
g3977
sS'block_loop.thisIndex'
p5719
g3626
sg38
S'left'
p5720
sg58
g62
sS'trial_loop.thisN'
p5721
I151
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5722
g59
(g98
S'\x97\x00\x00\x00'
tRp5723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5724
I0
sg3641
g3984
sS'block_loop.thisRepN'
p5725
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5726
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5727
Nsg69
Vn
sS'block_loop.thisTrialN'
p5728
I0
sg39
F1.0835117095393798
sg34
g752
(S'\x07\xdf\t\x1c\r\x13+\x08\xcd\xe8'
tRp5729
sa(dp5730
S'trial_loop.thisTrialN'
p5731
I152
sg3632
g4280
sS'block_loop.thisIndex'
p5732
g3626
sg38
S'right'
p5733
sg58
g62
sS'trial_loop.thisN'
p5734
I152
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5735
g59
(g98
S'\x98\x00\x00\x00'
tRp5736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5737
I0
sg3641
g4287
sS'block_loop.thisRepN'
p5738
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5739
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5740
Nsg69
Vn
sS'block_loop.thisTrialN'
p5741
I0
sg39
F1.0168478558371135
sg34
g752
(S'\x07\xdf\t\x1c\r\x131\n\x8f '
tRp5742
sa(dp5743
S'trial_loop.thisTrialN'
p5744
I153
sg3632
g3855
sS'block_loop.thisIndex'
p5745
g3626
sg38
S'left'
p5746
sg58
g62
sS'trial_loop.thisN'
p5747
I153
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p5748
g59
(g98
S'\x99\x00\x00\x00'
tRp5749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5750
I0
sg3641
g3862
sS'block_loop.thisRepN'
p5751
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5752
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5753
Nsg69
Vn
sS'block_loop.thisTrialN'
p5754
I0
sg39
F0.71659993477078388
sg34
g752
(S'\x07\xdf\t\x1c\r\x137\x0b^('
tRp5755
sa(dp5756
S'trial_loop.thisTrialN'
p5757
I154
sg3632
g3960
sS'block_loop.thisIndex'
p5758
g3626
sg38
S'left'
p5759
sg58
g62
sS'trial_loop.thisN'
p5760
I154
sg33
g3964
sg63
g64
sS'trial_loop.thisIndex'
p5761
g59
(g98
S'\x9a\x00\x00\x00'
tRp5762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5763
I0
sg3641
g3968
sS'block_loop.thisRepN'
p5764
I1
sg3644
g3964
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5765
I1
sg3646
g3971
sg55
g11
sS'block_loop.thisTrial'
p5766
Nsg69
Vn
sS'block_loop.thisTrialN'
p5767
I0
sg39
F1.2835580094251782
sg34
g752
(S'\x07\xdf\t\x1c\r\x14\x01\x07f\x88'
tRp5768
sa(dp5769
S'trial_loop.thisTrialN'
p5770
I155
sg3632
g3885
sS'block_loop.thisIndex'
p5771
g3626
sg38
S'right'
p5772
sg58
g62
sS'trial_loop.thisN'
p5773
I155
sg33
g3889
sg63
g64
sS'trial_loop.thisIndex'
p5774
g59
(g98
S'\x9b\x00\x00\x00'
tRp5775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5776
I0
sg3641
g3893
sS'block_loop.thisRepN'
p5777
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5778
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p5779
Nsg69
Vn
sS'block_loop.thisTrialN'
p5780
I0
sg39
F1.5335103980869462
sg34
g752
(S'\x07\xdf\t\x1c\r\x14\x07\x0c@\xb8'
tRp5781
sa(dp5782
S'trial_loop.thisTrialN'
p5783
I156
sg3632
g3721
sS'block_loop.thisIndex'
p5784
g3626
sg38
S'left'
p5785
sg58
g62
sS'trial_loop.thisN'
p5786
I156
sg33
g3732
sg63
g64
sS'trial_loop.thisIndex'
p5787
g59
(g98
S'\x9c\x00\x00\x00'
tRp5788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5789
I0
sg3641
g3729
sS'block_loop.thisRepN'
p5790
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5791
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5792
Nsg69
Vn
sS'block_loop.thisTrialN'
p5793
I0
sg39
F1.3835352586193039
sg34
g752
(S'\x07\xdf\t\x1c\r\x14\x0e\x05\xa98'
tRp5794
sa(dp5795
S'trial_loop.thisTrialN'
p5796
I157
sg3632
g3704
sS'block_loop.thisIndex'
p5797
g3626
sg38
S'right'
p5798
sg58
g62
sS'trial_loop.thisN'
p5799
I157
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5800
g59
(g98
S'\x9d\x00\x00\x00'
tRp5801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5802
I0
sg3641
g3712
sS'block_loop.thisRepN'
p5803
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5804
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5805
Nsg69
Vn
sS'block_loop.thisTrialN'
p5806
I0
sg39
F0.90008775311071076
sg34
g752
(S'\x07\xdf\t\x1c\r\x14\x14\x0b\xf2\x98'
tRp5807
sa(dp5808
S'trial_loop.thisTrialN'
p5809
I158
sg3632
g4606
sS'block_loop.thisIndex'
p5810
g3626
sg38
S'left'
p5811
sg58
g62
sS'trial_loop.thisN'
p5812
I158
sg33
g4453
sg63
g64
sS'trial_loop.thisIndex'
p5813
g59
(g98
S'\x9e\x00\x00\x00'
tRp5814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5815
I0
sg3641
g4613
sS'block_loop.thisRepN'
p5816
I1
sg3644
g4446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5817
I1
sg3646
g4453
sg55
g11
sS'block_loop.thisTrial'
p5818
Nsg69
Vn
sS'block_loop.thisTrialN'
p5819
I0
sg39
F0.76712696660433721
sg34
g752
(S'\x07\xdf\t\x1c\r\x14\x1a\x0b\x13\xf0'
tRp5820
sa(dp5821
S'trial_loop.thisTrialN'
p5822
I159
sg3632
g3804
sS'block_loop.thisIndex'
p5823
g3626
sg38
S'right'
p5824
sg58
g62
sS'trial_loop.thisN'
p5825
I159
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p5826
g59
(g98
S'\x9f\x00\x00\x00'
tRp5827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5828
I0
sg3641
g3812
sS'block_loop.thisRepN'
p5829
I1
sg3644
g3808
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5830
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p5831
Nsg69
Vn
sS'block_loop.thisTrialN'
p5832
I0
sg39
F1.7838046190408932
sg34
g752
(S'\x07\xdf\t\x1c\r\x14 \x08\x12h'
tRp5833
sa(dp5834
S'trial_loop.thisTrialN'
p5835
I160
sg3632
g3960
sS'block_loop.thisIndex'
p5836
g3626
sg38
S'left'
p5837
sg58
g62
sS'trial_loop.thisN'
p5838
I160
sg33
g3964
sg63
g64
sS'trial_loop.thisIndex'
p5839
g59
(g98
S'\xa0\x00\x00\x00'
tRp5840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5841
I0
sg3641
g3968
sS'block_loop.thisRepN'
p5842
I1
sg3644
g3964
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5843
I1
sg3646
g3971
sg55
g11
sS'block_loop.thisTrial'
p5844
Nsg69
Vn
sS'block_loop.thisTrialN'
p5845
I0
sg39
F1.350092713812046
sg34
g752
(S"\x07\xdf\t\x1c\r\x14'\x05Kx"
tRp5846
sa(dp5847
S'trial_loop.thisTrialN'
p5848
I161
sg3632
g5210
sS'block_loop.thisIndex'
p5849
g3626
sg38
S'left'
p5850
sg58
g62
sS'trial_loop.thisN'
p5851
I161
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5852
g59
(g98
S'\xa1\x00\x00\x00'
tRp5853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5854
I0
sg3641
g5217
sS'block_loop.thisRepN'
p5855
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5856
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5857
Nsg69
Vn
sS'block_loop.thisTrialN'
p5858
I0
sg39
F0.86686131245369324
sg34
g752
(S'\x07\xdf\t\x1c\r\x14-\x0b\x17\xd8'
tRp5859
sa(dp5860
S'trial_loop.thisTrialN'
p5861
I162
sg3632
g4280
sS'block_loop.thisIndex'
p5862
g3626
sg38
S'right'
p5863
sg58
g62
sS'trial_loop.thisN'
p5864
I162
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5865
g59
(g98
S'\xa2\x00\x00\x00'
tRp5866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5867
I0
sg3641
g4287
sS'block_loop.thisRepN'
p5868
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5869
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5870
Nsg69
Vn
sS'block_loop.thisTrialN'
p5871
I0
sg39
F1.0668417547421996
sg34
g752
(S'\x07\xdf\t\x1c\r\x143\t\x85\x80'
tRp5872
sa(dp5873
S'trial_loop.thisTrialN'
p5874
I163
sg3632
g4442
sS'block_loop.thisIndex'
p5875
g3626
sg38
S'right'
p5876
sg58
g62
sS'trial_loop.thisN'
p5877
I163
sg33
g4446
sg63
g64
sS'trial_loop.thisIndex'
p5878
g59
(g98
S'\xa3\x00\x00\x00'
tRp5879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5880
I0
sg3641
g4450
sS'block_loop.thisRepN'
p5881
I1
sg3644
g4446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5882
I1
sg3646
g4453
sg55
g11
sS'block_loop.thisTrial'
p5883
Nsg69
Vn
sS'block_loop.thisTrialN'
p5884
I0
sg39
F1.1334830857158522
sg34
g752
(S'\x07\xdf\t\x1c\r\x149\x0b\x088'
tRp5885
sa(dp5886
S'trial_loop.thisTrialN'
p5887
I164
sg3632
g4211
sS'block_loop.thisIndex'
p5888
g3626
sg38
S'left'
p5889
sg58
g62
sS'trial_loop.thisN'
p5890
I164
sg33
g4110
sg63
g64
sS'trial_loop.thisIndex'
p5891
g59
(g98
S'\xa4\x00\x00\x00'
tRp5892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5893
I0
sg3641
g4218
sS'block_loop.thisRepN'
p5894
I1
sg3644
g4110
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5895
I1
sg3646
g4117
sg55
g11
sS'block_loop.thisTrial'
p5896
Nsg69
Vn
sS'block_loop.thisTrialN'
p5897
I0
sg39
F0.96698367643875827
sg34
g752
(S'\x07\xdf\t\x1c\r\x15\x03\r\x84\xf0'
tRp5898
sa(dp5899
S'trial_loop.thisTrialN'
p5900
I165
sg3632
g3772
sS'block_loop.thisIndex'
p5901
g3626
sg38
S'right'
p5902
sg58
g62
sS'trial_loop.thisN'
p5903
I165
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5904
g59
(g98
S'\xa5\x00\x00\x00'
tRp5905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5906
I0
sg3641
g3779
sS'block_loop.thisRepN'
p5907
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5908
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5909
Nsg69
Vn
sS'block_loop.thisTrialN'
p5910
I0
sg39
F0.88345400573962252
sg34
g752
(S'\x07\xdf\t\x1c\r\x15\t\r\x9c`'
tRp5911
sa(dp5912
S'trial_loop.thisTrialN'
p5913
I166
sg3632
g3804
sS'block_loop.thisIndex'
p5914
g3626
sg38
S'right'
p5915
sg58
g62
sS'trial_loop.thisN'
p5916
I166
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p5917
g59
(g98
S'\xa6\x00\x00\x00'
tRp5918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5919
I0
sg3641
g3812
sS'block_loop.thisRepN'
p5920
I1
sg3644
g3808
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5921
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p5922
Nsg69
Vn
sS'block_loop.thisTrialN'
p5923
I0
sg39
F0.93353457438388432
sg34
g752
(S'\x07\xdf\t\x1c\r\x15\x0f\x0cD\xa0'
tRp5924
sa(dp5925
S'trial_loop.thisTrialN'
p5926
I167
sg3632
g4349
sS'block_loop.thisIndex'
p5927
g3626
sg38
S'left'
p5928
sg58
g62
sS'trial_loop.thisN'
p5929
I167
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5930
g59
(g98
S'\xa7\x00\x00\x00'
tRp5931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5932
I0
sg3641
g4356
sS'block_loop.thisRepN'
p5933
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5934
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5935
Nsg69
Vn
sS'block_loop.thisTrialN'
p5936
I0
sg39
F2.2333705290966464
sg34
g752
(S'\x07\xdf\t\x1c\r\x15\x15\x0b\xe2\xf8'
tRp5937
sa(dp5938
S'trial_loop.thisTrialN'
p5939
I168
sg3632
g4539
sS'block_loop.thisIndex'
p5940
g3626
sg38
S'left'
p5941
sg58
g62
sS'trial_loop.thisN'
p5942
I168
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p5943
g59
(g98
S'\xa8\x00\x00\x00'
tRp5944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5945
I0
sg3641
g4546
sS'block_loop.thisRepN'
p5946
I1
sg3644
g3808
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5947
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p5948
Nsg69
Vn
sS'block_loop.thisTrialN'
p5949
I0
sg39
F1.250049321923143
sg34
g752
(S'\x07\xdf\t\x1c\r\x15\x1d\x00\x80\xe8'
tRp5950
sa(dp5951
S'trial_loop.thisTrialN'
p5952
I169
sg3632
g4123
sS'block_loop.thisIndex'
p5953
g3626
sg38
S'right'
p5954
sg58
g62
sS'trial_loop.thisN'
p5955
I169
sg33
g3906
sg63
g64
sS'trial_loop.thisIndex'
p5956
g59
(g98
S'\xa9\x00\x00\x00'
tRp5957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5958
I0
sg3641
g4130
sS'block_loop.thisRepN'
p5959
I1
sg3644
g3906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5960
I1
sg3646
g3913
sg55
g11
sS'block_loop.thisTrial'
p5961
Nsg69
Vn
sS'block_loop.thisTrialN'
p5962
I0
sg39
F0.83390001277257397
sg34
g752
(S'\x07\xdf\t\x1c\r\x15#\x04\xe2\x00'
tRp5963
sa(dp5964
S'trial_loop.thisTrialN'
p5965
I170
sg3632
g3804
sS'block_loop.thisIndex'
p5966
g3626
sg38
S'right'
p5967
sg58
g62
sS'trial_loop.thisN'
p5968
I170
sg33
g3815
sg63
g64
sS'trial_loop.thisIndex'
p5969
g59
(g98
S'\xaa\x00\x00\x00'
tRp5970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5971
I0
sg3641
g3812
sS'block_loop.thisRepN'
p5972
I1
sg3644
g3808
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5973
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p5974
Nsg69
Vn
sS'block_loop.thisTrialN'
p5975
I0
sg39
F1.4001858267620264
sg34
g752
(S'\x07\xdf\t\x1c\r\x15)\x02\xd2\xa8'
tRp5976
sa(dp5977
S'trial_loop.thisTrialN'
p5978
I171
sg3632
g4106
sS'block_loop.thisIndex'
p5979
g3626
sg38
S'right'
p5980
sg58
g62
sS'trial_loop.thisN'
p5981
I171
sg33
g4110
sg63
g64
sS'trial_loop.thisIndex'
p5982
g59
(g98
S'\xab\x00\x00\x00'
tRp5983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5984
I0
sg3641
g4114
sS'block_loop.thisRepN'
p5985
I1
sg3644
g4110
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5986
I1
sg3646
g4117
sg55
g11
sS'block_loop.thisTrial'
p5987
Nsg69
Vn
sS'block_loop.thisTrialN'
p5988
I0
sg39
F0.75020869160653092
sg34
g752
(S'\x07\xdf\t\x1c\r\x15/\t\x95 '
tRp5989
sa(dp5990
S'trial_loop.thisTrialN'
p5991
I172
sg3632
g4321
sS'block_loop.thisIndex'
p5992
g3626
sg38
S'left'
p5993
sg58
g62
sS'trial_loop.thisN'
p5994
I172
sg33
g4157
sg63
g64
sS'trial_loop.thisIndex'
p5995
g59
(g98
S'\xac\x00\x00\x00'
tRp5996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5997
I0
sg3641
g4328
sS'block_loop.thisRepN'
p5998
I1
sg3644
g4157
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5999
I1
sg3646
g4164
sg55
g11
sS'block_loop.thisTrial'
p6000
Nsg69
Vn
sS'block_loop.thisTrialN'
p6001
I0
sg39
F1.2668606852384983
sg34
g752
(S'\x07\xdf\t\x1c\r\x155\x06\x1a\x80'
tRp6002
sa(dp6003
S'trial_loop.thisTrialN'
p6004
I173
sg3632
g4442
sS'block_loop.thisIndex'
p6005
g3626
sg38
S'right'
p6006
sg58
g62
sS'trial_loop.thisN'
p6007
I173
sg33
g4446
sg63
g64
sS'trial_loop.thisIndex'
p6008
g59
(g98
S'\xad\x00\x00\x00'
tRp6009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6010
I0
sg3641
g4450
sS'block_loop.thisRepN'
p6011
I1
sg3644
g4446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6012
I1
sg3646
g4453
sg55
g11
sS'block_loop.thisTrial'
p6013
Nsg69
Vn
sS'block_loop.thisTrialN'
p6014
I0
sg39
F0.75017191398728755
sg34
g752
(S'\x07\xdf\t\x1c\r\x15;\n\xb60'
tRp6015
sa(dp6016
S'trial_loop.thisTrialN'
p6017
I174
sg3632
g3755
sS'block_loop.thisIndex'
p6018
g3626
sg38
S'left'
p6019
sg58
g62
sS'trial_loop.thisN'
p6020
I174
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p6021
g59
(g98
S'\xae\x00\x00\x00'
tRp6022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6023
I0
sg3641
g3763
sS'block_loop.thisRepN'
p6024
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6025
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p6026
Nsg69
Vn
sS'block_loop.thisTrialN'
p6027
I0
sg39
F0.90060178448402439
sg34
g752
(S'\x07\xdf\t\x1c\r\x16\x05\x07z\x10'
tRp6028
sa(dp6029
S'trial_loop.thisTrialN'
p6030
I175
sg3632
g3653
sS'block_loop.thisIndex'
p6031
g3626
sg38
S'right'
p6032
sg58
g62
sS'trial_loop.thisN'
p6033
I175
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p6034
g59
(g98
S'\xaf\x00\x00\x00'
tRp6035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6036
I0
sg3641
g3661
sS'block_loop.thisRepN'
p6037
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6038
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p6039
Nsg69
Vn
sS'block_loop.thisTrialN'
p6040
I0
sg39
F0.94993311605139752
sg34
g752
(S'\x07\xdf\t\x1c\r\x16\x0b\x06`\xd0'
tRp6041
sa(dp6042
S'trial_loop.thisTrialN'
p6043
I176
sg3632
g4123
sS'block_loop.thisIndex'
p6044
g3626
sg38
S'right'
p6045
sg58
g62
sS'trial_loop.thisN'
p6046
I176
sg33
g3906
sg63
g64
sS'trial_loop.thisIndex'
p6047
g59
(g98
S'\xb0\x00\x00\x00'
tRp6048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6049
I0
sg3641
g4130
sS'block_loop.thisRepN'
p6050
I1
sg3644
g3906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6051
I1
sg3646
g3913
sg55
g11
sS'block_loop.thisTrial'
p6052
Nsg69
Vn
sS'block_loop.thisTrialN'
p6053
I0
sg39
F0.73348228744362132
sg34
g752
(S'\x07\xdf\t\x1c\r\x16\x11\x069\xc0'
tRp6054
sa(dp6055
S'trial_loop.thisTrialN'
p6056
I177
sg3632
g4280
sS'block_loop.thisIndex'
p6057
g3626
sg38
S'right'
p6058
sg58
g62
sS'trial_loop.thisN'
p6059
I177
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p6060
g59
(g98
S'\xb1\x00\x00\x00'
tRp6061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6062
I0
sg3641
g4287
sS'block_loop.thisRepN'
p6063
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6064
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p6065
Nsg69
Vn
sS'block_loop.thisTrialN'
p6066
I0
sg39
F0.95007338417963183
sg34
g752
(S'\x07\xdf\t\x1c\r\x16\x17\x02\x84\x88'
tRp6067
sa(dp6068
S'trial_loop.thisTrialN'
p6069
I178
sg3632
g4138
sS'block_loop.thisIndex'
p6070
g3626
sg38
S'right'
p6071
sg58
g62
sS'trial_loop.thisN'
p6072
I178
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p6073
g59
(g98
S'\xb2\x00\x00\x00'
tRp6074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6075
I0
sg3641
g4145
sS'block_loop.thisRepN'
p6076
I1
sg3644
g3842
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6077
I1
sg3646
g3849
sg55
g11
sS'block_loop.thisTrial'
p6078
Nsg69
Vn
sS'block_loop.thisTrialN'
p6079
I0
sg39
F1.1167603878238879
sg34
g752
(S'\x07\xdf\t\x1c\r\x16\x1d\x02]x'
tRp6080
sa(dp6081
S'trial_loop.thisTrialN'
p6082
I179
sg3632
g4196
sS'block_loop.thisIndex'
p6083
g3626
sg38
S'right'
p6084
sg58
g62
sS'trial_loop.thisN'
p6085
I179
sg33
g4032
sg63
g64
sS'trial_loop.thisIndex'
p6086
g59
(g98
S'\xb3\x00\x00\x00'
tRp6087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6088
I0
sg3641
g4203
sS'block_loop.thisRepN'
p6089
I1
sg3644
g4032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6090
I1
sg3646
g4026
sg55
g11
sS'block_loop.thisTrial'
p6091
Nsg69
Vn
sS'block_loop.thisTrialN'
p6092
I0
sg39
F1.2172388389899425
sg34
g752
(S'\x07\xdf\t\x1c\r\x16#\x04\x9b\xb0'
tRp6093
sa(dp6094
S'trial_loop.thisTrialN'
p6095
I180
sg3632
g5210
sS'block_loop.thisIndex'
p6096
g3626
sg38
S'left'
p6097
sg58
g62
sS'trial_loop.thisN'
p6098
I180
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p6099
g59
(g98
S'\xb4\x00\x00\x00'
tRp6100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6101
I0
sg3641
g5217
sS'block_loop.thisRepN'
p6102
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6103
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p6104
Nsg69
Vn
sS'block_loop.thisTrialN'
p6105
I0
sg39
F0.73353560073519475
sg34
g752
(S'\x07\xdf\t\x1c\r\x16)\x08\x7f\xc8'
tRp6106
sa(dp6107
S'trial_loop.thisTrialN'
p6108
I181
sg3632
g3633
sS'block_loop.thisIndex'
p6109
g3626
sg38
S'right'
p6110
sg58
g62
sS'trial_loop.thisN'
p6111
I181
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p6112
g59
(g98
S'\xb5\x00\x00\x00'
tRp6113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6114
I0
sg3641
g3642
sS'block_loop.thisRepN'
p6115
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6116
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6117
Nsg69
Vn
sS'block_loop.thisTrialN'
p6118
I0
sg39
F1.5835077181673114
sg34
g752
(S'\x07\xdf\t\x1c\r\x16/\x05\x05('
tRp6119
sa(dp6120
S'trial_loop.thisTrialN'
p6121
I182
sg3632
g4005
sS'block_loop.thisIndex'
p6122
g3626
sg38
S'right'
p6123
sg58
g62
sS'trial_loop.thisN'
p6124
I182
sg33
g4009
sg63
g64
sS'trial_loop.thisIndex'
p6125
g59
(g98
S'\xb6\x00\x00\x00'
tRp6126
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6127
I0
sg3641
g4013
sS'block_loop.thisRepN'
p6128
I1
sg3644
g4009
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6129
I1
sg3646
g4016
sg55
g11
sS'block_loop.thisTrial'
p6130
Nsg69
Vn
sS'block_loop.thisTrialN'
p6131
I0
sg39
F1.050123618415455
sg34
g752
(S'\x07\xdf\t\x1c\r\x165\x0eg\x80'
tRp6132
sa(dp6133
S'trial_loop.thisTrialN'
p6134
I183
sg3632
g4123
sS'block_loop.thisIndex'
p6135
g3626
sg38
S'right'
p6136
sg58
g62
sS'trial_loop.thisN'
p6137
I183
sg33
g3906
sg63
g64
sS'trial_loop.thisIndex'
p6138
g59
(g98
S'\xb7\x00\x00\x00'
tRp6139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6140
I0
sg3641
g4130
sS'block_loop.thisRepN'
p6141
I1
sg3644
g3906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6142
I1
sg3646
g3913
sg55
g11
sS'block_loop.thisTrial'
p6143
Nsg69
Vn
sS'block_loop.thisTrialN'
p6144
I0
sg39
F1.0501983140438824
sg34
g752
(S'\x07\xdf\t\x1c\r\x17\x00\x00m`'
tRp6145
sa(dp6146
S'trial_loop.thisTrialN'
p6147
I184
sg3632
g3633
sS'block_loop.thisIndex'
p6148
g3626
sg38
S'right'
p6149
sg58
g62
sS'trial_loop.thisN'
p6150
I184
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p6151
g59
(g98
S'\xb8\x00\x00\x00'
tRp6152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6153
I0
sg3641
g3642
sS'block_loop.thisRepN'
p6154
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6155
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6156
Nsg69
Vn
sS'block_loop.thisTrialN'
p6157
I0
sg39
F2.3835093147172302
sg34
g752
(S'\x07\xdf\t\x1c\r\x17\x06\x01\xb5\x80'
tRp6158
sa(dp6159
S'trial_loop.thisTrialN'
p6160
I185
sg3632
g4005
sS'block_loop.thisIndex'
p6161
g3626
sg38
S'right'
p6162
sg58
g62
sS'trial_loop.thisN'
p6163
I185
sg33
g4009
sg63
g64
sS'trial_loop.thisIndex'
p6164
g59
(g98
S'\xb9\x00\x00\x00'
tRp6165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6166
I0
sg3641
g4013
sS'block_loop.thisRepN'
p6167
I1
sg3644
g4009
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6168
I1
sg3646
g4016
sg55
g11
sS'block_loop.thisTrial'
p6169
Nsg69
Vn
sS'block_loop.thisTrialN'
p6170
I0
sg39
F1.0001870241721917
sg34
g752
(S'\x07\xdf\t\x1c\r\x17\r\x07\xf7\x10'
tRp6171
sa(dp6172
S'trial_loop.thisTrialN'
p6173
I186
sg3632
g3885
sS'block_loop.thisIndex'
p6174
g3626
sg38
S'right'
p6175
sg58
g62
sS'trial_loop.thisN'
p6176
I186
sg33
g3889
sg63
g64
sS'trial_loop.thisIndex'
p6177
g59
(g98
S'\xba\x00\x00\x00'
tRp6178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6179
I0
sg3641
g3893
sS'block_loop.thisRepN'
p6180
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6181
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p6182
Nsg69
Vn
sS'block_loop.thisTrialN'
p6183
I0
sg39
F1.1169189022130013
sg34
g752
(S'\x07\xdf\t\x1c\r\x17\x13\x08\x87\x98'
tRp6184
sa(dp6185
S'trial_loop.thisTrialN'
p6186
I187
sg3632
g4211
sS'block_loop.thisIndex'
p6187
g3626
sg38
S'left'
p6188
sg58
g62
sS'trial_loop.thisN'
p6189
I187
sg33
g4110
sg63
g64
sS'trial_loop.thisIndex'
p6190
g59
(g98
S'\xbb\x00\x00\x00'
tRp6191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6192
I0
sg3641
g4218
sS'block_loop.thisRepN'
p6193
I1
sg3644
g4110
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6194
I1
sg3646
g4117
sg55
g11
sS'block_loop.thisTrial'
p6195
Nsg69
Vn
sS'block_loop.thisTrialN'
p6196
I0
sg39
F1.4335094857742661
sg34
g752
(S'\x07\xdf\t\x1c\r\x17\x19\n\xc1\xe8'
tRp6197
sa(dp6198
S'trial_loop.thisTrialN'
p6199
I188
sg3632
g3804
sS'block_loop.thisIndex'
p6200
g3626
sg38
S'right'
p6201
sg58
g62
sS'trial_loop.thisN'
p6202
I188
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p6203
g59
(g98
S'\xbc\x00\x00\x00'
tRp6204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6205
I0
sg3641
g3812
sS'block_loop.thisRepN'
p6206
I1
sg3644
g3808
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6207
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p6208
Nsg69
Vn
sS'block_loop.thisTrialN'
p6209
I0
sg39
F1.3002023054159508
sg34
g752
(S'\x07\xdf\t\x1c\r\x17 \x02\xbb8'
tRp6210
sa(dp6211
S'trial_loop.thisTrialN'
p6212
I189
sg3632
g4138
sS'block_loop.thisIndex'
p6213
g3626
sg38
S'right'
p6214
sg58
g62
sS'trial_loop.thisN'
p6215
I189
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p6216
g59
(g98
S'\xbd\x00\x00\x00'
tRp6217
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6218
I0
sg3641
g4145
sS'block_loop.thisRepN'
p6219
I1
sg3644
g3842
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6220
I1
sg3646
g3849
sg55
g11
sS'block_loop.thisTrial'
p6221
Nsg69
Vn
sS'block_loop.thisTrialN'
p6222
I0
sg39
F2.1502588118037238
sg34
g752
(S'\x07\xdf\t\x1c\r\x17&\x07\x95h'
tRp6223
sa(dp6224
S'trial_loop.thisTrialN'
p6225
I190
sg3632
g4211
sS'block_loop.thisIndex'
p6226
g3626
sg38
S'left'
p6227
sg58
g62
sS'trial_loop.thisN'
p6228
I190
sg33
g4110
sg63
g64
sS'trial_loop.thisIndex'
p6229
g59
(g98
S'\xbe\x00\x00\x00'
tRp6230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6231
I0
sg3641
g4218
sS'block_loop.thisRepN'
p6232
I1
sg3644
g4110
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6233
I1
sg3646
g4117
sg55
g11
sS'block_loop.thisTrial'
p6234
Nsg69
Vn
sS'block_loop.thisTrialN'
p6235
I0
sg39
F1.1001349082907836
sg34
g752
(S'\x07\xdf\t\x1c\r\x17-\n\x83h'
tRp6236
sa(dp6237
S'trial_loop.thisTrialN'
p6238
I191
sg3632
g3670
sS'block_loop.thisIndex'
p6239
g3626
sg38
S'left'
p6240
sg58
g62
sS'trial_loop.thisN'
p6241
I191
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p6242
g59
(g98
S'\xbf\x00\x00\x00'
tRp6243
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6244
I0
sg3641
g3678
sS'block_loop.thisRepN'
p6245
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6246
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p6247
Nsg69
Vn
sS'block_loop.thisTrialN'
p6248
I0
sg39
F0.98351336310406623
sg34
g752
(S'\x07\xdf\t\x1c\r\x173\x0c\x83 '
tRp6249
sa(dp6250
S'trial_loop.thisTrialN'
p6251
I192
sg3632
g4606
sS'block_loop.thisIndex'
p6252
g3626
sg38
S'left'
p6253
sg58
g62
sS'trial_loop.thisN'
p6254
I192
sg33
g4446
sg63
g64
sS'trial_loop.thisIndex'
p6255
g59
(g98
S'\xc0\x00\x00\x00'
tRp6256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6257
I0
sg3641
g4613
sS'block_loop.thisRepN'
p6258
I1
sg3644
g4446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6259
I1
sg3646
g4453
sg55
g11
sS'block_loop.thisTrial'
p6260
Nsg69
Vn
sS'block_loop.thisTrialN'
p6261
I0
sg39
F0.76680594645586098
sg34
g752
(S'\x07\xdf\t\x1c\r\x179\x0c\xd5('
tRp6262
sa(dp6263
S'trial_loop.thisTrialN'
p6264
I193
sg3632
g4349
sS'block_loop.thisIndex'
p6265
g3626
sg38
S'left'
p6266
sg58
g62
sS'trial_loop.thisN'
p6267
I193
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p6268
g59
(g98
S'\xc1\x00\x00\x00'
tRp6269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6270
I0
sg3641
g4356
sS'block_loop.thisRepN'
p6271
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6272
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6273
Nsg69
Vn
sS'block_loop.thisTrialN'
p6274
I0
sg39
F2.866617553816468
sg34
g752
(S'\x07\xdf\t\x1c\r\x18\x03\t\xd7\x88'
tRp6275
sa(dp6276
S'trial_loop.thisTrialN'
p6277
I194
sg3632
g3653
sS'block_loop.thisIndex'
p6278
g3626
sg38
S'right'
p6279
sg58
g62
sS'trial_loop.thisN'
p6280
I194
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p6281
g59
(g98
S'\xc2\x00\x00\x00'
tRp6282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6283
I0
sg3641
g3661
sS'block_loop.thisRepN'
p6284
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6285
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p6286
Nsg69
Vn
sS'block_loop.thisTrialN'
p6287
I0
sg39
F1.0836477011980605
sg34
g752
(S'\x07\xdf\t\x1c\r\x18\x0b\x085\x90'
tRp6288
sa(dp6289
S'trial_loop.thisTrialN'
p6290
I195
sg3632
g3885
sS'block_loop.thisIndex'
p6291
g3626
sg38
S'right'
p6292
sg58
g62
sS'trial_loop.thisN'
p6293
I195
sg33
g3889
sg63
g64
sS'trial_loop.thisIndex'
p6294
g59
(g98
S'\xc3\x00\x00\x00'
tRp6295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6296
I0
sg3641
g3893
sS'block_loop.thisRepN'
p6297
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6298
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p6299
Nsg69
Vn
sS'block_loop.thisTrialN'
p6300
I0
sg39
F0.98346176039922284
sg34
g752
(S'\x07\xdf\t\x1c\r\x18\x11\t\xf6\xc8'
tRp6301
sa(dp6302
S'trial_loop.thisTrialN'
p6303
I196
sg3632
g4673
sS'block_loop.thisIndex'
p6304
g3626
sg38
S'left'
p6305
sg58
g62
sS'trial_loop.thisN'
p6306
I196
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p6307
g59
(g98
S'\xc4\x00\x00\x00'
tRp6308
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6309
I0
sg3641
g4680
sS'block_loop.thisRepN'
p6310
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6311
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p6312
Nsg69
Vn
sS'block_loop.thisTrialN'
p6313
I0
sg39
F1.0834532644839783
sg34
g752
(S'\x07\xdf\t\x1c\r\x18\x17\nL\xb8'
tRp6314
sa(dp6315
S'trial_loop.thisTrialN'
p6316
I197
sg3632
g4153
sS'block_loop.thisIndex'
p6317
g3626
sg38
S'right'
p6318
sg58
g62
sS'trial_loop.thisN'
p6319
I197
sg33
g4157
sg63
g64
sS'trial_loop.thisIndex'
p6320
g59
(g98
S'\xc5\x00\x00\x00'
tRp6321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6322
I0
sg3641
g4161
sS'block_loop.thisRepN'
p6323
I1
sg3644
g4157
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6324
I1
sg3646
g4164
sg55
g11
sS'block_loop.thisTrial'
p6325
Nsg69
Vn
sS'block_loop.thisTrialN'
p6326
I0
sg39
F1.0334756161537371
sg34
g752
(S'\x07\xdf\t\x1c\r\x18\x1d\x0c\r\xf0'
tRp6327
sa(dp6328
S'trial_loop.thisTrialN'
p6329
I198
sg3632
g4106
sS'block_loop.thisIndex'
p6330
g3626
sg38
S'right'
p6331
sg58
g62
sS'trial_loop.thisN'
p6332
I198
sg33
g4110
sg63
g64
sS'trial_loop.thisIndex'
p6333
g59
(g98
S'\xc6\x00\x00\x00'
tRp6334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6335
I0
sg3641
g4114
sS'block_loop.thisRepN'
p6336
I1
sg3644
g4110
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6337
I1
sg3646
g4117
sg55
g11
sS'block_loop.thisTrial'
p6338
Nsg69
Vn
sS'block_loop.thisTrialN'
p6339
I0
sg39
F1.1667981917962607
sg34
g752
(S'\x07\xdf\t\x1c\r\x18#\r\x1bx'
tRp6340
sa(dp6341
S'trial_loop.thisTrialN'
p6342
I199
sg3632
g3755
sS'block_loop.thisIndex'
p6343
g3626
sg38
S'left'
p6344
sg58
g62
sS'trial_loop.thisN'
p6345
I199
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p6346
g59
(g98
S'\xc7\x00\x00\x00'
tRp6347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6348
I0
sg3641
g3763
sS'block_loop.thisRepN'
p6349
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6350
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p6351
Nsg69
Vn
sS'block_loop.thisTrialN'
p6352
I0
sg39
F1.3504584943184454
sg34
g752
(S'\x07\xdf\t\x1c\r\x18*\x00\xcb '
tRp6353
sa(dp6354
S'block_loop.thisRepN'
p6355
I1
sg55
g11
sg41
F2.3335302408959251
sg56
Vr
sS'block_loop.thisIndex'
p6356
g3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6357
I1
sg40
S'space'
p6358
sg63
g64
sS'block_loop.thisTrial'
p6359
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6360
I0
sg69
Vn
sa(dp6361
S'block_loop.thisRepN'
p6362
I2
sg56
Vr
sS'block_loop.thisIndex'
p6363
g59
(g98
S'\x00\x00\x00\x00'
tRp6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6365
I2
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p6366
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6367
I0
sg69
Vn
sa(dp6368
S'trial_loop.thisTrialN'
p6369
I0
sS'img_left'
p6370
S'26-walkers_smoky_bacon.png'
p6371
sS'block_loop.thisIndex'
p6372
g6364
sg38
S'right'
p6373
sg58
g62
sS'trial_loop.thisN'
p6374
I0
sg33
S'44-crunch.png'
p6375
sg63
g64
sS'trial_loop.thisIndex'
p6376
g59
(g98
S'\x00\x00\x00\x00'
tRp6377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6378
I0
sS'img_right'
p6379
S'44-crunch.png'
p6380
sS'block_loop.thisRepN'
p6381
I2
sS'img_correct'
p6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6383
I2
sS'img_wrong'
p6384
S'26-walkers_smoky_bacon.png'
p6385
sg55
g11
sS'block_loop.thisTrial'
p6386
Nsg69
Vn
sS'block_loop.thisTrialN'
p6387
I0
sg39
F1.1167561113579723
sg34
g752
(S'\x07\xdf\t\x1c\r\x187\x0c_\xf8'
tRp6388
sa(dp6389
S'trial_loop.thisTrialN'
p6390
I1
sg6370
S'30-spaghetti_hoops.png'
p6391
sS'block_loop.thisIndex'
p6392
g6364
sg38
S'right'
p6393
sg58
g62
sS'trial_loop.thisN'
p6394
I1
sg33
S'30-spaghetti_hoops.png'
p6395
sg63
g64
sS'trial_loop.thisIndex'
p6396
g59
(g98
S'\x01\x00\x00\x00'
tRp6397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6398
I0
sg6379
S'19-caramello_redo.png'
p6399
sS'block_loop.thisRepN'
p6400
I2
sg6382
S'19-caramello_redo.png'
p6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6402
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p6403
Nsg69
Vn
sS'block_loop.thisTrialN'
p6404
I0
sg39
F1.6834322242648341
sg34
g752
(S'\x07\xdf\t\x1c\r\x19\x01\x0e\x9e0'
tRp6405
sa(dp6406
S'trial_loop.thisTrialN'
p6407
I2
sg6370
S'34-hula_hoops_bbq_beef_redo.png'
p6408
sS'block_loop.thisIndex'
p6409
g6364
sg38
S'right'
p6410
sg58
g62
sS'trial_loop.thisN'
p6411
I2
sg33
S'36-fig_rolls.png'
p6412
sg63
g64
sS'trial_loop.thisIndex'
p6413
g59
(g98
S'\x02\x00\x00\x00'
tRp6414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6415
I0
sg6379
S'36-fig_rolls.png'
p6416
sS'block_loop.thisRepN'
p6417
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6418
I2
sg6384
S'34-hula_hoops_bbq_beef_redo.png'
p6419
sg55
g11
sS'block_loop.thisTrial'
p6420
Nsg69
Vn
sS'block_loop.thisTrialN'
p6421
I0
sg39
F1.0001881645621324
sg34
g752
(S'\x07\xdf\t\x1c\r\x19\x08\n)\x90'
tRp6422
sa(dp6423
S'trial_loop.thisTrialN'
p6424
I3
sg6370
S'45-chewy_nougat_redo.png'
p6425
sS'block_loop.thisIndex'
p6426
g6364
sg38
S'right'
p6427
sg58
g62
sS'trial_loop.thisN'
p6428
I3
sg33
S'45-chewy_nougat_redo.png'
p6429
sg63
g64
sS'trial_loop.thisIndex'
p6430
g59
(g98
S'\x03\x00\x00\x00'
tRp6431
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6432
I0
sg6379
S'41-peanuts_redo.png'
p6433
sS'block_loop.thisRepN'
p6434
I2
sg6382
S'41-peanuts_redo.png'
p6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6436
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p6437
Nsg69
Vn
sS'block_loop.thisTrialN'
p6438
I0
sg39
F1.3171830168375891
sg34
g752
(S'\x07\xdf\t\x1c\r\x19\x0e\n\xba\x18'
tRp6439
sa(dp6440
S'trial_loop.thisTrialN'
p6441
I4
sg6370
S'7-olives.png'
p6442
sS'block_loop.thisIndex'
p6443
g6364
sg38
S'right'
p6444
sg58
g62
sS'trial_loop.thisN'
p6445
I4
sg33
S'22-daim.png'
p6446
sg63
g64
sS'trial_loop.thisIndex'
p6447
g59
(g98
S'\x04\x00\x00\x00'
tRp6448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6449
I0
sg6379
S'22-daim.png'
p6450
sS'block_loop.thisRepN'
p6451
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6452
I2
sg6384
S'7-olives.png'
p6453
sg55
g11
sS'block_loop.thisTrial'
p6454
Nsg69
Vn
sS'block_loop.thisTrialN'
p6455
I0
sg39
F1.3668844053772773
sg34
g752
(S'\x07\xdf\t\x1c\r\x19\x15\x00\xcb '
tRp6456
sa(dp6457
S'trial_loop.thisTrialN'
p6458
I5
sg6370
S'46-pistachios.png'
p6459
sS'block_loop.thisIndex'
p6460
g6364
sg38
S'left'
p6461
sg58
g62
sS'trial_loop.thisN'
p6462
I5
sg33
S'46-pistachios.png'
p6463
sg63
g64
sS'trial_loop.thisIndex'
p6464
g59
(g98
S'\x05\x00\x00\x00'
tRp6465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6466
I0
sg6379
S'29-beans.png'
p6467
sS'block_loop.thisRepN'
p6468
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6469
I2
sg6384
S'29-beans.png'
p6470
sg55
g11
sS'block_loop.thisTrial'
p6471
Nsg69
Vn
sS'block_loop.thisTrialN'
p6472
I0
sg39
F0.96676215543084254
sg34
g752
(S'\x07\xdf\t\x1c\r\x19\x1b\x06\xd6\x00'
tRp6473
sa(dp6474
S'trial_loop.thisTrialN'
p6475
I6
sg6370
g6408
sS'block_loop.thisIndex'
p6476
g6364
sg38
S'right'
p6477
sg58
g62
sS'trial_loop.thisN'
p6478
I6
sg33
g6419
sg63
g64
sS'trial_loop.thisIndex'
p6479
g59
(g98
S'\x06\x00\x00\x00'
tRp6480
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6481
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6482
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6483
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6484
Nsg69
Vn
sS'block_loop.thisTrialN'
p6485
I0
sg39
F0.76684386446686403
sg34
g752
(S'\x07\xdf\t\x1c\r\x19!\x06\xedp'
tRp6486
sa(dp6487
S'trial_loop.thisTrialN'
p6488
I7
sg6370
S'13-mccoys_steak_crisps.png'
p6489
sS'block_loop.thisIndex'
p6490
g6364
sg38
S'right'
p6491
sg58
g62
sS'trial_loop.thisN'
p6492
I7
sg33
S'3-ellas_strawberries_apples.png'
p6493
sg63
g64
sS'trial_loop.thisIndex'
p6494
g59
(g98
S'\x07\x00\x00\x00'
tRp6495
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6496
I0
sg6379
S'3-ellas_strawberries_apples.png'
p6497
sS'block_loop.thisRepN'
p6498
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6499
I2
sg6384
S'13-mccoys_steak_crisps.png'
p6500
sg55
g11
sS'block_loop.thisTrial'
p6501
Nsg69
Vn
sS'block_loop.thisTrialN'
p6502
I0
sg39
F0.76680166998812638
sg34
g752
(S"\x07\xdf\t\x1c\r\x19'\x03\xeb\xe8"
tRp6503
sa(dp6504
S'trial_loop.thisTrialN'
p6505
I8
sg6370
g6425
sS'block_loop.thisIndex'
p6506
g6364
sg38
S'right'
p6507
sg58
g62
sS'trial_loop.thisN'
p6508
I8
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p6509
g59
(g98
S'\x08\x00\x00\x00'
tRp6510
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6511
I0
sg6379
g6433
sS'block_loop.thisRepN'
p6512
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6513
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p6514
Nsg69
Vn
sS'block_loop.thisTrialN'
p6515
I0
sg39
F0.86677521291130688
sg34
g752
(S'\x07\xdf\t\x1c\r\x19-\x00\xea`'
tRp6516
sa(dp6517
S'trial_loop.thisTrialN'
p6518
I9
sg6370
S'38-maltesers.png'
p6519
sS'block_loop.thisIndex'
p6520
g6364
sg38
S'left'
p6521
sg58
g62
sS'trial_loop.thisN'
p6522
I9
sg33
S'38-maltesers.png'
p6523
sg63
g64
sS'trial_loop.thisIndex'
p6524
g59
(g98
S'\t\x00\x00\x00'
tRp6525
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6526
I0
sg6379
S'6-sour_patch_kids.png'
p6527
sS'block_loop.thisRepN'
p6528
I2
sg6382
g6523
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6529
I2
sg6384
S'6-sour_patch_kids.png'
p6530
sg55
g11
sS'block_loop.thisTrial'
p6531
Nsg69
Vn
sS'block_loop.thisTrialN'
p6532
I0
sg39
F0.73327245544351172
sg34
g752
(S'\x07\xdf\t\x1c\r\x192\x0e\x9aH'
tRp6533
sa(dp6534
S'trial_loop.thisTrialN'
p6535
I10
sg6370
S'36-fig_rolls.png'
p6536
sS'block_loop.thisIndex'
p6537
g6364
sg38
S'left'
p6538
sg58
g62
sS'trial_loop.thisN'
p6539
I10
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6540
g59
(g98
S'\n\x00\x00\x00'
tRp6541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6542
I0
sg6379
S'34-hula_hoops_bbq_beef_redo.png'
p6543
sS'block_loop.thisRepN'
p6544
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6545
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6546
Nsg69
Vn
sS'block_loop.thisTrialN'
p6547
I0
sg39
F1.9168848615336174
sg34
g752
(S'\x07\xdf\t\x1c\r\x198\n\xe5\x10'
tRp6548
sa(dp6549
S'trial_loop.thisTrialN'
p6550
I11
sg6370
S'35-raisins.png'
p6551
sS'block_loop.thisIndex'
p6552
g6364
sg38
S'right'
p6553
sg58
g62
sS'trial_loop.thisN'
p6554
I11
sg33
S'35-raisins.png'
p6555
sg63
g64
sS'trial_loop.thisIndex'
p6556
g59
(g98
S'\x0b\x00\x00\x00'
tRp6557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6558
I0
sg6379
S'49-yorkie.png'
p6559
sS'block_loop.thisRepN'
p6560
I2
sg6382
S'49-yorkie.png'
p6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6562
I2
sg6384
g6555
sg55
g11
sS'block_loop.thisTrial'
p6563
Nsg69
Vn
sS'block_loop.thisTrialN'
p6564
I0
sg39
F1.3167656336227083
sg34
g752
(S'\x07\xdf\t\x1c\r\x1a\x03\n=\x18'
tRp6565
sa(dp6566
S'trial_loop.thisTrialN'
p6567
I12
sg6370
S'33-ambrosia_rice.png'
p6568
sS'block_loop.thisIndex'
p6569
g6364
sg38
S'right'
p6570
sg58
g62
sS'trial_loop.thisN'
p6571
I12
sg33
S'23-crunchie_redo.png'
p6572
sg63
g64
sS'trial_loop.thisIndex'
p6573
g59
(g98
S'\x0c\x00\x00\x00'
tRp6574
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6575
I0
sg6379
S'23-crunchie_redo.png'
p6576
sS'block_loop.thisRepN'
p6577
I2
sg6382
g6572
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6578
I2
sg6384
S'33-ambrosia_rice.png'
p6579
sg55
g11
sS'block_loop.thisTrial'
p6580
Nsg69
Vn
sS'block_loop.thisTrialN'
p6581
I0
sg39
F1.0835473467650445
sg34
g752
(S'\x07\xdf\t\x1c\r\x1a\n\x00N '
tRp6582
sa(dp6583
S'trial_loop.thisTrialN'
p6584
I13
sg6370
S'3-ellas_strawberries_apples.png'
p6585
sS'block_loop.thisIndex'
p6586
g6364
sg38
S'left'
p6587
sg58
g62
sS'trial_loop.thisN'
p6588
I13
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p6589
g59
(g98
S'\r\x00\x00\x00'
tRp6590
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6591
I0
sg6379
S'13-mccoys_steak_crisps.png'
p6592
sS'block_loop.thisRepN'
p6593
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6594
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p6595
Nsg69
Vn
sS'block_loop.thisTrialN'
p6596
I0
sg39
F1.2335247670180252
sg34
g752
(S'\x07\xdf\t\x1c\r\x1a\x10\x02\x13@'
tRp6597
sa(dp6598
S'trial_loop.thisTrialN'
p6599
I14
sg6370
g6568
sS'block_loop.thisIndex'
p6600
g6364
sg38
S'right'
p6601
sg58
g62
sS'trial_loop.thisN'
p6602
I14
sg33
g6572
sg63
g64
sS'trial_loop.thisIndex'
p6603
g59
(g98
S'\x0e\x00\x00\x00'
tRp6604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6605
I0
sg6379
g6576
sS'block_loop.thisRepN'
p6606
I2
sg6382
g6572
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6607
I2
sg6384
g6579
sg55
g11
sS'block_loop.thisTrial'
p6608
Nsg69
Vn
sS'block_loop.thisTrialN'
p6609
I0
sg39
F0.80006431806941691
sg34
g752
(S'\x07\xdf\t\x1c\r\x1a\x16\x065\xd8'
tRp6610
sa(dp6611
S'trial_loop.thisTrialN'
p6612
I15
sg6370
g6551
sS'block_loop.thisIndex'
p6613
g6364
sg38
S'right'
p6614
sg58
g62
sS'trial_loop.thisN'
p6615
I15
sg33
g6561
sg63
g64
sS'trial_loop.thisIndex'
p6616
g59
(g98
S'\x0f\x00\x00\x00'
tRp6617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6618
I0
sg6379
g6559
sS'block_loop.thisRepN'
p6619
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6620
I2
sg6384
g6555
sg55
g11
sS'block_loop.thisTrial'
p6621
Nsg69
Vn
sS'block_loop.thisTrialN'
p6622
I0
sg39
F0.8335291005041654
sg34
g752
(S'\x07\xdf\t\x1c\r\x1a\x1c\x03\xadh'
tRp6623
sa(dp6624
S'trial_loop.thisTrialN'
p6625
I16
sg6370
g6391
sS'block_loop.thisIndex'
p6626
g6364
sg38
S'left'
p6627
sg58
g62
sS'trial_loop.thisN'
p6628
I16
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p6629
g59
(g98
S'\x10\x00\x00\x00'
tRp6630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6631
I0
sg6379
g6399
sS'block_loop.thisRepN'
p6632
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6633
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p6634
Nsg69
Vn
sS'block_loop.thisTrialN'
p6635
I0
sg39
F1.2335059505621757
sg34
g752
(S'\x07\xdf\t\x1c\r\x1a"\x01\xa1\xf8'
tRp6636
sa(dp6637
S'trial_loop.thisTrialN'
p6638
I17
sg6370
g6459
sS'block_loop.thisIndex'
p6639
g6364
sg38
S'left'
p6640
sg58
g62
sS'trial_loop.thisN'
p6641
I17
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p6642
g59
(g98
S'\x11\x00\x00\x00'
tRp6643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6644
I0
sg6379
g6467
sS'block_loop.thisRepN'
p6645
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6646
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p6647
Nsg69
Vn
sS'block_loop.thisTrialN'
p6648
I0
sg39
F0.83354877225428936
sg34
g752
(S'\x07\xdf\t\x1c\r\x1a(\x05\x86\x10'
tRp6649
sa(dp6650
S'trial_loop.thisTrialN'
p6651
I18
sg6370
S'27-hartleys_raspberries_jelly.png'
p6652
sS'block_loop.thisIndex'
p6653
g6364
sg38
S'right'
p6654
sg58
g62
sS'trial_loop.thisN'
p6655
I18
sg33
S'51-mars.png'
p6656
sg63
g64
sS'trial_loop.thisIndex'
p6657
g59
(g98
S'\x12\x00\x00\x00'
tRp6658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6659
I0
sg6379
S'51-mars.png'
p6660
sS'block_loop.thisRepN'
p6661
I2
sg6382
g6656
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6662
I2
sg6384
S'27-hartleys_raspberries_jelly.png'
p6663
sg55
g11
sS'block_loop.thisTrial'
p6664
Nsg69
Vn
sS'block_loop.thisTrialN'
p6665
I0
sg39
F1.1506653612977971
sg34
g752
(S'\x07\xdf\t\x1c\r\x1a.\x03\xb9 '
tRp6666
sa(dp6667
S'trial_loop.thisTrialN'
p6668
I19
sg6370
S'1-treacle_cookies.png'
p6669
sS'block_loop.thisIndex'
p6670
g6364
sg38
S'left'
p6671
sg58
g62
sS'trial_loop.thisN'
p6672
I19
sg33
S'1-treacle_cookies.png'
p6673
sg63
g64
sS'trial_loop.thisIndex'
p6674
g59
(g98
S'\x13\x00\x00\x00'
tRp6675
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6676
I0
sg6379
S'21-nakd_banana_crunch.png'
p6677
sS'block_loop.thisRepN'
p6678
I2
sg6382
g6673
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6679
I2
sg6384
S'21-nakd_banana_crunch.png'
p6680
sg55
g11
sS'block_loop.thisTrial'
p6681
Nsg69
Vn
sS'block_loop.thisTrialN'
p6682
I0
sg39
F1.1001400400509738
sg34
g752
(S'\x07\xdf\t\x1c\r\x1a4\x06l\x88'
tRp6683
sa(dp6684
S'trial_loop.thisTrialN'
p6685
I20
sg6370
S'41-peanuts_redo.png'
p6686
sS'block_loop.thisIndex'
p6687
g6364
sg38
S'left'
p6688
sg58
g62
sS'trial_loop.thisN'
p6689
I20
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p6690
g59
(g98
S'\x14\x00\x00\x00'
tRp6691
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6692
I0
sg6379
S'45-chewy_nougat_redo.png'
p6693
sS'block_loop.thisRepN'
p6694
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6695
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p6696
Nsg69
Vn
sS'block_loop.thisTrialN'
p6697
I0
sg39
F1.0499528448199271
sg34
g752
(S'\x07\xdf\t\x1c\r\x1a:\x08l@'
tRp6698
sa(dp6699
S'trial_loop.thisTrialN'
p6700
I21
sg6370
g6442
sS'block_loop.thisIndex'
p6701
g6364
sg38
S'right'
p6702
sg58
g62
sS'trial_loop.thisN'
p6703
I21
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p6704
g59
(g98
S'\x15\x00\x00\x00'
tRp6705
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6706
I0
sg6379
g6450
sS'block_loop.thisRepN'
p6707
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6708
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p6709
Nsg69
Vn
sS'block_loop.thisTrialN'
p6710
I0
sg39
F1.6835134771426965
sg34
g752
(S'\x07\xdf\t\x1c\r\x1b\x04\t\xb4`'
tRp6711
sa(dp6712
S'trial_loop.thisTrialN'
p6713
I22
sg6370
g6551
sS'block_loop.thisIndex'
p6714
g6364
sg38
S'right'
p6715
sg58
g62
sS'trial_loop.thisN'
p6716
I22
sg33
g6561
sg63
g64
sS'trial_loop.thisIndex'
p6717
g59
(g98
S'\x16\x00\x00\x00'
tRp6718
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6719
I0
sg6379
g6559
sS'block_loop.thisRepN'
p6720
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6721
I2
sg6384
g6555
sg55
g11
sS'block_loop.thisTrial'
p6722
Nsg69
Vn
sS'block_loop.thisTrialN'
p6723
I0
sg39
F0.95014950529912312
sg34
g752
(S'\x07\xdf\t\x1c\r\x1b\x0b\x05~@'
tRp6724
sa(dp6725
S'trial_loop.thisTrialN'
p6726
I23
sg6370
S'43-mrporky_pork_crackles_redo.png'
p6727
sS'block_loop.thisIndex'
p6728
g6364
sg38
S'right'
p6729
sg58
g62
sS'trial_loop.thisN'
p6730
I23
sg33
S'18-mms.png'
p6731
sg63
g64
sS'trial_loop.thisIndex'
p6732
g59
(g98
S'\x17\x00\x00\x00'
tRp6733
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6734
I0
sg6379
S'18-mms.png'
p6735
sS'block_loop.thisRepN'
p6736
I2
sg6382
g6731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6737
I2
sg6384
S'43-mrporky_pork_crackles_redo.png'
p6738
sg55
g11
sS'block_loop.thisTrial'
p6739
Nsg69
Vn
sS'block_loop.thisTrialN'
p6740
I0
sg39
F0.88389790304790949
sg34
g752
(S'\x07\xdf\t\x1c\r\x1b\x11\x05\x1c\x98'
tRp6741
sa(dp6742
S'trial_loop.thisTrialN'
p6743
I24
sg6370
S'4-corn.png'
p6744
sS'block_loop.thisIndex'
p6745
g6364
sg38
S'right'
p6746
sg58
g62
sS'trial_loop.thisN'
p6747
I24
sg33
S'10-bounty_redo.png'
p6748
sg63
g64
sS'trial_loop.thisIndex'
p6749
g59
(g98
S'\x18\x00\x00\x00'
tRp6750
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6751
I0
sg6379
S'10-bounty_redo.png'
p6752
sS'block_loop.thisRepN'
p6753
I2
sg6382
g6748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6754
I2
sg6384
S'4-corn.png'
p6755
sg55
g11
sS'block_loop.thisTrial'
p6756
Nsg69
Vn
sS'block_loop.thisTrialN'
p6757
I0
sg39
F1.0001416936174792
sg34
g752
(S'\x07\xdf\t\x1c\r\x1b\x17\x03\xc4\xd8'
tRp6758
sa(dp6759
S'trial_loop.thisTrialN'
p6760
I25
sg6370
S'25-kitkat.png'
p6761
sS'block_loop.thisIndex'
p6762
g6364
sg38
S'right'
p6763
sg58
g62
sS'trial_loop.thisN'
p6764
I25
sg33
S'25-kitkat.png'
p6765
sg63
g64
sS'trial_loop.thisIndex'
p6766
g59
(g98
S'\x19\x00\x00\x00'
tRp6767
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6768
I0
sg6379
S'31-hobnobs.png'
p6769
sS'block_loop.thisRepN'
p6770
I2
sg6382
g6765
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6771
I2
sg6384
S'31-hobnobs.png'
p6772
sg55
g11
sS'block_loop.thisTrial'
p6773
Nsg69
Vn
sS'block_loop.thisTrialN'
p6774
I0
sg39
F1.0334399789244344
sg34
g752
(S'\x07\xdf\t\x1c\r\x1b\x1d\x04U`'
tRp6775
sa(dp6776
S'trial_loop.thisTrialN'
p6777
I26
sg6370
g6425
sS'block_loop.thisIndex'
p6778
g6364
sg38
S'right'
p6779
sg58
g62
sS'trial_loop.thisN'
p6780
I26
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p6781
g59
(g98
S'\x1a\x00\x00\x00'
tRp6782
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6783
I0
sg6379
g6433
sS'block_loop.thisRepN'
p6784
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6785
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p6786
Nsg69
Vn
sS'block_loop.thisTrialN'
p6787
I0
sg39
F1.2501126136394305
sg34
g752
(S'\x07\xdf\t\x1c\r\x1b#\x05b\xe8'
tRp6788
sa(dp6789
S'trial_loop.thisTrialN'
p6790
I27
sg6370
S'50-polo.png'
p6791
sS'block_loop.thisIndex'
p6792
g6364
sg38
S'right'
p6793
sg58
g62
sS'trial_loop.thisN'
p6794
I27
sg33
S'48-twix.png'
p6795
sg63
g64
sS'trial_loop.thisIndex'
p6796
g59
(g98
S'\x1b\x00\x00\x00'
tRp6797
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6798
I0
sg6379
S'48-twix.png'
p6799
sS'block_loop.thisRepN'
p6800
I2
sg6382
g6795
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6801
I2
sg6384
S'50-polo.png'
p6802
sg55
g11
sS'block_loop.thisTrial'
p6803
Nsg69
Vn
sS'block_loop.thisTrialN'
p6804
I0
sg39
F1.3667911783886666
sg34
g752
(S'\x07\xdf\t\x1c\r\x1b)\t\xc0\x18'
tRp6805
sa(dp6806
S'trial_loop.thisTrialN'
p6807
I28
sg6370
g6551
sS'block_loop.thisIndex'
p6808
g6364
sg38
S'right'
p6809
sg58
g62
sS'trial_loop.thisN'
p6810
I28
sg33
g6555
sg63
g64
sS'trial_loop.thisIndex'
p6811
g59
(g98
S'\x1c\x00\x00\x00'
tRp6812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6813
I0
sg6379
g6559
sS'block_loop.thisRepN'
p6814
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6815
I2
sg6384
g6555
sg55
g11
sS'block_loop.thisTrial'
p6816
Nsg69
Vn
sS'block_loop.thisTrialN'
p6817
I0
sg39
F0.96720149117572873
sg34
g752
(S'\x07\xdf\t\x1c\r\x1b0\x00\x88\xb8'
tRp6818
sa(dp6819
S'trial_loop.thisTrialN'
p6820
I29
sg6370
S'2-steamed_puddings.png'
p6821
sS'block_loop.thisIndex'
p6822
g6364
sg38
S'left'
p6823
sg58
g62
sS'trial_loop.thisN'
p6824
I29
sg33
S'2-steamed_puddings.png'
p6825
sg63
g64
sS'trial_loop.thisIndex'
p6826
g59
(g98
S'\x1d\x00\x00\x00'
tRp6827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6828
I0
sg6379
S'20-fruit_pastilles.png'
p6829
sS'block_loop.thisRepN'
p6830
I2
sg6382
g6825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6831
I2
sg6384
S'20-fruit_pastilles.png'
p6832
sg55
g11
sS'block_loop.thisTrial'
p6833
Nsg69
Vn
sS'block_loop.thisTrialN'
p6834
I0
sg39
F1.283508402402731
sg34
g752
(S'\x07\xdf\t\x1c\r\x1b6\x00\xa0('
tRp6835
sa(dp6836
S'trial_loop.thisTrialN'
p6837
I30
sg6370
S'42-mrkipling_lemon_slices.png'
p6838
sS'block_loop.thisIndex'
p6839
g6364
sg38
S'left'
p6840
sg58
g62
sS'trial_loop.thisN'
p6841
I30
sg33
S'42-mrkipling_lemon_slices.png'
p6842
sg63
g64
sS'trial_loop.thisIndex'
p6843
g59
(g98
S'\x1e\x00\x00\x00'
tRp6844
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6845
I0
sg6379
S'16-skips_prawn.png'
p6846
sS'block_loop.thisRepN'
p6847
I2
sg6382
g6842
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6848
I2
sg6384
S'16-skips_prawn.png'
p6849
sg55
g11
sS'block_loop.thisTrial'
p6850
Nsg69
Vn
sS'block_loop.thisTrialN'
p6851
I0
sg39
F1.083406793537506
sg34
g752
(S'\x07\xdf\t\x1c\r\x1c\x00\x05zX'
tRp6852
sa(dp6853
S'trial_loop.thisTrialN'
p6854
I31
sg6370
S'49-yorkie.png'
p6855
sS'block_loop.thisIndex'
p6856
g6364
sg38
S'left'
p6857
sg58
g62
sS'trial_loop.thisN'
p6858
I31
sg33
g6555
sg63
g64
sS'trial_loop.thisIndex'
p6859
g59
(g98
S'\x1f\x00\x00\x00'
tRp6860
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6861
I0
sg6379
S'35-raisins.png'
p6862
sS'block_loop.thisRepN'
p6863
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6864
I2
sg6384
g6555
sg55
g11
sS'block_loop.thisTrial'
p6865
Nsg69
Vn
sS'block_loop.thisTrialN'
p6866
I0
sg39
F1.0168478558352945
sg34
g752
(S'\x07\xdf\t\x1c\r\x1c\x06\x07?x'
tRp6867
sa(dp6868
S'trial_loop.thisTrialN'
p6869
I32
sg6370
g6791
sS'block_loop.thisIndex'
p6870
g6364
sg38
S'right'
p6871
sg58
g62
sS'trial_loop.thisN'
p6872
I32
sg33
g6795
sg63
g64
sS'trial_loop.thisIndex'
p6873
g59
(g98
S' \x00\x00\x00'
tRp6874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6875
I0
sg6379
g6799
sS'block_loop.thisRepN'
p6876
I2
sg6382
g6795
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6877
I2
sg6384
g6802
sg55
g11
sS'block_loop.thisTrial'
p6878
Nsg69
Vn
sS'block_loop.thisTrialN'
p6879
I0
sg39
F0.83348804641900642
sg34
g752
(S'\x07\xdf\t\x1c\r\x1c\x0c\x07\xd0\x00'
tRp6880
sa(dp6881
S'trial_loop.thisTrialN'
p6882
I33
sg6370
S'10-bounty_redo.png'
p6883
sS'block_loop.thisIndex'
p6884
g6364
sg38
S'left'
p6885
sg58
g62
sS'trial_loop.thisN'
p6886
I33
sg33
g6755
sg63
g64
sS'trial_loop.thisIndex'
p6887
g59
(g98
S'!\x00\x00\x00'
tRp6888
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6889
I0
sg6379
S'4-corn.png'
p6890
sS'block_loop.thisRepN'
p6891
I2
sg6382
g6748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6892
I2
sg6384
g6755
sg55
g11
sS'block_loop.thisTrial'
p6893
Nsg69
Vn
sS'block_loop.thisTrialN'
p6894
I0
sg39
F0.83392709706458845
sg34
g752
(S'\x07\xdf\t\x1c\r\x1c\x12\x05\xff('
tRp6895
sa(dp6896
S'trial_loop.thisTrialN'
p6897
I34
sg6370
g6442
sS'block_loop.thisIndex'
p6898
g6364
sg38
S'right'
p6899
sg58
g62
sS'trial_loop.thisN'
p6900
I34
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p6901
g59
(g98
S'"\x00\x00\x00'
tRp6902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6903
I0
sg6379
g6450
sS'block_loop.thisRepN'
p6904
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6905
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p6906
Nsg69
Vn
sS'block_loop.thisTrialN'
p6907
I0
sg39
F1.2168388467453042
sg34
g752
(S'\x07\xdf\t\x1c\r\x1c\x18\x03\xf3\xb8'
tRp6908
sa(dp6909
S'trial_loop.thisTrialN'
p6910
I35
sg6370
g6371
sS'block_loop.thisIndex'
p6911
g6364
sg38
S'right'
p6912
sg58
g62
sS'trial_loop.thisN'
p6913
I35
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p6914
g59
(g98
S'#\x00\x00\x00'
tRp6915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6916
I0
sg6379
g6380
sS'block_loop.thisRepN'
p6917
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6918
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6919
Nsg69
Vn
sS'block_loop.thisTrialN'
p6920
I0
sg39
F0.78346677812078269
sg34
g752
(S'\x07\xdf\t\x1c\r\x1c\x1e\x07\x9d8'
tRp6921
sa(dp6922
S'trial_loop.thisTrialN'
p6923
I36
sg6370
g6838
sS'block_loop.thisIndex'
p6924
g6364
sg38
S'left'
p6925
sg58
g62
sS'trial_loop.thisN'
p6926
I36
sg33
g6842
sg63
g64
sS'trial_loop.thisIndex'
p6927
g59
(g98
S'$\x00\x00\x00'
tRp6928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6929
I0
sg6379
g6846
sS'block_loop.thisRepN'
p6930
I2
sg6382
g6842
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6931
I2
sg6384
g6849
sg55
g11
sS'block_loop.thisTrial'
p6932
Nsg69
Vn
sS'block_loop.thisTrialN'
p6933
I0
sg39
F1.799975652646026
sg34
g752
(S'\x07\xdf\t\x1c\r\x1c$\x04\xd6H'
tRp6934
sa(dp6935
S'trial_loop.thisTrialN'
p6936
I37
sg6370
g6652
sS'block_loop.thisIndex'
p6937
g6364
sg38
S'right'
p6938
sg58
g62
sS'trial_loop.thisN'
p6939
I37
sg33
g6663
sg63
g64
sS'trial_loop.thisIndex'
p6940
g59
(g98
S'%\x00\x00\x00'
tRp6941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6942
I0
sg6379
g6660
sS'block_loop.thisRepN'
p6943
I2
sg6382
g6656
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6944
I2
sg6384
g6663
sg55
g11
sS'block_loop.thisTrial'
p6945
Nsg69
Vn
sS'block_loop.thisTrialN'
p6946
I0
sg39
F0.93344961523143866
sg34
g752
(S'\x07\xdf\t\x1c\r\x1c+\x02I\xf0'
tRp6947
sa(dp6948
S'trial_loop.thisTrialN'
p6949
I38
sg6370
S'48-twix.png'
p6950
sS'block_loop.thisIndex'
p6951
g6364
sg38
S'left'
p6952
sg58
g62
sS'trial_loop.thisN'
p6953
I38
sg33
g6795
sg63
g64
sS'trial_loop.thisIndex'
p6954
g59
(g98
S'&\x00\x00\x00'
tRp6955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6956
I0
sg6379
S'50-polo.png'
p6957
sS'block_loop.thisRepN'
p6958
I2
sg6382
g6795
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6959
I2
sg6384
g6802
sg55
g11
sS'block_loop.thisTrial'
p6960
Nsg69
Vn
sS'block_loop.thisTrialN'
p6961
I0
sg39
F1.2505724764287152
sg34
g752
(S'\x07\xdf\t\x1c\r\x1c1\x01\xe8H'
tRp6962
sa(dp6963
S'trial_loop.thisTrialN'
p6964
I39
sg6370
g6425
sS'block_loop.thisIndex'
p6965
g6364
sg38
S'right'
p6966
sg58
g62
sS'trial_loop.thisN'
p6967
I39
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p6968
g59
(g98
S"'\x00\x00\x00"
tRp6969
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6970
I0
sg6379
g6433
sS'block_loop.thisRepN'
p6971
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6972
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p6973
Nsg69
Vn
sS'block_loop.thisTrialN'
p6974
I0
sg39
F1.1001882215823571
sg34
g752
(S'\x07\xdf\t\x1c\r\x1c7\x06\n\xe0'
tRp6975
sa(dp6976
S'trial_loop.thisTrialN'
p6977
I40
sg6370
g6950
sS'block_loop.thisIndex'
p6978
g6364
sg38
S'left'
p6979
sg58
g62
sS'trial_loop.thisN'
p6980
I40
sg33
g6795
sg63
g64
sS'trial_loop.thisIndex'
p6981
g59
(g98
S'(\x00\x00\x00'
tRp6982
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6983
I0
sg6379
g6957
sS'block_loop.thisRepN'
p6984
I2
sg6382
g6795
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6985
I2
sg6384
g6802
sg55
g11
sS'block_loop.thisTrial'
p6986
Nsg69
Vn
sS'block_loop.thisTrialN'
p6987
I0
sg39
F0.75018046692275675
sg34
g752
(S'\x07\xdf\t\x1c\r\x1d\x01\x08I\x18'
tRp6988
sa(dp6989
S'trial_loop.thisTrialN'
p6990
I41
sg6370
g6652
sS'block_loop.thisIndex'
p6991
g6364
sg38
S'right'
p6992
sg58
g62
sS'trial_loop.thisN'
p6993
I41
sg33
g6663
sg63
g64
sS'trial_loop.thisIndex'
p6994
g59
(g98
S')\x00\x00\x00'
tRp6995
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6996
I0
sg6379
g6660
sS'block_loop.thisRepN'
p6997
I2
sg6382
g6656
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6998
I2
sg6384
g6663
sg55
g11
sS'block_loop.thisTrial'
p6999
Nsg69
Vn
sS'block_loop.thisTrialN'
p7000
I0
sg39
F0.73357351874619781
sg34
g752
(S'\x07\xdf\t\x1c\r\x1d\x07\x04\xcex'
tRp7001
sa(dp7002
S'trial_loop.thisTrialN'
p7003
I42
sg6370
S'23-crunchie_redo.png'
p7004
sS'block_loop.thisIndex'
p7005
g6364
sg38
S'left'
p7006
sg58
g62
sS'trial_loop.thisN'
p7007
I42
sg33
g6572
sg63
g64
sS'trial_loop.thisIndex'
p7008
g59
(g98
S'*\x00\x00\x00'
tRp7009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7010
I0
sg6379
S'33-ambrosia_rice.png'
p7011
sS'block_loop.thisRepN'
p7012
I2
sg6382
g6572
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7013
I2
sg6384
g6579
sg55
g11
sS'block_loop.thisTrial'
p7014
Nsg69
Vn
sS'block_loop.thisTrialN'
p7015
I0
sg39
F1.5335212318041158
sg34
g752
(S'\x07\xdf\t\x1c\r\x1d\r\x01S\xd8'
tRp7016
sa(dp7017
S'trial_loop.thisTrialN'
p7018
I43
sg6370
S'5-pineapple.png'
p7019
sS'block_loop.thisIndex'
p7020
g6364
sg38
S'right'
p7021
sg58
g62
sS'trial_loop.thisN'
p7022
I43
sg33
S'40-sardines.png'
p7023
sg63
g64
sS'trial_loop.thisIndex'
p7024
g59
(g98
S'+\x00\x00\x00'
tRp7025
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7026
I0
sg6379
S'40-sardines.png'
p7027
sS'block_loop.thisRepN'
p7028
I2
sg6382
g7023
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7029
I2
sg6384
S'5-pineapple.png'
p7030
sg55
g11
sS'block_loop.thisTrial'
p7031
Nsg69
Vn
sS'block_loop.thisTrialN'
p7032
I0
sg39
F2.016741799447118
sg34
g752
(S'\x07\xdf\t\x1c\r\x1d\x13\t\xfa\xb0'
tRp7033
sa(dp7034
S'trial_loop.thisTrialN'
p7035
I44
sg6370
g6652
sS'block_loop.thisIndex'
p7036
g6364
sg38
S'right'
p7037
sg58
g62
sS'trial_loop.thisN'
p7038
I44
sg33
g6656
sg63
g64
sS'trial_loop.thisIndex'
p7039
g59
(g98
S',\x00\x00\x00'
tRp7040
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7041
I0
sg6379
g6660
sS'block_loop.thisRepN'
p7042
I2
sg6382
g6656
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7043
I2
sg6384
g6663
sg55
g11
sS'block_loop.thisTrial'
p7044
Nsg69
Vn
sS'block_loop.thisTrialN'
p7045
I0
sg39
F0.8501129557571403
sg34
g752
(S'\x07\xdf\t\x1c\r\x1d\x1a\n\xc5\xd0'
tRp7046
sa(dp7047
S'trial_loop.thisTrialN'
p7048
I45
sg6370
g6855
sS'block_loop.thisIndex'
p7049
g6364
sg38
S'left'
p7050
sg58
g62
sS'trial_loop.thisN'
p7051
I45
sg33
g6561
sg63
g64
sS'trial_loop.thisIndex'
p7052
g59
(g98
S'-\x00\x00\x00'
tRp7053
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7054
I0
sg6379
g6862
sS'block_loop.thisRepN'
p7055
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7056
I2
sg6384
g6555
sg55
g11
sS'block_loop.thisTrial'
p7057
Nsg69
Vn
sS'block_loop.thisTrialN'
p7058
I0
sg39
F1.766843864466864
sg34
g752
(S'\x07\xdf\t\x1c\r\x1d \x08\xf4\xf8'
tRp7059
sa(dp7060
S'trial_loop.thisTrialN'
p7061
I46
sg6370
g6408
sS'block_loop.thisIndex'
p7062
g6364
sg38
S'right'
p7063
sg58
g62
sS'trial_loop.thisN'
p7064
I46
sg33
g6419
sg63
g64
sS'trial_loop.thisIndex'
p7065
g59
(g98
S'.\x00\x00\x00'
tRp7066
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7067
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7068
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7069
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7070
Nsg69
Vn
sS'block_loop.thisTrialN'
p7071
I0
sg39
F0.83344784762630297
sg34
g752
(S"\x07\xdf\t\x1c\r\x1d'\x05\xeb\xa0"
tRp7072
sa(dp7073
S'trial_loop.thisTrialN'
p7074
I47
sg6370
S'18-mms.png'
p7075
sS'block_loop.thisIndex'
p7076
g6364
sg38
S'left'
p7077
sg58
g62
sS'trial_loop.thisN'
p7078
I47
sg33
g6731
sg63
g64
sS'trial_loop.thisIndex'
p7079
g59
(g98
S'/\x00\x00\x00'
tRp7080
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7081
I0
sg6379
S'43-mrporky_pork_crackles_redo.png'
p7082
sS'block_loop.thisRepN'
p7083
I2
sg6382
g6731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7084
I2
sg6384
g6738
sg55
g11
sS'block_loop.thisTrial'
p7085
Nsg69
Vn
sS'block_loop.thisTrialN'
p7086
I0
sg39
F0.90013023268511461
sg34
g752
(S'\x07\xdf\t\x1c\r\x1d-\x03\xe00'
tRp7087
sa(dp7088
S'trial_loop.thisTrialN'
p7089
I48
sg6370
g6585
sS'block_loop.thisIndex'
p7090
g6364
sg38
S'left'
p7091
sg58
g62
sS'trial_loop.thisN'
p7092
I48
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p7093
g59
(g98
S'0\x00\x00\x00'
tRp7094
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7095
I0
sg6379
g6592
sS'block_loop.thisRepN'
p7096
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7097
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p7098
Nsg69
Vn
sS'block_loop.thisTrialN'
p7099
I0
sg39
F1.2505257203847577
sg34
g752
(S'\x07\xdf\t\x1c\r\x1d3\x02\xc6\xf0'
tRp7100
sa(dp7101
S'trial_loop.thisTrialN'
p7102
I49
sg6370
S'22-daim.png'
p7103
sS'block_loop.thisIndex'
p7104
g6364
sg38
S'left'
p7105
sg58
g62
sS'trial_loop.thisN'
p7106
I49
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7107
g59
(g98
S'1\x00\x00\x00'
tRp7108
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7109
I0
sg6379
S'7-olives.png'
p7110
sS'block_loop.thisRepN'
p7111
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7112
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7113
Nsg69
Vn
sS'block_loop.thisTrialN'
p7114
I0
sg39
F0.98346803255117266
sg34
g752
(S'\x07\xdf\t\x1c\r\x1d9\x07(\x08'
tRp7115
sa(dp7116
S'trial_loop.thisTrialN'
p7117
I50
sg6370
g6838
sS'block_loop.thisIndex'
p7118
g6364
sg38
S'left'
p7119
sg58
g62
sS'trial_loop.thisN'
p7120
I50
sg33
g6842
sg63
g64
sS'trial_loop.thisIndex'
p7121
g59
(g98
S'2\x00\x00\x00'
tRp7122
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7123
I0
sg6379
g6846
sS'block_loop.thisRepN'
p7124
I2
sg6382
g6842
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7125
I2
sg6384
g6849
sg55
g11
sS'block_loop.thisTrial'
p7126
Nsg69
Vn
sS'block_loop.thisTrialN'
p7127
I0
sg39
F1.3667304525515647
sg34
g752
(S'\x07\xdf\t\x1c\r\x1e\x03\x07z\x10'
tRp7128
sa(dp7129
S'trial_loop.thisTrialN'
p7130
I51
sg6370
S'44-crunch.png'
p7131
sS'block_loop.thisIndex'
p7132
g6364
sg38
S'left'
p7133
sg58
g62
sS'trial_loop.thisN'
p7134
I51
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7135
g59
(g98
S'3\x00\x00\x00'
tRp7136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7137
I0
sg6379
S'26-walkers_smoky_bacon.png'
p7138
sS'block_loop.thisRepN'
p7139
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7140
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7141
Nsg69
Vn
sS'block_loop.thisTrialN'
p7142
I0
sg39
F0.76665284892624186
sg34
g752
(S'\x07\xdf\t\x1c\r\x1e\t\r\x84\xf0'
tRp7143
sa(dp7144
S'trial_loop.thisTrialN'
p7145
I52
sg6370
S'8-liquorice_catherine_wheels.png'
p7146
sS'block_loop.thisIndex'
p7147
g6364
sg38
S'right'
p7148
sg58
g62
sS'trial_loop.thisN'
p7149
I52
sg33
S'17-jacobs_mini_cheddars_redo.png'
p7150
sg63
g64
sS'trial_loop.thisIndex'
p7151
g59
(g98
S'4\x00\x00\x00'
tRp7152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7153
I0
sg6379
S'17-jacobs_mini_cheddars_redo.png'
p7154
sS'block_loop.thisRepN'
p7155
I2
sg6382
g7150
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7156
I2
sg6384
S'8-liquorice_catherine_wheels.png'
p7157
sg55
g11
sS'block_loop.thisTrial'
p7158
Nsg69
Vn
sS'block_loop.thisTrialN'
p7159
I0
sg39
F0.88355036880238913
sg34
g752
(S'\x07\xdf\t\x1c\r\x1e\x0f\n\x87P'
tRp7160
sa(dp7161
S'trial_loop.thisTrialN'
p7162
I53
sg6370
g6442
sS'block_loop.thisIndex'
p7163
g6364
sg38
S'right'
p7164
sg58
g62
sS'trial_loop.thisN'
p7165
I53
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7166
g59
(g98
S'5\x00\x00\x00'
tRp7167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7168
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7169
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7170
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7171
Nsg69
Vn
sS'block_loop.thisTrialN'
p7172
I0
sg39
F0.68344448347124853
sg34
g752
(S'\x07\xdf\t\x1c\r\x1e\x15\t/\x90'
tRp7173
sa(dp7174
S'trial_loop.thisTrialN'
p7175
I54
sg6370
g7131
sS'block_loop.thisIndex'
p7176
g6364
sg38
S'left'
p7177
sg58
g62
sS'trial_loop.thisN'
p7178
I54
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p7179
g59
(g98
S'6\x00\x00\x00'
tRp7180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7181
I0
sg6379
g7138
sS'block_loop.thisRepN'
p7182
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7183
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7184
Nsg69
Vn
sS'block_loop.thisTrialN'
p7185
I0
sg39
F0.78353149532631505
sg34
g752
(S'\x07\xdf\t\x1c\r\x1e\x1b\x04\xc2\xc0'
tRp7186
sa(dp7187
S'trial_loop.thisTrialN'
p7188
I55
sg6370
S'16-skips_prawn.png'
p7189
sS'block_loop.thisIndex'
p7190
g6364
sg38
S'right'
p7191
sg58
g62
sS'trial_loop.thisN'
p7192
I55
sg33
g6849
sg63
g64
sS'trial_loop.thisIndex'
p7193
g59
(g98
S'7\x00\x00\x00'
tRp7194
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7195
I0
sg6379
S'42-mrkipling_lemon_slices.png'
p7196
sS'block_loop.thisRepN'
p7197
I2
sg6382
g6842
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7198
I2
sg6384
g6849
sg55
g11
sS'block_loop.thisTrial'
p7199
Nsg69
Vn
sS'block_loop.thisTrialN'
p7200
I0
sg39
F1.2833912271980807
sg34
g752
(S'\x07\xdf\t\x1c\r\x1e!\x01\xff\xb8'
tRp7201
sa(dp7202
S'trial_loop.thisTrialN'
p7203
I56
sg6370
g7004
sS'block_loop.thisIndex'
p7204
g6364
sg38
S'left'
p7205
sg58
g62
sS'trial_loop.thisN'
p7206
I56
sg33
g6572
sg63
g64
sS'trial_loop.thisIndex'
p7207
g59
(g98
S'8\x00\x00\x00'
tRp7208
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7209
I0
sg6379
g7011
sS'block_loop.thisRepN'
p7210
I2
sg6382
g6572
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7211
I2
sg6384
g6579
sg55
g11
sS'block_loop.thisTrial'
p7212
Nsg69
Vn
sS'block_loop.thisTrialN'
p7213
I0
sg39
F1.1667770945568918
sg34
g752
(S"\x07\xdf\t\x1c\r\x1e'\x06\xd9\xe8"
tRp7214
sa(dp7215
S'trial_loop.thisTrialN'
p7216
I57
sg6370
g6489
sS'block_loop.thisIndex'
p7217
g6364
sg38
S'right'
p7218
sg58
g62
sS'trial_loop.thisN'
p7219
I57
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p7220
g59
(g98
S'9\x00\x00\x00'
tRp7221
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7222
I0
sg6379
g6497
sS'block_loop.thisRepN'
p7223
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7224
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p7225
Nsg69
Vn
sS'block_loop.thisTrialN'
p7226
I0
sg39
F0.86686558892142784
sg34
g752
(S'\x07\xdf\t\x1c\r\x1e-\n\x06h'
tRp7227
sa(dp7228
S'trial_loop.thisTrialN'
p7229
I58
sg6370
S'17-jacobs_mini_cheddars_redo.png'
p7230
sS'block_loop.thisIndex'
p7231
g6364
sg38
S'left'
p7232
sg58
g62
sS'trial_loop.thisN'
p7233
I58
sg33
g7157
sg63
g64
sS'trial_loop.thisIndex'
p7234
g59
(g98
S':\x00\x00\x00'
tRp7235
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7236
I0
sg6379
S'8-liquorice_catherine_wheels.png'
p7237
sS'block_loop.thisRepN'
p7238
I2
sg6382
g7150
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7239
I2
sg6384
g7157
sg55
g11
sS'block_loop.thisTrial'
p7240
Nsg69
Vn
sS'block_loop.thisTrialN'
p7241
I0
sg39
F0.95023189856874524
sg34
g752
(S'\x07\xdf\t\x1c\r\x1e3\x08t\x10'
tRp7242
sa(dp7243
S'trial_loop.thisTrialN'
p7244
I59
sg6370
S'6-sour_patch_kids.png'
p7245
sS'block_loop.thisIndex'
p7246
g6364
sg38
S'right'
p7247
sg58
g62
sS'trial_loop.thisN'
p7248
I59
sg33
g6523
sg63
g64
sS'trial_loop.thisIndex'
p7249
g59
(g98
S';\x00\x00\x00'
tRp7250
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7251
I0
sg6379
S'38-maltesers.png'
p7252
sS'block_loop.thisRepN'
p7253
I2
sg6382
g6523
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7254
I2
sg6384
g6530
sg55
g11
sS'block_loop.thisTrial'
p7255
Nsg69
Vn
sS'block_loop.thisTrialN'
p7256
I0
sg39
F1.0332481080913567
sg34
g752
(S'\x07\xdf\t\x1c\r\x1e9\x08\x12h'
tRp7257
sa(dp7258
S'trial_loop.thisTrialN'
p7259
I60
sg6370
S'51-mars.png'
p7260
sS'block_loop.thisIndex'
p7261
g6364
sg38
S'left'
p7262
sg58
g62
sS'trial_loop.thisN'
p7263
I60
sg33
g6656
sg63
g64
sS'trial_loop.thisIndex'
p7264
g59
(g98
S'<\x00\x00\x00'
tRp7265
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7266
I0
sg6379
S'27-hartleys_raspberries_jelly.png'
p7267
sS'block_loop.thisRepN'
p7268
I2
sg6382
g6656
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7269
I2
sg6384
g6663
sg55
g11
sS'block_loop.thisTrial'
p7270
Nsg69
Vn
sS'block_loop.thisTrialN'
p7271
I0
sg39
F0.88347253709798679
sg34
g752
(S'\x07\xdf\t\x1c\r\x1f\x03\t\x1c\x08'
tRp7272
sa(dp7273
S'trial_loop.thisTrialN'
p7274
I61
sg6370
S'40-sardines.png'
p7275
sS'block_loop.thisIndex'
p7276
g6364
sg38
S'right'
p7277
sg58
g62
sS'trial_loop.thisN'
p7278
I61
sg33
g7023
sg63
g64
sS'trial_loop.thisIndex'
p7279
g59
(g98
S'=\x00\x00\x00'
tRp7280
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7281
I0
sg6379
S'5-pineapple.png'
p7282
sS'block_loop.thisRepN'
p7283
I2
sg6382
g7023
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7284
I2
sg6384
g7030
sg55
g11
sS'block_loop.thisTrial'
p7285
Nsg69
Vn
sS'block_loop.thisTrialN'
p7286
I0
sg39
F1.3168252190698695
sg34
g752
(S'\x07\xdf\t\x1c\r\x1f\t\x07\xc80'
tRp7287
sa(dp7288
S'trial_loop.thisTrialN'
p7289
I62
sg6370
g6883
sS'block_loop.thisIndex'
p7290
g6364
sg38
S'left'
p7291
sg58
g62
sS'trial_loop.thisN'
p7292
I62
sg33
g6748
sg63
g64
sS'trial_loop.thisIndex'
p7293
g59
(g98
S'>\x00\x00\x00'
tRp7294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7295
I0
sg6379
g6890
sS'block_loop.thisRepN'
p7296
I2
sg6382
g6748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7297
I2
sg6384
g6755
sg55
g11
sS'block_loop.thisTrial'
p7298
Nsg69
Vn
sS'block_loop.thisTrialN'
p7299
I0
sg39
F1.1999490815287572
sg34
g752
(S'\x07\xdf\t\x1c\r\x1f\x0f\rY\xf8'
tRp7300
sa(dp7301
S'trial_loop.thisTrialN'
p7302
I63
sg6370
g7019
sS'block_loop.thisIndex'
p7303
g6364
sg38
S'left'
p7304
sg58
g62
sS'trial_loop.thisN'
p7305
I63
sg33
g7023
sg63
g64
sS'trial_loop.thisIndex'
p7306
g59
(g98
S'?\x00\x00\x00'
tRp7307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7308
I0
sg6379
g7027
sS'block_loop.thisRepN'
p7309
I2
sg6382
g7023
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7310
I2
sg6384
g7030
sg55
g11
sS'block_loop.thisTrial'
p7311
Nsg69
Vn
sS'block_loop.thisTrialN'
p7312
I0
sg39
F1.5505384357475123
sg34
g752
(S'\x07\xdf\t\x1c\r\x1f\x16\x01\x82\xb8'
tRp7313
sa(dp7314
S'trial_loop.thisTrialN'
p7315
I64
sg6370
S'31-hobnobs.png'
p7316
sS'block_loop.thisIndex'
p7317
g6364
sg38
S'right'
p7318
sg58
g62
sS'trial_loop.thisN'
p7319
I64
sg33
g6765
sg63
g64
sS'trial_loop.thisIndex'
p7320
g59
(g98
S'@\x00\x00\x00'
tRp7321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7322
I0
sg6379
S'25-kitkat.png'
p7323
sS'block_loop.thisRepN'
p7324
I2
sg6382
g6765
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7325
I2
sg6384
g6772
sg55
g11
sS'block_loop.thisTrial'
p7326
Nsg69
Vn
sS'block_loop.thisTrialN'
p7327
I0
sg39
F1.466868211820838
sg34
g752
(S'\x07\xdf\t\x1c\r\x1f\x1c\nh\x10'
tRp7328
sa(dp7329
S'trial_loop.thisTrialN'
p7330
I65
sg6370
g6950
sS'block_loop.thisIndex'
p7331
g6364
sg38
S'left'
p7332
sg58
g62
sS'trial_loop.thisN'
p7333
I65
sg33
g6795
sg63
g64
sS'trial_loop.thisIndex'
p7334
g59
(g98
S'A\x00\x00\x00'
tRp7335
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7336
I0
sg6379
g6957
sS'block_loop.thisRepN'
p7337
I2
sg6382
g6795
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7338
I2
sg6384
g6802
sg55
g11
sS'block_loop.thisTrial'
p7339
Nsg69
Vn
sS'block_loop.thisTrialN'
p7340
I0
sg39
F0.81687397079622315
sg34
g752
(S'\x07\xdf\t\x1c\r\x1f#\x02\xdax'
tRp7341
sa(dp7342
S'trial_loop.thisTrialN'
p7343
I66
sg6370
g7075
sS'block_loop.thisIndex'
p7344
g6364
sg38
S'left'
p7345
sg58
g62
sS'trial_loop.thisN'
p7346
I66
sg33
g6731
sg63
g64
sS'trial_loop.thisIndex'
p7347
g59
(g98
S'B\x00\x00\x00'
tRp7348
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7349
I0
sg6379
g7082
sS'block_loop.thisRepN'
p7350
I2
sg6382
g6731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7351
I2
sg6384
g6738
sg55
g11
sS'block_loop.thisTrial'
p7352
Nsg69
Vn
sS'block_loop.thisTrialN'
p7353
I0
sg39
F0.68346586580810254
sg34
g752
(S'\x07\xdf\t\x1c\r\x1f)\x00\x90\x88'
tRp7354
sa(dp7355
S'trial_loop.thisTrialN'
p7356
I67
sg6370
g6669
sS'block_loop.thisIndex'
p7357
g6364
sg38
S'left'
p7358
sg58
g62
sS'trial_loop.thisN'
p7359
I67
sg33
g6673
sg63
g64
sS'trial_loop.thisIndex'
p7360
g59
(g98
S'C\x00\x00\x00'
tRp7361
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7362
I0
sg6379
g6677
sS'block_loop.thisRepN'
p7363
I2
sg6382
g6673
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7364
I2
sg6384
g6680
sg55
g11
sS'block_loop.thisTrial'
p7365
Nsg69
Vn
sS'block_loop.thisTrialN'
p7366
I0
sg39
F0.86677350232457684
sg34
g752
(S'\x07\xdf\t\x1c\r\x1f.\x0be\xf8'
tRp7367
sa(dp7368
S'trial_loop.thisTrialN'
p7369
I68
sg6370
g6950
sS'block_loop.thisIndex'
p7370
g6364
sg38
S'left'
p7371
sg58
g62
sS'trial_loop.thisN'
p7372
I68
sg33
g6802
sg63
g64
sS'trial_loop.thisIndex'
p7373
g59
(g98
S'D\x00\x00\x00'
tRp7374
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7375
I0
sg6379
g6957
sS'block_loop.thisRepN'
p7376
I2
sg6382
g6795
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7377
I2
sg6384
g6802
sg55
g11
sS'block_loop.thisTrial'
p7378
Nsg69
Vn
sS'block_loop.thisTrialN'
p7379
I0
sg39
F0.75012145167238486
sg34
g752
(S'\x07\xdf\t\x1c\r\x1f4\t\xd3\xa0'
tRp7380
sa(dp7381
S'trial_loop.thisTrialN'
p7382
I69
sg6370
g7230
sS'block_loop.thisIndex'
p7383
g6364
sg38
S'left'
p7384
sg58
g62
sS'trial_loop.thisN'
p7385
I69
sg33
g7150
sg63
g64
sS'trial_loop.thisIndex'
p7386
g59
(g98
S'E\x00\x00\x00'
tRp7387
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7388
I0
sg6379
g7237
sS'block_loop.thisRepN'
p7389
I2
sg6382
g7150
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7390
I2
sg6384
g7157
sg55
g11
sS'block_loop.thisTrial'
p7391
Nsg69
Vn
sS'block_loop.thisTrialN'
p7392
I0
sg39
F0.80059517021436477
sg34
g752
(S'\x07\xdf\t\x1c\r\x1f:\x06\x93\x98'
tRp7393
sa(dp7394
S'trial_loop.thisTrialN'
p7395
I70
sg6370
g7260
sS'block_loop.thisIndex'
p7396
g6364
sg38
S'left'
p7397
sg58
g62
sS'trial_loop.thisN'
p7398
I70
sg33
g6663
sg63
g64
sS'trial_loop.thisIndex'
p7399
g59
(g98
S'F\x00\x00\x00'
tRp7400
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7401
I0
sg6379
g7267
sS'block_loop.thisRepN'
p7402
I2
sg6382
g6656
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7403
I2
sg6384
g6663
sg55
g11
sS'block_loop.thisTrial'
p7404
Nsg69
Vn
sS'block_loop.thisTrialN'
p7405
I0
sg39
F0.85008444597406196
sg34
g752
(S'\x07\xdf\t\x1c\r \x04\x04\x0f\x10'
tRp7406
sa(dp7407
S'trial_loop.thisTrialN'
p7408
I71
sg6370
g7131
sS'block_loop.thisIndex'
p7409
g6364
sg38
S'left'
p7410
sg58
g62
sS'trial_loop.thisN'
p7411
I71
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7412
g59
(g98
S'G\x00\x00\x00'
tRp7413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7414
I0
sg6379
g7138
sS'block_loop.thisRepN'
p7415
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7416
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7417
Nsg69
Vn
sS'block_loop.thisTrialN'
p7418
I0
sg39
F1.1001876513855677
sg34
g752
(S'\x07\xdf\t\x1c\r \n\x02>8'
tRp7419
sa(dp7420
S'trial_loop.thisTrialN'
p7421
I72
sg6370
g6727
sS'block_loop.thisIndex'
p7422
g6364
sg38
S'right'
p7423
sg58
g62
sS'trial_loop.thisN'
p7424
I72
sg33
g6731
sg63
g64
sS'trial_loop.thisIndex'
p7425
g59
(g98
S'H\x00\x00\x00'
tRp7426
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7427
I0
sg6379
g6735
sS'block_loop.thisRepN'
p7428
I2
sg6382
g6731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7429
I2
sg6384
g6738
sg55
g11
sS'block_loop.thisTrial'
p7430
Nsg69
Vn
sS'block_loop.thisTrialN'
p7431
I0
sg39
F0.7999702357865317
sg34
g752
(S'\x07\xdf\t\x1c\r \x10\x04=\xf0'
tRp7432
sa(dp7433
S'trial_loop.thisTrialN'
p7434
I73
sg6370
g6489
sS'block_loop.thisIndex'
p7435
g6364
sg38
S'right'
p7436
sg58
g62
sS'trial_loop.thisN'
p7437
I73
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p7438
g59
(g98
S'I\x00\x00\x00'
tRp7439
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7440
I0
sg6379
g6497
sS'block_loop.thisRepN'
p7441
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7442
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p7443
Nsg69
Vn
sS'block_loop.thisTrialN'
p7444
I0
sg39
F1.1001836600171373
sg34
g752
(S'\x07\xdf\t\x1c\r \x16\x01\xb5\x80'
tRp7445
sa(dp7446
S'trial_loop.thisTrialN'
p7447
I74
sg6370
g6425
sS'block_loop.thisIndex'
p7448
g6364
sg38
S'right'
p7449
sg58
g62
sS'trial_loop.thisN'
p7450
I74
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p7451
g59
(g98
S'J\x00\x00\x00'
tRp7452
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7453
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7454
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7455
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p7456
Nsg69
Vn
sS'block_loop.thisTrialN'
p7457
I0
sg39
F1.6338750952236296
sg34
g752
(S'\x07\xdf\t\x1c\r \x1c\x03\xb58'
tRp7458
sa(dp7459
S'trial_loop.thisTrialN'
p7460
I75
sg6370
g6585
sS'block_loop.thisIndex'
p7461
g6364
sg38
S'left'
p7462
sg58
g62
sS'trial_loop.thisN'
p7463
I75
sg33
g6500
sg63
g64
sS'trial_loop.thisIndex'
p7464
g59
(g98
S'K\x00\x00\x00'
tRp7465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7466
I0
sg6379
g6592
sS'block_loop.thisRepN'
p7467
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7468
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p7469
Nsg69
Vn
sS'block_loop.thisTrialN'
p7470
I0
sg39
F0.85020162118053122
sg34
g752
(S'\x07\xdf\t\x1c\r "\x0e\t\xc0'
tRp7471
sa(dp7472
S'trial_loop.thisTrialN'
p7473
I76
sg6370
g6536
sS'block_loop.thisIndex'
p7474
g6364
sg38
S'left'
p7475
sg58
g62
sS'trial_loop.thisN'
p7476
I76
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7477
g59
(g98
S'L\x00\x00\x00'
tRp7478
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7479
I0
sg6379
g6543
sS'block_loop.thisRepN'
p7480
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7481
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7482
Nsg69
Vn
sS'block_loop.thisTrialN'
p7483
I0
sg39
F1.3667971654449502
sg34
g752
(S'\x07\xdf\t\x1c\r (\x0c8\xe8'
tRp7484
sa(dp7485
S'trial_loop.thisTrialN'
p7486
I77
sg6370
g7075
sS'block_loop.thisIndex'
p7487
g6364
sg38
S'left'
p7488
sg58
g62
sS'trial_loop.thisN'
p7489
I77
sg33
g6731
sg63
g64
sS'trial_loop.thisIndex'
p7490
g59
(g98
S'M\x00\x00\x00'
tRp7491
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7492
I0
sg6379
g7082
sS'block_loop.thisRepN'
p7493
I2
sg6382
g6731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7494
I2
sg6384
g6738
sg55
g11
sS'block_loop.thisTrial'
p7495
Nsg69
Vn
sS'block_loop.thisTrialN'
p7496
I0
sg39
F0.93343650073256867
sg34
g752
(S'\x07\xdf\t\x1c\r /\x03\x01\x88'
tRp7497
sa(dp7498
S'trial_loop.thisTrialN'
p7499
I78
sg6370
g6950
sS'block_loop.thisIndex'
p7500
g6364
sg38
S'left'
p7501
sg58
g62
sS'trial_loop.thisN'
p7502
I78
sg33
g6795
sg63
g64
sS'trial_loop.thisIndex'
p7503
g59
(g98
S'N\x00\x00\x00'
tRp7504
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7505
I0
sg6379
g6957
sS'block_loop.thisRepN'
p7506
I2
sg6382
g6795
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7507
I2
sg6384
g6802
sg55
g11
sS'block_loop.thisTrial'
p7508
Nsg69
Vn
sS'block_loop.thisTrialN'
p7509
I0
sg39
F0.70018742330830719
sg34
g752
(S'\x07\xdf\t\x1c\r 5\x02\x9f\xe0'
tRp7510
sa(dp7511
S'trial_loop.thisTrialN'
p7512
I79
sg6370
S'19-caramello_redo.png'
p7513
sS'block_loop.thisIndex'
p7514
g6364
sg38
S'right'
p7515
sg58
g62
sS'trial_loop.thisN'
p7516
I79
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p7517
g59
(g98
S'O\x00\x00\x00'
tRp7518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7519
I0
sg6379
S'30-spaghetti_hoops.png'
p7520
sS'block_loop.thisRepN'
p7521
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7522
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p7523
Nsg69
Vn
sS'block_loop.thisTrialN'
p7524
I0
sg39
F1.1172102721884585
sg34
g752
(S'\x07\xdf\t\x1c\r :\r\xaf\xe8'
tRp7525
sa(dp7526
S'trial_loop.thisTrialN'
p7527
I80
sg6370
S'29-beans.png'
p7528
sS'block_loop.thisIndex'
p7529
g6364
sg38
S'right'
p7530
sg58
g62
sS'trial_loop.thisN'
p7531
I80
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p7532
g59
(g98
S'P\x00\x00\x00'
tRp7533
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7534
I0
sg6379
S'46-pistachios.png'
p7535
sS'block_loop.thisRepN'
p7536
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7537
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7538
Nsg69
Vn
sS'block_loop.thisTrialN'
p7539
I0
sg39
F0.73352562231048068
sg34
g752
(S'\x07\xdf\t\x1c\r!\x05\x00\xab\xe0'
tRp7540
sa(dp7541
S'trial_loop.thisTrialN'
p7542
I81
sg6370
g7146
sS'block_loop.thisIndex'
p7543
g6364
sg38
S'right'
p7544
sg58
g62
sS'trial_loop.thisN'
p7545
I81
sg33
g7150
sg63
g64
sS'trial_loop.thisIndex'
p7546
g59
(g98
S'Q\x00\x00\x00'
tRp7547
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7548
I0
sg6379
g7154
sS'block_loop.thisRepN'
p7549
I2
sg6382
g7150
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7550
I2
sg6384
g7157
sg55
g11
sS'block_loop.thisTrial'
p7551
Nsg69
Vn
sS'block_loop.thisTrialN'
p7552
I0
sg39
F0.78385479625831067
sg34
g752
(S'\x07\xdf\t\x1c\r!\n\x0cs\x80'
tRp7553
sa(dp7554
S'trial_loop.thisTrialN'
p7555
I82
sg6370
S'21-nakd_banana_crunch.png'
p7556
sS'block_loop.thisIndex'
p7557
g6364
sg38
S'right'
p7558
sg58
g62
sS'trial_loop.thisN'
p7559
I82
sg33
g6673
sg63
g64
sS'trial_loop.thisIndex'
p7560
g59
(g98
S'R\x00\x00\x00'
tRp7561
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7562
I0
sg6379
S'1-treacle_cookies.png'
p7563
sS'block_loop.thisRepN'
p7564
I2
sg6382
g6673
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7565
I2
sg6384
g6680
sg55
g11
sS'block_loop.thisTrial'
p7566
Nsg69
Vn
sS'block_loop.thisTrialN'
p7567
I0
sg39
F1.1001172322248749
sg34
g752
(S'\x07\xdf\t\x1c\r!\x10\t\xac\x90'
tRp7568
sa(dp7569
S'trial_loop.thisTrialN'
p7570
I83
sg6370
g6489
sS'block_loop.thisIndex'
p7571
g6364
sg38
S'right'
p7572
sg58
g62
sS'trial_loop.thisN'
p7573
I83
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p7574
g59
(g98
S'S\x00\x00\x00'
tRp7575
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7576
I0
sg6379
g6497
sS'block_loop.thisRepN'
p7577
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7578
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p7579
Nsg69
Vn
sS'block_loop.thisTrialN'
p7580
I0
sg39
F0.91686490468600823
sg34
g752
(S'\x07\xdf\t\x1c\r!\x16\x0b\xacH'
tRp7581
sa(dp7582
S'trial_loop.thisTrialN'
p7583
I84
sg6370
g6459
sS'block_loop.thisIndex'
p7584
g6364
sg38
S'left'
p7585
sg58
g62
sS'trial_loop.thisN'
p7586
I84
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p7587
g59
(g98
S'T\x00\x00\x00'
tRp7588
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7589
I0
sg6379
g6467
sS'block_loop.thisRepN'
p7590
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7591
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7592
Nsg69
Vn
sS'block_loop.thisTrialN'
p7593
I0
sg39
F1.4502065248634608
sg34
g752
(S'\x07\xdf\t\x1c\r!\x1c\n\xd1\x88'
tRp7594
sa(dp7595
S'trial_loop.thisTrialN'
p7596
I85
sg6370
g6391
sS'block_loop.thisIndex'
p7597
g6364
sg38
S'right'
p7598
sg58
g62
sS'trial_loop.thisN'
p7599
I85
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p7600
g59
(g98
S'U\x00\x00\x00'
tRp7601
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7602
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7603
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7604
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p7605
Nsg69
Vn
sS'block_loop.thisTrialN'
p7606
I0
sg39
F1.2501901602481666
sg34
g752
(S'\x07\xdf\t\x1c\r!#\x03\x05p'
tRp7607
sa(dp7608
S'trial_loop.thisTrialN'
p7609
I86
sg6370
g7316
sS'block_loop.thisIndex'
p7610
g6364
sg38
S'right'
p7611
sg58
g62
sS'trial_loop.thisN'
p7612
I86
sg33
g6772
sg63
g64
sS'trial_loop.thisIndex'
p7613
g59
(g98
S'V\x00\x00\x00'
tRp7614
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7615
I0
sg6379
g7323
sS'block_loop.thisRepN'
p7616
I2
sg6382
g6765
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7617
I2
sg6384
g6772
sg55
g11
sS'block_loop.thisTrial'
p7618
Nsg69
Vn
sS'block_loop.thisTrialN'
p7619
I0
sg39
F1.0335711239240482
sg34
g752
(S'\x07\xdf\t\x1c\r!)\x07f\x88'
tRp7620
sa(dp7621
S'trial_loop.thisTrialN'
p7622
I87
sg6370
g7146
sS'block_loop.thisIndex'
p7623
g6364
sg38
S'right'
p7624
sg58
g62
sS'trial_loop.thisN'
p7625
I87
sg33
g7150
sg63
g64
sS'trial_loop.thisIndex'
p7626
g59
(g98
S'W\x00\x00\x00'
tRp7627
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7628
I0
sg6379
g7154
sS'block_loop.thisRepN'
p7629
I2
sg6382
g7150
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7630
I2
sg6384
g7157
sg55
g11
sS'block_loop.thisTrial'
p7631
Nsg69
Vn
sS'block_loop.thisTrialN'
p7632
I0
sg39
F0.73353816661438032
sg34
g752
(S'\x07\xdf\t\x1c\r!/\x08t\x10'
tRp7633
sa(dp7634
S'trial_loop.thisTrialN'
p7635
I88
sg6370
g6536
sS'block_loop.thisIndex'
p7636
g6364
sg38
S'left'
p7637
sg58
g62
sS'trial_loop.thisN'
p7638
I88
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7639
g59
(g98
S'X\x00\x00\x00'
tRp7640
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7641
I0
sg6379
g6543
sS'block_loop.thisRepN'
p7642
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7643
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7644
Nsg69
Vn
sS'block_loop.thisTrialN'
p7645
I0
sg39
F1.4667604448441125
sg34
g752
(S'\x07\xdf\t\x1c\r!5\x04\xba\xf0'
tRp7646
sa(dp7647
S'trial_loop.thisTrialN'
p7648
I89
sg6370
g6761
sS'block_loop.thisIndex'
p7649
g6364
sg38
S'left'
p7650
sg58
g62
sS'trial_loop.thisN'
p7651
I89
sg33
g6765
sg63
g64
sS'trial_loop.thisIndex'
p7652
g59
(g98
S'Y\x00\x00\x00'
tRp7653
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7654
I0
sg6379
g6769
sS'block_loop.thisRepN'
p7655
I2
sg6382
g6765
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7656
I2
sg6384
g6772
sg55
g11
sS'block_loop.thisTrial'
p7657
Nsg69
Vn
sS'block_loop.thisTrialN'
p7658
I0
sg39
F2.0335275039560656
sg34
g752
(S'\x07\xdf\t\x1c\r!;\x0co\x98'
tRp7659
sa(dp7660
S'trial_loop.thisTrialN'
p7661
I90
sg6370
g6727
sS'block_loop.thisIndex'
p7662
g6364
sg38
S'right'
p7663
sg58
g62
sS'trial_loop.thisN'
p7664
I90
sg33
g6731
sg63
g64
sS'trial_loop.thisIndex'
p7665
g59
(g98
S'Z\x00\x00\x00'
tRp7666
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7667
I0
sg6379
g6735
sS'block_loop.thisRepN'
p7668
I2
sg6382
g6731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7669
I2
sg6384
g6738
sg55
g11
sS'block_loop.thisTrial'
p7670
Nsg69
Vn
sS'block_loop.thisTrialN'
p7671
I0
sg39
F1.133536969204215
sg34
g752
(S'\x07\xdf\t\x1c\r"\x06\ruP'
tRp7672
sa(dp7673
S'trial_loop.thisTrialN'
p7674
I91
sg6370
g6855
sS'block_loop.thisIndex'
p7675
g6364
sg38
S'left'
p7676
sg58
g62
sS'trial_loop.thisN'
p7677
I91
sg33
g6561
sg63
g64
sS'trial_loop.thisIndex'
p7678
g59
(g98
S'[\x00\x00\x00'
tRp7679
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7680
I0
sg6379
g6862
sS'block_loop.thisRepN'
p7681
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7682
I2
sg6384
g6555
sg55
g11
sS'block_loop.thisTrial'
p7683
Nsg69
Vn
sS'block_loop.thisTrialN'
p7684
I0
sg39
F0.90006294959857769
sg34
g752
(S'\x07\xdf\t\x1c\r"\r\x00\xab\xe0'
tRp7685
sa(dp7686
S'trial_loop.thisTrialN'
p7687
I92
sg6370
g7556
sS'block_loop.thisIndex'
p7688
g6364
sg38
S'right'
p7689
sg58
g62
sS'trial_loop.thisN'
p7690
I92
sg33
g6673
sg63
g64
sS'trial_loop.thisIndex'
p7691
g59
(g98
S'\\\x00\x00\x00'
tRp7692
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7693
I0
sg6379
g7563
sS'block_loop.thisRepN'
p7694
I2
sg6382
g6673
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7695
I2
sg6384
g6680
sg55
g11
sS'block_loop.thisTrial'
p7696
Nsg69
Vn
sS'block_loop.thisTrialN'
p7697
I0
sg39
F1.3835837252463534
sg34
g752
(S'\x07\xdf\t\x1c\r"\x12\x0f\x13`'
tRp7698
sa(dp7699
S'trial_loop.thisTrialN'
p7700
I93
sg6370
g7528
sS'block_loop.thisIndex'
p7701
g6364
sg38
S'right'
p7702
sg58
g62
sS'trial_loop.thisN'
p7703
I93
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7704
g59
(g98
S']\x00\x00\x00'
tRp7705
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7706
I0
sg6379
g7535
sS'block_loop.thisRepN'
p7707
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7708
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7709
Nsg69
Vn
sS'block_loop.thisTrialN'
p7710
I0
sg39
F1.1834256670135801
sg34
g752
(S'\x07\xdf\t\x1c\r"\x19\x06\x16\x98'
tRp7711
sa(dp7712
S'trial_loop.thisTrialN'
p7713
I94
sg6370
g6744
sS'block_loop.thisIndex'
p7714
g6364
sg38
S'right'
p7715
sg58
g62
sS'trial_loop.thisN'
p7716
I94
sg33
g6748
sg63
g64
sS'trial_loop.thisIndex'
p7717
g59
(g98
S'^\x00\x00\x00'
tRp7718
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7719
I0
sg6379
g6752
sS'block_loop.thisRepN'
p7720
I2
sg6382
g6748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7721
I2
sg6384
g6755
sg55
g11
sS'block_loop.thisTrial'
p7722
Nsg69
Vn
sS'block_loop.thisTrialN'
p7723
I0
sg39
F1.3834713967062271
sg34
g752
(S'\x07\xdf\t\x1c\r"\x1f\tG\x00'
tRp7724
sa(dp7725
S'trial_loop.thisTrialN'
p7726
I95
sg6370
g7131
sS'block_loop.thisIndex'
p7727
g6364
sg38
S'left'
p7728
sg58
g62
sS'trial_loop.thisN'
p7729
I95
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7730
g59
(g98
S'_\x00\x00\x00'
tRp7731
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7732
I0
sg6379
g7138
sS'block_loop.thisRepN'
p7733
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7734
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7735
Nsg69
Vn
sS'block_loop.thisTrialN'
p7736
I0
sg39
F1.1668477988168888
sg34
g752
(S'\x07\xdf\t\x1c\r"&\x00\x88\xb8'
tRp7737
sa(dp7738
S'trial_loop.thisTrialN'
p7739
I96
sg6370
g7230
sS'block_loop.thisIndex'
p7740
g6364
sg38
S'left'
p7741
sg58
g62
sS'trial_loop.thisN'
p7742
I96
sg33
g7150
sg63
g64
sS'trial_loop.thisIndex'
p7743
g59
(g98
S'`\x00\x00\x00'
tRp7744
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7745
I0
sg6379
g7237
sS'block_loop.thisRepN'
p7746
I2
sg6382
g7150
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7747
I2
sg6384
g7157
sg55
g11
sS'block_loop.thisTrial'
p7748
Nsg69
Vn
sS'block_loop.thisTrialN'
p7749
I0
sg39
F0.98357950579884346
sg34
g752
(S'\x07\xdf\t\x1c\r",\x03~\x88'
tRp7750
sa(dp7751
S'trial_loop.thisTrialN'
p7752
I97
sg6370
g6669
sS'block_loop.thisIndex'
p7753
g6364
sg38
S'left'
p7754
sg58
g62
sS'trial_loop.thisN'
p7755
I97
sg33
g6680
sg63
g64
sS'trial_loop.thisIndex'
p7756
g59
(g98
S'a\x00\x00\x00'
tRp7757
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7758
I0
sg6379
g6677
sS'block_loop.thisRepN'
p7759
I2
sg6382
g6673
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7760
I2
sg6384
g6680
sg55
g11
sS'block_loop.thisTrial'
p7761
Nsg69
Vn
sS'block_loop.thisTrialN'
p7762
I0
sg39
F1.000190730443137
sg34
g752
(S'\x07\xdf\t\x1c\r"2\x03\xd0\x90'
tRp7763
sa(dp7764
S'trial_loop.thisTrialN'
p7765
I98
sg6370
g6727
sS'block_loop.thisIndex'
p7766
g6364
sg38
S'right'
p7767
sg58
g62
sS'trial_loop.thisN'
p7768
I98
sg33
g6731
sg63
g64
sS'trial_loop.thisIndex'
p7769
g59
(g98
S'b\x00\x00\x00'
tRp7770
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7771
I0
sg6379
g6735
sS'block_loop.thisRepN'
p7772
I2
sg6382
g6731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7773
I2
sg6384
g6738
sg55
g11
sS'block_loop.thisTrial'
p7774
Nsg69
Vn
sS'block_loop.thisTrialN'
p7775
I0
sg39
F0.86676466429162247
sg34
g752
(S'\x07\xdf\t\x1c\r"8\x04a\x18'
tRp7776
sa(dp7777
S'trial_loop.thisTrialN'
p7778
I99
sg6370
g6551
sS'block_loop.thisIndex'
p7779
g6364
sg38
S'right'
p7780
sg58
g62
sS'trial_loop.thisN'
p7781
I99
sg33
g6555
sg63
g64
sS'trial_loop.thisIndex'
p7782
g59
(g98
S'c\x00\x00\x00'
tRp7783
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7784
I0
sg6379
g6559
sS'block_loop.thisRepN'
p7785
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7786
I2
sg6384
g6555
sg55
g11
sS'block_loop.thisTrial'
p7787
Nsg69
Vn
sS'block_loop.thisTrialN'
p7788
I0
sg39
F0.86722823335003341
sg34
g752
(S'\x07\xdf\t\x1c\r#\x02\x02\xce\xc0'
tRp7789
sa(dp7790
S'trial_loop.thisTrialN'
p7791
I100
sg6370
g7275
sS'block_loop.thisIndex'
p7792
g6364
sg38
S'left'
p7793
sg58
g62
sS'trial_loop.thisN'
p7794
I100
sg33
g7023
sg63
g64
sS'trial_loop.thisIndex'
p7795
g59
(g98
S'd\x00\x00\x00'
tRp7796
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7797
I0
sg6379
g7282
sS'block_loop.thisRepN'
p7798
I2
sg6382
g7023
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7799
I2
sg6384
g7030
sg55
g11
sS'block_loop.thisTrial'
p7800
Nsg69
Vn
sS'block_loop.thisTrialN'
p7801
I0
sg39
F1.2501904453456518
sg34
g752
(S'\x07\xdf\t\x1c\r#\x08\x01<h'
tRp7802
sa(dp7803
S'trial_loop.thisTrialN'
p7804
I101
sg6370
g6883
sS'block_loop.thisIndex'
p7805
g6364
sg38
S'left'
p7806
sg58
g62
sS'trial_loop.thisN'
p7807
I101
sg33
g6748
sg63
g64
sS'trial_loop.thisIndex'
p7808
g59
(g98
S'e\x00\x00\x00'
tRp7809
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7810
I0
sg6379
g6890
sS'block_loop.thisRepN'
p7811
I2
sg6382
g6748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7812
I2
sg6384
g6755
sg55
g11
sS'block_loop.thisTrial'
p7813
Nsg69
Vn
sS'block_loop.thisTrialN'
p7814
I0
sg39
F2.183399152918355
sg34
g752
(S'\x07\xdf\t\x1c\r#\x0e\x05\x9d\x80'
tRp7815
sa(dp7816
S'trial_loop.thisTrialN'
p7817
I102
sg6370
g6686
sS'block_loop.thisIndex'
p7818
g6364
sg38
S'left'
p7819
sg58
g62
sS'trial_loop.thisN'
p7820
I102
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p7821
g59
(g98
S'f\x00\x00\x00'
tRp7822
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7823
I0
sg6379
g6693
sS'block_loop.thisRepN'
p7824
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7825
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p7826
Nsg69
Vn
sS'block_loop.thisTrialN'
p7827
I0
sg39
F1.0168515621080587
sg34
g752
(S'\x07\xdf\t\x1c\r#\x15\x08\xc6\x18'
tRp7828
sa(dp7829
S'trial_loop.thisTrialN'
p7830
I103
sg6370
g7528
sS'block_loop.thisIndex'
p7831
g6364
sg38
S'right'
p7832
sg58
g62
sS'trial_loop.thisN'
p7833
I103
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p7834
g59
(g98
S'g\x00\x00\x00'
tRp7835
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7836
I0
sg6379
g7535
sS'block_loop.thisRepN'
p7837
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7838
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7839
Nsg69
Vn
sS'block_loop.thisTrialN'
p7840
I0
sg39
F1.7668153546837857
sg34
g752
(S'\x07\xdf\t\x1c\r#\x1b\t\x95 '
tRp7841
sa(dp7842
S'trial_loop.thisTrialN'
p7843
I104
sg6370
g7245
sS'block_loop.thisIndex'
p7844
g6364
sg38
S'right'
p7845
sg58
g62
sS'trial_loop.thisN'
p7846
I104
sg33
g6530
sg63
g64
sS'trial_loop.thisIndex'
p7847
g59
(g98
S'h\x00\x00\x00'
tRp7848
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7849
I0
sg6379
g7252
sS'block_loop.thisRepN'
p7850
I2
sg6382
g6523
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7851
I2
sg6384
g6530
sg55
g11
sS'block_loop.thisTrial'
p7852
Nsg69
Vn
sS'block_loop.thisTrialN'
p7853
I0
sg39
F0.90024854828152456
sg34
g752
(S'\x07\xdf\t\x1c\r#"\x06\x8b\xc8'
tRp7854
sa(dp7855
S'trial_loop.thisTrialN'
p7856
I105
sg6370
g7146
sS'block_loop.thisIndex'
p7857
g6364
sg38
S'right'
p7858
sg58
g62
sS'trial_loop.thisN'
p7859
I105
sg33
g7157
sg63
g64
sS'trial_loop.thisIndex'
p7860
g59
(g98
S'i\x00\x00\x00'
tRp7861
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7862
I0
sg6379
g7154
sS'block_loop.thisRepN'
p7863
I2
sg6382
g7150
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7864
I2
sg6384
g7157
sg55
g11
sS'block_loop.thisTrial'
p7865
Nsg69
Vn
sS'block_loop.thisTrialN'
p7866
I0
sg39
F0.90020122204259678
sg34
g752
(S'\x07\xdf\t\x1c\r#(\x05r\x88'
tRp7867
sa(dp7868
S'trial_loop.thisTrialN'
p7869
I106
sg6370
g6855
sS'block_loop.thisIndex'
p7870
g6364
sg38
S'left'
p7871
sg58
g62
sS'trial_loop.thisN'
p7872
I106
sg33
g6561
sg63
g64
sS'trial_loop.thisIndex'
p7873
g59
(g98
S'j\x00\x00\x00'
tRp7874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7875
I0
sg6379
g6862
sS'block_loop.thisRepN'
p7876
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7877
I2
sg6384
g6555
sg55
g11
sS'block_loop.thisTrial'
p7878
Nsg69
Vn
sS'block_loop.thisTrialN'
p7879
I0
sg39
F1.0835060075805814
sg34
g752
(S'\x07\xdf\t\x1c\r#.\x04\x97\xc8'
tRp7880
sa(dp7881
S'trial_loop.thisTrialN'
p7882
I107
sg6370
S'20-fruit_pastilles.png'
p7883
sS'block_loop.thisIndex'
p7884
g6364
sg38
S'right'
p7885
sg58
g62
sS'trial_loop.thisN'
p7886
I107
sg33
g6825
sg63
g64
sS'trial_loop.thisIndex'
p7887
g59
(g98
S'k\x00\x00\x00'
tRp7888
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7889
I0
sg6379
S'2-steamed_puddings.png'
p7890
sS'block_loop.thisRepN'
p7891
I2
sg6382
g6825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7892
I2
sg6384
g6832
sg55
g11
sS'block_loop.thisTrial'
p7893
Nsg69
Vn
sS'block_loop.thisTrialN'
p7894
I0
sg39
F0.90009117428417085
sg34
g752
(S'\x07\xdf\t\x1c\r#4\x06Y\x00'
tRp7895
sa(dp7896
S'trial_loop.thisTrialN'
p7897
I108
sg6370
g7316
sS'block_loop.thisIndex'
p7898
g6364
sg38
S'right'
p7899
sg58
g62
sS'trial_loop.thisN'
p7900
I108
sg33
g6765
sg63
g64
sS'trial_loop.thisIndex'
p7901
g59
(g98
S'l\x00\x00\x00'
tRp7902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7903
I0
sg6379
g7323
sS'block_loop.thisRepN'
p7904
I2
sg6382
g6765
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7905
I2
sg6384
g6772
sg55
g11
sS'block_loop.thisTrial'
p7906
Nsg69
Vn
sS'block_loop.thisTrialN'
p7907
I0
sg39
F0.93354882927451399
sg34
g752
(S'\x07\xdf\t\x1c\r#:\x05?\xc0'
tRp7908
sa(dp7909
S'trial_loop.thisTrialN'
p7910
I109
sg6370
g7075
sS'block_loop.thisIndex'
p7911
g6364
sg38
S'left'
p7912
sg58
g62
sS'trial_loop.thisN'
p7913
I109
sg33
g6731
sg63
g64
sS'trial_loop.thisIndex'
p7914
g59
(g98
S'm\x00\x00\x00'
tRp7915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7916
I0
sg6379
g7082
sS'block_loop.thisRepN'
p7917
I2
sg6382
g6731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7918
I2
sg6384
g6738
sg55
g11
sS'block_loop.thisTrial'
p7919
Nsg69
Vn
sS'block_loop.thisTrialN'
p7920
I0
sg39
F0.81679727948176151
sg34
g752
(S'\x07\xdf\t\x1c\r$\x04\x04\xde\x18'
tRp7921
sa(dp7922
S'trial_loop.thisTrialN'
p7923
I110
sg6370
g6519
sS'block_loop.thisIndex'
p7924
g6364
sg38
S'left'
p7925
sg58
g62
sS'trial_loop.thisN'
p7926
I110
sg33
g6523
sg63
g64
sS'trial_loop.thisIndex'
p7927
g59
(g98
S'n\x00\x00\x00'
tRp7928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7929
I0
sg6379
g6527
sS'block_loop.thisRepN'
p7930
I2
sg6382
g6523
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7931
I2
sg6384
g6530
sg55
g11
sS'block_loop.thisTrial'
p7932
Nsg69
Vn
sS'block_loop.thisTrialN'
p7933
I0
sg39
F0.83327849951820099
sg34
g752
(S'\x07\xdf\t\x1c\r$\n\x02\x94('
tRp7934
sa(dp7935
S'trial_loop.thisTrialN'
p7936
I111
sg6370
g7556
sS'block_loop.thisIndex'
p7937
g6364
sg38
S'right'
p7938
sg58
g62
sS'trial_loop.thisN'
p7939
I111
sg33
g6673
sg63
g64
sS'trial_loop.thisIndex'
p7940
g59
(g98
S'o\x00\x00\x00'
tRp7941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7942
I0
sg6379
g7563
sS'block_loop.thisRepN'
p7943
I2
sg6382
g6673
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7944
I2
sg6384
g6680
sg55
g11
sS'block_loop.thisTrial'
p7945
Nsg69
Vn
sS'block_loop.thisTrialN'
p7946
I0
sg39
F0.85022899057184986
sg34
g752
(S'\x07\xdf\t\x1c\r$\x10\x00\x88\xb8'
tRp7947
sa(dp7948
S'trial_loop.thisTrialN'
p7949
I112
sg6370
g7131
sS'block_loop.thisIndex'
p7950
g6364
sg38
S'left'
p7951
sg58
g62
sS'trial_loop.thisN'
p7952
I112
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7953
g59
(g98
S'p\x00\x00\x00'
tRp7954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7955
I0
sg6379
g7138
sS'block_loop.thisRepN'
p7956
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7957
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7958
Nsg69
Vn
sS'block_loop.thisTrialN'
p7959
I0
sg39
F0.633551794291634
sg34
g752
(S'\x07\xdf\t\x1c\r$\x15\r\xfa '
tRp7960
sa(dp7961
S'trial_loop.thisTrialN'
p7962
I113
sg6370
g6855
sS'block_loop.thisIndex'
p7963
g6364
sg38
S'left'
p7964
sg58
g62
sS'trial_loop.thisN'
p7965
I113
sg33
g6561
sg63
g64
sS'trial_loop.thisIndex'
p7966
g59
(g98
S'q\x00\x00\x00'
tRp7967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7968
I0
sg6379
g6862
sS'block_loop.thisRepN'
p7969
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7970
I2
sg6384
g6555
sg55
g11
sS'block_loop.thisTrial'
p7971
Nsg69
Vn
sS'block_loop.thisTrialN'
p7972
I0
sg39
F0.95013382491742959
sg34
g752
(S'\x07\xdf\t\x1c\r$\x1b\x08\xd5\xb8'
tRp7973
sa(dp7974
S'trial_loop.thisTrialN'
p7975
I114
sg6370
g7103
sS'block_loop.thisIndex'
p7976
g6364
sg38
S'left'
p7977
sg58
g62
sS'trial_loop.thisN'
p7978
I114
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7979
g59
(g98
S'r\x00\x00\x00'
tRp7980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7981
I0
sg6379
g7110
sS'block_loop.thisRepN'
p7982
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7983
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7984
Nsg69
Vn
sS'block_loop.thisTrialN'
p7985
I0
sg39
F0.95016803665748739
sg34
g752
(S'\x07\xdf\t\x1c\r$!\x08\xae\xa8'
tRp7986
sa(dp7987
S'trial_loop.thisTrialN'
p7988
I115
sg6370
g7883
sS'block_loop.thisIndex'
p7989
g6364
sg38
S'right'
p7990
sg58
g62
sS'trial_loop.thisN'
p7991
I115
sg33
g6832
sg63
g64
sS'trial_loop.thisIndex'
p7992
g59
(g98
S's\x00\x00\x00'
tRp7993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7994
I0
sg6379
g7890
sS'block_loop.thisRepN'
p7995
I2
sg6382
g6825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7996
I2
sg6384
g6832
sg55
g11
sS'block_loop.thisTrial'
p7997
Nsg69
Vn
sS'block_loop.thisTrialN'
p7998
I0
sg39
F0.85013633377820952
sg34
g752
(S"\x07\xdf\t\x1c\r$'\x08M\x00"
tRp7999
sa(dp8000
S'trial_loop.thisTrialN'
p8001
I116
sg6370
g7275
sS'block_loop.thisIndex'
p8002
g6364
sg38
S'left'
p8003
sg58
g62
sS'trial_loop.thisN'
p8004
I116
sg33
g7023
sg63
g64
sS'trial_loop.thisIndex'
p8005
g59
(g98
S't\x00\x00\x00'
tRp8006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8007
I0
sg6379
g7282
sS'block_loop.thisRepN'
p8008
I2
sg6382
g7023
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8009
I2
sg6384
g7030
sg55
g11
sS'block_loop.thisTrial'
p8010
Nsg69
Vn
sS'block_loop.thisTrialN'
p8011
I0
sg39
F0.91688286584940215
sg34
g752
(S'\x07\xdf\t\x1c\r$-\x06|('
tRp8012
sa(dp8013
S'trial_loop.thisTrialN'
p8014
I117
sg6370
g6408
sS'block_loop.thisIndex'
p8015
g6364
sg38
S'right'
p8016
sg58
g62
sS'trial_loop.thisN'
p8017
I117
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8018
g59
(g98
S'u\x00\x00\x00'
tRp8019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8020
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8021
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8022
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8023
Nsg69
Vn
sS'block_loop.thisTrialN'
p8024
I0
sg39
F0.90022859143573442
sg34
g752
(S'\x07\xdf\t\x1c\r$3\x05\xdc\x00'
tRp8025
sa(dp8026
S'trial_loop.thisTrialN'
p8027
I118
sg6370
g6791
sS'block_loop.thisIndex'
p8028
g6364
sg38
S'right'
p8029
sg58
g62
sS'trial_loop.thisN'
p8030
I118
sg33
g6795
sg63
g64
sS'trial_loop.thisIndex'
p8031
g59
(g98
S'v\x00\x00\x00'
tRp8032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8033
I0
sg6379
g6799
sS'block_loop.thisRepN'
p8034
I2
sg6382
g6795
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8035
I2
sg6384
g6802
sg55
g11
sS'block_loop.thisTrial'
p8036
Nsg69
Vn
sS'block_loop.thisTrialN'
p8037
I0
sg39
F0.98344094825915818
sg34
g752
(S'\x07\xdf\t\x1c\r$9\x04\xc2\xc0'
tRp8038
sa(dp8039
S'trial_loop.thisTrialN'
p8040
I119
sg6370
g7189
sS'block_loop.thisIndex'
p8041
g6364
sg38
S'right'
p8042
sg58
g62
sS'trial_loop.thisN'
p8043
I119
sg33
g6842
sg63
g64
sS'trial_loop.thisIndex'
p8044
g59
(g98
S'w\x00\x00\x00'
tRp8045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8046
I0
sg6379
g7196
sS'block_loop.thisRepN'
p8047
I2
sg6382
g6842
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8048
I2
sg6384
g6849
sg55
g11
sS'block_loop.thisTrial'
p8049
Nsg69
Vn
sS'block_loop.thisTrialN'
p8050
I0
sg39
F0.89999766219807498
sg34
g752
(S'\x07\xdf\t\x1c\r%\x03\x05\x18\xb0'
tRp8051
sa(dp8052
S'trial_loop.thisTrialN'
p8053
I120
sg6370
g6536
sS'block_loop.thisIndex'
p8054
g6364
sg38
S'left'
p8055
sg58
g62
sS'trial_loop.thisN'
p8056
I120
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8057
g59
(g98
S'x\x00\x00\x00'
tRp8058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8059
I0
sg6379
g6543
sS'block_loop.thisRepN'
p8060
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8061
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8062
Nsg69
Vn
sS'block_loop.thisTrialN'
p8063
I0
sg39
F1.7833447562534275
sg34
g752
(S'\x07\xdf\t\x1c\r%\t\x03\xffp'
tRp8064
sa(dp8065
S'trial_loop.thisTrialN'
p8066
I121
sg6370
g6568
sS'block_loop.thisIndex'
p8067
g6364
sg38
S'right'
p8068
sg58
g62
sS'trial_loop.thisN'
p8069
I121
sg33
g6572
sg63
g64
sS'trial_loop.thisIndex'
p8070
g59
(g98
S'y\x00\x00\x00'
tRp8071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8072
I0
sg6379
g6576
sS'block_loop.thisRepN'
p8073
I2
sg6382
g6572
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8074
I2
sg6384
g6579
sg55
g11
sS'block_loop.thisTrial'
p8075
Nsg69
Vn
sS'block_loop.thisTrialN'
p8076
I0
sg39
F2.4168822956526128
sg34
g752
(S'\x07\xdf\t\x1c\r%\x10\x014\x98'
tRp8077
sa(dp8078
S'trial_loop.thisTrialN'
p8079
I122
sg6370
g6686
sS'block_loop.thisIndex'
p8080
g6364
sg38
S'left'
p8081
sg58
g62
sS'trial_loop.thisN'
p8082
I122
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p8083
g59
(g98
S'z\x00\x00\x00'
tRp8084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8085
I0
sg6379
g6693
sS'block_loop.thisRepN'
p8086
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8087
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p8088
Nsg69
Vn
sS'block_loop.thisTrialN'
p8089
I0
sg39
F2.6170719997444394
sg34
g752
(S'\x07\xdf\t\x1c\r%\x17\x08-\xc0'
tRp8090
sa(dp8091
S'trial_loop.thisTrialN'
p8092
I123
sg6370
g6761
sS'block_loop.thisIndex'
p8093
g6364
sg38
S'left'
p8094
sg58
g62
sS'trial_loop.thisN'
p8095
I123
sg33
g6765
sg63
g64
sS'trial_loop.thisIndex'
p8096
g59
(g98
S'{\x00\x00\x00'
tRp8097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8098
I0
sg6379
g6769
sS'block_loop.thisRepN'
p8099
I2
sg6382
g6765
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8100
I2
sg6384
g6772
sg55
g11
sS'block_loop.thisTrial'
p8101
Nsg69
Vn
sS'block_loop.thisTrialN'
p8102
I0
sg39
F1.2334158596495399
sg34
g752
(S'\x07\xdf\t\x1c\r%\x1f\x02\xbf '
tRp8103
sa(dp8104
S'trial_loop.thisTrialN'
p8105
I124
sg6370
g6791
sS'block_loop.thisIndex'
p8106
g6364
sg38
S'right'
p8107
sg58
g62
sS'trial_loop.thisN'
p8108
I124
sg33
g6795
sg63
g64
sS'trial_loop.thisIndex'
p8109
g59
(g98
S'|\x00\x00\x00'
tRp8110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8111
I0
sg6379
g6799
sS'block_loop.thisRepN'
p8112
I2
sg6382
g6795
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8113
I2
sg6384
g6802
sg55
g11
sS'block_loop.thisTrial'
p8114
Nsg69
Vn
sS'block_loop.thisTrialN'
p8115
I0
sg39
F0.71663671238820825
sg34
g752
(S'\x07\xdf\t\x1c\r%%\x06\xe1\xb8'
tRp8116
sa(dp8117
S'trial_loop.thisTrialN'
p8118
I125
sg6370
g6744
sS'block_loop.thisIndex'
p8119
g6364
sg38
S'right'
p8120
sg58
g62
sS'trial_loop.thisN'
p8121
I125
sg33
g6755
sg63
g64
sS'trial_loop.thisIndex'
p8122
g59
(g98
S'}\x00\x00\x00'
tRp8123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8124
I0
sg6379
g6752
sS'block_loop.thisRepN'
p8125
I2
sg6382
g6748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8126
I2
sg6384
g6755
sg55
g11
sS'block_loop.thisTrial'
p8127
Nsg69
Vn
sS'block_loop.thisTrialN'
p8128
I0
sg39
F0.85007788872644596
sg34
g752
(S'\x07\xdf\t\x1c\r%+\x02\xee\x00'
tRp8129
sa(dp8130
S'trial_loop.thisTrialN'
p8131
I126
sg6370
g6371
sS'block_loop.thisIndex'
p8132
g6364
sg38
S'right'
p8133
sg58
g62
sS'trial_loop.thisN'
p8134
I126
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8135
g59
(g98
S'~\x00\x00\x00'
tRp8136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8137
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8138
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8139
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8140
Nsg69
Vn
sS'block_loop.thisTrialN'
p8141
I0
sg39
F0.83355304872202396
sg34
g752
(S'\x07\xdf\t\x1c\r%1\x01\x1d('
tRp8142
sa(dp8143
S'trial_loop.thisTrialN'
p8144
I127
sg6370
g6519
sS'block_loop.thisIndex'
p8145
g6364
sg38
S'left'
p8146
sg58
g62
sS'trial_loop.thisN'
p8147
I127
sg33
g6523
sg63
g64
sS'trial_loop.thisIndex'
p8148
g59
(g98
S'\x7f\x00\x00\x00'
tRp8149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8150
I0
sg6379
g6527
sS'block_loop.thisRepN'
p8151
I2
sg6382
g6523
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8152
I2
sg6384
g6530
sg55
g11
sS'block_loop.thisTrial'
p8153
Nsg69
Vn
sS'block_loop.thisTrialN'
p8154
I0
sg39
F0.79984308215716737
sg34
g752
(S'\x07\xdf\t\x1c\r%6\x0e\x8e\x90'
tRp8155
sa(dp8156
S'trial_loop.thisTrialN'
p8157
I128
sg6370
g7556
sS'block_loop.thisIndex'
p8158
g6364
sg38
S'right'
p8159
sg58
g62
sS'trial_loop.thisN'
p8160
I128
sg33
g6673
sg63
g64
sS'trial_loop.thisIndex'
p8161
g59
(g98
S'\x80\x00\x00\x00'
tRp8162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8163
I0
sg6379
g7563
sS'block_loop.thisRepN'
p8164
I2
sg6382
g6673
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8165
I2
sg6384
g6680
sg55
g11
sS'block_loop.thisTrial'
p8166
Nsg69
Vn
sS'block_loop.thisTrialN'
p8167
I0
sg39
F1.2000956218089414
sg34
g752
(S'\x07\xdf\t\x1c\r&\x00\x0b\xcb\x88'
tRp8168
sa(dp8169
S'trial_loop.thisTrialN'
p8170
I129
sg6370
g6821
sS'block_loop.thisIndex'
p8171
g6364
sg38
S'left'
p8172
sg58
g62
sS'trial_loop.thisN'
p8173
I129
sg33
g6825
sg63
g64
sS'trial_loop.thisIndex'
p8174
g59
(g98
S'\x81\x00\x00\x00'
tRp8175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8176
I0
sg6379
g6829
sS'block_loop.thisRepN'
p8177
I2
sg6382
g6825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8178
I2
sg6384
g6832
sg55
g11
sS'block_loop.thisTrial'
p8179
Nsg69
Vn
sS'block_loop.thisTrialN'
p8180
I0
sg39
F1.3002068669811706
sg34
g752
(S'\x07\xdf\t\x1c\r&\x07\x002\xc8'
tRp8181
sa(dp8182
S'trial_loop.thisTrialN'
p8183
I130
sg6370
g6686
sS'block_loop.thisIndex'
p8184
g6364
sg38
S'left'
p8185
sg58
g62
sS'trial_loop.thisN'
p8186
I130
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p8187
g59
(g98
S'\x82\x00\x00\x00'
tRp8188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8189
I0
sg6379
g6693
sS'block_loop.thisRepN'
p8190
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8191
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p8192
Nsg69
Vn
sS'block_loop.thisTrialN'
p8193
I0
sg39
F0.76677772177208681
sg34
g752
(S'\x07\xdf\t\x1c\r&\r\x05Kx'
tRp8194
sa(dp8195
S'trial_loop.thisTrialN'
p8196
I131
sg6370
g7513
sS'block_loop.thisIndex'
p8197
g6364
sg38
S'right'
p8198
sg58
g62
sS'trial_loop.thisN'
p8199
I131
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p8200
g59
(g98
S'\x83\x00\x00\x00'
tRp8201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8202
I0
sg6379
g7520
sS'block_loop.thisRepN'
p8203
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8204
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p8205
Nsg69
Vn
sS'block_loop.thisTrialN'
p8206
I0
sg39
F1.5835168412995699
sg34
g752
(S'\x07\xdf\t\x1c\r&\x13\x02I\xf0'
tRp8207
sa(dp8208
S'trial_loop.thisTrialN'
p8209
I132
sg6370
g7316
sS'block_loop.thisIndex'
p8210
g6364
sg38
S'right'
p8211
sg58
g62
sS'trial_loop.thisN'
p8212
I132
sg33
g6765
sg63
g64
sS'trial_loop.thisIndex'
p8213
g59
(g98
S'\x84\x00\x00\x00'
tRp8214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8215
I0
sg6379
g7323
sS'block_loop.thisRepN'
p8216
I2
sg6382
g6765
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8217
I2
sg6384
g6772
sg55
g11
sS'block_loop.thisTrial'
p8218
Nsg69
Vn
sS'block_loop.thisTrialN'
p8219
I0
sg39
F2.1168251050294202
sg34
g752
(S'\x07\xdf\t\x1c\r&\x19\x0b\xacH'
tRp8220
sa(dp8221
S'trial_loop.thisTrialN'
p8222
I133
sg6370
g7556
sS'block_loop.thisIndex'
p8223
g6364
sg38
S'right'
p8224
sg58
g62
sS'trial_loop.thisN'
p8225
I133
sg33
g6673
sg63
g64
sS'trial_loop.thisIndex'
p8226
g59
(g98
S'\x85\x00\x00\x00'
tRp8227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8228
I0
sg6379
g7563
sS'block_loop.thisRepN'
p8229
I2
sg6382
g6673
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8230
I2
sg6384
g6680
sg55
g11
sS'block_loop.thisTrial'
p8231
Nsg69
Vn
sS'block_loop.thisTrialN'
p8232
I0
sg39
F0.85027831249499286
sg34
g752
(S'\x07\xdf\t\x1c\r& \r\xde\xc8'
tRp8233
sa(dp8234
S'trial_loop.thisTrialN'
p8235
I134
sg6370
g7004
sS'block_loop.thisIndex'
p8236
g6364
sg38
S'left'
p8237
sg58
g62
sS'trial_loop.thisN'
p8238
I134
sg33
g6579
sg63
g64
sS'trial_loop.thisIndex'
p8239
g59
(g98
S'\x86\x00\x00\x00'
tRp8240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8241
I0
sg6379
g7011
sS'block_loop.thisRepN'
p8242
I2
sg6382
g6572
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8243
I2
sg6384
g6579
sg55
g11
sS'block_loop.thisTrial'
p8244
Nsg69
Vn
sS'block_loop.thisTrialN'
p8245
I0
sg39
F1.0668485970909387
sg34
g752
(S'\x07\xdf\t\x1c\r&&\x0c\x11\xd8'
tRp8246
sa(dp8247
S'trial_loop.thisTrialN'
p8248
I135
sg6370
g6761
sS'block_loop.thisIndex'
p8249
g6364
sg38
S'right'
p8250
sg58
g62
sS'trial_loop.thisN'
p8251
I135
sg33
g6765
sg63
g64
sS'trial_loop.thisIndex'
p8252
g59
(g98
S'\x87\x00\x00\x00'
tRp8253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8254
I0
sg6379
g6769
sS'block_loop.thisRepN'
p8255
I2
sg6382
g6765
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8256
I2
sg6384
g6772
sg55
g11
sS'block_loop.thisTrial'
p8257
Nsg69
Vn
sS'block_loop.thisTrialN'
p8258
I0
sg39
F0.70020281859251554
sg34
g752
(S'\x07\xdf\t\x1c\r&,\r\x94\x90'
tRp8259
sa(dp8260
S'trial_loop.thisTrialN'
p8261
I136
sg6370
g7275
sS'block_loop.thisIndex'
p8262
g6364
sg38
S'left'
p8263
sg58
g62
sS'trial_loop.thisN'
p8264
I136
sg33
g7030
sg63
g64
sS'trial_loop.thisIndex'
p8265
g59
(g98
S'\x88\x00\x00\x00'
tRp8266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8267
I0
sg6379
g7282
sS'block_loop.thisRepN'
p8268
I2
sg6382
g7023
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8269
I2
sg6384
g7030
sg55
g11
sS'block_loop.thisTrial'
p8270
Nsg69
Vn
sS'block_loop.thisTrialN'
p8271
I0
sg39
F0.78353662708650518
sg34
g752
(S'\x07\xdf\t\x1c\r&2\t\xa0\xd8'
tRp8272
sa(dp8273
S'trial_loop.thisTrialN'
p8274
I137
sg6370
g7245
sS'block_loop.thisIndex'
p8275
g6364
sg38
S'right'
p8276
sg58
g62
sS'trial_loop.thisN'
p8277
I137
sg33
g6523
sg63
g64
sS'trial_loop.thisIndex'
p8278
g59
(g98
S'\x89\x00\x00\x00'
tRp8279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8280
I0
sg6379
g7252
sS'block_loop.thisRepN'
p8281
I2
sg6382
g6523
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8282
I2
sg6384
g6530
sg55
g11
sS'block_loop.thisTrial'
p8283
Nsg69
Vn
sS'block_loop.thisTrialN'
p8284
I0
sg39
F0.7665892721106502
sg34
g752
(S'\x07\xdf\t\x1c\r&8\x06\xdd\xd0'
tRp8285
sa(dp8286
S'trial_loop.thisTrialN'
p8287
I138
sg6370
g7103
sS'block_loop.thisIndex'
p8288
g6364
sg38
S'left'
p8289
sg58
g62
sS'trial_loop.thisN'
p8290
I138
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p8291
g59
(g98
S'\x8a\x00\x00\x00'
tRp8292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8293
I0
sg6379
g7110
sS'block_loop.thisRepN'
p8294
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8295
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8296
Nsg69
Vn
sS'block_loop.thisTrialN'
p8297
I0
sg39
F0.93329309652835946
sg34
g752
(S"\x07\xdf\t\x1c\r'\x02\x03\xdcH"
tRp8298
sa(dp8299
S'trial_loop.thisTrialN'
p8300
I139
sg6370
g7004
sS'block_loop.thisIndex'
p8301
g6364
sg38
S'left'
p8302
sg58
g62
sS'trial_loop.thisN'
p8303
I139
sg33
g6572
sg63
g64
sS'trial_loop.thisIndex'
p8304
g59
(g98
S'\x8b\x00\x00\x00'
tRp8305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8306
I0
sg6379
g7011
sS'block_loop.thisRepN'
p8307
I2
sg6382
g6572
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8308
I2
sg6384
g6579
sg55
g11
sS'block_loop.thisTrial'
p8309
Nsg69
Vn
sS'block_loop.thisTrialN'
p8310
I0
sg39
F0.96680777108304028
sg34
g752
(S"\x07\xdf\t\x1c\r'\x08\x03< "
tRp8311
sa(dp8312
S'trial_loop.thisTrialN'
p8313
I140
sg6370
g7189
sS'block_loop.thisIndex'
p8314
g6364
sg38
S'right'
p8315
sg58
g62
sS'trial_loop.thisN'
p8316
I140
sg33
g6849
sg63
g64
sS'trial_loop.thisIndex'
p8317
g59
(g98
S'\x8c\x00\x00\x00'
tRp8318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8319
I0
sg6379
g7196
sS'block_loop.thisRepN'
p8320
I2
sg6382
g6842
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8321
I2
sg6384
g6849
sg55
g11
sS'block_loop.thisTrial'
p8322
Nsg69
Vn
sS'block_loop.thisTrialN'
p8323
I0
sg39
F5.9999714902187407
sg34
g752
(S"\x07\xdf\t\x1c\r'\x0e\x03S\x90"
tRp8324
sa(dp8325
S'trial_loop.thisTrialN'
p8326
I141
sg6370
g6883
sS'block_loop.thisIndex'
p8327
g6364
sg38
S'left'
p8328
sg58
g62
sS'trial_loop.thisN'
p8329
I141
sg33
g6755
sg63
g64
sS'trial_loop.thisIndex'
p8330
g59
(g98
S'\x8d\x00\x00\x00'
tRp8331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8332
I0
sg6379
g6890
sS'block_loop.thisRepN'
p8333
I2
sg6382
g6748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8334
I2
sg6384
g6755
sg55
g11
sS'block_loop.thisTrial'
p8335
Nsg69
Vn
sS'block_loop.thisTrialN'
p8336
I0
sg39
F0.90022032359775039
sg34
g752
(S"\x07\xdf\t\x1c\r'\x19\x03\xc4\xd8"
tRp8337
sa(dp8338
S'trial_loop.thisTrialN'
p8339
I142
sg6370
g6585
sS'block_loop.thisIndex'
p8340
g6364
sg38
S'left'
p8341
sg58
g62
sS'trial_loop.thisN'
p8342
I142
sg33
g6500
sg63
g64
sS'trial_loop.thisIndex'
p8343
g59
(g98
S'\x8e\x00\x00\x00'
tRp8344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8345
I0
sg6379
g6592
sS'block_loop.thisRepN'
p8346
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8347
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p8348
Nsg69
Vn
sS'block_loop.thisTrialN'
p8349
I0
sg39
F1.0501150654818048
sg34
g752
(S"\x07\xdf\t\x1c\r'\x1f\x02\xab\x98"
tRp8350
sa(dp8351
S'trial_loop.thisTrialN'
p8352
I143
sg6370
g7513
sS'block_loop.thisIndex'
p8353
g6364
sg38
S'left'
p8354
sg58
g62
sS'trial_loop.thisN'
p8355
I143
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p8356
g59
(g98
S'\x8f\x00\x00\x00'
tRp8357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8358
I0
sg6379
g7520
sS'block_loop.thisRepN'
p8359
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8360
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p8361
Nsg69
Vn
sS'block_loop.thisTrialN'
p8362
I0
sg39
F1.1167555411611829
sg34
g752
(S"\x07\xdf\t\x1c\r'%\x03\xf3\xb8"
tRp8363
sa(dp8364
S'trial_loop.thisTrialN'
p8365
I144
sg6370
g7245
sS'block_loop.thisIndex'
p8366
g6364
sg38
S'right'
p8367
sg58
g62
sS'trial_loop.thisN'
p8368
I144
sg33
g6523
sg63
g64
sS'trial_loop.thisIndex'
p8369
g59
(g98
S'\x90\x00\x00\x00'
tRp8370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8371
I0
sg6379
g7252
sS'block_loop.thisRepN'
p8372
I2
sg6382
g6523
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8373
I2
sg6384
g6530
sg55
g11
sS'block_loop.thisTrial'
p8374
Nsg69
Vn
sS'block_loop.thisTrialN'
p8375
I0
sg39
F0.84993876098815235
sg34
g752
(S"\x07\xdf\t\x1c\r'+\x061\xf0"
tRp8376
sa(dp8377
S'trial_loop.thisTrialN'
p8378
I145
sg6370
g7260
sS'block_loop.thisIndex'
p8379
g6364
sg38
S'left'
p8380
sg58
g62
sS'trial_loop.thisN'
p8381
I145
sg33
g6656
sg63
g64
sS'trial_loop.thisIndex'
p8382
g59
(g98
S'\x91\x00\x00\x00'
tRp8383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8384
I0
sg6379
g7267
sS'block_loop.thisRepN'
p8385
I2
sg6382
g6656
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8386
I2
sg6384
g6663
sg55
g11
sS'block_loop.thisTrial'
p8387
Nsg69
Vn
sS'block_loop.thisTrialN'
p8388
I0
sg39
F0.73351792467110499
sg34
g752
(S"\x07\xdf\t\x1c\r'1\x04\x9f\x98"
tRp8389
sa(dp8390
S'trial_loop.thisTrialN'
p8391
I146
sg6370
g7189
sS'block_loop.thisIndex'
p8392
g6364
sg38
S'right'
p8393
sg58
g62
sS'trial_loop.thisN'
p8394
I146
sg33
g6849
sg63
g64
sS'trial_loop.thisIndex'
p8395
g59
(g98
S'\x92\x00\x00\x00'
tRp8396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8397
I0
sg6379
g7196
sS'block_loop.thisRepN'
p8398
I2
sg6382
g6842
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8399
I2
sg6384
g6849
sg55
g11
sS'block_loop.thisTrial'
p8400
Nsg69
Vn
sS'block_loop.thisTrialN'
p8401
I0
sg39
F1.6334494441744027
sg34
g752
(S"\x07\xdf\t\x1c\r'7\x00\xe6x"
tRp8402
sa(dp8403
S'trial_loop.thisTrialN'
p8404
I147
sg6370
g7528
sS'block_loop.thisIndex'
p8405
g6364
sg38
S'right'
p8406
sg58
g62
sS'trial_loop.thisN'
p8407
I147
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8408
g59
(g98
S'\x93\x00\x00\x00'
tRp8409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8410
I0
sg6379
g7535
sS'block_loop.thisRepN'
p8411
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8412
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8413
Nsg69
Vn
sS'block_loop.thisTrialN'
p8414
I0
sg39
F0.80010138078614546
sg34
g752
(S'\x07\xdf\t\x1c\r(\x01\x0b;\x00'
tRp8415
sa(dp8416
S'trial_loop.thisTrialN'
p8417
I148
sg6370
g6519
sS'block_loop.thisIndex'
p8418
g6364
sg38
S'left'
p8419
sg58
g62
sS'trial_loop.thisN'
p8420
I148
sg33
g6523
sg63
g64
sS'trial_loop.thisIndex'
p8421
g59
(g98
S'\x94\x00\x00\x00'
tRp8422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8423
I0
sg6379
g6527
sS'block_loop.thisRepN'
p8424
I2
sg6382
g6523
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8425
I2
sg6384
g6530
sg55
g11
sS'block_loop.thisTrial'
p8426
Nsg69
Vn
sS'block_loop.thisTrialN'
p8427
I0
sg39
F0.83316987724720093
sg34
g752
(S'\x07\xdf\t\x1c\r(\x07\x08w\xf8'
tRp8428
sa(dp8429
S'trial_loop.thisTrialN'
p8430
I149
sg6370
g7189
sS'block_loop.thisIndex'
p8431
g6364
sg38
S'right'
p8432
sg58
g62
sS'trial_loop.thisN'
p8433
I149
sg33
g6849
sg63
g64
sS'trial_loop.thisIndex'
p8434
g59
(g98
S'\x95\x00\x00\x00'
tRp8435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8436
I0
sg6379
g7196
sS'block_loop.thisRepN'
p8437
I2
sg6382
g6842
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8438
I2
sg6384
g6849
sg55
g11
sS'block_loop.thisTrial'
p8439
Nsg69
Vn
sS'block_loop.thisTrialN'
p8440
I0
sg39
F2.1166540463364072
sg34
g752
(S'\x07\xdf\t\x1c\r(\r\x06\xa7 '
tRp8441
sa(dp8442
S'trial_loop.thisTrialN'
p8443
I150
sg6370
g7260
sS'block_loop.thisIndex'
p8444
g6364
sg38
S'left'
p8445
sg58
g62
sS'trial_loop.thisN'
p8446
I150
sg33
g6656
sg63
g64
sS'trial_loop.thisIndex'
p8447
g59
(g98
S'\x96\x00\x00\x00'
tRp8448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8449
I0
sg6379
g7267
sS'block_loop.thisRepN'
p8450
I2
sg6382
g6656
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8451
I2
sg6384
g6663
sg55
g11
sS'block_loop.thisTrial'
p8452
Nsg69
Vn
sS'block_loop.thisTrialN'
p8453
I0
sg39
F1.3500279966065136
sg34
g752
(S'\x07\xdf\t\x1c\r(\x14\x08\xdd\x88'
tRp8454
sa(dp8455
S'trial_loop.thisTrialN'
p8456
I151
sg6370
g6727
sS'block_loop.thisIndex'
p8457
g6364
sg38
S'right'
p8458
sg58
g62
sS'trial_loop.thisN'
p8459
I151
sg33
g6731
sg63
g64
sS'trial_loop.thisIndex'
p8460
g59
(g98
S'\x97\x00\x00\x00'
tRp8461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8462
I0
sg6379
g6735
sS'block_loop.thisRepN'
p8463
I2
sg6382
g6731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8464
I2
sg6384
g6738
sg55
g11
sS'block_loop.thisTrial'
p8465
Nsg69
Vn
sS'block_loop.thisTrialN'
p8466
I0
sg39
F1.0168127888046001
sg34
g752
(S'\x07\xdf\t\x1c\r(\x1a\x0e\xa9\xe8'
tRp8467
sa(dp8468
S'trial_loop.thisTrialN'
p8469
I152
sg6370
g6838
sS'block_loop.thisIndex'
p8470
g6364
sg38
S'left'
p8471
sg58
g62
sS'trial_loop.thisN'
p8472
I152
sg33
g6849
sg63
g64
sS'trial_loop.thisIndex'
p8473
g59
(g98
S'\x98\x00\x00\x00'
tRp8474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8475
I0
sg6379
g6846
sS'block_loop.thisRepN'
p8476
I2
sg6382
g6842
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8477
I2
sg6384
g6849
sg55
g11
sS'block_loop.thisTrial'
p8478
Nsg69
Vn
sS'block_loop.thisTrialN'
p8479
I0
sg39
F2.1500620943061222
sg34
g752
(S'\x07\xdf\t\x1c\r(!\x006\xb0'
tRp8480
sa(dp8481
S'trial_loop.thisTrialN'
p8482
I153
sg6370
g6519
sS'block_loop.thisIndex'
p8483
g6364
sg38
S'left'
p8484
sg58
g62
sS'trial_loop.thisN'
p8485
I153
sg33
g6530
sg63
g64
sS'trial_loop.thisIndex'
p8486
g59
(g98
S'\x99\x00\x00\x00'
tRp8487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8488
I0
sg6379
g6527
sS'block_loop.thisRepN'
p8489
I2
sg6382
g6523
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8490
I2
sg6384
g6530
sg55
g11
sS'block_loop.thisTrial'
p8491
Nsg69
Vn
sS'block_loop.thisTrialN'
p8492
I0
sg39
F1.0998979919986596
sg34
g752
(S'\x07\xdf\t\x1c\r((\x02\xe60'
tRp8493
sa(dp8494
S'trial_loop.thisTrialN'
p8495
I154
sg6370
g6883
sS'block_loop.thisIndex'
p8496
g6364
sg38
S'left'
p8497
sg58
g62
sS'trial_loop.thisN'
p8498
I154
sg33
g6755
sg63
g64
sS'trial_loop.thisIndex'
p8499
g59
(g98
S'\x9a\x00\x00\x00'
tRp8500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8501
I0
sg6379
g6890
sS'block_loop.thisRepN'
p8502
I2
sg6382
g6748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8503
I2
sg6384
g6755
sg55
g11
sS'block_loop.thisTrial'
p8504
Nsg69
Vn
sS'block_loop.thisTrialN'
p8505
I0
sg39
F0.90022688084718538
sg34
g752
(S'\x07\xdf\t\x1c\r(.\x04\xe5\xe8'
tRp8506
sa(dp8507
S'trial_loop.thisTrialN'
p8508
I155
sg6370
g7004
sS'block_loop.thisIndex'
p8509
g6364
sg38
S'left'
p8510
sg58
g62
sS'trial_loop.thisN'
p8511
I155
sg33
g6572
sg63
g64
sS'trial_loop.thisIndex'
p8512
g59
(g98
S'\x9b\x00\x00\x00'
tRp8513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8514
I0
sg6379
g7011
sS'block_loop.thisRepN'
p8515
I2
sg6382
g6572
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8516
I2
sg6384
g6579
sg55
g11
sS'block_loop.thisTrial'
p8517
Nsg69
Vn
sS'block_loop.thisTrialN'
p8518
I0
sg39
F1.3167855904721364
sg34
g752
(S'\x07\xdf\t\x1c\r(4\x04\x07@'
tRp8519
sa(dp8520
S'trial_loop.thisTrialN'
p8521
I156
sg6370
g7146
sS'block_loop.thisIndex'
p8522
g6364
sg38
S'right'
p8523
sg58
g62
sS'trial_loop.thisN'
p8524
I156
sg33
g7150
sg63
g64
sS'trial_loop.thisIndex'
p8525
g59
(g98
S'\x9c\x00\x00\x00'
tRp8526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8527
I0
sg6379
g7154
sS'block_loop.thisRepN'
p8528
I2
sg6382
g7150
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8529
I2
sg6384
g7157
sg55
g11
sS'block_loop.thisTrial'
p8530
Nsg69
Vn
sS'block_loop.thisTrialN'
p8531
I0
sg39
F0.81724317247790168
sg34
g752
(S'\x07\xdf\t\x1c\r(:\t^p'
tRp8532
sa(dp8533
S'trial_loop.thisTrialN'
p8534
I157
sg6370
g7103
sS'block_loop.thisIndex'
p8535
g6364
sg38
S'left'
p8536
sg58
g62
sS'trial_loop.thisN'
p8537
I157
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8538
g59
(g98
S'\x9d\x00\x00\x00'
tRp8539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8540
I0
sg6379
g7110
sS'block_loop.thisRepN'
p8541
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8542
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8543
Nsg69
Vn
sS'block_loop.thisTrialN'
p8544
I0
sg39
F1.283424583642045
sg34
g752
(S'\x07\xdf\t\x1c\r)\x04\x07\x14\x80'
tRp8545
sa(dp8546
S'trial_loop.thisTrialN'
p8547
I158
sg6370
g6791
sS'block_loop.thisIndex'
p8548
g6364
sg38
S'right'
p8549
sg58
g62
sS'trial_loop.thisN'
p8550
I158
sg33
g6795
sg63
g64
sS'trial_loop.thisIndex'
p8551
g59
(g98
S'\x9e\x00\x00\x00'
tRp8552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8553
I0
sg6379
g6799
sS'block_loop.thisRepN'
p8554
I2
sg6382
g6795
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8555
I2
sg6384
g6802
sg55
g11
sS'block_loop.thisTrial'
p8556
Nsg69
Vn
sS'block_loop.thisTrialN'
p8557
I0
sg39
F1.0668514480694284
sg34
g752
(S'\x07\xdf\t\x1c\r)\n\x0b\xee\xb0'
tRp8558
sa(dp8559
S'trial_loop.thisTrialN'
p8560
I159
sg6370
g6744
sS'block_loop.thisIndex'
p8561
g6364
sg38
S'right'
p8562
sg58
g62
sS'trial_loop.thisN'
p8563
I159
sg33
g6748
sg63
g64
sS'trial_loop.thisIndex'
p8564
g59
(g98
S'\x9f\x00\x00\x00'
tRp8565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8566
I0
sg6379
g6752
sS'block_loop.thisRepN'
p8567
I2
sg6382
g6748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8568
I2
sg6384
g6755
sg55
g11
sS'block_loop.thisTrial'
p8569
Nsg69
Vn
sS'block_loop.thisTrialN'
p8570
I0
sg39
F1.5001291493135795
sg34
g752
(S'\x07\xdf\t\x1c\r)\x10\rqh'
tRp8571
sa(dp8572
S'trial_loop.thisTrialN'
p8573
I160
sg6370
g6568
sS'block_loop.thisIndex'
p8574
g6364
sg38
S'right'
p8575
sg58
g62
sS'trial_loop.thisN'
p8576
I160
sg33
g6579
sg63
g64
sS'trial_loop.thisIndex'
p8577
g59
(g98
S'\xa0\x00\x00\x00'
tRp8578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8579
I0
sg6379
g6576
sS'block_loop.thisRepN'
p8580
I2
sg6382
g6572
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8581
I2
sg6384
g6579
sg55
g11
sS'block_loop.thisTrial'
p8582
Nsg69
Vn
sS'block_loop.thisTrialN'
p8583
I0
sg39
F3.8333400806495774
sg34
g752
(S'\x07\xdf\t\x1c\r)\x17\x06`\xd0'
tRp8584
sa(dp8585
S'trial_loop.thisTrialN'
p8586
I161
sg6370
g6459
sS'block_loop.thisIndex'
p8587
g6364
sg38
S'left'
p8588
sg58
g62
sS'trial_loop.thisN'
p8589
I161
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8590
g59
(g98
S'\xa1\x00\x00\x00'
tRp8591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8592
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8593
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8594
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8595
Nsg69
Vn
sS'block_loop.thisTrialN'
p8596
I0
sg39
F0.76718569675540493
sg34
g752
(S'\x07\xdf\t\x1c\r) \x04=\xf0'
tRp8597
sa(dp8598
S'trial_loop.thisTrialN'
p8599
I162
sg6370
g6761
sS'block_loop.thisIndex'
p8600
g6364
sg38
S'left'
p8601
sg58
g62
sS'trial_loop.thisN'
p8602
I162
sg33
g6765
sg63
g64
sS'trial_loop.thisIndex'
p8603
g59
(g98
S'\xa2\x00\x00\x00'
tRp8604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8605
I0
sg6379
g6769
sS'block_loop.thisRepN'
p8606
I2
sg6382
g6765
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8607
I2
sg6384
g6772
sg55
g11
sS'block_loop.thisTrial'
p8608
Nsg69
Vn
sS'block_loop.thisTrialN'
p8609
I0
sg39
F1.4000900338924112
sg34
g752
(S'\x07\xdf\t\x1c\r)&\x01@P'
tRp8610
sa(dp8611
S'trial_loop.thisTrialN'
p8612
I163
sg6370
g7275
sS'block_loop.thisIndex'
p8613
g6364
sg38
S'left'
p8614
sg58
g62
sS'trial_loop.thisN'
p8615
I163
sg33
g7023
sg63
g64
sS'trial_loop.thisIndex'
p8616
g59
(g98
S'\xa3\x00\x00\x00'
tRp8617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8618
I0
sg6379
g7282
sS'block_loop.thisRepN'
p8619
I2
sg6382
g7023
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8620
I2
sg6384
g7030
sg55
g11
sS'block_loop.thisTrial'
p8621
Nsg69
Vn
sS'block_loop.thisTrialN'
p8622
I0
sg39
F2.9000697919473168
sg34
g752
(S'\x07\xdf\t\x1c\r),\x07\xc4H'
tRp8623
sa(dp8624
S'trial_loop.thisTrialN'
p8625
I164
sg6370
g6686
sS'block_loop.thisIndex'
p8626
g6364
sg38
S'left'
p8627
sg58
g62
sS'trial_loop.thisN'
p8628
I164
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p8629
g59
(g98
S'\xa4\x00\x00\x00'
tRp8630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8631
I0
sg6379
g6693
sS'block_loop.thisRepN'
p8632
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8633
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p8634
Nsg69
Vn
sS'block_loop.thisTrialN'
p8635
I0
sg39
F1.0667932881133311
sg34
g752
(S'\x07\xdf\t\x1c\r)4\x06\xd9\xe8'
tRp8636
sa(dp8637
S'trial_loop.thisTrialN'
p8638
I165
sg6370
g6821
sS'block_loop.thisIndex'
p8639
g6364
sg38
S'left'
p8640
sg58
g62
sS'trial_loop.thisN'
p8641
I165
sg33
g6832
sg63
g64
sS'trial_loop.thisIndex'
p8642
g59
(g98
S'\xa5\x00\x00\x00'
tRp8643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8644
I0
sg6379
g6829
sS'block_loop.thisRepN'
p8645
I2
sg6382
g6825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8646
I2
sg6384
g6832
sg55
g11
sS'block_loop.thisTrial'
p8647
Nsg69
Vn
sS'block_loop.thisTrialN'
p8648
I0
sg39
F0.98353674112695444
sg34
g752
(S'\x07\xdf\t\x1c\r):\x08`\x88'
tRp8649
sa(dp8650
S'trial_loop.thisTrialN'
p8651
I166
sg6370
g6442
sS'block_loop.thisIndex'
p8652
g6364
sg38
S'right'
p8653
sg58
g62
sS'trial_loop.thisN'
p8654
I166
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8655
g59
(g98
S'\xa6\x00\x00\x00'
tRp8656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8657
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8658
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8659
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8660
Nsg69
Vn
sS'block_loop.thisTrialN'
p8661
I0
sg39
F1.666981224598203
sg34
g752
(S'\x07\xdf\t\x1c\r*\x04\x08w\xf8'
tRp8662
sa(dp8663
S'trial_loop.thisTrialN'
p8664
I167
sg6370
g7260
sS'block_loop.thisIndex'
p8665
g6364
sg38
S'left'
p8666
sg58
g62
sS'trial_loop.thisN'
p8667
I167
sg33
g6663
sg63
g64
sS'trial_loop.thisIndex'
p8668
g59
(g98
S'\xa7\x00\x00\x00'
tRp8669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8670
I0
sg6379
g7267
sS'block_loop.thisRepN'
p8671
I2
sg6382
g6656
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8672
I2
sg6384
g6663
sg55
g11
sS'block_loop.thisTrial'
p8673
Nsg69
Vn
sS'block_loop.thisTrialN'
p8674
I0
sg39
F1.2002033887874859
sg34
g752
(S'\x07\xdf\t\x1c\r*\x0b\x04\x03X'
tRp8675
sa(dp8676
S'trial_loop.thisTrialN'
p8677
I168
sg6370
g7528
sS'block_loop.thisIndex'
p8678
g6364
sg38
S'right'
p8679
sg58
g62
sS'trial_loop.thisN'
p8680
I168
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p8681
g59
(g98
S'\xa8\x00\x00\x00'
tRp8682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8683
I0
sg6379
g7535
sS'block_loop.thisRepN'
p8684
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8685
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8686
Nsg69
Vn
sS'block_loop.thisTrialN'
p8687
I0
sg39
F0.71679551187480683
sg34
g752
(S'\x07\xdf\t\x1c\r*\x11\x07nX'
tRp8688
sa(dp8689
S'trial_loop.thisTrialN'
p8690
I169
sg6370
g6821
sS'block_loop.thisIndex'
p8691
g6364
sg38
S'left'
p8692
sg58
g62
sS'trial_loop.thisN'
p8693
I169
sg33
g6825
sg63
g64
sS'trial_loop.thisIndex'
p8694
g59
(g98
S'\xa9\x00\x00\x00'
tRp8695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8696
I0
sg6379
g6829
sS'block_loop.thisRepN'
p8697
I2
sg6382
g6825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8698
I2
sg6384
g6832
sg55
g11
sS'block_loop.thisTrial'
p8699
Nsg69
Vn
sS'block_loop.thisTrialN'
p8700
I0
sg39
F0.816783309690436
sg34
g752
(S'\x07\xdf\t\x1c\r*\x17\x03\xb9 '
tRp8701
sa(dp8702
S'trial_loop.thisTrialN'
p8703
I170
sg6370
g6568
sS'block_loop.thisIndex'
p8704
g6364
sg38
S'right'
p8705
sg58
g62
sS'trial_loop.thisN'
p8706
I170
sg33
g6572
sg63
g64
sS'trial_loop.thisIndex'
p8707
g59
(g98
S'\xaa\x00\x00\x00'
tRp8708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8709
I0
sg6379
g6576
sS'block_loop.thisRepN'
p8710
I2
sg6382
g6572
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8711
I2
sg6384
g6579
sg55
g11
sS'block_loop.thisTrial'
p8712
Nsg69
Vn
sS'block_loop.thisTrialN'
p8713
I0
sg39
F1.1000622083447524
sg34
g752
(S'\x07\xdf\t\x1c\r*\x1d\x01o0'
tRp8714
sa(dp8715
S'trial_loop.thisTrialN'
p8716
I171
sg6370
g6669
sS'block_loop.thisIndex'
p8717
g6364
sg38
S'left'
p8718
sg58
g62
sS'trial_loop.thisN'
p8719
I171
sg33
g6673
sg63
g64
sS'trial_loop.thisIndex'
p8720
g59
(g98
S'\xab\x00\x00\x00'
tRp8721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8722
I0
sg6379
g6677
sS'block_loop.thisRepN'
p8723
I2
sg6382
g6673
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8724
I2
sg6384
g6680
sg55
g11
sS'block_loop.thisTrial'
p8725
Nsg69
Vn
sS'block_loop.thisTrialN'
p8726
I0
sg39
F1.100615583218314
sg34
g752
(S'\x07\xdf\t\x1c\r*#\x03n\xe8'
tRp8727
sa(dp8728
S'trial_loop.thisTrialN'
p8729
I172
sg6370
g7513
sS'block_loop.thisIndex'
p8730
g6364
sg38
S'left'
p8731
sg58
g62
sS'trial_loop.thisN'
p8732
I172
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8733
g59
(g98
S'\xac\x00\x00\x00'
tRp8734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8735
I0
sg6379
g7520
sS'block_loop.thisRepN'
p8736
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8737
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p8738
Nsg69
Vn
sS'block_loop.thisTrialN'
p8739
I0
sg39
F2.6501216797496454
sg34
g752
(S'\x07\xdf\t\x1c\r*)\x05j\xb8'
tRp8740
sa(dp8741
S'trial_loop.thisTrialN'
p8742
I173
sg6370
g7230
sS'block_loop.thisIndex'
p8743
g6364
sg38
S'left'
p8744
sg58
g62
sS'trial_loop.thisN'
p8745
I173
sg33
g7150
sg63
g64
sS'trial_loop.thisIndex'
p8746
g59
(g98
S'\xad\x00\x00\x00'
tRp8747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8748
I0
sg6379
g7237
sS'block_loop.thisRepN'
p8749
I2
sg6382
g7150
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8750
I2
sg6384
g7157
sg55
g11
sS'block_loop.thisTrial'
p8751
Nsg69
Vn
sS'block_loop.thisTrialN'
p8752
I0
sg39
F0.9334319391673489
sg34
g752
(S'\x07\xdf\t\x1c\r*1\x00\xb3\xb0'
tRp8753
sa(dp8754
S'trial_loop.thisTrialN'
p8755
I174
sg6370
g7883
sS'block_loop.thisIndex'
p8756
g6364
sg38
S'right'
p8757
sg58
g62
sS'trial_loop.thisN'
p8758
I174
sg33
g6825
sg63
g64
sS'trial_loop.thisIndex'
p8759
g59
(g98
S'\xae\x00\x00\x00'
tRp8760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8761
I0
sg6379
g7890
sS'block_loop.thisRepN'
p8762
I2
sg6382
g6825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8763
I2
sg6384
g6832
sg55
g11
sS'block_loop.thisTrial'
p8764
Nsg69
Vn
sS'block_loop.thisTrialN'
p8765
I0
sg39
F1.0334533785226085
sg34
g752
(S'\x07\xdf\t\x1c\r*7\x00\x13\x88'
tRp8766
sa(dp8767
S'trial_loop.thisTrialN'
p8768
I175
sg6370
g6391
sS'block_loop.thisIndex'
p8769
g6364
sg38
S'right'
p8770
sg58
g62
sS'trial_loop.thisN'
p8771
I175
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p8772
g59
(g98
S'\xaf\x00\x00\x00'
tRp8773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8774
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8775
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8776
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p8777
Nsg69
Vn
sS'block_loop.thisTrialN'
p8778
I0
sg39
F2.6500595284251176
sg34
g752
(S'\x07\xdf\t\x1c\r+\x01\x01!\x10'
tRp8779
sa(dp8780
S'trial_loop.thisTrialN'
p8781
I176
sg6370
g6459
sS'block_loop.thisIndex'
p8782
g6364
sg38
S'left'
p8783
sg58
g62
sS'trial_loop.thisN'
p8784
I176
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8785
g59
(g98
S'\xb0\x00\x00\x00'
tRp8786
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8787
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8788
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8789
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8790
Nsg69
Vn
sS'block_loop.thisTrialN'
p8791
I0
sg39
F0.91683725019720441
sg34
g752
(S'\x07\xdf\t\x1c\r+\x08\x0b\xacH'
tRp8792
sa(dp8793
S'trial_loop.thisTrialN'
p8794
I177
sg6370
g6536
sS'block_loop.thisIndex'
p8795
g6364
sg38
S'left'
p8796
sg58
g62
sS'trial_loop.thisN'
p8797
I177
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8798
g59
(g98
S'\xb1\x00\x00\x00'
tRp8799
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8800
I0
sg6379
g6543
sS'block_loop.thisRepN'
p8801
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8802
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8803
Nsg69
Vn
sS'block_loop.thisTrialN'
p8804
I0
sg39
F1.5000929418893065
sg34
g752
(S'\x07\xdf\t\x1c\r+\x0e\n\xcd\xa0'
tRp8805
sa(dp8806
S'trial_loop.thisTrialN'
p8807
I178
sg6370
g6371
sS'block_loop.thisIndex'
p8808
g6364
sg38
S'right'
p8809
sg58
g62
sS'trial_loop.thisN'
p8810
I178
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8811
g59
(g98
S'\xb2\x00\x00\x00'
tRp8812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8813
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8814
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8815
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8816
Nsg69
Vn
sS'block_loop.thisTrialN'
p8817
I0
sg39
F0.8335194071787555
sg34
g752
(S'\x07\xdf\t\x1c\r+\x15\x03\xbd\x08'
tRp8818
sa(dp8819
S'trial_loop.thisTrialN'
p8820
I179
sg6370
g7019
sS'block_loop.thisIndex'
p8821
g6364
sg38
S'left'
p8822
sg58
g62
sS'trial_loop.thisN'
p8823
I179
sg33
g7023
sg63
g64
sS'trial_loop.thisIndex'
p8824
g59
(g98
S'\xb3\x00\x00\x00'
tRp8825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8826
I0
sg6379
g7027
sS'block_loop.thisRepN'
p8827
I2
sg6382
g7023
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8828
I2
sg6384
g7030
sg55
g11
sS'block_loop.thisTrial'
p8829
Nsg69
Vn
sS'block_loop.thisTrialN'
p8830
I0
sg39
F0.93351917910149496
sg34
g752
(S'\x07\xdf\t\x1c\r+\x1b\x01\xad\xb0'
tRp8831
sa(dp8832
S'trial_loop.thisTrialN'
p8833
I180
sg6370
g6391
sS'block_loop.thisIndex'
p8834
g6364
sg38
S'right'
p8835
sg58
g62
sS'trial_loop.thisN'
p8836
I180
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p8837
g59
(g98
S'\xb4\x00\x00\x00'
tRp8838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8839
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8840
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8841
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p8842
Nsg69
Vn
sS'block_loop.thisTrialN'
p8843
I0
sg39
F1.6168496234422491
sg34
g752
(S'\x07\xdf\t\x1c\r+!\x01\r\x88'
tRp8844
sa(dp8845
S'trial_loop.thisTrialN'
p8846
I181
sg6370
g7883
sS'block_loop.thisIndex'
p8847
g6364
sg38
S'right'
p8848
sg58
g62
sS'trial_loop.thisN'
p8849
I181
sg33
g6825
sg63
g64
sS'trial_loop.thisIndex'
p8850
g59
(g98
S'\xb5\x00\x00\x00'
tRp8851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8852
I0
sg6379
g7890
sS'block_loop.thisRepN'
p8853
I2
sg6382
g6825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8854
I2
sg6384
g6832
sg55
g11
sS'block_loop.thisTrial'
p8855
Nsg69
Vn
sS'block_loop.thisTrialN'
p8856
I0
sg39
F0.86689637948620657
sg34
g752
(S"\x07\xdf\t\x1c\r+'\x0b'x"
tRp8857
sa(dp8858
S'trial_loop.thisTrialN'
p8859
I182
sg6370
g6669
sS'block_loop.thisIndex'
p8860
g6364
sg38
S'left'
p8861
sg58
g62
sS'trial_loop.thisN'
p8862
I182
sg33
g6673
sg63
g64
sS'trial_loop.thisIndex'
p8863
g59
(g98
S'\xb6\x00\x00\x00'
tRp8864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8865
I0
sg6379
g6677
sS'block_loop.thisRepN'
p8866
I2
sg6382
g6673
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8867
I2
sg6384
g6680
sg55
g11
sS'block_loop.thisTrial'
p8868
Nsg69
Vn
sS'block_loop.thisTrialN'
p8869
I0
sg39
F0.81693612212256994
sg34
g752
(S'\x07\xdf\t\x1c\r+-\t\x918'
tRp8870
sa(dp8871
S'trial_loop.thisTrialN'
p8872
I183
sg6370
g7883
sS'block_loop.thisIndex'
p8873
g6364
sg38
S'right'
p8874
sg58
g62
sS'trial_loop.thisN'
p8875
I183
sg33
g6825
sg63
g64
sS'trial_loop.thisIndex'
p8876
g59
(g98
S'\xb7\x00\x00\x00'
tRp8877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8878
I0
sg6379
g7890
sS'block_loop.thisRepN'
p8879
I2
sg6382
g6825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8880
I2
sg6384
g6832
sg55
g11
sS'block_loop.thisTrial'
p8881
Nsg69
Vn
sS'block_loop.thisTrialN'
p8882
I0
sg39
F0.81689848920905206
sg34
g752
(S'\x07\xdf\t\x1c\r+3\x07K0'
tRp8883
sa(dp8884
S'trial_loop.thisTrialN'
p8885
I184
sg6370
g6585
sS'block_loop.thisIndex'
p8886
g6364
sg38
S'left'
p8887
sg58
g62
sS'trial_loop.thisN'
p8888
I184
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p8889
g59
(g98
S'\xb8\x00\x00\x00'
tRp8890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8891
I0
sg6379
g6592
sS'block_loop.thisRepN'
p8892
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8893
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p8894
Nsg69
Vn
sS'block_loop.thisTrialN'
p8895
I0
sg39
F1.0834233292116551
sg34
g752
(S'\x07\xdf\t\x1c\r+9\x05\x01@'
tRp8896
sa(dp8897
S'trial_loop.thisTrialN'
p8898
I185
sg6370
g7019
sS'block_loop.thisIndex'
p8899
g6364
sg38
S'left'
p8900
sg58
g62
sS'trial_loop.thisN'
p8901
I185
sg33
g7023
sg63
g64
sS'trial_loop.thisIndex'
p8902
g59
(g98
S'\xb9\x00\x00\x00'
tRp8903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8904
I0
sg6379
g7027
sS'block_loop.thisRepN'
p8905
I2
sg6382
g7023
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8906
I2
sg6384
g7030
sg55
g11
sS'block_loop.thisTrial'
p8907
Nsg69
Vn
sS'block_loop.thisTrialN'
p8908
I0
sg39
F1.2334218467040046
sg34
g752
(S'\x07\xdf\t\x1c\r,\x03\x06\xc2x'
tRp8909
sa(dp8910
S'trial_loop.thisTrialN'
p8911
I186
sg6370
g6821
sS'block_loop.thisIndex'
p8912
g6364
sg38
S'left'
p8913
sg58
g62
sS'trial_loop.thisN'
p8914
I186
sg33
g6825
sg63
g64
sS'trial_loop.thisIndex'
p8915
g59
(g98
S'\xba\x00\x00\x00'
tRp8916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8917
I0
sg6379
g6829
sS'block_loop.thisRepN'
p8918
I2
sg6382
g6825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8919
I2
sg6384
g6832
sg55
g11
sS'block_loop.thisTrial'
p8920
Nsg69
Vn
sS'block_loop.thisTrialN'
p8921
I0
sg39
F0.78352607846863975
sg34
g752
(S'\x07\xdf\t\x1c\r,\t\n\xe5\x10'
tRp8922
sa(dp8923
S'trial_loop.thisTrialN'
p8924
I187
sg6370
g7513
sS'block_loop.thisIndex'
p8925
g6364
sg38
S'left'
p8926
sg58
g62
sS'trial_loop.thisN'
p8927
I187
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p8928
g59
(g98
S'\xbb\x00\x00\x00'
tRp8929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8930
I0
sg6379
g7520
sS'block_loop.thisRepN'
p8931
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8932
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p8933
Nsg69
Vn
sS'block_loop.thisTrialN'
p8934
I0
sg39
F7.266677652434737
sg34
g752
(S'\x07\xdf\t\x1c\r,\x0f\x08"\x08'
tRp8935
sa(dp8936
S'trial_loop.thisTrialN'
p8937
I188
sg6370
g7245
sS'block_loop.thisIndex'
p8938
g6364
sg38
S'right'
p8939
sg58
g62
sS'trial_loop.thisN'
p8940
I188
sg33
g6523
sg63
g64
sS'trial_loop.thisIndex'
p8941
g59
(g98
S'\xbc\x00\x00\x00'
tRp8942
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8943
I0
sg6379
g7252
sS'block_loop.thisRepN'
p8944
I2
sg6382
g6523
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8945
I2
sg6384
g6530
sg55
g11
sS'block_loop.thisTrial'
p8946
Nsg69
Vn
sS'block_loop.thisTrialN'
p8947
I0
sg39
F0.84993591000966262
sg34
g752
(S'\x07\xdf\t\x1c\r,\x1b\x0c\x9a\x90'
tRp8948
sa(dp8949
S'trial_loop.thisTrialN'
p8950
I189
sg6370
g7075
sS'block_loop.thisIndex'
p8951
g6364
sg38
S'left'
p8952
sg58
g62
sS'trial_loop.thisN'
p8953
I189
sg33
g6731
sg63
g64
sS'trial_loop.thisIndex'
p8954
g59
(g98
S'\xbd\x00\x00\x00'
tRp8955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8956
I0
sg6379
g7082
sS'block_loop.thisRepN'
p8957
I2
sg6382
g6731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8958
I2
sg6384
g6738
sg55
g11
sS'block_loop.thisTrial'
p8959
Nsg69
Vn
sS'block_loop.thisTrialN'
p8960
I0
sg39
F0.8667729321277875
sg34
g752
(S'\x07\xdf\t\x1c\r,!\n\xc9\xb8'
tRp8961
sa(dp8962
S'trial_loop.thisTrialN'
p8963
I190
sg6370
g6408
sS'block_loop.thisIndex'
p8964
g6364
sg38
S'right'
p8965
sg58
g62
sS'trial_loop.thisN'
p8966
I190
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8967
g59
(g98
S'\xbe\x00\x00\x00'
tRp8968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8969
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8970
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8971
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8972
Nsg69
Vn
sS'block_loop.thisTrialN'
p8973
I0
sg39
F0.86682881130218448
sg34
g752
(S"\x07\xdf\t\x1c\r,'\t7`"
tRp8974
sa(dp8975
S'trial_loop.thisTrialN'
p8976
I191
sg6370
g7230
sS'block_loop.thisIndex'
p8977
g6364
sg38
S'left'
p8978
sg58
g62
sS'trial_loop.thisN'
p8979
I191
sg33
g7150
sg63
g64
sS'trial_loop.thisIndex'
p8980
g59
(g98
S'\xbf\x00\x00\x00'
tRp8981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8982
I0
sg6379
g7237
sS'block_loop.thisRepN'
p8983
I2
sg6382
g7150
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8984
I2
sg6384
g7157
sg55
g11
sS'block_loop.thisTrial'
p8985
Nsg69
Vn
sS'block_loop.thisTrialN'
p8986
I0
sg39
F0.88337845481510158
sg34
g752
(S'\x07\xdf\t\x1c\r,-\x07\xdf\xa0'
tRp8987
sa(dp8988
S'trial_loop.thisTrialN'
p8989
I192
sg6370
g6371
sS'block_loop.thisIndex'
p8990
g6364
sg38
S'right'
p8991
sg58
g62
sS'trial_loop.thisN'
p8992
I192
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8993
g59
(g98
S'\xc0\x00\x00\x00'
tRp8994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8995
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8996
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8997
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8998
Nsg69
Vn
sS'block_loop.thisTrialN'
p8999
I0
sg39
F0.95017687468862277
sg34
g752
(S'\x07\xdf\t\x1c\r,3\x06\x87\xe0'
tRp9000
sa(dp9001
S'trial_loop.thisTrialN'
p9002
I193
sg6370
g6489
sS'block_loop.thisIndex'
p9003
g6364
sg38
S'right'
p9004
sg58
g62
sS'trial_loop.thisN'
p9005
I193
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p9006
g59
(g98
S'\xc1\x00\x00\x00'
tRp9007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9008
I0
sg6379
g6497
sS'block_loop.thisRepN'
p9009
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9010
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p9011
Nsg69
Vn
sS'block_loop.thisTrialN'
p9012
I0
sg39
F1.1169052175191609
sg34
g752
(S'\x07\xdf\t\x1c\r,9\x06&8'
tRp9013
sa(dp9014
S'trial_loop.thisTrialN'
p9015
I194
sg6370
g6744
sS'block_loop.thisIndex'
p9016
g6364
sg38
S'right'
p9017
sg58
g62
sS'trial_loop.thisN'
p9018
I194
sg33
g6748
sg63
g64
sS'trial_loop.thisIndex'
p9019
g59
(g98
S'\xc2\x00\x00\x00'
tRp9020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9021
I0
sg6379
g6752
sS'block_loop.thisRepN'
p9022
I2
sg6382
g6748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9023
I2
sg6384
g6755
sg55
g11
sS'block_loop.thisTrial'
p9024
Nsg69
Vn
sS'block_loop.thisTrialN'
p9025
I0
sg39
F0.90019580518492148
sg34
g752
(S'\x07\xdf\t\x1c\r-\x03\x08\x9f\x08'
tRp9026
sa(dp9027
S'trial_loop.thisTrialN'
p9028
I195
sg6370
g7103
sS'block_loop.thisIndex'
p9029
g6364
sg38
S'left'
p9030
sg58
g62
sS'trial_loop.thisN'
p9031
I195
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p9032
g59
(g98
S'\xc3\x00\x00\x00'
tRp9033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9034
I0
sg6379
g7110
sS'block_loop.thisRepN'
p9035
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9036
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p9037
Nsg69
Vn
sS'block_loop.thisTrialN'
p9038
I0
sg39
F1.0835279601124057
sg34
g752
(S'\x07\xdf\t\x1c\r-\t\x07\x85\xc8'
tRp9039
sa(dp9040
S'trial_loop.thisTrialN'
p9041
I196
sg6370
g7316
sS'block_loop.thisIndex'
p9042
g6364
sg38
S'left'
p9043
sg58
g62
sS'trial_loop.thisN'
p9044
I196
sg33
g6765
sg63
g64
sS'trial_loop.thisIndex'
p9045
g59
(g98
S'\xc4\x00\x00\x00'
tRp9046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9047
I0
sg6379
g7323
sS'block_loop.thisRepN'
p9048
I2
sg6382
g6765
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9049
I2
sg6384
g6772
sg55
g11
sS'block_loop.thisTrial'
p9050
Nsg69
Vn
sS'block_loop.thisTrialN'
p9051
I0
sg39
F1.4001136970127845
sg34
g752
(S'\x07\xdf\t\x1c\r-\x0f\tG\x00'
tRp9052
sa(dp9053
S'trial_loop.thisTrialN'
p9054
I197
sg6370
g6838
sS'block_loop.thisIndex'
p9055
g6364
sg38
S'left'
p9056
sg58
g62
sS'trial_loop.thisN'
p9057
I197
sg33
g6842
sg63
g64
sS'trial_loop.thisIndex'
p9058
g59
(g98
S'\xc5\x00\x00\x00'
tRp9059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9060
I0
sg6379
g6846
sS'block_loop.thisRepN'
p9061
I2
sg6382
g6842
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9062
I2
sg6384
g6849
sg55
g11
sS'block_loop.thisTrial'
p9063
Nsg69
Vn
sS'block_loop.thisTrialN'
p9064
I0
sg39
F1.4500859284853505
sg34
g752
(S'\x07\xdf\t\x1c\r-\x16\x00\x8c\xa0'
tRp9065
sa(dp9066
S'trial_loop.thisTrialN'
p9067
I198
sg6370
g6652
sS'block_loop.thisIndex'
p9068
g6364
sg38
S'right'
p9069
sg58
g62
sS'trial_loop.thisN'
p9070
I198
sg33
g6656
sg63
g64
sS'trial_loop.thisIndex'
p9071
g59
(g98
S'\xc6\x00\x00\x00'
tRp9072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9073
I0
sg6379
g6660
sS'block_loop.thisRepN'
p9074
I2
sg6382
g6656
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9075
I2
sg6384
g6663
sg55
g11
sS'block_loop.thisTrial'
p9076
Nsg69
Vn
sS'block_loop.thisTrialN'
p9077
I0
sg39
F1.3834671202384925
sg34
g752
(S'\x07\xdf\t\x1c\r-\x1c\x08\x02\xc8'
tRp9078
sa(dp9079
S'trial_loop.thisTrialN'
p9080
I199
sg6370
g7019
sS'block_loop.thisIndex'
p9081
g6364
sg38
S'right'
p9082
sg58
g62
sS'trial_loop.thisN'
p9083
I199
sg33
g7030
sg63
g64
sS'trial_loop.thisIndex'
p9084
g59
(g98
S'\xc7\x00\x00\x00'
tRp9085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9086
I0
sg6379
g7027
sS'block_loop.thisRepN'
p9087
I2
sg6382
g7023
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9088
I2
sg6384
g7030
sg55
g11
sS'block_loop.thisTrial'
p9089
Nsg69
Vn
sS'block_loop.thisTrialN'
p9090
I0
sg39
F1.0833953896253661
sg34
g752
(S'\x07\xdf\t\x1c\r-"\x0eL('
tRp9091
sa(dp9092
S'block_loop.thisRepN'
p9093
I2
sg56
Vr
sS'block_loop.thisIndex'
p9094
g6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p9095
I2
sg55
g11
sg63
g64
sS'block_loop.thisTrial'
p9096
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p9097
I0
sg69
Vn
sa(dp9098
g63
g64
sg43
I92
sg56
Vr
sg57
Vn
sg42
I508
sg58
g62
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp9099
g63
g64
sg43
I92
sg55
g11
sg56
Vr
sg45
F1.0700000000000001
sg42
I508
sg49
F0.01
sg57
Vn
sg58
g62
sg44
I00
sg48
I25
sg47
g381
sg51
F30.079999999999998
sg46
F0.99999999999999956
sg65
g66
sg67
g68
sg50
I0
sg69
Vn
sasS'loops'
p9100
(lp9101
g1
(cpsychopy.data
TrialHandler
p9102
g3
NtRp9103
(dp9104
S'origin'
p9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9106
sS'thisTrial'
p9107
(lp9108
sS'_exp'
p9109
I79983440
sg10
S'bdm_loop1'
p9110
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1_no_eyetracking.py'
p9111
sS'thisRepN'
p9112
I1
sg52
I01
sg53
g54
sS'data'
p9113
g1
(cpsychopy.data
DataHandler
p9114
c__builtin__
dict
p9115
(dp9116
S'ran'
p9117
cnumpy.ma.core
_mareconstruct
p9118
(cnumpy.ma.core
MaskedArray
p9119
g92
(I0
tp9120
S'b'
tRp9121
(I1
(I40
I1
tg60
(S'f4'
I0
I1
tRp9122
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9118
(g9119
g92
g9120
S'b'
tRp9123
(I1
(I40
I1
tg9122
I00
S'R\xb8\x9e?\x85\xeb\x91?q=\n?\xa4p=?\x00\x00\x80?\xd7\xa3p?\xc3\xf5\xa8?\xb8\x1e\x85?\x8f\xc2u?=\nW?=\nW?\xcd\xccL?\xe1z\x94?\xaeGa?\xcd\xccL?\x00\x00\x80?\x00\x00\x80?=\nW?\x14\xae\x87?\\\x8fB?\xaeGa?\x8f\xc2u?H\xe1z?q=\x8a?\xd7\xa3p?=\nW?\xd7\xa3p?\x85\xeb\x91?\x85\xeb\x91?\\\x8f\x82?333?\xc3\xf5\xa8?\x14\xaeG?\x1f\x85k?\x14\xaeG?\x14\xae\x87?\\\x8f\x82?\x85\xebQ?\xb8\x1e\x05?=\nW?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9118
(g9119
g92
g9120
S'b'
tRp9124
(I1
(I40
I1
tg9122
I00
S'\xe5\xd0\x14A\x08\xac~AL7+A!\xb0\xa2@w\xbegA1\x08\xe0@\xa2E\x00Aff\x0eA1\x08\xc8@\xe9&\xf1?\x0e-2@B`5@\xcb\xa1\xe9@\xee|\x9f@\xfe\xd4\x94@\x9a\x99)A33\x17A;\xdf\x87AD\x8b`Ad;\xa3@D\x8bhA;\xdf\x11A\xa2E(A\xee|\xf7@\x98n\xf6@\x98n\xae@\xc9v6@w\xbe\x93@D\x8b\xc0@\xcb\xa1\xb9@\xbaI\x8c@\x00\x00LA\xdb\xf9N@/\xdd|@\xaa\xf1nA\xd5x7A\xee|\x87@\x87\x16!@\xaa\xf1\x96@\x0e-B@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9125
g9118
(g9119
g92
g9120
S'b'
tRp9126
(I1
(I40
I1
tg9122
I00
S'\x00\x00 A\x00\x00\x80@\x00\x00\xe8A\x00\x00\xc8A\x00\x00\xa0A\x00\x00\x18B\x00\x00\x90A\x00\x00\x14B\x00\x00\xc0@\x00\x00\xb8A\x00\x00\xf0A\x00\x00\x04B\x00\x00\x80A\x00\x00\x98A\x00\x00\x10A\x00\x00\x88A\x00\x00\x00A\x00\x00PA\x00\x00`A\x00\x000A\x00\x00pA\x00\x00\x80?\x00\x00@@\x00\x00\xd0A\x00\x00\xe0@\x00\x00\xa8A\x00\x00\xd8A\x00\x00\x00@\x00\x00\x08B\x00\x00\x1cB\x00\x00\xc0A\x00\x00\xa0@\x00\x00\xf8A\x00\x00\x00B\x00\x00\x00\x00\x00\x00\xb0A\x00\x00@A\x00\x00\x10B\x00\x00\x0cB\x00\x00\xe0A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9118
(g9119
g92
g9120
S'b'
tRp9127
(I1
(I40
I1
tg9122
I00
S'\xcd\xcc\xcc?\xcd\xcc\xcc?\x00\x00\x00@\x9a\x99\xd9?\x00\x00\xc0?\x00\x00\x00@\x9a\x99\xd9?ff\xe6?\xcd\xcc\xcc?\xcd\xcc\x8c?33\xf3?\xcd\xcc\x8c?\xcd\xcc\x8c?\x00\x00\xc0?\x00\x00\xc0?\xcd\xcc\xcc?\x00\x00\x80?33\xb3?33\xf3?\x00\x00\x00@ff\xe6?\x00\x00\x00@\x9a\x99\xd9?ff\xe6?\x00\x00\xc0?\xcd\xcc\xcc?\x00\x00\xc0?\x9a\x99\xd9?ff\xe6?\xcd\xcc\xcc?\xcd\xcc\x8c?33\xb3?ff\xe6?33\xb3?ff\xa6?33\xb3?ff\xe6?ff\xe6?\x9a\x99\xd9?\x00\x00\x00@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9128
(dp9129
S'isNumeric'
p9130
(dp9131
g9117
I01
sg19
I01
sg20
I01
sg9125
I01
sg21
I01
ssS'trials'
p9132
g9103
sS'dataTypes'
p9133
(lp9134
g9117
ag9125
ag19
ag20
ag21
asS'dataShape'
p9135
(lp9136
I40
aI1
asbsS'method'
p9137
Vrandom
p9138
sS'sequenceIndices'
p9139
g91
(g92
(I0
tS'b'
tRp9140
(I1
(I40
I1
tg98
I01
S'"\x00\x00\x00\x15\x00\x00\x00\x1b\x00\x00\x00\x16\x00\x00\x00\x01\x00\x00\x00\x1f\x00\x00\x00\x08\x00\x00\x00\x18\x00\x00\x00\x10\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00$\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x14\x00\x00\x00\x0c\x00\x00\x00\x0f\x00\x00\x00\x06\x00\x00\x00\r\x00\x00\x00\x04\x00\x00\x00\x19\x00\x00\x00#\x00\x00\x00\t\x00\x00\x00\x1e\x00\x00\x00\x03\x00\x00\x00\x17\x00\x00\x00\x1a\x00\x00\x00\'\x00\x00\x00\x02\x00\x00\x00\n\x00\x00\x00 \x00\x00\x00!\x00\x00\x00\x0b\x00\x00\x00\x1c\x00\x00\x00&\x00\x00\x00%\x00\x00\x00\x07\x00\x00\x00\x05\x00\x00\x00\x1d\x00\x00\x00'
tbsS'finished'
p9141
I01
sS'nReps'
p9142
I1
sS'nRemaining'
p9143
I-1
sS'trialList'
p9144
(lp9145
g1
(cpsychopy.data
TrialType
p9146
g9115
(dp9147
g78
g172
stRp9148
ag1
(g9146
g9115
(dp9149
g78
g130
stRp9150
ag1
(g9146
g9115
(dp9151
g78
g305
stRp9152
ag1
(g9146
g9115
(dp9153
g78
g277
stRp9154
ag1
(g9146
g9115
(dp9155
g78
g242
stRp9156
ag1
(g9146
g9115
(dp9157
g78
g368
stRp9158
ag1
(g9146
g9115
(dp9159
g78
g228
stRp9160
ag1
(g9146
g9115
(dp9161
g78
g361
stRp9162
ag1
(g9146
g9115
(dp9163
g78
g144
stRp9164
ag1
(g9146
g9115
(dp9165
g78
g263
stRp9166
ag1
(g9146
g9115
(dp9167
g78
g312
stRp9168
ag1
(g9146
g9115
(dp9169
g78
g333
stRp9170
ag1
(g9146
g9115
(dp9171
g78
g214
stRp9172
ag1
(g9146
g9115
(dp9173
g78
g235
stRp9174
ag1
(g9146
g9115
(dp9175
g78
g165
stRp9176
ag1
(g9146
g9115
(dp9177
g78
g221
stRp9178
ag1
(g9146
g9115
(dp9179
g78
g158
stRp9180
ag1
(g9146
g9115
(dp9181
g78
g193
stRp9182
ag1
(g9146
g9115
(dp9183
g78
g200
stRp9184
ag1
(g9146
g9115
(dp9185
g78
g179
stRp9186
ag1
(g9146
g9115
(dp9187
g78
g207
stRp9188
ag1
(g9146
g9115
(dp9189
g78
g109
stRp9190
ag1
(g9146
g9115
(dp9191
g78
g123
stRp9192
ag1
(g9146
g9115
(dp9193
g78
g284
stRp9194
ag1
(g9146
g9115
(dp9195
g78
g151
stRp9196
ag1
(g9146
g9115
(dp9197
g78
g249
stRp9198
ag1
(g9146
g9115
(dp9199
g78
g291
stRp9200
ag1
(g9146
g9115
(dp9201
g78
g116
stRp9202
ag1
(g9146
g9115
(dp9203
g78
g340
stRp9204
ag1
(g9146
g9115
(dp9205
g78
g375
stRp9206
ag1
(g9146
g9115
(dp9207
g78
g270
stRp9208
ag1
(g9146
g9115
(dp9209
g78
g137
stRp9210
ag1
(g9146
g9115
(dp9211
g78
g319
stRp9212
ag1
(g9146
g9115
(dp9213
g78
g326
stRp9214
ag1
(g9146
g9115
(dp9215
g78
g102
stRp9216
ag1
(g9146
g9115
(dp9217
g78
g256
stRp9218
ag1
(g9146
g9115
(dp9219
g78
g186
stRp9220
ag1
(g9146
g9115
(dp9221
g78
g354
stRp9222
ag1
(g9146
g9115
(dp9223
g78
g347
stRp9224
ag1
(g9146
g9115
(dp9225
g78
g298
stRp9226
asS'seed'
p9227
NsS'thisIndex'
p9228
g372
sS'thisN'
p9229
I40
sS'thisTrialN'
p9230
I0
sS'nTotal'
p9231
I40
sS'_warnUseOfNext'
p9232
I01
sbag1
(g9102
g3
NtRp9233
(dp9234
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9235
sg9107
(lp9236
sg9109
I79983440
sg10
S'binary'
p9237
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9238
g26
g9118
(g9119
g92
g9120
S'b'
tRp9239
(I1
(I40
I1
tg9122
I00
S'ff\x86@ff\x86@\x00\x00\xa0@ff\x86@33s@\x00\x00\xa0@ff\xa6@33\x93@\x9a\x99y@33\xa3@\xcd\xccl@ff\x96@\xcd\xcc\x8c@33\x93@\x9a\x99\x99@\x9a\x99\x99@\xcd\xcc\x9c@\x00\x00`@\x9a\x99y@\x00\x00\x90@\x00\x00\x90@\x00\x00\x90@33\xa3@33\x93@\x9a\x99\xa9@fff@\x9a\x99\x89@\xcd\xcc\x8c@ff\x96@\xcd\xcc\x8c@\x00\x00`@ff\x96@ff\x86@\x9a\x99\x89@ff\x86@\x00\x00\xa0@33\x93@33\xa3@\x9a\x99\x89@\x00\x00\x80@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9240
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9118
(g9119
g92
g9120
S'b'
tRp9241
(I1
(I40
I1
tg9122
I00
S'\x96\xaa\x0eA=&\xe2?\x86\xca\xac?\xab\x9bY@|2\xa3@\x11\x8e\xc8?\xf8\x00\x00@{V\x05@\x8ce.A[\x8d\xa8?t\xdd\x01A\x01\x9b\xb9?\xcb\x11A@\x075\x03@$\xe1\xfd?+\xe9\x8e?\x90\x17\xb1?(D\x0cA\xed\x8e\x88?X\xb1\xca?\x88\\%@~\xcd\xcc?7\xac\x8a?#\x9cj?\xc6#\x82?C$\x02@\x12T\x05@gU5@\x06h\xa6?\xa3.b?\x84Os?\x85E\xa4?^\xe0\xbd?#y\xb7?\xec\x9a\x99?\x1b\xdf\x9d?\x88\xabj?zYU?\xfd\xfd\xc7@hG\xa4?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9118
(g9119
g92
g9120
S'b'
tRp9242
(I1
(I40
I1
tg9122
I00
S'\xcd\xccL@ff\x86@ff\x86@\xcd\xccL@\x9a\x99Y@\x00\x00@@\x00\x00@@\xcd\xcc,@\x9a\x99\x89@333@\xcd\xccL@\x9a\x99Y@\xcd\xccL@\x9a\x99y@\x9a\x999@33S@\x00\x00`@\x00\x00`@\x9a\x99Y@\x00\x00@@\xcd\xcc,@33S@\xcd\xcc,@\x00\x00\x80@ffF@\xcd\xccl@\x9a\x99\x89@fff@\x00\x00`@\x9a\x99y@\x00\x00@@\x00\x00`@33\x83@ffF@\x9a\x999@\xcd\xccl@\xcd\xccL@33s@ffF@\x9a\x99Y@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9118
(g9119
g92
g9120
S'b'
tRp9243
(I1
(I40
I1
tg60
(S'O4'
I0
I1
tRp9244
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\xc0\xc9\x0f\x03`z\x7f\x0c\xc0\xe0}\x0c@\xe0}\x0c\x80\xdf\xcb\x0c@\xdf\xcb\x0c\x80z\x7f\x0c\xe0J\x80\x0c`\xe0}\x0c`}\x7f\x0c`\xdf\xcb\x0c`x\x7f\x0c\xe0t\x7f\x0c\xa0{\x7f\x0c x\x7f\x0c\x80\xe0}\x0c`\xb1\xcd\x0c@z~\x0c@\xe2}\x0c`t\x7f\x0c\xa0B\x10\x03 B\x10\x03 @\x10\x03`@\x10\x03\x00A\x10\x03@@\x10\x03\xe0A\x10\x03\x80E\x10\x03\x00B\x10\x03 C\x10\x03@B\x10\x03\xe0C\x80\x0c\xa0@\x10\x03\xa0A\x10\x03\x80@\x10\x03\xc0@\x10\x03\xe0B\x10\x03\xe0\xd9\xcb\x0c\xc0\xe3}\x0c\x00\xda\xcb\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9118
(g9119
g92
g9120
S'b'
tRp9245
(I1
(I40
I1
tg9122
I00
S'\xd5x7AT\xe3\xa5@/\xdd|@/\xddL@\xa8\xc6\x1b@d;\x83@\xbaID@\xee|\x07@\xc5 \xc0?b\x10\x00@\xbaI\x8c@+\x87\xc6?\xb6\xf3\x9d?\xb6\xf3\x9d?\xe9&\xd1?B`\xd5?\x91\xed\xec?\x96C\x13@\xbaI\x14@\xfc\xa9I@\xfc\xa9i@\xee|w@\x0e-R@\xe9&\x91?u\x93\xa8?T\xe3-@u\x938@/\xdd\x1c@\x96C\x03@\xb6\xf3]?^\xba\x99?\xf8S\x93?\xfc\xa9\x19@B`\xf5?B`\x95?\xee|7@\x0e-\xa2?B`5@\x96C#@\xb6\xf3\xbd?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9246
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9247
(dp9248
g9130
(dp9249
g26
I01
sg9117
I01
sg28
I01
sg25
I01
sg24
I00
sg9125
I01
sg27
I01
ssg9132
g9233
sg9133
(lp9250
g9117
ag9125
ag24
ag25
ag26
ag27
ag28
asg9135
(lp9251
I40
aI1
asbsg9137
Vsequential
p9252
sg9139
g91
(g92
(I0
tS'b'
tRp9253
(I1
(I40
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9254
g1
(g9146
g9115
(dp9255
g79
g380
sg80
g381
stRp9256
ag1
(g9146
g9115
(dp9257
g79
g389
sg80
g390
stRp9258
ag1
(g9146
g9115
(dp9259
g79
g398
sg80
g399
stRp9260
ag1
(g9146
g9115
(dp9261
g79
g407
sg80
g408
stRp9262
ag1
(g9146
g9115
(dp9263
g79
g416
sg80
g417
stRp9264
ag1
(g9146
g9115
(dp9265
g79
g425
sg80
g426
stRp9266
ag1
(g9146
g9115
(dp9267
g79
g434
sg80
g435
stRp9268
ag1
(g9146
g9115
(dp9269
g79
g443
sg80
g444
stRp9270
ag1
(g9146
g9115
(dp9271
g79
g452
sg80
g453
stRp9272
ag1
(g9146
g9115
(dp9273
g79
g461
sg80
g462
stRp9274
ag1
(g9146
g9115
(dp9275
g79
g470
sg80
g471
stRp9276
ag1
(g9146
g9115
(dp9277
g79
g479
sg80
g480
stRp9278
ag1
(g9146
g9115
(dp9279
g79
g488
sg80
g489
stRp9280
ag1
(g9146
g9115
(dp9281
g79
g497
sg80
g498
stRp9282
ag1
(g9146
g9115
(dp9283
g79
g506
sg80
g507
stRp9284
ag1
(g9146
g9115
(dp9285
g79
g515
sg80
g516
stRp9286
ag1
(g9146
g9115
(dp9287
g79
g524
sg80
g525
stRp9288
ag1
(g9146
g9115
(dp9289
g79
g533
sg80
g534
stRp9290
ag1
(g9146
g9115
(dp9291
g79
g542
sg80
g543
stRp9292
ag1
(g9146
g9115
(dp9293
g79
g551
sg80
g552
stRp9294
ag1
(g9146
g9115
(dp9295
g79
g560
sg80
g561
stRp9296
ag1
(g9146
g9115
(dp9297
g79
g569
sg80
g570
stRp9298
ag1
(g9146
g9115
(dp9299
g79
g578
sg80
g579
stRp9300
ag1
(g9146
g9115
(dp9301
g79
g587
sg80
g588
stRp9302
ag1
(g9146
g9115
(dp9303
g79
g596
sg80
g597
stRp9304
ag1
(g9146
g9115
(dp9305
g79
g605
sg80
g606
stRp9306
ag1
(g9146
g9115
(dp9307
g79
g614
sg80
g615
stRp9308
ag1
(g9146
g9115
(dp9309
g79
g623
sg80
g624
stRp9310
ag1
(g9146
g9115
(dp9311
g79
g632
sg80
g633
stRp9312
ag1
(g9146
g9115
(dp9313
g79
g641
sg80
g642
stRp9314
ag1
(g9146
g9115
(dp9315
g79
g650
sg80
g651
stRp9316
ag1
(g9146
g9115
(dp9317
g79
g659
sg80
g660
stRp9318
ag1
(g9146
g9115
(dp9319
g79
g668
sg80
g669
stRp9320
ag1
(g9146
g9115
(dp9321
g79
g677
sg80
g678
stRp9322
ag1
(g9146
g9115
(dp9323
g79
g686
sg80
g687
stRp9324
ag1
(g9146
g9115
(dp9325
g79
g695
sg80
g696
stRp9326
ag1
(g9146
g9115
(dp9327
g79
g704
sg80
g705
stRp9328
ag1
(g9146
g9115
(dp9329
g79
g713
sg80
g714
stRp9330
ag1
(g9146
g9115
(dp9331
g79
g722
sg80
g723
stRp9332
ag1
(g9146
g9115
(dp9333
g79
g731
sg80
g732
stRp9334
asg9227
Nsg9228
g735
sg9229
I40
sg9230
I0
sg9231
I40
sg9232
I01
sbag1
(g9102
g3
NtRp9335
(dp9336
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9337
sg9107
(lp9338
sg9109
I79983440
sg10
S'practice_loop'
p9339
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9340
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9341
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9118
(g9119
g92
g9120
S'b'
tRp9342
(I1
(I14
I1
tg9244
I00
S'\x08\xd9\x10\r0e\x10\x03X\xd9\x10\r\x80\xd9\x10\r0\xd9\x10\r\x90e\x10\x03\x80\xd9\x10\r\x08\xd9\x10\r\x00\xe1\x10\r \xda\x10\r`e\x10\x03\xa8\xd9\x10\r\x90e\x10\x03\xa8\xd9\x10\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9343
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9344
(I1
(I14
I1
tg9244
I00
S'pg\xeb\x04h\xc9N\x02\xc0~\xf3\x04H~\xf3\x04`{\xf3\x04\x88q\xf3\x040{\xf3\x04\xa0q\xf3\x04Ps\xf3\x04\xf0x\xf3\x04h|\xf3\x04\x90{\xf3\x04p}\xf3\x04\xc8|\xf3\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9345
(dp9346
g9130
(dp9347
g9117
I01
sg33
I00
sg9125
I01
sg34
I00
ssg9132
g9335
sg9133
(lp9348
g9117
ag9125
ag33
ag34
asg9135
(lp9349
I14
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9350
(I1
(I14
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9351
g1
(g9146
g9115
(dp9352
g81
g743
sg82
g744
sg83
g748
sg84
g749
stRp9353
ag1
(g9146
g9115
(dp9354
g81
g755
sg82
g756
sg83
g760
sg84
g761
stRp9355
ag1
(g9146
g9115
(dp9356
g81
g766
sg82
g767
sg83
g771
sg84
g772
stRp9357
ag1
(g9146
g9115
(dp9358
g81
g777
sg82
g778
sg83
g782
sg84
g783
stRp9359
ag1
(g9146
g9115
(dp9360
g81
g755
sg82
g788
sg83
g760
sg84
g792
stRp9361
ag1
(g9146
g9115
(dp9362
g81
g797
sg82
g798
sg83
g802
sg84
g803
stRp9363
ag1
(g9146
g9115
(dp9364
g81
g777
sg82
g808
sg83
g782
sg84
g812
stRp9365
ag1
(g9146
g9115
(dp9366
g81
g743
sg82
g817
sg83
g748
sg84
g821
stRp9367
ag1
(g9146
g9115
(dp9368
g81
g826
sg82
g827
sg83
g831
sg84
g832
stRp9369
ag1
(g9146
g9115
(dp9370
g81
g766
sg82
g837
sg83
g771
sg84
g841
stRp9371
ag1
(g9146
g9115
(dp9372
g81
g826
sg82
g846
sg83
g831
sg84
g850
stRp9373
ag1
(g9146
g9115
(dp9374
g81
g855
sg82
g856
sg83
g860
sg84
g861
stRp9375
ag1
(g9146
g9115
(dp9376
g81
g797
sg82
g866
sg83
g802
sg84
g870
stRp9377
ag1
(g9146
g9115
(dp9378
g81
g855
sg82
g875
sg83
g860
sg84
g879
stRp9379
asg9227
Nsg9228
g881
sg9229
I14
sg9230
I0
sg9231
I14
sg9232
I01
sbag1
(g9102
g3
NtRp9380
(dp9381
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9382
sg9107
(lp9383
sg9109
I79983440
sg10
S'block_loop'
p9384
sg6
g9111
sg9112
I3
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9385
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9386
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9387
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9388
(dp9389
g9130
(dp9390
g9117
I01
sg9125
I01
ssg9132
g9380
sg9133
(lp9391
g9117
ag9125
asg9135
(lp9392
I1
aI3
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9393
(I1
(I1
I3
tg98
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9141
I01
sg9142
I3
sg9143
I-1
sg9144
(lp9394
Nasg9227
Nsg9228
g6364
sg9229
I3
sg9230
I0
sg9231
I3
sg9232
I01
sbag1
(g9102
g3
NtRp9395
(dp9396
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9397
sg9107
(lp9398
sg9109
I79983440
sg10
S'trial_loop'
p9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9400
g33
g9118
(g9119
g92
g9120
S'b'
tRp9401
(I1
(I200
I1
tg9244
I00
S'\xe0\x00\x13\r\xa0\x0b\x0e\x03\xd0\xc5\x12\r\x10\x01\x13\r\xd0\xd9\x12\r\x08\xc6\x12\r\xf8\xd9\x12\r \xda\x12\r\xd0\xc5\x12\r\xd0\xd9\x12\rH\xda\x12\r@\x0b\x0e\x03\xb0\xdb\x12\r\xe0\x00\x13\rp\xda\x12\r@\x0b\x0e\x030\x02\x13\r\xd0\xc5\x12\r\x08\xc6\x12\r`\x06\x0e\x03\xc0\x03\x0e\x03@\x01\x13\r\x00\x07\x0e\x03@\x01\x13\r\x10\x01\x13\r\xa0\x0b\x0e\x03\x00\xdc\x12\r\xc0\xda\x12\r\x90\x02\x13\r\x00\xdc\x12\r\x08\xc6\x12\r\xa0\x01\x13\r\xd0\xc5\x12\r\xd8\xdb\x12\r\x00\x07\x0e\x03\x98\xda\x12\r\x00\x07\x0e\x03\xc0\x03\x0e\x03\xe8\xda\x12\r\x10\xdb\x12\r\xe8\xda\x12\r@\x01\x13\r\xe8\xc6\x12\r@\xc6\x12\r\x10\x01\x13\r\x08\xc6\x12\r@\xc6\x12\rp\x01\x13\r\xe8\xda\x12\r\xc0\xda\x12\r`\xdb\x12\rp\x01\x13\r\xc0\xda\x12\r\xd0\x01\x13\r\xf8\xd9\x12\r\xd0\xc5\x12\r\xd0\xd9\x12\r\x10\xdb\x12\rp\xda\x12\r(\xdc\x12\r@\x01\x13\r@\xc6\x12\r\x00\x07\x0e\x03\xc0\x03\x0e\x03p\x01\x13\r@\x01\x13\r\x00\x07\x0e\x03 \xda\x12\r0\x02\x13\rp\xda\x12\r@\x0b\x0e\x03\x00\x02\x13\r`\x02\x13\r\x00\x07\x0e\x03\x00\xdc\x12\r\xd0\xc5\x12\r\xe8\xda\x12\r\xa0\x0b\x0e\x03\x08\xc6\x12\r \xc7\x12\r\xd0\xd9\x12\r\xe8\xda\x12\rH\xda\x12\r@\x01\x13\r \xda\x12\r`\x02\x13\r \xda\x12\r\xe8\xda\x12\r\xa0\x0b\x0e\x03\x10\xdb\x12\r\xe8\xda\x12\r\xd8\xdb\x12\r\x10\xdb\x12\r\xc0\xda\x12\r\xa0\x01\x13\r@\xc6\x12\r@\x0b\x0e\x03\x88\xdb\x12\r\xb0\xc6\x12\r \xc7\x12\r\xe8\xda\x12\r\xe0\x00\x13\r\x98\xda\x12\r@\x0b\x0e\x03\xa0\x0b\x0e\x03(\xdc\x12\r\xd0\x01\x13\r\x88\xdb\x12\r\x08\xc6\x12\rH\xda\x12\r\xd0\xd9\x12\r\x10\x01\x13\r\x08\xc6\x12\r\x98\xda\x12\r\xe0\x00\x13\r \xda\x12\r0\x02\x13\rp\xda\x12\r\xf8\xd9\x12\r@\xc6\x12\r\x08\xc6\x12\rp\xda\x12\r\x00\x02\x13\r\xf8\xd9\x12\r\xc0\x03\x0e\x03@\x01\x13\r\x10\x01\x13\r\xa0\x01\x13\r\x10\x01\x13\r@\x0b\x0e\x03p\x01\x13\r@\xc6\x12\r\xa0\x0b\x0e\x03\xd0\xd9\x12\r\x10\x01\x13\r\xe0\x00\x13\r@\x0b\x0e\x03H\xda\x12\r\x10\xdb\x12\r\x00\x07\x0e\x03@\x0b\x0e\x03 \xc7\x12\r\xe8\xc6\x12\r\xc0\x03\x0e\x03\x98\xda\x12\r\xa0\x01\x13\r\x98\xda\x12\r\x10\xdb\x12\r\xf8\xd9\x12\r\xa0\x0b\x0e\x03H\xda\x12\r@\x01\x13\rp\x01\x13\r\xc0\x03\x0e\x03`\x06\x0e\x03\xd0\xc5\x12\r\xe0\x00\x13\r\xf8\xd9\x12\r\x10\xdb\x12\r\x88\xdb\x12\rp\x01\x13\r \xc7\x12\r\x10\xdb\x12\r\x98\xda\x12\r\xf0\x02\x13\r\xf8\xd9\x12\r \xda\x12\r\x08\xc6\x12\r\xc0\xda\x12\r\x10\x01\x13\rH\xda\x12\r\xd0\xd9\x12\r@\x01\x13\rp\x01\x13\r\xc0\x03\x0e\x03 \xda\x12\rH\xda\x12\rp\x01\x13\r\x10\xdb\x12\r\xa0\x03\x0e\x03\xd8\xdb\x12\r@\xc6\x12\r \xda\x12\r\xc0\xda\x12\rp\xda\x12\r\xc0\x03\x0e\x03H\xda\x12\r\x00\x07\x0e\x03\xe8\xda\x12\r\x98\xda\x12\r\xc0\x03\x0e\x03\xf0\x02\x13\r\xd0\xc5\x12\r\xa0\x0b\x0e\x03x\xc6\x12\r\xd8\xdb\x12\r@\xc6\x12\r \xda\x12\r\xc0\x02\x13\r`\xdb\x12\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9402
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9403
(I1
(I200
I1
tg9244
I00
S'\xe0\t\xce\x0c\x00"\x0f\x03`/\x0f\x03\x80\x02\x0e\x03\xe0q\xce\x0c\xe0s\xce\x0c\xa0r\xce\x0c\x00r\xce\x0c\xc0-\x0f\x03\xe0-\x0f\x03@,\x0f\x03@-\x0f\x03@+\x0f\x03\x00+\x0f\x03\xa0/\x0f\x03`-\x0f\x03\x80,\x0f\x03\xa0.\x0f\x03\x00/\x0f\x03\x00,\x0f\x03\x00.\x0f\x03\xc0.\x0f\x03\xa0-\x0f\x03\x80/\x0f\x03 .\x0f\x03\xc0+\x0f\x03\x80.\x0f\x03@.\x0f\x03\x00-\x0f\x03\xa0z~\x0c\xa0\x00\xce\x0c@i\x0e\x03`a\x0e\x03 i\x0e\x03\x00l\x0e\x03\xe0a\x0e\x03 k\x0e\x03\x80-\x0f\x03\xe0k\x0e\x03\xc0k\x0e\x03@b\x0e\x03 O}\x0c\x80J}\x0c\x80O}\x0c\x00N}\x0c\xe0O}\x0c \xd7\xcb\x0c`O}\x0c`gr\x0c`br\x0c\x80kr\x0c@cr\x0c`lr\x0c\xc0kr\x0c\x00kr\x0c\xa0br\x0c\x80gr\x0c\xe0kr\x0c\xa0fr\x0c\x00gr\x0c\xe0or\x0c\xe0br\x0c\x80fr\x0c\x00lr\x0c\xe0gr\x0c\xa0lr\x0c kr\x0c\x00cr\x0c gr\x0c@`r\x0c`mr\x0c\x80br\x0c mr\x0c\xc0gr\x0c\x80cr\x0c\x00fr\x0c`fr\x0c@gr\x0c@kr\x0c\xa0cr\x0c\x80lr\x0c\xa0gr\x0c\xe0fr\x0c@mr\x0c@fr\x0c fr\x0c\xc0br\x0c\xc0,\x0f\x03\x00\xdb\xca\x0c\xc0\xd0\xca\x0c\xe0\xd0\xca\x0c\xc0\xda\xca\x0c\xa0\xd0\xca\x0c\x80\xd0\xca\x0c@\xd1\xca\x0c\xe0\xd2\xca\x0c@\xd3\xca\x0c\x00a\x0e\x03\xa0\xd2\xca\x0c\x80T\xb4\x04\xa0S\xb4\x04\xc0[\xb4\x04`Q\xb4\x04 T\xb4\x04\x80Q\xb4\x04\xa0P\xb4\x04\xe0S\xb4\x04\xa0Q\xb4\x04@R\xb4\x04\xe0P\xb4\x04@T\xb4\x04@S\xb4\x04\x80U\xb4\x04`U\xb4\x04\xc0R\xb4\x04@V\xb4\x04 V\xb4\x04 S\xb4\x04\x00Q\xb4\x04\xa0V\xb4\x04@U\xb4\x04\x00V\xb4\x04\x00U\xb4\x04\xc0S\xb4\x04\x00R\xb4\x04 U\xb4\x04\xc0T\xb4\x04\x80W\xb4\x04`V\xb4\x04`T\xb4\x04 X\xb4\x04\xe0W\xb4\x04\xa0T\xb4\x04\x80R\xb4\x04\xe0R\xb4\x04\xe0V\xb4\x04\xe0T\xb4\x04\xe0U\xb4\x04`W\xb4\x04\xc0V\xb4\x04\xe0N}\x0c R\xb4\x04@W\xb4\x04 Y\xb4\x04\xa0U\xb4\x04@Y\xb4\x04\x80Y\xb4\x04\xa0Z\xb4\x04\xc0P\xb4\x04\xc0Y\xb4\x04 Q\xb4\x04\x00Z\xb4\x04`Y\xb4\x04\xe0Q\xb4\x04\x80S\xb4\x04`X\xb4\x04\xe0Z\xb4\x04\x00T\xb4\x04\xa0X\xb4\x04\xc0U\xb4\x04`Z\xb4\x04`R\xb4\x04\xa0R\xb4\x04@Q\xb4\x04\x00Y\xb4\x04 \\\xb4\x04\xc0X\xb4\x04\xc0W\xb4\x04\xc0Z\xb4\x04`S\xb4\x04\xe0Y\xb4\x04\x00X\xb4\x04\x00S\xb4\x04\x80\\\xb4\x04@[\xb4\x04@Z\xb4\x04\xa0W\xb4\x04\x00\\\xb4\x04@]\xb4\x04`]\xb4\x04 ]\xb4\x04\xa0Y\xb4\x04@\\\xb4\x04\xe0\\\xb4\x04\xa0\\\xb4\x04 [\xb4\x04\xe0X\xb4\x04 ^\xb4\x04\x00W\xb4\x04\xa0]\xb4\x04\x80]\xb4\x04\x80Z\xb4\x04\x80^\xb4\x04\x80V\xb4\x04@^\xb4\x04\xc0Q\xb4\x04\x00_\xb4\x04 _\xb4\x04@X\xb4\x04\xc0^\xb4\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9404
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9405
(I1
(I200
I1
tg9122
I00
S'\x07\x8c\xa8?|\xaf\x8a?k\xad\xaa?+\x18\x91?*(\xc2?\xf9\xa8\xb9?v\x16\x91?\xc6\xc7{?N|\xf7?\x9d#\x02@\x88\x8f\x88?)\x8e\xc8?\xca\'\x82?\x9e6\xd3?\x91(\xe2?Yk\x86?\xe0}\x97?\xa6}w?\xa0\x07\xa0?o\xd1\xac?&\xdf{?\xa2$\xc2?-\xc7{?\xf4\x04\xc0?J\x17\x91?q\xd5\x0c@\x88X\x95?t|\xb7?\xaf\x8c\x88?\x0c\x17\xb1?FE\xb3?2\xe0\x9d?\xbe\x8a\x18@n\x04\xa0?\x16\xf8n?\x80]\x95?\xd6\xd0\x8c?6\x06\xa0? .\xe2?\xd4\x0b\x91??\x98\xc8?K\x16\xb1?\xadi\x86?\xc6\xde]@\xc1\x9c\xb9?\xe7\xcej?$\xad\xaa?J\xb0\xaa?\x96E\xa4?\xd6\xd2\xac?\xf8\xe2\x8c?q\x9f\xd9?\xf7H\xc4?\x8a\x06\x80?\x99\xc1\xdb?\xb2z\x86?\xc5\xf3\x8e?\xfe\x85\x88?"\xc1\x9b?\xee\xf0\xae?\xc0\x8b(@\xad4\x93?^i\xa6?`\x84w?>\xe3\xbd?`9\x93?\x10\xd4L?}\xa0\x99?!\xb2j?\x8a$\x12@\xc1(b?\xb9\xf4\xae?"7\xf3?\xec$\xa2?\xa8.b?\xf7\xb8*?2>s?F\x83w?vj\x86?b\xc7{?\x8e/b?\xcf\'\x82?\x1c\xcf\xcc?\x0cY\xb5?a\xea]?fyf?N\xb7j?O\xc1\x9b?\r\x83w?8\xf7\x7f?\xb8\x8af?\x8cgf@\x08.\x93?\xf8\xb0\xca?7\xe6\x9d?>\xaej?5J\x84?P\xd2\x8c?\xc00b?\xfc\x13\xb1?\x1dIb?\x01\x9f\xb9?\x84\x8c\xc8?p&\x82?A\xe1\x9d?\xab\xcf\xac?\x8d\xfcn?\x84\xc1;?:\xf7\xce?*\x06\x80?0\xc8{?P\xbe\xfb?<\x1bQ?\x0etf?\xef;s?\xd3\x9f\xf9?E\xb1j?\xb0\'\xa2?Z`U?\xc7\xdd\x9d?\xdcm\x86?\x1b\x0e@?\x82\xf7n?\x91<3?Y\xc3;?\xcc\xa0Y?\xa3\xde\x8c?\x1f\x92H?\xdd\xd4L?$\xa6Y?\xb3\xfcn?EUU?\xc7\xbe\xfb?\xd9\xd1\x8c?\xbb\xf7\xce?\x01\xac\x1a@\xea\x8e\x88?\xbf5\x82?\xb3r7?i\x90\xc8?\x8fsw?\x167\xf3?*yU?\xdf-b?\x9d\x9d\x99?\'\x17\x91?\xd2\xeb]?R\xa2H?\x9c\xd9L?H\xcf\x0c@\xe4\xfan?\x96{\xb7?\xaf3\xe2?\xe10"?\x86MD?)o&?\xec<s?\xd4\x94H?\x93\rQ?\xbfrf?{\xf2\x8e?"\x8d\x88?"\xa8\x8a?v\xba\x8a?\x08H\x84?\xa4\xd1\x8c?\x82\x9a\xa1@,\'\x82?\x05\xc2\xbb?\xbe\xd1\x8c?\x07RD?6\xb9j?Hl\x86?\xf3\x9a\x88?\x88RD?\x98[\xb5?\x90\x18\xb1?\xb6\x02\xc0?FM\x84?\xc2l\xa6?R\xfbn?\xffC\x84?6\xb7j?\x024\x82?\xef\xfbn?\xc7\xc3;?\x7f\xc2\xbb?\x9dbU?\x10y\x86?DBs?X\x04\x80?6\x07\x80?\x03-b?S\x02\x8f?\x13\x8e\x88?\x9a\x9f\xd9?\x14\xf1\x8e?\xbd\x03\xa0?]\x8b7?\xe0{\x97?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9406
(I1
(I200
I1
tg9244
I00
S'\x98\x7f\xf3\x04@z\xf3\x04\x88\x07\x15\x05P\x00\x15\x05(\x04\x15\x05h\x06\x15\x05\xe0\x06\x15\x05P\x0c\x15\x05\xb8\x01\x15\x05\xb0\x00\x15\x05p\x01\x15\x05(\n\x15\x05\xa8\x0b\x15\x05H\x02\x15\x05\xc8\x06\x15\x05\xd0\x07\x15\x050\x05\x15\x05\x90\x08\x15\x05\xf0\x0b\x15\x05\x88\n\x15\x05\xc8\x0c\x15\x05\xf0\x08\x15\x05\xd0\x01\x15\x05\xf8\x00\x15\x05 \x06\x15\x05\x98\x0f\x15\x05\xa0\x01\x15\x05H\x0e\x15\x058\x06\x15\x05\x90\x02\x15\x05\xf8\x0c\x15\x05\xb8\r\x15\x05\xe8\x07\x15\x05\x18\x08\x15\x05 \t\x15\x05\xa8\x05\x15\x058\x03\x15\x058\t\x15\x05\xa8\x0e\x15\x05\x08\x03\x15\x05\xd0\r\x15\x05\xf0\x0e\x15\x05`\x05\x15\x05\xe0\x03\x15\x05(\x01\x15\x05\xb0\x06\x15\x05x\x0b\x15\x05\xb8\n\x15\x05\xf0\x02\x15\x05\xf8\t\x15\x05\xa0\x04\x15\x05H\x05\x15\x05`\x02\x15\x05\x98\x03\x15\x05P\x03\x15\x05\xb0\x0c\x15\x05\xa0\r\x15\x05 \x0c\x15\x05\xd8\x08\x15\x05\x00\x02\x15\x05\xe0\x00\x15\x05P\x0f\x15\x05\xd0\n\x15\x05\x08\x0f\x15\x05x\x08\x15\x05\xc0\x0e\x15\x05\x10\r\x15\x05`\x0b\x15\x05P\t\x15\x050\x02\x15\x058\x00\x15\x05P\x06\x15\x05\xe8\x04\x15\x05\xa0\n\x15\x05\xf8\x06\x15\x05\x18\x0b\x15\x05h\x00\x15\x05@\n\x15\x05X\r\x15\x05h\x0c\x15\x05\x98\t\x15\x05\x90\x0e\x15\x05p\r\x15\x05\x80\t\x15\x05\x90\x05\x15\x05\x10\n\x15\x05\x80\x06\x15\x05@\x07\x15\x05(\r\x15\x05\xc8\t\x15\x05h\x0f\x15\x05\x00\x0e\x15\x05\x10\x04\x15\x05X\x07\x15\x05x\x0e\x15\x05\x18\x02\x15\x05\x98\x0c\x15\x05 \x0f\x15\x050\x08\x15\x05x\x05\x15\x05\x80\x0f\x15\x058\x0f\x15\x05\xe0\t\x15\x05\x80\x0c\x15\x05`\x0e\x15\x05\xf0\x05\x15\x05\xa8\x08\x15\x05\x90\x0b\x15\x05X\n\x15\x05\xe8\r\x15\x05\xd8\x05\x15\x058\x0c\x15\x05\xd8\x0b\x15\x05\xd0\x04\x15\x05\x08\x0c\x15\x05p\x04\x15\x05\xf8\x03\x15\x05\xd8\x0e\x15\x05\x00\x0b\x15\x05\xe0\x0c\x15\x05\x80\x00\x15\x050\x0e\x15\x05X\x04\x15\x05\x80\x03\x15\x05@\r\x15\x05\xb0\t\x15\x05\x00\x08\x15\x05\xe8\x01\x15\x05`\x08\x15\x05\x88\r\x15\x05\x18\x0e\x15\x05H\x0b\x15\x05\xb0\x03\x15\x05p\n\x15\x05h\x03\x15\x05\x98\x00\x15\x05\xc0\x08\x15\x05\xc0\x0b\x15\x05\xe0\x0f\x15\x05\x98<\xf4\x04\xf0;\xf4\x04\xa82\xf4\x04\xf86\xf4\x04X:\xf4\x04\x90;\xf4\x04H2\xf4\x04\xa85\xf4\x04p:\xf4\x04h?\xf4\x04\x08<\xf4\x04`8\xf4\x04\xc83\xf4\x04P?\xf4\x04H8\xf4\x04\x089\xf4\x04\xc80\xf4\x04\xb0<\xf4\x04\xd01\xf4\x04 9\xf4\x04\xc8?\xf4\x04\x98?\xf4\x04@=\xf4\x04\xd88\xf4\x04x5\xf4\x04p7\xf4\x04H>\xf4\x0486\xf4\x04\x10=\xf4\x04`;\xf4\x04\x08?\xf4\x04\xc0>\xf4\x04\xf08\xf4\x04\x905\xf4\x04\xe8=\xf4\x04\xc05\xf4\x04p4\xf4\x04\xf0>\xf4\x04\x881\xf4\x04X1\xf4\x040\x0b\x15\x05x\x02\x15\x05\xc8\x0f\x15\x05h\t\x15\x05\x18\x05\x15\x05\x10\x07\x15\x05@\x01\x15\x05\xc0\x05\x15\x05\x10\x01\x15\x05(\x07\x15\x05\x98\x06\x15\x05\x08\x06\x15\x05 \x03\x15\x05H\x08\x15\x05\x00\x05\x15\x05\x08\t\x15\x05@\x04\x15\x05\x88\x04\x15\x05 \x00\x15\x05\xd8\x02\x15\x05\xb8\x07\x15\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9407
(dp9408
g9130
(dp9409
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9395
sg9133
(lp9410
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9411
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9412
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9413
g1
(g9146
g9115
(dp9414
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9415
ag1
(g9146
g9115
(dp9416
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9417
ag1
(g9146
g9115
(dp9418
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9419
ag1
(g9146
g9115
(dp9420
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9421
ag1
(g9146
g9115
(dp9422
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9423
ag1
(g9146
g9115
(dp9424
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9425
ag1
(g9146
g9115
(dp9426
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9427
ag1
(g9146
g9115
(dp9428
g906
g1021
sg894
g1017
sg908
g1028
sg903
g1025
stRp9429
ag1
(g9146
g9115
(dp9430
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9431
ag1
(g9146
g9115
(dp9432
g906
g970
sg894
g1047
sg908
g977
sg903
g1054
stRp9433
ag1
(g9146
g9115
(dp9434
g906
g1066
sg894
g1062
sg908
g1073
sg903
g1070
stRp9435
ag1
(g9146
g9115
(dp9436
g906
g1083
sg894
g1079
sg908
g1090
sg903
g1087
stRp9437
ag1
(g9146
g9115
(dp9438
g906
g1021
sg894
g1096
sg908
g1028
sg903
g1103
stRp9439
ag1
(g9146
g9115
(dp9440
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9441
ag1
(g9146
g9115
(dp9442
g906
g1128
sg894
g1124
sg908
g1135
sg903
g1132
stRp9443
ag1
(g9146
g9115
(dp9444
g906
g1083
sg894
g1141
sg908
g1090
sg903
g1148
stRp9445
ag1
(g9146
g9115
(dp9446
g906
g970
sg894
g1047
sg908
g977
sg903
g1054
stRp9447
ag1
(g9146
g9115
(dp9448
g906
g936
sg894
g1169
sg908
g943
sg903
g1176
stRp9449
ag1
(g9146
g9115
(dp9450
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9451
ag1
(g9146
g9115
(dp9452
g906
g1083
sg894
g1079
sg908
g1090
sg903
g1087
stRp9453
ag1
(g9146
g9115
(dp9454
g906
g1214
sg894
g1210
sg908
g1221
sg903
g1218
stRp9455
ag1
(g9146
g9115
(dp9456
g906
g1231
sg894
g1227
sg908
g1238
sg903
g1235
stRp9457
ag1
(g9146
g9115
(dp9458
g906
g1248
sg894
g1244
sg908
g1255
sg903
g1252
stRp9459
ag1
(g9146
g9115
(dp9460
g906
g1231
sg894
g1261
sg908
g1238
sg903
g1268
stRp9461
ag1
(g9146
g9115
(dp9462
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9463
ag1
(g9146
g9115
(dp9464
g906
g919
sg894
g1289
sg908
g926
sg903
g1296
stRp9465
ag1
(g9146
g9115
(dp9466
g906
g1314
sg894
g1304
sg908
g1308
sg903
g1312
stRp9467
ag1
(g9146
g9115
(dp9468
g906
g1325
sg894
g1321
sg908
g1332
sg903
g1329
stRp9469
ag1
(g9146
g9115
(dp9470
g906
g1231
sg894
g1261
sg908
g1238
sg903
g1268
stRp9471
ag1
(g9146
g9115
(dp9472
g906
g1314
sg894
g1351
sg908
g1308
sg903
g1358
stRp9473
ag1
(g9146
g9115
(dp9474
g906
g987
sg894
g1366
sg908
g994
sg903
g1373
stRp9475
ag1
(g9146
g9115
(dp9476
g906
g899
sg894
g1381
sg908
g909
sg903
g1388
stRp9477
ag1
(g9146
g9115
(dp9478
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9479
ag1
(g9146
g9115
(dp9480
g906
g1128
sg894
g1409
sg908
g1135
sg903
g1416
stRp9481
ag1
(g9146
g9115
(dp9482
g906
g1248
sg894
g1424
sg908
g1255
sg903
g1431
stRp9483
ag1
(g9146
g9115
(dp9484
g906
g1314
sg894
g1304
sg908
g1308
sg903
g1312
stRp9485
ag1
(g9146
g9115
(dp9486
g906
g1248
sg894
g1244
sg908
g1255
sg903
g1252
stRp9487
ag1
(g9146
g9115
(dp9488
g906
g1214
sg894
g1465
sg908
g1221
sg903
g1472
stRp9489
ag1
(g9146
g9115
(dp9490
g906
g1484
sg894
g1480
sg908
g1491
sg903
g1488
stRp9491
ag1
(g9146
g9115
(dp9492
g906
g1501
sg894
g1497
sg908
g1508
sg903
g1505
stRp9493
ag1
(g9146
g9115
(dp9494
g906
g1484
sg894
g1514
sg908
g1491
sg903
g1521
stRp9495
ag1
(g9146
g9115
(dp9496
g906
g1231
sg894
g1227
sg908
g1238
sg903
g1235
stRp9497
ag1
(g9146
g9115
(dp9498
g906
g1248
sg894
g1244
sg908
g1255
sg903
g1252
stRp9499
ag1
(g9146
g9115
(dp9500
g906
g1559
sg894
g1555
sg908
g1566
sg903
g1563
stRp9501
ag1
(g9146
g9115
(dp9502
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9503
ag1
(g9146
g9115
(dp9504
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9505
ag1
(g9146
g9115
(dp9506
g906
g1559
sg894
g1598
sg908
g1566
sg903
g1605
stRp9507
ag1
(g9146
g9115
(dp9508
g906
g1617
sg894
g1613
sg908
g1624
sg903
g1621
stRp9509
ag1
(g9146
g9115
(dp9510
g906
g1484
sg894
g1514
sg908
g1491
sg903
g1521
stRp9511
ag1
(g9146
g9115
(dp9512
g906
g1325
sg894
g1321
sg908
g1332
sg903
g1329
stRp9513
ag1
(g9146
g9115
(dp9514
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9515
ag1
(g9146
g9115
(dp9516
g906
g1617
sg894
g1669
sg908
g1624
sg903
g1676
stRp9517
ag1
(g9146
g9115
(dp9518
g906
g1325
sg894
g1321
sg908
g1332
sg903
g1329
stRp9519
ag1
(g9146
g9115
(dp9520
g906
g936
sg894
g1169
sg908
g943
sg903
g1176
stRp9521
ag1
(g9146
g9115
(dp9522
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9523
ag1
(g9146
g9115
(dp9524
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9525
ag1
(g9146
g9115
(dp9526
g906
g970
sg894
g1047
sg908
g977
sg903
g1054
stRp9527
ag1
(g9146
g9115
(dp9528
g906
g1501
sg894
g1749
sg908
g1508
sg903
g1756
stRp9529
ag1
(g9146
g9115
(dp9530
g906
g1128
sg894
g1124
sg908
g1135
sg903
g1132
stRp9531
ag1
(g9146
g9115
(dp9532
g906
g1559
sg894
g1555
sg908
g1566
sg903
g1563
stRp9533
ag1
(g9146
g9115
(dp9534
g906
g1231
sg894
g1227
sg908
g1238
sg903
g1235
stRp9535
ag1
(g9146
g9115
(dp9536
g906
g1559
sg894
g1598
sg908
g1566
sg903
g1605
stRp9537
ag1
(g9146
g9115
(dp9538
g906
g1248
sg894
g1424
sg908
g1255
sg903
g1431
stRp9539
ag1
(g9146
g9115
(dp9540
g906
g1214
sg894
g1210
sg908
g1221
sg903
g1218
stRp9541
ag1
(g9146
g9115
(dp9542
g906
g1617
sg894
g1669
sg908
g1624
sg903
g1676
stRp9543
ag1
(g9146
g9115
(dp9544
g906
g1231
sg894
g1227
sg908
g1238
sg903
g1235
stRp9545
ag1
(g9146
g9115
(dp9546
g906
g1248
sg894
g1244
sg908
g1255
sg903
g1252
stRp9547
ag1
(g9146
g9115
(dp9548
g906
g1021
sg894
g1017
sg908
g1028
sg903
g1025
stRp9549
ag1
(g9146
g9115
(dp9550
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9551
ag1
(g9146
g9115
(dp9552
g906
g1128
sg894
g1409
sg908
g1135
sg903
g1416
stRp9553
ag1
(g9146
g9115
(dp9554
g906
g1083
sg894
g1141
sg908
g1090
sg903
g1148
stRp9555
ag1
(g9146
g9115
(dp9556
g906
g953
sg894
g1933
sg908
g960
sg903
g1940
stRp9557
ag1
(g9146
g9115
(dp9558
g906
g1066
sg894
g1948
sg908
g1073
sg903
g1955
stRp9559
ag1
(g9146
g9115
(dp9560
g906
g1248
sg894
g1244
sg908
g1255
sg903
g1252
stRp9561
ag1
(g9146
g9115
(dp9562
g906
g1314
sg894
g1351
sg908
g1308
sg903
g1358
stRp9563
ag1
(g9146
g9115
(dp9564
g906
g936
sg894
g1169
sg908
g943
sg903
g1176
stRp9565
ag1
(g9146
g9115
(dp9566
g906
g1484
sg894
g1480
sg908
g1491
sg903
g1488
stRp9567
ag1
(g9146
g9115
(dp9568
g906
g919
sg894
g1289
sg908
g926
sg903
g1296
stRp9569
ag1
(g9146
g9115
(dp9570
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9571
ag1
(g9146
g9115
(dp9572
g906
g1325
sg894
g2041
sg908
g1332
sg903
g2048
stRp9573
ag1
(g9146
g9115
(dp9574
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9575
ag1
(g9146
g9115
(dp9576
g906
g1484
sg894
g1514
sg908
g1491
sg903
g1521
stRp9577
ag1
(g9146
g9115
(dp9578
g906
g1066
sg894
g1062
sg908
g1073
sg903
g1070
stRp9579
ag1
(g9146
g9115
(dp9580
g906
g1231
sg894
g1261
sg908
g1238
sg903
g1268
stRp9581
ag1
(g9146
g9115
(dp9582
g906
g1021
sg894
g1017
sg908
g1028
sg903
g1025
stRp9583
ag1
(g9146
g9115
(dp9584
g906
g1066
sg894
g1062
sg908
g1073
sg903
g1070
stRp9585
ag1
(g9146
g9115
(dp9586
g906
g1021
sg894
g1017
sg908
g1028
sg903
g1025
stRp9587
ag1
(g9146
g9115
(dp9588
g906
g1484
sg894
g1480
sg908
g1491
sg903
g1488
stRp9589
ag1
(g9146
g9115
(dp9590
g906
g919
sg894
g1289
sg908
g926
sg903
g1296
stRp9591
ag1
(g9146
g9115
(dp9592
g906
g1501
sg894
g1497
sg908
g1508
sg903
g1505
stRp9593
ag1
(g9146
g9115
(dp9594
g906
g1484
sg894
g1480
sg908
g1491
sg903
g1488
stRp9595
ag1
(g9146
g9115
(dp9596
g906
g1128
sg894
g1124
sg908
g1135
sg903
g1132
stRp9597
ag1
(g9146
g9115
(dp9598
g906
g1501
sg894
g1749
sg908
g1508
sg903
g1756
stRp9599
ag1
(g9146
g9115
(dp9600
g906
g1325
sg894
g2041
sg908
g1332
sg903
g2048
stRp9601
ag1
(g9146
g9115
(dp9602
g906
g899
sg894
g1381
sg908
g909
sg903
g1388
stRp9603
ag1
(g9146
g9115
(dp9604
g906
g1559
sg894
g1555
sg908
g1566
sg903
g1563
stRp9605
ag1
(g9146
g9115
(dp9606
g906
g1083
sg894
g1141
sg908
g1090
sg903
g1148
stRp9607
ag1
(g9146
g9115
(dp9608
g906
g1004
sg894
g2277
sg908
g1011
sg903
g2284
stRp9609
ag1
(g9146
g9115
(dp9610
g906
g1214
sg894
g1465
sg908
g1221
sg903
g1472
stRp9611
ag1
(g9146
g9115
(dp9612
g906
g1325
sg894
g1321
sg908
g1332
sg903
g1329
stRp9613
ag1
(g9146
g9115
(dp9614
g906
g1484
sg894
g1514
sg908
g1491
sg903
g1521
stRp9615
ag1
(g9146
g9115
(dp9616
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9617
ag1
(g9146
g9115
(dp9618
g906
g1314
sg894
g1351
sg908
g1308
sg903
g1358
stRp9619
ag1
(g9146
g9115
(dp9620
g906
g1083
sg894
g1141
sg908
g1090
sg903
g1148
stRp9621
ag1
(g9146
g9115
(dp9622
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9623
ag1
(g9146
g9115
(dp9624
g906
g1559
sg894
g1598
sg908
g1566
sg903
g1605
stRp9625
ag1
(g9146
g9115
(dp9626
g906
g936
sg894
g1169
sg908
g943
sg903
g1176
stRp9627
ag1
(g9146
g9115
(dp9628
g906
g1004
sg894
g2277
sg908
g1011
sg903
g2284
stRp9629
ag1
(g9146
g9115
(dp9630
g906
g987
sg894
g1366
sg908
g994
sg903
g1373
stRp9631
ag1
(g9146
g9115
(dp9632
g906
g1066
sg894
g1948
sg908
g1073
sg903
g1955
stRp9633
ag1
(g9146
g9115
(dp9634
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9635
ag1
(g9146
g9115
(dp9636
g906
g953
sg894
g1933
sg908
g960
sg903
g1940
stRp9637
ag1
(g9146
g9115
(dp9638
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9639
ag1
(g9146
g9115
(dp9640
g906
g1314
sg894
g1304
sg908
g1308
sg903
g1312
stRp9641
ag1
(g9146
g9115
(dp9642
g906
g899
sg894
g1381
sg908
g909
sg903
g1388
stRp9643
ag1
(g9146
g9115
(dp9644
g906
g1021
sg894
g1096
sg908
g1028
sg903
g1103
stRp9645
ag1
(g9146
g9115
(dp9646
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9647
ag1
(g9146
g9115
(dp9648
g906
g1128
sg894
g1124
sg908
g1135
sg903
g1132
stRp9649
ag1
(g9146
g9115
(dp9650
g906
g1004
sg894
g2277
sg908
g1011
sg903
g2284
stRp9651
ag1
(g9146
g9115
(dp9652
g906
g1559
sg894
g1598
sg908
g1566
sg903
g1605
stRp9653
ag1
(g9146
g9115
(dp9654
g906
g987
sg894
g1366
sg908
g994
sg903
g1373
stRp9655
ag1
(g9146
g9115
(dp9656
g906
g1128
sg894
g1409
sg908
g1135
sg903
g1416
stRp9657
ag1
(g9146
g9115
(dp9658
g906
g953
sg894
g1933
sg908
g960
sg903
g1940
stRp9659
ag1
(g9146
g9115
(dp9660
g906
g1004
sg894
g2277
sg908
g1011
sg903
g2284
stRp9661
ag1
(g9146
g9115
(dp9662
g906
g1214
sg894
g1465
sg908
g1221
sg903
g1472
stRp9663
ag1
(g9146
g9115
(dp9664
g906
g1231
sg894
g1227
sg908
g1238
sg903
g1235
stRp9665
ag1
(g9146
g9115
(dp9666
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9667
ag1
(g9146
g9115
(dp9668
g906
g899
sg894
g1381
sg908
g909
sg903
g1388
stRp9669
ag1
(g9146
g9115
(dp9670
g906
g953
sg894
g1933
sg908
g960
sg903
g1940
stRp9671
ag1
(g9146
g9115
(dp9672
g906
g1083
sg894
g1079
sg908
g1090
sg903
g1087
stRp9673
ag1
(g9146
g9115
(dp9674
g906
g1617
sg894
g1669
sg908
g1624
sg903
g1676
stRp9675
ag1
(g9146
g9115
(dp9676
g906
g1559
sg894
g1598
sg908
g1566
sg903
g1605
stRp9677
ag1
(g9146
g9115
(dp9678
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9679
ag1
(g9146
g9115
(dp9680
g906
g970
sg894
g1047
sg908
g977
sg903
g1054
stRp9681
ag1
(g9146
g9115
(dp9682
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9683
ag1
(g9146
g9115
(dp9684
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9685
ag1
(g9146
g9115
(dp9686
g906
g1083
sg894
g1141
sg908
g1090
sg903
g1148
stRp9687
ag1
(g9146
g9115
(dp9688
g906
g1066
sg894
g1948
sg908
g1073
sg903
g1955
stRp9689
ag1
(g9146
g9115
(dp9690
g906
g1501
sg894
g1749
sg908
g1508
sg903
g1756
stRp9691
ag1
(g9146
g9115
(dp9692
g906
g1248
sg894
g1424
sg908
g1255
sg903
g1431
stRp9693
ag1
(g9146
g9115
(dp9694
g906
g1083
sg894
g1079
sg908
g1090
sg903
g1087
stRp9695
ag1
(g9146
g9115
(dp9696
g906
g1325
sg894
g2041
sg908
g1332
sg903
g2048
stRp9697
ag1
(g9146
g9115
(dp9698
g906
g1248
sg894
g1424
sg908
g1255
sg903
g1431
stRp9699
ag1
(g9146
g9115
(dp9700
g906
g1214
sg894
g1210
sg908
g1221
sg903
g1218
stRp9701
ag1
(g9146
g9115
(dp9702
g906
g1314
sg894
g1304
sg908
g1308
sg903
g1312
stRp9703
ag1
(g9146
g9115
(dp9704
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9705
ag1
(g9146
g9115
(dp9706
g906
g1314
sg894
g1351
sg908
g1308
sg903
g1358
stRp9707
ag1
(g9146
g9115
(dp9708
g906
g1501
sg894
g1749
sg908
g1508
sg903
g1756
stRp9709
ag1
(g9146
g9115
(dp9710
g906
g1004
sg894
g2277
sg908
g1011
sg903
g2284
stRp9711
ag1
(g9146
g9115
(dp9712
g906
g919
sg894
g1289
sg908
g926
sg903
g1296
stRp9713
ag1
(g9146
g9115
(dp9714
g906
g1066
sg894
g1948
sg908
g1073
sg903
g1955
stRp9715
ag1
(g9146
g9115
(dp9716
g906
g1231
sg894
g1261
sg908
g1238
sg903
g1268
stRp9717
ag1
(g9146
g9115
(dp9718
g906
g1617
sg894
g1669
sg908
g1624
sg903
g1676
stRp9719
ag1
(g9146
g9115
(dp9720
g906
g1214
sg894
g1465
sg908
g1221
sg903
g1472
stRp9721
ag1
(g9146
g9115
(dp9722
g906
g1083
sg894
g1079
sg908
g1090
sg903
g1087
stRp9723
ag1
(g9146
g9115
(dp9724
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9725
ag1
(g9146
g9115
(dp9726
g906
g899
sg894
g1381
sg908
g909
sg903
g1388
stRp9727
ag1
(g9146
g9115
(dp9728
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9729
ag1
(g9146
g9115
(dp9730
g906
g1501
sg894
g1497
sg908
g1508
sg903
g1505
stRp9731
ag1
(g9146
g9115
(dp9732
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9733
ag1
(g9146
g9115
(dp9734
g906
g1617
sg894
g1613
sg908
g1624
sg903
g1621
stRp9735
ag1
(g9146
g9115
(dp9736
g906
g1325
sg894
g1321
sg908
g1332
sg903
g1329
stRp9737
ag1
(g9146
g9115
(dp9738
g906
g1501
sg894
g1497
sg908
g1508
sg903
g1505
stRp9739
ag1
(g9146
g9115
(dp9740
g906
g1314
sg894
g1351
sg908
g1308
sg903
g1358
stRp9741
ag1
(g9146
g9115
(dp9742
g906
g1617
sg894
g1613
sg908
g1624
sg903
g1621
stRp9743
ag1
(g9146
g9115
(dp9744
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9745
ag1
(g9146
g9115
(dp9746
g906
g1021
sg894
g1096
sg908
g1028
sg903
g1103
stRp9747
ag1
(g9146
g9115
(dp9748
g906
g987
sg894
g1366
sg908
g994
sg903
g1373
stRp9749
ag1
(g9146
g9115
(dp9750
g906
g1325
sg894
g2041
sg908
g1332
sg903
g2048
stRp9751
ag1
(g9146
g9115
(dp9752
g906
g953
sg894
g1933
sg908
g960
sg903
g1940
stRp9753
ag1
(g9146
g9115
(dp9754
g906
g1066
sg894
g1948
sg908
g1073
sg903
g1955
stRp9755
ag1
(g9146
g9115
(dp9756
g906
g970
sg894
g1047
sg908
g977
sg903
g1054
stRp9757
ag1
(g9146
g9115
(dp9758
g906
g1231
sg894
g1261
sg908
g1238
sg903
g1268
stRp9759
ag1
(g9146
g9115
(dp9760
g906
g1617
sg894
g1669
sg908
g1624
sg903
g1676
stRp9761
ag1
(g9146
g9115
(dp9762
g906
g1214
sg894
g1210
sg908
g1221
sg903
g1218
stRp9763
ag1
(g9146
g9115
(dp9764
g906
g1021
sg894
g1096
sg908
g1028
sg903
g1103
stRp9765
ag1
(g9146
g9115
(dp9766
g906
g1066
sg894
g1062
sg908
g1073
sg903
g1070
stRp9767
ag1
(g9146
g9115
(dp9768
g906
g1617
sg894
g1613
sg908
g1624
sg903
g1621
stRp9769
ag1
(g9146
g9115
(dp9770
g906
g1501
sg894
g1497
sg908
g1508
sg903
g1505
stRp9771
ag1
(g9146
g9115
(dp9772
g906
g1484
sg894
g1514
sg908
g1491
sg903
g1521
stRp9773
ag1
(g9146
g9115
(dp9774
g906
g1128
sg894
g1124
sg908
g1135
sg903
g1132
stRp9775
ag1
(g9146
g9115
(dp9776
g906
g1559
sg894
g1555
sg908
g1566
sg903
g1563
stRp9777
ag1
(g9146
g9115
(dp9778
g906
g1021
sg894
g1096
sg908
g1028
sg903
g1103
stRp9779
ag1
(g9146
g9115
(dp9780
g906
g1325
sg894
g2041
sg908
g1332
sg903
g2048
stRp9781
ag1
(g9146
g9115
(dp9782
g906
g1128
sg894
g1409
sg908
g1135
sg903
g1416
stRp9783
ag1
(g9146
g9115
(dp9784
g906
g1214
sg894
g1465
sg908
g1221
sg903
g1472
stRp9785
ag1
(g9146
g9115
(dp9786
g906
g1066
sg894
g1062
sg908
g1073
sg903
g1070
stRp9787
ag1
(g9146
g9115
(dp9788
g906
g1248
sg894
g1424
sg908
g1255
sg903
g1431
stRp9789
ag1
(g9146
g9115
(dp9790
g906
g1484
sg894
g1480
sg908
g1491
sg903
g1488
stRp9791
ag1
(g9146
g9115
(dp9792
g906
g1314
sg894
g1304
sg908
g1308
sg903
g1312
stRp9793
ag1
(g9146
g9115
(dp9794
g906
g1214
sg894
g1210
sg908
g1221
sg903
g1218
stRp9795
ag1
(g9146
g9115
(dp9796
g906
g1617
sg894
g1613
sg908
g1624
sg903
g1621
stRp9797
ag1
(g9146
g9115
(dp9798
g906
g936
sg894
g1169
sg908
g943
sg903
g1176
stRp9799
ag1
(g9146
g9115
(dp9800
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9801
ag1
(g9146
g9115
(dp9802
g906
g987
sg894
g1366
sg908
g994
sg903
g1373
stRp9803
ag1
(g9146
g9115
(dp9804
g906
g1128
sg894
g1409
sg908
g1135
sg903
g1416
stRp9805
ag1
(g9146
g9115
(dp9806
g906
g1559
sg894
g1555
sg908
g1566
sg903
g1563
stRp9807
ag1
(g9146
g9115
(dp9808
g906
g1021
sg894
g1017
sg908
g1028
sg903
g1025
stRp9809
ag1
(g9146
g9115
(dp9810
g906
g1501
sg894
g1749
sg908
g1508
sg903
g1756
stRp9811
ag1
(g9146
g9115
(dp9812
g906
g919
sg894
g1289
sg908
g926
sg903
g1296
stRp9813
asg9227
Nsg9228
g3609
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp9814
(dp9815
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9816
sg9107
(lp9817
sg9109
I79983440
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9818
g33
g9118
(g9119
g92
g9120
S'b'
tRp9819
(I1
(I200
I1
tg9244
I00
S'p\xb7\x1d\r\xf0\xec\x1d\r\x18\xed\x1d\r\x10\x9b\x1d\rH\x9b\x1d\r@\xed\x1d\r\xa0\xb7\x1d\r\xd0\xb7\x1d\r\x18\xed\x1d\rh\xed\x1d\r\xe0^\xb4\x04\x00\xb8\x1d\r\x90\xed\x1d\r\xf0\xec\x1d\rh\xed\x1d\r\xc0_\xb4\x04\xe0_\xb4\x04\x00\xb8\x1d\r\x90\xed\x1d\r\x10\x9b\x1d\r\xb8\xed\x1d\rp\xb7\x1d\r\x00\xb8\x1d\r\xe0\xed\x1d\rH\xef\x1d\r\xb8\x9b\x1d\r\xe0\xed\x1d\r\x18\xed\x1d\r \xb9\x1d\r\x90\xed\x1d\r0\xee\x1d\r\xb8\x9b\x1d\r\x90\xed\x1d\r\x80\x9b\x1d\r\xf0\xec\x1d\r\x80\x9b\x1d\r\x08\xee\x1d\r\x80\xb9\x1d\r\xf0\x9b\x1d\r\xa0\xb7\x1d\r0\xb8\x1d\r\xa0\xb7\x1d\r\xd0\xb7\x1d\r\x80\xb9\x1d\r\x00\xb8\x1d\r\x80\x9b\x1d\r\x10\x9b\x1d\r\xa8\xee\x1d\r0\xee\x1d\r\xf0\xec\x1d\r\xe0_\xb4\x04\x00\xb8\x1d\r\x80\x9b\x1d\r\x08\xee\x1d\r\xa0_\xb4\x04\x18\xed\x1d\r\xf0\x9b\x1d\r\x00\xb8\x1d\r\xf0\x9b\x1d\r\xf0\xec\x1d\r\xe0_\xb4\x04\xe0^\xb4\x04\x18\xed\x1d\r\x90\xed\x1d\r\xa0\xb7\x1d\rh\xed\x1d\r\xa0_\xb4\x04\xc0\xb8\x1d\rp\xb7\x1d\r \x10\x1e\rh\xed\x1d\r\xd0\xee\x1d\r\x08\xee\x1d\r\xe0^\xb4\x04\xa0\xb7\x1d\r@\xed\x1d\r\x18\xed\x1d\r@\x10\x1e\r\xa0\xb7\x1d\r@\xed\x1d\r\xa0_\xb4\x04\xf0\xb8\x1d\r\xb8\xed\x1d\r\xc0_\xb4\x04h\xed\x1d\r\x08\xee\x1d\rH\x9b\x1d\r\xa0_\xb4\x04\xe0\xed\x1d\r\xd0\xb7\x1d\r \xb9\x1d\r\xf8\xee\x1d\r\x00\xb8\x1d\r\xc0\xb8\x1d\r\x08\xee\x1d\r0\xee\x1d\rH\xef\x1d\r\xb8\xed\x1d\r\xa8\xee\x1d\r0\xb8\x1d\r\xe0\xed\x1d\rh\xed\x1d\r\xa8\xee\x1d\r\xe0_\xb4\x04\xc0\xb8\x1d\r`\x9c\x1d\r\xe0\xed\x1d\r\xc0_\xb4\x04\xe0^\xb4\x04\xf0\xb8\x1d\r \xb9\x1d\r\xc0_\xb4\x04\x10\x9b\x1d\r \xef\x1d\r\xb8\xed\x1d\rH\x9b\x1d\r@\xed\x1d\r\x10\x9b\x1d\rh\xed\x1d\r(\x9c\x1d\rp\xb7\x1d\r\xe0\xed\x1d\r\x80\x9b\x1d\r\xe0_\xb4\x04H\x9b\x1d\r\x80\x9b\x1d\r@\xed\x1d\r\xc0_\xb4\x04\x00\xb8\x1d\r\xa0_\xb4\x04(\x9c\x1d\r\x90\xed\x1d\r\x18\xed\x1d\r0\xb8\x1d\r\x10\x9b\x1d\r\x08\xee\x1d\r\xe0\xed\x1d\r\x08\xee\x1d\r\xf0\xec\x1d\r\x00\xb8\x1d\r\x10\x9b\x1d\r\x90\xed\x1d\r@\xed\x1d\r@\x10\x1e\r\xa0\xb7\x1d\r\x00\xb8\x1d\r\x18\xed\x1d\r\x10\x9b\x1d\r`\xb8\x1d\r@\xed\x1d\r\xb8\xed\x1d\rp\xb7\x1d\r\xd0\xb7\x1d\r`\xb8\x1d\r\xb8\xed\x1d\r\xc0_\xb4\x04\xd0\xee\x1d\rH\x9b\x1d\r`\x9c\x1d\r\xe0^\xb4\x04\xb8\xed\x1d\r\x10\x9b\x1d\r\xd0\xb7\x1d\r\xa0_\xb4\x040\xee\x1d\r\x18\xed\x1d\r\xe0^\xb4\x04H\x9b\x1d\r\xe0^\xb4\x04\xe0_\xb4\x04\xf8\xee\x1d\r0\xee\x1d\r\x80\x9b\x1d\r\xa0_\xb4\x04\xd0\xb7\x1d\r\xf0\xec\x1d\r\xe0_\xb4\x04\xd0\xb7\x1d\r\x90\xed\x1d\r\x08\xee\x1d\r\x10\x9b\x1d\rp\xb7\x1d\r\xe0\xed\x1d\r\xe0_\xb4\x04p\xb7\x1d\r\xe0\xed\x1d\r\xc0_\xb4\x040\xee\x1d\r\xe0^\xb4\x04\x90\xed\x1d\r0\xee\x1d\r\x18\xed\x1d\r\xa0_\xb4\x04H\x9b\x1d\r`\xb8\x1d\r\xc0_\xb4\x04@\xed\x1d\r\x80\x9b\x1d\r0\xee\x1d\r\xd0\xb7\x1d\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9820
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9821
(I1
(I200
I1
tg9244
I00
S' \x12\x1e\r\x80\xe1}\x0c\x80`\x0e\x03\x80X\xb4\x04@\x11\x1e\r@\x12\x1e\r\xc0\x10\x1e\r\xe0\x12\x1e\r\x00\x13\x1e\r\xc0\x12\x1e\r@\x13\x1e\r\xa0\x11\x1e\r\x80\x13\x1e\r`\x13\x1e\r\x80\x10\x1e\r\xe0\x13\x1e\r\xc0\x13\x1e\r\x00\x11\x1e\r\x00\x14\x1e\r \x14\x1e\r\x80\x14\x1e\r\xa0\x14\x1e\r\xc0\x14\x1e\r`\x11\x1e\r\x80\x11\x1e\r \x15\x1e\r\x00\x15\x1e\r`\x15\x1e\r\x80\x15\x1e\r\xa0\x15\x1e\r\xc0\x11\x1e\r\xa0\x13\x1e\r\xc0\x15\x1e\r \x16\x1e\r@\x15\x1e\r \x11\x1e\r\x80\x16\x1e\r`\x16\x1e\r\xa0\x10\x1e\r\xe0\x16\x1e\r\xc0\x16\x1e\r \x17\x1e\r@\x17\x1e\r \x13\x1e\r@\x16\x1e\r`\x17\x1e\r\x80\x17\x1e\r\xe0\x17\x1e\r\xc0\x17\x1e\r`\x14\x1e\r\x00\x18\x1e\r \x18\x1e\r\x80\x18\x1e\r\xa0\x18\x1e\r\xc0\x18\x1e\r\xa0\x16\x1e\r\x00\x19\x1e\r\xe0\x18\x1e\r\xe0\x14\x1e\r`\x19\x1e\r@\x19\x1e\r`\x10\x1e\r\x00\x1a\x1e\r@\x14\x1e\r`\x1a\x1e\r`A\x10\x03\x80B\x10\x03 a\x0e\x03@\xc6\x0f\x03`\xc8\x0f\x03@\xca\x0f\x03\x00\xc9\x0f\x03\x00\xcb\x0f\x03\xa0\xc9\x0f\x03`\xc9\x0f\x03\xe0\xcc\x0f\x03\x80\xcd\x0f\x03\xe0\xc8\x0f\x03\xa0\xcb\x0f\x03\x00\xca\x0f\x03\x80\xcc\x0f\x03\xe0\xcf\x0f\x03\x80\xc6\x0f\x03\xa0\xca\x0f\x03\x80\xcf\x0f\x03\xa0\xce\x0f\x03\x80\xce\x0f\x03`\xcf\x0f\x03 Z\xb4\x04\xe0\xcb\x0f\x03\xe0\xca\x0f\x03\xe0\xc4\x0f\x03`\xc6\x0f\x03`\xcd\x0f\x03 \xc8\x0f\x03 \xc6\x0f\x03 \xc4\x0f\x03@\xc3\x0f\x03@\xcc\x0f\x03 \xcc\x0f\x03 \xcf\x0f\x03\xa0\xcf\x0f\x03 \xc9\x0f\x03@\xc5\x0f\x03@\xcf\x0f\x03@\xcb\x0f\x03 \xcd\x0f\x03\x80\xc5\x0f\x03\xc0\xc3\x0f\x03\xa0\xc0\x0f\x03\x80\xc9\x0f\x03`\xca\x0f\x03\xc0\xc8\x0f\x03 \xca\x0f\x03\x80\xc3\x0f\x03\x00\xcd\x0f\x03\xc0\xc5\x0f\x03\xc0\xcf\x0f\x03\x80\xcb\x0f\x03\xa0\xcd\x0f\x03@\xc8\x0f\x03\x00\xcc\x0f\x03\xe0\xc9\x0f\x03\x00\xc5\x0f\x03\xc0\xca\x0f\x03@\xc9\x0f\x03\x00\xce\x0f\x03\xe0\xcd\x0f\x03 \xcb\x0f\x03@\xcd\x0f\x03\xc0\xcd\x0f\x03\xc0a\x0e\x03`\xc4\x0f\x03\xa0\xc8\x0f\x03 A\x10\x03\xc0B\x10\x03\xe0\xcf\xb1\x04\x00)\x0f\x03\x80*\x0f\x03@r~\x0c\xc0)\x0f\x03\x80mr\x0c\xe0`\x0e\x03 /\x0f\x03`.\x0f\x03 +\x0f\x03\xe0.\x0f\x03\xe0/\x0f\x03\x80+\x0f\x03 -\x0f\x03\xe0,\x0f\x03`+\x0f\x03\xa0,\x0f\x03`,\x0f\x03 `r\x0c\xa0\xc4\x0f\x03\xa0+\x0f\x03\x00{\x7f\x0c\x00r\x7f\x0c u\x7f\x0c\x00z\x7f\x0c@{\x7f\x0c\xc0y\x7f\x0c ,\x0f\x03\xc0\xcb\x0f\x03@u\x7f\x0c\xa0t\x7f\x0c`N\x80\x0c\xc0G\x80\x0c\x00B\x80\x0c A\x80\x0c\xe0A\x80\x0c\xe0K\x80\x0c\xa0D\x80\x0c\x00A\x80\x0c\xc0D\x80\x0c\x80D\x80\x0c C\x80\x0c`C\x80\x0c\xe0D\x80\x0c\xc0@\x80\x0c\xa0K\x80\x0c\xa0A\x80\x0c\x00C\x80\x0c L\x80\x0c\xe0O\x80\x0c\xe0u\x7f\x0c\x00L\x80\x0c \xd3\xca\x0c@\xd0\xca\x0c`\xda\xca\x0c\x00\xd7\xca\x0c\x00\xd3\xca\x0c`\xd1\xca\x0c\xa0\xda\xca\x0c\xe0+\x0f\x03@\xb0\xcd\x0c\x00\xb7\xcd\x0c \xbf\xcd\x0c\xc0\xb3\xcd\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9822
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9823
(I1
(I200
I1
tg9122
I00
S'\xc7#\x12@\xebO\x95?\xe0@b?\xc7\xa6Y?2\xac\x8a?\xfb\xb0\xea?C\xa3Y?\x03\xc3\x9b?\x80\xcc;?\x84\x16\xb1?p\x1dQ?\xbf\xad\x8a?\xaa9\x93?\xed\xc4L?.\xc3\x9b?8\xbe\xfb?\xae(b?\xddI\xa4?\xb2aU?b\x1dQ?\xe8\x8b\xa8?1\xd2\xec?\x93\x08\xc0?\x10\xea]?7\x8e\xe8?\xa9\x05\x80?\x94\xc6{?\xc0\xdaL?\xa2^U?>Y\x95?\xa3\xf5n?6\x9e\x99?\xc6\xe0\x8c?\x95lf?\xde,D?\t\x04\x80?\x7fx\x17@\xc0Ab?\x9d(\xa2?\x10_U?\xbc\xb8;?\xe6\xc2;?(@s?\x87Eb?\x17\xbc\xa3@#<s?\x1d\xf9n?X\xadj?&\xa7Y?.\xf7??k\'\xe2?Y\xce<@U\xd7L?\x03i\xf5?>\xc6;?\x8e\xd5L?\xceH\x93?J\xa6Y?\xa3\xbd{@\xfe8D?b\xa6Y?\x86\xc1\xdb?\xe7(b?\x99\xa8H?y\xb7j?\'i\x86?\x0bcU?m\x9f\x99?DB\xb3?\xd1F\xc4?\xb7\xf5n?{\x9f\x99?s\xdaL?\x9c\x14\x01@K\xc1\xbb?\xf8z\x97?\x07:s?@\xae\xaa?\xd54Q?\xf2\x15\xd1?\x11\x8f\x88?\x87\xb5j?\xf7i\xa6?\x07\x8b\x97?V\xe5]?Q\x03\x80?\xa3\x89\xa8?\x98+b?\x96\xdc\r@d9s?\xe4)b?\x93\xd1\xcc?]\x9a9@\xee\x9b\x88?[\x1aQ?:I\x84?\xb4\x9f\xd9?7of?\x81t\x86?\xb3\xf0.@\x8a~\x97?\xa8l\x86?\x183s?\x8fw\x86?\xa8\x80w?#\x9aH?\x93\x83w?\xb9\x14\xb1?c\xf0\xbd?\x19}\x97?\x08/b?3\xc1{?V;s?\x89N\xe4?\xaf8\x93?\x10\xd0\xcc?\x17\xb0\xca?*"Q?\xd5U\xc5@^l\xa6?/\xb6j?\xcf\xd4\xac?Xsf?1x\x86?]\xaa\xca?Euf?\xfc\x9e\xd9?E\x1dQ?\x91\xccj?V\x1eQ?R6\xb3?e\xa1Y?\x88\x1bQ?"\xa5Y?\x1a\xc5;?\xf1\xb1j?\x98bU?\x1fPD?!\x1e\x82?T\x98\x19@\x87\x827?\xca\xab\x1a@\x10uf?r\xb2j?\x82\x99w?\xab\xef\x8e@?\xd6L?\xb7KD?\x9f\r\xd1?7\x15o?5\x8b\x18@\x83\xb0\x8a?\x12(\x82?\x18s7?\xa1K\xa4?\x12J\xc4?\xaf\x17\xb1?\'lf?obD?\xb6S\xe4?\xd7\xcf\xac?\x9f\xea]?E\x8e\x88?\xf9\x15\x91?>\x8cw?\x0b*b?\x1f\xfcn?\x8b\xef\x0e@\x9e\x01\xa0?yzU?J9\xb3?\xad\r@?~(\xa2?D\x0b@?\xd7\x8df?\xd1.s?\x7f\xc5;?\x028s?\x01\xf2\x8e?{\xce\x9b?\xfd\xc8;?b\xb0\xca?sj\x86?\xe6l\x86?k\x8b\x18@!\x06\x80?3\xf7\x8e?=}\xb7?\x07m\xa6?\xd7\x9d\t@8\xd1\x8c?\x88\xc7{?eMD?\xa9v7@\xf8\xb4\x8a?&\xc4{?\x99\xae\x8a?\xeeH\x84?\xa5Y\x95?\xd3\xdb\xac?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9824
(I1
(I200
I1
tg9244
I00
S'H5\xf4\x048?\xf4\x04\x88\n\x84\x04\x10\n\x84\x04\x98\t\x84\x04`\x0e\x84\x04\xf8\x0c\x84\x04\x98\x0f\x84\x04\x10\r\x84\x04(\r\x84\x04H\x0e\x84\x04\xe8\r\x84\x04\xf0\x08\x84\x04 \x0f\x84\x04h\t\x84\x04\xc8\x0c\x84\x04\x88\x07\x84\x04\x18\x0e\x84\x04\x90\x05\x84\x048\x0c\x84\x04(\x01\x84\x04\x88\r\x84\x04\x80\t\x84\x04\xb0\x03\x84\x04\xd8\x08\x84\x04p\x01\x84\x04\xb8\r\x84\x04\xb0\t\x84\x04\xf8\x06\x84\x04 \t\x84\x04\xf0\x05\x84\x04 \x03\x84\x04\x00\x0e\x84\x04H\x0b\x84\x04\xb8\n\x84\x04\x00\x08\x84\x04\x80\x06\x84\x04h\x03\x84\x04\x80\x0f\x84\x04\x98\x06\x84\x04P\x0c\x84\x04\xb0\x06\x84\x048\x00\x84\x04@\x07\x84\x04p\n\x84\x04(\n\x84\x04\x90\x08\x84\x04\xd0\x07\x84\x04\xc0\x0b\x84\x04@\r\x84\x04X\n\x84\x04h\x0f\x84\x04P\x03\x84\x04\xa8\x0b\x84\x04 \x0c\x84\x04\xd8\x0b\x84\x04\x80\x0c\x84\x04(\x07\x84\x04\xe0\t\x84\x04X\r\x84\x04\x90\x0e\x84\x04p\r\x84\x04\xa8\x0e\x84\x04\xe8\n\x84\x04\xb0\x0c\x84\x04p\x07\x84\x04\xf0\x0e\x84\x04\xe0\x0c\x84\x040\x0e\x84\x04\xd8\x0e\x84\x04P\x0f\x84\x04P\t\x84\x048\x0f\x84\x04\x08\x0f\x84\x04\x10\x07\x84\x04\xf0\x0b\x84\x04\x18\x08\x84\x04\xc8\x0f\x84\x04\x98\x00\x84\x04\xa0\x01\x84\x04\x08\x0c\x84\x04\xe0\x0f\x84\x04\xb0\x0f\x84\x04`\x9e\xec\x04\xa8\x9e\xec\x04\xc8\x93\xec\x04\xd0\x97\xec\x04\xf8\x90\xec\x04\x10\x9d\xec\x04\x80\x9c\xec\x04\x88\x9d\xec\x04\xf8\x93\xec\x04X\x9a\xec\x04\x80\x99\xec\x04\xb8\x9a\xec\x040\x9e\xec\x04(\x97\xec\x04\x90\x95\xec\x04\xb8\x9d\xec\x04\xd8\x98\xec\x04 \x93\xec\x04\x90\x92\xec\x04\xa0\x9d\xec\x04\x10\x97\xec\x04@\x9a\xec\x04\xd0\x94\xec\x04\xf0\x92\xec\x04\x98\x9c\xec\x048\x90\xec\x04p\x91\xec\x04\xb0\x90\xec\x048\x9f\xec\x04`\x92\xec\x04\x98\x93\xec\x040\x9b\xec\x04\xc8\x9c\xec\x04\xa0\x94\xec\x04\xc0\x9b\xec\x04x\x95\xec\x04h\x93\xec\x04\xc8\x90\xec\x04P\x93\xec\x04X\x9d\xec\x040\x98\xec\x04@\x97\xec\x04\x00\x9b\xec\x04\x00\x92\xec\x04H\x9e\xec\x04Xt\xf3\x04\x00{\xf3\x04Hx\xf3\x04\x08|\xf3\x04Xz\xf3\x04\xe8w\xf3\x04\xc0\x0e\x84\x04\x00\x02\x84\x04\xc0\x08\x84\x04X\x01\x84\x04\x98\x03\x84\x04h\x00\x84\x04\xe8\x07\x84\x04\xa8\x08\x84\x04h\x0c\x84\x04`\x0b\x84\x04\xb8\x07\x84\x04\x80\x03\x84\x04\xa0\n\x84\x04\x10\x01\x84\x04\xd0\r\x84\x04\xb0\x00\x84\x04\xc8\x03\x84\x04\x98\x0c\x84\x04\x90\x02\x84\x04x\x0b\x84\x04\xc8\x06\x84\x04\xf8\t\x84\x04\x08\x06\x84\x04\xd0\n\x84\x04\x88\x01\x84\x04X\x07\x84\x04\xd0\x01\x84\x04@\n\x84\x04\xf8\x03\x84\x04\x18\x0b\x84\x04\x00\x0b\x84\x04\xe0\x06\x84\x040\x08\x84\x04\xc8\x00\x84\x04\x18\x02\x84\x04H\x02\x84\x04\xc8\t\x84\x04P\x06\x84\x04\xe0\x00\x84\x04 \x06\x84\x04x\x08\x84\x04\xb8\x01\x84\x048\x03\x84\x04`\x08\x84\x04\xc0\x05\x84\x04\x90\x0b\x84\x04\x08\t\x84\x04`\x02\x84\x040\x02\x84\x040\x0b\x84\x048\t\x84\x04\x08\x03\x84\x048\x06\x84\x04\xd8\x05\x84\x04H\x08\x84\x04\xa0\x07\x84\x04X\x04\x84\x04@\x01\x84\x04\x80\x00\x84\x04P\x00\x84\x04\xf8\x00\x84\x04\xe8\x01\x84\x04x\x0e\x84\x04\xa8\x05\x84\x04x\x05\x84\x04 \x00\x84\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9825
(dp9826
g9130
(dp9827
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9814
sg9133
(lp9828
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9829
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9830
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9831
g1
(g9146
g9115
(dp9832
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9833
ag1
(g9146
g9115
(dp9834
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9835
ag1
(g9146
g9115
(dp9836
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9837
ag1
(g9146
g9115
(dp9838
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9839
ag1
(g9146
g9115
(dp9840
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9841
ag1
(g9146
g9115
(dp9842
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9843
ag1
(g9146
g9115
(dp9844
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp9845
ag1
(g9146
g9115
(dp9846
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp9847
ag1
(g9146
g9115
(dp9848
g3644
g3674
sg3632
g3772
sg3646
g3681
sg3641
g3779
stRp9849
ag1
(g9146
g9115
(dp9850
g3644
g3791
sg3632
g3787
sg3646
g3798
sg3641
g3795
stRp9851
ag1
(g9146
g9115
(dp9852
g3644
g3808
sg3632
g3804
sg3646
g3815
sg3641
g3812
stRp9853
ag1
(g9146
g9115
(dp9854
g3644
g3825
sg3632
g3821
sg3646
g3832
sg3641
g3829
stRp9855
ag1
(g9146
g9115
(dp9856
g3644
g3842
sg3632
g3838
sg3646
g3849
sg3641
g3846
stRp9857
ag1
(g9146
g9115
(dp9858
g3644
g3657
sg3632
g3855
sg3646
g3664
sg3641
g3862
stRp9859
ag1
(g9146
g9115
(dp9860
g3644
g3791
sg3632
g3870
sg3646
g3798
sg3641
g3877
stRp9861
ag1
(g9146
g9115
(dp9862
g3644
g3889
sg3632
g3885
sg3646
g3896
sg3641
g3893
stRp9863
ag1
(g9146
g9115
(dp9864
g3644
g3906
sg3632
g3902
sg3646
g3913
sg3641
g3910
stRp9865
ag1
(g9146
g9115
(dp9866
g3644
g3825
sg3632
g3919
sg3646
g3832
sg3641
g3926
stRp9867
ag1
(g9146
g9115
(dp9868
g3644
g3842
sg3632
g3838
sg3646
g3849
sg3641
g3846
stRp9869
ag1
(g9146
g9115
(dp9870
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9871
ag1
(g9146
g9115
(dp9872
g3644
g3964
sg3632
g3960
sg3646
g3971
sg3641
g3968
stRp9873
ag1
(g9146
g9115
(dp9874
g3644
g3637
sg3632
g3977
sg3646
g3647
sg3641
g3984
stRp9875
ag1
(g9146
g9115
(dp9876
g3644
g3825
sg3632
g3919
sg3646
g3832
sg3641
g3926
stRp9877
ag1
(g9146
g9115
(dp9878
g3644
g4009
sg3632
g4005
sg3646
g4016
sg3641
g4013
stRp9879
ag1
(g9146
g9115
(dp9880
g3644
g4032
sg3632
g4022
sg3646
g4026
sg3641
g4030
stRp9881
ag1
(g9146
g9115
(dp9882
g3644
g3906
sg3632
g3902
sg3646
g3913
sg3641
g3910
stRp9883
ag1
(g9146
g9115
(dp9884
g3644
g4009
sg3632
g4052
sg3646
g4016
sg3641
g4059
stRp9885
ag1
(g9146
g9115
(dp9886
g3644
g3674
sg3632
g3772
sg3646
g3681
sg3641
g3779
stRp9887
ag1
(g9146
g9115
(dp9888
g3644
g3791
sg3632
g3787
sg3646
g3798
sg3641
g3795
stRp9889
ag1
(g9146
g9115
(dp9890
g3644
g3842
sg3632
g3838
sg3646
g3849
sg3641
g3846
stRp9891
ag1
(g9146
g9115
(dp9892
g3644
g4110
sg3632
g4106
sg3646
g4117
sg3641
g4114
stRp9893
ag1
(g9146
g9115
(dp9894
g3644
g3906
sg3632
g4123
sg3646
g3913
sg3641
g4130
stRp9895
ag1
(g9146
g9115
(dp9896
g3644
g3842
sg3632
g4138
sg3646
g3849
sg3641
g4145
stRp9897
ag1
(g9146
g9115
(dp9898
g3644
g4157
sg3632
g4153
sg3646
g4164
sg3641
g4161
stRp9899
ag1
(g9146
g9115
(dp9900
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9901
ag1
(g9146
g9115
(dp9902
g3644
g4157
sg3632
g4153
sg3646
g4164
sg3641
g4161
stRp9903
ag1
(g9146
g9115
(dp9904
g3644
g4032
sg3632
g4196
sg3646
g4026
sg3641
g4203
stRp9905
ag1
(g9146
g9115
(dp9906
g3644
g4110
sg3632
g4211
sg3646
g4117
sg3641
g4218
stRp9907
ag1
(g9146
g9115
(dp9908
g3644
g3964
sg3632
g3960
sg3646
g3971
sg3641
g3968
stRp9909
ag1
(g9146
g9115
(dp9910
g3644
g3742
sg3632
g4239
sg3646
g3749
sg3641
g4246
stRp9911
ag1
(g9146
g9115
(dp9912
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9913
ag1
(g9146
g9115
(dp9914
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp9915
ag1
(g9146
g9115
(dp9916
g3644
g3759
sg3632
g4280
sg3646
g3766
sg3641
g4287
stRp9917
ag1
(g9146
g9115
(dp9918
g3644
g4110
sg3632
g4106
sg3646
g4117
sg3641
g4114
stRp9919
ag1
(g9146
g9115
(dp9920
g3644
g3825
sg3632
g3919
sg3646
g3832
sg3641
g3926
stRp9921
ag1
(g9146
g9115
(dp9922
g3644
g4157
sg3632
g4321
sg3646
g4164
sg3641
g4328
stRp9923
ag1
(g9146
g9115
(dp9924
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9925
ag1
(g9146
g9115
(dp9926
g3644
g3708
sg3632
g4349
sg3646
g3715
sg3641
g4356
stRp9927
ag1
(g9146
g9115
(dp9928
g3644
g4110
sg3632
g4211
sg3646
g4117
sg3641
g4218
stRp9929
ag1
(g9146
g9115
(dp9930
g3644
g3657
sg3632
g3855
sg3646
g3664
sg3641
g3862
stRp9931
ag1
(g9146
g9115
(dp9932
g3644
g3906
sg3632
g3902
sg3646
g3913
sg3641
g3910
stRp9933
ag1
(g9146
g9115
(dp9934
g3644
g3825
sg3632
g3821
sg3646
g3832
sg3641
g3829
stRp9935
ag1
(g9146
g9115
(dp9936
g3644
g4157
sg3632
g4153
sg3646
g4164
sg3641
g4161
stRp9937
ag1
(g9146
g9115
(dp9938
g3644
g4032
sg3632
g4022
sg3646
g4026
sg3641
g4030
stRp9939
ag1
(g9146
g9115
(dp9940
g3644
g4446
sg3632
g4442
sg3646
g4453
sg3641
g4450
stRp9941
ag1
(g9146
g9115
(dp9942
g3644
g3674
sg3632
g3772
sg3646
g3681
sg3641
g3779
stRp9943
ag1
(g9146
g9115
(dp9944
g3644
g3964
sg3632
g4472
sg3646
g3971
sg3641
g4479
stRp9945
ag1
(g9146
g9115
(dp9946
g3644
g3825
sg3632
g3919
sg3646
g3832
sg3641
g3926
stRp9947
ag1
(g9146
g9115
(dp9948
g3644
g3964
sg3632
g3960
sg3646
g3971
sg3641
g3968
stRp9949
ag1
(g9146
g9115
(dp9950
g3644
g3657
sg3632
g3855
sg3646
g3664
sg3641
g3862
stRp9951
ag1
(g9146
g9115
(dp9952
g3644
g3906
sg3632
g4123
sg3646
g3913
sg3641
g4130
stRp9953
ag1
(g9146
g9115
(dp9954
g3644
g3808
sg3632
g4539
sg3646
g3815
sg3641
g4546
stRp9955
ag1
(g9146
g9115
(dp9956
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9957
ag1
(g9146
g9115
(dp9958
g3644
g3842
sg3632
g4138
sg3646
g3849
sg3641
g4145
stRp9959
ag1
(g9146
g9115
(dp9960
g3644
g3742
sg3632
g4239
sg3646
g3749
sg3641
g4246
stRp9961
ag1
(g9146
g9115
(dp9962
g3644
g3791
sg3632
g3787
sg3646
g3798
sg3641
g3795
stRp9963
ag1
(g9146
g9115
(dp9964
g3644
g4446
sg3632
g4606
sg3646
g4453
sg3641
g4613
stRp9965
ag1
(g9146
g9115
(dp9966
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp9967
ag1
(g9146
g9115
(dp9968
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9969
ag1
(g9146
g9115
(dp9970
g3644
g3842
sg3632
g4138
sg3646
g3849
sg3641
g4145
stRp9971
ag1
(g9146
g9115
(dp9972
g3644
g3791
sg3632
g3787
sg3646
g3798
sg3641
g3795
stRp9973
ag1
(g9146
g9115
(dp9974
g3644
g3725
sg3632
g4673
sg3646
g3732
sg3641
g4680
stRp9975
ag1
(g9146
g9115
(dp9976
g3644
g4032
sg3632
g4022
sg3646
g4026
sg3641
g4030
stRp9977
ag1
(g9146
g9115
(dp9978
g3644
g3808
sg3632
g4539
sg3646
g3815
sg3641
g4546
stRp9979
ag1
(g9146
g9115
(dp9980
g3644
g3742
sg3632
g4239
sg3646
g3749
sg3641
g4246
stRp9981
ag1
(g9146
g9115
(dp9982
g3644
g3725
sg3632
g4673
sg3646
g3732
sg3641
g4680
stRp9983
ag1
(g9146
g9115
(dp9984
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9985
ag1
(g9146
g9115
(dp9986
g3644
g3889
sg3632
g4753
sg3646
g3896
sg3641
g4760
stRp9987
ag1
(g9146
g9115
(dp9988
g3644
g3742
sg3632
g4239
sg3646
g3749
sg3641
g4246
stRp9989
ag1
(g9146
g9115
(dp9990
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9991
ag1
(g9146
g9115
(dp9992
g3644
g4446
sg3632
g4606
sg3646
g4453
sg3641
g4613
stRp9993
ag1
(g9146
g9115
(dp9994
g3644
g3759
sg3632
g4280
sg3646
g3766
sg3641
g4287
stRp9995
ag1
(g9146
g9115
(dp9996
g3644
g3964
sg3632
g4472
sg3646
g3971
sg3641
g4479
stRp9997
ag1
(g9146
g9115
(dp9998
g3644
g3889
sg3632
g4753
sg3646
g3896
sg3641
g4760
stRp9999
ag1
(g9146
g9115
(dp10000
g3644
g3791
sg3632
g3787
sg3646
g3798
sg3641
g3795
stRp10001
ag1
(g9146
g9115
(dp10002
g3644
g4032
sg3632
g4196
sg3646
g4026
sg3641
g4203
stRp10003
ag1
(g9146
g9115
(dp10004
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10005
ag1
(g9146
g9115
(dp10006
g3644
g4446
sg3632
g4442
sg3646
g4453
sg3641
g4450
stRp10007
ag1
(g9146
g9115
(dp10008
g3644
g4009
sg3632
g4005
sg3646
g4016
sg3641
g4013
stRp10009
ag1
(g9146
g9115
(dp10010
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10011
ag1
(g9146
g9115
(dp10012
g3644
g3791
sg3632
g3870
sg3646
g3798
sg3641
g3877
stRp10013
ag1
(g9146
g9115
(dp10014
g3644
g3808
sg3632
g4539
sg3646
g3815
sg3641
g4546
stRp10015
ag1
(g9146
g9115
(dp10016
g3644
g3825
sg3632
g3821
sg3646
g3832
sg3641
g3829
stRp10017
ag1
(g9146
g9115
(dp10018
g3644
g3742
sg3632
g4239
sg3646
g3749
sg3641
g4246
stRp10019
ag1
(g9146
g9115
(dp10020
g3644
g4032
sg3632
g4196
sg3646
g4026
sg3641
g4203
stRp10021
ag1
(g9146
g9115
(dp10022
g3644
g4110
sg3632
g4106
sg3646
g4117
sg3641
g4114
stRp10023
ag1
(g9146
g9115
(dp10024
g3644
g4032
sg3632
g4196
sg3646
g4026
sg3641
g4203
stRp10025
ag1
(g9146
g9115
(dp10026
g3644
g3964
sg3632
g4472
sg3646
g3971
sg3641
g4479
stRp10027
ag1
(g9146
g9115
(dp10028
g3644
g3708
sg3632
g4349
sg3646
g3715
sg3641
g4356
stRp10029
ag1
(g9146
g9115
(dp10030
g3644
g3637
sg3632
g3977
sg3646
g3647
sg3641
g3984
stRp10031
ag1
(g9146
g9115
(dp10032
g3644
g4009
sg3632
g4052
sg3646
g4016
sg3641
g4059
stRp10033
ag1
(g9146
g9115
(dp10034
g3644
g3791
sg3632
g3870
sg3646
g3798
sg3641
g3877
stRp10035
ag1
(g9146
g9115
(dp10036
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10037
ag1
(g9146
g9115
(dp10038
g3644
g3906
sg3632
g3902
sg3646
g3913
sg3641
g3910
stRp10039
ag1
(g9146
g9115
(dp10040
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp10041
ag1
(g9146
g9115
(dp10042
g3644
g4446
sg3632
g4606
sg3646
g4453
sg3641
g4613
stRp10043
ag1
(g9146
g9115
(dp10044
g3644
g4009
sg3632
g4052
sg3646
g4016
sg3641
g4059
stRp10045
ag1
(g9146
g9115
(dp10046
g3644
g3889
sg3632
g4753
sg3646
g3896
sg3641
g4760
stRp10047
ag1
(g9146
g9115
(dp10048
g3644
g3808
sg3632
g4539
sg3646
g3815
sg3641
g4546
stRp10049
ag1
(g9146
g9115
(dp10050
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10051
ag1
(g9146
g9115
(dp10052
g3644
g3791
sg3632
g3870
sg3646
g3798
sg3641
g3877
stRp10053
ag1
(g9146
g9115
(dp10054
g3644
g3889
sg3632
g3885
sg3646
g3896
sg3641
g3893
stRp10055
ag1
(g9146
g9115
(dp10056
g3644
g3691
sg3632
g5210
sg3646
g3698
sg3641
g5217
stRp10057
ag1
(g9146
g9115
(dp10058
g3644
g4009
sg3632
g4005
sg3646
g4016
sg3641
g4013
stRp10059
ag1
(g9146
g9115
(dp10060
g3644
g3964
sg3632
g4472
sg3646
g3971
sg3641
g4479
stRp10061
ag1
(g9146
g9115
(dp10062
g3644
g3708
sg3632
g4349
sg3646
g3715
sg3641
g4356
stRp10063
ag1
(g9146
g9115
(dp10064
g3644
g3725
sg3632
g4673
sg3646
g3732
sg3641
g4680
stRp10065
ag1
(g9146
g9115
(dp10066
g3644
g3691
sg3632
g5210
sg3646
g3698
sg3641
g5217
stRp10067
ag1
(g9146
g9115
(dp10068
g3644
g3791
sg3632
g3870
sg3646
g3798
sg3641
g3877
stRp10069
ag1
(g9146
g9115
(dp10070
g3644
g4157
sg3632
g4321
sg3646
g4164
sg3641
g4328
stRp10071
ag1
(g9146
g9115
(dp10072
g3644
g3637
sg3632
g3977
sg3646
g3647
sg3641
g3984
stRp10073
ag1
(g9146
g9115
(dp10074
g3644
g4009
sg3632
g4052
sg3646
g4016
sg3641
g4059
stRp10075
ag1
(g9146
g9115
(dp10076
g3644
g4157
sg3632
g4153
sg3646
g4164
sg3641
g4161
stRp10077
ag1
(g9146
g9115
(dp10078
g3644
g3906
sg3632
g3902
sg3646
g3913
sg3641
g3910
stRp10079
ag1
(g9146
g9115
(dp10080
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10081
ag1
(g9146
g9115
(dp10082
g3644
g4157
sg3632
g4321
sg3646
g4164
sg3641
g4328
stRp10083
ag1
(g9146
g9115
(dp10084
g3644
g3725
sg3632
g4673
sg3646
g3732
sg3641
g4680
stRp10085
ag1
(g9146
g9115
(dp10086
g3644
g3889
sg3632
g4753
sg3646
g3896
sg3641
g4760
stRp10087
ag1
(g9146
g9115
(dp10088
g3644
g3825
sg3632
g3919
sg3646
g3832
sg3641
g3926
stRp10089
ag1
(g9146
g9115
(dp10090
g3644
g4446
sg3632
g4442
sg3646
g4453
sg3641
g4450
stRp10091
ag1
(g9146
g9115
(dp10092
g3644
g4157
sg3632
g4321
sg3646
g4164
sg3641
g4328
stRp10093
ag1
(g9146
g9115
(dp10094
g3644
g3842
sg3632
g3838
sg3646
g3849
sg3641
g3846
stRp10095
ag1
(g9146
g9115
(dp10096
g3644
g3674
sg3632
g3772
sg3646
g3681
sg3641
g3779
stRp10097
ag1
(g9146
g9115
(dp10098
g3644
g3637
sg3632
g3977
sg3646
g3647
sg3641
g3984
stRp10099
ag1
(g9146
g9115
(dp10100
g3644
g3691
sg3632
g5210
sg3646
g3698
sg3641
g5217
stRp10101
ag1
(g9146
g9115
(dp10102
g3644
g4032
sg3632
g4022
sg3646
g4026
sg3641
g4030
stRp10103
ag1
(g9146
g9115
(dp10104
g3644
g4009
sg3632
g4052
sg3646
g4016
sg3641
g4059
stRp10105
ag1
(g9146
g9115
(dp10106
g3644
g4032
sg3632
g4022
sg3646
g4026
sg3641
g4030
stRp10107
ag1
(g9146
g9115
(dp10108
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10109
ag1
(g9146
g9115
(dp10110
g3644
g3825
sg3632
g3821
sg3646
g3832
sg3641
g3829
stRp10111
ag1
(g9146
g9115
(dp10112
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10113
ag1
(g9146
g9115
(dp10114
g3644
g3842
sg3632
g3838
sg3646
g3849
sg3641
g3846
stRp10115
ag1
(g9146
g9115
(dp10116
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp10117
ag1
(g9146
g9115
(dp10118
g3644
g3889
sg3632
g4753
sg3646
g3896
sg3641
g4760
stRp10119
ag1
(g9146
g9115
(dp10120
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp10121
ag1
(g9146
g9115
(dp10122
g3644
g3825
sg3632
g3821
sg3646
g3832
sg3641
g3829
stRp10123
ag1
(g9146
g9115
(dp10124
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10125
ag1
(g9146
g9115
(dp10126
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10127
ag1
(g9146
g9115
(dp10128
g3644
g3657
sg3632
g3855
sg3646
g3664
sg3641
g3862
stRp10129
ag1
(g9146
g9115
(dp10130
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp10131
ag1
(g9146
g9115
(dp10132
g3644
g3964
sg3632
g4472
sg3646
g3971
sg3641
g4479
stRp10133
ag1
(g9146
g9115
(dp10134
g3644
g3637
sg3632
g3977
sg3646
g3647
sg3641
g3984
stRp10135
ag1
(g9146
g9115
(dp10136
g3644
g3759
sg3632
g4280
sg3646
g3766
sg3641
g4287
stRp10137
ag1
(g9146
g9115
(dp10138
g3644
g3657
sg3632
g3855
sg3646
g3664
sg3641
g3862
stRp10139
ag1
(g9146
g9115
(dp10140
g3644
g3964
sg3632
g3960
sg3646
g3971
sg3641
g3968
stRp10141
ag1
(g9146
g9115
(dp10142
g3644
g3889
sg3632
g3885
sg3646
g3896
sg3641
g3893
stRp10143
ag1
(g9146
g9115
(dp10144
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp10145
ag1
(g9146
g9115
(dp10146
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10147
ag1
(g9146
g9115
(dp10148
g3644
g4446
sg3632
g4606
sg3646
g4453
sg3641
g4613
stRp10149
ag1
(g9146
g9115
(dp10150
g3644
g3808
sg3632
g3804
sg3646
g3815
sg3641
g3812
stRp10151
ag1
(g9146
g9115
(dp10152
g3644
g3964
sg3632
g3960
sg3646
g3971
sg3641
g3968
stRp10153
ag1
(g9146
g9115
(dp10154
g3644
g3691
sg3632
g5210
sg3646
g3698
sg3641
g5217
stRp10155
ag1
(g9146
g9115
(dp10156
g3644
g3759
sg3632
g4280
sg3646
g3766
sg3641
g4287
stRp10157
ag1
(g9146
g9115
(dp10158
g3644
g4446
sg3632
g4442
sg3646
g4453
sg3641
g4450
stRp10159
ag1
(g9146
g9115
(dp10160
g3644
g4110
sg3632
g4211
sg3646
g4117
sg3641
g4218
stRp10161
ag1
(g9146
g9115
(dp10162
g3644
g3674
sg3632
g3772
sg3646
g3681
sg3641
g3779
stRp10163
ag1
(g9146
g9115
(dp10164
g3644
g3808
sg3632
g3804
sg3646
g3815
sg3641
g3812
stRp10165
ag1
(g9146
g9115
(dp10166
g3644
g3708
sg3632
g4349
sg3646
g3715
sg3641
g4356
stRp10167
ag1
(g9146
g9115
(dp10168
g3644
g3808
sg3632
g4539
sg3646
g3815
sg3641
g4546
stRp10169
ag1
(g9146
g9115
(dp10170
g3644
g3906
sg3632
g4123
sg3646
g3913
sg3641
g4130
stRp10171
ag1
(g9146
g9115
(dp10172
g3644
g3808
sg3632
g3804
sg3646
g3815
sg3641
g3812
stRp10173
ag1
(g9146
g9115
(dp10174
g3644
g4110
sg3632
g4106
sg3646
g4117
sg3641
g4114
stRp10175
ag1
(g9146
g9115
(dp10176
g3644
g4157
sg3632
g4321
sg3646
g4164
sg3641
g4328
stRp10177
ag1
(g9146
g9115
(dp10178
g3644
g4446
sg3632
g4442
sg3646
g4453
sg3641
g4450
stRp10179
ag1
(g9146
g9115
(dp10180
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10181
ag1
(g9146
g9115
(dp10182
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10183
ag1
(g9146
g9115
(dp10184
g3644
g3906
sg3632
g4123
sg3646
g3913
sg3641
g4130
stRp10185
ag1
(g9146
g9115
(dp10186
g3644
g3759
sg3632
g4280
sg3646
g3766
sg3641
g4287
stRp10187
ag1
(g9146
g9115
(dp10188
g3644
g3842
sg3632
g4138
sg3646
g3849
sg3641
g4145
stRp10189
ag1
(g9146
g9115
(dp10190
g3644
g4032
sg3632
g4196
sg3646
g4026
sg3641
g4203
stRp10191
ag1
(g9146
g9115
(dp10192
g3644
g3691
sg3632
g5210
sg3646
g3698
sg3641
g5217
stRp10193
ag1
(g9146
g9115
(dp10194
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10195
ag1
(g9146
g9115
(dp10196
g3644
g4009
sg3632
g4005
sg3646
g4016
sg3641
g4013
stRp10197
ag1
(g9146
g9115
(dp10198
g3644
g3906
sg3632
g4123
sg3646
g3913
sg3641
g4130
stRp10199
ag1
(g9146
g9115
(dp10200
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10201
ag1
(g9146
g9115
(dp10202
g3644
g4009
sg3632
g4005
sg3646
g4016
sg3641
g4013
stRp10203
ag1
(g9146
g9115
(dp10204
g3644
g3889
sg3632
g3885
sg3646
g3896
sg3641
g3893
stRp10205
ag1
(g9146
g9115
(dp10206
g3644
g4110
sg3632
g4211
sg3646
g4117
sg3641
g4218
stRp10207
ag1
(g9146
g9115
(dp10208
g3644
g3808
sg3632
g3804
sg3646
g3815
sg3641
g3812
stRp10209
ag1
(g9146
g9115
(dp10210
g3644
g3842
sg3632
g4138
sg3646
g3849
sg3641
g4145
stRp10211
ag1
(g9146
g9115
(dp10212
g3644
g4110
sg3632
g4211
sg3646
g4117
sg3641
g4218
stRp10213
ag1
(g9146
g9115
(dp10214
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10215
ag1
(g9146
g9115
(dp10216
g3644
g4446
sg3632
g4606
sg3646
g4453
sg3641
g4613
stRp10217
ag1
(g9146
g9115
(dp10218
g3644
g3708
sg3632
g4349
sg3646
g3715
sg3641
g4356
stRp10219
ag1
(g9146
g9115
(dp10220
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10221
ag1
(g9146
g9115
(dp10222
g3644
g3889
sg3632
g3885
sg3646
g3896
sg3641
g3893
stRp10223
ag1
(g9146
g9115
(dp10224
g3644
g3725
sg3632
g4673
sg3646
g3732
sg3641
g4680
stRp10225
ag1
(g9146
g9115
(dp10226
g3644
g4157
sg3632
g4153
sg3646
g4164
sg3641
g4161
stRp10227
ag1
(g9146
g9115
(dp10228
g3644
g4110
sg3632
g4106
sg3646
g4117
sg3641
g4114
stRp10229
ag1
(g9146
g9115
(dp10230
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10231
asg9227
Nsg9228
g6347
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp10232
(dp10233
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10234
sg9107
(lp10235
sg9109
I79983440
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp10236
g33
g9118
(g9119
g92
g9120
S'b'
tRp10237
(I1
(I200
I1
tg9244
I00
S'pub\x12\x10}a\x12\x98ub\x12@}a\x12\xc0\x06\xce\x0c\xe8ub\x12\x90\x80b\x12\xa8\xffa\x12\xc0ub\x12\x10vb\x12\x98ub\x12Pwb\x12P|a\x12\xa8\xffa\x12P|a\x128vb\x12 |a\x12\xe8ub\x12@\x07\xce\x0c\x80|a\x12@}a\x12\xc0\x06\xce\x0c8vb\x12\xc0\t\xce\x0c`vb\x12\x88vb\x12\xc0ub\x12 \x0b\xce\x0cPwb\x12\xb0|a\x12 \x80b\x12Pwb\x12 \x0b\xce\x0c\xe0\x0f\x0e\x03\x00wb\x12\xe0|a\x12 \x80b\x12\xc8\x80b\x12 \x0b\xce\x0c\xc0ub\x12 \x0b\xce\x0c\xc8\x80b\x12P|a\x12\xb0vb\x12@\x07\xce\x0c8vb\x12\x90\x80b\x12\xc0\t\xce\x0c\xa8\xffa\x12\xc0\x06\xce\x0c \x80b\x12pub\x12X\x80b\x12\xc0\x06\xce\x0c\xe0|a\x12\xa0wb\x12P|a\x12\xa8\xffa\x128\x81b\x12\x10vb\x12@\x07\xce\x0c\xb0vb\x12`vb\x12\xb0vb\x12\x88vb\x12 \x0b\xce\x0c\xc0\t\xce\x0c\x80|a\x12\x00\t\x0e\x03X\x80b\x12\xc8\x80b\x12pub\x12\xc0\t\xce\x0c\xa8\xffa\x12\xc0ub\x12p}a\x12\x98ub\x12\xc0\t\xce\x0c \x0b\xce\x0c |a\x12(wb\x12X\x80b\x12\x80|a\x12\xa8\xffa\x12(wb\x12 |a\x12xwb\x12X\x80b\x12\x98ub\x12\x88vb\x12\xc0\t\xce\x0c8vb\x12\x80|a\x12\xe8ub\x12`vb\x12pub\x12X\x80b\x12\x00~a\x12\xc0\t\xce\x0cPwb\x12\xb0vb\x12`vb\x12\xc0ub\x12(wb\x12\xa0}a\x128\x81b\x128vb\x12\xb0|a\x12\x88vb\x12\xc0\t\xce\x0c\x10vb\x12\x80|a\x12pub\x128vb\x12\xc0\x06\xce\x0c0~a\x12\xb0vb\x12\x98ub\x12 \x0b\xce\x0c \x80b\x12\x98ub\x12P|a\x12\xc0ub\x12\x88vb\x12 \x0b\xce\x0c\xe0\x0f\x0e\x03pub\x12\x10vb\x12\x80|a\x12\xb0|a\x12\xc0ub\x12 |a\x12\x88vb\x12\x80|a\x12\xd0}a\x12\x88vb\x12\xc8wb\x12\x10vb\x12\x00wb\x12P|a\x12\xa0wb\x12\xe0\x0f\x0e\x03p}a\x12 |a\x12\x10vb\x12@\x07\xce\x0c\xa0wb\x12\xe8ub\x12\x10vb\x12\xa0wb\x12@\x07\xce\x0c\xc0\t\xce\x0c\xa0wb\x12\xa0}a\x12\xe0\x0f\x0e\x03P|a\x12X\x80b\x12\xc0\x06\xce\x0c \x0b\xce\x0c`vb\x12\xd0}a\x12\xe8ub\x12\x88vb\x12\xb0vb\x12\xc0ub\x120~a\x12\xc0\x06\xce\x0c\xc8\x80b\x12(wb\x12\xb0|a\x12P|a\x12\x80|a\x12\x10}a\x12X\x80b\x12\xb0|a\x12 |a\x12\xe8ub\x12\x98ub\x12pub\x12\xb0vb\x12 |a\x12\xb0|a\x12\x80|a\x12\xb0|a\x12\xa8\xffa\x12\xb0vb\x12\xb0|a\x12 |a\x12\x10vb\x12\xc0\t\xce\x0c\x98ub\x12X\x80b\x12pub\x12\xa8\xffa\x12`vb\x12\xc0\x06\xce\x0c\x88vb\x12 \x80b\x12@\x07\xce\x0c\xc8wb\x12'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp10238
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp10239
(I1
(I200
I1
tg9244
I00
S'\x80Kc\x12`Jc\x12\xe0Jc\x12\x00Jc\x12\x00Lc\x12`Lc\x12@Lc\x12@Jc\x12\xa0Lc\x12 Mc\x12@Mc\x12`Kc\x12\x00Mc\x12\x80Mc\x12`Mc\x12\xc0Mc\x12@Kc\x12 Jc\x12\xe0Ic\x12\xc0Lc\x12\xc0u\x7f\x0c\x00Nc\x12\xc0Jc\x12\xa0Nc\x12\x00Kc\x12`Nc\x12\xc0Kc\x12@Nc\x12 Kc\x12@Oc\x12`Oc\x12\xe0Oc\x12 Oc\x12\x00Oc\x12\xe0Kc\x12 Lc\x12\x80Nc\x12\xe0Mc\x12\xe0Nc\x12 Nc\x12\xa0Kc\x12\xc0Nc\x12\xa0Oc\x12\x80Jc\x12\xc0Oc\x12\x80Lc\x12\x80Oc\x12\xa0Mc\x12\xc01x\x12 1x\x12\xa01x\x12\xe01x\x12\xa02x\x12\xc02x\x12\x802x\x12`0x\x12 3x\x12@3x\x12`3x\x12\xa00x\x12\xe00x\x12\x803x\x12\x00\xb6\xcd\x0c\xc03x\x12 4x\x12`2x\x12@0x\x12\x804x\x12\xa04x\x12 2x\x12\x003x\x12`4x\x12\xc00x\x12\xa03x\x12\xc04x\x12\x805x\x12\xa05x\x12\x800x\x12`1x\x12\xe02x\x12 6x\x12\x005x\x12@5x\x12\x801x\x12@4x\x12@1x\x12\xe06x\x12\x007x\x12\xa06x\x12\xc06x\x12@7x\x12`7x\x12\x004x\x12\xe03x\x12@2x\x12@6x\x12 5x\x12@8x\x12`6x\x12 7x\x12\x806x\x12\xc05x\x12\xa08x\x12\xe07x\x12 0x\x12\x001x\x12\xe04x\x12\x809x\x12\xa09x\x12`9x\x12\xc09x\x12\x002x\x12\xe08x\x12\xe05x\x12`:x\x12\x80:x\x12\xe09x\x12 8x\x12`5x\x12\x00;x\x12\x006x\x12\xa0:x\x12\x807x\x12\xc0:x\x12 9x\x12\xc0;x\x12`;x\x12 ;x\x12\xe0;x\x12 :x\x12@<x\x12\x80<x\x12\xa0<x\x12\xa07x\x12@;x\x12\xe0<x\x12 =x\x12@=x\x12\xa0Jc\x12`<x\x12 <x\x12\x808x\x12\xe0=x\x12\x009x\x12`8x\x12\x00=x\x12\x80=x\x12@:x\x12 >x\x12`>x\x12\x80;x\x12\xe0>x\x12\xc0<x\x12\x00>x\x12\xc0>x\x12\x80>x\x12\xe0:x\x12\xe0?x\x12\x00:x\x12\x00<x\x12\xc07x\x12`=x\x12@?x\x12\xa0;x\x12\xc0=x\x12\xc08x\x12 ?x\x12\xa0?x\x12\xc0?x\x12\xa0>x\x12\x00?x\x12@9x\x12@>x\x12\x008x\x12\x80?x\x12\xc0\xe1\xa6\x12@\xe2\xa6\x12\xa0\xe1\xa6\x12`\xe2\xa6\x12\xa0\xe2\xa6\x12`\xe1\xa6\x12\xe0\xe2\xa6\x12\xc0\xe2\xa6\x12\x00\xe1\xa6\x12\x00\xe3\xa6\x12 \xe3\xa6\x12@\xe3\xa6\x12`\xe3\xa6\x12\x80\xe3\xa6\x12\xa0\xe3\xa6\x12\x00\xe4\xa6\x12\xe0\xe3\xa6\x12@\xe1\xa6\x12 \xe4\xa6\x12\x80\xe4\xa6\x12\xa0\xe4\xa6\x12\xc0\xe0\xa6\x12`\xe0\xa6\x12\xc0\xe4\xa6\x12\xe0\xe4\xa6\x12'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp10240
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp10241
(I1
(I200
I1
tg9122
I00
S'\xdd\xf1\x8e?\xb5z\xd7?*\x06\x80?t\x99\xa8?\x11\xf6\xae?\xba}w?\xe1OD?\x1dMD?\xfb\xe4]?\xbe\xb7;?|\\\xf5?\xc7\x8b\xa8?\xae\xb1\x8a?$\xe4\x9d?\x04\xd1L?*bU?\x86\xe3\x9d?tcU?\x01I\x93?d\xd1\x8c?\xdbd\x86?_}\xd7?\xff<s?"Gb?\xa5\x04\x80?\xc3G\x84?\xb1\x03\xa0?\x03\xf3\xae?\x84\x9aw?\x01J\xa4?\x13\xad\x8a?\x12(\x82?y_U??|U?`\xc1\x9b?G\x91H?\x9ae\xe6?\x8e\xf6n?\xc2\x12\xa0?\xf8\xd2\x8c?\xd4\x0b@?y\xcb;?lJ\xc4?L\x12\x01@\x01\xa1Y?\xf1\'\xe2?\xd7\\U?\xefnf?:\x11\xa0?\x90\xc4{?\x06\xf1\xae?\\CD?[0b?8\xf6.?\x85\x95H?*F\xa4?\xf4X\x95?\xe7\xea]?fBs?yA\x84?B+b?\xbb\x8d\xa8?\xee\x97\x99?\x0bx\xc6?V\xc2\xbb?\xa7\x1eQ?\x9e\xf7.?\xde\xe4]?\xf6\x07@?\xce\xf3L?"\x9fY?\xf3\xd2\x8c?\xd9\xcaL?\xd1\xd2\x8c?\xd2"\xd1?\xd0\xa6Y?6\xf3\xae?\xb2\xf5n?|?3?\xbf\x00\x8f?V\xc8;?\xb5\xaaH?\xa4\xd0\x8c?\xa9\xb7j?^\xa0\xb9?;\x06\xa0?\x0fL\x84?(\xc9;?\xce\xbe\xbb?Q%\x02@\xbd\x17\x91?\x87jf?F\x19\xb1?~z\x97?\x97\x15\xb1?E[\x95?\xde\xcb{?@\x06\x80?J\xe4]?\xab\x02^?>\x06\xa0?\xd0\xbc\x0b@1(\x82?\x01\'\xe2?\xb0vf?\x96sf?S\xb0\x8a?`lf?\x0e\xfdn?\xa0\x19Q?\xbdQU?\x9b\xa8Y?s0"?\xf8;s?6>s?\x89\xa2Y?\xd6\xb8j?buf?\xc9\xc2{??ff?\xa4D\xe4?3\xae\x1a@\x1c~\'@\x92\xe0\x9d?\x81u7?\xb4\x9eY?\xbccU?\x84\xc2L?\xbc\x9c\x99?.m\xa6?\x8bKD?\xae\xb0\xca?\x10z\x07@\xd7\xabY?\x7f\x8e\x88?~@3?\xdb\x95H?2?D?L\xecn?\xb7\x80w?\xc4\xff\xbf@\xd7tf?,j\x86?\xd8\xf1\x8e?\x96\x95Y?\xd5\xc7;?\xdf\x14\xd1?r\xd3L?\x9fJU?Cw\x07@\xb8\xcd\xac?\xec&\x82?\x9e\x9a\t@u\xc9\x8c?Euf?n\x8c\xa8?\xd96Q?BG\xa4?\x97\x8e\x88?;\x04\xc0?rUu@HfD?&6\xb3?\xbe\x9a9@\xaf\x8c\x88?\x10\xc9{?\xa4_\xd5?D\xa0\x99?\xe9\x7f7?\xb6\x18Q?\xd7\xce\x8c?\xf9\xe0\x8c?\x98\x9b)@e\xf5n?3H\x84?\x93\x9a)@\xd9\xb5j?\x0c\x03\xc0?\x87aU?\x1d\xfbn?\xee\xf4\xce?\xec\xec]?\xba"Q?B Q?\x9e\xad\x8a?\xc4\xe0\x9d?*\x95H?\xa0\x88\xe8@f\x95Y?\xd5\xe4]?~\xe8]?\x17%b?\xcb>s?\xc0\xf6\x8e?;sf?\x0b\xb1\x8a?\xed6\xb3?j\x9c\xb9?s\x15\xb1?\xb3\xac\x8a?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp10242
(I1
(I200
I1
tg9244
I00
S'\xf8\x9c\xec\x04\x08\x9c\xec\x04\x10\xbd\xd0\x04p\xb4\xd0\x04\x90\xb8\xd0\x04\xb0\xb3\xd0\x04\xb0\xb9\xd0\x04\x10\xb1\xd0\x04\xf8\xb6\xd0\x04\x80\xb3\xd0\x04P\xbc\xd0\x04\x18\xb5\xd0\x048\xb9\xd0\x04\x90\xbe\xd0\x04h\xbf\xd0\x04`\xbe\xd0\x04\xc0\xb5\xd0\x04\xc8\xb3\xd0\x04\x08\xbf\xd0\x04x\xbe\xd0\x04\xa0\xb7\xd0\x04\x98\xbf\xd0\x048\xb3\xd0\x04\xb0\xbc\xd0\x04\xb8\xba\xd0\x04\x08\xbc\xd0\x04H\xbb\xd0\x04\xb0\xbf\xd0\x048\xbf\xd0\x04\xc0\xb2\xd0\x04\xd8\xb8\xd0\x04X\xba\xd0\x04\x18\xb8\xd0\x04\xe0\xbc\xd0\x04\xb8\xb7\xd0\x04H\xbe\xd0\x040\xbb\xd0\x04@\xba\xd0\x04 \xbc\xd0\x04\xb8\xaa\x12\x05`\xa8\x12\x05\x80\xaf\x12\x05@\xaa\x12\x05 \xaf\x12\x05\xc8\xa9\x12\x05\x80\xa9\x12\x05\xb8\xad\x12\x05\xe8\xa4\x12\x05\x80\xa0\x12\x05 \xa6\x12\x05X\xad\x12\x050\xa8\x12\x058\xa9\x12\x05\xe8\xa7\x12\x05h\xa0\x12\x05\xe8\xaa\x12\x05\x00\xa5\x12\x05 \xac\x12\x05\x80\xa3\x12\x05\xe0\xa9\x12\x05\xd8\xa5\x12\x05\xd0\xa1\x12\x05`\xa5\x12\x05p\xa1\x12\x05\xf0\xa5\x12\x05H\xa5\x12\x05\xb8\xa7\x12\x050\xa5\x12\x05\xb0\xa6\x12\x05x\xae\x12\x05p\xa7\x12\x05\x98\xa6\x12\x05\x88\xa7\x12\x05@\xa4\x12\x05\xf8\xac\x12\x05\xe0\xa6\x12\x05\xc0\xa8\x12\x05\xd8\xa8\x12\x05X\xa1\x12\x05\xa8\xa5\x12\x05\x18\xa8\x12\x05\xd0\xaa\x12\x05\x90\xa8\x12\x05\xa8\xab\x12\x05 \xa0\x12\x05\x00\xae\x12\x05\xa8\xae\x12\x05(\xa7\x12\x05(\xa1\x12\x05p\xa4\x12\x05P\xa6\x12\x058\xaf\x12\x058\xa0\x12\x05\xc8\xa6\x12\x05\x18\xae\x12\x05\xf0\xa8\x12\x05X\xaa\x12\x05\x90\xa5\x12\x05P\xa0\x12\x05\xe0\xac\x12\x05\x18\xab\x12\x058\xac\x12\x05\xa0\xad\x12\x05H\xab\x12\x05\x98\xac\x12\x05p\xad\x12\x05\xa8\xa8\x12\x05h\xa9\x12\x05\x10\xa7\x12\x05\xd0\xad\x12\x05x\xa5\x12\x05\x08\xac\x12\x05(\xaa\x12\x058\xa6\x12\x050\xab\x12\x05P\xa9\x12\x05\xa0\xa1\x12\x050\xa2\x12\x05(\xad\x12\x05\x00\xab\x12\x05\x88\xad\x12\x05\xc0\xae\x12\x05\xb0\xa0\x12\x050\xae\x12\x05\xf8\xa3\x12\x05\x18\xa5\x12\x05\xc8\xa0\x12\x05x\xab\x12\x05\xe0\xaf\x12\x05\x88\xa4\x12\x05\x90\xae\x12\x05\xb0\xaf\x12\x05H\xae\x12\x05`\xae\x12\x05\x98\xa9\x12\x05\xc8\xac\x12\x05\x98\xa0\x12\x05\xc8\xaf\x12\x05\xc0\xab\x12\x05\x88\xa1\x12\x05h\xac\x12\x05\x80\xa6\x12\x05X\xa4\x12\x05\xd8\xae\x12\x05\xd8\xab\x12\x05\x08\xa6\x12\x05h\xa6\x12\x05`\xab\x12\x05h\xaf\x12\x05\x08\xaf\x12\x05P\xac\x12\x05\xd0\xa7\x12\x05\xe8\xa1\x12\x05\x80\xac\x12\x05\x10\xaa\x12\x05\x98\xaf\x12\x05\x00\xa8\x12\x05\xe8\xad\x12\x05x\xa8\x12\x05\xb0\xa9\x12\x05\xf8\xa9\x12\x05@\xad\x12\x05\xc0\xa5\x12\x05P\xaf\x12\x05\xa0\xa4\x12\x05\xa0\xa7\x12\x05H\xa8\x12\x05\xf0\xab\x12\x05\x88\xaa\x12\x05(\xa4\x12\x05\xa0\xaa\x12\x05 \xa9\x12\x05\xb8\xa1\x12\x05\x10\xad\x12\x05X\xa7\x12\x05\xd0\xa4\x12\x05\x08\xb9\xd0\x04P\xb3\xd0\x04 \xb6\xd0\x04\x00\xb2\xd0\x04\xa0\xbd\xd0\x048\xbc\xd0\x04\xe8\xb1\xd0\x04\x98\xb3\xd0\x04\xf8\xb0\xd0\x04\x90\xb2\xd0\x04\xb8\xb4\xd0\x04\xf0\xb2\xd0\x04\x80\xb9\xd0\x04\xe0\xb0\xd0\x04X\xb4\xd0\x04X\xbd\xd0\x04\x88\xbd\xd0\x04\x10\xb4\xd0\x040\xb8\xd0\x04\xd8\xbe\xd0\x04\x88\xb7\xd0\x04h\xbc\xd0\x04\xc0\xb8\xd0\x04\x90\xbb\xd0\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10243
(dp10244
g9130
(dp10245
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g10232
sg9133
(lp10246
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp10247
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp10248
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp10249
g1
(g9146
g9115
(dp10250
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10251
ag1
(g9146
g9115
(dp10252
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10253
ag1
(g9146
g9115
(dp10254
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10255
ag1
(g9146
g9115
(dp10256
g6382
g6435
sg6370
g6425
sg6384
g6429
sg6379
g6433
stRp10257
ag1
(g9146
g9115
(dp10258
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10259
ag1
(g9146
g9115
(dp10260
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10261
ag1
(g9146
g9115
(dp10262
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10263
ag1
(g9146
g9115
(dp10264
g6382
g6493
sg6370
g6489
sg6384
g6500
sg6379
g6497
stRp10265
ag1
(g9146
g9115
(dp10266
g6382
g6435
sg6370
g6425
sg6384
g6429
sg6379
g6433
stRp10267
ag1
(g9146
g9115
(dp10268
g6382
g6523
sg6370
g6519
sg6384
g6530
sg6379
g6527
stRp10269
ag1
(g9146
g9115
(dp10270
g6382
g6412
sg6370
g6536
sg6384
g6419
sg6379
g6543
stRp10271
ag1
(g9146
g9115
(dp10272
g6382
g6561
sg6370
g6551
sg6384
g6555
sg6379
g6559
stRp10273
ag1
(g9146
g9115
(dp10274
g6382
g6572
sg6370
g6568
sg6384
g6579
sg6379
g6576
stRp10275
ag1
(g9146
g9115
(dp10276
g6382
g6493
sg6370
g6585
sg6384
g6500
sg6379
g6592
stRp10277
ag1
(g9146
g9115
(dp10278
g6382
g6572
sg6370
g6568
sg6384
g6579
sg6379
g6576
stRp10279
ag1
(g9146
g9115
(dp10280
g6382
g6561
sg6370
g6551
sg6384
g6555
sg6379
g6559
stRp10281
ag1
(g9146
g9115
(dp10282
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10283
ag1
(g9146
g9115
(dp10284
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10285
ag1
(g9146
g9115
(dp10286
g6382
g6656
sg6370
g6652
sg6384
g6663
sg6379
g6660
stRp10287
ag1
(g9146
g9115
(dp10288
g6382
g6673
sg6370
g6669
sg6384
g6680
sg6379
g6677
stRp10289
ag1
(g9146
g9115
(dp10290
g6382
g6435
sg6370
g6686
sg6384
g6429
sg6379
g6693
stRp10291
ag1
(g9146
g9115
(dp10292
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10293
ag1
(g9146
g9115
(dp10294
g6382
g6561
sg6370
g6551
sg6384
g6555
sg6379
g6559
stRp10295
ag1
(g9146
g9115
(dp10296
g6382
g6731
sg6370
g6727
sg6384
g6738
sg6379
g6735
stRp10297
ag1
(g9146
g9115
(dp10298
g6382
g6748
sg6370
g6744
sg6384
g6755
sg6379
g6752
stRp10299
ag1
(g9146
g9115
(dp10300
g6382
g6765
sg6370
g6761
sg6384
g6772
sg6379
g6769
stRp10301
ag1
(g9146
g9115
(dp10302
g6382
g6435
sg6370
g6425
sg6384
g6429
sg6379
g6433
stRp10303
ag1
(g9146
g9115
(dp10304
g6382
g6795
sg6370
g6791
sg6384
g6802
sg6379
g6799
stRp10305
ag1
(g9146
g9115
(dp10306
g6382
g6561
sg6370
g6551
sg6384
g6555
sg6379
g6559
stRp10307
ag1
(g9146
g9115
(dp10308
g6382
g6825
sg6370
g6821
sg6384
g6832
sg6379
g6829
stRp10309
ag1
(g9146
g9115
(dp10310
g6382
g6842
sg6370
g6838
sg6384
g6849
sg6379
g6846
stRp10311
ag1
(g9146
g9115
(dp10312
g6382
g6561
sg6370
g6855
sg6384
g6555
sg6379
g6862
stRp10313
ag1
(g9146
g9115
(dp10314
g6382
g6795
sg6370
g6791
sg6384
g6802
sg6379
g6799
stRp10315
ag1
(g9146
g9115
(dp10316
g6382
g6748
sg6370
g6883
sg6384
g6755
sg6379
g6890
stRp10317
ag1
(g9146
g9115
(dp10318
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10319
ag1
(g9146
g9115
(dp10320
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10321
ag1
(g9146
g9115
(dp10322
g6382
g6842
sg6370
g6838
sg6384
g6849
sg6379
g6846
stRp10323
ag1
(g9146
g9115
(dp10324
g6382
g6656
sg6370
g6652
sg6384
g6663
sg6379
g6660
stRp10325
ag1
(g9146
g9115
(dp10326
g6382
g6795
sg6370
g6950
sg6384
g6802
sg6379
g6957
stRp10327
ag1
(g9146
g9115
(dp10328
g6382
g6435
sg6370
g6425
sg6384
g6429
sg6379
g6433
stRp10329
ag1
(g9146
g9115
(dp10330
g6382
g6795
sg6370
g6950
sg6384
g6802
sg6379
g6957
stRp10331
ag1
(g9146
g9115
(dp10332
g6382
g6656
sg6370
g6652
sg6384
g6663
sg6379
g6660
stRp10333
ag1
(g9146
g9115
(dp10334
g6382
g6572
sg6370
g7004
sg6384
g6579
sg6379
g7011
stRp10335
ag1
(g9146
g9115
(dp10336
g6382
g7023
sg6370
g7019
sg6384
g7030
sg6379
g7027
stRp10337
ag1
(g9146
g9115
(dp10338
g6382
g6656
sg6370
g6652
sg6384
g6663
sg6379
g6660
stRp10339
ag1
(g9146
g9115
(dp10340
g6382
g6561
sg6370
g6855
sg6384
g6555
sg6379
g6862
stRp10341
ag1
(g9146
g9115
(dp10342
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10343
ag1
(g9146
g9115
(dp10344
g6382
g6731
sg6370
g7075
sg6384
g6738
sg6379
g7082
stRp10345
ag1
(g9146
g9115
(dp10346
g6382
g6493
sg6370
g6585
sg6384
g6500
sg6379
g6592
stRp10347
ag1
(g9146
g9115
(dp10348
g6382
g6446
sg6370
g7103
sg6384
g6453
sg6379
g7110
stRp10349
ag1
(g9146
g9115
(dp10350
g6382
g6842
sg6370
g6838
sg6384
g6849
sg6379
g6846
stRp10351
ag1
(g9146
g9115
(dp10352
g6382
g6375
sg6370
g7131
sg6384
g6385
sg6379
g7138
stRp10353
ag1
(g9146
g9115
(dp10354
g6382
g7150
sg6370
g7146
sg6384
g7157
sg6379
g7154
stRp10355
ag1
(g9146
g9115
(dp10356
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10357
ag1
(g9146
g9115
(dp10358
g6382
g6375
sg6370
g7131
sg6384
g6385
sg6379
g7138
stRp10359
ag1
(g9146
g9115
(dp10360
g6382
g6842
sg6370
g7189
sg6384
g6849
sg6379
g7196
stRp10361
ag1
(g9146
g9115
(dp10362
g6382
g6572
sg6370
g7004
sg6384
g6579
sg6379
g7011
stRp10363
ag1
(g9146
g9115
(dp10364
g6382
g6493
sg6370
g6489
sg6384
g6500
sg6379
g6497
stRp10365
ag1
(g9146
g9115
(dp10366
g6382
g7150
sg6370
g7230
sg6384
g7157
sg6379
g7237
stRp10367
ag1
(g9146
g9115
(dp10368
g6382
g6523
sg6370
g7245
sg6384
g6530
sg6379
g7252
stRp10369
ag1
(g9146
g9115
(dp10370
g6382
g6656
sg6370
g7260
sg6384
g6663
sg6379
g7267
stRp10371
ag1
(g9146
g9115
(dp10372
g6382
g7023
sg6370
g7275
sg6384
g7030
sg6379
g7282
stRp10373
ag1
(g9146
g9115
(dp10374
g6382
g6748
sg6370
g6883
sg6384
g6755
sg6379
g6890
stRp10375
ag1
(g9146
g9115
(dp10376
g6382
g7023
sg6370
g7019
sg6384
g7030
sg6379
g7027
stRp10377
ag1
(g9146
g9115
(dp10378
g6382
g6765
sg6370
g7316
sg6384
g6772
sg6379
g7323
stRp10379
ag1
(g9146
g9115
(dp10380
g6382
g6795
sg6370
g6950
sg6384
g6802
sg6379
g6957
stRp10381
ag1
(g9146
g9115
(dp10382
g6382
g6731
sg6370
g7075
sg6384
g6738
sg6379
g7082
stRp10383
ag1
(g9146
g9115
(dp10384
g6382
g6673
sg6370
g6669
sg6384
g6680
sg6379
g6677
stRp10385
ag1
(g9146
g9115
(dp10386
g6382
g6795
sg6370
g6950
sg6384
g6802
sg6379
g6957
stRp10387
ag1
(g9146
g9115
(dp10388
g6382
g7150
sg6370
g7230
sg6384
g7157
sg6379
g7237
stRp10389
ag1
(g9146
g9115
(dp10390
g6382
g6656
sg6370
g7260
sg6384
g6663
sg6379
g7267
stRp10391
ag1
(g9146
g9115
(dp10392
g6382
g6375
sg6370
g7131
sg6384
g6385
sg6379
g7138
stRp10393
ag1
(g9146
g9115
(dp10394
g6382
g6731
sg6370
g6727
sg6384
g6738
sg6379
g6735
stRp10395
ag1
(g9146
g9115
(dp10396
g6382
g6493
sg6370
g6489
sg6384
g6500
sg6379
g6497
stRp10397
ag1
(g9146
g9115
(dp10398
g6382
g6435
sg6370
g6425
sg6384
g6429
sg6379
g6433
stRp10399
ag1
(g9146
g9115
(dp10400
g6382
g6493
sg6370
g6585
sg6384
g6500
sg6379
g6592
stRp10401
ag1
(g9146
g9115
(dp10402
g6382
g6412
sg6370
g6536
sg6384
g6419
sg6379
g6543
stRp10403
ag1
(g9146
g9115
(dp10404
g6382
g6731
sg6370
g7075
sg6384
g6738
sg6379
g7082
stRp10405
ag1
(g9146
g9115
(dp10406
g6382
g6795
sg6370
g6950
sg6384
g6802
sg6379
g6957
stRp10407
ag1
(g9146
g9115
(dp10408
g6382
g6401
sg6370
g7513
sg6384
g6395
sg6379
g7520
stRp10409
ag1
(g9146
g9115
(dp10410
g6382
g6463
sg6370
g7528
sg6384
g6470
sg6379
g7535
stRp10411
ag1
(g9146
g9115
(dp10412
g6382
g7150
sg6370
g7146
sg6384
g7157
sg6379
g7154
stRp10413
ag1
(g9146
g9115
(dp10414
g6382
g6673
sg6370
g7556
sg6384
g6680
sg6379
g7563
stRp10415
ag1
(g9146
g9115
(dp10416
g6382
g6493
sg6370
g6489
sg6384
g6500
sg6379
g6497
stRp10417
ag1
(g9146
g9115
(dp10418
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10419
ag1
(g9146
g9115
(dp10420
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10421
ag1
(g9146
g9115
(dp10422
g6382
g6765
sg6370
g7316
sg6384
g6772
sg6379
g7323
stRp10423
ag1
(g9146
g9115
(dp10424
g6382
g7150
sg6370
g7146
sg6384
g7157
sg6379
g7154
stRp10425
ag1
(g9146
g9115
(dp10426
g6382
g6412
sg6370
g6536
sg6384
g6419
sg6379
g6543
stRp10427
ag1
(g9146
g9115
(dp10428
g6382
g6765
sg6370
g6761
sg6384
g6772
sg6379
g6769
stRp10429
ag1
(g9146
g9115
(dp10430
g6382
g6731
sg6370
g6727
sg6384
g6738
sg6379
g6735
stRp10431
ag1
(g9146
g9115
(dp10432
g6382
g6561
sg6370
g6855
sg6384
g6555
sg6379
g6862
stRp10433
ag1
(g9146
g9115
(dp10434
g6382
g6673
sg6370
g7556
sg6384
g6680
sg6379
g7563
stRp10435
ag1
(g9146
g9115
(dp10436
g6382
g6463
sg6370
g7528
sg6384
g6470
sg6379
g7535
stRp10437
ag1
(g9146
g9115
(dp10438
g6382
g6748
sg6370
g6744
sg6384
g6755
sg6379
g6752
stRp10439
ag1
(g9146
g9115
(dp10440
g6382
g6375
sg6370
g7131
sg6384
g6385
sg6379
g7138
stRp10441
ag1
(g9146
g9115
(dp10442
g6382
g7150
sg6370
g7230
sg6384
g7157
sg6379
g7237
stRp10443
ag1
(g9146
g9115
(dp10444
g6382
g6673
sg6370
g6669
sg6384
g6680
sg6379
g6677
stRp10445
ag1
(g9146
g9115
(dp10446
g6382
g6731
sg6370
g6727
sg6384
g6738
sg6379
g6735
stRp10447
ag1
(g9146
g9115
(dp10448
g6382
g6561
sg6370
g6551
sg6384
g6555
sg6379
g6559
stRp10449
ag1
(g9146
g9115
(dp10450
g6382
g7023
sg6370
g7275
sg6384
g7030
sg6379
g7282
stRp10451
ag1
(g9146
g9115
(dp10452
g6382
g6748
sg6370
g6883
sg6384
g6755
sg6379
g6890
stRp10453
ag1
(g9146
g9115
(dp10454
g6382
g6435
sg6370
g6686
sg6384
g6429
sg6379
g6693
stRp10455
ag1
(g9146
g9115
(dp10456
g6382
g6463
sg6370
g7528
sg6384
g6470
sg6379
g7535
stRp10457
ag1
(g9146
g9115
(dp10458
g6382
g6523
sg6370
g7245
sg6384
g6530
sg6379
g7252
stRp10459
ag1
(g9146
g9115
(dp10460
g6382
g7150
sg6370
g7146
sg6384
g7157
sg6379
g7154
stRp10461
ag1
(g9146
g9115
(dp10462
g6382
g6561
sg6370
g6855
sg6384
g6555
sg6379
g6862
stRp10463
ag1
(g9146
g9115
(dp10464
g6382
g6825
sg6370
g7883
sg6384
g6832
sg6379
g7890
stRp10465
ag1
(g9146
g9115
(dp10466
g6382
g6765
sg6370
g7316
sg6384
g6772
sg6379
g7323
stRp10467
ag1
(g9146
g9115
(dp10468
g6382
g6731
sg6370
g7075
sg6384
g6738
sg6379
g7082
stRp10469
ag1
(g9146
g9115
(dp10470
g6382
g6523
sg6370
g6519
sg6384
g6530
sg6379
g6527
stRp10471
ag1
(g9146
g9115
(dp10472
g6382
g6673
sg6370
g7556
sg6384
g6680
sg6379
g7563
stRp10473
ag1
(g9146
g9115
(dp10474
g6382
g6375
sg6370
g7131
sg6384
g6385
sg6379
g7138
stRp10475
ag1
(g9146
g9115
(dp10476
g6382
g6561
sg6370
g6855
sg6384
g6555
sg6379
g6862
stRp10477
ag1
(g9146
g9115
(dp10478
g6382
g6446
sg6370
g7103
sg6384
g6453
sg6379
g7110
stRp10479
ag1
(g9146
g9115
(dp10480
g6382
g6825
sg6370
g7883
sg6384
g6832
sg6379
g7890
stRp10481
ag1
(g9146
g9115
(dp10482
g6382
g7023
sg6370
g7275
sg6384
g7030
sg6379
g7282
stRp10483
ag1
(g9146
g9115
(dp10484
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10485
ag1
(g9146
g9115
(dp10486
g6382
g6795
sg6370
g6791
sg6384
g6802
sg6379
g6799
stRp10487
ag1
(g9146
g9115
(dp10488
g6382
g6842
sg6370
g7189
sg6384
g6849
sg6379
g7196
stRp10489
ag1
(g9146
g9115
(dp10490
g6382
g6412
sg6370
g6536
sg6384
g6419
sg6379
g6543
stRp10491
ag1
(g9146
g9115
(dp10492
g6382
g6572
sg6370
g6568
sg6384
g6579
sg6379
g6576
stRp10493
ag1
(g9146
g9115
(dp10494
g6382
g6435
sg6370
g6686
sg6384
g6429
sg6379
g6693
stRp10495
ag1
(g9146
g9115
(dp10496
g6382
g6765
sg6370
g6761
sg6384
g6772
sg6379
g6769
stRp10497
ag1
(g9146
g9115
(dp10498
g6382
g6795
sg6370
g6791
sg6384
g6802
sg6379
g6799
stRp10499
ag1
(g9146
g9115
(dp10500
g6382
g6748
sg6370
g6744
sg6384
g6755
sg6379
g6752
stRp10501
ag1
(g9146
g9115
(dp10502
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10503
ag1
(g9146
g9115
(dp10504
g6382
g6523
sg6370
g6519
sg6384
g6530
sg6379
g6527
stRp10505
ag1
(g9146
g9115
(dp10506
g6382
g6673
sg6370
g7556
sg6384
g6680
sg6379
g7563
stRp10507
ag1
(g9146
g9115
(dp10508
g6382
g6825
sg6370
g6821
sg6384
g6832
sg6379
g6829
stRp10509
ag1
(g9146
g9115
(dp10510
g6382
g6435
sg6370
g6686
sg6384
g6429
sg6379
g6693
stRp10511
ag1
(g9146
g9115
(dp10512
g6382
g6401
sg6370
g7513
sg6384
g6395
sg6379
g7520
stRp10513
ag1
(g9146
g9115
(dp10514
g6382
g6765
sg6370
g7316
sg6384
g6772
sg6379
g7323
stRp10515
ag1
(g9146
g9115
(dp10516
g6382
g6673
sg6370
g7556
sg6384
g6680
sg6379
g7563
stRp10517
ag1
(g9146
g9115
(dp10518
g6382
g6572
sg6370
g7004
sg6384
g6579
sg6379
g7011
stRp10519
ag1
(g9146
g9115
(dp10520
g6382
g6765
sg6370
g6761
sg6384
g6772
sg6379
g6769
stRp10521
ag1
(g9146
g9115
(dp10522
g6382
g7023
sg6370
g7275
sg6384
g7030
sg6379
g7282
stRp10523
ag1
(g9146
g9115
(dp10524
g6382
g6523
sg6370
g7245
sg6384
g6530
sg6379
g7252
stRp10525
ag1
(g9146
g9115
(dp10526
g6382
g6446
sg6370
g7103
sg6384
g6453
sg6379
g7110
stRp10527
ag1
(g9146
g9115
(dp10528
g6382
g6572
sg6370
g7004
sg6384
g6579
sg6379
g7011
stRp10529
ag1
(g9146
g9115
(dp10530
g6382
g6842
sg6370
g7189
sg6384
g6849
sg6379
g7196
stRp10531
ag1
(g9146
g9115
(dp10532
g6382
g6748
sg6370
g6883
sg6384
g6755
sg6379
g6890
stRp10533
ag1
(g9146
g9115
(dp10534
g6382
g6493
sg6370
g6585
sg6384
g6500
sg6379
g6592
stRp10535
ag1
(g9146
g9115
(dp10536
g6382
g6401
sg6370
g7513
sg6384
g6395
sg6379
g7520
stRp10537
ag1
(g9146
g9115
(dp10538
g6382
g6523
sg6370
g7245
sg6384
g6530
sg6379
g7252
stRp10539
ag1
(g9146
g9115
(dp10540
g6382
g6656
sg6370
g7260
sg6384
g6663
sg6379
g7267
stRp10541
ag1
(g9146
g9115
(dp10542
g6382
g6842
sg6370
g7189
sg6384
g6849
sg6379
g7196
stRp10543
ag1
(g9146
g9115
(dp10544
g6382
g6463
sg6370
g7528
sg6384
g6470
sg6379
g7535
stRp10545
ag1
(g9146
g9115
(dp10546
g6382
g6523
sg6370
g6519
sg6384
g6530
sg6379
g6527
stRp10547
ag1
(g9146
g9115
(dp10548
g6382
g6842
sg6370
g7189
sg6384
g6849
sg6379
g7196
stRp10549
ag1
(g9146
g9115
(dp10550
g6382
g6656
sg6370
g7260
sg6384
g6663
sg6379
g7267
stRp10551
ag1
(g9146
g9115
(dp10552
g6382
g6731
sg6370
g6727
sg6384
g6738
sg6379
g6735
stRp10553
ag1
(g9146
g9115
(dp10554
g6382
g6842
sg6370
g6838
sg6384
g6849
sg6379
g6846
stRp10555
ag1
(g9146
g9115
(dp10556
g6382
g6523
sg6370
g6519
sg6384
g6530
sg6379
g6527
stRp10557
ag1
(g9146
g9115
(dp10558
g6382
g6748
sg6370
g6883
sg6384
g6755
sg6379
g6890
stRp10559
ag1
(g9146
g9115
(dp10560
g6382
g6572
sg6370
g7004
sg6384
g6579
sg6379
g7011
stRp10561
ag1
(g9146
g9115
(dp10562
g6382
g7150
sg6370
g7146
sg6384
g7157
sg6379
g7154
stRp10563
ag1
(g9146
g9115
(dp10564
g6382
g6446
sg6370
g7103
sg6384
g6453
sg6379
g7110
stRp10565
ag1
(g9146
g9115
(dp10566
g6382
g6795
sg6370
g6791
sg6384
g6802
sg6379
g6799
stRp10567
ag1
(g9146
g9115
(dp10568
g6382
g6748
sg6370
g6744
sg6384
g6755
sg6379
g6752
stRp10569
ag1
(g9146
g9115
(dp10570
g6382
g6572
sg6370
g6568
sg6384
g6579
sg6379
g6576
stRp10571
ag1
(g9146
g9115
(dp10572
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10573
ag1
(g9146
g9115
(dp10574
g6382
g6765
sg6370
g6761
sg6384
g6772
sg6379
g6769
stRp10575
ag1
(g9146
g9115
(dp10576
g6382
g7023
sg6370
g7275
sg6384
g7030
sg6379
g7282
stRp10577
ag1
(g9146
g9115
(dp10578
g6382
g6435
sg6370
g6686
sg6384
g6429
sg6379
g6693
stRp10579
ag1
(g9146
g9115
(dp10580
g6382
g6825
sg6370
g6821
sg6384
g6832
sg6379
g6829
stRp10581
ag1
(g9146
g9115
(dp10582
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10583
ag1
(g9146
g9115
(dp10584
g6382
g6656
sg6370
g7260
sg6384
g6663
sg6379
g7267
stRp10585
ag1
(g9146
g9115
(dp10586
g6382
g6463
sg6370
g7528
sg6384
g6470
sg6379
g7535
stRp10587
ag1
(g9146
g9115
(dp10588
g6382
g6825
sg6370
g6821
sg6384
g6832
sg6379
g6829
stRp10589
ag1
(g9146
g9115
(dp10590
g6382
g6572
sg6370
g6568
sg6384
g6579
sg6379
g6576
stRp10591
ag1
(g9146
g9115
(dp10592
g6382
g6673
sg6370
g6669
sg6384
g6680
sg6379
g6677
stRp10593
ag1
(g9146
g9115
(dp10594
g6382
g6401
sg6370
g7513
sg6384
g6395
sg6379
g7520
stRp10595
ag1
(g9146
g9115
(dp10596
g6382
g7150
sg6370
g7230
sg6384
g7157
sg6379
g7237
stRp10597
ag1
(g9146
g9115
(dp10598
g6382
g6825
sg6370
g7883
sg6384
g6832
sg6379
g7890
stRp10599
ag1
(g9146
g9115
(dp10600
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10601
ag1
(g9146
g9115
(dp10602
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10603
ag1
(g9146
g9115
(dp10604
g6382
g6412
sg6370
g6536
sg6384
g6419
sg6379
g6543
stRp10605
ag1
(g9146
g9115
(dp10606
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10607
ag1
(g9146
g9115
(dp10608
g6382
g7023
sg6370
g7019
sg6384
g7030
sg6379
g7027
stRp10609
ag1
(g9146
g9115
(dp10610
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10611
ag1
(g9146
g9115
(dp10612
g6382
g6825
sg6370
g7883
sg6384
g6832
sg6379
g7890
stRp10613
ag1
(g9146
g9115
(dp10614
g6382
g6673
sg6370
g6669
sg6384
g6680
sg6379
g6677
stRp10615
ag1
(g9146
g9115
(dp10616
g6382
g6825
sg6370
g7883
sg6384
g6832
sg6379
g7890
stRp10617
ag1
(g9146
g9115
(dp10618
g6382
g6493
sg6370
g6585
sg6384
g6500
sg6379
g6592
stRp10619
ag1
(g9146
g9115
(dp10620
g6382
g7023
sg6370
g7019
sg6384
g7030
sg6379
g7027
stRp10621
ag1
(g9146
g9115
(dp10622
g6382
g6825
sg6370
g6821
sg6384
g6832
sg6379
g6829
stRp10623
ag1
(g9146
g9115
(dp10624
g6382
g6401
sg6370
g7513
sg6384
g6395
sg6379
g7520
stRp10625
ag1
(g9146
g9115
(dp10626
g6382
g6523
sg6370
g7245
sg6384
g6530
sg6379
g7252
stRp10627
ag1
(g9146
g9115
(dp10628
g6382
g6731
sg6370
g7075
sg6384
g6738
sg6379
g7082
stRp10629
ag1
(g9146
g9115
(dp10630
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10631
ag1
(g9146
g9115
(dp10632
g6382
g7150
sg6370
g7230
sg6384
g7157
sg6379
g7237
stRp10633
ag1
(g9146
g9115
(dp10634
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10635
ag1
(g9146
g9115
(dp10636
g6382
g6493
sg6370
g6489
sg6384
g6500
sg6379
g6497
stRp10637
ag1
(g9146
g9115
(dp10638
g6382
g6748
sg6370
g6744
sg6384
g6755
sg6379
g6752
stRp10639
ag1
(g9146
g9115
(dp10640
g6382
g6446
sg6370
g7103
sg6384
g6453
sg6379
g7110
stRp10641
ag1
(g9146
g9115
(dp10642
g6382
g6765
sg6370
g7316
sg6384
g6772
sg6379
g7323
stRp10643
ag1
(g9146
g9115
(dp10644
g6382
g6842
sg6370
g6838
sg6384
g6849
sg6379
g6846
stRp10645
ag1
(g9146
g9115
(dp10646
g6382
g6656
sg6370
g6652
sg6384
g6663
sg6379
g6660
stRp10647
ag1
(g9146
g9115
(dp10648
g6382
g7023
sg6370
g7019
sg6384
g7030
sg6379
g7027
stRp10649
asg9227
Nsg9228
g9085
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbasS'savePickle'
p10650
I00
sb.