ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/C8_infer_design1_no_eyetracking_2015_Sep_28_1715
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1_no_eyetracking'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vr
sVcontacts
p57
Vn
sS'frameRate'
p58
cnumpy.core.multiarray
scalar
p59
(cnumpy
dtype
p60
(S'f8'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbS'&\xb6\xf0j\xdf\xfbM@'
tRp62
sVsession
p63
V001
p64
sS'date'
p65
V2015_Sep_28_1715
p66
sVparticipant
p67
VC8
p68
sVglasses
p69
Vn
ssS'loopsUnfinished'
p70
(lp71
sS'saveWideText'
p72
I01
sS'thisEntry'
p73
(dp74
sS'version'
p75
S''
sS'_paramNamesSoFar'
p76
(lp77
Vbdm_img
p78
aS'choice_left'
p79
aS'choice_right'
p80
aS'img_correct'
p81
aS'img_left'
p82
aS'img_wrong'
p83
aS'img_right'
p84
asS'entries'
p85
(lp86
(dp87
g63
g64
sg56
Vr
sg15
F0.75011631991219474
sg14
S'space'
p88
sg58
g62
sg57
Vn
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp89
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg16
S'space'
p90
sg55
g11
sg65
g66
sg67
g68
sg18
F6.2334380972788495
sg17
cnumpy.core.multiarray
_reconstruct
p91
(cnumpy
ndarray
p92
(I0
tS'b'
tRp93
(I1
(I1
tg60
(S'S3'
I0
I1
tRp94
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P8\x00'
tbsg69
Vn
sa(dp95
g63
g64
sg20
F24.582999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p96
I0
sg19
F0.039999999999999161
sg55
g11
sS'bdm_loop1.thisIndex'
p97
g59
(g60
(S'i4'
I0
I1
tRp98
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x08\x00\x00\x00'
tRp99
sS'bdm_loop1.thisRepN'
p100
I0
sS'bdm_loop1.thisTrialN'
p101
I0
sg65
g66
sg67
g68
sg78
V10-bounty_redo.png
p102
sg21
F1.3
sg69
Vn
sa(dp103
g63
g64
sg20
F5.4169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p104
I1
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p105
g59
(g98
S'\x13\x00\x00\x00'
tRp106
sS'bdm_loop1.thisRepN'
p107
I0
sS'bdm_loop1.thisTrialN'
p108
I1
sg65
g66
sg67
g68
sg78
V26-walkers_smoky_bacon.png
p109
sg21
F1.7
sg69
Vn
sa(dp110
g63
g64
sg20
F9.0169999999999995
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p111
I2
sg19
F0.1599999999999985
sg55
g11
sS'bdm_loop1.thisIndex'
p112
g59
(g98
S'\x0f\x00\x00\x00'
tRp113
sS'bdm_loop1.thisRepN'
p114
I0
sS'bdm_loop1.thisTrialN'
p115
I2
sg65
g66
sg67
g68
sg78
V21-nakd_banana_crunch.png
p116
sg21
F1.8999999999999999
sg69
Vn
sa(dp117
g63
g64
sg20
F9.5670000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p118
I3
sg19
F0.51999999999999957
sg55
g11
sS'bdm_loop1.thisIndex'
p119
g59
(g98
S'\x1f\x00\x00\x00'
tRp120
sS'bdm_loop1.thisRepN'
p121
I0
sS'bdm_loop1.thisTrialN'
p122
I3
sg65
g66
sg67
g68
sg78
V42-mrkipling_lemon_slices.png
p123
sg21
F1.1000000000000001
sg69
Vn
sa(dp124
g63
g64
sg20
F11.85
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p125
I4
sg19
F0.47999999999999932
sg55
g11
sS'bdm_loop1.thisIndex'
p126
g59
(g98
S'\x06\x00\x00\x00'
tRp127
sS'bdm_loop1.thisRepN'
p128
I0
sS'bdm_loop1.thisTrialN'
p129
I4
sg65
g66
sg67
g68
sg78
V7-olives.png
p130
sg21
F1.2
sg69
Vn
sa(dp131
g63
g64
sg20
F3.8340000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p132
I5
sg19
F0.11999999999999895
sg55
g11
sS'bdm_loop1.thisIndex'
p133
g59
(g98
S'\x0c\x00\x00\x00'
tRp134
sS'bdm_loop1.thisRepN'
p135
I0
sS'bdm_loop1.thisTrialN'
p136
I5
sg65
g66
sg67
g68
sg78
V18-mms.png
p137
sg21
F1.3999999999999999
sg69
Vn
sa(dp138
g63
g64
sg20
F4.9340000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p139
I6
sg19
F0.099999999999999173
sg55
g11
sS'bdm_loop1.thisIndex'
p140
g59
(g98
S'\r\x00\x00\x00'
tRp141
sS'bdm_loop1.thisRepN'
p142
I0
sS'bdm_loop1.thisTrialN'
p143
I6
sg65
g66
sg67
g68
sg78
V19-caramello_redo.png
p144
sg21
F1.2
sg69
Vn
sa(dp145
g63
g64
sg20
F3.7669999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p146
I7
sg19
F0.099999999999999173
sg55
g11
sS'bdm_loop1.thisIndex'
p147
g59
(g98
S'\x07\x00\x00\x00'
tRp148
sS'bdm_loop1.thisRepN'
p149
I0
sS'bdm_loop1.thisTrialN'
p150
I7
sg65
g66
sg67
g68
sg78
V8-liquorice_catherine_wheels.png
p151
sg21
F1.3
sg69
Vn
sa(dp152
g63
g64
sg20
F4.7009999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p153
I8
sg19
F0.29999999999999916
sg55
g11
sS'bdm_loop1.thisIndex'
p154
g59
(g98
S'\x04\x00\x00\x00'
tRp155
sS'bdm_loop1.thisRepN'
p156
I0
sS'bdm_loop1.thisTrialN'
p157
I8
sg65
g66
sg67
g68
sg78
V5-pineapple.png
p158
sg21
F1.3
sg69
Vn
sa(dp159
g63
g64
sg20
F3.5169999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p160
I9
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p161
g59
(g98
S'\x16\x00\x00\x00'
tRp162
sS'bdm_loop1.thisRepN'
p163
I0
sS'bdm_loop1.thisTrialN'
p164
I9
sg65
g66
sg67
g68
sg78
V30-spaghetti_hoops.png
p165
sg21
F1.8999999999999999
sg69
Vn
sa(dp166
g63
g64
sg20
F2.117
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p167
I10
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p168
g59
(g98
S'\t\x00\x00\x00'
tRp169
sS'bdm_loop1.thisRepN'
p170
I0
sS'bdm_loop1.thisTrialN'
p171
I10
sg65
g66
sg67
g68
sg78
V13-mccoys_steak_crisps.png
p172
sg21
F1.3
sg69
Vn
sa(dp173
g63
g64
sg20
F2.4169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p174
I11
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p175
g59
(g98
S'\x1d\x00\x00\x00'
tRp176
sS'bdm_loop1.thisRepN'
p177
I0
sS'bdm_loop1.thisTrialN'
p178
I11
sg65
g66
sg67
g68
sg78
V40-sardines.png
p179
sg21
F1.6000000000000001
sg69
Vn
sa(dp180
g63
g64
sg20
F5.617
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p181
I12
sg19
F0.5999999999999992
sg55
g11
sS'bdm_loop1.thisIndex'
p182
g59
(g98
S'#\x00\x00\x00'
tRp183
sS'bdm_loop1.thisRepN'
p184
I0
sS'bdm_loop1.thisTrialN'
p185
I12
sg65
g66
sg67
g68
sg78
V46-pistachios.png
p186
sg21
F1.5
sg69
Vn
sa(dp187
g63
g64
sg20
F6.0170000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p188
I13
sg19
F0.51999999999999957
sg55
g11
sS'bdm_loop1.thisIndex'
p189
g59
(g98
S'\x0b\x00\x00\x00'
tRp190
sS'bdm_loop1.thisRepN'
p191
I0
sS'bdm_loop1.thisTrialN'
p192
I13
sg65
g66
sg67
g68
sg78
V17-jacobs_mini_cheddars_redo.png
p193
sg21
F1.1000000000000001
sg69
Vn
sa(dp194
g63
g64
sg20
F7.0839999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p195
I14
sg19
F0.47999999999999887
sg55
g11
sS'bdm_loop1.thisIndex'
p196
g59
(g98
S'\x12\x00\x00\x00'
tRp197
sS'bdm_loop1.thisRepN'
p198
I0
sS'bdm_loop1.thisTrialN'
p199
I14
sg65
g66
sg67
g68
sg78
V25-kitkat.png
p200
sg21
F1.7
sg69
Vn
sa(dp201
g63
g64
sg20
F2.5510000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p202
I15
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p203
g59
(g98
S'\n\x00\x00\x00'
tRp204
sS'bdm_loop1.thisRepN'
p205
I0
sS'bdm_loop1.thisTrialN'
p206
I15
sg65
g66
sg67
g68
sg78
V16-skips_prawn.png
p207
sg21
F1.8999999999999999
sg69
Vn
sa(dp208
g63
g64
sg20
F4.4340000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p209
I16
sg19
F0.93999999999999928
sg55
g11
sS'bdm_loop1.thisIndex'
p210
g59
(g98
S'\x17\x00\x00\x00'
tRp211
sS'bdm_loop1.thisRepN'
p212
I0
sS'bdm_loop1.thisTrialN'
p213
I16
sg65
g66
sg67
g68
sg78
V31-hobnobs.png
p214
sg21
F1.7
sg69
Vn
sa(dp215
g63
g64
sg20
F5.3840000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p216
I17
sg19
F0.13999999999999918
sg55
g11
sS'bdm_loop1.thisIndex'
p217
g59
(g98
S'\x10\x00\x00\x00'
tRp218
sS'bdm_loop1.thisRepN'
p219
I0
sS'bdm_loop1.thisTrialN'
p220
I17
sg65
g66
sg67
g68
sg78
V22-daim.png
p221
sg21
F1.3
sg69
Vn
sa(dp222
g63
g64
sg20
F2.7679999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p223
I18
sg19
F0.15999999999999939
sg55
g11
sS'bdm_loop1.thisIndex'
p224
g59
(g98
S'\x11\x00\x00\x00'
tRp225
sS'bdm_loop1.thisRepN'
p226
I0
sS'bdm_loop1.thisTrialN'
p227
I18
sg65
g66
sg67
g68
sg78
V23-crunchie_redo.png
p228
sg21
F1.1000000000000001
sg69
Vn
sa(dp229
g63
g64
sg20
F10.500999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p230
I19
sg19
F0.13999999999999874
sg55
g11
sS'bdm_loop1.thisIndex'
p231
g59
(g98
S'\x15\x00\x00\x00'
tRp232
sS'bdm_loop1.thisRepN'
p233
I0
sS'bdm_loop1.thisTrialN'
p234
I19
sg65
g66
sg67
g68
sg78
V29-beans.png
p235
sg21
F1.7
sg69
Vn
sa(dp236
g63
g64
sg20
F6.7839999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p237
I20
sg19
F0.41999999999999904
sg55
g11
sS'bdm_loop1.thisIndex'
p238
g59
(g98
S'\x03\x00\x00\x00'
tRp239
sS'bdm_loop1.thisRepN'
p240
I0
sS'bdm_loop1.thisTrialN'
p241
I20
sg65
g66
sg67
g68
sg78
V4-corn.png
p242
sg21
F1.5
sg69
Vn
sa(dp243
g63
g64
sg20
F4.4169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p244
I21
sg19
F0.15999999999999873
sg55
g11
sS'bdm_loop1.thisIndex'
p245
g59
(g98
S'\x18\x00\x00\x00'
tRp246
sS'bdm_loop1.thisRepN'
p247
I0
sS'bdm_loop1.thisTrialN'
p248
I21
sg65
g66
sg67
g68
sg78
V33-ambrosia_rice.png
p249
sg21
F1.8
sg69
Vn
sa(dp250
g63
g64
sg20
F4.6340000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p251
I22
sg19
F0.69999999999999929
sg55
g11
sS'bdm_loop1.thisIndex'
p252
g59
(g98
S'\x00\x00\x00\x00'
tRp253
sS'bdm_loop1.thisRepN'
p254
I0
sS'bdm_loop1.thisTrialN'
p255
I22
sg65
g66
sg67
g68
sg78
V1-treacle_cookies.png
p256
sg21
F1.6000000000000001
sg69
Vn
sa(dp257
g63
g64
sg20
F3.3170000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p258
I23
sg19
F0.47999999999999865
sg55
g11
sS'bdm_loop1.thisIndex'
p259
g59
(g98
S'%\x00\x00\x00'
tRp260
sS'bdm_loop1.thisRepN'
p261
I0
sS'bdm_loop1.thisTrialN'
p262
I23
sg65
g66
sg67
g68
sg78
V49-yorkie.png
p263
sg21
F2
sg69
Vn
sa(dp264
g63
g64
sg20
F4.5670000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p265
I24
sg19
F0.23999999999999869
sg55
g11
sS'bdm_loop1.thisIndex'
p266
g59
(g98
S'$\x00\x00\x00'
tRp267
sS'bdm_loop1.thisRepN'
p268
I0
sS'bdm_loop1.thisTrialN'
p269
I24
sg65
g66
sg67
g68
sg78
V48-twix.png
p270
sg21
F1.8
sg69
Vn
sa(dp271
g63
g64
sg20
F5.7169999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p272
I25
sg19
F0.039999999999999161
sg55
g11
sS'bdm_loop1.thisIndex'
p273
g59
(g98
S'&\x00\x00\x00'
tRp274
sS'bdm_loop1.thisRepN'
p275
I0
sS'bdm_loop1.thisTrialN'
p276
I25
sg65
g66
sg67
g68
sg78
V50-polo.png
p277
sg21
F1.2
sg69
Vn
sa(dp278
g63
g64
sg20
F2.4169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p279
I26
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p280
g59
(g98
S'\x02\x00\x00\x00'
tRp281
sS'bdm_loop1.thisRepN'
p282
I0
sS'bdm_loop1.thisTrialN'
p283
I26
sg65
g66
sg67
g68
sg78
V3-ellas_strawberries_apples.png
p284
sg21
F1.7
sg69
Vn
sa(dp285
g63
g64
sg20
F2.117
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p286
I27
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p287
g59
(g98
S' \x00\x00\x00'
tRp288
sS'bdm_loop1.thisRepN'
p289
I0
sS'bdm_loop1.thisTrialN'
p290
I27
sg65
g66
sg67
g68
sg78
V43-mrporky_pork_crackles_redo.png
p291
sg21
F1.2
sg69
Vn
sa(dp292
g63
g64
sg20
F2.3170000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p293
I28
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p294
g59
(g98
S'\x05\x00\x00\x00'
tRp295
sS'bdm_loop1.thisRepN'
p296
I0
sS'bdm_loop1.thisTrialN'
p297
I28
sg65
g66
sg67
g68
sg78
V6-sour_patch_kids.png
p298
sg21
F1.1000000000000001
sg69
Vn
sa(dp299
g63
g64
sg20
F4.8170000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p300
I29
sg19
F0.15999999999999895
sg55
g11
sS'bdm_loop1.thisIndex'
p301
g59
(g98
S'!\x00\x00\x00'
tRp302
sS'bdm_loop1.thisRepN'
p303
I0
sS'bdm_loop1.thisTrialN'
p304
I29
sg65
g66
sg67
g68
sg78
V44-crunch.png
p305
sg21
F1.6000000000000001
sg69
Vn
sa(dp306
g63
g64
sg20
F3.2010000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p307
I30
sg19
F0.039999999999998939
sg55
g11
sS'bdm_loop1.thisIndex'
p308
g59
(g98
S'\x1a\x00\x00\x00'
tRp309
sS'bdm_loop1.thisRepN'
p310
I0
sS'bdm_loop1.thisTrialN'
p311
I30
sg65
g66
sg67
g68
sg78
V35-raisins.png
p312
sg21
F1.5
sg69
Vn
sa(dp313
g63
g64
sg20
F2.3340000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p314
I31
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p315
g59
(g98
S'"\x00\x00\x00'
tRp316
sS'bdm_loop1.thisRepN'
p317
I0
sS'bdm_loop1.thisTrialN'
p318
I31
sg65
g66
sg67
g68
sg78
V45-chewy_nougat_redo.png
p319
sg21
F1.8
sg69
Vn
sa(dp320
g63
g64
sg20
F2.1339999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p321
I32
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p322
g59
(g98
S'\x19\x00\x00\x00'
tRp323
sS'bdm_loop1.thisRepN'
p324
I0
sS'bdm_loop1.thisTrialN'
p325
I32
sg65
g66
sg67
g68
sg78
V34-hula_hoops_bbq_beef_redo.png
p326
sg21
F1.2
sg69
Vn
sa(dp327
g63
g64
sg20
F2.9670000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p328
I33
sg19
F0.43999999999999884
sg55
g11
sS'bdm_loop1.thisIndex'
p329
g59
(g98
S'\x1c\x00\x00\x00'
tRp330
sS'bdm_loop1.thisRepN'
p331
I0
sS'bdm_loop1.thisTrialN'
p332
I33
sg65
g66
sg67
g68
sg78
V38-maltesers.png
p333
sg21
F1.8
sg69
Vn
sa(dp334
g63
g64
sg20
F2.0339999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p335
I34
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p336
g59
(g98
S'\x14\x00\x00\x00'
tRp337
sS'bdm_loop1.thisRepN'
p338
I0
sS'bdm_loop1.thisTrialN'
p339
I34
sg65
g66
sg67
g68
sg78
V27-hartleys_raspberries_jelly.png
p340
sg21
F1.3
sg69
Vn
sa(dp341
g63
g64
sg20
F6.4169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p342
I35
sg19
F0.55999999999999917
sg55
g11
sS'bdm_loop1.thisIndex'
p343
g59
(g98
S'\x01\x00\x00\x00'
tRp344
sS'bdm_loop1.thisRepN'
p345
I0
sS'bdm_loop1.thisTrialN'
p346
I35
sg65
g66
sg67
g68
sg78
V2-steamed_puddings.png
p347
sg21
F1.3999999999999999
sg69
Vn
sa(dp348
g63
g64
sg20
F4.484
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p349
I36
sg19
F0.15999999999999873
sg55
g11
sS'bdm_loop1.thisIndex'
p350
g59
(g98
S"'\x00\x00\x00"
tRp351
sS'bdm_loop1.thisRepN'
p352
I0
sS'bdm_loop1.thisTrialN'
p353
I36
sg65
g66
sg67
g68
sg78
V51-mars.png
p354
sg21
F1.7
sg69
Vn
sa(dp355
g63
g64
sg20
F4.7839999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p356
I37
sg19
F0.3999999999999988
sg55
g11
sS'bdm_loop1.thisIndex'
p357
g59
(g98
S'\x1e\x00\x00\x00'
tRp358
sS'bdm_loop1.thisRepN'
p359
I0
sS'bdm_loop1.thisTrialN'
p360
I37
sg65
g66
sg67
g68
sg78
V41-peanuts_redo.png
p361
sg21
F1.8
sg69
Vn
sa(dp362
g63
g64
sg20
F3.3010000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p363
I38
sg19
F0.039999999999998939
sg55
g11
sS'bdm_loop1.thisIndex'
p364
g59
(g98
S'\x0e\x00\x00\x00'
tRp365
sS'bdm_loop1.thisRepN'
p366
I0
sS'bdm_loop1.thisTrialN'
p367
I38
sg65
g66
sg67
g68
sg78
V20-fruit_pastilles.png
p368
sg21
F1.5
sg69
Vn
sa(dp369
g63
g64
sg20
F3.867
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p370
I39
sg19
F0.79999999999999938
sg55
g11
sS'bdm_loop1.thisIndex'
p371
g59
(g98
S'\x1b\x00\x00\x00'
tRp372
sS'bdm_loop1.thisRepN'
p373
I0
sS'bdm_loop1.thisTrialN'
p374
I39
sg65
g66
sg67
g68
sg78
V36-fig_rolls.png
p375
sg21
F1.6000000000000001
sg69
Vn
sa(dp376
g63
g64
sg55
g11
sg56
Vr
sg23
F1.8835612025213777
sg57
Vn
sg58
g62
sg22
S'space'
p377
sg65
g66
sg67
g68
sg69
Vn
sa(dp378
g63
g64
sS'binary.thisRepN'
p379
I0
sg67
g68
sg79
S'17-jacobs_mini_cheddars_redo.png'
p380
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'8-liquorice_catherine_wheels.png'
p381
sg65
g66
sg55
g11
sS'binary.thisN'
p382
I0
sg56
Vr
sS'binary.thisIndex'
p383
g59
(g98
S'\x00\x00\x00\x00'
tRp384
sg24
S'left'
p385
sS'binary.thisTrialN'
p386
I0
sg25
F2.2000183603013284
sg27
F3.351
sg69
Vn
sa(dp387
g63
g64
sS'binary.thisRepN'
p388
I0
sg67
g68
sg79
S'22-daim.png'
p389
sg26
F1.9999999999999991
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'7-olives.png'
p390
sg65
g66
sg55
g11
sS'binary.thisN'
p391
I1
sg56
Vr
sS'binary.thisIndex'
p392
g59
(g98
S'\x01\x00\x00\x00'
tRp393
sg24
S'right'
p394
sS'binary.thisTrialN'
p395
I1
sg25
F2.4668428381155536
sg27
F1.8839999999999999
sg69
Vn
sa(dp396
g63
g64
sS'binary.thisRepN'
p397
I0
sg67
g68
sg79
S'43-mrporky_pork_crackles_redo.png'
p398
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'18-mms.png'
p399
sg65
g66
sg55
g11
sS'binary.thisN'
p400
I2
sg56
Vr
sS'binary.thisIndex'
p401
g59
(g98
S'\x02\x00\x00\x00'
tRp402
sg24
S'right'
p403
sS'binary.thisTrialN'
p404
I2
sg25
F1.3668710057791031
sg27
F1.351
sg69
Vn
sa(dp405
g63
g64
sS'binary.thisRepN'
p406
I0
sg67
g68
sg79
S'27-hartleys_raspberries_jelly.png'
p407
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'51-mars.png'
p408
sg65
g66
sg55
g11
sS'binary.thisN'
p409
I3
sg56
Vr
sS'binary.thisIndex'
p410
g59
(g98
S'\x03\x00\x00\x00'
tRp411
sg24
S'right'
p412
sS'binary.thisTrialN'
p413
I3
sg25
F1.3168132449609402
sg27
F1.917
sg69
Vn
sa(dp414
g63
g64
sS'binary.thisRepN'
p415
I0
sg67
g68
sg79
S'44-crunch.png'
p416
sg26
F4.9000000000000021
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'26-walkers_smoky_bacon.png'
p417
sg65
g66
sg55
g11
sS'binary.thisN'
p418
I4
sg56
Vr
sS'binary.thisIndex'
p419
g59
(g98
S'\x04\x00\x00\x00'
tRp420
sg24
S'left'
p421
sS'binary.thisTrialN'
p422
I4
sg25
F1.233534460345254
sg27
F1.917
sg69
Vn
sa(dp423
g63
g64
sS'binary.thisRepN'
p424
I0
sg67
g68
sg79
S'34-hula_hoops_bbq_beef_redo.png'
p425
sg26
F5.9999999999999973
sg28
F4
sg58
g62
sg57
Vn
sg80
S'36-fig_rolls.png'
p426
sg65
g66
sg55
g11
sS'binary.thisN'
p427
I5
sg56
Vr
sS'binary.thisIndex'
p428
g59
(g98
S'\x05\x00\x00\x00'
tRp429
sg24
S'right'
p430
sS'binary.thisTrialN'
p431
I5
sg25
F1.6836124060864677
sg27
F1.101
sg69
Vn
sa(dp432
g63
g64
sS'binary.thisRepN'
p433
I0
sg67
g68
sg79
S'42-mrkipling_lemon_slices.png'
p434
sg26
F5.9999999999999973
sg28
F4
sg58
g62
sg57
Vn
sg80
S'16-skips_prawn.png'
p435
sg65
g66
sg55
g11
sS'binary.thisN'
p436
I6
sg56
Vr
sS'binary.thisIndex'
p437
g59
(g98
S'\x06\x00\x00\x00'
tRp438
sg24
S'left'
p439
sS'binary.thisTrialN'
p440
I6
sg25
F2.0333838146543712
sg27
F1.0169999999999999
sg69
Vn
sa(dp441
g63
g64
sS'binary.thisRepN'
p442
I0
sg67
g68
sg79
S'25-kitkat.png'
p443
sg26
F5.1000000000000005
sg28
F4
sg58
g62
sg57
Vn
sg80
S'31-hobnobs.png'
p444
sg65
g66
sg55
g11
sS'binary.thisN'
p445
I7
sg56
Vr
sS'binary.thisIndex'
p446
g59
(g98
S'\x07\x00\x00\x00'
tRp447
sg24
S'right'
p448
sS'binary.thisTrialN'
p449
I7
sg25
F1.5667727610707516
sg27
F1.284
sg69
Vn
sa(dp450
g63
g64
sS'binary.thisRepN'
p451
I0
sg67
g68
sg79
S'2-steamed_puddings.png'
p452
sg26
F5.9999999999999982
sg28
F3
sg58
g62
sg57
Vn
sg80
S'20-fruit_pastilles.png'
p453
sg65
g66
sg55
g11
sS'binary.thisN'
p454
I8
sg56
Vr
sS'binary.thisIndex'
p455
g59
(g98
S'\x08\x00\x00\x00'
tRp456
sg24
S'left'
p457
sS'binary.thisTrialN'
p458
I8
sg25
F1.2834060522873187
sg27
F1.2010000000000001
sg69
Vn
sa(dp459
g63
g64
sS'binary.thisRepN'
p460
I0
sg67
g68
sg79
S'31-hobnobs.png'
p461
sg26
F4.6000000000000005
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'25-kitkat.png'
p462
sg65
g66
sg55
g11
sS'binary.thisN'
p463
I9
sg56
Vr
sS'binary.thisIndex'
p464
g59
(g98
S'\t\x00\x00\x00'
tRp465
sg24
S'left'
p466
sS'binary.thisTrialN'
p467
I9
sg25
F3.1500538264663192
sg27
F1.4510000000000001
sg69
Vn
sa(dp468
g63
g64
sS'binary.thisRepN'
p469
I0
sg67
g68
sg79
S'19-caramello_redo.png'
p470
sg26
F2.9999999999999996
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'30-spaghetti_hoops.png'
p471
sg65
g66
sg55
g11
sS'binary.thisN'
p472
I10
sg56
Vr
sS'binary.thisIndex'
p473
g59
(g98
S'\n\x00\x00\x00'
tRp474
sg24
S'left'
p475
sS'binary.thisTrialN'
p476
I10
sg25
F2.9166924205055693
sg27
F1.284
sg69
Vn
sa(dp477
g63
g64
sS'binary.thisRepN'
p478
I0
sg67
g68
sg79
S'36-fig_rolls.png'
p479
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p480
sg65
g66
sg55
g11
sS'binary.thisN'
p481
I11
sg56
Vr
sS'binary.thisIndex'
p482
g59
(g98
S'\x0b\x00\x00\x00'
tRp483
sg24
S'left'
p484
sS'binary.thisTrialN'
p485
I11
sg25
F1.1000530852143129
sg27
F1.2509999999999999
sg69
Vn
sa(dp486
g63
g64
sS'binary.thisRepN'
p487
I0
sg67
g68
sg79
S'6-sour_patch_kids.png'
p488
sg26
F5.5999999999999996
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'38-maltesers.png'
p489
sg65
g66
sg55
g11
sS'binary.thisN'
p490
I12
sg56
Vr
sS'binary.thisIndex'
p491
g59
(g98
S'\x0c\x00\x00\x00'
tRp492
sg24
S'right'
p493
sS'binary.thisTrialN'
p494
I12
sg25
F1.0665104710751621
sg27
F2.601
sg69
Vn
sa(dp495
g63
g64
sS'binary.thisRepN'
p496
I0
sg67
g68
sg79
S'4-corn.png'
p497
sg26
F1
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'10-bounty_redo.png'
p498
sg65
g66
sg55
g11
sS'binary.thisN'
p499
I13
sg56
Vr
sS'binary.thisIndex'
p500
g59
(g98
S'\r\x00\x00\x00'
tRp501
sg24
S'right'
p502
sS'binary.thisTrialN'
p503
I13
sg25
F2.1834735634474782
sg27
F2.0840000000000001
sg69
Vn
sa(dp504
g63
g64
sS'binary.thisRepN'
p505
I0
sg67
g68
sg79
S'20-fruit_pastilles.png'
p506
sg26
F5.5999999999999988
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'2-steamed_puddings.png'
p507
sg65
g66
sg55
g11
sS'binary.thisN'
p508
I14
sg56
Vr
sS'binary.thisIndex'
p509
g59
(g98
S'\x0e\x00\x00\x00'
tRp510
sg24
S'right'
p511
sS'binary.thisTrialN'
p512
I14
sg25
F1.0335106831844314
sg27
F1.3169999999999999
sg69
Vn
sa(dp513
g63
g64
sS'binary.thisRepN'
p514
I0
sg67
g68
sg79
S'41-peanuts_redo.png'
p515
sg26
F5.6999999999999993
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'45-chewy_nougat_redo.png'
p516
sg65
g66
sg55
g11
sS'binary.thisN'
p517
I15
sg56
Vr
sS'binary.thisIndex'
p518
g59
(g98
S'\x0f\x00\x00\x00'
tRp519
sg24
S'left'
p520
sS'binary.thisTrialN'
p521
I15
sg25
F1.0833871217873821
sg27
F2.484
sg69
Vn
sa(dp522
g63
g64
sS'binary.thisRepN'
p523
I0
sg67
g68
sg79
S'18-mms.png'
p524
sg26
F5.9999999999999982
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'43-mrporky_pork_crackles_redo.png'
p525
sg65
g66
sg55
g11
sS'binary.thisN'
p526
I16
sg56
Vr
sS'binary.thisIndex'
p527
g59
(g98
S'\x10\x00\x00\x00'
tRp528
sg24
S'left'
p529
sS'binary.thisTrialN'
p530
I16
sg25
F1.3167026270057249
sg27
F1.5840000000000001
sg69
Vn
sa(dp531
g63
g64
sS'binary.thisRepN'
p532
I0
sg67
g68
sg79
S'46-pistachios.png'
p533
sg26
F5.6999999999999984
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'29-beans.png'
p534
sg65
g66
sg55
g11
sS'binary.thisN'
p535
I17
sg56
Vr
sS'binary.thisIndex'
p536
g59
(g98
S'\x11\x00\x00\x00'
tRp537
sg24
S'left'
p538
sS'binary.thisTrialN'
p539
I17
sg25
F1.1837623675419309
sg27
F1.2669999999999999
sg69
Vn
sa(dp540
g63
g64
sS'binary.thisRepN'
p541
I0
sg67
g68
sg79
S'48-twix.png'
p542
sg26
F4.7000000000000011
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'50-polo.png'
p543
sg65
g66
sg55
g11
sS'binary.thisN'
p544
I18
sg56
Vr
sS'binary.thisIndex'
p545
g59
(g98
S'\x12\x00\x00\x00'
tRp546
sg24
S'left'
p547
sS'binary.thisTrialN'
p548
I18
sg25
F1.2000514316459885
sg27
F1.3169999999999999
sg69
Vn
sa(dp549
g63
g64
sS'binary.thisRepN'
p550
I0
sg67
g68
sg79
S'40-sardines.png'
p551
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'5-pineapple.png'
p552
sg65
g66
sg55
g11
sS'binary.thisN'
p553
I19
sg56
Vr
sS'binary.thisIndex'
p554
g59
(g98
S'\x13\x00\x00\x00'
tRp555
sg24
S'right'
p556
sS'binary.thisTrialN'
p557
I19
sg25
F1.1833683623517572
sg27
F1.117
sg69
Vn
sa(dp558
g63
g64
sS'binary.thisRepN'
p559
I0
sg67
g68
sg79
S'38-maltesers.png'
p560
sg26
F4.6000000000000014
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'6-sour_patch_kids.png'
p561
sg65
g66
sg55
g11
sS'binary.thisN'
p562
I20
sg56
Vr
sS'binary.thisIndex'
p563
g59
(g98
S'\x14\x00\x00\x00'
tRp564
sg24
S'left'
p565
sS'binary.thisTrialN'
p566
I20
sg25
F1.066513607147499
sg27
F1.1839999999999999
sg69
Vn
sa(dp567
g63
g64
sS'binary.thisRepN'
p568
I0
sg67
g68
sg79
S'7-olives.png'
p569
sg26
F3.9000000000000008
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'22-daim.png'
p570
sg65
g66
sg55
g11
sS'binary.thisN'
p571
I21
sg56
Vr
sS'binary.thisIndex'
p572
g59
(g98
S'\x15\x00\x00\x00'
tRp573
sg24
S'left'
p574
sS'binary.thisTrialN'
p575
I21
sg25
F1.4333295890464797
sg27
F2.3170000000000002
sg69
Vn
sa(dp576
g63
g64
sS'binary.thisRepN'
p577
I0
sg67
g68
sg79
S'5-pineapple.png'
p578
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'40-sardines.png'
p579
sg65
g66
sg55
g11
sS'binary.thisN'
p580
I22
sg56
Vr
sS'binary.thisIndex'
p581
g59
(g98
S'\x16\x00\x00\x00'
tRp582
sg24
S'left'
p583
sS'binary.thisTrialN'
p584
I22
sg25
F1.1000493789433676
sg27
F0.90100000000000002
sg69
Vn
sa(dp585
g63
g64
sS'binary.thisRepN'
p586
I0
sg67
g68
sg79
S'33-ambrosia_rice.png'
p587
sg26
F2.2999999999999989
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'23-crunchie_redo.png'
p588
sg65
g66
sg55
g11
sS'binary.thisN'
p589
I23
sg56
Vr
sS'binary.thisIndex'
p590
g59
(g98
S'\x17\x00\x00\x00'
tRp591
sg24
S'left'
p592
sS'binary.thisTrialN'
p593
I23
sg25
F2.1504096285498235
sg27
F3.1669999999999998
sg69
Vn
sa(dp594
g63
g64
sS'binary.thisRepN'
p595
I0
sg67
g68
sg79
S'49-yorkie.png'
p596
sg26
F4.8000000000000007
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'35-raisins.png'
p597
sg65
g66
sg55
g11
sS'binary.thisN'
p598
I24
sg56
Vr
sS'binary.thisIndex'
p599
g59
(g98
S'\x18\x00\x00\x00'
tRp600
sg24
S'left'
p601
sS'binary.thisTrialN'
p602
I24
sg25
F1.8833855822631449
sg27
F3.0840000000000001
sg69
Vn
sa(dp603
g63
g64
sS'binary.thisRepN'
p604
I0
sg67
g68
sg79
S'26-walkers_smoky_bacon.png'
p605
sg26
F4.9000000000000012
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'44-crunch.png'
p606
sg65
g66
sg55
g11
sS'binary.thisN'
p607
I25
sg56
Vr
sS'binary.thisIndex'
p608
g59
(g98
S'\x19\x00\x00\x00'
tRp609
sg24
S'right'
p610
sS'binary.thisTrialN'
p611
I25
sg25
F1.5502017352191615
sg27
F1.117
sg69
Vn
sa(dp612
g63
g64
sS'binary.thisRepN'
p613
I0
sg67
g68
sg79
S'3-ellas_strawberries_apples.png'
p614
sg26
F4.9000000000000004
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'13-mccoys_steak_crisps.png'
p615
sg65
g66
sg55
g11
sS'binary.thisN'
p616
I26
sg56
Vr
sS'binary.thisIndex'
p617
g59
(g98
S'\x1a\x00\x00\x00'
tRp618
sg24
S'left'
p619
sS'binary.thisTrialN'
p620
I26
sg25
F1.9334017187975405
sg27
F4.0510000000000002
sg69
Vn
sa(dp621
g63
g64
sS'binary.thisRepN'
p622
I0
sg67
g68
sg79
S'1-treacle_cookies.png'
p623
sg26
F5.2000000000000002
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'21-nakd_banana_crunch.png'
p624
sg65
g66
sg55
g11
sS'binary.thisN'
p625
I27
sg56
Vr
sS'binary.thisIndex'
p626
g59
(g98
S'\x1b\x00\x00\x00'
tRp627
sg24
S'left'
p628
sS'binary.thisTrialN'
p629
I27
sg25
F1.4500887794602022
sg27
F2.117
sg69
Vn
sa(dp630
g63
g64
sS'binary.thisRepN'
p631
I0
sg67
g68
sg79
S'16-skips_prawn.png'
p632
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'42-mrkipling_lemon_slices.png'
p633
sg65
g66
sg55
g11
sS'binary.thisN'
p634
I28
sg56
Vr
sS'binary.thisIndex'
p635
g59
(g98
S'\x1c\x00\x00\x00'
tRp636
sg24
S'right'
p637
sS'binary.thisTrialN'
p638
I28
sg25
F1.0332509590698464
sg27
F1.4670000000000001
sg69
Vn
sa(dp639
g63
g64
sS'binary.thisRepN'
p640
I0
sg67
g68
sg79
S'10-bounty_redo.png'
p641
sg26
F2.6999999999999997
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'4-corn.png'
p642
sg65
g66
sg55
g11
sS'binary.thisN'
p643
I29
sg56
Vr
sS'binary.thisIndex'
p644
g59
(g98
S'\x1d\x00\x00\x00'
tRp645
sg24
S'left'
p646
sS'binary.thisTrialN'
p647
I29
sg25
F1.5500386592648283
sg27
F1.901
sg69
Vn
sa(dp648
g63
g64
sS'binary.thisRepN'
p649
I0
sg67
g68
sg79
S'50-polo.png'
p650
sg26
F4.3000000000000007
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'48-twix.png'
p651
sg65
g66
sg55
g11
sS'binary.thisN'
p652
I30
sg56
Vr
sS'binary.thisIndex'
p653
g59
(g98
S'\x1e\x00\x00\x00'
tRp654
sg24
S'right'
p655
sS'binary.thisTrialN'
p656
I30
sg25
F0.93341027173300972
sg27
F2.234
sg69
Vn
sa(dp657
g63
g64
sS'binary.thisRepN'
p658
I0
sg67
g68
sg79
S'29-beans.png'
p659
sg26
F5.5999999999999988
sg28
F4
sg58
g62
sg57
Vn
sg80
S'46-pistachios.png'
p660
sg65
g66
sg55
g11
sS'binary.thisN'
p661
I31
sg56
Vr
sS'binary.thisIndex'
p662
g59
(g98
S'\x1f\x00\x00\x00'
tRp663
sg24
S'right'
p664
sS'binary.thisTrialN'
p665
I31
sg25
F1.1000596424637479
sg27
F3.484
sg69
Vn
sa(dp666
g63
g64
sS'binary.thisRepN'
p667
I0
sg67
g68
sg79
S'45-chewy_nougat_redo.png'
p668
sg26
F5.3999999999999995
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'41-peanuts_redo.png'
p669
sg65
g66
sg55
g11
sS'binary.thisN'
p670
I32
sg56
Vr
sS'binary.thisIndex'
p671
g59
(g98
S' \x00\x00\x00'
tRp672
sg24
S'right'
p673
sS'binary.thisTrialN'
p674
I32
sg25
F0.88338444186956622
sg27
F1.417
sg69
Vn
sa(dp675
g63
g64
sS'binary.thisRepN'
p676
I0
sg67
g68
sg79
S'51-mars.png'
p677
sg26
F5.9999999999999973
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'27-hartleys_raspberries_jelly.png'
p678
sg65
g66
sg55
g11
sS'binary.thisN'
p679
I33
sg56
Vr
sS'binary.thisIndex'
p680
g59
(g98
S'!\x00\x00\x00'
tRp681
sg24
S'left'
p682
sS'binary.thisTrialN'
p683
I33
sg25
F1.0332689202296024
sg27
F0.68400000000000005
sg69
Vn
sa(dp684
g63
g64
sS'binary.thisRepN'
p685
I0
sg67
g68
sg79
S'30-spaghetti_hoops.png'
p686
sg26
F4.4000000000000004
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'19-caramello_redo.png'
p687
sg65
g66
sg55
g11
sS'binary.thisN'
p688
I34
sg56
Vr
sS'binary.thisIndex'
p689
g59
(g98
S'"\x00\x00\x00'
tRp690
sg24
S'right'
p691
sS'binary.thisTrialN'
p692
I34
sg25
F1.2000023948203307
sg27
F1.268
sg69
Vn
sa(dp693
g63
g64
sS'binary.thisRepN'
p694
I0
sg67
g68
sg79
S'21-nakd_banana_crunch.png'
p695
sg26
F5.6999999999999993
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'1-treacle_cookies.png'
p696
sg65
g66
sg55
g11
sS'binary.thisN'
p697
I35
sg56
Vr
sS'binary.thisIndex'
p698
g59
(g98
S'#\x00\x00\x00'
tRp699
sg24
S'right'
p700
sS'binary.thisTrialN'
p701
I35
sg25
F1.5667168818945356
sg27
F4.4509999999999996
sg69
Vn
sa(dp702
g63
g64
sS'binary.thisRepN'
p703
I0
sg67
g68
sg79
S'35-raisins.png'
p704
sg26
F5.2000000000000002
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'49-yorkie.png'
p705
sg65
g66
sg55
g11
sS'binary.thisN'
p706
I36
sg56
Vr
sS'binary.thisIndex'
p707
g59
(g98
S'$\x00\x00\x00'
tRp708
sg24
S'right'
p709
sS'binary.thisTrialN'
p710
I36
sg25
F1.5834598217334133
sg27
F3.2509999999999999
sg69
Vn
sa(dp711
g63
g64
sS'binary.thisRepN'
p712
I0
sg67
g68
sg79
S'23-crunchie_redo.png'
p713
sg26
F3.3000000000000003
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'33-ambrosia_rice.png'
p714
sg65
g66
sg55
g11
sS'binary.thisN'
p715
I37
sg56
Vr
sS'binary.thisIndex'
p716
g59
(g98
S'%\x00\x00\x00'
tRp717
sg24
S'right'
p718
sS'binary.thisTrialN'
p719
I37
sg25
F1.6167153423666605
sg27
F1.6339999999999999
sg69
Vn
sa(dp720
g63
g64
sS'binary.thisRepN'
p721
I0
sg67
g68
sg79
S'13-mccoys_steak_crisps.png'
p722
sg26
F3.8000000000000007
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'3-ellas_strawberries_apples.png'
p723
sg65
g66
sg55
g11
sS'binary.thisN'
p724
I38
sg56
Vr
sS'binary.thisIndex'
p725
g59
(g98
S'&\x00\x00\x00'
tRp726
sg24
S'right'
p727
sS'binary.thisTrialN'
p728
I38
sg25
F2.1667465890895983
sg27
F4.3179999999999996
sg69
Vn
sa(dp729
g63
g64
sS'binary.thisRepN'
p730
I0
sg67
g68
sg79
S'8-liquorice_catherine_wheels.png'
p731
sg26
F5.8999999999999986
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'17-jacobs_mini_cheddars_redo.png'
p732
sg65
g66
sg55
g11
sS'binary.thisN'
p733
I39
sg56
Vr
sS'binary.thisIndex'
p734
g59
(g98
S"'\x00\x00\x00"
tRp735
sg24
S'right'
p736
sS'binary.thisTrialN'
p737
I39
sg25
F1.1833723537201877
sg27
F1.6339999999999999
sg69
Vn
sa(dp738
g63
g64
sg56
Vr
sg29
S'space'
p739
sg57
Vn
sg58
g62
sg30
F340.70742149546641
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp740
g63
g64
sg56
Vr
sg57
Vn
sg31
S'space'
p741
sg58
g62
sg55
g11
sg32
F1.3169021954818163
sg65
g66
sg67
g68
sg69
Vn
sa(dp742
g63
g64
sg81
S'12-topic.png'
p743
sg82
S'12-topic.png'
p744
sg56
Vr
sS'practice_loop.thisN'
p745
I0
sS'practice_loop.thisTrialN'
p746
I0
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p747
I0
sg83
S'39-mackerel.png'
p748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'39-mackerel.png'
p749
sS'practice_loop.thisIndex'
p750
g59
(g98
S'\x00\x00\x00\x00'
tRp751
sg34
cdatetime
datetime
p752
(S'\x07\xdf\t\x1c\x11\x1d\x1c\x01~\xd0'
tRp753
sa(dp754
g63
g64
sg81
S'53-cheestrings.png'
p755
sg82
S'47-picnic.png'
p756
sg56
Vr
sS'practice_loop.thisN'
p757
I1
sS'practice_loop.thisTrialN'
p758
I1
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p759
I0
sg83
S'47-picnic.png'
p760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'53-cheestrings.png'
p761
sS'practice_loop.thisIndex'
p762
g59
(g98
S'\x01\x00\x00\x00'
tRp763
sg34
g752
(S'\x07\xdf\t\x1c\x11\x1d#\x05\x9d\x80'
tRp764
sa(dp765
g63
g64
sg81
S'52-aero_mousse.png'
p766
sg82
S'14-discos_salt_vinegar.png'
p767
sg56
Vr
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p770
I0
sg83
S'14-discos_salt_vinegar.png'
p771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'52-aero_mousse.png'
p772
sS'practice_loop.thisIndex'
p773
g59
(g98
S'\x02\x00\x00\x00'
tRp774
sg34
g752
(S'\x07\xdf\t\x1c\x11\x1d*\x07Z\xd0'
tRp775
sa(dp776
g63
g64
sg81
S'32-hovis_crackers.png'
p777
sg82
S'24-food_doctor_apple_walnut_bar.png'
p778
sg56
Vr
sS'practice_loop.thisN'
p779
I3
sS'practice_loop.thisTrialN'
p780
I3
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p781
I0
sg83
S'24-food_doctor_apple_walnut_bar.png'
p782
sg33
g782
sg55
g11
sg65
g66
sg67
g68
sg84
S'32-hovis_crackers.png'
p783
sS'practice_loop.thisIndex'
p784
g59
(g98
S'\x03\x00\x00\x00'
tRp785
sg34
g752
(S'\x07\xdf\t\x1c\x11\x1d1\x08\xd9\xa0'
tRp786
sa(dp787
g63
g64
sg81
g766
sg82
S'52-aero_mousse.png'
p788
sg56
Vr
sS'practice_loop.thisN'
p789
I4
sS'practice_loop.thisTrialN'
p790
I4
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p791
I0
sg83
g771
sg33
g771
sg55
g11
sg65
g66
sg67
g68
sg84
S'14-discos_salt_vinegar.png'
p792
sS'practice_loop.thisIndex'
p793
g59
(g98
S'\x04\x00\x00\x00'
tRp794
sg34
g752
(S'\x07\xdf\t\x1c\x11\x1d9\x06\x06\xf8'
tRp795
sa(dp796
g63
g64
sg81
S'11-snickers.png'
p797
sg82
S'11-snickers.png'
p798
sg56
Vr
sS'practice_loop.thisN'
p799
I5
sS'practice_loop.thisTrialN'
p800
I5
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p801
I0
sg83
S'54-frubes_yogurt.png'
p802
sg33
g797
sg55
g11
sg65
g66
sg67
g68
sg84
S'54-frubes_yogurt.png'
p803
sS'practice_loop.thisIndex'
p804
g59
(g98
S'\x05\x00\x00\x00'
tRp805
sg34
g752
(S'\x07\xdf\t\x1c\x11\x1e\x04\x00\xa0('
tRp806
sa(dp807
g63
g64
sg81
g743
sg82
S'39-mackerel.png'
p808
sg56
Vr
sS'practice_loop.thisN'
p809
I6
sS'practice_loop.thisTrialN'
p810
I6
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p811
I0
sg83
g748
sg33
g748
sg55
g11
sg65
g66
sg67
g68
sg84
S'12-topic.png'
p812
sS'practice_loop.thisIndex'
p813
g59
(g98
S'\x06\x00\x00\x00'
tRp814
sg34
g752
(S'\x07\xdf\t\x1c\x11\x1e\x0b\x02\x98\x10'
tRp815
sa(dp816
g63
g64
sg81
g755
sg82
S'53-cheestrings.png'
p817
sg56
Vr
sS'practice_loop.thisN'
p818
I7
sS'practice_loop.thisTrialN'
p819
I7
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p820
I0
sg83
g760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'47-picnic.png'
p821
sS'practice_loop.thisIndex'
p822
g59
(g98
S'\x07\x00\x00\x00'
tRp823
sg34
g752
(S'\x07\xdf\t\x1c\x11\x1e\x11\x05\xc8x'
tRp824
sa(dp825
g63
g64
sg81
S'37-nakd_cashew_cookie.png'
p826
sg82
S'9-yu_mango_pieces.png'
p827
sg56
Vr
sS'practice_loop.thisN'
p828
I8
sS'practice_loop.thisTrialN'
p829
I8
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p830
I0
sg83
S'9-yu_mango_pieces.png'
p831
sg33
g826
sg55
g11
sg65
g66
sg67
g68
sg84
S'37-nakd_cashew_cookie.png'
p832
sS'practice_loop.thisIndex'
p833
g59
(g98
S'\x08\x00\x00\x00'
tRp834
sg34
g752
(S'\x07\xdf\t\x1c\x11\x1e\x17\t\xeb\x10'
tRp835
sa(dp836
g63
g64
sg81
S'15-walnut_whip.png'
p837
sg82
S'28-maple_pecan.png'
p838
sg56
Vr
sS'practice_loop.thisN'
p839
I9
sS'practice_loop.thisTrialN'
p840
I9
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p841
I0
sg83
S'28-maple_pecan.png'
p842
sg33
g837
sg55
g11
sg65
g66
sg67
g68
sg84
S'15-walnut_whip.png'
p843
sS'practice_loop.thisIndex'
p844
g59
(g98
S'\t\x00\x00\x00'
tRp845
sg34
g752
(S'\x07\xdf\t\x1c\x11\x1e\x1e\x0c\xd9\x10'
tRp846
sa(dp847
g63
g64
sg81
g777
sg82
S'32-hovis_crackers.png'
p848
sg56
Vr
sS'practice_loop.thisN'
p849
I10
sS'practice_loop.thisTrialN'
p850
I10
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p851
I0
sg83
g782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'24-food_doctor_apple_walnut_bar.png'
p852
sS'practice_loop.thisIndex'
p853
g59
(g98
S'\n\x00\x00\x00'
tRp854
sg34
g752
(S'\x07\xdf\t\x1c\x11\x1e&\x06tX'
tRp855
sa(dp856
g63
g64
sg81
g826
sg82
S'37-nakd_cashew_cookie.png'
p857
sg56
Vr
sS'practice_loop.thisN'
p858
I11
sS'practice_loop.thisTrialN'
p859
I11
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p860
I0
sg83
g831
sg33
g826
sg55
g11
sg65
g66
sg67
g68
sg84
S'9-yu_mango_pieces.png'
p861
sS'practice_loop.thisIndex'
p862
g59
(g98
S'\x0b\x00\x00\x00'
tRp863
sg34
g752
(S'\x07\xdf\t\x1c\x11\x1e,\x0b\x8d\x08'
tRp864
sa(dp865
g63
g64
sg81
g797
sg82
S'54-frubes_yogurt.png'
p866
sg56
Vr
sS'practice_loop.thisN'
p867
I12
sS'practice_loop.thisTrialN'
p868
I12
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p869
I0
sg83
g802
sg33
g802
sg55
g11
sg65
g66
sg67
g68
sg84
S'11-snickers.png'
p870
sS'practice_loop.thisIndex'
p871
g59
(g98
S'\x0c\x00\x00\x00'
tRp872
sg34
g752
(S'\x07\xdf\t\x1c\x11\x1e3\x06"P'
tRp873
sa(dp874
g63
g64
sg81
g837
sg82
S'15-walnut_whip.png'
p875
sg56
Vr
sS'practice_loop.thisN'
p876
I13
sS'practice_loop.thisTrialN'
p877
I13
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p878
I0
sg83
g842
sg33
g837
sg55
g11
sg65
g66
sg67
g68
sg84
S'28-maple_pecan.png'
p879
sS'practice_loop.thisIndex'
p880
g59
(g98
S'\r\x00\x00\x00'
tRp881
sg34
g752
(S'\x07\xdf\t\x1c\x11\x1e:\r\xd3\x10'
tRp882
sa(dp883
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg35
S'space'
p884
sg55
g11
sg36
F4.0167643221720937
sg65
g66
sg67
g68
sg69
Vn
sa(dp885
S'block_loop.thisRepN'
p886
I0
sg56
Vr
sS'block_loop.thisIndex'
p887
g59
(g98
S'\x00\x00\x00\x00'
tRp888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p889
I0
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p890
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p891
I0
sg69
Vn
sa(dp892
S'trial_loop.thisTrialN'
p893
I0
sS'img_left'
p894
S'49-yorkie.png'
p895
sS'block_loop.thisIndex'
p896
g888
sg38
S'left'
p897
sg58
g62
sS'trial_loop.thisN'
p898
I0
sg33
S'49-yorkie.png'
p899
sg63
g64
sS'trial_loop.thisIndex'
p900
g59
(g98
S'\x00\x00\x00\x00'
tRp901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p902
I0
sS'img_right'
p903
S'35-raisins.png'
p904
sS'block_loop.thisRepN'
p905
I0
sS'img_correct'
p906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p907
I0
sS'img_wrong'
p908
S'35-raisins.png'
p909
sg55
g11
sS'block_loop.thisTrial'
p910
Nsg69
Vn
sS'block_loop.thisTrialN'
p911
I0
sg39
F1.3165945749315142
sg34
g752
(S'\x07\xdf\t\x1c\x11\x1f\x11\x04\x12\xf8'
tRp912
sa(dp913
S'trial_loop.thisTrialN'
p914
I1
sg894
S'30-spaghetti_hoops.png'
p915
sS'block_loop.thisIndex'
p916
g888
sg38
S'right'
p917
sg58
g62
sS'trial_loop.thisN'
p918
I1
sg33
S'30-spaghetti_hoops.png'
p919
sg63
g64
sS'trial_loop.thisIndex'
p920
g59
(g98
S'\x01\x00\x00\x00'
tRp921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p922
I0
sg903
S'19-caramello_redo.png'
p923
sS'block_loop.thisRepN'
p924
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p925
I0
sg908
S'19-caramello_redo.png'
p926
sg55
g11
sS'block_loop.thisTrial'
p927
Nsg69
Vn
sS'block_loop.thisTrialN'
p928
I0
sg39
F1.8168252190698695
sg34
g752
(S'\x07\xdf\t\x1c\x11\x1f\x17\tf@'
tRp929
sa(dp930
S'trial_loop.thisTrialN'
p931
I2
sg894
S'17-jacobs_mini_cheddars_redo.png'
p932
sS'block_loop.thisIndex'
p933
g888
sg38
S'left'
p934
sg58
g62
sS'trial_loop.thisN'
p935
I2
sg33
S'8-liquorice_catherine_wheels.png'
p936
sg63
g64
sS'trial_loop.thisIndex'
p937
g59
(g98
S'\x02\x00\x00\x00'
tRp938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p939
I0
sg903
S'8-liquorice_catherine_wheels.png'
p940
sS'block_loop.thisRepN'
p941
I0
sg906
S'17-jacobs_mini_cheddars_redo.png'
p942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p943
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p944
Nsg69
Vn
sS'block_loop.thisTrialN'
p945
I0
sg39
F1.5165590517390228
sg34
g752
(S'\x07\xdf\t\x1c\x11\x1f\x1e\x07\x18h'
tRp946
sa(dp947
S'trial_loop.thisTrialN'
p948
I3
sg894
S'51-mars.png'
p949
sS'block_loop.thisIndex'
p950
g888
sg38
S'left'
p951
sg58
g62
sS'trial_loop.thisN'
p952
I3
sg33
S'27-hartleys_raspberries_jelly.png'
p953
sg63
g64
sS'trial_loop.thisIndex'
p954
g59
(g98
S'\x03\x00\x00\x00'
tRp955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p956
I0
sg903
S'27-hartleys_raspberries_jelly.png'
p957
sS'block_loop.thisRepN'
p958
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p959
I0
sg908
S'51-mars.png'
p960
sg55
g11
sS'block_loop.thisTrial'
p961
Nsg69
Vn
sS'block_loop.thisTrialN'
p962
I0
sg39
F0.95008478809177177
sg34
g752
(S'\x07\xdf\t\x1c\x11\x1f%\x00Bh'
tRp963
sa(dp964
S'trial_loop.thisTrialN'
p965
I4
sg894
S'40-sardines.png'
p966
sS'block_loop.thisIndex'
p967
g888
sg38
S'right'
p968
sg58
g62
sS'trial_loop.thisN'
p969
I4
sg33
S'5-pineapple.png'
p970
sg63
g64
sS'trial_loop.thisIndex'
p971
g59
(g98
S'\x04\x00\x00\x00'
tRp972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p973
I0
sg903
S'5-pineapple.png'
p974
sS'block_loop.thisRepN'
p975
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p976
I0
sg908
S'40-sardines.png'
p977
sg55
g11
sS'block_loop.thisTrial'
p978
Nsg69
Vn
sS'block_loop.thisTrialN'
p979
I0
sg39
F1.216843408310524
sg34
g752
(S'\x07\xdf\t\x1c\x11\x1f+\x00\x1bX'
tRp980
sa(dp981
S'trial_loop.thisTrialN'
p982
I5
sg894
S'41-peanuts_redo.png'
p983
sS'block_loop.thisIndex'
p984
g888
sg38
S'left'
p985
sg58
g62
sS'trial_loop.thisN'
p986
I5
sg33
S'41-peanuts_redo.png'
p987
sg63
g64
sS'trial_loop.thisIndex'
p988
g59
(g98
S'\x05\x00\x00\x00'
tRp989
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p990
I0
sg903
S'45-chewy_nougat_redo.png'
p991
sS'block_loop.thisRepN'
p992
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p993
I0
sg908
S'45-chewy_nougat_redo.png'
p994
sg55
g11
sS'block_loop.thisTrial'
p995
Nsg69
Vn
sS'block_loop.thisTrialN'
p996
I0
sg39
F1.0668816684374178
sg34
g752
(S'\x07\xdf\t\x1c\x11\x1f1\x03\xc4\xd8'
tRp997
sa(dp998
S'trial_loop.thisTrialN'
p999
I6
sg894
S'31-hobnobs.png'
p1000
sS'block_loop.thisIndex'
p1001
g888
sg38
S'left'
p1002
sg58
g62
sS'trial_loop.thisN'
p1003
I6
sg33
S'25-kitkat.png'
p1004
sg63
g64
sS'trial_loop.thisIndex'
p1005
g59
(g98
S'\x06\x00\x00\x00'
tRp1006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1007
I0
sg903
S'25-kitkat.png'
p1008
sS'block_loop.thisRepN'
p1009
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1010
I0
sg908
S'31-hobnobs.png'
p1011
sg55
g11
sS'block_loop.thisTrial'
p1012
Nsg69
Vn
sS'block_loop.thisTrialN'
p1013
I0
sg39
F1.1334061093039054
sg34
g752
(S'\x07\xdf\t\x1c\x11\x1f7\x05Kx'
tRp1014
sa(dp1015
S'trial_loop.thisTrialN'
p1016
I7
sg894
S'7-olives.png'
p1017
sS'block_loop.thisIndex'
p1018
g888
sg38
S'left'
p1019
sg58
g62
sS'trial_loop.thisN'
p1020
I7
sg33
S'7-olives.png'
p1021
sg63
g64
sS'trial_loop.thisIndex'
p1022
g59
(g98
S'\x07\x00\x00\x00'
tRp1023
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1024
I0
sg903
S'22-daim.png'
p1025
sS'block_loop.thisRepN'
p1026
I0
sg906
S'22-daim.png'
p1027
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1028
I0
sg908
g1021
sg55
g11
sS'block_loop.thisTrial'
p1029
Nsg69
Vn
sS'block_loop.thisTrialN'
p1030
I0
sg39
F1.3505651209015923
sg34
g752
(S'\x07\xdf\t\x1c\x11 \x01\x07\xc4H'
tRp1031
sa(dp1032
S'trial_loop.thisTrialN'
p1033
I8
sg894
S'1-treacle_cookies.png'
p1034
sS'block_loop.thisIndex'
p1035
g888
sg38
S'left'
p1036
sg58
g62
sS'trial_loop.thisN'
p1037
I8
sg33
S'1-treacle_cookies.png'
p1038
sg63
g64
sS'trial_loop.thisIndex'
p1039
g59
(g98
S'\x08\x00\x00\x00'
tRp1040
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1041
I0
sg903
S'21-nakd_banana_crunch.png'
p1042
sS'block_loop.thisRepN'
p1043
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1044
I0
sg908
S'21-nakd_banana_crunch.png'
p1045
sg55
g11
sS'block_loop.thisTrial'
p1046
Nsg69
Vn
sS'block_loop.thisTrialN'
p1047
I0
sg39
F1.2501779010417522
sg34
g752
(S'\x07\xdf\t\x1c\x11 \x07\r\xcf('
tRp1048
sa(dp1049
S'trial_loop.thisTrialN'
p1050
I9
sg894
S'42-mrkipling_lemon_slices.png'
p1051
sS'block_loop.thisIndex'
p1052
g888
sg38
S'left'
p1053
sg58
g62
sS'trial_loop.thisN'
p1054
I9
sg33
S'16-skips_prawn.png'
p1055
sg63
g64
sS'trial_loop.thisIndex'
p1056
g59
(g98
S'\t\x00\x00\x00'
tRp1057
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1058
I0
sg903
S'16-skips_prawn.png'
p1059
sS'block_loop.thisRepN'
p1060
I0
sg906
g1055
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1061
I0
sg908
S'42-mrkipling_lemon_slices.png'
p1062
sg55
g11
sS'block_loop.thisTrial'
p1063
Nsg69
Vn
sS'block_loop.thisTrialN'
p1064
I0
sg39
F1.1167498392060224
sg34
g752
(S'\x07\xdf\t\x1c\x11 \x0e\x02\xaf\x80'
tRp1065
sa(dp1066
S'trial_loop.thisTrialN'
p1067
I10
sg894
g949
sS'block_loop.thisIndex'
p1068
g888
sg38
S'right'
p1069
sg58
g62
sS'trial_loop.thisN'
p1070
I10
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1071
g59
(g98
S'\n\x00\x00\x00'
tRp1072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1073
I0
sg903
g957
sS'block_loop.thisRepN'
p1074
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1075
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1076
Nsg69
Vn
sS'block_loop.thisTrialN'
p1077
I0
sg39
F1.1001215086944285
sg34
g752
(S'\x07\xdf\t\x1c\x11 \x14\x05(P'
tRp1078
sa(dp1079
S'trial_loop.thisTrialN'
p1080
I11
sg894
g895
sS'block_loop.thisIndex'
p1081
g888
sg38
S'left'
p1082
sg58
g62
sS'trial_loop.thisN'
p1083
I11
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1084
g59
(g98
S'\x0b\x00\x00\x00'
tRp1085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1086
I0
sg903
g904
sS'block_loop.thisRepN'
p1087
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1088
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1089
Nsg69
Vn
sS'block_loop.thisTrialN'
p1090
I0
sg39
F0.76684386446504504
sg34
g752
(S'\x07\xdf\t\x1c\x11 \x1a\x07(\x08'
tRp1091
sa(dp1092
S'trial_loop.thisTrialN'
p1093
I12
sg894
S'8-liquorice_catherine_wheels.png'
p1094
sS'block_loop.thisIndex'
p1095
g888
sg38
S'left'
p1096
sg58
g62
sS'trial_loop.thisN'
p1097
I12
sg33
g942
sg63
g64
sS'trial_loop.thisIndex'
p1098
g59
(g98
S'\x0c\x00\x00\x00'
tRp1099
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1100
I0
sg903
S'17-jacobs_mini_cheddars_redo.png'
p1101
sS'block_loop.thisRepN'
p1102
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1103
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p1104
Nsg69
Vn
sS'block_loop.thisTrialN'
p1105
I0
sg39
F1.0168712338563637
sg34
g752
(S'\x07\xdf\t\x1c\x11  \x04&\x80'
tRp1106
sa(dp1107
S'trial_loop.thisTrialN'
p1108
I13
sg894
S'26-walkers_smoky_bacon.png'
p1109
sS'block_loop.thisIndex'
p1110
g888
sg38
S'right'
p1111
sg58
g62
sS'trial_loop.thisN'
p1112
I13
sg33
S'26-walkers_smoky_bacon.png'
p1113
sg63
g64
sS'trial_loop.thisIndex'
p1114
g59
(g98
S'\r\x00\x00\x00'
tRp1115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1116
I0
sg903
S'44-crunch.png'
p1117
sS'block_loop.thisRepN'
p1118
I0
sg906
g1113
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1119
I0
sg908
S'44-crunch.png'
p1120
sg55
g11
sS'block_loop.thisTrial'
p1121
Nsg69
Vn
sS'block_loop.thisTrialN'
p1122
I0
sg39
F1.3166803893764154
sg34
g752
(S'\x07\xdf\t\x1c\x11 &\x04\xb7\x08'
tRp1123
sa(dp1124
S'trial_loop.thisTrialN'
p1125
I14
sg894
S'35-raisins.png'
p1126
sS'block_loop.thisIndex'
p1127
g888
sg38
S'right'
p1128
sg58
g62
sS'trial_loop.thisN'
p1129
I14
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p1130
g59
(g98
S'\x0e\x00\x00\x00'
tRp1131
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1132
I0
sg903
S'49-yorkie.png'
p1133
sS'block_loop.thisRepN'
p1134
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1135
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1136
Nsg69
Vn
sS'block_loop.thisTrialN'
p1137
I0
sg39
F0.91683924588141963
sg34
g752
(S'\x07\xdf\t\x1c\x11 ,\n\x0e8'
tRp1138
sa(dp1139
S'trial_loop.thisTrialN'
p1140
I15
sg894
S'5-pineapple.png'
p1141
sS'block_loop.thisIndex'
p1142
g888
sg38
S'left'
p1143
sg58
g62
sS'trial_loop.thisN'
p1144
I15
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1145
g59
(g98
S'\x0f\x00\x00\x00'
tRp1146
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1147
I0
sg903
S'40-sardines.png'
p1148
sS'block_loop.thisRepN'
p1149
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1150
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1151
Nsg69
Vn
sS'block_loop.thisTrialN'
p1152
I0
sg39
F1.2668452899561089
sg34
g752
(S'\x07\xdf\t\x1c\x11 2\tn\x10'
tRp1153
sa(dp1154
S'trial_loop.thisTrialN'
p1155
I16
sg894
S'50-polo.png'
p1156
sS'block_loop.thisIndex'
p1157
g888
sg38
S'right'
p1158
sg58
g62
sS'trial_loop.thisN'
p1159
I16
sg33
S'50-polo.png'
p1160
sg63
g64
sS'trial_loop.thisIndex'
p1161
g59
(g98
S'\x10\x00\x00\x00'
tRp1162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1163
I0
sg903
S'48-twix.png'
p1164
sS'block_loop.thisRepN'
p1165
I0
sg906
g1160
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1166
I0
sg908
S'48-twix.png'
p1167
sg55
g11
sS'block_loop.thisTrial'
p1168
Nsg69
Vn
sS'block_loop.thisTrialN'
p1169
I0
sg39
F0.93350492421086528
sg34
g752
(S'\x07\xdf\t\x1c\x11 8\x0e\t\xc0'
tRp1170
sa(dp1171
S'trial_loop.thisTrialN'
p1172
I17
sg894
S'38-maltesers.png'
p1173
sS'block_loop.thisIndex'
p1174
g888
sg38
S'left'
p1175
sg58
g62
sS'trial_loop.thisN'
p1176
I17
sg33
S'6-sour_patch_kids.png'
p1177
sg63
g64
sS'trial_loop.thisIndex'
p1178
g59
(g98
S'\x11\x00\x00\x00'
tRp1179
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1180
I0
sg903
S'6-sour_patch_kids.png'
p1181
sS'block_loop.thisRepN'
p1182
I0
sg906
S'38-maltesers.png'
p1183
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1184
I0
sg908
g1177
sg55
g11
sS'block_loop.thisTrial'
p1185
Nsg69
Vn
sS'block_loop.thisTrialN'
p1186
I0
sg39
F1.0501541238809295
sg34
g752
(S'\x07\xdf\t\x1c\x11!\x02\ri\x98'
tRp1187
sa(dp1188
S'trial_loop.thisTrialN'
p1189
I18
sg894
S'20-fruit_pastilles.png'
p1190
sS'block_loop.thisIndex'
p1191
g888
sg38
S'right'
p1192
sg58
g62
sS'trial_loop.thisN'
p1193
I18
sg33
S'2-steamed_puddings.png'
p1194
sg63
g64
sS'trial_loop.thisIndex'
p1195
g59
(g98
S'\x12\x00\x00\x00'
tRp1196
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1197
I0
sg903
S'2-steamed_puddings.png'
p1198
sS'block_loop.thisRepN'
p1199
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1200
I0
sg908
S'20-fruit_pastilles.png'
p1201
sg55
g11
sS'block_loop.thisTrial'
p1202
Nsg69
Vn
sS'block_loop.thisTrialN'
p1203
I0
sg39
F1.1167350141149655
sg34
g752
(S'\x07\xdf\t\x1c\x11!\x08\x0e\xb1\xb8'
tRp1204
sa(dp1205
S'trial_loop.thisTrialN'
p1206
I19
sg894
S'16-skips_prawn.png'
p1207
sS'block_loop.thisIndex'
p1208
g888
sg38
S'left'
p1209
sg58
g62
sS'trial_loop.thisN'
p1210
I19
sg33
g1055
sg63
g64
sS'trial_loop.thisIndex'
p1211
g59
(g98
S'\x13\x00\x00\x00'
tRp1212
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1213
I0
sg903
S'42-mrkipling_lemon_slices.png'
p1214
sS'block_loop.thisRepN'
p1215
I0
sg906
g1055
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1216
I0
sg908
g1062
sg55
g11
sS'block_loop.thisTrial'
p1217
Nsg69
Vn
sS'block_loop.thisTrialN'
p1218
I0
sg39
F1.2167313648678828
sg34
g752
(S'\x07\xdf\t\x1c\x11!\x0f\x01\xad\xb0'
tRp1219
sa(dp1220
S'trial_loop.thisTrialN'
p1221
I20
sg894
g1109
sS'block_loop.thisIndex'
p1222
g888
sg38
S'left'
p1223
sg58
g62
sS'trial_loop.thisN'
p1224
I20
sg33
g1113
sg63
g64
sS'trial_loop.thisIndex'
p1225
g59
(g98
S'\x14\x00\x00\x00'
tRp1226
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1227
I0
sg903
g1117
sS'block_loop.thisRepN'
p1228
I0
sg906
g1113
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1229
I0
sg908
g1120
sg55
g11
sS'block_loop.thisTrial'
p1230
Nsg69
Vn
sS'block_loop.thisTrialN'
p1231
I0
sg39
F1.2167507515150646
sg34
g752
(S'\x07\xdf\t\x1c\x11!\x15\x05\x91\xc8'
tRp1232
sa(dp1233
S'trial_loop.thisTrialN'
p1234
I21
sg894
g1094
sS'block_loop.thisIndex'
p1235
g888
sg38
S'left'
p1236
sg58
g62
sS'trial_loop.thisN'
p1237
I21
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1238
g59
(g98
S'\x15\x00\x00\x00'
tRp1239
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1240
I0
sg903
g1101
sS'block_loop.thisRepN'
p1241
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1242
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p1243
Nsg69
Vn
sS'block_loop.thisTrialN'
p1244
I0
sg39
F1.6667032542209199
sg34
g752
(S'\x07\xdf\t\x1c\x11!\x1b\ty\xc8'
tRp1245
sa(dp1246
S'trial_loop.thisTrialN'
p1247
I22
sg894
S'4-corn.png'
p1248
sS'block_loop.thisIndex'
p1249
g888
sg38
S'right'
p1250
sg58
g62
sS'trial_loop.thisN'
p1251
I22
sg33
S'4-corn.png'
p1252
sg63
g64
sS'trial_loop.thisIndex'
p1253
g59
(g98
S'\x16\x00\x00\x00'
tRp1254
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1255
I0
sg903
S'10-bounty_redo.png'
p1256
sS'block_loop.thisRepN'
p1257
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1258
I0
sg908
S'10-bounty_redo.png'
p1259
sg55
g11
sS'block_loop.thisTrial'
p1260
Nsg69
Vn
sS'block_loop.thisTrialN'
p1261
I0
sg39
F1.7168610843764327
sg34
g752
(S'\x07\xdf\t\x1c\x11!"\x04\xca\x90'
tRp1262
sa(dp1263
S'trial_loop.thisTrialN'
p1264
I23
sg894
S'45-chewy_nougat_redo.png'
p1265
sS'block_loop.thisIndex'
p1266
g888
sg38
S'left'
p1267
sg58
g62
sS'trial_loop.thisN'
p1268
I23
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1269
g59
(g98
S'\x17\x00\x00\x00'
tRp1270
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1271
I0
sg903
S'41-peanuts_redo.png'
p1272
sS'block_loop.thisRepN'
p1273
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1274
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p1275
Nsg69
Vn
sS'block_loop.thisTrialN'
p1276
I0
sg39
F1.8334104998102703
sg34
g752
(S'\x07\xdf\t\x1c\x11!)\x01\t\xa0'
tRp1277
sa(dp1278
S'trial_loop.thisTrialN'
p1279
I24
sg894
S'34-hula_hoops_bbq_beef_redo.png'
p1280
sS'block_loop.thisIndex'
p1281
g888
sg38
S'right'
p1282
sg58
g62
sS'trial_loop.thisN'
p1283
I24
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p1284
sg63
g64
sS'trial_loop.thisIndex'
p1285
g59
(g98
S'\x18\x00\x00\x00'
tRp1286
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1287
I0
sg903
S'36-fig_rolls.png'
p1288
sS'block_loop.thisRepN'
p1289
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1290
I0
sg908
S'36-fig_rolls.png'
p1291
sg55
g11
sS'block_loop.thisTrial'
p1292
Nsg69
Vn
sS'block_loop.thisTrialN'
p1293
I0
sg39
F2.1167150572691753
sg34
g752
(S'\x07\xdf\t\x1c\x11!/\x0e8\xa0'
tRp1294
sa(dp1295
S'trial_loop.thisTrialN'
p1296
I25
sg894
S'48-twix.png'
p1297
sS'block_loop.thisIndex'
p1298
g888
sg38
S'right'
p1299
sg58
g62
sS'trial_loop.thisN'
p1300
I25
sg33
g1160
sg63
g64
sS'trial_loop.thisIndex'
p1301
g59
(g98
S'\x19\x00\x00\x00'
tRp1302
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1303
I0
sg903
S'50-polo.png'
p1304
sS'block_loop.thisRepN'
p1305
I0
sg906
g1160
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1306
I0
sg908
g1167
sg55
g11
sS'block_loop.thisTrial'
p1307
Nsg69
Vn
sS'block_loop.thisTrialN'
p1308
I0
sg39
F1.1001257851603441
sg34
g752
(S'\x07\xdf\t\x1c\x11!7\x01,\xc8'
tRp1309
sa(dp1310
S'trial_loop.thisTrialN'
p1311
I26
sg894
g983
sS'block_loop.thisIndex'
p1312
g888
sg38
S'left'
p1313
sg58
g62
sS'trial_loop.thisN'
p1314
I26
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1315
g59
(g98
S'\x1a\x00\x00\x00'
tRp1316
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1317
I0
sg903
g991
sS'block_loop.thisRepN'
p1318
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1319
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p1320
Nsg69
Vn
sS'block_loop.thisTrialN'
p1321
I0
sg39
F1.316748812852893
sg34
g752
(S'\x07\xdf\t\x1c\x11"\x01\x03,\x80'
tRp1322
sa(dp1323
S'trial_loop.thisTrialN'
p1324
I27
sg894
g1109
sS'block_loop.thisIndex'
p1325
g888
sg38
S'left'
p1326
sg58
g62
sS'trial_loop.thisN'
p1327
I27
sg33
g1113
sg63
g64
sS'trial_loop.thisIndex'
p1328
g59
(g98
S'\x1b\x00\x00\x00'
tRp1329
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1330
I0
sg903
g1117
sS'block_loop.thisRepN'
p1331
I0
sg906
g1113
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1332
I0
sg908
g1120
sg55
g11
sS'block_loop.thisTrial'
p1333
Nsg69
Vn
sS'block_loop.thisTrialN'
p1334
I0
sg39
F1.0837671571898682
sg34
g752
(S'\x07\xdf\t\x1c\x11"\x07\x08\xbeH'
tRp1335
sa(dp1336
S'trial_loop.thisTrialN'
p1337
I28
sg894
S'27-hartleys_raspberries_jelly.png'
p1338
sS'block_loop.thisIndex'
p1339
g888
sg38
S'left'
p1340
sg58
g62
sS'trial_loop.thisN'
p1341
I28
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1342
g59
(g98
S'\x1c\x00\x00\x00'
tRp1343
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1344
I0
sg903
S'51-mars.png'
p1345
sS'block_loop.thisRepN'
p1346
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1347
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1348
Nsg69
Vn
sS'block_loop.thisTrialN'
p1349
I0
sg39
F0.98350680585645023
sg34
g752
(S'\x07\xdf\t\x1c\x11"\r\n\x7f\x80'
tRp1350
sa(dp1351
S'trial_loop.thisTrialN'
p1352
I29
sg894
S'18-mms.png'
p1353
sS'block_loop.thisIndex'
p1354
g888
sg38
S'left'
p1355
sg58
g62
sS'trial_loop.thisN'
p1356
I29
sg33
S'43-mrporky_pork_crackles_redo.png'
p1357
sg63
g64
sS'trial_loop.thisIndex'
p1358
g59
(g98
S'\x1d\x00\x00\x00'
tRp1359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1360
I0
sg903
S'43-mrporky_pork_crackles_redo.png'
p1361
sS'block_loop.thisRepN'
p1362
I0
sg906
S'18-mms.png'
p1363
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1364
I0
sg908
g1357
sg55
g11
sS'block_loop.thisTrial'
p1365
Nsg69
Vn
sS'block_loop.thisTrialN'
p1366
I0
sg39
F1.7167487558326684
sg34
g752
(S'\x07\xdf\t\x1c\x11"\x13\n\x96\xf0'
tRp1367
sa(dp1368
S'trial_loop.thisTrialN'
p1369
I30
sg894
S'23-crunchie_redo.png'
p1370
sS'block_loop.thisIndex'
p1371
g888
sg38
S'left'
p1372
sg58
g62
sS'trial_loop.thisN'
p1373
I30
sg33
S'23-crunchie_redo.png'
p1374
sg63
g64
sS'trial_loop.thisIndex'
p1375
g59
(g98
S'\x1e\x00\x00\x00'
tRp1376
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1377
I0
sg903
S'33-ambrosia_rice.png'
p1378
sS'block_loop.thisRepN'
p1379
I0
sg906
S'33-ambrosia_rice.png'
p1380
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1381
I0
sg908
g1374
sg55
g11
sS'block_loop.thisTrial'
p1382
Nsg69
Vn
sS'block_loop.thisTrialN'
p1383
I0
sg39
F1.8000862706030603
sg34
g752
(S'\x07\xdf\t\x1c\x11"\x1a\x06\xd9\xe8'
tRp1384
sa(dp1385
S'trial_loop.thisTrialN'
p1386
I31
sg894
S'44-crunch.png'
p1387
sS'block_loop.thisIndex'
p1388
g888
sg38
S'right'
p1389
sg58
g62
sS'trial_loop.thisN'
p1390
I31
sg33
g1120
sg63
g64
sS'trial_loop.thisIndex'
p1391
g59
(g98
S'\x1f\x00\x00\x00'
tRp1392
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1393
I0
sg903
S'26-walkers_smoky_bacon.png'
p1394
sS'block_loop.thisRepN'
p1395
I0
sg906
g1113
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1396
I0
sg908
g1120
sg55
g11
sS'block_loop.thisTrial'
p1397
Nsg69
Vn
sS'block_loop.thisTrialN'
p1398
I0
sg39
F0.8501300616262597
sg34
g752
(S'\x07\xdf\t\x1c\x11"!\x04M\x90'
tRp1399
sa(dp1400
S'trial_loop.thisTrialN'
p1401
I32
sg894
S'22-daim.png'
p1402
sS'block_loop.thisIndex'
p1403
g888
sg38
S'right'
p1404
sg58
g62
sS'trial_loop.thisN'
p1405
I32
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p1406
g59
(g98
S' \x00\x00\x00'
tRp1407
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1408
I0
sg903
S'7-olives.png'
p1409
sS'block_loop.thisRepN'
p1410
I0
sg906
g1027
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1411
I0
sg908
g1021
sg55
g11
sS'block_loop.thisTrial'
p1412
Nsg69
Vn
sS'block_loop.thisTrialN'
p1413
I0
sg39
F1.0338910036807647
sg34
g752
(S'\x07\xdf\t\x1c\x11"\'\x02|\xb8'
tRp1414
sa(dp1415
S'trial_loop.thisTrialN'
p1416
I33
sg894
S'10-bounty_redo.png'
p1417
sS'block_loop.thisIndex'
p1418
g888
sg38
S'right'
p1419
sg58
g62
sS'trial_loop.thisN'
p1420
I33
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p1421
g59
(g98
S'!\x00\x00\x00'
tRp1422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1423
I0
sg903
S'4-corn.png'
p1424
sS'block_loop.thisRepN'
p1425
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1426
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p1427
Nsg69
Vn
sS'block_loop.thisTrialN'
p1428
I0
sg39
F0.93343536034080898
sg34
g752
(S'\x07\xdf\t\x1c\x11"-\x03\x86X'
tRp1429
sa(dp1430
S'trial_loop.thisTrialN'
p1431
I34
sg894
g1034
sS'block_loop.thisIndex'
p1432
g888
sg38
S'left'
p1433
sg58
g62
sS'trial_loop.thisN'
p1434
I34
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p1435
g59
(g98
S'"\x00\x00\x00'
tRp1436
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1437
I0
sg903
g1042
sS'block_loop.thisRepN'
p1438
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1439
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p1440
Nsg69
Vn
sS'block_loop.thisTrialN'
p1441
I0
sg39
F0.96682373656221898
sg34
g752
(S'\x07\xdf\t\x1c\x11"3\x03$\xb0'
tRp1442
sa(dp1443
S'trial_loop.thisTrialN'
p1444
I35
sg894
g1094
sS'block_loop.thisIndex'
p1445
g888
sg38
S'left'
p1446
sg58
g62
sS'trial_loop.thisN'
p1447
I35
sg33
g942
sg63
g64
sS'trial_loop.thisIndex'
p1448
g59
(g98
S'#\x00\x00\x00'
tRp1449
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1450
I0
sg903
g1101
sS'block_loop.thisRepN'
p1451
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1452
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p1453
Nsg69
Vn
sS'block_loop.thisTrialN'
p1454
I0
sg39
F1.2002444428726449
sg34
g752
(S'\x07\xdf\t\x1c\x11"9\x02\xfd\xa0'
tRp1455
sa(dp1456
S'trial_loop.thisTrialN'
p1457
I36
sg894
S'19-caramello_redo.png'
p1458
sS'block_loop.thisIndex'
p1459
g888
sg38
S'left'
p1460
sg58
g62
sS'trial_loop.thisN'
p1461
I36
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1462
g59
(g98
S'$\x00\x00\x00'
tRp1463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1464
I0
sg903
S'30-spaghetti_hoops.png'
p1465
sS'block_loop.thisRepN'
p1466
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1467
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1468
Nsg69
Vn
sS'block_loop.thisTrialN'
p1469
I0
sg39
F1.2167772656175657
sg34
g752
(S'\x07\xdf\t\x1c\x11#\x03\x06\xa7 '
tRp1470
sa(dp1471
S'trial_loop.thisTrialN'
p1472
I37
sg894
g966
sS'block_loop.thisIndex'
p1473
g888
sg38
S'right'
p1474
sg58
g62
sS'trial_loop.thisN'
p1475
I37
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1476
g59
(g98
S'%\x00\x00\x00'
tRp1477
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1478
I0
sg903
g974
sS'block_loop.thisRepN'
p1479
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1480
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1481
Nsg69
Vn
sS'block_loop.thisTrialN'
p1482
I0
sg39
F1.1505364970835217
sg34
g752
(S'\x07\xdf\t\x1c\x11#\t\nP\xa0'
tRp1483
sa(dp1484
S'trial_loop.thisTrialN'
p1485
I38
sg894
g1280
sS'block_loop.thisIndex'
p1486
g888
sg38
S'right'
p1487
sg58
g62
sS'trial_loop.thisN'
p1488
I38
sg33
g1291
sg63
g64
sS'trial_loop.thisIndex'
p1489
g59
(g98
S'&\x00\x00\x00'
tRp1490
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1491
I0
sg903
g1288
sS'block_loop.thisRepN'
p1492
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1493
I0
sg908
g1291
sg55
g11
sS'block_loop.thisTrial'
p1494
Nsg69
Vn
sS'block_loop.thisTrialN'
p1495
I0
sg39
F2.0668255041673547
sg34
g752
(S'\x07\xdf\t\x1c\x11#\x0f\rFp'
tRp1496
sa(dp1497
S'trial_loop.thisTrialN'
p1498
I39
sg894
g1417
sS'block_loop.thisIndex'
p1499
g888
sg38
S'right'
p1500
sg58
g62
sS'trial_loop.thisN'
p1501
I39
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p1502
g59
(g98
S"'\x00\x00\x00"
tRp1503
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1504
I0
sg903
g1424
sS'block_loop.thisRepN'
p1505
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1506
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p1507
Nsg69
Vn
sS'block_loop.thisTrialN'
p1508
I0
sg39
F1.516763181782153
sg34
g752
(S'\x07\xdf\t\x1c\x11#\x16\x0e\xc5@'
tRp1509
sa(dp1510
S'trial_loop.thisTrialN'
p1511
I40
sg894
S'2-steamed_puddings.png'
p1512
sS'block_loop.thisIndex'
p1513
g888
sg38
S'left'
p1514
sg58
g62
sS'trial_loop.thisN'
p1515
I40
sg33
g1194
sg63
g64
sS'trial_loop.thisIndex'
p1516
g59
(g98
S'(\x00\x00\x00'
tRp1517
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1518
I0
sg903
S'20-fruit_pastilles.png'
p1519
sS'block_loop.thisRepN'
p1520
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1521
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p1522
Nsg69
Vn
sS'block_loop.thisTrialN'
p1523
I0
sg39
F0.86682596032187575
sg34
g752
(S'\x07\xdf\t\x1c\x11#\x1d\x07\xef@'
tRp1524
sa(dp1525
S'trial_loop.thisTrialN'
p1526
I41
sg894
g1458
sS'block_loop.thisIndex'
p1527
g888
sg38
S'right'
p1528
sg58
g62
sS'trial_loop.thisN'
p1529
I41
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1530
g59
(g98
S')\x00\x00\x00'
tRp1531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1532
I0
sg903
g1465
sS'block_loop.thisRepN'
p1533
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1534
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1535
Nsg69
Vn
sS'block_loop.thisTrialN'
p1536
I0
sg39
F1.0001237324540853
sg34
g752
(S'\x07\xdf\t\x1c\x11##\x06\\\xe8'
tRp1537
sa(dp1538
S'trial_loop.thisTrialN'
p1539
I42
sg894
S'3-ellas_strawberries_apples.png'
p1540
sS'block_loop.thisIndex'
p1541
g888
sg38
S'right'
p1542
sg58
g62
sS'trial_loop.thisN'
p1543
I42
sg33
S'13-mccoys_steak_crisps.png'
p1544
sg63
g64
sS'trial_loop.thisIndex'
p1545
g59
(g98
S'*\x00\x00\x00'
tRp1546
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1547
I0
sg903
S'13-mccoys_steak_crisps.png'
p1548
sS'block_loop.thisRepN'
p1549
I0
sg906
g1544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1550
I0
sg908
S'3-ellas_strawberries_apples.png'
p1551
sg55
g11
sS'block_loop.thisTrial'
p1552
Nsg69
Vn
sS'block_loop.thisTrialN'
p1553
I0
sg39
F1.7006062320106139
sg34
g752
(S'\x07\xdf\t\x1c\x11#)\x06\xedp'
tRp1554
sa(dp1555
S'trial_loop.thisTrialN'
p1556
I43
sg894
g1000
sS'block_loop.thisIndex'
p1557
g888
sg38
S'left'
p1558
sg58
g62
sS'trial_loop.thisN'
p1559
I43
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p1560
g59
(g98
S'+\x00\x00\x00'
tRp1561
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1562
I0
sg903
g1008
sS'block_loop.thisRepN'
p1563
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1564
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p1565
Nsg69
Vn
sS'block_loop.thisTrialN'
p1566
I0
sg39
F1.0169236918554816
sg34
g752
(S'\x07\xdf\t\x1c\x11#0\x02\xb3h'
tRp1567
sa(dp1568
S'trial_loop.thisTrialN'
p1569
I44
sg894
g1512
sS'block_loop.thisIndex'
p1570
g888
sg38
S'left'
p1571
sg58
g62
sS'trial_loop.thisN'
p1572
I44
sg33
g1194
sg63
g64
sS'trial_loop.thisIndex'
p1573
g59
(g98
S',\x00\x00\x00'
tRp1574
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1575
I0
sg903
g1519
sS'block_loop.thisRepN'
p1576
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1577
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p1578
Nsg69
Vn
sS'block_loop.thisTrialN'
p1579
I0
sg39
F0.73348200234249816
sg34
g752
(S'\x07\xdf\t\x1c\x11#6\x03\x82p'
tRp1580
sa(dp1581
S'trial_loop.thisTrialN'
p1582
I45
sg894
g1173
sS'block_loop.thisIndex'
p1583
g888
sg38
S'right'
p1584
sg58
g62
sS'trial_loop.thisN'
p1585
I45
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p1586
g59
(g98
S'-\x00\x00\x00'
tRp1587
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1588
I0
sg903
g1181
sS'block_loop.thisRepN'
p1589
I0
sg906
g1183
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1590
I0
sg908
g1177
sg55
g11
sS'block_loop.thisTrial'
p1591
Nsg69
Vn
sS'block_loop.thisTrialN'
p1592
I0
sg39
F2.1832129840404377
sg34
g752
(S'\x07\xdf\t\x1c\x11$\x00\x00\x07\xd0'
tRp1593
sa(dp1594
S'trial_loop.thisTrialN'
p1595
I46
sg894
S'25-kitkat.png'
p1596
sS'block_loop.thisIndex'
p1597
g888
sg38
S'right'
p1598
sg58
g62
sS'trial_loop.thisN'
p1599
I46
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p1600
g59
(g98
S'.\x00\x00\x00'
tRp1601
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1602
I0
sg903
S'31-hobnobs.png'
p1603
sS'block_loop.thisRepN'
p1604
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1605
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p1606
Nsg69
Vn
sS'block_loop.thisTrialN'
p1607
I0
sg39
F1.0334214475660701
sg34
g752
(S'\x07\xdf\t\x1c\x11$\x07\x030h'
tRp1608
sa(dp1609
S'trial_loop.thisTrialN'
p1610
I47
sg894
S'36-fig_rolls.png'
p1611
sS'block_loop.thisIndex'
p1612
g888
sg38
S'left'
p1613
sg58
g62
sS'trial_loop.thisN'
p1614
I47
sg33
g1291
sg63
g64
sS'trial_loop.thisIndex'
p1615
g59
(g98
S'/\x00\x00\x00'
tRp1616
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1617
I0
sg903
S'34-hula_hoops_bbq_beef_redo.png'
p1618
sS'block_loop.thisRepN'
p1619
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1620
I0
sg908
g1291
sg55
g11
sS'block_loop.thisTrial'
p1621
Nsg69
Vn
sS'block_loop.thisTrialN'
p1622
I0
sg39
F0.98366104377419106
sg34
g752
(S'\x07\xdf\t\x1c\x11$\r\x04=\xf0'
tRp1623
sa(dp1624
S'trial_loop.thisTrialN'
p1625
I48
sg894
g1094
sS'block_loop.thisIndex'
p1626
g888
sg38
S'right'
p1627
sg58
g62
sS'trial_loop.thisN'
p1628
I48
sg33
g942
sg63
g64
sS'trial_loop.thisIndex'
p1629
g59
(g98
S'0\x00\x00\x00'
tRp1630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1631
I0
sg903
g1101
sS'block_loop.thisRepN'
p1632
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1633
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p1634
Nsg69
Vn
sS'block_loop.thisTrialN'
p1635
I0
sg39
F1.100152014161722
sg34
g752
(S'\x07\xdf\t\x1c\x11$\x13\x04\x8f\xf8'
tRp1636
sa(dp1637
S'trial_loop.thisTrialN'
p1638
I49
sg894
g1173
sS'block_loop.thisIndex'
p1639
g888
sg38
S'right'
p1640
sg58
g62
sS'trial_loop.thisN'
p1641
I49
sg33
g1183
sg63
g64
sS'trial_loop.thisIndex'
p1642
g59
(g98
S'1\x00\x00\x00'
tRp1643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1644
I0
sg903
g1181
sS'block_loop.thisRepN'
p1645
I0
sg906
g1183
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1646
I0
sg908
g1177
sg55
g11
sS'block_loop.thisTrial'
p1647
Nsg69
Vn
sS'block_loop.thisTrialN'
p1648
I0
sg39
F0.78327091591563658
sg34
g752
(S'\x07\xdf\t\x1c\x11$\x19\x06\x8f\xb0'
tRp1649
sa(dp1650
S'trial_loop.thisTrialN'
p1651
I50
sg894
g1190
sS'block_loop.thisIndex'
p1652
g888
sg38
S'right'
p1653
sg58
g62
sS'trial_loop.thisN'
p1654
I50
sg33
g1194
sg63
g64
sS'trial_loop.thisIndex'
p1655
g59
(g98
S'2\x00\x00\x00'
tRp1656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1657
I0
sg903
g1198
sS'block_loop.thisRepN'
p1658
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1659
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p1660
Nsg69
Vn
sS'block_loop.thisTrialN'
p1661
I0
sg39
F0.90020179223574814
sg34
g752
(S'\x07\xdf\t\x1c\x11$\x1f\x03\xcc\xa8'
tRp1662
sa(dp1663
S'trial_loop.thisTrialN'
p1664
I51
sg894
S'33-ambrosia_rice.png'
p1665
sS'block_loop.thisIndex'
p1666
g888
sg38
S'right'
p1667
sg58
g62
sS'trial_loop.thisN'
p1668
I51
sg33
g1380
sg63
g64
sS'trial_loop.thisIndex'
p1669
g59
(g98
S'3\x00\x00\x00'
tRp1670
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1671
I0
sg903
S'23-crunchie_redo.png'
p1672
sS'block_loop.thisRepN'
p1673
I0
sg906
g1380
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1674
I0
sg908
g1374
sg55
g11
sS'block_loop.thisTrial'
p1675
Nsg69
Vn
sS'block_loop.thisTrialN'
p1676
I0
sg39
F1.366745847833954
sg34
g752
(S'\x07\xdf\t\x1c\x11$%\x02\xb3h'
tRp1677
sa(dp1678
S'trial_loop.thisTrialN'
p1679
I52
sg894
g1017
sS'block_loop.thisIndex'
p1680
g888
sg38
S'left'
p1681
sg58
g62
sS'trial_loop.thisN'
p1682
I52
sg33
g1027
sg63
g64
sS'trial_loop.thisIndex'
p1683
g59
(g98
S'4\x00\x00\x00'
tRp1684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1685
I0
sg903
g1025
sS'block_loop.thisRepN'
p1686
I0
sg906
g1027
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1687
I0
sg908
g1021
sg55
g11
sS'block_loop.thisTrial'
p1688
Nsg69
Vn
sS'block_loop.thisTrialN'
p1689
I0
sg39
F1.0001853135836427
sg34
g752
(S'\x07\xdf\t\x1c\x11$+\x08\xbeH'
tRp1690
sa(dp1691
S'trial_loop.thisTrialN'
p1692
I53
sg894
g1126
sS'block_loop.thisIndex'
p1693
g888
sg38
S'right'
p1694
sg58
g62
sS'trial_loop.thisN'
p1695
I53
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1696
g59
(g98
S'5\x00\x00\x00'
tRp1697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1698
I0
sg903
g1133
sS'block_loop.thisRepN'
p1699
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1700
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1701
Nsg69
Vn
sS'block_loop.thisTrialN'
p1702
I0
sg39
F1.0168589746499492
sg34
g752
(S'\x07\xdf\t\x1c\x11$1\tN\xd0'
tRp1703
sa(dp1704
S'trial_loop.thisTrialN'
p1705
I54
sg894
g1370
sS'block_loop.thisIndex'
p1706
g888
sg38
S'left'
p1707
sg58
g62
sS'trial_loop.thisN'
p1708
I54
sg33
g1380
sg63
g64
sS'trial_loop.thisIndex'
p1709
g59
(g98
S'6\x00\x00\x00'
tRp1710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1711
I0
sg903
g1378
sS'block_loop.thisRepN'
p1712
I0
sg906
g1380
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1713
I0
sg908
g1374
sg55
g11
sS'block_loop.thisTrial'
p1714
Nsg69
Vn
sS'block_loop.thisTrialN'
p1715
I0
sg39
F0.88352898646553513
sg34
g752
(S'\x07\xdf\t\x1c\x11$7\n\x1d\xd8'
tRp1716
sa(dp1717
S'trial_loop.thisTrialN'
p1718
I55
sg894
S'29-beans.png'
p1719
sS'block_loop.thisIndex'
p1720
g888
sg38
S'right'
p1721
sg58
g62
sS'trial_loop.thisN'
p1722
I55
sg33
S'29-beans.png'
p1723
sg63
g64
sS'trial_loop.thisIndex'
p1724
g59
(g98
S'7\x00\x00\x00'
tRp1725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1726
I0
sg903
S'46-pistachios.png'
p1727
sS'block_loop.thisRepN'
p1728
I0
sg906
g1723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1729
I0
sg908
S'46-pistachios.png'
p1730
sg55
g11
sS'block_loop.thisTrial'
p1731
Nsg69
Vn
sS'block_loop.thisTrialN'
p1732
I0
sg39
F1.1168325175749487
sg34
g752
(S'\x07\xdf\t\x1c\x11%\x01\x08\xc6\x18'
tRp1733
sa(dp1734
S'trial_loop.thisTrialN'
p1735
I56
sg894
g1353
sS'block_loop.thisIndex'
p1736
g888
sg38
S'right'
p1737
sg58
g62
sS'trial_loop.thisN'
p1738
I56
sg33
g1363
sg63
g64
sS'trial_loop.thisIndex'
p1739
g59
(g98
S'8\x00\x00\x00'
tRp1740
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1741
I0
sg903
g1361
sS'block_loop.thisRepN'
p1742
I0
sg906
g1363
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1743
I0
sg908
g1357
sg55
g11
sS'block_loop.thisTrial'
p1744
Nsg69
Vn
sS'block_loop.thisTrialN'
p1745
I0
sg39
F1.233414434162114
sg34
g752
(S'\x07\xdf\t\x1c\x11%\x07\x0b>\xe8'
tRp1746
sa(dp1747
S'trial_loop.thisTrialN'
p1748
I57
sg894
g949
sS'block_loop.thisIndex'
p1749
g888
sg38
S'right'
p1750
sg58
g62
sS'trial_loop.thisN'
p1751
I57
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p1752
g59
(g98
S'9\x00\x00\x00'
tRp1753
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1754
I0
sg903
g957
sS'block_loop.thisRepN'
p1755
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1756
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1757
Nsg69
Vn
sS'block_loop.thisTrialN'
p1758
I0
sg39
F1.2338794287097699
sg34
g752
(S'\x07\xdf\t\x1c\x11%\r\x0f&\xe8'
tRp1759
sa(dp1760
S'trial_loop.thisTrialN'
p1761
I58
sg894
g1034
sS'block_loop.thisIndex'
p1762
g888
sg38
S'left'
p1763
sg58
g62
sS'trial_loop.thisN'
p1764
I58
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p1765
g59
(g98
S':\x00\x00\x00'
tRp1766
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1767
I0
sg903
g1042
sS'block_loop.thisRepN'
p1768
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1769
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p1770
Nsg69
Vn
sS'block_loop.thisTrialN'
p1771
I0
sg39
F1.4668069157887658
sg34
g752
(S'\x07\xdf\t\x1c\x11%\x14\x04\x07@'
tRp1772
sa(dp1773
S'trial_loop.thisTrialN'
p1774
I59
sg894
S'43-mrporky_pork_crackles_redo.png'
p1775
sS'block_loop.thisIndex'
p1776
g888
sg38
S'left'
p1777
sg58
g62
sS'trial_loop.thisN'
p1778
I59
sg33
g1363
sg63
g64
sS'trial_loop.thisIndex'
p1779
g59
(g98
S';\x00\x00\x00'
tRp1780
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1781
I0
sg903
S'18-mms.png'
p1782
sS'block_loop.thisRepN'
p1783
I0
sg906
g1363
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1784
I0
sg908
g1357
sg55
g11
sS'block_loop.thisTrial'
p1785
Nsg69
Vn
sS'block_loop.thisTrialN'
p1786
I0
sg39
F1.9501666111682425
sg34
g752
(S'\x07\xdf\t\x1c\x11%\x1a\x0b\xbf\xd0'
tRp1787
sa(dp1788
S'trial_loop.thisTrialN'
p1789
I60
sg894
S'6-sour_patch_kids.png'
p1790
sS'block_loop.thisIndex'
p1791
g888
sg38
S'left'
p1792
sg58
g62
sS'trial_loop.thisN'
p1793
I60
sg33
g1183
sg63
g64
sS'trial_loop.thisIndex'
p1794
g59
(g98
S'<\x00\x00\x00'
tRp1795
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1796
I0
sg903
S'38-maltesers.png'
p1797
sS'block_loop.thisRepN'
p1798
I0
sg906
g1183
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1799
I0
sg908
g1177
sg55
g11
sS'block_loop.thisTrial'
p1800
Nsg69
Vn
sS'block_loop.thisTrialN'
p1801
I0
sg39
F1.5497738033882342
sg34
g752
(S'\x07\xdf\t\x1c\x11%!\x0bVX'
tRp1802
sa(dp1803
S'trial_loop.thisTrialN'
p1804
I61
sg894
g1596
sS'block_loop.thisIndex'
p1805
g888
sg38
S'left'
p1806
sg58
g62
sS'trial_loop.thisN'
p1807
I61
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p1808
g59
(g98
S'=\x00\x00\x00'
tRp1809
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1810
I0
sg903
g1603
sS'block_loop.thisRepN'
p1811
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1812
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p1813
Nsg69
Vn
sS'block_loop.thisTrialN'
p1814
I0
sg39
F1.0667525191238383
sg34
g752
(S'\x07\xdf\t\x1c\x11%(\x04\xf9p'
tRp1815
sa(dp1816
S'trial_loop.thisTrialN'
p1817
I62
sg894
g932
sS'block_loop.thisIndex'
p1818
g888
sg38
S'left'
p1819
sg58
g62
sS'trial_loop.thisN'
p1820
I62
sg33
g942
sg63
g64
sS'trial_loop.thisIndex'
p1821
g59
(g98
S'>\x00\x00\x00'
tRp1822
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1823
I0
sg903
g940
sS'block_loop.thisRepN'
p1824
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1825
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p1826
Nsg69
Vn
sS'block_loop.thisTrialN'
p1827
I0
sg39
F1.4838600420589501
sg34
g752
(S'\x07\xdf\t\x1c\x11%.\x06\x80\x10'
tRp1828
sa(dp1829
S'trial_loop.thisTrialN'
p1830
I63
sg894
g1297
sS'block_loop.thisIndex'
p1831
g888
sg38
S'right'
p1832
sg58
g62
sS'trial_loop.thisN'
p1833
I63
sg33
g1160
sg63
g64
sS'trial_loop.thisIndex'
p1834
g59
(g98
S'?\x00\x00\x00'
tRp1835
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1836
I0
sg903
g1304
sS'block_loop.thisRepN'
p1837
I0
sg906
g1160
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1838
I0
sg908
g1167
sg55
g11
sS'block_loop.thisTrial'
p1839
Nsg69
Vn
sS'block_loop.thisTrialN'
p1840
I0
sg39
F1.516756624532718
sg34
g752
(S'\x07\xdf\t\x1c\x11%4\x0eoP'
tRp1841
sa(dp1842
S'trial_loop.thisTrialN'
p1843
I64
sg894
g1338
sS'block_loop.thisIndex'
p1844
g888
sg38
S'left'
p1845
sg58
g62
sS'trial_loop.thisN'
p1846
I64
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1847
g59
(g98
S'@\x00\x00\x00'
tRp1848
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1849
I0
sg903
g1345
sS'block_loop.thisRepN'
p1850
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1851
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1852
Nsg69
Vn
sS'block_loop.thisTrialN'
p1853
I0
sg39
F0.88359626955207204
sg34
g752
(S'\x07\xdf\t\x1c\x11%;\x07\x99P'
tRp1854
sa(dp1855
S'trial_loop.thisTrialN'
p1856
I65
sg894
g915
sS'block_loop.thisIndex'
p1857
g888
sg38
S'left'
p1858
sg58
g62
sS'trial_loop.thisN'
p1859
I65
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1860
g59
(g98
S'A\x00\x00\x00'
tRp1861
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1862
I0
sg903
g923
sS'block_loop.thisRepN'
p1863
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1864
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1865
Nsg69
Vn
sS'block_loop.thisTrialN'
p1866
I0
sg39
F1.6001426059337973
sg34
g752
(S'\x07\xdf\t\x1c\x11&\x05\x06Ex'
tRp1867
sa(dp1868
S'trial_loop.thisTrialN'
p1869
I66
sg894
g1156
sS'block_loop.thisIndex'
p1870
g888
sg38
S'left'
p1871
sg58
g62
sS'trial_loop.thisN'
p1872
I66
sg33
g1160
sg63
g64
sS'trial_loop.thisIndex'
p1873
g59
(g98
S'B\x00\x00\x00'
tRp1874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1875
I0
sg903
g1164
sS'block_loop.thisRepN'
p1876
I0
sg906
g1160
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1877
I0
sg908
g1167
sg55
g11
sS'block_loop.thisTrial'
p1878
Nsg69
Vn
sS'block_loop.thisTrialN'
p1879
I0
sg39
F0.95014237785289879
sg34
g752
(S'\x07\xdf\t\x1c\x11&\x0c\x00\xa0('
tRp1880
sa(dp1881
S'trial_loop.thisTrialN'
p1882
I67
sg894
g1353
sS'block_loop.thisIndex'
p1883
g888
sg38
S'left'
p1884
sg58
g62
sS'trial_loop.thisN'
p1885
I67
sg33
g1363
sg63
g64
sS'trial_loop.thisIndex'
p1886
g59
(g98
S'C\x00\x00\x00'
tRp1887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1888
I0
sg903
g1361
sS'block_loop.thisRepN'
p1889
I0
sg906
g1363
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1890
I0
sg908
g1357
sg55
g11
sS'block_loop.thisTrial'
p1891
Nsg69
Vn
sS'block_loop.thisTrialN'
p1892
I0
sg39
F1.483516214084375
sg34
g752
(S'\x07\xdf\t\x1c\x11&\x12\x00y\x18'
tRp1893
sa(dp1894
S'trial_loop.thisTrialN'
p1895
I68
sg894
g1402
sS'block_loop.thisIndex'
p1896
g888
sg38
S'right'
p1897
sg58
g62
sS'trial_loop.thisN'
p1898
I68
sg33
g1027
sg63
g64
sS'trial_loop.thisIndex'
p1899
g59
(g98
S'D\x00\x00\x00'
tRp1900
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1901
I0
sg903
g1409
sS'block_loop.thisRepN'
p1902
I0
sg906
g1027
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1903
I0
sg908
g1021
sg55
g11
sS'block_loop.thisTrial'
p1904
Nsg69
Vn
sS'block_loop.thisTrialN'
p1905
I0
sg39
F1.0001950069090526
sg34
g752
(S'\x07\xdf\t\x1c\x11&\x18\x08l@'
tRp1906
sa(dp1907
S'trial_loop.thisTrialN'
p1908
I69
sg894
g1458
sS'block_loop.thisIndex'
p1909
g888
sg38
S'right'
p1910
sg58
g62
sS'trial_loop.thisN'
p1911
I69
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1912
g59
(g98
S'E\x00\x00\x00'
tRp1913
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1914
I0
sg903
g1465
sS'block_loop.thisRepN'
p1915
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1916
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1917
Nsg69
Vn
sS'block_loop.thisTrialN'
p1918
I0
sg39
F0.9334909544159018
sg34
g752
(S'\x07\xdf\t\x1c\x11&\x1e\x08\xc20'
tRp1919
sa(dp1920
S'trial_loop.thisTrialN'
p1921
I70
sg894
S'21-nakd_banana_crunch.png'
p1922
sS'block_loop.thisIndex'
p1923
g888
sg38
S'right'
p1924
sg58
g62
sS'trial_loop.thisN'
p1925
I70
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p1926
g59
(g98
S'F\x00\x00\x00'
tRp1927
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1928
I0
sg903
S'1-treacle_cookies.png'
p1929
sS'block_loop.thisRepN'
p1930
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1931
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p1932
Nsg69
Vn
sS'block_loop.thisTrialN'
p1933
I0
sg39
F1.0002101170939568
sg34
g752
(S'\x07\xdf\t\x1c\x11&$\x08\\\xa0'
tRp1934
sa(dp1935
S'trial_loop.thisTrialN'
p1936
I71
sg894
g1207
sS'block_loop.thisIndex'
p1937
g888
sg38
S'left'
p1938
sg58
g62
sS'trial_loop.thisN'
p1939
I71
sg33
g1055
sg63
g64
sS'trial_loop.thisIndex'
p1940
g59
(g98
S'G\x00\x00\x00'
tRp1941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1942
I0
sg903
g1214
sS'block_loop.thisRepN'
p1943
I0
sg906
g1055
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1944
I0
sg908
g1062
sg55
g11
sS'block_loop.thisTrial'
p1945
Nsg69
Vn
sS'block_loop.thisTrialN'
p1946
I0
sg39
F1.7500276544888038
sg34
g752
(S'\x07\xdf\t\x1c\x11&*\x08\xf1\x10'
tRp1947
sa(dp1948
S'trial_loop.thisTrialN'
p1949
I72
sg894
g1094
sS'block_loop.thisIndex'
p1950
g888
sg38
S'right'
p1951
sg58
g62
sS'trial_loop.thisN'
p1952
I72
sg33
g942
sg63
g64
sS'trial_loop.thisIndex'
p1953
g59
(g98
S'H\x00\x00\x00'
tRp1954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1955
I0
sg903
g1101
sS'block_loop.thisRepN'
p1956
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1957
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p1958
Nsg69
Vn
sS'block_loop.thisTrialN'
p1959
I0
sg39
F0.91721471971322899
sg34
g752
(S'\x07\xdf\t\x1c\x11&1\x05n\xa0'
tRp1960
sa(dp1961
S'trial_loop.thisTrialN'
p1962
I73
sg894
g1512
sS'block_loop.thisIndex'
p1963
g888
sg38
S'right'
p1964
sg58
g62
sS'trial_loop.thisN'
p1965
I73
sg33
g1194
sg63
g64
sS'trial_loop.thisIndex'
p1966
g59
(g98
S'I\x00\x00\x00'
tRp1967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1968
I0
sg903
g1519
sS'block_loop.thisRepN'
p1969
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1970
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p1971
Nsg69
Vn
sS'block_loop.thisTrialN'
p1972
I0
sg39
F1.0334522381344868
sg34
g752
(S'\x07\xdf\t\x1c\x11&7\x04\xcex'
tRp1973
sa(dp1974
S'trial_loop.thisTrialN'
p1975
I74
sg894
g1017
sS'block_loop.thisIndex'
p1976
g888
sg38
S'left'
p1977
sg58
g62
sS'trial_loop.thisN'
p1978
I74
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p1979
g59
(g98
S'J\x00\x00\x00'
tRp1980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1981
I0
sg903
g1025
sS'block_loop.thisRepN'
p1982
I0
sg906
g1027
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1983
I0
sg908
g1021
sg55
g11
sS'block_loop.thisTrial'
p1984
Nsg69
Vn
sS'block_loop.thisTrialN'
p1985
I0
sg39
F0.83341392098373035
sg34
g752
(S"\x07\xdf\t\x1c\x11'\x01\x05\xdc\x00"
tRp1986
sa(dp1987
S'trial_loop.thisTrialN'
p1988
I75
sg894
g1000
sS'block_loop.thisIndex'
p1989
g888
sg38
S'right'
p1990
sg58
g62
sS'trial_loop.thisN'
p1991
I75
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p1992
g59
(g98
S'K\x00\x00\x00'
tRp1993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1994
I0
sg903
g1008
sS'block_loop.thisRepN'
p1995
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1996
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p1997
Nsg69
Vn
sS'block_loop.thisTrialN'
p1998
I0
sg39
F0.96685766320297262
sg34
g752
(S"\x07\xdf\t\x1c\x11'\x07\x03\xcc\xa8"
tRp1999
sa(dp2000
S'trial_loop.thisTrialN'
p2001
I76
sg894
g1280
sS'block_loop.thisIndex'
p2002
g888
sg38
S'right'
p2003
sg58
g62
sS'trial_loop.thisN'
p2004
I76
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p2005
g59
(g98
S'L\x00\x00\x00'
tRp2006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2007
I0
sg903
g1288
sS'block_loop.thisRepN'
p2008
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2009
I0
sg908
g1291
sg55
g11
sS'block_loop.thisTrial'
p2010
Nsg69
Vn
sS'block_loop.thisTrialN'
p2011
I0
sg39
F2.0002220912065241
sg34
g752
(S"\x07\xdf\t\x1c\x11'\r\x03\xa9\x80"
tRp2012
sa(dp2013
S'trial_loop.thisTrialN'
p2014
I77
sg894
g1512
sS'block_loop.thisIndex'
p2015
g888
sg38
S'right'
p2016
sg58
g62
sS'trial_loop.thisN'
p2017
I77
sg33
g1201
sg63
g64
sS'trial_loop.thisIndex'
p2018
g59
(g98
S'M\x00\x00\x00'
tRp2019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2020
I0
sg903
g1519
sS'block_loop.thisRepN'
p2021
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2022
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p2023
Nsg69
Vn
sS'block_loop.thisTrialN'
p2024
I0
sg39
F1.2172445409451029
sg34
g752
(S"\x07\xdf\t\x1c\x11'\x14\x0428"
tRp2025
sa(dp2026
S'trial_loop.thisTrialN'
p2027
I78
sg894
g1540
sS'block_loop.thisIndex'
p2028
g888
sg38
S'right'
p2029
sg58
g62
sS'trial_loop.thisN'
p2030
I78
sg33
g1551
sg63
g64
sS'trial_loop.thisIndex'
p2031
g59
(g98
S'N\x00\x00\x00'
tRp2032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2033
I0
sg903
g1548
sS'block_loop.thisRepN'
p2034
I0
sg906
g1544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2035
I0
sg908
g1551
sg55
g11
sS'block_loop.thisTrial'
p2036
Nsg69
Vn
sS'block_loop.thisTrialN'
p2037
I0
sg39
F1.7668256182041659
sg34
g752
(S"\x07\xdf\t\x1c\x11'\x1a\x08\x1a8"
tRp2038
sa(dp2039
S'trial_loop.thisTrialN'
p2040
I79
sg894
g983
sS'block_loop.thisIndex'
p2041
g888
sg38
S'left'
p2042
sg58
g62
sS'trial_loop.thisN'
p2043
I79
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2044
g59
(g98
S'O\x00\x00\x00'
tRp2045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2046
I0
sg903
g991
sS'block_loop.thisRepN'
p2047
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2048
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p2049
Nsg69
Vn
sS'block_loop.thisTrialN'
p2050
I0
sg39
F1.0834190527421015
sg34
g752
(S"\x07\xdf\t\x1c\x11'!\x05\x14\xc8"
tRp2051
sa(dp2052
S'trial_loop.thisTrialN'
p2053
I80
sg894
g1596
sS'block_loop.thisIndex'
p2054
g888
sg38
S'left'
p2055
sg58
g62
sS'trial_loop.thisN'
p2056
I80
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2057
g59
(g98
S'P\x00\x00\x00'
tRp2058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2059
I0
sg903
g1603
sS'block_loop.thisRepN'
p2060
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2061
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2062
Nsg69
Vn
sS'block_loop.thisTrialN'
p2063
I0
sg39
F1.0835587506808224
sg34
g752
(S"\x07\xdf\t\x1c\x11''\x06\xd6\x00"
tRp2064
sa(dp2065
S'trial_loop.thisTrialN'
p2066
I81
sg894
g1922
sS'block_loop.thisIndex'
p2067
g888
sg38
S'right'
p2068
sg58
g62
sS'trial_loop.thisN'
p2069
I81
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p2070
g59
(g98
S'Q\x00\x00\x00'
tRp2071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2072
I0
sg903
g1929
sS'block_loop.thisRepN'
p2073
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2074
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p2075
Nsg69
Vn
sS'block_loop.thisTrialN'
p2076
I0
sg39
F0.76679938920642599
sg34
g752
(S"\x07\xdf\t\x1c\x11'-\x08\x978"
tRp2077
sa(dp2078
S'trial_loop.thisTrialN'
p2079
I82
sg894
S'13-mccoys_steak_crisps.png'
p2080
sS'block_loop.thisIndex'
p2081
g888
sg38
S'right'
p2082
sg58
g62
sS'trial_loop.thisN'
p2083
I82
sg33
g1544
sg63
g64
sS'trial_loop.thisIndex'
p2084
g59
(g98
S'R\x00\x00\x00'
tRp2085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2086
I0
sg903
S'3-ellas_strawberries_apples.png'
p2087
sS'block_loop.thisRepN'
p2088
I0
sg906
g1544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2089
I0
sg908
g1551
sg55
g11
sS'block_loop.thisTrial'
p2090
Nsg69
Vn
sS'block_loop.thisTrialN'
p2091
I0
sg39
F0.95023417934862664
sg34
g752
(S"\x07\xdf\t\x1c\x11'3\x05\x95\xb0"
tRp2092
sa(dp2093
S'trial_loop.thisTrialN'
p2094
I83
sg894
g1265
sS'block_loop.thisIndex'
p2095
g888
sg38
S'right'
p2096
sg58
g62
sS'trial_loop.thisN'
p2097
I83
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2098
g59
(g98
S'S\x00\x00\x00'
tRp2099
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2100
I0
sg903
g1272
sS'block_loop.thisRepN'
p2101
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2102
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p2103
Nsg69
Vn
sS'block_loop.thisTrialN'
p2104
I0
sg39
F0.95013296962497407
sg34
g752
(S"\x07\xdf\t\x1c\x11'9\x054\x08"
tRp2105
sa(dp2106
S'trial_loop.thisTrialN'
p2107
I84
sg894
g1248
sS'block_loop.thisIndex'
p2108
g888
sg38
S'left'
p2109
sg58
g62
sS'trial_loop.thisN'
p2110
I84
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p2111
g59
(g98
S'T\x00\x00\x00'
tRp2112
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2113
I0
sg903
g1256
sS'block_loop.thisRepN'
p2114
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2115
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p2116
Nsg69
Vn
sS'block_loop.thisTrialN'
p2117
I0
sg39
F1.8669277402441367
sg34
g752
(S'\x07\xdf\t\x1c\x11(\x03\x05\x0c\xf8'
tRp2118
sa(dp2119
S'trial_loop.thisTrialN'
p2120
I85
sg894
g1126
sS'block_loop.thisIndex'
p2121
g888
sg38
S'right'
p2122
sg58
g62
sS'trial_loop.thisN'
p2123
I85
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2124
g59
(g98
S'U\x00\x00\x00'
tRp2125
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2126
I0
sg903
g1133
sS'block_loop.thisRepN'
p2127
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2128
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2129
Nsg69
Vn
sS'block_loop.thisTrialN'
p2130
I0
sg39
F1.0835048671906407
sg34
g752
(S'\x07\xdf\t\x1c\x11(\n\x03v\xb8'
tRp2131
sa(dp2132
S'trial_loop.thisTrialN'
p2133
I86
sg894
g1353
sS'block_loop.thisIndex'
p2134
g888
sg38
S'left'
p2135
sg58
g62
sS'trial_loop.thisN'
p2136
I86
sg33
g1363
sg63
g64
sS'trial_loop.thisIndex'
p2137
g59
(g98
S'V\x00\x00\x00'
tRp2138
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2139
I0
sg903
g1361
sS'block_loop.thisRepN'
p2140
I0
sg906
g1363
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2141
I0
sg908
g1357
sg55
g11
sS'block_loop.thisTrial'
p2142
Nsg69
Vn
sS'block_loop.thisTrialN'
p2143
I0
sg39
F1.7668358817281842
sg34
g752
(S'\x07\xdf\t\x1c\x11(\x10\x057\xf0'
tRp2144
sa(dp2145
S'trial_loop.thisTrialN'
p2146
I87
sg894
g1141
sS'block_loop.thisIndex'
p2147
g888
sg38
S'left'
p2148
sg58
g62
sS'trial_loop.thisN'
p2149
I87
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2150
g59
(g98
S'W\x00\x00\x00'
tRp2151
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2152
I0
sg903
g1148
sS'block_loop.thisRepN'
p2153
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2154
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2155
Nsg69
Vn
sS'block_loop.thisTrialN'
p2156
I0
sg39
F1.3001920418937516
sg34
g752
(S'\x07\xdf\t\x1c\x11(\x17\x02.\x98'
tRp2157
sa(dp2158
S'trial_loop.thisTrialN'
p2159
I88
sg894
g1126
sS'block_loop.thisIndex'
p2160
g888
sg38
S'right'
p2161
sg58
g62
sS'trial_loop.thisN'
p2162
I88
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2163
g59
(g98
S'X\x00\x00\x00'
tRp2164
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2165
I0
sg903
g1133
sS'block_loop.thisRepN'
p2166
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2167
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2168
Nsg69
Vn
sS'block_loop.thisTrialN'
p2169
I0
sg39
F0.70010303435265087
sg34
g752
(S'\x07\xdf\t\x1c\x11(\x1d\x07GH'
tRp2170
sa(dp2171
S'trial_loop.thisTrialN'
p2172
I89
sg894
g1338
sS'block_loop.thisIndex'
p2173
g888
sg38
S'left'
p2174
sg58
g62
sS'trial_loop.thisN'
p2175
I89
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2176
g59
(g98
S'Y\x00\x00\x00'
tRp2177
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2178
I0
sg903
g1345
sS'block_loop.thisRepN'
p2179
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2180
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2181
Nsg69
Vn
sS'block_loop.thisTrialN'
p2182
I0
sg39
F1.6000870118550665
sg34
g752
(S'\x07\xdf\t\x1c\x11(#\x03S\x90'
tRp2183
sa(dp2184
S'trial_loop.thisTrialN'
p2185
I90
sg894
g1207
sS'block_loop.thisIndex'
p2186
g888
sg38
S'left'
p2187
sg58
g62
sS'trial_loop.thisN'
p2188
I90
sg33
g1055
sg63
g64
sS'trial_loop.thisIndex'
p2189
g59
(g98
S'Z\x00\x00\x00'
tRp2190
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2191
I0
sg903
g1214
sS'block_loop.thisRepN'
p2192
I0
sg906
g1055
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2193
I0
sg908
g1062
sg55
g11
sS'block_loop.thisTrial'
p2194
Nsg69
Vn
sS'block_loop.thisTrialN'
p2195
I0
sg39
F1.0500289659394184
sg34
g752
(S'\x07\xdf\t\x1c\x11()\x0c\xf0\x80'
tRp2196
sa(dp2197
S'trial_loop.thisTrialN'
p2198
I91
sg894
g1790
sS'block_loop.thisIndex'
p2199
g888
sg38
S'left'
p2200
sg58
g62
sS'trial_loop.thisN'
p2201
I91
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p2202
g59
(g98
S'[\x00\x00\x00'
tRp2203
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2204
I0
sg903
g1797
sS'block_loop.thisRepN'
p2205
I0
sg906
g1183
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2206
I0
sg908
g1177
sg55
g11
sS'block_loop.thisTrial'
p2207
Nsg69
Vn
sS'block_loop.thisTrialN'
p2208
I0
sg39
F1.6665592798199214
sg34
g752
(S'\x07\xdf\t\x1c\x11(/\x0e8\xa0'
tRp2209
sa(dp2210
S'trial_loop.thisTrialN'
p2211
I92
sg894
g1338
sS'block_loop.thisIndex'
p2212
g888
sg38
S'left'
p2213
sg58
g62
sS'trial_loop.thisN'
p2214
I92
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2215
g59
(g98
S'\\\x00\x00\x00'
tRp2216
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2217
I0
sg903
g1345
sS'block_loop.thisRepN'
p2218
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2219
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2220
Nsg69
Vn
sS'block_loop.thisTrialN'
p2221
I0
sg39
F0.81683405710282386
sg34
g752
(S'\x07\xdf\t\x1c\x11(6\t\x85\x80'
tRp2222
sa(dp2223
S'trial_loop.thisTrialN'
p2224
I93
sg894
g1775
sS'block_loop.thisIndex'
p2225
g888
sg38
S'right'
p2226
sg58
g62
sS'trial_loop.thisN'
p2227
I93
sg33
g1363
sg63
g64
sS'trial_loop.thisIndex'
p2228
g59
(g98
S']\x00\x00\x00'
tRp2229
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2230
I0
sg903
g1782
sS'block_loop.thisRepN'
p2231
I0
sg906
g1363
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2232
I0
sg908
g1357
sg55
g11
sS'block_loop.thisTrial'
p2233
Nsg69
Vn
sS'block_loop.thisTrialN'
p2234
I0
sg39
F1.249914470652584
sg34
g752
(S'\x07\xdf\t\x1c\x11)\x00\x07;\x90'
tRp2235
sa(dp2236
S'trial_loop.thisTrialN'
p2237
I94
sg894
g1458
sS'block_loop.thisIndex'
p2238
g888
sg38
S'right'
p2239
sg58
g62
sS'trial_loop.thisN'
p2240
I94
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p2241
g59
(g98
S'^\x00\x00\x00'
tRp2242
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2243
I0
sg903
g1465
sS'block_loop.thisRepN'
p2244
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2245
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2246
Nsg69
Vn
sS'block_loop.thisTrialN'
p2247
I0
sg39
F1.1335135911831458
sg34
g752
(S'\x07\xdf\t\x1c\x11)\x06\x0b\x9c\xa8'
tRp2248
sa(dp2249
S'trial_loop.thisTrialN'
p2250
I95
sg894
g1207
sS'block_loop.thisIndex'
p2251
g888
sg38
S'left'
p2252
sg58
g62
sS'trial_loop.thisN'
p2253
I95
sg33
g1055
sg63
g64
sS'trial_loop.thisIndex'
p2254
g59
(g98
S'_\x00\x00\x00'
tRp2255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2256
I0
sg903
g1214
sS'block_loop.thisRepN'
p2257
I0
sg906
g1055
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2258
I0
sg908
g1062
sg55
g11
sS'block_loop.thisTrial'
p2259
Nsg69
Vn
sS'block_loop.thisTrialN'
p2260
I0
sg39
F1.1667374659591587
sg34
g752
(S'\x07\xdf\t\x1c\x11)\x0c\x0e\x15x'
tRp2261
sa(dp2262
S'trial_loop.thisTrialN'
p2263
I96
sg894
g1402
sS'block_loop.thisIndex'
p2264
g888
sg38
S'right'
p2265
sg58
g62
sS'trial_loop.thisN'
p2266
I96
sg33
g1027
sg63
g64
sS'trial_loop.thisIndex'
p2267
g59
(g98
S'`\x00\x00\x00'
tRp2268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2269
I0
sg903
g1409
sS'block_loop.thisRepN'
p2270
I0
sg906
g1027
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2271
I0
sg908
g1021
sg55
g11
sS'block_loop.thisTrial'
p2272
Nsg69
Vn
sS'block_loop.thisTrialN'
p2273
I0
sg39
F0.96676671699606231
sg34
g752
(S'\x07\xdf\t\x1c\x11)\x13\x02\x03\xa0'
tRp2274
sa(dp2275
S'trial_loop.thisTrialN'
p2276
I97
sg894
g1922
sS'block_loop.thisIndex'
p2277
g888
sg38
S'right'
p2278
sg58
g62
sS'trial_loop.thisN'
p2279
I97
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p2280
g59
(g98
S'a\x00\x00\x00'
tRp2281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2282
I0
sg903
g1929
sS'block_loop.thisRepN'
p2283
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2284
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p2285
Nsg69
Vn
sS'block_loop.thisTrialN'
p2286
I0
sg39
F0.91723268087662291
sg34
g752
(S'\x07\xdf\t\x1c\x11)\x19\x01\xdc\x90'
tRp2287
sa(dp2288
S'trial_loop.thisTrialN'
p2289
I98
sg894
g1265
sS'block_loop.thisIndex'
p2290
g888
sg38
S'right'
p2291
sg58
g62
sS'trial_loop.thisN'
p2292
I98
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2293
g59
(g98
S'b\x00\x00\x00'
tRp2294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2295
I0
sg903
g1272
sS'block_loop.thisRepN'
p2296
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2297
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p2298
Nsg69
Vn
sS'block_loop.thisTrialN'
p2299
I0
sg39
F0.78352151690341998
sg34
g752
(S'\x07\xdf\t\x1c\x11)\x1f\x01@P'
tRp2300
sa(dp2301
S'trial_loop.thisTrialN'
p2302
I99
sg894
g915
sS'block_loop.thisIndex'
p2303
g888
sg38
S'left'
p2304
sg58
g62
sS'trial_loop.thisN'
p2305
I99
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p2306
g59
(g98
S'c\x00\x00\x00'
tRp2307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2308
I0
sg903
g923
sS'block_loop.thisRepN'
p2309
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2310
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2311
Nsg69
Vn
sS'block_loop.thisTrialN'
p2312
I0
sg39
F0.83351456051605055
sg34
g752
(S'\x07\xdf\t\x1c\x11)$\r\xbb\xa0'
tRp2313
sa(dp2314
S'trial_loop.thisTrialN'
p2315
I100
sg894
g1540
sS'block_loop.thisIndex'
p2316
g888
sg38
S'right'
p2317
sg58
g62
sS'trial_loop.thisN'
p2318
I100
sg33
g1551
sg63
g64
sS'trial_loop.thisIndex'
p2319
g59
(g98
S'd\x00\x00\x00'
tRp2320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2321
I0
sg903
g1548
sS'block_loop.thisRepN'
p2322
I0
sg906
g1544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2323
I0
sg908
g1551
sg55
g11
sS'block_loop.thisTrial'
p2324
Nsg69
Vn
sS'block_loop.thisTrialN'
p2325
I0
sg39
F1.1501992263583816
sg34
g752
(S'\x07\xdf\t\x1c\x11)*\x0b\xb00'
tRp2326
sa(dp2327
S'trial_loop.thisTrialN'
p2328
I101
sg894
g1109
sS'block_loop.thisIndex'
p2329
g888
sg38
S'left'
p2330
sg58
g62
sS'trial_loop.thisN'
p2331
I101
sg33
g1113
sg63
g64
sS'trial_loop.thisIndex'
p2332
g59
(g98
S'e\x00\x00\x00'
tRp2333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2334
I0
sg903
g1117
sS'block_loop.thisRepN'
p2335
I0
sg906
g1113
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2336
I0
sg908
g1120
sg55
g11
sS'block_loop.thisTrial'
p2337
Nsg69
Vn
sS'block_loop.thisTrialN'
p2338
I0
sg39
F1.4335177536122501
sg34
g752
(S'\x07\xdf\t\x1c\x11)0\x0eg\x80'
tRp2339
sa(dp2340
S'trial_loop.thisTrialN'
p2341
I102
sg894
g1353
sS'block_loop.thisIndex'
p2342
g888
sg38
S'left'
p2343
sg58
g62
sS'trial_loop.thisN'
p2344
I102
sg33
g1363
sg63
g64
sS'trial_loop.thisIndex'
p2345
g59
(g98
S'f\x00\x00\x00'
tRp2346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2347
I0
sg903
g1361
sS'block_loop.thisRepN'
p2348
I0
sg906
g1363
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2349
I0
sg908
g1357
sg55
g11
sS'block_loop.thisTrial'
p2350
Nsg69
Vn
sS'block_loop.thisTrialN'
p2351
I0
sg39
F1.1335492284124484
sg34
g752
(S'\x07\xdf\t\x1c\x11)7\x06`\xd0'
tRp2352
sa(dp2353
S'trial_loop.thisTrialN'
p2354
I103
sg894
g1000
sS'block_loop.thisIndex'
p2355
g888
sg38
S'right'
p2356
sg58
g62
sS'trial_loop.thisN'
p2357
I103
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2358
g59
(g98
S'g\x00\x00\x00'
tRp2359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2360
I0
sg903
g1008
sS'block_loop.thisRepN'
p2361
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2362
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2363
Nsg69
Vn
sS'block_loop.thisTrialN'
p2364
I0
sg39
F0.96665153747744625
sg34
g752
(S'\x07\xdf\t\x1c\x11*\x01\x08\xd9\xa0'
tRp2365
sa(dp2366
S'trial_loop.thisTrialN'
p2367
I104
sg894
g932
sS'block_loop.thisIndex'
p2368
g888
sg38
S'left'
p2369
sg58
g62
sS'trial_loop.thisN'
p2370
I104
sg33
g942
sg63
g64
sS'trial_loop.thisIndex'
p2371
g59
(g98
S'h\x00\x00\x00'
tRp2372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2373
I0
sg903
g940
sS'block_loop.thisRepN'
p2374
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2375
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p2376
Nsg69
Vn
sS'block_loop.thisTrialN'
p2377
I0
sg39
F1.9834366717914236
sg34
g752
(S'\x07\xdf\t\x1c\x11*\x07\x08\xb2\x90'
tRp2378
sa(dp2379
S'trial_loop.thisTrialN'
p2380
I105
sg894
g1141
sS'block_loop.thisIndex'
p2381
g888
sg38
S'left'
p2382
sg58
g62
sS'trial_loop.thisN'
p2383
I105
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2384
g59
(g98
S'i\x00\x00\x00'
tRp2385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2386
I0
sg903
g1148
sS'block_loop.thisRepN'
p2387
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2388
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2389
Nsg69
Vn
sS'block_loop.thisTrialN'
p2390
I0
sg39
F0.81684660140672349
sg34
g752
(S'\x07\xdf\t\x1c\x11*\x0e\t\x00\xb0'
tRp2391
sa(dp2392
S'trial_loop.thisTrialN'
p2393
I106
sg894
g1051
sS'block_loop.thisIndex'
p2394
g888
sg38
S'right'
p2395
sg58
g62
sS'trial_loop.thisN'
p2396
I106
sg33
g1062
sg63
g64
sS'trial_loop.thisIndex'
p2397
g59
(g98
S'j\x00\x00\x00'
tRp2398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2399
I0
sg903
g1059
sS'block_loop.thisRepN'
p2400
I0
sg906
g1055
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2401
I0
sg908
g1062
sg55
g11
sS'block_loop.thisTrial'
p2402
Nsg69
Vn
sS'block_loop.thisTrialN'
p2403
I0
sg39
F1.150104573880526
sg34
g752
(S'\x07\xdf\t\x1c\x11*\x14\x06\xb6\xc0'
tRp2404
sa(dp2405
S'trial_loop.thisTrialN'
p2406
I107
sg894
g1611
sS'block_loop.thisIndex'
p2407
g888
sg38
S'left'
p2408
sg58
g62
sS'trial_loop.thisN'
p2409
I107
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p2410
g59
(g98
S'k\x00\x00\x00'
tRp2411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2412
I0
sg903
g1618
sS'block_loop.thisRepN'
p2413
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2414
I0
sg908
g1291
sg55
g11
sS'block_loop.thisTrial'
p2415
Nsg69
Vn
sS'block_loop.thisTrialN'
p2416
I0
sg39
F2.2001817213531467
sg34
g752
(S'\x07\xdf\t\x1c\x11*\x1a\t\xa8\xa8'
tRp2417
sa(dp2418
S'trial_loop.thisTrialN'
p2419
I108
sg894
g1207
sS'block_loop.thisIndex'
p2420
g888
sg38
S'left'
p2421
sg58
g62
sS'trial_loop.thisN'
p2422
I108
sg33
g1055
sg63
g64
sS'trial_loop.thisIndex'
p2423
g59
(g98
S'l\x00\x00\x00'
tRp2424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2425
I0
sg903
g1214
sS'block_loop.thisRepN'
p2426
I0
sg906
g1055
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2427
I0
sg908
g1062
sg55
g11
sS'block_loop.thisTrial'
p2428
Nsg69
Vn
sS'block_loop.thisTrialN'
p2429
I0
sg39
F1.0999843766367121
sg34
g752
(S'\x07\xdf\t\x1c\x11*!\r\x0f\xc0'
tRp2430
sa(dp2431
S'trial_loop.thisTrialN'
p2432
I109
sg894
g1387
sS'block_loop.thisIndex'
p2433
g888
sg38
S'right'
p2434
sg58
g62
sS'trial_loop.thisN'
p2435
I109
sg33
g1120
sg63
g64
sS'trial_loop.thisIndex'
p2436
g59
(g98
S'm\x00\x00\x00'
tRp2437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2438
I0
sg903
g1394
sS'block_loop.thisRepN'
p2439
I0
sg906
g1113
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2440
I0
sg908
g1120
sg55
g11
sS'block_loop.thisTrial'
p2441
Nsg69
Vn
sS'block_loop.thisTrialN'
p2442
I0
sg39
F0.95009989827667596
sg34
g752
(S"\x07\xdf\t\x1c\x11*'\x0f\x0fx"
tRp2443
sa(dp2444
S'trial_loop.thisTrialN'
p2445
I110
sg894
g1596
sS'block_loop.thisIndex'
p2446
g888
sg38
S'left'
p2447
sg58
g62
sS'trial_loop.thisN'
p2448
I110
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2449
g59
(g98
S'n\x00\x00\x00'
tRp2450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2451
I0
sg903
g1603
sS'block_loop.thisRepN'
p2452
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2453
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2454
Nsg69
Vn
sS'block_loop.thisTrialN'
p2455
I0
sg39
F0.95012441668950487
sg34
g752
(S'\x07\xdf\t\x1c\x11*-\x0e\xe8h'
tRp2456
sa(dp2457
S'trial_loop.thisTrialN'
p2458
I111
sg894
g1665
sS'block_loop.thisIndex'
p2459
g888
sg38
S'left'
p2460
sg58
g62
sS'trial_loop.thisN'
p2461
I111
sg33
g1374
sg63
g64
sS'trial_loop.thisIndex'
p2462
g59
(g98
S'o\x00\x00\x00'
tRp2463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2464
I0
sg903
g1672
sS'block_loop.thisRepN'
p2465
I0
sg906
g1380
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2466
I0
sg908
g1374
sg55
g11
sS'block_loop.thisTrial'
p2467
Nsg69
Vn
sS'block_loop.thisTrialN'
p2468
I0
sg39
F1.43351433243879
sg34
g752
(S'\x07\xdf\t\x1c\x11*3\x0e\xc5@'
tRp2469
sa(dp2470
S'trial_loop.thisTrialN'
p2471
I112
sg894
g1540
sS'block_loop.thisIndex'
p2472
g888
sg38
S'left'
p2473
sg58
g62
sS'trial_loop.thisN'
p2474
I112
sg33
g1544
sg63
g64
sS'trial_loop.thisIndex'
p2475
g59
(g98
S'p\x00\x00\x00'
tRp2476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2477
I0
sg903
g1548
sS'block_loop.thisRepN'
p2478
I0
sg906
g1544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2479
I0
sg908
g1551
sg55
g11
sS'block_loop.thisTrial'
p2480
Nsg69
Vn
sS'block_loop.thisTrialN'
p2481
I0
sg39
F0.81686598805754329
sg34
g752
(S'\x07\xdf\t\x1c\x11*:\x06\x80\x10'
tRp2482
sa(dp2483
S'trial_loop.thisTrialN'
p2484
I113
sg894
g1387
sS'block_loop.thisIndex'
p2485
g888
sg38
S'right'
p2486
sg58
g62
sS'trial_loop.thisN'
p2487
I113
sg33
g1113
sg63
g64
sS'trial_loop.thisIndex'
p2488
g59
(g98
S'q\x00\x00\x00'
tRp2489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2490
I0
sg903
g1394
sS'block_loop.thisRepN'
p2491
I0
sg906
g1113
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2492
I0
sg908
g1120
sg55
g11
sS'block_loop.thisTrial'
p2493
Nsg69
Vn
sS'block_loop.thisTrialN'
p2494
I0
sg39
F2.4168361098054447
sg34
g752
(S'\x07\xdf\t\x1c\x11+\x04\x046 '
tRp2495
sa(dp2496
S'trial_loop.thisTrialN'
p2497
I114
sg894
g1417
sS'block_loop.thisIndex'
p2498
g888
sg38
S'left'
p2499
sg58
g62
sS'trial_loop.thisN'
p2500
I114
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p2501
g59
(g98
S'r\x00\x00\x00'
tRp2502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2503
I0
sg903
g1424
sS'block_loop.thisRepN'
p2504
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2505
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p2506
Nsg69
Vn
sS'block_loop.thisTrialN'
p2507
I0
sg39
F1.7500216674343392
sg34
g752
(S'\x07\xdf\t\x1c\x11+\x0b\x0b/H'
tRp2508
sa(dp2509
S'trial_loop.thisTrialN'
p2510
I115
sg894
g1922
sS'block_loop.thisIndex'
p2511
g888
sg38
S'right'
p2512
sg58
g62
sS'trial_loop.thisN'
p2513
I115
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p2514
g59
(g98
S's\x00\x00\x00'
tRp2515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2516
I0
sg903
g1929
sS'block_loop.thisRepN'
p2517
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2518
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p2519
Nsg69
Vn
sS'block_loop.thisTrialN'
p2520
I0
sg39
F0.81687910256005125
sg34
g752
(S'\x07\xdf\t\x1c\x11+\x12\x07\xac\xd8'
tRp2521
sa(dp2522
S'trial_loop.thisTrialN'
p2523
I116
sg894
g1280
sS'block_loop.thisIndex'
p2524
g888
sg38
S'right'
p2525
sg58
g62
sS'trial_loop.thisN'
p2526
I116
sg33
g1291
sg63
g64
sS'trial_loop.thisIndex'
p2527
g59
(g98
S't\x00\x00\x00'
tRp2528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2529
I0
sg903
g1288
sS'block_loop.thisRepN'
p2530
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2531
I0
sg908
g1291
sg55
g11
sS'block_loop.thisTrial'
p2532
Nsg69
Vn
sS'block_loop.thisTrialN'
p2533
I0
sg39
F1.4668100518647407
sg34
g752
(S'\x07\xdf\t\x1c\x11+\x18\x05b\xe8'
tRp2534
sa(dp2535
S'trial_loop.thisTrialN'
p2536
I117
sg894
g2080
sS'block_loop.thisIndex'
p2537
g888
sg38
S'left'
p2538
sg58
g62
sS'trial_loop.thisN'
p2539
I117
sg33
g1544
sg63
g64
sS'trial_loop.thisIndex'
p2540
g59
(g98
S'u\x00\x00\x00'
tRp2541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2542
I0
sg903
g2087
sS'block_loop.thisRepN'
p2543
I0
sg906
g1544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2544
I0
sg908
g1551
sg55
g11
sS'block_loop.thisTrial'
p2545
Nsg69
Vn
sS'block_loop.thisTrialN'
p2546
I0
sg39
F1.2338777181212208
sg34
g752
(S'\x07\xdf\t\x1c\x11+\x1e\r\x1bx'
tRp2547
sa(dp2548
S'trial_loop.thisTrialN'
p2549
I118
sg894
g966
sS'block_loop.thisIndex'
p2550
g888
sg38
S'right'
p2551
sg58
g62
sS'trial_loop.thisN'
p2552
I118
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2553
g59
(g98
S'v\x00\x00\x00'
tRp2554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2555
I0
sg903
g974
sS'block_loop.thisRepN'
p2556
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2557
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2558
Nsg69
Vn
sS'block_loop.thisTrialN'
p2559
I0
sg39
F0.88360026092050248
sg34
g752
(S'\x07\xdf\t\x1c\x11+%\x01\xfb\xd0'
tRp2560
sa(dp2561
S'trial_loop.thisTrialN'
p2562
I119
sg894
g1297
sS'block_loop.thisIndex'
p2563
g888
sg38
S'right'
p2564
sg58
g62
sS'trial_loop.thisN'
p2565
I119
sg33
g1160
sg63
g64
sS'trial_loop.thisIndex'
p2566
g59
(g98
S'w\x00\x00\x00'
tRp2567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2568
I0
sg903
g1304
sS'block_loop.thisRepN'
p2569
I0
sg906
g1160
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2570
I0
sg908
g1167
sg55
g11
sS'block_loop.thisTrial'
p2571
Nsg69
Vn
sS'block_loop.thisTrialN'
p2572
I0
sg39
F1.5167708794215287
sg34
g752
(S'\x07\xdf\t\x1c\x11++\x00\xa4\x10'
tRp2573
sa(dp2574
S'trial_loop.thisTrialN'
p2575
I120
sg894
g1596
sS'block_loop.thisIndex'
p2576
g888
sg38
S'right'
p2577
sg58
g62
sS'trial_loop.thisN'
p2578
I120
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2579
g59
(g98
S'x\x00\x00\x00'
tRp2580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2581
I0
sg903
g1603
sS'block_loop.thisRepN'
p2582
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2583
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2584
Nsg69
Vn
sS'block_loop.thisTrialN'
p2585
I0
sg39
F1.3167533744199318
sg34
g752
(S'\x07\xdf\t\x1c\x11+1\t\x10P'
tRp2586
sa(dp2587
S'trial_loop.thisTrialN'
p2588
I121
sg894
g1156
sS'block_loop.thisIndex'
p2589
g888
sg38
S'left'
p2590
sg58
g62
sS'trial_loop.thisN'
p2591
I121
sg33
g1160
sg63
g64
sS'trial_loop.thisIndex'
p2592
g59
(g98
S'y\x00\x00\x00'
tRp2593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2594
I0
sg903
g1164
sS'block_loop.thisRepN'
p2595
I0
sg906
g1160
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2596
I0
sg908
g1167
sg55
g11
sS'block_loop.thisTrial'
p2597
Nsg69
Vn
sS'block_loop.thisTrialN'
p2598
I0
sg39
F1.1501849714659329
sg34
g752
(S'\x07\xdf\t\x1c\x11+7\x0ec\x98'
tRp2599
sa(dp2600
S'trial_loop.thisTrialN'
p2601
I122
sg894
g1387
sS'block_loop.thisIndex'
p2602
g888
sg38
S'right'
p2603
sg58
g62
sS'trial_loop.thisN'
p2604
I122
sg33
g1120
sg63
g64
sS'trial_loop.thisIndex'
p2605
g59
(g98
S'z\x00\x00\x00'
tRp2606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2607
I0
sg903
g1394
sS'block_loop.thisRepN'
p2608
I0
sg906
g1113
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2609
I0
sg908
g1120
sg55
g11
sS'block_loop.thisTrial'
p2610
Nsg69
Vn
sS'block_loop.thisTrialN'
p2611
I0
sg39
F1.0835439255934034
sg34
g752
(S'\x07\xdf\t\x1c\x11,\x02\x01\xd8\xa8'
tRp2612
sa(dp2613
S'trial_loop.thisTrialN'
p2614
I123
sg894
g932
sS'block_loop.thisIndex'
p2615
g888
sg38
S'left'
p2616
sg58
g62
sS'trial_loop.thisN'
p2617
I123
sg33
g942
sg63
g64
sS'trial_loop.thisIndex'
p2618
g59
(g98
S'{\x00\x00\x00'
tRp2619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2620
I0
sg903
g940
sS'block_loop.thisRepN'
p2621
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2622
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p2623
Nsg69
Vn
sS'block_loop.thisTrialN'
p2624
I0
sg39
F1.1668688960526197
sg34
g752
(S'\x07\xdf\t\x1c\x11,\x08\x03\x99\xe0'
tRp2625
sa(dp2626
S'trial_loop.thisTrialN'
p2627
I124
sg894
g895
sS'block_loop.thisIndex'
p2628
g888
sg38
S'left'
p2629
sg58
g62
sS'trial_loop.thisN'
p2630
I124
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2631
g59
(g98
S'|\x00\x00\x00'
tRp2632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2633
I0
sg903
g904
sS'block_loop.thisRepN'
p2634
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2635
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2636
Nsg69
Vn
sS'block_loop.thisTrialN'
p2637
I0
sg39
F0.98342526787746465
sg34
g752
(S'\x07\xdf\t\x1c\x11,\x0e\x06\xcaH'
tRp2638
sa(dp2639
S'trial_loop.thisTrialN'
p2640
I125
sg894
g1338
sS'block_loop.thisIndex'
p2641
g888
sg38
S'left'
p2642
sg58
g62
sS'trial_loop.thisN'
p2643
I125
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p2644
g59
(g98
S'}\x00\x00\x00'
tRp2645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2646
I0
sg903
g1345
sS'block_loop.thisRepN'
p2647
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2648
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2649
Nsg69
Vn
sS'block_loop.thisTrialN'
p2650
I0
sg39
F1.616834513257345
sg34
g752
(S'\x07\xdf\t\x1c\x11,\x14\x07 8'
tRp2651
sa(dp2652
S'trial_loop.thisTrialN'
p2653
I126
sg894
S'46-pistachios.png'
p2654
sS'block_loop.thisIndex'
p2655
g888
sg38
S'right'
p2656
sg58
g62
sS'trial_loop.thisN'
p2657
I126
sg33
g1723
sg63
g64
sS'trial_loop.thisIndex'
p2658
g59
(g98
S'~\x00\x00\x00'
tRp2659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2660
I0
sg903
S'29-beans.png'
p2661
sS'block_loop.thisRepN'
p2662
I0
sg906
g1723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2663
I0
sg908
g1730
sg55
g11
sS'block_loop.thisTrial'
p2664
Nsg69
Vn
sS'block_loop.thisTrialN'
p2665
I0
sg39
F1.0668554394396779
sg34
g752
(S'\x07\xdf\t\x1c\x11,\x1b\x01\xb5\x80'
tRp2666
sa(dp2667
S'trial_loop.thisTrialN'
p2668
I127
sg894
g1141
sS'block_loop.thisIndex'
p2669
g888
sg38
S'left'
p2670
sg58
g62
sS'trial_loop.thisN'
p2671
I127
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2672
g59
(g98
S'\x7f\x00\x00\x00'
tRp2673
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2674
I0
sg903
g1148
sS'block_loop.thisRepN'
p2675
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2676
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2677
Nsg69
Vn
sS'block_loop.thisTrialN'
p2678
I0
sg39
F0.71721574606635841
sg34
g752
(S'\x07\xdf\t\x1c\x11,!\x03< '
tRp2679
sa(dp2680
S'trial_loop.thisTrialN'
p2681
I128
sg894
g1156
sS'block_loop.thisIndex'
p2682
g888
sg38
S'left'
p2683
sg58
g62
sS'trial_loop.thisN'
p2684
I128
sg33
g1160
sg63
g64
sS'trial_loop.thisIndex'
p2685
g59
(g98
S'\x80\x00\x00\x00'
tRp2686
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2687
I0
sg903
g1164
sS'block_loop.thisRepN'
p2688
I0
sg906
g1160
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2689
I0
sg908
g1167
sg55
g11
sS'block_loop.thisTrial'
p2690
Nsg69
Vn
sS'block_loop.thisTrialN'
p2691
I0
sg39
F0.85016997532147798
sg34
g752
(S'\x07\xdf\t\x1c\x11,&\x0e\x8a\xa8'
tRp2692
sa(dp2693
S'trial_loop.thisTrialN'
p2694
I129
sg894
g2080
sS'block_loop.thisIndex'
p2695
g888
sg38
S'left'
p2696
sg58
g62
sS'trial_loop.thisN'
p2697
I129
sg33
g1544
sg63
g64
sS'trial_loop.thisIndex'
p2698
g59
(g98
S'\x81\x00\x00\x00'
tRp2699
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2700
I0
sg903
g2087
sS'block_loop.thisRepN'
p2701
I0
sg906
g1544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2702
I0
sg908
g1551
sg55
g11
sS'block_loop.thisTrial'
p2703
Nsg69
Vn
sS'block_loop.thisTrialN'
p2704
I0
sg39
F0.91689940152355121
sg34
g752
(S'\x07\xdf\t\x1c\x11,,\x0c\xf4h'
tRp2705
sa(dp2706
S'trial_loop.thisTrialN'
p2707
I130
sg894
g1611
sS'block_loop.thisIndex'
p2708
g888
sg38
S'left'
p2709
sg58
g62
sS'trial_loop.thisN'
p2710
I130
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p2711
g59
(g98
S'\x82\x00\x00\x00'
tRp2712
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2713
I0
sg903
g1618
sS'block_loop.thisRepN'
p2714
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2715
I0
sg908
g1291
sg55
g11
sS'block_loop.thisTrial'
p2716
Nsg69
Vn
sS'block_loop.thisTrialN'
p2717
I0
sg39
F0.98345035648890189
sg34
g752
(S'\x07\xdf\t\x1c\x11,2\x0c\x19\xa8'
tRp2718
sa(dp2719
S'trial_loop.thisTrialN'
p2720
I131
sg894
g1719
sS'block_loop.thisIndex'
p2721
g888
sg38
S'left'
p2722
sg58
g62
sS'trial_loop.thisN'
p2723
I131
sg33
g1723
sg63
g64
sS'trial_loop.thisIndex'
p2724
g59
(g98
S'\x83\x00\x00\x00'
tRp2725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2726
I0
sg903
g1727
sS'block_loop.thisRepN'
p2727
I0
sg906
g1723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2728
I0
sg908
g1730
sg55
g11
sS'block_loop.thisTrial'
p2729
Nsg69
Vn
sS'block_loop.thisTrialN'
p2730
I0
sg39
F0.93352516615414061
sg34
g752
(S'\x07\xdf\t\x1c\x11,8\x0co\x98'
tRp2731
sa(dp2732
S'trial_loop.thisTrialN'
p2733
I132
sg894
g1156
sS'block_loop.thisIndex'
p2734
g888
sg38
S'left'
p2735
sg58
g62
sS'trial_loop.thisN'
p2736
I132
sg33
g1160
sg63
g64
sS'trial_loop.thisIndex'
p2737
g59
(g98
S'\x84\x00\x00\x00'
tRp2738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2739
I0
sg903
g1164
sS'block_loop.thisRepN'
p2740
I0
sg906
g1160
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2741
I0
sg908
g1167
sg55
g11
sS'block_loop.thisTrial'
p2742
Nsg69
Vn
sS'block_loop.thisTrialN'
p2743
I0
sg39
F0.88353753940100432
sg34
g752
(S'\x07\xdf\t\x1c\x11-\x02\x0b\xcfp'
tRp2744
sa(dp2745
S'trial_loop.thisTrialN'
p2746
I133
sg894
g1775
sS'block_loop.thisIndex'
p2747
g888
sg38
S'right'
p2748
sg58
g62
sS'trial_loop.thisN'
p2749
I133
sg33
g1363
sg63
g64
sS'trial_loop.thisIndex'
p2750
g59
(g98
S'\x85\x00\x00\x00'
tRp2751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2752
I0
sg903
g1782
sS'block_loop.thisRepN'
p2753
I0
sg906
g1363
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2754
I0
sg908
g1357
sg55
g11
sS'block_loop.thisTrial'
p2755
Nsg69
Vn
sS'block_loop.thisTrialN'
p2756
I0
sg39
F1.1672626161489461
sg34
g752
(S'\x07\xdf\t\x1c\x11-\x08\nw\xb0'
tRp2757
sa(dp2758
S'trial_loop.thisTrialN'
p2759
I134
sg894
g1387
sS'block_loop.thisIndex'
p2760
g888
sg38
S'right'
p2761
sg58
g62
sS'trial_loop.thisN'
p2762
I134
sg33
g1113
sg63
g64
sS'trial_loop.thisIndex'
p2763
g59
(g98
S'\x86\x00\x00\x00'
tRp2764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2765
I0
sg903
g1394
sS'block_loop.thisRepN'
p2766
I0
sg906
g1113
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2767
I0
sg908
g1120
sg55
g11
sS'block_loop.thisTrial'
p2768
Nsg69
Vn
sS'block_loop.thisTrialN'
p2769
I0
sg39
F1.1000701910816133
sg34
g752
(S'\x07\xdf\t\x1c\x11-\x0e\r\xa8\x18'
tRp2770
sa(dp2771
S'trial_loop.thisTrialN'
p2772
I135
sg894
g1280
sS'block_loop.thisIndex'
p2773
g888
sg38
S'right'
p2774
sg58
g62
sS'trial_loop.thisN'
p2775
I135
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p2776
g59
(g98
S'\x87\x00\x00\x00'
tRp2777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2778
I0
sg903
g1288
sS'block_loop.thisRepN'
p2779
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2780
I0
sg908
g1291
sg55
g11
sS'block_loop.thisTrial'
p2781
Nsg69
Vn
sS'block_loop.thisTrialN'
p2782
I0
sg39
F0.88347424768289784
sg34
g752
(S'\x07\xdf\t\x1c\x11-\x15\x00e\x90'
tRp2783
sa(dp2784
S'trial_loop.thisTrialN'
p2785
I136
sg894
g1248
sS'block_loop.thisIndex'
p2786
g888
sg38
S'left'
p2787
sg58
g62
sS'trial_loop.thisN'
p2788
I136
sg33
g1259
sg63
g64
sS'trial_loop.thisIndex'
p2789
g59
(g98
S'\x88\x00\x00\x00'
tRp2790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2791
I0
sg903
g1256
sS'block_loop.thisRepN'
p2792
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2793
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p2794
Nsg69
Vn
sS'block_loop.thisTrialN'
p2795
I0
sg39
F1.1000687655941874
sg34
g752
(S'\x07\xdf\t\x1c\x11-\x1a\x0eP\x10'
tRp2796
sa(dp2797
S'trial_loop.thisTrialN'
p2798
I137
sg894
g966
sS'block_loop.thisIndex'
p2799
g888
sg38
S'right'
p2800
sg58
g62
sS'trial_loop.thisN'
p2801
I137
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2802
g59
(g98
S'\x89\x00\x00\x00'
tRp2803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2804
I0
sg903
g974
sS'block_loop.thisRepN'
p2805
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2806
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2807
Nsg69
Vn
sS'block_loop.thisTrialN'
p2808
I0
sg39
F0.73341129808250116
sg34
g752
(S'\x07\xdf\t\x1c\x11-!\x01\r\x88'
tRp2809
sa(dp2810
S'trial_loop.thisTrialN'
p2811
I138
sg894
g1665
sS'block_loop.thisIndex'
p2812
g888
sg38
S'right'
p2813
sg58
g62
sS'trial_loop.thisN'
p2814
I138
sg33
g1374
sg63
g64
sS'trial_loop.thisIndex'
p2815
g59
(g98
S'\x8a\x00\x00\x00'
tRp2816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2817
I0
sg903
g1672
sS'block_loop.thisRepN'
p2818
I0
sg906
g1380
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2819
I0
sg908
g1374
sg55
g11
sS'block_loop.thisTrial'
p2820
Nsg69
Vn
sS'block_loop.thisTrialN'
p2821
I0
sg39
F1.650578121367289
sg34
g752
(S'\x07\xdf\t\x1c\x11-&\x0c\xd5('
tRp2822
sa(dp2823
S'trial_loop.thisTrialN'
p2824
I139
sg894
g1034
sS'block_loop.thisIndex'
p2825
g888
sg38
S'left'
p2826
sg58
g62
sS'trial_loop.thisN'
p2827
I139
sg33
g1045
sg63
g64
sS'trial_loop.thisIndex'
p2828
g59
(g98
S'\x8b\x00\x00\x00'
tRp2829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2830
I0
sg903
g1042
sS'block_loop.thisRepN'
p2831
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2832
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p2833
Nsg69
Vn
sS'block_loop.thisTrialN'
p2834
I0
sg39
F0.76686496170441387
sg34
g752
(S'\x07\xdf\t\x1c\x11--\x07\xe7p'
tRp2835
sa(dp2836
S'trial_loop.thisTrialN'
p2837
I140
sg894
g1790
sS'block_loop.thisIndex'
p2838
g888
sg38
S'left'
p2839
sg58
g62
sS'trial_loop.thisN'
p2840
I140
sg33
g1183
sg63
g64
sS'trial_loop.thisIndex'
p2841
g59
(g98
S'\x8c\x00\x00\x00'
tRp2842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2843
I0
sg903
g1797
sS'block_loop.thisRepN'
p2844
I0
sg906
g1183
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2845
I0
sg908
g1177
sg55
g11
sS'block_loop.thisTrial'
p2846
Nsg69
Vn
sS'block_loop.thisTrialN'
p2847
I0
sg39
F1.9165527225704864
sg34
g752
(S'\x07\xdf\t\x1c\x11-3\x04\xe5\xe8'
tRp2848
sa(dp2849
S'trial_loop.thisTrialN'
p2850
I141
sg894
g1017
sS'block_loop.thisIndex'
p2851
g888
sg38
S'left'
p2852
sg58
g62
sS'trial_loop.thisN'
p2853
I141
sg33
g1027
sg63
g64
sS'trial_loop.thisIndex'
p2854
g59
(g98
S'\x8d\x00\x00\x00'
tRp2855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2856
I0
sg903
g1025
sS'block_loop.thisRepN'
p2857
I0
sg906
g1027
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2858
I0
sg908
g1021
sg55
g11
sS'block_loop.thisTrial'
p2859
Nsg69
Vn
sS'block_loop.thisTrialN'
p2860
I0
sg39
F2.6667249216552591
sg34
g752
(S'\x07\xdf\t\x1c\x11-:\x04A\xd8'
tRp2861
sa(dp2862
S'trial_loop.thisTrialN'
p2863
I142
sg894
g1611
sS'block_loop.thisIndex'
p2864
g888
sg38
S'left'
p2865
sg58
g62
sS'trial_loop.thisN'
p2866
I142
sg33
g1291
sg63
g64
sS'trial_loop.thisIndex'
p2867
g59
(g98
S'\x8e\x00\x00\x00'
tRp2868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2869
I0
sg903
g1618
sS'block_loop.thisRepN'
p2870
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2871
I0
sg908
g1291
sg55
g11
sS'block_loop.thisTrial'
p2872
Nsg69
Vn
sS'block_loop.thisTrialN'
p2873
I0
sg39
F0.88357916368477163
sg34
g752
(S'\x07\xdf\t\x1c\x11.\x05\x0e\xcd\x10'
tRp2874
sa(dp2875
S'trial_loop.thisTrialN'
p2876
I143
sg894
g1190
sS'block_loop.thisIndex'
p2877
g888
sg38
S'right'
p2878
sg58
g62
sS'trial_loop.thisN'
p2879
I143
sg33
g1194
sg63
g64
sS'trial_loop.thisIndex'
p2880
g59
(g98
S'\x8f\x00\x00\x00'
tRp2881
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2882
I0
sg903
g1198
sS'block_loop.thisRepN'
p2883
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2884
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p2885
Nsg69
Vn
sS'block_loop.thisTrialN'
p2886
I0
sg39
F2.5005633532964566
sg34
g752
(S'\x07\xdf\t\x1c\x11.\x0b\r\xb3\xd0'
tRp2887
sa(dp2888
S'trial_loop.thisTrialN'
p2889
I144
sg894
g1051
sS'block_loop.thisIndex'
p2890
g888
sg38
S'right'
p2891
sg58
g62
sS'trial_loop.thisN'
p2892
I144
sg33
g1055
sg63
g64
sS'trial_loop.thisIndex'
p2893
g59
(g98
S'\x90\x00\x00\x00'
tRp2894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2895
I0
sg903
g1059
sS'block_loop.thisRepN'
p2896
I0
sg906
g1055
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2897
I0
sg908
g1062
sg55
g11
sS'block_loop.thisTrial'
p2898
Nsg69
Vn
sS'block_loop.thisTrialN'
p2899
I0
sg39
F1.233320636976714
sg34
g752
(S'\x07\xdf\t\x1c\x11.\x13\x06\x97\x80'
tRp2900
sa(dp2901
S'trial_loop.thisTrialN'
p2902
I145
sg894
g1000
sS'block_loop.thisIndex'
p2903
g888
sg38
S'right'
p2904
sg58
g62
sS'trial_loop.thisN'
p2905
I145
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2906
g59
(g98
S'\x91\x00\x00\x00'
tRp2907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2908
I0
sg903
g1008
sS'block_loop.thisRepN'
p2909
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2910
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2911
Nsg69
Vn
sS'block_loop.thisTrialN'
p2912
I0
sg39
F0.86679488466324983
sg34
g752
(S'\x07\xdf\t\x1c\x11.\x19\n\x7f\x80'
tRp2913
sa(dp2914
S'trial_loop.thisTrialN'
p2915
I146
sg894
g1790
sS'block_loop.thisIndex'
p2916
g888
sg38
S'right'
p2917
sg58
g62
sS'trial_loop.thisN'
p2918
I146
sg33
g1183
sg63
g64
sS'trial_loop.thisIndex'
p2919
g59
(g98
S'\x92\x00\x00\x00'
tRp2920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2921
I0
sg903
g1797
sS'block_loop.thisRepN'
p2922
I0
sg906
g1183
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2923
I0
sg908
g1177
sg55
g11
sS'block_loop.thisTrial'
p2924
Nsg69
Vn
sS'block_loop.thisTrialN'
p2925
I0
sg39
F1.4665528936275223
sg34
g752
(S'\x07\xdf\t\x1c\x11.\x1f\x08\xed('
tRp2926
sa(dp2927
S'trial_loop.thisTrialN'
p2928
I147
sg894
g1051
sS'block_loop.thisIndex'
p2929
g888
sg38
S'right'
p2930
sg58
g62
sS'trial_loop.thisN'
p2931
I147
sg33
g1055
sg63
g64
sS'trial_loop.thisIndex'
p2932
g59
(g98
S'\x93\x00\x00\x00'
tRp2933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2934
I0
sg903
g1059
sS'block_loop.thisRepN'
p2935
I0
sg906
g1055
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2936
I0
sg908
g1062
sg55
g11
sS'block_loop.thisTrial'
p2937
Nsg69
Vn
sS'block_loop.thisTrialN'
p2938
I0
sg39
F1.1000462428673927
sg34
g752
(S'\x07\xdf\t\x1c\x11.&\x01_\x90'
tRp2939
sa(dp2940
S'trial_loop.thisTrialN'
p2941
I148
sg894
g1775
sS'block_loop.thisIndex'
p2942
g888
sg38
S'right'
p2943
sg58
g62
sS'trial_loop.thisN'
p2944
I148
sg33
g1363
sg63
g64
sS'trial_loop.thisIndex'
p2945
g59
(g98
S'\x94\x00\x00\x00'
tRp2946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2947
I0
sg903
g1782
sS'block_loop.thisRepN'
p2948
I0
sg906
g1363
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2949
I0
sg908
g1357
sg55
g11
sS'block_loop.thisTrial'
p2950
Nsg69
Vn
sS'block_loop.thisTrialN'
p2951
I0
sg39
F0.83395133037993219
sg34
g752
(S'\x07\xdf\t\x1c\x11.,\x03_H'
tRp2952
sa(dp2953
S'trial_loop.thisTrialN'
p2954
I149
sg894
g2654
sS'block_loop.thisIndex'
p2955
g888
sg38
S'right'
p2956
sg58
g62
sS'trial_loop.thisN'
p2957
I149
sg33
g1723
sg63
g64
sS'trial_loop.thisIndex'
p2958
g59
(g98
S'\x95\x00\x00\x00'
tRp2959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2960
I0
sg903
g2661
sS'block_loop.thisRepN'
p2961
I0
sg906
g1723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2962
I0
sg908
g1730
sg55
g11
sS'block_loop.thisTrial'
p2963
Nsg69
Vn
sS'block_loop.thisTrialN'
p2964
I0
sg39
F0.76681335899775149
sg34
g752
(S'\x07\xdf\t\x1c\x11.2\x01S\xd8'
tRp2965
sa(dp2966
S'trial_loop.thisTrialN'
p2967
I150
sg894
g949
sS'block_loop.thisIndex'
p2968
g888
sg38
S'right'
p2969
sg58
g62
sS'trial_loop.thisN'
p2970
I150
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2971
g59
(g98
S'\x96\x00\x00\x00'
tRp2972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2973
I0
sg903
g957
sS'block_loop.thisRepN'
p2974
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2975
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2976
Nsg69
Vn
sS'block_loop.thisTrialN'
p2977
I0
sg39
F0.86687043558413279
sg34
g752
(S'\x07\xdf\t\x1c\x11.7\r\x94\x90'
tRp2978
sa(dp2979
S'trial_loop.thisTrialN'
p2980
I151
sg894
g1402
sS'block_loop.thisIndex'
p2981
g888
sg38
S'left'
p2982
sg58
g62
sS'trial_loop.thisN'
p2983
I151
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p2984
g59
(g98
S'\x97\x00\x00\x00'
tRp2985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2986
I0
sg903
g1409
sS'block_loop.thisRepN'
p2987
I0
sg906
g1027
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2988
I0
sg908
g1021
sg55
g11
sS'block_loop.thisTrial'
p2989
Nsg69
Vn
sS'block_loop.thisTrialN'
p2990
I0
sg39
F1.0501897611102322
sg34
g752
(S'\x07\xdf\t\x1c\x11/\x01\x0c\x028'
tRp2991
sa(dp2992
S'trial_loop.thisTrialN'
p2993
I152
sg894
g895
sS'block_loop.thisIndex'
p2994
g888
sg38
S'left'
p2995
sg58
g62
sS'trial_loop.thisN'
p2996
I152
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2997
g59
(g98
S'\x98\x00\x00\x00'
tRp2998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2999
I0
sg903
g904
sS'block_loop.thisRepN'
p3000
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3001
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3002
Nsg69
Vn
sS'block_loop.thisTrialN'
p3003
I0
sg39
F0.73370922531103133
sg34
g752
(S'\x07\xdf\t\x1c\x11/\x07\rJX'
tRp3004
sa(dp3005
S'trial_loop.thisTrialN'
p3006
I153
sg894
g1665
sS'block_loop.thisIndex'
p3007
g888
sg38
S'right'
p3008
sg58
g62
sS'trial_loop.thisN'
p3009
I153
sg33
g1374
sg63
g64
sS'trial_loop.thisIndex'
p3010
g59
(g98
S'\x99\x00\x00\x00'
tRp3011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3012
I0
sg903
g1672
sS'block_loop.thisRepN'
p3013
I0
sg906
g1380
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3014
I0
sg908
g1374
sg55
g11
sS'block_loop.thisTrial'
p3015
Nsg69
Vn
sS'block_loop.thisTrialN'
p3016
I0
sg39
F0.85019905530134565
sg34
g752
(S'\x07\xdf\t\x1c\x11/\r\t\xcf\xb8'
tRp3017
sa(dp3018
S'trial_loop.thisTrialN'
p3019
I154
sg894
g949
sS'block_loop.thisIndex'
p3020
g888
sg38
S'right'
p3021
sg58
g62
sS'trial_loop.thisN'
p3022
I154
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p3023
g59
(g98
S'\x9a\x00\x00\x00'
tRp3024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3025
I0
sg903
g957
sS'block_loop.thisRepN'
p3026
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3027
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p3028
Nsg69
Vn
sS'block_loop.thisTrialN'
p3029
I0
sg39
F0.81686940923100337
sg34
g752
(S'\x07\xdf\t\x1c\x11/\x13\x07\xfe\xe0'
tRp3030
sa(dp3031
S'trial_loop.thisTrialN'
p3032
I155
sg894
g966
sS'block_loop.thisIndex'
p3033
g888
sg38
S'right'
p3034
sg58
g62
sS'trial_loop.thisN'
p3035
I155
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p3036
g59
(g98
S'\x9b\x00\x00\x00'
tRp3037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3038
I0
sg903
g974
sS'block_loop.thisRepN'
p3039
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3040
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p3041
Nsg69
Vn
sS'block_loop.thisTrialN'
p3042
I0
sg39
F0.90019437969385763
sg34
g752
(S'\x07\xdf\t\x1c\x11/\x19\x05\xb4\xf0'
tRp3043
sa(dp3044
S'trial_loop.thisTrialN'
p3045
I156
sg894
g1109
sS'block_loop.thisIndex'
p3046
g888
sg38
S'left'
p3047
sg58
g62
sS'trial_loop.thisN'
p3048
I156
sg33
g1113
sg63
g64
sS'trial_loop.thisIndex'
p3049
g59
(g98
S'\x9c\x00\x00\x00'
tRp3050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3051
I0
sg903
g1117
sS'block_loop.thisRepN'
p3052
I0
sg906
g1113
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3053
I0
sg908
g1120
sg55
g11
sS'block_loop.thisTrial'
p3054
Nsg69
Vn
sS'block_loop.thisTrialN'
p3055
I0
sg39
F1.016751777871832
sg34
g752
(S'\x07\xdf\t\x1c\x11/\x1f\x04\x9b\xb0'
tRp3056
sa(dp3057
S'trial_loop.thisTrialN'
p3058
I157
sg894
g1173
sS'block_loop.thisIndex'
p3059
g888
sg38
S'left'
p3060
sg58
g62
sS'trial_loop.thisN'
p3061
I157
sg33
g1183
sg63
g64
sS'trial_loop.thisIndex'
p3062
g59
(g98
S'\x9d\x00\x00\x00'
tRp3063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3064
I0
sg903
g1181
sS'block_loop.thisRepN'
p3065
I0
sg906
g1183
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3066
I0
sg908
g1177
sg55
g11
sS'block_loop.thisTrial'
p3067
Nsg69
Vn
sS'block_loop.thisTrialN'
p3068
I0
sg39
F1.0332783284611651
sg34
g752
(S'\x07\xdf\t\x1c\x11/%\x05j\xb8'
tRp3069
sa(dp3070
S'trial_loop.thisTrialN'
p3071
I158
sg894
g1248
sS'block_loop.thisIndex'
p3072
g888
sg38
S'left'
p3073
sg58
g62
sS'trial_loop.thisN'
p3074
I158
sg33
g1259
sg63
g64
sS'trial_loop.thisIndex'
p3075
g59
(g98
S'\x9e\x00\x00\x00'
tRp3076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3077
I0
sg903
g1256
sS'block_loop.thisRepN'
p3078
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3079
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p3080
Nsg69
Vn
sS'block_loop.thisTrialN'
p3081
I0
sg39
F1.2334563435397286
sg34
g752
(S'\x07\xdf\t\x1c\x11/+\x06tX'
tRp3082
sa(dp3083
S'trial_loop.thisTrialN'
p3084
I159
sg894
g2654
sS'block_loop.thisIndex'
p3085
g888
sg38
S'right'
p3086
sg58
g62
sS'trial_loop.thisN'
p3087
I159
sg33
g1723
sg63
g64
sS'trial_loop.thisIndex'
p3088
g59
(g98
S'\x9f\x00\x00\x00'
tRp3089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3090
I0
sg903
g2661
sS'block_loop.thisRepN'
p3091
I0
sg906
g1723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3092
I0
sg908
g1730
sg55
g11
sS'block_loop.thisTrial'
p3093
Nsg69
Vn
sS'block_loop.thisTrialN'
p3094
I0
sg39
F0.93356450965438853
sg34
g752
(S'\x07\xdf\t\x1c\x11/1\n\x96\xf0'
tRp3095
sa(dp3096
S'trial_loop.thisTrialN'
p3097
I160
sg894
g895
sS'block_loop.thisIndex'
p3098
g888
sg38
S'left'
p3099
sg58
g62
sS'trial_loop.thisN'
p3100
I160
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p3101
g59
(g98
S'\xa0\x00\x00\x00'
tRp3102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3103
I0
sg903
g904
sS'block_loop.thisRepN'
p3104
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3105
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3106
Nsg69
Vn
sS'block_loop.thisTrialN'
p3107
I0
sg39
F0.71674362407065928
sg34
g752
(S'\x07\xdf\t\x1c\x11/7\t\xf6\xc8'
tRp3108
sa(dp3109
S'trial_loop.thisTrialN'
p3110
I161
sg894
g2080
sS'block_loop.thisIndex'
p3111
g888
sg38
S'left'
p3112
sg58
g62
sS'trial_loop.thisN'
p3113
I161
sg33
g1544
sg63
g64
sS'trial_loop.thisIndex'
p3114
g59
(g98
S'\xa1\x00\x00\x00'
tRp3115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3116
I0
sg903
g2087
sS'block_loop.thisRepN'
p3117
I0
sg906
g1544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3118
I0
sg908
g1551
sg55
g11
sS'block_loop.thisTrial'
p3119
Nsg69
Vn
sS'block_loop.thisTrialN'
p3120
I0
sg39
F1.1667884984672128
sg34
g752
(S'\x07\xdf\t\x1c\x110\x01\x06A\x90'
tRp3121
sa(dp3122
S'trial_loop.thisTrialN'
p3123
I162
sg894
g1775
sS'block_loop.thisIndex'
p3124
g888
sg38
S'right'
p3125
sg58
g62
sS'trial_loop.thisN'
p3126
I162
sg33
g1363
sg63
g64
sS'trial_loop.thisIndex'
p3127
g59
(g98
S'\xa2\x00\x00\x00'
tRp3128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3129
I0
sg903
g1782
sS'block_loop.thisRepN'
p3130
I0
sg906
g1363
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3131
I0
sg908
g1357
sg55
g11
sS'block_loop.thisTrial'
p3132
Nsg69
Vn
sS'block_loop.thisTrialN'
p3133
I0
sg39
F1.3500864416600962
sg34
g752
(S'\x07\xdf\t\x1c\x110\x07\t3x'
tRp3134
sa(dp3135
S'trial_loop.thisTrialN'
p3136
I163
sg894
g1540
sS'block_loop.thisIndex'
p3137
g888
sg38
S'right'
p3138
sg58
g62
sS'trial_loop.thisN'
p3139
I163
sg33
g1544
sg63
g64
sS'trial_loop.thisIndex'
p3140
g59
(g98
S'\xa3\x00\x00\x00'
tRp3141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3142
I0
sg903
g1548
sS'block_loop.thisRepN'
p3143
I0
sg906
g1544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3144
I0
sg908
g1551
sg55
g11
sS'block_loop.thisTrial'
p3145
Nsg69
Vn
sS'block_loop.thisTrialN'
p3146
I0
sg39
F0.93343022857879987
sg34
g752
(S'\x07\xdf\t\x1c\x110\r\x0e\xff\xd8'
tRp3147
sa(dp3148
S'trial_loop.thisTrialN'
p3149
I164
sg894
g2654
sS'block_loop.thisIndex'
p3150
g888
sg38
S'right'
p3151
sg58
g62
sS'trial_loop.thisN'
p3152
I164
sg33
g1723
sg63
g64
sS'trial_loop.thisIndex'
p3153
g59
(g98
S'\xa4\x00\x00\x00'
tRp3154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3155
I0
sg903
g2661
sS'block_loop.thisRepN'
p3156
I0
sg906
g1723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3157
I0
sg908
g1730
sg55
g11
sS'block_loop.thisTrial'
p3158
Nsg69
Vn
sS'block_loop.thisTrialN'
p3159
I0
sg39
F0.68329024554986972
sg34
g752
(S'\x07\xdf\t\x1c\x110\x13\x0e\x9e0'
tRp3160
sa(dp3161
S'trial_loop.thisTrialN'
p3162
I165
sg894
g1512
sS'block_loop.thisIndex'
p3163
g888
sg38
S'left'
p3164
sg58
g62
sS'trial_loop.thisN'
p3165
I165
sg33
g1194
sg63
g64
sS'trial_loop.thisIndex'
p3166
g59
(g98
S'\xa5\x00\x00\x00'
tRp3167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3168
I0
sg903
g1519
sS'block_loop.thisRepN'
p3169
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3170
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p3171
Nsg69
Vn
sS'block_loop.thisTrialN'
p3172
I0
sg39
F1.0834290311686345
sg34
g752
(S'\x07\xdf\t\x1c\x110\x19\n1`'
tRp3173
sa(dp3174
S'trial_loop.thisTrialN'
p3175
I166
sg894
g915
sS'block_loop.thisIndex'
p3176
g888
sg38
S'left'
p3177
sg58
g62
sS'trial_loop.thisN'
p3178
I166
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3179
g59
(g98
S'\xa6\x00\x00\x00'
tRp3180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3181
I0
sg903
g923
sS'block_loop.thisRepN'
p3182
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3183
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3184
Nsg69
Vn
sS'block_loop.thisTrialN'
p3185
I0
sg39
F1.2501186006920761
sg34
g752
(S'\x07\xdf\t\x1c\x110\x1f\x0b\xf2\x98'
tRp3186
sa(dp3187
S'trial_loop.thisTrialN'
p3188
I167
sg894
g1665
sS'block_loop.thisIndex'
p3189
g888
sg38
S'right'
p3190
sg58
g62
sS'trial_loop.thisN'
p3191
I167
sg33
g1374
sg63
g64
sS'trial_loop.thisIndex'
p3192
g59
(g98
S'\xa7\x00\x00\x00'
tRp3193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3194
I0
sg903
g1672
sS'block_loop.thisRepN'
p3195
I0
sg906
g1380
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3196
I0
sg908
g1374
sg55
g11
sS'block_loop.thisTrial'
p3197
Nsg69
Vn
sS'block_loop.thisTrialN'
p3198
I0
sg39
F1.0833908280619653
sg34
g752
(S'\x07\xdf\t\x1c\x110&\x01\x11p'
tRp3199
sa(dp3200
S'trial_loop.thisTrialN'
p3201
I168
sg894
g1265
sS'block_loop.thisIndex'
p3202
g888
sg38
S'right'
p3203
sg58
g62
sS'trial_loop.thisN'
p3204
I168
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p3205
g59
(g98
S'\xa8\x00\x00\x00'
tRp3206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3207
I0
sg903
g1272
sS'block_loop.thisRepN'
p3208
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3209
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p3210
Nsg69
Vn
sS'block_loop.thisTrialN'
p3211
I0
sg39
F0.91675827810104238
sg34
g752
(S'\x07\xdf\t\x1c\x110,\x02\xd2\xa8'
tRp3212
sa(dp3213
S'trial_loop.thisTrialN'
p3214
I169
sg894
g1190
sS'block_loop.thisIndex'
p3215
g888
sg38
S'right'
p3216
sg58
g62
sS'trial_loop.thisN'
p3217
I169
sg33
g1194
sg63
g64
sS'trial_loop.thisIndex'
p3218
g59
(g98
S'\xa9\x00\x00\x00'
tRp3219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3220
I0
sg903
g1198
sS'block_loop.thisRepN'
p3221
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3222
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p3223
Nsg69
Vn
sS'block_loop.thisTrialN'
p3224
I0
sg39
F0.83388547278445913
sg34
g752
(S'\x07\xdf\t\x1c\x1102\x022\x80'
tRp3225
sa(dp3226
S'trial_loop.thisTrialN'
p3227
I170
sg894
g1370
sS'block_loop.thisIndex'
p3228
g888
sg38
S'left'
p3229
sg58
g62
sS'trial_loop.thisN'
p3230
I170
sg33
g1380
sg63
g64
sS'trial_loop.thisIndex'
p3231
g59
(g98
S'\xaa\x00\x00\x00'
tRp3232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3233
I0
sg903
g1378
sS'block_loop.thisRepN'
p3234
I0
sg906
g1380
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3235
I0
sg908
g1374
sg55
g11
sS'block_loop.thisTrial'
p3236
Nsg69
Vn
sS'block_loop.thisTrialN'
p3237
I0
sg39
F0.91678479219626752
sg34
g752
(S"\x07\xdf\t\x1c\x1108\x00'\x10"
tRp3238
sa(dp3239
S'trial_loop.thisTrialN'
p3240
I171
sg894
g1297
sS'block_loop.thisIndex'
p3241
g888
sg38
S'right'
p3242
sg58
g62
sS'trial_loop.thisN'
p3243
I171
sg33
g1167
sg63
g64
sS'trial_loop.thisIndex'
p3244
g59
(g98
S'\xab\x00\x00\x00'
tRp3245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3246
I0
sg903
g1304
sS'block_loop.thisRepN'
p3247
I0
sg906
g1160
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3248
I0
sg908
g1167
sg55
g11
sS'block_loop.thisTrial'
p3249
Nsg69
Vn
sS'block_loop.thisTrialN'
p3250
I0
sg39
F1.8168206575064687
sg34
g752
(S'\x07\xdf\t\x1c\x111\x01\x0e\x8e\x90'
tRp3251
sa(dp3252
S'trial_loop.thisTrialN'
p3253
I172
sg894
g1417
sS'block_loop.thisIndex'
p3254
g888
sg38
S'left'
p3255
sg58
g62
sS'trial_loop.thisN'
p3256
I172
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p3257
g59
(g98
S'\xac\x00\x00\x00'
tRp3258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3259
I0
sg903
g1424
sS'block_loop.thisRepN'
p3260
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3261
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p3262
Nsg69
Vn
sS'block_loop.thisTrialN'
p3263
I0
sg39
F1.3334720809434657
sg34
g752
(S'\x07\xdf\t\x1c\x111\x08\x0c<\xd0'
tRp3264
sa(dp3265
S'trial_loop.thisTrialN'
p3266
I173
sg894
g2654
sS'block_loop.thisIndex'
p3267
g888
sg38
S'right'
p3268
sg58
g62
sS'trial_loop.thisN'
p3269
I173
sg33
g1723
sg63
g64
sS'trial_loop.thisIndex'
p3270
g59
(g98
S'\xad\x00\x00\x00'
tRp3271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3272
I0
sg903
g2661
sS'block_loop.thisRepN'
p3273
I0
sg906
g1723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3274
I0
sg908
g1730
sg55
g11
sS'block_loop.thisTrial'
p3275
Nsg69
Vn
sS'block_loop.thisTrialN'
p3276
I0
sg39
F0.88357004055433208
sg34
g752
(S'\x07\xdf\t\x1c\x111\x0f\x02\x8cX'
tRp3277
sa(dp3278
S'trial_loop.thisTrialN'
p3279
I174
sg894
g1190
sS'block_loop.thisIndex'
p3280
g888
sg38
S'right'
p3281
sg58
g62
sS'trial_loop.thisN'
p3282
I174
sg33
g1194
sg63
g64
sS'trial_loop.thisIndex'
p3283
g59
(g98
S'\xae\x00\x00\x00'
tRp3284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3285
I0
sg903
g1198
sS'block_loop.thisRepN'
p3286
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3287
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p3288
Nsg69
Vn
sS'block_loop.thisTrialN'
p3289
I0
sg39
F0.83353651304787491
sg34
g752
(S'\x07\xdf\t\x1c\x111\x15\x01s\x18'
tRp3290
sa(dp3291
S'trial_loop.thisTrialN'
p3292
I175
sg894
g1034
sS'block_loop.thisIndex'
p3293
g888
sg38
S'left'
p3294
sg58
g62
sS'trial_loop.thisN'
p3295
I175
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p3296
g59
(g98
S'\xaf\x00\x00\x00'
tRp3297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3298
I0
sg903
g1042
sS'block_loop.thisRepN'
p3299
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3300
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p3301
Nsg69
Vn
sS'block_loop.thisTrialN'
p3302
I0
sg39
F0.85012521496173576
sg34
g752
(S'\x07\xdf\t\x1c\x111\x1a\x0e\xa6\x00'
tRp3303
sa(dp3304
S'trial_loop.thisTrialN'
p3305
I176
sg894
g1458
sS'block_loop.thisIndex'
p3306
g888
sg38
S'right'
p3307
sg58
g62
sS'trial_loop.thisN'
p3308
I176
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p3309
g59
(g98
S'\xb0\x00\x00\x00'
tRp3310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3311
I0
sg903
g1465
sS'block_loop.thisRepN'
p3312
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3313
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3314
Nsg69
Vn
sS'block_loop.thisTrialN'
p3315
I0
sg39
F0.96687419887530268
sg34
g752
(S'\x07\xdf\t\x1c\x111 \x0c\xd9\x10'
tRp3316
sa(dp3317
S'trial_loop.thisTrialN'
p3318
I177
sg894
g1173
sS'block_loop.thisIndex'
p3319
g888
sg38
S'right'
p3320
sg58
g62
sS'trial_loop.thisN'
p3321
I177
sg33
g1183
sg63
g64
sS'trial_loop.thisIndex'
p3322
g59
(g98
S'\xb1\x00\x00\x00'
tRp3323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3324
I0
sg903
g1181
sS'block_loop.thisRepN'
p3325
I0
sg906
g1183
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3326
I0
sg908
g1177
sg55
g11
sS'block_loop.thisTrial'
p3327
Nsg69
Vn
sS'block_loop.thisTrialN'
p3328
I0
sg39
F0.7665057384474494
sg34
g752
(S'\x07\xdf\t\x1c\x111&\x0c\xf0\x80'
tRp3329
sa(dp3330
S'trial_loop.thisTrialN'
p3331
I178
sg894
g1370
sS'block_loop.thisIndex'
p3332
g888
sg38
S'left'
p3333
sg58
g62
sS'trial_loop.thisN'
p3334
I178
sg33
g1380
sg63
g64
sS'trial_loop.thisIndex'
p3335
g59
(g98
S'\xb2\x00\x00\x00'
tRp3336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3337
I0
sg903
g1378
sS'block_loop.thisRepN'
p3338
I0
sg906
g1380
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3339
I0
sg908
g1374
sg55
g11
sS'block_loop.thisTrial'
p3340
Nsg69
Vn
sS'block_loop.thisTrialN'
p3341
I0
sg39
F1.516750067283283
sg34
g752
(S'\x07\xdf\t\x1c\x111,\t\xb0x'
tRp3342
sa(dp3343
S'trial_loop.thisTrialN'
p3344
I179
sg894
g1248
sS'block_loop.thisIndex'
p3345
g888
sg38
S'left'
p3346
sg58
g62
sS'trial_loop.thisN'
p3347
I179
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p3348
g59
(g98
S'\xb3\x00\x00\x00'
tRp3349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3350
I0
sg903
g1256
sS'block_loop.thisRepN'
p3351
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3352
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p3353
Nsg69
Vn
sS'block_loop.thisTrialN'
p3354
I0
sg39
F1.0671864380092302
sg34
g752
(S'\x07\xdf\t\x1c\x1113\x02\xdax'
tRp3355
sa(dp3356
S'trial_loop.thisTrialN'
p3357
I180
sg894
g1719
sS'block_loop.thisIndex'
p3358
g888
sg38
S'left'
p3359
sg58
g62
sS'trial_loop.thisN'
p3360
I180
sg33
g1723
sg63
g64
sS'trial_loop.thisIndex'
p3361
g59
(g98
S'\xb4\x00\x00\x00'
tRp3362
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3363
I0
sg903
g1727
sS'block_loop.thisRepN'
p3364
I0
sg906
g1723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3365
I0
sg908
g1730
sg55
g11
sS'block_loop.thisTrial'
p3366
Nsg69
Vn
sS'block_loop.thisTrialN'
p3367
I0
sg39
F1.3168175214268558
sg34
g752
(S'\x07\xdf\t\x1c\x1119\x04a\x18'
tRp3368
sa(dp3369
S'trial_loop.thisTrialN'
p3370
I181
sg894
g1265
sS'block_loop.thisIndex'
p3371
g888
sg38
S'right'
p3372
sg58
g62
sS'trial_loop.thisN'
p3373
I181
sg33
g994
sg63
g64
sS'trial_loop.thisIndex'
p3374
g59
(g98
S'\xb5\x00\x00\x00'
tRp3375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3376
I0
sg903
g1272
sS'block_loop.thisRepN'
p3377
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3378
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p3379
Nsg69
Vn
sS'block_loop.thisTrialN'
p3380
I0
sg39
F0.93354056143652997
sg34
g752
(S'\x07\xdf\t\x1c\x112\x03\t\xb4`'
tRp3381
sa(dp3382
S'trial_loop.thisTrialN'
p3383
I182
sg894
g1922
sS'block_loop.thisIndex'
p3384
g888
sg38
S'right'
p3385
sg58
g62
sS'trial_loop.thisN'
p3386
I182
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p3387
g59
(g98
S'\xb6\x00\x00\x00'
tRp3388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3389
I0
sg903
g1929
sS'block_loop.thisRepN'
p3390
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3391
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p3392
Nsg69
Vn
sS'block_loop.thisTrialN'
p3393
I0
sg39
F0.68353628497061436
sg34
g752
(S'\x07\xdf\t\x1c\x112\t\tR\xb8'
tRp3394
sa(dp3395
S'trial_loop.thisTrialN'
p3396
I183
sg894
g1719
sS'block_loop.thisIndex'
p3397
g888
sg38
S'left'
p3398
sg58
g62
sS'trial_loop.thisN'
p3399
I183
sg33
g1723
sg63
g64
sS'trial_loop.thisIndex'
p3400
g59
(g98
S'\xb7\x00\x00\x00'
tRp3401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3402
I0
sg903
g1727
sS'block_loop.thisRepN'
p3403
I0
sg906
g1723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3404
I0
sg908
g1730
sg55
g11
sS'block_loop.thisTrial'
p3405
Nsg69
Vn
sS'block_loop.thisTrialN'
p3406
I0
sg39
F1.0667787481252162
sg34
g752
(S'\x07\xdf\t\x1c\x112\x0f\x04\xe2\x00'
tRp3407
sa(dp3408
S'trial_loop.thisTrialN'
p3409
I184
sg894
g983
sS'block_loop.thisIndex'
p3410
g888
sg38
S'left'
p3411
sg58
g62
sS'trial_loop.thisN'
p3412
I184
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p3413
g59
(g98
S'\xb8\x00\x00\x00'
tRp3414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3415
I0
sg903
g991
sS'block_loop.thisRepN'
p3416
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3417
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p3418
Nsg69
Vn
sS'block_loop.thisTrialN'
p3419
I0
sg39
F0.70022505622182507
sg34
g752
(S'\x07\xdf\t\x1c\x112\x15\x06h\xa0'
tRp3420
sa(dp3421
S'trial_loop.thisTrialN'
p3422
I185
sg894
g932
sS'block_loop.thisIndex'
p3423
g888
sg38
S'left'
p3424
sg58
g62
sS'trial_loop.thisN'
p3425
I185
sg33
g942
sg63
g64
sS'trial_loop.thisIndex'
p3426
g59
(g98
S'\xb9\x00\x00\x00'
tRp3427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3428
I0
sg903
g940
sS'block_loop.thisRepN'
p3429
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3430
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p3431
Nsg69
Vn
sS'block_loop.thisTrialN'
p3432
I0
sg39
F0.91689455485902727
sg34
g752
(S'\x07\xdf\t\x1c\x112\x1b\x02t\xe8'
tRp3433
sa(dp3434
S'trial_loop.thisTrialN'
p3435
I186
sg894
g1370
sS'block_loop.thisIndex'
p3436
g888
sg38
S'left'
p3437
sg58
g62
sS'trial_loop.thisN'
p3438
I186
sg33
g1374
sg63
g64
sS'trial_loop.thisIndex'
p3439
g59
(g98
S'\xba\x00\x00\x00'
tRp3440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3441
I0
sg903
g1378
sS'block_loop.thisRepN'
p3442
I0
sg906
g1380
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3443
I0
sg908
g1374
sg55
g11
sS'block_loop.thisTrial'
p3444
Nsg69
Vn
sS'block_loop.thisTrialN'
p3445
I0
sg39
F0.86680657367105596
sg34
g752
(S'\x07\xdf\t\x1c\x112!\x01\x9a('
tRp3446
sa(dp3447
S'trial_loop.thisTrialN'
p3448
I187
sg894
g1141
sS'block_loop.thisIndex'
p3449
g888
sg38
S'left'
p3450
sg58
g62
sS'trial_loop.thisN'
p3451
I187
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p3452
g59
(g98
S'\xbb\x00\x00\x00'
tRp3453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3454
I0
sg903
g1148
sS'block_loop.thisRepN'
p3455
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3456
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p3457
Nsg69
Vn
sS'block_loop.thisTrialN'
p3458
I0
sg39
F0.86663494478125358
sg34
g752
(S"\x07\xdf\t\x1c\x112'\x00\x03\xe8"
tRp3459
sa(dp3460
S'trial_loop.thisTrialN'
p3461
I188
sg894
g1790
sS'block_loop.thisIndex'
p3462
g888
sg38
S'right'
p3463
sg58
g62
sS'trial_loop.thisN'
p3464
I188
sg33
g1183
sg63
g64
sS'trial_loop.thisIndex'
p3465
g59
(g98
S'\xbc\x00\x00\x00'
tRp3466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3467
I0
sg903
g1797
sS'block_loop.thisRepN'
p3468
I0
sg906
g1183
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3469
I0
sg908
g1177
sg55
g11
sS'block_loop.thisTrial'
p3470
Nsg69
Vn
sS'block_loop.thisTrialN'
p3471
I0
sg39
F0.98318036885029869
sg34
g752
(S'\x07\xdf\t\x1c\x112,\r\xf2P'
tRp3472
sa(dp3473
S'trial_loop.thisTrialN'
p3474
I189
sg894
g1126
sS'block_loop.thisIndex'
p3475
g888
sg38
S'right'
p3476
sg58
g62
sS'trial_loop.thisN'
p3477
I189
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p3478
g59
(g98
S'\xbd\x00\x00\x00'
tRp3479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3480
I0
sg903
g1133
sS'block_loop.thisRepN'
p3481
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3482
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3483
Nsg69
Vn
sS'block_loop.thisTrialN'
p3484
I0
sg39
F0.73353902190865483
sg34
g752
(S'\x07\xdf\t\x1c\x1122\x0e\t\xc0'
tRp3485
sa(dp3486
S'trial_loop.thisTrialN'
p3487
I190
sg894
g915
sS'block_loop.thisIndex'
p3488
g888
sg38
S'left'
p3489
sg58
g62
sS'trial_loop.thisN'
p3490
I190
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3491
g59
(g98
S'\xbe\x00\x00\x00'
tRp3492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3493
I0
sg903
g923
sS'block_loop.thisRepN'
p3494
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3495
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3496
Nsg69
Vn
sS'block_loop.thisTrialN'
p3497
I0
sg39
F1.2335222011388396
sg34
g752
(S'\x07\xdf\t\x1c\x1128\n\x8f '
tRp3498
sa(dp3499
S'trial_loop.thisTrialN'
p3500
I191
sg894
g1417
sS'block_loop.thisIndex'
p3501
g888
sg38
S'right'
p3502
sg58
g62
sS'trial_loop.thisN'
p3503
I191
sg33
g1252
sg63
g64
sS'trial_loop.thisIndex'
p3504
g59
(g98
S'\xbf\x00\x00\x00'
tRp3505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3506
I0
sg903
g1424
sS'block_loop.thisRepN'
p3507
I0
sg906
g1252
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3508
I0
sg908
g1259
sg55
g11
sS'block_loop.thisTrial'
p3509
Nsg69
Vn
sS'block_loop.thisTrialN'
p3510
I0
sg39
F0.80050935576946358
sg34
g752
(S'\x07\xdf\t\x1c\x113\x02\x0e\xb1\xb8'
tRp3511
sa(dp3512
S'trial_loop.thisTrialN'
p3513
I192
sg894
g2080
sS'block_loop.thisIndex'
p3514
g888
sg38
S'left'
p3515
sg58
g62
sS'trial_loop.thisN'
p3516
I192
sg33
g1544
sg63
g64
sS'trial_loop.thisIndex'
p3517
g59
(g98
S'\xc0\x00\x00\x00'
tRp3518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3519
I0
sg903
g2087
sS'block_loop.thisRepN'
p3520
I0
sg906
g1544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3521
I0
sg908
g1551
sg55
g11
sS'block_loop.thisTrial'
p3522
Nsg69
Vn
sS'block_loop.thisTrialN'
p3523
I0
sg39
F0.91683211843701429
sg34
g752
(S'\x07\xdf\t\x1c\x113\x08\x0b\xee\xb0'
tRp3524
sa(dp3525
S'trial_loop.thisTrialN'
p3526
I193
sg894
g1051
sS'block_loop.thisIndex'
p3527
g888
sg38
S'right'
p3528
sg58
g62
sS'trial_loop.thisN'
p3529
I193
sg33
g1055
sg63
g64
sS'trial_loop.thisIndex'
p3530
g59
(g98
S'\xc1\x00\x00\x00'
tRp3531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3532
I0
sg903
g1059
sS'block_loop.thisRepN'
p3533
I0
sg906
g1055
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3534
I0
sg908
g1062
sg55
g11
sS'block_loop.thisTrial'
p3535
Nsg69
Vn
sS'block_loop.thisTrialN'
p3536
I0
sg39
F1.1834062803645793
sg34
g752
(S'\x07\xdf\t\x1c\x113\x0e\x0bN\x88'
tRp3537
sa(dp3538
S'trial_loop.thisTrialN'
p3539
I194
sg894
g983
sS'block_loop.thisIndex'
p3540
g888
sg38
S'left'
p3541
sg58
g62
sS'trial_loop.thisN'
p3542
I194
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p3543
g59
(g98
S'\xc2\x00\x00\x00'
tRp3544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3545
I0
sg903
g991
sS'block_loop.thisRepN'
p3546
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3547
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p3548
Nsg69
Vn
sS'block_loop.thisTrialN'
p3549
I0
sg39
F0.71738281338912202
sg34
g752
(S'\x07\xdf\t\x1c\x113\x14\x0e~\xf0'
tRp3550
sa(dp3551
S'trial_loop.thisTrialN'
p3552
I195
sg894
g1719
sS'block_loop.thisIndex'
p3553
g888
sg38
S'left'
p3554
sg58
g62
sS'trial_loop.thisN'
p3555
I195
sg33
g1723
sg63
g64
sS'trial_loop.thisIndex'
p3556
g59
(g98
S'\xc3\x00\x00\x00'
tRp3557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3558
I0
sg903
g1727
sS'block_loop.thisRepN'
p3559
I0
sg906
g1723
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3560
I0
sg908
g1730
sg55
g11
sS'block_loop.thisTrial'
p3561
Nsg69
Vn
sS'block_loop.thisTrialN'
p3562
I0
sg39
F1.7668321754572389
sg34
g752
(S'\x07\xdf\t\x1c\x113\x1a\n\xc5\xd0'
tRp3563
sa(dp3564
S'trial_loop.thisTrialN'
p3565
I196
sg894
g1611
sS'block_loop.thisIndex'
p3566
g888
sg38
S'left'
p3567
sg58
g62
sS'trial_loop.thisN'
p3568
I196
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p3569
g59
(g98
S'\xc4\x00\x00\x00'
tRp3570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3571
I0
sg903
g1618
sS'block_loop.thisRepN'
p3572
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3573
I0
sg908
g1291
sg55
g11
sS'block_loop.thisTrial'
p3574
Nsg69
Vn
sS'block_loop.thisTrialN'
p3575
I0
sg39
F1.8334769276007137
sg34
g752
(S'\x07\xdf\t\x1c\x113!\x07\xc0`'
tRp3576
sa(dp3577
S'trial_loop.thisTrialN'
p3578
I197
sg894
g1402
sS'block_loop.thisIndex'
p3579
g888
sg38
S'left'
p3580
sg58
g62
sS'trial_loop.thisN'
p3581
I197
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p3582
g59
(g98
S'\xc5\x00\x00\x00'
tRp3583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3584
I0
sg903
g1409
sS'block_loop.thisRepN'
p3585
I0
sg906
g1027
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3586
I0
sg908
g1021
sg55
g11
sS'block_loop.thisTrial'
p3587
Nsg69
Vn
sS'block_loop.thisTrialN'
p3588
I0
sg39
F1.416762554570596
sg34
g752
(S'\x07\xdf\t\x1c\x113(\x05\xad '
tRp3589
sa(dp3590
S'trial_loop.thisTrialN'
p3591
I198
sg894
g1297
sS'block_loop.thisIndex'
p3592
g888
sg38
S'right'
p3593
sg58
g62
sS'trial_loop.thisN'
p3594
I198
sg33
g1160
sg63
g64
sS'trial_loop.thisIndex'
p3595
g59
(g98
S'\xc6\x00\x00\x00'
tRp3596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3597
I0
sg903
g1304
sS'block_loop.thisRepN'
p3598
I0
sg906
g1160
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3599
I0
sg908
g1167
sg55
g11
sS'block_loop.thisTrial'
p3600
Nsg69
Vn
sS'block_loop.thisTrialN'
p3601
I0
sg39
F0.95014066726434976
sg34
g752
(S'\x07\xdf\t\x1c\x113.\x0co\x98'
tRp3602
sa(dp3603
S'trial_loop.thisTrialN'
p3604
I199
sg894
g1017
sS'block_loop.thisIndex'
p3605
g888
sg38
S'left'
p3606
sg58
g62
sS'trial_loop.thisN'
p3607
I199
sg33
g1027
sg63
g64
sS'trial_loop.thisIndex'
p3608
g59
(g98
S'\xc7\x00\x00\x00'
tRp3609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3610
I0
sg903
g1025
sS'block_loop.thisRepN'
p3611
I0
sg906
g1027
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3612
I0
sg908
g1021
sg55
g11
sS'block_loop.thisTrial'
p3613
Nsg69
Vn
sS'block_loop.thisTrialN'
p3614
I0
sg39
F0.86692118299470167
sg34
g752
(S'\x07\xdf\t\x1c\x1134\x0cH\x88'
tRp3615
sa(dp3616
S'block_loop.thisRepN'
p3617
I0
sg55
g11
sg41
F37.299242381046497
sg56
Vr
sS'block_loop.thisIndex'
p3618
g888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3619
I0
sg40
S'space'
p3620
sg63
g64
sS'block_loop.thisTrial'
p3621
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3622
I0
sg69
Vn
sa(dp3623
S'block_loop.thisRepN'
p3624
I1
sg56
Vr
sS'block_loop.thisIndex'
p3625
g59
(g98
S'\x00\x00\x00\x00'
tRp3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3627
I1
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p3628
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3629
I0
sg69
Vn
sa(dp3630
S'trial_loop.thisTrialN'
p3631
I0
sS'img_left'
p3632
S'3-ellas_strawberries_apples.png'
p3633
sS'block_loop.thisIndex'
p3634
g3626
sg38
S'right'
p3635
sg58
g62
sS'trial_loop.thisN'
p3636
I0
sg33
S'13-mccoys_steak_crisps.png'
p3637
sg63
g64
sS'trial_loop.thisIndex'
p3638
g59
(g98
S'\x00\x00\x00\x00'
tRp3639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3640
I0
sS'img_right'
p3641
S'13-mccoys_steak_crisps.png'
p3642
sS'block_loop.thisRepN'
p3643
I1
sS'img_correct'
p3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3645
I1
sS'img_wrong'
p3646
S'3-ellas_strawberries_apples.png'
p3647
sg55
g11
sS'block_loop.thisTrial'
p3648
Nsg69
Vn
sS'block_loop.thisTrialN'
p3649
I0
sg39
F0.96688645808171714
sg34
g752
(S'\x07\xdf\t\x1c\x114)\x00\x9c@'
tRp3650
sa(dp3651
S'trial_loop.thisTrialN'
p3652
I1
sg3632
S'42-mrkipling_lemon_slices.png'
p3653
sS'block_loop.thisIndex'
p3654
g3626
sg38
S'right'
p3655
sg58
g62
sS'trial_loop.thisN'
p3656
I1
sg33
S'16-skips_prawn.png'
p3657
sg63
g64
sS'trial_loop.thisIndex'
p3658
g59
(g98
S'\x01\x00\x00\x00'
tRp3659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3660
I0
sg3641
S'16-skips_prawn.png'
p3661
sS'block_loop.thisRepN'
p3662
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3663
I1
sg3646
S'42-mrkipling_lemon_slices.png'
p3664
sg55
g11
sS'block_loop.thisTrial'
p3665
Nsg69
Vn
sS'block_loop.thisTrialN'
p3666
I0
sg39
F0.85000119741016533
sg34
g752
(S'\x07\xdf\t\x1c\x114/\x00y\x18'
tRp3667
sa(dp3668
S'trial_loop.thisTrialN'
p3669
I2
sg3632
S'44-crunch.png'
p3670
sS'block_loop.thisIndex'
p3671
g3626
sg38
S'right'
p3672
sg58
g62
sS'trial_loop.thisN'
p3673
I2
sg33
S'44-crunch.png'
p3674
sg63
g64
sS'trial_loop.thisIndex'
p3675
g59
(g98
S'\x02\x00\x00\x00'
tRp3676
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3677
I0
sg3641
S'26-walkers_smoky_bacon.png'
p3678
sS'block_loop.thisRepN'
p3679
I1
sg3644
S'26-walkers_smoky_bacon.png'
p3680
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3681
I1
sg3646
g3674
sg55
g11
sS'block_loop.thisTrial'
p3682
Nsg69
Vn
sS'block_loop.thisTrialN'
p3683
I0
sg39
F0.85011124517041026
sg34
g752
(S'\x07\xdf\t\x1c\x1144\x0e)\x00'
tRp3684
sa(dp3685
S'trial_loop.thisTrialN'
p3686
I3
sg3632
S'30-spaghetti_hoops.png'
p3687
sS'block_loop.thisIndex'
p3688
g3626
sg38
S'left'
p3689
sg58
g62
sS'trial_loop.thisN'
p3690
I3
sg33
S'30-spaghetti_hoops.png'
p3691
sg63
g64
sS'trial_loop.thisIndex'
p3692
g59
(g98
S'\x03\x00\x00\x00'
tRp3693
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3694
I0
sg3641
S'19-caramello_redo.png'
p3695
sS'block_loop.thisRepN'
p3696
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3697
I1
sg3646
S'19-caramello_redo.png'
p3698
sg55
g11
sS'block_loop.thisTrial'
p3699
Nsg69
Vn
sS'block_loop.thisTrialN'
p3700
I0
sg39
F1.0335198063185089
sg34
g752
(S'\x07\xdf\t\x1c\x114:\x0cX('
tRp3701
sa(dp3702
S'trial_loop.thisTrialN'
p3703
I4
sg3632
S'38-maltesers.png'
p3704
sS'block_loop.thisIndex'
p3705
g3626
sg38
S'left'
p3706
sg58
g62
sS'trial_loop.thisN'
p3707
I4
sg33
S'38-maltesers.png'
p3708
sg63
g64
sS'trial_loop.thisIndex'
p3709
g59
(g98
S'\x04\x00\x00\x00'
tRp3710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3711
I0
sg3641
S'6-sour_patch_kids.png'
p3712
sS'block_loop.thisRepN'
p3713
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3714
I1
sg3646
S'6-sour_patch_kids.png'
p3715
sg55
g11
sS'block_loop.thisTrial'
p3716
Nsg69
Vn
sS'block_loop.thisTrialN'
p3717
I0
sg39
F0.96654263010714203
sg34
g752
(S'\x07\xdf\t\x1c\x115\x04\ra\xc8'
tRp3718
sa(dp3719
S'trial_loop.thisTrialN'
p3720
I5
sg3632
S'31-hobnobs.png'
p3721
sS'block_loop.thisIndex'
p3722
g3626
sg38
S'right'
p3723
sg58
g62
sS'trial_loop.thisN'
p3724
I5
sg33
S'31-hobnobs.png'
p3725
sg63
g64
sS'trial_loop.thisIndex'
p3726
g59
(g98
S'\x05\x00\x00\x00'
tRp3727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3728
I0
sg3641
S'25-kitkat.png'
p3729
sS'block_loop.thisRepN'
p3730
I1
sg3644
S'25-kitkat.png'
p3731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3732
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p3733
Nsg69
Vn
sS'block_loop.thisTrialN'
p3734
I0
sg39
F0.86684905324727879
sg34
g752
(S'\x07\xdf\t\x1c\x115\n\r>\xa0'
tRp3735
sa(dp3736
S'trial_loop.thisTrialN'
p3737
I6
sg3632
S'23-crunchie_redo.png'
p3738
sS'block_loop.thisIndex'
p3739
g3626
sg38
S'left'
p3740
sg58
g62
sS'trial_loop.thisN'
p3741
I6
sg33
S'23-crunchie_redo.png'
p3742
sg63
g64
sS'trial_loop.thisIndex'
p3743
g59
(g98
S'\x06\x00\x00\x00'
tRp3744
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3745
I0
sg3641
S'33-ambrosia_rice.png'
p3746
sS'block_loop.thisRepN'
p3747
I1
sg3644
S'33-ambrosia_rice.png'
p3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3749
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p3750
Nsg69
Vn
sS'block_loop.thisTrialN'
p3751
I0
sg39
F1.1334870770879206
sg34
g752
(S'\x07\xdf\t\x1c\x115\x10\x0b\xa8`'
tRp3752
sa(dp3753
S'trial_loop.thisTrialN'
p3754
I7
sg3632
S'34-hula_hoops_bbq_beef_redo.png'
p3755
sS'block_loop.thisIndex'
p3756
g3626
sg38
S'right'
p3757
sg58
g62
sS'trial_loop.thisN'
p3758
I7
sg33
S'36-fig_rolls.png'
p3759
sg63
g64
sS'trial_loop.thisIndex'
p3760
g59
(g98
S'\x07\x00\x00\x00'
tRp3761
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3762
I0
sg3641
S'36-fig_rolls.png'
p3763
sS'block_loop.thisRepN'
p3764
I1
sg3644
S'34-hula_hoops_bbq_beef_redo.png'
p3765
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3766
I1
sg3646
g3759
sg55
g11
sS'block_loop.thisTrial'
p3767
Nsg69
Vn
sS'block_loop.thisTrialN'
p3768
I0
sg39
F1.4168748831107223
sg34
g752
(S'\x07\xdf\t\x1c\x115\x16\x0e_\xb0'
tRp3769
sa(dp3770
S'trial_loop.thisTrialN'
p3771
I8
sg3632
S'29-beans.png'
p3772
sS'block_loop.thisIndex'
p3773
g3626
sg38
S'left'
p3774
sg58
g62
sS'trial_loop.thisN'
p3775
I8
sg33
S'29-beans.png'
p3776
sg63
g64
sS'trial_loop.thisIndex'
p3777
g59
(g98
S'\x08\x00\x00\x00'
tRp3778
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3779
I0
sg3641
S'46-pistachios.png'
p3780
sS'block_loop.thisRepN'
p3781
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3782
I1
sg3646
S'46-pistachios.png'
p3783
sg55
g11
sS'block_loop.thisTrial'
p3784
Nsg69
Vn
sS'block_loop.thisTrialN'
p3785
I0
sg39
F0.88352014843621873
sg34
g752
(S'\x07\xdf\t\x1c\x115\x1d\x05\xdf\xe8'
tRp3786
sa(dp3787
S'trial_loop.thisTrialN'
p3788
I9
sg3632
S'21-nakd_banana_crunch.png'
p3789
sS'block_loop.thisIndex'
p3790
g3626
sg38
S'right'
p3791
sg58
g62
sS'trial_loop.thisN'
p3792
I9
sg33
S'1-treacle_cookies.png'
p3793
sg63
g64
sS'trial_loop.thisIndex'
p3794
g59
(g98
S'\t\x00\x00\x00'
tRp3795
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3796
I0
sg3641
S'1-treacle_cookies.png'
p3797
sS'block_loop.thisRepN'
p3798
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3799
I1
sg3646
S'21-nakd_banana_crunch.png'
p3800
sg55
g11
sS'block_loop.thisTrial'
p3801
Nsg69
Vn
sS'block_loop.thisTrialN'
p3802
I0
sg39
F0.73346290078916354
sg34
g752
(S'\x07\xdf\t\x1c\x115#\x04\x88('
tRp3803
sa(dp3804
S'trial_loop.thisTrialN'
p3805
I10
sg3632
S'48-twix.png'
p3806
sS'block_loop.thisIndex'
p3807
g3626
sg38
S'right'
p3808
sg58
g62
sS'trial_loop.thisN'
p3809
I10
sg33
S'50-polo.png'
p3810
sg63
g64
sS'trial_loop.thisIndex'
p3811
g59
(g98
S'\n\x00\x00\x00'
tRp3812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3813
I0
sg3641
S'50-polo.png'
p3814
sS'block_loop.thisRepN'
p3815
I1
sg3644
g3810
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3816
I1
sg3646
S'48-twix.png'
p3817
sg55
g11
sS'block_loop.thisTrial'
p3818
Nsg69
Vn
sS'block_loop.thisTrialN'
p3819
I0
sg39
F0.78354689060870442
sg34
g752
(S'\x07\xdf\t\x1c\x115)\x01\r\x88'
tRp3820
sa(dp3821
S'trial_loop.thisTrialN'
p3822
I11
sg3632
S'43-mrporky_pork_crackles_redo.png'
p3823
sS'block_loop.thisIndex'
p3824
g3626
sg38
S'right'
p3825
sg58
g62
sS'trial_loop.thisN'
p3826
I11
sg33
S'18-mms.png'
p3827
sg63
g64
sS'trial_loop.thisIndex'
p3828
g59
(g98
S'\x0b\x00\x00\x00'
tRp3829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3830
I0
sg3641
S'18-mms.png'
p3831
sS'block_loop.thisRepN'
p3832
I1
sg3644
g3827
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3833
I1
sg3646
S'43-mrporky_pork_crackles_redo.png'
p3834
sg55
g11
sS'block_loop.thisTrial'
p3835
Nsg69
Vn
sS'block_loop.thisTrialN'
p3836
I0
sg39
F0.83352938560346956
sg34
g752
(S'\x07\xdf\t\x1c\x115.\r\x8c\xc0'
tRp3837
sa(dp3838
S'trial_loop.thisTrialN'
p3839
I12
sg3632
S'36-fig_rolls.png'
p3840
sS'block_loop.thisIndex'
p3841
g3626
sg38
S'left'
p3842
sg58
g62
sS'trial_loop.thisN'
p3843
I12
sg33
g3765
sg63
g64
sS'trial_loop.thisIndex'
p3844
g59
(g98
S'\x0c\x00\x00\x00'
tRp3845
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3846
I0
sg3641
S'34-hula_hoops_bbq_beef_redo.png'
p3847
sS'block_loop.thisRepN'
p3848
I1
sg3644
g3765
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3849
I1
sg3646
g3759
sg55
g11
sS'block_loop.thisTrial'
p3850
Nsg69
Vn
sS'block_loop.thisTrialN'
p3851
I0
sg39
F1.2001965464405657
sg34
g752
(S'\x07\xdf\t\x1c\x1154\x0b\x81P'
tRp3852
sa(dp3853
S'trial_loop.thisTrialN'
p3854
I13
sg3632
g3633
sS'block_loop.thisIndex'
p3855
g3626
sg38
S'right'
p3856
sg58
g62
sS'trial_loop.thisN'
p3857
I13
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p3858
g59
(g98
S'\r\x00\x00\x00'
tRp3859
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3860
I0
sg3641
g3642
sS'block_loop.thisRepN'
p3861
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3862
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p3863
Nsg69
Vn
sS'block_loop.thisTrialN'
p3864
I0
sg39
F0.91685834743839223
sg34
g752
(S'\x07\xdf\t\x1c\x115:\x0f*\xd0'
tRp3865
sa(dp3866
S'trial_loop.thisTrialN'
p3867
I14
sg3632
S'16-skips_prawn.png'
p3868
sS'block_loop.thisIndex'
p3869
g3626
sg38
S'left'
p3870
sg58
g62
sS'trial_loop.thisN'
p3871
I14
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p3872
g59
(g98
S'\x0e\x00\x00\x00'
tRp3873
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3874
I0
sg3641
S'42-mrkipling_lemon_slices.png'
p3875
sS'block_loop.thisRepN'
p3876
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3877
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p3878
Nsg69
Vn
sS'block_loop.thisTrialN'
p3879
I0
sg39
F1.7166797621575824
sg34
g752
(S'\x07\xdf\t\x1c\x116\x04\x0eL('
tRp3880
sa(dp3881
S'trial_loop.thisTrialN'
p3882
I15
sg3632
S'40-sardines.png'
p3883
sS'block_loop.thisIndex'
p3884
g3626
sg38
S'right'
p3885
sg58
g62
sS'trial_loop.thisN'
p3886
I15
sg33
S'40-sardines.png'
p3887
sg63
g64
sS'trial_loop.thisIndex'
p3888
g59
(g98
S'\x0f\x00\x00\x00'
tRp3889
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3890
I0
sg3641
S'5-pineapple.png'
p3891
sS'block_loop.thisRepN'
p3892
I1
sg3644
S'5-pineapple.png'
p3893
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3894
I1
sg3646
g3887
sg55
g11
sS'block_loop.thisTrial'
p3895
Nsg69
Vn
sS'block_loop.thisTrialN'
p3896
I0
sg39
F0.71722087782836752
sg34
g752
(S'\x07\xdf\t\x1c\x116\x0b\n\x8f '
tRp3897
sa(dp3898
S'trial_loop.thisTrialN'
p3899
I16
sg3632
g3806
sS'block_loop.thisIndex'
p3900
g3626
sg38
S'right'
p3901
sg58
g62
sS'trial_loop.thisN'
p3902
I16
sg33
g3817
sg63
g64
sS'trial_loop.thisIndex'
p3903
g59
(g98
S'\x10\x00\x00\x00'
tRp3904
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3905
I0
sg3641
g3814
sS'block_loop.thisRepN'
p3906
I1
sg3644
g3810
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3907
I1
sg3646
g3817
sg55
g11
sS'block_loop.thisTrial'
p3908
Nsg69
Vn
sS'block_loop.thisTrialN'
p3909
I0
sg39
F0.70012042532107444
sg34
g752
(S'\x07\xdf\t\x1c\x116\x11\x06\x9bh'
tRp3910
sa(dp3911
S'trial_loop.thisTrialN'
p3912
I17
sg3632
S'20-fruit_pastilles.png'
p3913
sS'block_loop.thisIndex'
p3914
g3626
sg38
S'right'
p3915
sg58
g62
sS'trial_loop.thisN'
p3916
I17
sg33
S'2-steamed_puddings.png'
p3917
sg63
g64
sS'trial_loop.thisIndex'
p3918
g59
(g98
S'\x11\x00\x00\x00'
tRp3919
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3920
I0
sg3641
S'2-steamed_puddings.png'
p3921
sS'block_loop.thisRepN'
p3922
I1
sg3644
g3917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3923
I1
sg3646
S'20-fruit_pastilles.png'
p3924
sg55
g11
sS'block_loop.thisTrial'
p3925
Nsg69
Vn
sS'block_loop.thisTrialN'
p3926
I0
sg39
F1.0834301715622132
sg34
g752
(S'\x07\xdf\t\x1c\x116\x17\x02\xa7\xb0'
tRp3927
sa(dp3928
S'trial_loop.thisTrialN'
p3929
I18
sg3632
S'33-ambrosia_rice.png'
p3930
sS'block_loop.thisIndex'
p3931
g3626
sg38
S'right'
p3932
sg58
g62
sS'trial_loop.thisN'
p3933
I18
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p3934
g59
(g98
S'\x12\x00\x00\x00'
tRp3935
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3936
I0
sg3641
S'23-crunchie_redo.png'
p3937
sS'block_loop.thisRepN'
p3938
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3939
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p3940
Nsg69
Vn
sS'block_loop.thisTrialN'
p3941
I0
sg39
F0.96677698051644256
sg34
g752
(S'\x07\xdf\t\x1c\x116\x1d\x04h\xe8'
tRp3942
sa(dp3943
S'trial_loop.thisTrialN'
p3944
I19
sg3632
g3789
sS'block_loop.thisIndex'
p3945
g3626
sg38
S'right'
p3946
sg58
g62
sS'trial_loop.thisN'
p3947
I19
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p3948
g59
(g98
S'\x13\x00\x00\x00'
tRp3949
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3950
I0
sg3641
g3797
sS'block_loop.thisRepN'
p3951
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3952
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p3953
Nsg69
Vn
sS'block_loop.thisTrialN'
p3954
I0
sg39
F0.6168735716601077
sg34
g752
(S'\x07\xdf\t\x1c\x116#\x04A\xd8'
tRp3955
sa(dp3956
S'trial_loop.thisTrialN'
p3957
I20
sg3632
g3840
sS'block_loop.thisIndex'
p3958
g3626
sg38
S'left'
p3959
sg58
g62
sS'trial_loop.thisN'
p3960
I20
sg33
g3765
sg63
g64
sS'trial_loop.thisIndex'
p3961
g59
(g98
S'\x14\x00\x00\x00'
tRp3962
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3963
I0
sg3641
g3847
sS'block_loop.thisRepN'
p3964
I1
sg3644
g3765
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3965
I1
sg3646
g3759
sg55
g11
sS'block_loop.thisTrial'
p3966
Nsg69
Vn
sS'block_loop.thisTrialN'
p3967
I0
sg39
F0.9334513258181687
sg34
g752
(S'\x07\xdf\t\x1c\x116(\x0e_\xb0'
tRp3968
sa(dp3969
S'trial_loop.thisTrialN'
p3970
I21
sg3632
S'49-yorkie.png'
p3971
sS'block_loop.thisIndex'
p3972
g3626
sg38
S'left'
p3973
sg58
g62
sS'trial_loop.thisN'
p3974
I21
sg33
S'49-yorkie.png'
p3975
sg63
g64
sS'trial_loop.thisIndex'
p3976
g59
(g98
S'\x15\x00\x00\x00'
tRp3977
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3978
I0
sg3641
S'35-raisins.png'
p3979
sS'block_loop.thisRepN'
p3980
I1
sg3644
g3975
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3981
I1
sg3646
S'35-raisins.png'
p3982
sg55
g11
sS'block_loop.thisTrial'
p3983
Nsg69
Vn
sS'block_loop.thisTrialN'
p3984
I0
sg39
F0.76685555347648915
sg34
g752
(S'\x07\xdf\t\x1c\x116.\r\xbf\x88'
tRp3985
sa(dp3986
S'trial_loop.thisTrialN'
p3987
I22
sg3632
S'5-pineapple.png'
p3988
sS'block_loop.thisIndex'
p3989
g3626
sg38
S'left'
p3990
sg58
g62
sS'trial_loop.thisN'
p3991
I22
sg33
g3893
sg63
g64
sS'trial_loop.thisIndex'
p3992
g59
(g98
S'\x16\x00\x00\x00'
tRp3993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3994
I0
sg3641
S'40-sardines.png'
p3995
sS'block_loop.thisRepN'
p3996
I1
sg3644
g3893
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3997
I1
sg3646
g3887
sg55
g11
sS'block_loop.thisTrial'
p3998
Nsg69
Vn
sS'block_loop.thisTrialN'
p3999
I0
sg39
F1.0000775466069172
sg34
g752
(S'\x07\xdf\t\x1c\x1164\n\xc1\xe8'
tRp4000
sa(dp4001
S'trial_loop.thisTrialN'
p4002
I23
sg3632
S'46-pistachios.png'
p4003
sS'block_loop.thisIndex'
p4004
g3626
sg38
S'right'
p4005
sg58
g62
sS'trial_loop.thisN'
p4006
I23
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p4007
g59
(g98
S'\x17\x00\x00\x00'
tRp4008
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4009
I0
sg3641
S'29-beans.png'
p4010
sS'block_loop.thisRepN'
p4011
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4012
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4013
Nsg69
Vn
sS'block_loop.thisTrialN'
p4014
I0
sg39
F0.91677338828594657
sg34
g752
(S'\x07\xdf\t\x1c\x116:\x0bRp'
tRp4015
sa(dp4016
S'trial_loop.thisTrialN'
p4017
I24
sg3632
S'7-olives.png'
p4018
sS'block_loop.thisIndex'
p4019
g3626
sg38
S'left'
p4020
sg58
g62
sS'trial_loop.thisN'
p4021
I24
sg33
S'22-daim.png'
p4022
sg63
g64
sS'trial_loop.thisIndex'
p4023
g59
(g98
S'\x18\x00\x00\x00'
tRp4024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4025
I0
sg3641
S'22-daim.png'
p4026
sS'block_loop.thisRepN'
p4027
I1
sg3644
g4022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4028
I1
sg3646
S'7-olives.png'
p4029
sg55
g11
sS'block_loop.thisTrial'
p4030
Nsg69
Vn
sS'block_loop.thisTrialN'
p4031
I0
sg39
F0.8335139903210802
sg34
g752
(S'\x07\xdf\t\x1c\x117\x04\ns\xc8'
tRp4032
sa(dp4033
S'trial_loop.thisTrialN'
p4034
I25
sg3632
g3823
sS'block_loop.thisIndex'
p4035
g3626
sg38
S'right'
p4036
sg58
g62
sS'trial_loop.thisN'
p4037
I25
sg33
g3827
sg63
g64
sS'trial_loop.thisIndex'
p4038
g59
(g98
S'\x19\x00\x00\x00'
tRp4039
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4040
I0
sg3641
g3831
sS'block_loop.thisRepN'
p4041
I1
sg3644
g3827
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4042
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p4043
Nsg69
Vn
sS'block_loop.thisTrialN'
p4044
I0
sg39
F1.0002788256715576
sg34
g752
(S'\x07\xdf\t\x1c\x117\n\x08hX'
tRp4045
sa(dp4046
S'trial_loop.thisTrialN'
p4047
I26
sg3632
S'45-chewy_nougat_redo.png'
p4048
sS'block_loop.thisIndex'
p4049
g3626
sg38
S'right'
p4050
sg58
g62
sS'trial_loop.thisN'
p4051
I26
sg33
S'45-chewy_nougat_redo.png'
p4052
sg63
g64
sS'trial_loop.thisIndex'
p4053
g59
(g98
S'\x1a\x00\x00\x00'
tRp4054
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4055
I0
sg3641
S'41-peanuts_redo.png'
p4056
sS'block_loop.thisRepN'
p4057
I1
sg3644
S'41-peanuts_redo.png'
p4058
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4059
I1
sg3646
g4052
sg55
g11
sS'block_loop.thisTrial'
p4060
Nsg69
Vn
sS'block_loop.thisTrialN'
p4061
I0
sg39
F0.78347761183977127
sg34
g752
(S'\x07\xdf\t\x1c\x117\x10\x08\xf8\xe0'
tRp4062
sa(dp4063
S'trial_loop.thisTrialN'
p4064
I27
sg3632
g3913
sS'block_loop.thisIndex'
p4065
g3626
sg38
S'right'
p4066
sg58
g62
sS'trial_loop.thisN'
p4067
I27
sg33
g3917
sg63
g64
sS'trial_loop.thisIndex'
p4068
g59
(g98
S'\x1b\x00\x00\x00'
tRp4069
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4070
I0
sg3641
g3921
sS'block_loop.thisRepN'
p4071
I1
sg3644
g3917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4072
I1
sg3646
g3924
sg55
g11
sS'block_loop.thisTrial'
p4073
Nsg69
Vn
sS'block_loop.thisTrialN'
p4074
I0
sg39
F1.0006129603170848
sg34
g752
(S'\x07\xdf\t\x1c\x117\x16\x065\xd8'
tRp4075
sa(dp4076
S'trial_loop.thisTrialN'
p4077
I28
sg3632
g4048
sS'block_loop.thisIndex'
p4078
g3626
sg38
S'right'
p4079
sg58
g62
sS'trial_loop.thisN'
p4080
I28
sg33
g4058
sg63
g64
sS'trial_loop.thisIndex'
p4081
g59
(g98
S'\x1c\x00\x00\x00'
tRp4082
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4083
I0
sg3641
g4056
sS'block_loop.thisRepN'
p4084
I1
sg3644
g4058
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4085
I1
sg3646
g4052
sg55
g11
sS'block_loop.thisTrial'
p4086
Nsg69
Vn
sS'block_loop.thisTrialN'
p4087
I0
sg39
F0.78350555142242229
sg34
g752
(S'\x07\xdf\t\x1c\x117\x1c\x06\xc6`'
tRp4088
sa(dp4089
S'trial_loop.thisTrialN'
p4090
I29
sg3632
S'51-mars.png'
p4091
sS'block_loop.thisIndex'
p4092
g3626
sg38
S'right'
p4093
sg58
g62
sS'trial_loop.thisN'
p4094
I29
sg33
S'51-mars.png'
p4095
sg63
g64
sS'trial_loop.thisIndex'
p4096
g59
(g98
S'\x1d\x00\x00\x00'
tRp4097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4098
I0
sg3641
S'27-hartleys_raspberries_jelly.png'
p4099
sS'block_loop.thisRepN'
p4100
I1
sg3644
S'27-hartleys_raspberries_jelly.png'
p4101
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4102
I1
sg3646
g4095
sg55
g11
sS'block_loop.thisTrial'
p4103
Nsg69
Vn
sS'block_loop.thisTrialN'
p4104
I0
sg39
F0.88342891712818528
sg34
g752
(S'\x07\xdf\t\x1c\x117"\x03\xc4\xd8'
tRp4105
sa(dp4106
S'trial_loop.thisTrialN'
p4107
I30
sg3632
S'8-liquorice_catherine_wheels.png'
p4108
sS'block_loop.thisIndex'
p4109
g3626
sg38
S'right'
p4110
sg58
g62
sS'trial_loop.thisN'
p4111
I30
sg33
S'17-jacobs_mini_cheddars_redo.png'
p4112
sg63
g64
sS'trial_loop.thisIndex'
p4113
g59
(g98
S'\x1e\x00\x00\x00'
tRp4114
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4115
I0
sg3641
S'17-jacobs_mini_cheddars_redo.png'
p4116
sS'block_loop.thisRepN'
p4117
I1
sg3644
g4112
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4118
I1
sg3646
S'8-liquorice_catherine_wheels.png'
p4119
sg55
g11
sS'block_loop.thisTrial'
p4120
Nsg69
Vn
sS'block_loop.thisTrialN'
p4121
I0
sg39
F0.86686102735620807
sg34
g752
(S'\x07\xdf\t\x1c\x117(\x02\xab\x98'
tRp4122
sa(dp4123
S'trial_loop.thisTrialN'
p4124
I31
sg3632
g3883
sS'block_loop.thisIndex'
p4125
g3626
sg38
S'right'
p4126
sg58
g62
sS'trial_loop.thisN'
p4127
I31
sg33
g3893
sg63
g64
sS'trial_loop.thisIndex'
p4128
g59
(g98
S'\x1f\x00\x00\x00'
tRp4129
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4130
I0
sg3641
g3891
sS'block_loop.thisRepN'
p4131
I1
sg3644
g3893
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4132
I1
sg3646
g3887
sg55
g11
sS'block_loop.thisTrial'
p4133
Nsg69
Vn
sS'block_loop.thisTrialN'
p4134
I0
sg39
F0.7668678126829036
sg34
g752
(S'\x07\xdf\t\x1c\x117.\x01\x19@'
tRp4135
sa(dp4136
S'trial_loop.thisTrialN'
p4137
I32
sg3632
g3868
sS'block_loop.thisIndex'
p4138
g3626
sg38
S'left'
p4139
sg58
g62
sS'trial_loop.thisN'
p4140
I32
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4141
g59
(g98
S' \x00\x00\x00'
tRp4142
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4143
I0
sg3641
g3875
sS'block_loop.thisRepN'
p4144
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4145
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4146
Nsg69
Vn
sS'block_loop.thisTrialN'
p4147
I0
sg39
F0.88338871833548183
sg34
g752
(S'\x07\xdf\t\x1c\x1173\rY\xf8'
tRp4148
sa(dp4149
S'trial_loop.thisTrialN'
p4150
I33
sg3632
g4003
sS'block_loop.thisIndex'
p4151
g3626
sg38
S'right'
p4152
sg58
g62
sS'trial_loop.thisN'
p4153
I33
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p4154
g59
(g98
S'!\x00\x00\x00'
tRp4155
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4156
I0
sg3641
g4010
sS'block_loop.thisRepN'
p4157
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4158
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4159
Nsg69
Vn
sS'block_loop.thisTrialN'
p4160
I0
sg39
F0.88370517692237627
sg34
g752
(S'\x07\xdf\t\x1c\x1179\x0c\x06 '
tRp4161
sa(dp4162
S'trial_loop.thisTrialN'
p4163
I34
sg3632
g3687
sS'block_loop.thisIndex'
p4164
g3626
sg38
S'left'
p4165
sg58
g62
sS'trial_loop.thisN'
p4166
I34
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4167
g59
(g98
S'"\x00\x00\x00'
tRp4168
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4169
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4170
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4171
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4172
Nsg69
Vn
sS'block_loop.thisTrialN'
p4173
I0
sg39
F0.86673729489848483
sg34
g752
(S'\x07\xdf\t\x1c\x118\x03\n\xae`'
tRp4174
sa(dp4175
S'trial_loop.thisTrialN'
p4176
I35
sg3632
g4003
sS'block_loop.thisIndex'
p4177
g3626
sg38
S'right'
p4178
sg58
g62
sS'trial_loop.thisN'
p4179
I35
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p4180
g59
(g98
S'#\x00\x00\x00'
tRp4181
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4182
I0
sg3641
g4010
sS'block_loop.thisRepN'
p4183
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4184
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4185
Nsg69
Vn
sS'block_loop.thisTrialN'
p4186
I0
sg39
F0.80013872859854018
sg34
g752
(S'\x07\xdf\t\x1c\x118\t\t\x1c\x08'
tRp4187
sa(dp4188
S'trial_loop.thisTrialN'
p4189
I36
sg3632
S'2-steamed_puddings.png'
p4190
sS'block_loop.thisIndex'
p4191
g3626
sg38
S'left'
p4192
sg58
g62
sS'trial_loop.thisN'
p4193
I36
sg33
g3917
sg63
g64
sS'trial_loop.thisIndex'
p4194
g59
(g98
S'$\x00\x00\x00'
tRp4195
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4196
I0
sg3641
S'20-fruit_pastilles.png'
p4197
sS'block_loop.thisRepN'
p4198
I1
sg3644
g3917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4199
I1
sg3646
g3924
sg55
g11
sS'block_loop.thisTrial'
p4200
Nsg69
Vn
sS'block_loop.thisTrialN'
p4201
I0
sg39
F1.0001967174976016
sg34
g752
(S'\x07\xdf\t\x1c\x118\x0f\x06\x97\x80'
tRp4202
sa(dp4203
S'trial_loop.thisTrialN'
p4204
I37
sg3632
g4108
sS'block_loop.thisIndex'
p4205
g3626
sg38
S'right'
p4206
sg58
g62
sS'trial_loop.thisN'
p4207
I37
sg33
g4112
sg63
g64
sS'trial_loop.thisIndex'
p4208
g59
(g98
S'%\x00\x00\x00'
tRp4209
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4210
I0
sg3641
g4116
sS'block_loop.thisRepN'
p4211
I1
sg3644
g4112
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4212
I1
sg3646
g4119
sg55
g11
sS'block_loop.thisTrial'
p4213
Nsg69
Vn
sS'block_loop.thisTrialN'
p4214
I0
sg39
F0.96685509731833008
sg34
g752
(S'\x07\xdf\t\x1c\x118\x15\x07(\x08'
tRp4215
sa(dp4216
S'trial_loop.thisTrialN'
p4217
I38
sg3632
S'13-mccoys_steak_crisps.png'
p4218
sS'block_loop.thisIndex'
p4219
g3626
sg38
S'left'
p4220
sg58
g62
sS'trial_loop.thisN'
p4221
I38
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4222
g59
(g98
S'&\x00\x00\x00'
tRp4223
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4224
I0
sg3641
S'3-ellas_strawberries_apples.png'
p4225
sS'block_loop.thisRepN'
p4226
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4227
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4228
Nsg69
Vn
sS'block_loop.thisTrialN'
p4229
I0
sg39
F1.1835348594831885
sg34
g752
(S'\x07\xdf\t\x1c\x118\x1b\x07?x'
tRp4230
sa(dp4231
S'trial_loop.thisTrialN'
p4232
I39
sg3632
S'35-raisins.png'
p4233
sS'block_loop.thisIndex'
p4234
g3626
sg38
S'right'
p4235
sg58
g62
sS'trial_loop.thisN'
p4236
I39
sg33
g3975
sg63
g64
sS'trial_loop.thisIndex'
p4237
g59
(g98
S"'\x00\x00\x00"
tRp4238
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4239
I0
sg3641
S'49-yorkie.png'
p4240
sS'block_loop.thisRepN'
p4241
I1
sg3644
g3975
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4242
I1
sg3646
g3982
sg55
g11
sS'block_loop.thisTrial'
p4243
Nsg69
Vn
sS'block_loop.thisTrialN'
p4244
I0
sg39
F0.70012926335402881
sg34
g752
(S'\x07\xdf\t\x1c\x118!\no\xe0'
tRp4245
sa(dp4246
S'trial_loop.thisTrialN'
p4247
I40
sg3632
S'1-treacle_cookies.png'
p4248
sS'block_loop.thisIndex'
p4249
g3626
sg38
S'left'
p4250
sg58
g62
sS'trial_loop.thisN'
p4251
I40
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p4252
g59
(g98
S'(\x00\x00\x00'
tRp4253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4254
I0
sg3641
S'21-nakd_banana_crunch.png'
p4255
sS'block_loop.thisRepN'
p4256
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4257
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p4258
Nsg69
Vn
sS'block_loop.thisTrialN'
p4259
I0
sg39
F0.70009818769176491
sg34
g752
(S"\x07\xdf\t\x1c\x118'\x06x@"
tRp4260
sa(dp4261
S'trial_loop.thisTrialN'
p4262
I41
sg3632
S'4-corn.png'
p4263
sS'block_loop.thisIndex'
p4264
g3626
sg38
S'left'
p4265
sg58
g62
sS'trial_loop.thisN'
p4266
I41
sg33
S'10-bounty_redo.png'
p4267
sg63
g64
sS'trial_loop.thisIndex'
p4268
g59
(g98
S')\x00\x00\x00'
tRp4269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4270
I0
sg3641
S'10-bounty_redo.png'
p4271
sS'block_loop.thisRepN'
p4272
I1
sg3644
S'4-corn.png'
p4273
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4274
I1
sg3646
g4267
sg55
g11
sS'block_loop.thisTrial'
p4275
Nsg69
Vn
sS'block_loop.thisTrialN'
p4276
I0
sg39
F0.98342640827104333
sg34
g752
(S'\x07\xdf\t\x1c\x118-\x02I\xf0'
tRp4277
sa(dp4278
S'trial_loop.thisTrialN'
p4279
I42
sg3632
g3772
sS'block_loop.thisIndex'
p4280
g3626
sg38
S'left'
p4281
sg58
g62
sS'trial_loop.thisN'
p4282
I42
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p4283
g59
(g98
S'*\x00\x00\x00'
tRp4284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4285
I0
sg3641
g3780
sS'block_loop.thisRepN'
p4286
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4287
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4288
Nsg69
Vn
sS'block_loop.thisTrialN'
p4289
I0
sg39
F0.70016290489365929
sg34
g752
(S'\x07\xdf\t\x1c\x1183\x02\x9b\xf8'
tRp4290
sa(dp4291
S'trial_loop.thisTrialN'
p4292
I43
sg3632
g3755
sS'block_loop.thisIndex'
p4293
g3626
sg38
S'right'
p4294
sg58
g62
sS'trial_loop.thisN'
p4295
I43
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4296
g59
(g98
S'+\x00\x00\x00'
tRp4297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4298
I0
sg3641
g3763
sS'block_loop.thisRepN'
p4299
I1
sg3644
g3765
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4300
I1
sg3646
g3759
sg55
g11
sS'block_loop.thisTrial'
p4301
Nsg69
Vn
sS'block_loop.thisTrialN'
p4302
I0
sg39
F0.95011928493113373
sg34
g752
(S'\x07\xdf\t\x1c\x1188\r\xac\x00'
tRp4303
sa(dp4304
S'trial_loop.thisTrialN'
p4305
I44
sg3632
g3930
sS'block_loop.thisIndex'
p4306
g3626
sg38
S'right'
p4307
sg58
g62
sS'trial_loop.thisN'
p4308
I44
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p4309
g59
(g98
S',\x00\x00\x00'
tRp4310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4311
I0
sg3641
g3937
sS'block_loop.thisRepN'
p4312
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4313
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p4314
Nsg69
Vn
sS'block_loop.thisTrialN'
p4315
I0
sg39
F1.400297014912212
sg34
g752
(S'\x07\xdf\t\x1c\x119\x02\r\x88\xd8'
tRp4316
sa(dp4317
S'trial_loop.thisTrialN'
p4318
I45
sg3632
S'41-peanuts_redo.png'
p4319
sS'block_loop.thisIndex'
p4320
g3626
sg38
S'left'
p4321
sg58
g62
sS'trial_loop.thisN'
p4322
I45
sg33
g4058
sg63
g64
sS'trial_loop.thisIndex'
p4323
g59
(g98
S'-\x00\x00\x00'
tRp4324
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4325
I0
sg3641
S'45-chewy_nougat_redo.png'
p4326
sS'block_loop.thisRepN'
p4327
I1
sg3644
g4058
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4328
I1
sg3646
g4052
sg55
g11
sS'block_loop.thisTrial'
p4329
Nsg69
Vn
sS'block_loop.thisTrialN'
p4330
I0
sg39
F0.93345075562319835
sg34
g752
(S'\x07\xdf\t\x1c\x119\t\x04\xca\x90'
tRp4331
sa(dp4332
S'trial_loop.thisTrialN'
p4333
I46
sg3632
g3930
sS'block_loop.thisIndex'
p4334
g3626
sg38
S'right'
p4335
sg58
g62
sS'trial_loop.thisN'
p4336
I46
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p4337
g59
(g98
S'.\x00\x00\x00'
tRp4338
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4339
I0
sg3641
g3937
sS'block_loop.thisRepN'
p4340
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4341
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p4342
Nsg69
Vn
sS'block_loop.thisTrialN'
p4343
I0
sg39
F1.0667721908721433
sg34
g752
(S'\x07\xdf\t\x1c\x119\x0f\x04h\xe8'
tRp4344
sa(dp4345
S'trial_loop.thisTrialN'
p4346
I47
sg3632
S'26-walkers_smoky_bacon.png'
p4347
sS'block_loop.thisIndex'
p4348
g3626
sg38
S'left'
p4349
sg58
g62
sS'trial_loop.thisN'
p4350
I47
sg33
g3680
sg63
g64
sS'trial_loop.thisIndex'
p4351
g59
(g98
S'/\x00\x00\x00'
tRp4352
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4353
I0
sg3641
S'44-crunch.png'
p4354
sS'block_loop.thisRepN'
p4355
I1
sg3644
g3680
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4356
I1
sg3646
g3674
sg55
g11
sS'block_loop.thisTrial'
p4357
Nsg69
Vn
sS'block_loop.thisTrialN'
p4358
I0
sg39
F1.0668035516318923
sg34
g752
(S'\x07\xdf\t\x1c\x119\x15\x05\xeb\xa0'
tRp4359
sa(dp4360
S'trial_loop.thisTrialN'
p4361
I48
sg3632
S'19-caramello_redo.png'
p4362
sS'block_loop.thisIndex'
p4363
g3626
sg38
S'right'
p4364
sg58
g62
sS'trial_loop.thisN'
p4365
I48
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4366
g59
(g98
S'0\x00\x00\x00'
tRp4367
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4368
I0
sg3641
S'30-spaghetti_hoops.png'
p4369
sS'block_loop.thisRepN'
p4370
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4371
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4372
Nsg69
Vn
sS'block_loop.thisTrialN'
p4373
I0
sg39
F0.93346700619804324
sg34
g752
(S'\x07\xdf\t\x1c\x119\x1b\x07r@'
tRp4374
sa(dp4375
S'trial_loop.thisTrialN'
p4376
I49
sg3632
g4091
sS'block_loop.thisIndex'
p4377
g3626
sg38
S'left'
p4378
sg58
g62
sS'trial_loop.thisN'
p4379
I49
sg33
g4101
sg63
g64
sS'trial_loop.thisIndex'
p4380
g59
(g98
S'1\x00\x00\x00'
tRp4381
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4382
I0
sg3641
g4099
sS'block_loop.thisRepN'
p4383
I1
sg3644
g4101
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4384
I1
sg3646
g4095
sg55
g11
sS'block_loop.thisTrial'
p4385
Nsg69
Vn
sS'block_loop.thisTrialN'
p4386
I0
sg39
F1.0672665505007899
sg34
g752
(S'\x07\xdf\t\x1c\x119!\x06\xd2\x18'
tRp4387
sa(dp4388
S'trial_loop.thisTrialN'
p4389
I50
sg3632
g3755
sS'block_loop.thisIndex'
p4390
g3626
sg38
S'right'
p4391
sg58
g62
sS'trial_loop.thisN'
p4392
I50
sg33
g3765
sg63
g64
sS'trial_loop.thisIndex'
p4393
g59
(g98
S'2\x00\x00\x00'
tRp4394
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4395
I0
sg3641
g3763
sS'block_loop.thisRepN'
p4396
I1
sg3644
g3765
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4397
I1
sg3646
g3759
sg55
g11
sS'block_loop.thisTrial'
p4398
Nsg69
Vn
sS'block_loop.thisTrialN'
p4399
I0
sg39
F0.8835389648884302
sg34
g752
(S"\x07\xdf\t\x1c\x119'\x08X\xb8"
tRp4400
sa(dp4401
S'trial_loop.thisTrialN'
p4402
I51
sg3632
g3913
sS'block_loop.thisIndex'
p4403
g3626
sg38
S'right'
p4404
sg58
g62
sS'trial_loop.thisN'
p4405
I51
sg33
g3917
sg63
g64
sS'trial_loop.thisIndex'
p4406
g59
(g98
S'3\x00\x00\x00'
tRp4407
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4408
I0
sg3641
g3921
sS'block_loop.thisRepN'
p4409
I1
sg3644
g3917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4410
I1
sg3646
g3924
sg55
g11
sS'block_loop.thisTrial'
p4411
Nsg69
Vn
sS'block_loop.thisTrialN'
p4412
I0
sg39
F0.85020960391921108
sg34
g752
(S'\x07\xdf\t\x1c\x119-\x07?x'
tRp4413
sa(dp4414
S'trial_loop.thisTrialN'
p4415
I52
sg3632
g3868
sS'block_loop.thisIndex'
p4416
g3626
sg38
S'left'
p4417
sg58
g62
sS'trial_loop.thisN'
p4418
I52
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4419
g59
(g98
S'4\x00\x00\x00'
tRp4420
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4421
I0
sg3641
g3875
sS'block_loop.thisRepN'
p4422
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4423
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4424
Nsg69
Vn
sS'block_loop.thisTrialN'
p4425
I0
sg39
F0.76671728103247005
sg34
g752
(S'\x07\xdf\t\x1c\x1193\x05n\xa0'
tRp4426
sa(dp4427
S'trial_loop.thisTrialN'
p4428
I53
sg3632
S'18-mms.png'
p4429
sS'block_loop.thisIndex'
p4430
g3626
sg38
S'left'
p4431
sg58
g62
sS'trial_loop.thisN'
p4432
I53
sg33
g3827
sg63
g64
sS'trial_loop.thisIndex'
p4433
g59
(g98
S'5\x00\x00\x00'
tRp4434
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4435
I0
sg3641
S'43-mrporky_pork_crackles_redo.png'
p4436
sS'block_loop.thisRepN'
p4437
I1
sg3644
g3827
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4438
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p4439
Nsg69
Vn
sS'block_loop.thisTrialN'
p4440
I0
sg39
F0.91681415727362037
sg34
g752
(S'\x07\xdf\t\x1c\x1199\x022\x80'
tRp4441
sa(dp4442
S'trial_loop.thisTrialN'
p4443
I54
sg3632
g3738
sS'block_loop.thisIndex'
p4444
g3626
sg38
S'right'
p4445
sg58
g62
sS'trial_loop.thisN'
p4446
I54
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p4447
g59
(g98
S'6\x00\x00\x00'
tRp4448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4449
I0
sg3641
g3746
sS'block_loop.thisRepN'
p4450
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4451
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p4452
Nsg69
Vn
sS'block_loop.thisTrialN'
p4453
I0
sg39
F0.88345429083346971
sg34
g752
(S'\x07\xdf\t\x1c\x11:\x03\x01\x92X'
tRp4454
sa(dp4455
S'trial_loop.thisTrialN'
p4456
I55
sg3632
S'6-sour_patch_kids.png'
p4457
sS'block_loop.thisIndex'
p4458
g3626
sg38
S'left'
p4459
sg58
g62
sS'trial_loop.thisN'
p4460
I55
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p4461
g59
(g98
S'7\x00\x00\x00'
tRp4462
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4463
I0
sg3641
S'38-maltesers.png'
p4464
sS'block_loop.thisRepN'
p4465
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4466
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4467
Nsg69
Vn
sS'block_loop.thisTrialN'
p4468
I0
sg39
F0.76661265013171942
sg34
g752
(S'\x07\xdf\t\x1c\x11:\t\x00:\x98'
tRp4469
sa(dp4470
S'trial_loop.thisTrialN'
p4471
I56
sg3632
S'50-polo.png'
p4472
sS'block_loop.thisIndex'
p4473
g3626
sg38
S'left'
p4474
sg58
g62
sS'trial_loop.thisN'
p4475
I56
sg33
g3817
sg63
g64
sS'trial_loop.thisIndex'
p4476
g59
(g98
S'8\x00\x00\x00'
tRp4477
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4478
I0
sg3641
S'48-twix.png'
p4479
sS'block_loop.thisRepN'
p4480
I1
sg3644
g3810
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4481
I1
sg3646
g3817
sg55
g11
sS'block_loop.thisTrial'
p4482
Nsg69
Vn
sS'block_loop.thisTrialN'
p4483
I0
sg39
F1.1668922740791459
sg34
g752
(S'\x07\xdf\t\x1c\x11:\x0e\x0c\x7f8'
tRp4484
sa(dp4485
S'trial_loop.thisTrialN'
p4486
I57
sg3632
S'10-bounty_redo.png'
p4487
sS'block_loop.thisIndex'
p4488
g3626
sg38
S'right'
p4489
sg58
g62
sS'trial_loop.thisN'
p4490
I57
sg33
g4273
sg63
g64
sS'trial_loop.thisIndex'
p4491
g59
(g98
S'9\x00\x00\x00'
tRp4492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4493
I0
sg3641
S'4-corn.png'
p4494
sS'block_loop.thisRepN'
p4495
I1
sg3644
g4273
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4496
I1
sg3646
g4267
sg55
g11
sS'block_loop.thisTrial'
p4497
Nsg69
Vn
sS'block_loop.thisTrialN'
p4498
I0
sg39
F0.96686165457140305
sg34
g752
(S'\x07\xdf\t\x1c\x11:\x15\x00.\xe0'
tRp4499
sa(dp4500
S'trial_loop.thisTrialN'
p4501
I58
sg3632
g4319
sS'block_loop.thisIndex'
p4502
g3626
sg38
S'left'
p4503
sg58
g62
sS'trial_loop.thisN'
p4504
I58
sg33
g4058
sg63
g64
sS'trial_loop.thisIndex'
p4505
g59
(g98
S':\x00\x00\x00'
tRp4506
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4507
I0
sg3641
g4326
sS'block_loop.thisRepN'
p4508
I1
sg3644
g4058
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4509
I1
sg3646
g4052
sg55
g11
sS'block_loop.thisTrial'
p4510
Nsg69
Vn
sS'block_loop.thisTrialN'
p4511
I0
sg39
F0.78355487334920326
sg34
g752
(S'\x07\xdf\t\x1c\x11:\x1b\x00FP'
tRp4512
sa(dp4513
S'trial_loop.thisTrialN'
p4514
I59
sg3632
g3670
sS'block_loop.thisIndex'
p4515
g3626
sg38
S'right'
p4516
sg58
g62
sS'trial_loop.thisN'
p4517
I59
sg33
g3680
sg63
g64
sS'trial_loop.thisIndex'
p4518
g59
(g98
S';\x00\x00\x00'
tRp4519
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4520
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4521
I1
sg3644
g3680
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4522
I1
sg3646
g3674
sg55
g11
sS'block_loop.thisTrial'
p4523
Nsg69
Vn
sS'block_loop.thisTrialN'
p4524
I0
sg39
F0.86675440076942323
sg34
g752
(S'\x07\xdf\t\x1c\x11: \x0c\xc5\x88'
tRp4525
sa(dp4526
S'trial_loop.thisTrialN'
p4527
I60
sg3632
g4248
sS'block_loop.thisIndex'
p4528
g3626
sg38
S'left'
p4529
sg58
g62
sS'trial_loop.thisN'
p4530
I60
sg33
g3800
sg63
g64
sS'trial_loop.thisIndex'
p4531
g59
(g98
S'<\x00\x00\x00'
tRp4532
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4533
I0
sg3641
g4255
sS'block_loop.thisRepN'
p4534
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4535
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p4536
Nsg69
Vn
sS'block_loop.thisTrialN'
p4537
I0
sg39
F0.75009180149936583
sg34
g752
(S'\x07\xdf\t\x1c\x11:&\x0b/H'
tRp4538
sa(dp4539
S'trial_loop.thisTrialN'
p4540
I61
sg3632
S'25-kitkat.png'
p4541
sS'block_loop.thisIndex'
p4542
g3626
sg38
S'left'
p4543
sg58
g62
sS'trial_loop.thisN'
p4544
I61
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4545
g59
(g98
S'=\x00\x00\x00'
tRp4546
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4547
I0
sg3641
S'31-hobnobs.png'
p4548
sS'block_loop.thisRepN'
p4549
I1
sg3644
g3731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4550
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p4551
Nsg69
Vn
sS'block_loop.thisTrialN'
p4552
I0
sg39
F0.96721574606635841
sg34
g752
(S'\x07\xdf\t\x1c\x11:,\x07\xf3('
tRp4553
sa(dp4554
S'trial_loop.thisTrialN'
p4555
I62
sg3632
g4218
sS'block_loop.thisIndex'
p4556
g3626
sg38
S'left'
p4557
sg58
g62
sS'trial_loop.thisN'
p4558
I62
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p4559
g59
(g98
S'>\x00\x00\x00'
tRp4560
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4561
I0
sg3641
g4225
sS'block_loop.thisRepN'
p4562
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4563
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4564
Nsg69
Vn
sS'block_loop.thisTrialN'
p4565
I0
sg39
F0.78344796166493325
sg34
g752
(S'\x07\xdf\t\x1c\x11:2\x07\xcc\x18'
tRp4566
sa(dp4567
S'trial_loop.thisTrialN'
p4568
I63
sg3632
g3704
sS'block_loop.thisIndex'
p4569
g3626
sg38
S'left'
p4570
sg58
g62
sS'trial_loop.thisN'
p4571
I63
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p4572
g59
(g98
S'?\x00\x00\x00'
tRp4573
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4574
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4575
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4576
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4577
Nsg69
Vn
sS'block_loop.thisTrialN'
p4578
I0
sg39
F0.86650864644616377
sg34
g752
(S'\x07\xdf\t\x1c\x11:8\x05\t\x10'
tRp4579
sa(dp4580
S'trial_loop.thisTrialN'
p4581
I64
sg3632
g3971
sS'block_loop.thisIndex'
p4582
g3626
sg38
S'left'
p4583
sg58
g62
sS'trial_loop.thisN'
p4584
I64
sg33
g3975
sg63
g64
sS'trial_loop.thisIndex'
p4585
g59
(g98
S'@\x00\x00\x00'
tRp4586
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4587
I0
sg3641
g3979
sS'block_loop.thisRepN'
p4588
I1
sg3644
g3975
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4589
I1
sg3646
g3982
sg55
g11
sS'block_loop.thisTrial'
p4590
Nsg69
Vn
sS'block_loop.thisTrialN'
p4591
I0
sg39
F0.70021707348132622
sg34
g752
(S'\x07\xdf\t\x1c\x11;\x02\x03v\xb8'
tRp4592
sa(dp4593
S'trial_loop.thisTrialN'
p4594
I65
sg3632
g4429
sS'block_loop.thisIndex'
p4595
g3626
sg38
S'left'
p4596
sg58
g62
sS'trial_loop.thisN'
p4597
I65
sg33
g3827
sg63
g64
sS'trial_loop.thisIndex'
p4598
g59
(g98
S'A\x00\x00\x00'
tRp4599
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4600
I0
sg3641
g4436
sS'block_loop.thisRepN'
p4601
I1
sg3644
g3827
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4602
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p4603
Nsg69
Vn
sS'block_loop.thisTrialN'
p4604
I0
sg39
F0.9335434124150197
sg34
g752
(S'\x07\xdf\t\x1c\x11;\x07\x0e\xc5@'
tRp4605
sa(dp4606
S'trial_loop.thisTrialN'
p4607
I66
sg3632
g4319
sS'block_loop.thisIndex'
p4608
g3626
sg38
S'left'
p4609
sg58
g62
sS'trial_loop.thisN'
p4610
I66
sg33
g4052
sg63
g64
sS'trial_loop.thisIndex'
p4611
g59
(g98
S'B\x00\x00\x00'
tRp4612
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4613
I0
sg3641
g4326
sS'block_loop.thisRepN'
p4614
I1
sg3644
g4058
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4615
I1
sg3646
g4052
sg55
g11
sS'block_loop.thisTrial'
p4616
Nsg69
Vn
sS'block_loop.thisTrialN'
p4617
I0
sg39
F0.65009231467411155
sg34
g752
(S'\x07\xdf\t\x1c\x11;\r\x0e%\x18'
tRp4618
sa(dp4619
S'trial_loop.thisTrialN'
p4620
I67
sg3632
g3653
sS'block_loop.thisIndex'
p4621
g3626
sg38
S'right'
p4622
sg58
g62
sS'trial_loop.thisN'
p4623
I67
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4624
g59
(g98
S'C\x00\x00\x00'
tRp4625
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4626
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4627
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4628
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4629
Nsg69
Vn
sS'block_loop.thisTrialN'
p4630
I0
sg39
F0.88344146143572289
sg34
g752
(S'\x07\xdf\t\x1c\x11;\x13\ty\xc8'
tRp4631
sa(dp4632
S'trial_loop.thisTrialN'
p4633
I68
sg3632
g4018
sS'block_loop.thisIndex'
p4634
g3626
sg38
S'left'
p4635
sg58
g62
sS'trial_loop.thisN'
p4636
I68
sg33
g4022
sg63
g64
sS'trial_loop.thisIndex'
p4637
g59
(g98
S'D\x00\x00\x00'
tRp4638
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4639
I0
sg3641
g4026
sS'block_loop.thisRepN'
p4640
I1
sg3644
g4022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4641
I1
sg3646
g4029
sg55
g11
sS'block_loop.thisTrial'
p4642
Nsg69
Vn
sS'block_loop.thisTrialN'
p4643
I0
sg39
F1.9500708183004463
sg34
g752
(S'\x07\xdf\t\x1c\x11;\x19\x08"\x08'
tRp4644
sa(dp4645
S'trial_loop.thisTrialN'
p4646
I69
sg3632
g4472
sS'block_loop.thisIndex'
p4647
g3626
sg38
S'left'
p4648
sg58
g62
sS'trial_loop.thisN'
p4649
I69
sg33
g3810
sg63
g64
sS'trial_loop.thisIndex'
p4650
g59
(g98
S'E\x00\x00\x00'
tRp4651
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4652
I0
sg3641
g4479
sS'block_loop.thisRepN'
p4653
I1
sg3644
g3810
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4654
I1
sg3646
g3817
sg55
g11
sS'block_loop.thisTrial'
p4655
Nsg69
Vn
sS'block_loop.thisTrialN'
p4656
I0
sg39
F1.0334693440017872
sg34
g752
(S'\x07\xdf\t\x1c\x11; \x07\xf7\x10'
tRp4657
sa(dp4658
S'trial_loop.thisTrialN'
p4659
I70
sg3632
g4218
sS'block_loop.thisIndex'
p4660
g3626
sg38
S'left'
p4661
sg58
g62
sS'trial_loop.thisN'
p4662
I70
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4663
g59
(g98
S'F\x00\x00\x00'
tRp4664
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4665
I0
sg3641
g4225
sS'block_loop.thisRepN'
p4666
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4667
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4668
Nsg69
Vn
sS'block_loop.thisTrialN'
p4669
I0
sg39
F0.73346147530173766
sg34
g752
(S'\x07\xdf\t\x1c\x11;&\t\x04\x98'
tRp4670
sa(dp4671
S'trial_loop.thisTrialN'
p4672
I71
sg3632
g4248
sS'block_loop.thisIndex'
p4673
g3626
sg38
S'left'
p4674
sg58
g62
sS'trial_loop.thisN'
p4675
I71
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p4676
g59
(g98
S'G\x00\x00\x00'
tRp4677
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4678
I0
sg3641
g4255
sS'block_loop.thisRepN'
p4679
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4680
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p4681
Nsg69
Vn
sS'block_loop.thisTrialN'
p4682
I0
sg39
F0.63358857190905837
sg34
g752
(S'\x07\xdf\t\x1c\x11;,\x05Kx'
tRp4683
sa(dp4684
S'trial_loop.thisTrialN'
p4685
I72
sg3632
g4487
sS'block_loop.thisIndex'
p4686
g3626
sg38
S'right'
p4687
sg58
g62
sS'trial_loop.thisN'
p4688
I72
sg33
g4273
sg63
g64
sS'trial_loop.thisIndex'
p4689
g59
(g98
S'H\x00\x00\x00'
tRp4690
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4691
I0
sg3641
g4494
sS'block_loop.thisRepN'
p4692
I1
sg3644
g4273
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4693
I1
sg3646
g4267
sg55
g11
sS'block_loop.thisTrial'
p4694
Nsg69
Vn
sS'block_loop.thisTrialN'
p4695
I0
sg39
F0.73348969998551183
sg34
g752
(S"\x07\xdf\t\x1c\x11;2\x00'\x10"
tRp4696
sa(dp4697
S'trial_loop.thisTrialN'
p4698
I73
sg3632
g3988
sS'block_loop.thisIndex'
p4699
g3626
sg38
S'left'
p4700
sg58
g62
sS'trial_loop.thisN'
p4701
I73
sg33
g3887
sg63
g64
sS'trial_loop.thisIndex'
p4702
g59
(g98
S'I\x00\x00\x00'
tRp4703
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4704
I0
sg3641
g3995
sS'block_loop.thisRepN'
p4705
I1
sg3644
g3893
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4706
I1
sg3646
g3887
sg55
g11
sS'block_loop.thisTrial'
p4707
Nsg69
Vn
sS'block_loop.thisTrialN'
p4708
I0
sg39
F0.76676745824806858
sg34
g752
(S'\x07\xdf\t\x1c\x11;7\x0b\xee\xb0'
tRp4709
sa(dp4710
S'trial_loop.thisTrialN'
p4711
I74
sg3632
g4018
sS'block_loop.thisIndex'
p4712
g3626
sg38
S'right'
p4713
sg58
g62
sS'trial_loop.thisN'
p4714
I74
sg33
g4022
sg63
g64
sS'trial_loop.thisIndex'
p4715
g59
(g98
S'J\x00\x00\x00'
tRp4716
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4717
I0
sg3641
g4026
sS'block_loop.thisRepN'
p4718
I1
sg3644
g4022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4719
I1
sg3646
g4029
sg55
g11
sS'block_loop.thisTrial'
p4720
Nsg69
Vn
sS'block_loop.thisTrialN'
p4721
I0
sg39
F1.0501963183633052
sg34
g752
(S'\x07\xdf\t\x1c\x12\x00\x01\x08\xed('
tRp4722
sa(dp4723
S'trial_loop.thisTrialN'
p4724
I75
sg3632
g4108
sS'block_loop.thisIndex'
p4725
g3626
sg38
S'right'
p4726
sg58
g62
sS'trial_loop.thisN'
p4727
I75
sg33
g4112
sg63
g64
sS'trial_loop.thisIndex'
p4728
g59
(g98
S'K\x00\x00\x00'
tRp4729
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4730
I0
sg3641
g4116
sS'block_loop.thisRepN'
p4731
I1
sg3644
g4112
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4732
I1
sg3646
g4119
sg55
g11
sS'block_loop.thisTrial'
p4733
Nsg69
Vn
sS'block_loop.thisTrialN'
p4734
I0
sg39
F0.93350321362231625
sg34
g752
(S'\x07\xdf\t\x1c\x12\x00\x07\n5H'
tRp4735
sa(dp4736
S'trial_loop.thisTrialN'
p4737
I76
sg3632
g4233
sS'block_loop.thisIndex'
p4738
g3626
sg38
S'right'
p4739
sg58
g62
sS'trial_loop.thisN'
p4740
I76
sg33
g3975
sg63
g64
sS'trial_loop.thisIndex'
p4741
g59
(g98
S'L\x00\x00\x00'
tRp4742
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4743
I0
sg3641
g4240
sS'block_loop.thisRepN'
p4744
I1
sg3644
g3975
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4745
I1
sg3646
g3982
sg55
g11
sS'block_loop.thisTrial'
p4746
Nsg69
Vn
sS'block_loop.thisTrialN'
p4747
I0
sg39
F0.61687157597771147
sg34
g752
(S'\x07\xdf\t\x1c\x12\x00\r\t\x95 '
tRp4748
sa(dp4749
S'trial_loop.thisTrialN'
p4750
I77
sg3632
g4362
sS'block_loop.thisIndex'
p4751
g3626
sg38
S'right'
p4752
sg58
g62
sS'trial_loop.thisN'
p4753
I77
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4754
g59
(g98
S'M\x00\x00\x00'
tRp4755
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4756
I0
sg3641
g4369
sS'block_loop.thisRepN'
p4757
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4758
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4759
Nsg69
Vn
sS'block_loop.thisTrialN'
p4760
I0
sg39
F0.78356143059863825
sg34
g752
(S'\x07\xdf\t\x1c\x12\x00\x13\x04p\xb8'
tRp4761
sa(dp4762
S'trial_loop.thisTrialN'
p4763
I78
sg3632
g3738
sS'block_loop.thisIndex'
p4764
g3626
sg38
S'right'
p4765
sg58
g62
sS'trial_loop.thisN'
p4766
I78
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p4767
g59
(g98
S'N\x00\x00\x00'
tRp4768
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4769
I0
sg3641
g3746
sS'block_loop.thisRepN'
p4770
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4771
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p4772
Nsg69
Vn
sS'block_loop.thisTrialN'
p4773
I0
sg39
F1.0668577202231972
sg34
g752
(S'\x07\xdf\t\x1c\x12\x00\x19\x01o0'
tRp4774
sa(dp4775
S'trial_loop.thisTrialN'
p4776
I79
sg3632
S'22-daim.png'
p4777
sS'block_loop.thisIndex'
p4778
g3626
sg38
S'left'
p4779
sg58
g62
sS'trial_loop.thisN'
p4780
I79
sg33
g4022
sg63
g64
sS'trial_loop.thisIndex'
p4781
g59
(g98
S'O\x00\x00\x00'
tRp4782
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4783
I0
sg3641
S'7-olives.png'
p4784
sS'block_loop.thisRepN'
p4785
I1
sg3644
g4022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4786
I1
sg3646
g4029
sg55
g11
sS'block_loop.thisTrial'
p4787
Nsg69
Vn
sS'block_loop.thisTrialN'
p4788
I0
sg39
F0.7335167842793453
sg34
g752
(S'\x07\xdf\t\x1c\x12\x00\x1f\x02\xf5\xd0'
tRp4789
sa(dp4790
S'trial_loop.thisTrialN'
p4791
I80
sg3632
g4263
sS'block_loop.thisIndex'
p4792
g3626
sg38
S'left'
p4793
sg58
g62
sS'trial_loop.thisN'
p4794
I80
sg33
g4273
sg63
g64
sS'trial_loop.thisIndex'
p4795
g59
(g98
S'P\x00\x00\x00'
tRp4796
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4797
I0
sg3641
g4271
sS'block_loop.thisRepN'
p4798
I1
sg3644
g4273
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4799
I1
sg3646
g4267
sg55
g11
sS'block_loop.thisTrial'
p4800
Nsg69
Vn
sS'block_loop.thisTrialN'
p4801
I0
sg39
F0.73342042121294071
sg34
g752
(S'\x07\xdf\t\x1c\x12\x00$\x0e\xbdp'
tRp4802
sa(dp4803
S'trial_loop.thisTrialN'
p4804
I81
sg3632
g4218
sS'block_loop.thisIndex'
p4805
g3626
sg38
S'left'
p4806
sg58
g62
sS'trial_loop.thisN'
p4807
I81
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p4808
g59
(g98
S'Q\x00\x00\x00'
tRp4809
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4810
I0
sg3641
g4225
sS'block_loop.thisRepN'
p4811
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4812
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4813
Nsg69
Vn
sS'block_loop.thisTrialN'
p4814
I0
sg39
F0.71683856164600002
sg34
g752
(S'\x07\xdf\t\x1c\x12\x00*\x0bB\xd0'
tRp4815
sa(dp4816
S'trial_loop.thisTrialN'
p4817
I82
sg3632
g3687
sS'block_loop.thisIndex'
p4818
g3626
sg38
S'left'
p4819
sg58
g62
sS'trial_loop.thisN'
p4820
I82
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4821
g59
(g98
S'R\x00\x00\x00'
tRp4822
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4823
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4824
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4825
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4826
Nsg69
Vn
sS'block_loop.thisTrialN'
p4827
I0
sg39
F0.750098643846286
sg34
g752
(S'\x07\xdf\t\x1c\x12\x000\x07O\x18'
tRp4828
sa(dp4829
S'trial_loop.thisTrialN'
p4830
I83
sg3632
g3755
sS'block_loop.thisIndex'
p4831
g3626
sg38
S'left'
p4832
sg58
g62
sS'trial_loop.thisN'
p4833
I83
sg33
g3765
sg63
g64
sS'trial_loop.thisIndex'
p4834
g59
(g98
S'S\x00\x00\x00'
tRp4835
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4836
I0
sg3641
g3763
sS'block_loop.thisRepN'
p4837
I1
sg3644
g3765
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4838
I1
sg3646
g3759
sg55
g11
sS'block_loop.thisTrial'
p4839
Nsg69
Vn
sS'block_loop.thisTrialN'
p4840
I0
sg39
F1.8834927790412621
sg34
g752
(S'\x07\xdf\t\x1c\x12\x006\x04\x0f\x10'
tRp4841
sa(dp4842
S'trial_loop.thisTrialN'
p4843
I84
sg3632
g3971
sS'block_loop.thisIndex'
p4844
g3626
sg38
S'left'
p4845
sg58
g62
sS'trial_loop.thisN'
p4846
I84
sg33
g3975
sg63
g64
sS'trial_loop.thisIndex'
p4847
g59
(g98
S'T\x00\x00\x00'
tRp4848
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4849
I0
sg3641
g3979
sS'block_loop.thisRepN'
p4850
I1
sg3644
g3975
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4851
I1
sg3646
g3982
sg55
g11
sS'block_loop.thisTrial'
p4852
Nsg69
Vn
sS'block_loop.thisTrialN'
p4853
I0
sg39
F0.81678188419755315
sg34
g752
(S'\x07\xdf\t\x1c\x12\x01\x01\x02\xb3h'
tRp4854
sa(dp4855
S'trial_loop.thisTrialN'
p4856
I85
sg3632
g3633
sS'block_loop.thisIndex'
p4857
g3626
sg38
S'right'
p4858
sg58
g62
sS'trial_loop.thisN'
p4859
I85
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4860
g59
(g98
S'U\x00\x00\x00'
tRp4861
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4862
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4863
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4864
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4865
Nsg69
Vn
sS'block_loop.thisTrialN'
p4866
I0
sg39
F0.80019004620771739
sg34
g752
(S'\x07\xdf\t\x1c\x12\x01\x07\x00ix'
tRp4867
sa(dp4868
S'trial_loop.thisTrialN'
p4869
I86
sg3632
g3704
sS'block_loop.thisIndex'
p4870
g3626
sg38
S'left'
p4871
sg58
g62
sS'trial_loop.thisN'
p4872
I86
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4873
g59
(g98
S'V\x00\x00\x00'
tRp4874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4875
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4876
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4877
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4878
Nsg69
Vn
sS'block_loop.thisTrialN'
p4879
I0
sg39
F0.93325745929905679
sg34
g752
(S"\x07\xdf\t\x1c\x12\x01\x0c\r'0"
tRp4880
sa(dp4881
S'trial_loop.thisTrialN'
p4882
I87
sg3632
g3670
sS'block_loop.thisIndex'
p4883
g3626
sg38
S'right'
p4884
sg58
g62
sS'trial_loop.thisN'
p4885
I87
sg33
g3680
sg63
g64
sS'trial_loop.thisIndex'
p4886
g59
(g98
S'W\x00\x00\x00'
tRp4887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4888
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4889
I1
sg3644
g3680
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4890
I1
sg3646
g3674
sg55
g11
sS'block_loop.thisTrial'
p4891
Nsg69
Vn
sS'block_loop.thisTrialN'
p4892
I0
sg39
F0.78348644986908766
sg34
g752
(S'\x07\xdf\t\x1c\x12\x01\x12\x0c\xc1\xa0'
tRp4893
sa(dp4894
S'trial_loop.thisTrialN'
p4895
I88
sg3632
g4248
sS'block_loop.thisIndex'
p4896
g3626
sg38
S'left'
p4897
sg58
g62
sS'trial_loop.thisN'
p4898
I88
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p4899
g59
(g98
S'X\x00\x00\x00'
tRp4900
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4901
I0
sg3641
g4255
sS'block_loop.thisRepN'
p4902
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4903
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p4904
Nsg69
Vn
sS'block_loop.thisTrialN'
p4905
I0
sg39
F0.61686045716123772
sg34
g752
(S'\x07\xdf\t\x1c\x12\x01\x18\t\xfe\x98'
tRp4906
sa(dp4907
S'trial_loop.thisTrialN'
p4908
I89
sg3632
g4018
sS'block_loop.thisIndex'
p4909
g3626
sg38
S'right'
p4910
sg58
g62
sS'trial_loop.thisN'
p4911
I89
sg33
g4022
sg63
g64
sS'trial_loop.thisIndex'
p4912
g59
(g98
S'Y\x00\x00\x00'
tRp4913
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4914
I0
sg3641
g4026
sS'block_loop.thisRepN'
p4915
I1
sg3644
g4022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4916
I1
sg3646
g4029
sg55
g11
sS'block_loop.thisTrial'
p4917
Nsg69
Vn
sS'block_loop.thisTrialN'
p4918
I0
sg39
F0.96722372880321927
sg34
g752
(S'\x07\xdf\t\x1c\x12\x01\x1e\x04\x9b\xb0'
tRp4919
sa(dp4920
S'trial_loop.thisTrialN'
p4921
I90
sg3632
g4362
sS'block_loop.thisIndex'
p4922
g3626
sg38
S'right'
p4923
sg58
g62
sS'trial_loop.thisN'
p4924
I90
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4925
g59
(g98
S'Z\x00\x00\x00'
tRp4926
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4927
I0
sg3641
g4369
sS'block_loop.thisRepN'
p4928
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4929
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4930
Nsg69
Vn
sS'block_loop.thisTrialN'
p4931
I0
sg39
F0.93347641442596796
sg34
g752
(S'\x07\xdf\t\x1c\x12\x01$\x04x\x88'
tRp4932
sa(dp4933
S'trial_loop.thisTrialN'
p4934
I91
sg3632
g4003
sS'block_loop.thisIndex'
p4935
g3626
sg38
S'right'
p4936
sg58
g62
sS'trial_loop.thisN'
p4937
I91
sg33
g3783
sg63
g64
sS'trial_loop.thisIndex'
p4938
g59
(g98
S'[\x00\x00\x00'
tRp4939
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4940
I0
sg3641
g4010
sS'block_loop.thisRepN'
p4941
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4942
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4943
Nsg69
Vn
sS'block_loop.thisTrialN'
p4944
I0
sg39
F0.86686216774614877
sg34
g752
(S'\x07\xdf\t\x1c\x12\x01*\x04\x16\xe0'
tRp4945
sa(dp4946
S'trial_loop.thisTrialN'
p4947
I92
sg3632
g4429
sS'block_loop.thisIndex'
p4948
g3626
sg38
S'left'
p4949
sg58
g62
sS'trial_loop.thisN'
p4950
I92
sg33
g3827
sg63
g64
sS'trial_loop.thisIndex'
p4951
g59
(g98
S'\\\x00\x00\x00'
tRp4952
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4953
I0
sg3641
g4436
sS'block_loop.thisRepN'
p4954
I1
sg3644
g3827
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4955
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p4956
Nsg69
Vn
sS'block_loop.thisTrialN'
p4957
I0
sg39
F1.0668026963394368
sg34
g752
(S'\x07\xdf\t\x1c\x12\x010\x02\x80\xa0'
tRp4958
sa(dp4959
S'trial_loop.thisTrialN'
p4960
I93
sg3632
g4263
sS'block_loop.thisIndex'
p4961
g3626
sg38
S'left'
p4962
sg58
g62
sS'trial_loop.thisN'
p4963
I93
sg33
g4273
sg63
g64
sS'trial_loop.thisIndex'
p4964
g59
(g98
S']\x00\x00\x00'
tRp4965
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4966
I0
sg3641
g4271
sS'block_loop.thisRepN'
p4967
I1
sg3644
g4273
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4968
I1
sg3646
g4267
sg55
g11
sS'block_loop.thisTrial'
p4969
Nsg69
Vn
sS'block_loop.thisTrialN'
p4970
I0
sg39
F0.75007840190301067
sg34
g752
(S'\x07\xdf\t\x1c\x12\x016\x04\x07@'
tRp4971
sa(dp4972
S'trial_loop.thisTrialN'
p4973
I94
sg3632
g4777
sS'block_loop.thisIndex'
p4974
g3626
sg38
S'left'
p4975
sg58
g62
sS'trial_loop.thisN'
p4976
I94
sg33
g4022
sg63
g64
sS'trial_loop.thisIndex'
p4977
g59
(g98
S'^\x00\x00\x00'
tRp4978
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4979
I0
sg3641
g4784
sS'block_loop.thisRepN'
p4980
I1
sg3644
g4022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4981
I1
sg3646
g4029
sg55
g11
sS'block_loop.thisTrial'
p4982
Nsg69
Vn
sS'block_loop.thisTrialN'
p4983
I0
sg39
F0.78352921454279567
sg34
g752
(S'\x07\xdf\t\x1c\x12\x02\x00\x00\xcb '
tRp4984
sa(dp4985
S'trial_loop.thisTrialN'
p4986
I95
sg3632
g3653
sS'block_loop.thisIndex'
p4987
g3626
sg38
S'right'
p4988
sg58
g62
sS'trial_loop.thisN'
p4989
I95
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4990
g59
(g98
S'_\x00\x00\x00'
tRp4991
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4992
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4993
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4994
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4995
Nsg69
Vn
sS'block_loop.thisTrialN'
p4996
I0
sg39
F0.80013929879351053
sg34
g752
(S'\x07\xdf\t\x1c\x12\x02\x05\rJX'
tRp4997
sa(dp4998
S'trial_loop.thisTrialN'
p4999
I96
sg3632
g4003
sS'block_loop.thisIndex'
p5000
g3626
sg38
S'right'
p5001
sg58
g62
sS'trial_loop.thisN'
p5002
I96
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p5003
g59
(g98
S'`\x00\x00\x00'
tRp5004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5005
I0
sg3641
g4010
sS'block_loop.thisRepN'
p5006
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5007
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p5008
Nsg69
Vn
sS'block_loop.thisTrialN'
p5009
I0
sg39
F1.1001320573122939
sg34
g752
(S'\x07\xdf\t\x1c\x12\x02\x0b\n\xc1\xe8'
tRp5010
sa(dp5011
S'trial_loop.thisTrialN'
p5012
I97
sg3632
g3687
sS'block_loop.thisIndex'
p5013
g3626
sg38
S'left'
p5014
sg58
g62
sS'trial_loop.thisN'
p5015
I97
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p5016
g59
(g98
S'a\x00\x00\x00'
tRp5017
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5018
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5019
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5020
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5021
Nsg69
Vn
sS'block_loop.thisTrialN'
p5022
I0
sg39
F0.98348228744362132
sg34
g752
(S'\x07\xdf\t\x1c\x12\x02\x11\x0c\xc1\xa0'
tRp5023
sa(dp5024
S'trial_loop.thisTrialN'
p5025
I98
sg3632
S'17-jacobs_mini_cheddars_redo.png'
p5026
sS'block_loop.thisIndex'
p5027
g3626
sg38
S'left'
p5028
sg58
g62
sS'trial_loop.thisN'
p5029
I98
sg33
g4112
sg63
g64
sS'trial_loop.thisIndex'
p5030
g59
(g98
S'b\x00\x00\x00'
tRp5031
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5032
I0
sg3641
S'8-liquorice_catherine_wheels.png'
p5033
sS'block_loop.thisRepN'
p5034
I1
sg3644
g4112
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5035
I1
sg3646
g4119
sg55
g11
sS'block_loop.thisTrial'
p5036
Nsg69
Vn
sS'block_loop.thisTrialN'
p5037
I0
sg39
F1.0167988190114556
sg34
g752
(S'\x07\xdf\t\x1c\x12\x02\x17\x0c\xd9\x10'
tRp5038
sa(dp5039
S'trial_loop.thisTrialN'
p5040
I99
sg3632
g4048
sS'block_loop.thisIndex'
p5041
g3626
sg38
S'right'
p5042
sg58
g62
sS'trial_loop.thisN'
p5043
I99
sg33
g4058
sg63
g64
sS'trial_loop.thisIndex'
p5044
g59
(g98
S'c\x00\x00\x00'
tRp5045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5046
I0
sg3641
g4056
sS'block_loop.thisRepN'
p5047
I1
sg3644
g4058
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5048
I1
sg3646
g4052
sg55
g11
sS'block_loop.thisTrial'
p5049
Nsg69
Vn
sS'block_loop.thisTrialN'
p5050
I0
sg39
F0.80021456462418428
sg34
g752
(S'\x07\xdf\t\x1c\x12\x02\x1d\r\xa8\x18'
tRp5051
sa(dp5052
S'trial_loop.thisTrialN'
p5053
I100
sg3632
g4429
sS'block_loop.thisIndex'
p5054
g3626
sg38
S'left'
p5055
sg58
g62
sS'trial_loop.thisN'
p5056
I100
sg33
g3827
sg63
g64
sS'trial_loop.thisIndex'
p5057
g59
(g98
S'd\x00\x00\x00'
tRp5058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5059
I0
sg3641
g4436
sS'block_loop.thisRepN'
p5060
I1
sg3644
g3827
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5061
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p5062
Nsg69
Vn
sS'block_loop.thisTrialN'
p5063
I0
sg39
F0.78348787536015152
sg34
g752
(S'\x07\xdf\t\x1c\x12\x02#\x0b\x1f\xa8'
tRp5064
sa(dp5065
S'trial_loop.thisTrialN'
p5066
I101
sg3632
g3930
sS'block_loop.thisIndex'
p5067
g3626
sg38
S'left'
p5068
sg58
g62
sS'trial_loop.thisN'
p5069
I101
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p5070
g59
(g98
S'e\x00\x00\x00'
tRp5071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5072
I0
sg3641
g3937
sS'block_loop.thisRepN'
p5073
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5074
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p5075
Nsg69
Vn
sS'block_loop.thisTrialN'
p5076
I0
sg39
F1.1502265957497002
sg34
g752
(S'\x07\xdf\t\x1c\x12\x02)\x08\\\xa0'
tRp5077
sa(dp5078
S'trial_loop.thisTrialN'
p5079
I102
sg3632
g4048
sS'block_loop.thisIndex'
p5080
g3626
sg38
S'right'
p5081
sg58
g62
sS'trial_loop.thisN'
p5082
I102
sg33
g4058
sg63
g64
sS'trial_loop.thisIndex'
p5083
g59
(g98
S'f\x00\x00\x00'
tRp5084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5085
I0
sg3641
g4056
sS'block_loop.thisRepN'
p5086
I1
sg3644
g4058
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5087
I1
sg3646
g4052
sg55
g11
sS'block_loop.thisTrial'
p5088
Nsg69
Vn
sS'block_loop.thisTrialN'
p5089
I0
sg39
F0.66686176861185231
sg34
g752
(S'\x07\xdf\t\x1c\x12\x02/\x0b\x10\x08'
tRp5090
sa(dp5091
S'trial_loop.thisTrialN'
p5092
I103
sg3632
g4190
sS'block_loop.thisIndex'
p5093
g3626
sg38
S'left'
p5094
sg58
g62
sS'trial_loop.thisN'
p5095
I103
sg33
g3924
sg63
g64
sS'trial_loop.thisIndex'
p5096
g59
(g98
S'g\x00\x00\x00'
tRp5097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5098
I0
sg3641
g4197
sS'block_loop.thisRepN'
p5099
I1
sg3644
g3917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5100
I1
sg3646
g3924
sg55
g11
sS'block_loop.thisTrial'
p5101
Nsg69
Vn
sS'block_loop.thisTrialN'
p5102
I0
sg39
F1.3668524744207389
sg34
g752
(S'\x07\xdf\t\x1c\x12\x025\x06\xa38'
tRp5103
sa(dp5104
S'trial_loop.thisTrialN'
p5105
I104
sg3632
g3930
sS'block_loop.thisIndex'
p5106
g3626
sg38
S'left'
p5107
sg58
g62
sS'trial_loop.thisN'
p5108
I104
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5109
g59
(g98
S'h\x00\x00\x00'
tRp5110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5111
I0
sg3641
g3937
sS'block_loop.thisRepN'
p5112
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5113
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p5114
Nsg69
Vn
sS'block_loop.thisTrialN'
p5115
I0
sg39
F0.83342589509265963
sg34
g752
(S'\x07\xdf\t\x1c\x12\x02;\x0c\xae\x18'
tRp5116
sa(dp5117
S'trial_loop.thisTrialN'
p5118
I105
sg3632
g4319
sS'block_loop.thisIndex'
p5119
g3626
sg38
S'left'
p5120
sg58
g62
sS'trial_loop.thisN'
p5121
I105
sg33
g4058
sg63
g64
sS'trial_loop.thisIndex'
p5122
g59
(g98
S'i\x00\x00\x00'
tRp5123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5124
I0
sg3641
g4326
sS'block_loop.thisRepN'
p5125
I1
sg3644
g4058
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5126
I1
sg3646
g4052
sg55
g11
sS'block_loop.thisTrial'
p5127
Nsg69
Vn
sS'block_loop.thisTrialN'
p5128
I0
sg39
F0.85020418705971679
sg34
g752
(S'\x07\xdf\t\x1c\x12\x03\x05\n\xa2\xa8'
tRp5129
sa(dp5130
S'trial_loop.thisTrialN'
p5131
I106
sg3632
g3806
sS'block_loop.thisIndex'
p5132
g3626
sg38
S'right'
p5133
sg58
g62
sS'trial_loop.thisN'
p5134
I106
sg33
g3810
sg63
g64
sS'trial_loop.thisIndex'
p5135
g59
(g98
S'j\x00\x00\x00'
tRp5136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5137
I0
sg3641
g3814
sS'block_loop.thisRepN'
p5138
I1
sg3644
g3810
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5139
I1
sg3646
g3817
sg55
g11
sS'block_loop.thisTrial'
p5140
Nsg69
Vn
sS'block_loop.thisTrialN'
p5141
I0
sg39
F1.1001785282569472
sg34
g752
(S'\x07\xdf\t\x1c\x12\x03\x0b\x08\xd1\xd0'
tRp5142
sa(dp5143
S'trial_loop.thisTrialN'
p5144
I107
sg3632
g4429
sS'block_loop.thisIndex'
p5145
g3626
sg38
S'left'
p5146
sg58
g62
sS'trial_loop.thisN'
p5147
I107
sg33
g3834
sg63
g64
sS'trial_loop.thisIndex'
p5148
g59
(g98
S'k\x00\x00\x00'
tRp5149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5150
I0
sg3641
g4436
sS'block_loop.thisRepN'
p5151
I1
sg3644
g3827
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5152
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p5153
Nsg69
Vn
sS'block_loop.thisTrialN'
p5154
I0
sg39
F0.94995649407064775
sg34
g752
(S'\x07\xdf\t\x1c\x12\x03\x11\n\xd1\x88'
tRp5155
sa(dp5156
S'trial_loop.thisTrialN'
p5157
I108
sg3632
g3789
sS'block_loop.thisIndex'
p5158
g3626
sg38
S'right'
p5159
sg58
g62
sS'trial_loop.thisN'
p5160
I108
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p5161
g59
(g98
S'l\x00\x00\x00'
tRp5162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5163
I0
sg3641
g3797
sS'block_loop.thisRepN'
p5164
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5165
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p5166
Nsg69
Vn
sS'block_loop.thisTrialN'
p5167
I0
sg39
F0.73349084037909051
sg34
g752
(S'\x07\xdf\t\x1c\x12\x03\x17\n\xaax'
tRp5168
sa(dp5169
S'trial_loop.thisTrialN'
p5170
I109
sg3632
S'27-hartleys_raspberries_jelly.png'
p5171
sS'block_loop.thisIndex'
p5172
g3626
sg38
S'left'
p5173
sg58
g62
sS'trial_loop.thisN'
p5174
I109
sg33
g4101
sg63
g64
sS'trial_loop.thisIndex'
p5175
g59
(g98
S'm\x00\x00\x00'
tRp5176
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5177
I0
sg3641
S'51-mars.png'
p5178
sS'block_loop.thisRepN'
p5179
I1
sg3644
g4101
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5180
I1
sg3646
g4095
sg55
g11
sS'block_loop.thisTrial'
p5181
Nsg69
Vn
sS'block_loop.thisTrialN'
p5182
I0
sg39
F0.80013274154771352
sg34
g752
(S'\x07\xdf\t\x1c\x12\x03\x1d\x07/\xd8'
tRp5183
sa(dp5184
S'trial_loop.thisTrialN'
p5185
I110
sg3632
g4248
sS'block_loop.thisIndex'
p5186
g3626
sg38
S'left'
p5187
sg58
g62
sS'trial_loop.thisN'
p5188
I110
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p5189
g59
(g98
S'n\x00\x00\x00'
tRp5190
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5191
I0
sg3641
g4255
sS'block_loop.thisRepN'
p5192
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5193
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p5194
Nsg69
Vn
sS'block_loop.thisTrialN'
p5195
I0
sg39
F0.68343650073074969
sg34
g752
(S'\x07\xdf\t\x1c\x12\x03#\x04\xa7h'
tRp5196
sa(dp5197
S'trial_loop.thisTrialN'
p5198
I111
sg3632
g3633
sS'block_loop.thisIndex'
p5199
g3626
sg38
S'right'
p5200
sg58
g62
sS'trial_loop.thisN'
p5201
I111
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5202
g59
(g98
S'o\x00\x00\x00'
tRp5203
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5204
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5205
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5206
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5207
Nsg69
Vn
sS'block_loop.thisTrialN'
p5208
I0
sg39
F0.86690664300840581
sg34
g752
(S'\x07\xdf\t\x1c\x12\x03)\x00:\x98'
tRp5209
sa(dp5210
S'trial_loop.thisTrialN'
p5211
I112
sg3632
g4347
sS'block_loop.thisIndex'
p5212
g3626
sg38
S'left'
p5213
sg58
g62
sS'trial_loop.thisN'
p5214
I112
sg33
g3680
sg63
g64
sS'trial_loop.thisIndex'
p5215
g59
(g98
S'p\x00\x00\x00'
tRp5216
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5217
I0
sg3641
g4354
sS'block_loop.thisRepN'
p5218
I1
sg3644
g3680
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5219
I1
sg3646
g3674
sg55
g11
sS'block_loop.thisTrial'
p5220
Nsg69
Vn
sS'block_loop.thisTrialN'
p5221
I0
sg39
F0.76730999940627953
sg34
g752
(S'\x07\xdf\t\x1c\x12\x03.\r\xea\x80'
tRp5222
sa(dp5223
S'trial_loop.thisTrialN'
p5224
I113
sg3632
g3840
sS'block_loop.thisIndex'
p5225
g3626
sg38
S'left'
p5226
sg58
g62
sS'trial_loop.thisN'
p5227
I113
sg33
g3765
sg63
g64
sS'trial_loop.thisIndex'
p5228
g59
(g98
S'q\x00\x00\x00'
tRp5229
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5230
I0
sg3641
g3847
sS'block_loop.thisRepN'
p5231
I1
sg3644
g3765
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5232
I1
sg3646
g3759
sg55
g11
sS'block_loop.thisTrial'
p5233
Nsg69
Vn
sS'block_loop.thisTrialN'
p5234
I0
sg39
F0.93352117478571017
sg34
g752
(S'\x07\xdf\t\x1c\x12\x034\n\xe8\xf8'
tRp5235
sa(dp5236
S'trial_loop.thisTrialN'
p5237
I114
sg3632
g4362
sS'block_loop.thisIndex'
p5238
g3626
sg38
S'right'
p5239
sg58
g62
sS'trial_loop.thisN'
p5240
I114
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5241
g59
(g98
S'r\x00\x00\x00'
tRp5242
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5243
I0
sg3641
g4369
sS'block_loop.thisRepN'
p5244
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5245
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5246
Nsg69
Vn
sS'block_loop.thisTrialN'
p5247
I0
sg39
F0.93344277288633748
sg34
g752
(S'\x07\xdf\t\x1c\x12\x03:\nH\xd0'
tRp5248
sa(dp5249
S'trial_loop.thisTrialN'
p5250
I115
sg3632
g3772
sS'block_loop.thisIndex'
p5251
g3626
sg38
S'left'
p5252
sg58
g62
sS'trial_loop.thisN'
p5253
I115
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p5254
g59
(g98
S's\x00\x00\x00'
tRp5255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5256
I0
sg3641
g3780
sS'block_loop.thisRepN'
p5257
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5258
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p5259
Nsg69
Vn
sS'block_loop.thisTrialN'
p5260
I0
sg39
F1.1335115954971116
sg34
g752
(S'\x07\xdf\t\x1c\x12\x04\x04\t\xe7('
tRp5261
sa(dp5262
S'trial_loop.thisTrialN'
p5263
I116
sg3632
g4233
sS'block_loop.thisIndex'
p5264
g3626
sg38
S'right'
p5265
sg58
g62
sS'trial_loop.thisN'
p5266
I116
sg33
g3975
sg63
g64
sS'trial_loop.thisIndex'
p5267
g59
(g98
S't\x00\x00\x00'
tRp5268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5269
I0
sg3641
g4240
sS'block_loop.thisRepN'
p5270
I1
sg3644
g3975
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5271
I1
sg3646
g3982
sg55
g11
sS'block_loop.thisTrial'
p5272
Nsg69
Vn
sS'block_loop.thisTrialN'
p5273
I0
sg39
F0.76682590330165112
sg34
g752
(S'\x07\xdf\t\x1c\x12\x04\n\x0c_\xf8'
tRp5274
sa(dp5275
S'trial_loop.thisTrialN'
p5276
I117
sg3632
g4347
sS'block_loop.thisIndex'
p5277
g3626
sg38
S'left'
p5278
sg58
g62
sS'trial_loop.thisN'
p5279
I117
sg33
g3680
sg63
g64
sS'trial_loop.thisIndex'
p5280
g59
(g98
S'u\x00\x00\x00'
tRp5281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5282
I0
sg3641
g4354
sS'block_loop.thisRepN'
p5283
I1
sg3644
g3680
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5284
I1
sg3646
g3674
sg55
g11
sS'block_loop.thisTrial'
p5285
Nsg69
Vn
sS'block_loop.thisTrialN'
p5286
I0
sg39
F0.76680423586731195
sg34
g752
(S'\x07\xdf\t\x1c\x12\x04\x10\t^p'
tRp5287
sa(dp5288
S'trial_loop.thisTrialN'
p5289
I118
sg3632
g3883
sS'block_loop.thisIndex'
p5290
g3626
sg38
S'right'
p5291
sg58
g62
sS'trial_loop.thisN'
p5292
I118
sg33
g3893
sg63
g64
sS'trial_loop.thisIndex'
p5293
g59
(g98
S'v\x00\x00\x00'
tRp5294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5295
I0
sg3641
g3891
sS'block_loop.thisRepN'
p5296
I1
sg3644
g3893
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5297
I1
sg3646
g3887
sg55
g11
sS'block_loop.thisTrial'
p5298
Nsg69
Vn
sS'block_loop.thisTrialN'
p5299
I0
sg39
F0.73355156621255446
sg34
g752
(S'\x07\xdf\t\x1c\x12\x04\x16\x06`\xd0'
tRp5300
sa(dp5301
S'trial_loop.thisTrialN'
p5302
I119
sg3632
g5171
sS'block_loop.thisIndex'
p5303
g3626
sg38
S'left'
p5304
sg58
g62
sS'trial_loop.thisN'
p5305
I119
sg33
g4101
sg63
g64
sS'trial_loop.thisIndex'
p5306
g59
(g98
S'w\x00\x00\x00'
tRp5307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5308
I0
sg3641
g5178
sS'block_loop.thisRepN'
p5309
I1
sg3644
g4101
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5310
I1
sg3646
g4095
sg55
g11
sS'block_loop.thisTrial'
p5311
Nsg69
Vn
sS'block_loop.thisTrialN'
p5312
I0
sg39
F1.1001756772784574
sg34
g752
(S'\x07\xdf\t\x1c\x12\x04\x1c\x02\xa7\xb0'
tRp5313
sa(dp5314
S'trial_loop.thisTrialN'
p5315
I120
sg3632
g3633
sS'block_loop.thisIndex'
p5316
g3626
sg38
S'right'
p5317
sg58
g62
sS'trial_loop.thisN'
p5318
I120
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p5319
g59
(g98
S'x\x00\x00\x00'
tRp5320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5321
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5322
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5323
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5324
Nsg69
Vn
sS'block_loop.thisTrialN'
p5325
I0
sg39
F0.85020333176726126
sg34
g752
(S'\x07\xdf\t\x1c\x12\x04"\x04\xe2\x00'
tRp5326
sa(dp5327
S'trial_loop.thisTrialN'
p5328
I121
sg3632
g4777
sS'block_loop.thisIndex'
p5329
g3626
sg38
S'left'
p5330
sg58
g62
sS'trial_loop.thisN'
p5331
I121
sg33
g4022
sg63
g64
sS'trial_loop.thisIndex'
p5332
g59
(g98
S'y\x00\x00\x00'
tRp5333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5334
I0
sg3641
g4784
sS'block_loop.thisRepN'
p5335
I1
sg3644
g4022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5336
I1
sg3646
g4029
sg55
g11
sS'block_loop.thisTrial'
p5337
Nsg69
Vn
sS'block_loop.thisTrialN'
p5338
I0
sg39
F1.4168757384031778
sg34
g752
(S'\x07\xdf\t\x1c\x12\x04(\x03\x15\x10'
tRp5339
sa(dp5340
S'trial_loop.thisTrialN'
p5341
I122
sg3632
g3883
sS'block_loop.thisIndex'
p5342
g3626
sg38
S'right'
p5343
sg58
g62
sS'trial_loop.thisN'
p5344
I122
sg33
g3893
sg63
g64
sS'trial_loop.thisIndex'
p5345
g59
(g98
S'z\x00\x00\x00'
tRp5346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5347
I0
sg3641
g3891
sS'block_loop.thisRepN'
p5348
I1
sg3644
g3893
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5349
I1
sg3646
g3887
sg55
g11
sS'block_loop.thisTrial'
p5350
Nsg69
Vn
sS'block_loop.thisTrialN'
p5351
I0
sg39
F0.71677755071141291
sg34
g752
(S'\x07\xdf\t\x1c\x12\x04.\t\xd3\xa0'
tRp5352
sa(dp5353
S'trial_loop.thisTrialN'
p5354
I123
sg3632
g3823
sS'block_loop.thisIndex'
p5355
g3626
sg38
S'right'
p5356
sg58
g62
sS'trial_loop.thisN'
p5357
I123
sg33
g3827
sg63
g64
sS'trial_loop.thisIndex'
p5358
g59
(g98
S'{\x00\x00\x00'
tRp5359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5360
I0
sg3641
g3831
sS'block_loop.thisRepN'
p5361
I1
sg3644
g3827
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5362
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p5363
Nsg69
Vn
sS'block_loop.thisTrialN'
p5364
I0
sg39
F0.95024330248270417
sg34
g752
(S'\x07\xdf\t\x1c\x12\x044\x06\x1eh'
tRp5365
sa(dp5366
S'trial_loop.thisTrialN'
p5367
I124
sg3632
g3913
sS'block_loop.thisIndex'
p5368
g3626
sg38
S'right'
p5369
sg58
g62
sS'trial_loop.thisN'
p5370
I124
sg33
g3917
sg63
g64
sS'trial_loop.thisIndex'
p5371
g59
(g98
S'|\x00\x00\x00'
tRp5372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5373
I0
sg3641
g3921
sS'block_loop.thisRepN'
p5374
I1
sg3644
g3917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5375
I1
sg3646
g3924
sg55
g11
sS'block_loop.thisTrial'
p5376
Nsg69
Vn
sS'block_loop.thisTrialN'
p5377
I0
sg39
F1.0000601556384936
sg34
g752
(S'\x07\xdf\t\x1c\x12\x04:\x05\xbc\xc0'
tRp5378
sa(dp5379
S'trial_loop.thisTrialN'
p5380
I125
sg3632
g3823
sS'block_loop.thisIndex'
p5381
g3626
sg38
S'right'
p5382
sg58
g62
sS'trial_loop.thisN'
p5383
I125
sg33
g3827
sg63
g64
sS'trial_loop.thisIndex'
p5384
g59
(g98
S'}\x00\x00\x00'
tRp5385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5386
I0
sg3641
g3831
sS'block_loop.thisRepN'
p5387
I1
sg3644
g3827
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5388
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p5389
Nsg69
Vn
sS'block_loop.thisTrialN'
p5390
I0
sg39
F0.71686906711329357
sg34
g752
(S'\x07\xdf\t\x1c\x12\x05\x04\x06MH'
tRp5391
sa(dp5392
S'trial_loop.thisTrialN'
p5393
I126
sg3632
g3971
sS'block_loop.thisIndex'
p5394
g3626
sg38
S'left'
p5395
sg58
g62
sS'trial_loop.thisN'
p5396
I126
sg33
g3975
sg63
g64
sS'trial_loop.thisIndex'
p5397
g59
(g98
S'~\x00\x00\x00'
tRp5398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5399
I0
sg3641
g3979
sS'block_loop.thisRepN'
p5400
I1
sg3644
g3975
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5401
I1
sg3646
g3982
sg55
g11
sS'block_loop.thisTrial'
p5402
Nsg69
Vn
sS'block_loop.thisTrialN'
p5403
I0
sg39
F0.93352659164520446
sg34
g752
(S'\x07\xdf\t\x1c\x12\x05\n\x02\x94('
tRp5404
sa(dp5405
S'trial_loop.thisTrialN'
p5406
I127
sg3632
g3883
sS'block_loop.thisIndex'
p5407
g3626
sg38
S'right'
p5408
sg58
g62
sS'trial_loop.thisN'
p5409
I127
sg33
g3887
sg63
g64
sS'trial_loop.thisIndex'
p5410
g59
(g98
S'\x7f\x00\x00\x00'
tRp5411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5412
I0
sg3641
g3891
sS'block_loop.thisRepN'
p5413
I1
sg3644
g3893
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5414
I1
sg3646
g3887
sg55
g11
sS'block_loop.thisTrial'
p5415
Nsg69
Vn
sS'block_loop.thisTrialN'
p5416
I0
sg39
F0.71678952482398017
sg34
g752
(S'\x07\xdf\t\x1c\x12\x05\x10\x01\xf4\x00'
tRp5417
sa(dp5418
S'trial_loop.thisTrialN'
p5419
I128
sg3632
g4347
sS'block_loop.thisIndex'
p5420
g3626
sg38
S'left'
p5421
sg58
g62
sS'trial_loop.thisN'
p5422
I128
sg33
g3680
sg63
g64
sS'trial_loop.thisIndex'
p5423
g59
(g98
S'\x80\x00\x00\x00'
tRp5424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5425
I0
sg3641
g4354
sS'block_loop.thisRepN'
p5426
I1
sg3644
g3680
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5427
I1
sg3646
g3674
sg55
g11
sS'block_loop.thisTrial'
p5428
Nsg69
Vn
sS'block_loop.thisTrialN'
p5429
I0
sg39
F0.81663106745327241
sg34
g752
(S'\x07\xdf\t\x1c\x12\x05\x15\r\x81\x08'
tRp5430
sa(dp5431
S'trial_loop.thisTrialN'
p5432
I129
sg3632
g3721
sS'block_loop.thisIndex'
p5433
g3626
sg38
S'right'
p5434
sg58
g62
sS'trial_loop.thisN'
p5435
I129
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5436
g59
(g98
S'\x81\x00\x00\x00'
tRp5437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5438
I0
sg3641
g3729
sS'block_loop.thisRepN'
p5439
I1
sg3644
g3731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5440
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p5441
Nsg69
Vn
sS'block_loop.thisTrialN'
p5442
I0
sg39
F0.81725771246783552
sg34
g752
(S'\x07\xdf\t\x1c\x12\x05\x1b\x0b7\x18'
tRp5443
sa(dp5444
S'trial_loop.thisTrialN'
p5445
I130
sg3632
g3755
sS'block_loop.thisIndex'
p5446
g3626
sg38
S'left'
p5447
sg58
g62
sS'trial_loop.thisN'
p5448
I130
sg33
g3765
sg63
g64
sS'trial_loop.thisIndex'
p5449
g59
(g98
S'\x82\x00\x00\x00'
tRp5450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5451
I0
sg3641
g3763
sS'block_loop.thisRepN'
p5452
I1
sg3644
g3765
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5453
I1
sg3646
g3759
sg55
g11
sS'block_loop.thisTrial'
p5454
Nsg69
Vn
sS'block_loop.thisTrialN'
p5455
I0
sg39
F1.1002267097901495
sg34
g752
(S'\x07\xdf\t\x1c\x12\x05!\x08\xed('
tRp5456
sa(dp5457
S'trial_loop.thisTrialN'
p5458
I131
sg3632
g3789
sS'block_loop.thisIndex'
p5459
g3626
sg38
S'right'
p5460
sg58
g62
sS'trial_loop.thisN'
p5461
I131
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p5462
g59
(g98
S'\x83\x00\x00\x00'
tRp5463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5464
I0
sg3641
g3797
sS'block_loop.thisRepN'
p5465
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5466
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p5467
Nsg69
Vn
sS'block_loop.thisTrialN'
p5468
I0
sg39
F0.88354609233283554
sg34
g752
(S"\x07\xdf\t\x1c\x12\x05'\n\xec\xe0"
tRp5469
sa(dp5470
S'trial_loop.thisTrialN'
p5471
I132
sg3632
g4541
sS'block_loop.thisIndex'
p5472
g3626
sg38
S'left'
p5473
sg58
g62
sS'trial_loop.thisN'
p5474
I132
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p5475
g59
(g98
S'\x84\x00\x00\x00'
tRp5476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5477
I0
sg3641
g4548
sS'block_loop.thisRepN'
p5478
I1
sg3644
g3731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5479
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p5480
Nsg69
Vn
sS'block_loop.thisTrialN'
p5481
I0
sg39
F1.1834618744396721
sg34
g752
(S'\x07\xdf\t\x1c\x12\x05-\t\x95 '
tRp5482
sa(dp5483
S'trial_loop.thisTrialN'
p5484
I133
sg3632
g4487
sS'block_loop.thisIndex'
p5485
g3626
sg38
S'right'
p5486
sg58
g62
sS'trial_loop.thisN'
p5487
I133
sg33
g4273
sg63
g64
sS'trial_loop.thisIndex'
p5488
g59
(g98
S'\x85\x00\x00\x00'
tRp5489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5490
I0
sg3641
g4494
sS'block_loop.thisRepN'
p5491
I1
sg3644
g4273
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5492
I1
sg3646
g4267
sg55
g11
sS'block_loop.thisTrial'
p5493
Nsg69
Vn
sS'block_loop.thisTrialN'
p5494
I0
sg39
F0.86686958029167727
sg34
g752
(S'\x07\xdf\t\x1c\x12\x053\r\x04\x08'
tRp5495
sa(dp5496
S'trial_loop.thisTrialN'
p5497
I134
sg3632
g4541
sS'block_loop.thisIndex'
p5498
g3626
sg38
S'left'
p5499
sg58
g62
sS'trial_loop.thisN'
p5500
I134
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p5501
g59
(g98
S'\x86\x00\x00\x00'
tRp5502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5503
I0
sg3641
g4548
sS'block_loop.thisRepN'
p5504
I1
sg3644
g3731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5505
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p5506
Nsg69
Vn
sS'block_loop.thisTrialN'
p5507
I0
sg39
F1.0005251501897874
sg34
g752
(S'\x07\xdf\t\x1c\x12\x059\x0bm\xc8'
tRp5508
sa(dp5509
S'trial_loop.thisTrialN'
p5510
I135
sg3632
g4218
sS'block_loop.thisIndex'
p5511
g3626
sg38
S'left'
p5512
sg58
g62
sS'trial_loop.thisN'
p5513
I135
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5514
g59
(g98
S'\x87\x00\x00\x00'
tRp5515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5516
I0
sg3641
g4225
sS'block_loop.thisRepN'
p5517
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5518
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5519
Nsg69
Vn
sS'block_loop.thisTrialN'
p5520
I0
sg39
F1.7501622206618777
sg34
g752
(S'\x07\xdf\t\x1c\x12\x06\x03\x0c\x028'
tRp5521
sa(dp5522
S'trial_loop.thisTrialN'
p5523
I136
sg3632
g4472
sS'block_loop.thisIndex'
p5524
g3626
sg38
S'left'
p5525
sg58
g62
sS'trial_loop.thisN'
p5526
I136
sg33
g3810
sg63
g64
sS'trial_loop.thisIndex'
p5527
g59
(g98
S'\x88\x00\x00\x00'
tRp5528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5529
I0
sg3641
g4479
sS'block_loop.thisRepN'
p5530
I1
sg3644
g3810
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5531
I1
sg3646
g3817
sg55
g11
sS'block_loop.thisTrial'
p5532
Nsg69
Vn
sS'block_loop.thisTrialN'
p5533
I0
sg39
F1.0667337026679888
sg34
g752
(S'\x07\xdf\t\x1c\x12\x06\n\x08\x7f\xc8'
tRp5534
sa(dp5535
S'trial_loop.thisTrialN'
p5536
I137
sg3632
g3670
sS'block_loop.thisIndex'
p5537
g3626
sg38
S'right'
p5538
sg58
g62
sS'trial_loop.thisN'
p5539
I137
sg33
g3680
sg63
g64
sS'trial_loop.thisIndex'
p5540
g59
(g98
S'\x89\x00\x00\x00'
tRp5541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5542
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5543
I1
sg3644
g3680
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5544
I1
sg3646
g3674
sg55
g11
sS'block_loop.thisTrial'
p5545
Nsg69
Vn
sS'block_loop.thisTrialN'
p5546
I0
sg39
F0.90009887192354654
sg34
g752
(S'\x07\xdf\t\x1c\x12\x06\x10\n\x06h'
tRp5547
sa(dp5548
S'trial_loop.thisTrialN'
p5549
I138
sg3632
g3988
sS'block_loop.thisIndex'
p5550
g3626
sg38
S'left'
p5551
sg58
g62
sS'trial_loop.thisN'
p5552
I138
sg33
g3887
sg63
g64
sS'trial_loop.thisIndex'
p5553
g59
(g98
S'\x8a\x00\x00\x00'
tRp5554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5555
I0
sg3641
g3995
sS'block_loop.thisRepN'
p5556
I1
sg3644
g3893
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5557
I1
sg3646
g3887
sg55
g11
sS'block_loop.thisTrial'
p5558
Nsg69
Vn
sS'block_loop.thisTrialN'
p5559
I0
sg39
F1.0667830245911318
sg34
g752
(S"\x07\xdf\t\x1c\x12\x06\x16\t'\xc0"
tRp5560
sa(dp5561
S'trial_loop.thisTrialN'
p5562
I139
sg3632
g3806
sS'block_loop.thisIndex'
p5563
g3626
sg38
S'right'
p5564
sg58
g62
sS'trial_loop.thisN'
p5565
I139
sg33
g3817
sg63
g64
sS'trial_loop.thisIndex'
p5566
g59
(g98
S'\x8b\x00\x00\x00'
tRp5567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5568
I0
sg3641
g3814
sS'block_loop.thisRepN'
p5569
I1
sg3644
g3810
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5570
I1
sg3646
g3817
sg55
g11
sS'block_loop.thisTrial'
p5571
Nsg69
Vn
sS'block_loop.thisTrialN'
p5572
I0
sg39
F1.2172066229359189
sg34
g752
(S'\x07\xdf\t\x1c\x12\x06\x1c\n\xae`'
tRp5573
sa(dp5574
S'trial_loop.thisTrialN'
p5575
I140
sg3632
g4233
sS'block_loop.thisIndex'
p5576
g3626
sg38
S'right'
p5577
sg58
g62
sS'trial_loop.thisN'
p5578
I140
sg33
g3975
sg63
g64
sS'trial_loop.thisIndex'
p5579
g59
(g98
S'\x8c\x00\x00\x00'
tRp5580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5581
I0
sg3641
g4240
sS'block_loop.thisRepN'
p5582
I1
sg3644
g3975
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5583
I1
sg3646
g3982
sg55
g11
sS'block_loop.thisTrial'
p5584
Nsg69
Vn
sS'block_loop.thisTrialN'
p5585
I0
sg39
F0.76687151895748684
sg34
g752
(S'\x07\xdf\t\x1c\x12\x06"\x0eW\xe0'
tRp5586
sa(dp5587
S'trial_loop.thisTrialN'
p5588
I141
sg3632
g4472
sS'block_loop.thisIndex'
p5589
g3626
sg38
S'left'
p5590
sg58
g62
sS'trial_loop.thisN'
p5591
I141
sg33
g3810
sg63
g64
sS'trial_loop.thisIndex'
p5592
g59
(g98
S'\x8d\x00\x00\x00'
tRp5593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5594
I0
sg3641
g4479
sS'block_loop.thisRepN'
p5595
I1
sg3644
g3810
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5596
I1
sg3646
g3817
sg55
g11
sS'block_loop.thisTrial'
p5597
Nsg69
Vn
sS'block_loop.thisTrialN'
p5598
I0
sg39
F0.81679471360257594
sg34
g752
(S'\x07\xdf\t\x1c\x12\x06(\x0bVX'
tRp5599
sa(dp5600
S'trial_loop.thisTrialN'
p5601
I142
sg3632
g3789
sS'block_loop.thisIndex'
p5602
g3626
sg38
S'right'
p5603
sg58
g62
sS'trial_loop.thisN'
p5604
I142
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p5605
g59
(g98
S'\x8e\x00\x00\x00'
tRp5606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5607
I0
sg3641
g3797
sS'block_loop.thisRepN'
p5608
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5609
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p5610
Nsg69
Vn
sS'block_loop.thisTrialN'
p5611
I0
sg39
F0.70008393279931624
sg34
g752
(S'\x07\xdf\t\x1c\x12\x06.\t\x0ch'
tRp5612
sa(dp5613
S'trial_loop.thisTrialN'
p5614
I143
sg3632
g4091
sS'block_loop.thisIndex'
p5615
g3626
sg38
S'right'
p5616
sg58
g62
sS'trial_loop.thisN'
p5617
I143
sg33
g4101
sg63
g64
sS'trial_loop.thisIndex'
p5618
g59
(g98
S'\x8f\x00\x00\x00'
tRp5619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5620
I0
sg3641
g4099
sS'block_loop.thisRepN'
p5621
I1
sg3644
g4101
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5622
I1
sg3646
g4095
sg55
g11
sS'block_loop.thisTrial'
p5623
Nsg69
Vn
sS'block_loop.thisTrialN'
p5624
I0
sg39
F0.75021439356351038
sg34
g752
(S'\x07\xdf\t\x1c\x12\x064\x05\x18\xb0'
tRp5625
sa(dp5626
S'trial_loop.thisTrialN'
p5627
I144
sg3632
g3840
sS'block_loop.thisIndex'
p5628
g3626
sg38
S'right'
p5629
sg58
g62
sS'trial_loop.thisN'
p5630
I144
sg33
g3765
sg63
g64
sS'trial_loop.thisIndex'
p5631
g59
(g98
S'\x90\x00\x00\x00'
tRp5632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5633
I0
sg3641
g3847
sS'block_loop.thisRepN'
p5634
I1
sg3644
g3765
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5635
I1
sg3646
g3759
sg55
g11
sS'block_loop.thisTrial'
p5636
Nsg69
Vn
sS'block_loop.thisTrialN'
p5637
I0
sg39
F0.98357950579884346
sg34
g752
(S'\x07\xdf\t\x1c\x12\x06:\x01\x9e\x10'
tRp5638
sa(dp5639
S'trial_loop.thisTrialN'
p5640
I145
sg3632
g3704
sS'block_loop.thisIndex'
p5641
g3626
sg38
S'left'
p5642
sg58
g62
sS'trial_loop.thisN'
p5643
I145
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5644
g59
(g98
S'\x91\x00\x00\x00'
tRp5645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5646
I0
sg3641
g3712
sS'block_loop.thisRepN'
p5647
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5648
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5649
Nsg69
Vn
sS'block_loop.thisTrialN'
p5650
I0
sg39
F1.2165873904632463
sg34
g752
(S'\x07\xdf\t\x1c\x12\x07\x04\x01\xf0\x18'
tRp5651
sa(dp5652
S'trial_loop.thisTrialN'
p5653
I146
sg3632
g3971
sS'block_loop.thisIndex'
p5654
g3626
sg38
S'left'
p5655
sg58
g62
sS'trial_loop.thisN'
p5656
I146
sg33
g3975
sg63
g64
sS'trial_loop.thisIndex'
p5657
g59
(g98
S'\x92\x00\x00\x00'
tRp5658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5659
I0
sg3641
g3979
sS'block_loop.thisRepN'
p5660
I1
sg3644
g3975
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5661
I1
sg3646
g3982
sg55
g11
sS'block_loop.thisTrial'
p5662
Nsg69
Vn
sS'block_loop.thisTrialN'
p5663
I0
sg39
F0.73362113008261076
sg34
g752
(S'\x07\xdf\t\x1c\x12\x07\n\x05\xd8\x18'
tRp5664
sa(dp5665
S'trial_loop.thisTrialN'
p5666
I147
sg3632
g4108
sS'block_loop.thisIndex'
p5667
g3626
sg38
S'right'
p5668
sg58
g62
sS'trial_loop.thisN'
p5669
I147
sg33
g4112
sg63
g64
sS'trial_loop.thisIndex'
p5670
g59
(g98
S'\x93\x00\x00\x00'
tRp5671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5672
I0
sg3641
g4116
sS'block_loop.thisRepN'
p5673
I1
sg3644
g4112
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5674
I1
sg3646
g4119
sg55
g11
sS'block_loop.thisTrial'
p5675
Nsg69
Vn
sS'block_loop.thisTrialN'
p5676
I0
sg39
F0.88344174653320806
sg34
g752
(S'\x07\xdf\t\x1c\x12\x07\x10\x02\x1e\xf8'
tRp5677
sa(dp5678
S'trial_loop.thisTrialN'
p5679
I148
sg3632
g3868
sS'block_loop.thisIndex'
p5680
g3626
sg38
S'left'
p5681
sg58
g62
sS'trial_loop.thisN'
p5682
I148
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5683
g59
(g98
S'\x94\x00\x00\x00'
tRp5684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5685
I0
sg3641
g3875
sS'block_loop.thisRepN'
p5686
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5687
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5688
Nsg69
Vn
sS'block_loop.thisTrialN'
p5689
I0
sg39
F0.88341637282428565
sg34
g752
(S'\x07\xdf\t\x1c\x12\x07\x16\x01\x05\xb8'
tRp5690
sa(dp5691
S'trial_loop.thisTrialN'
p5692
I149
sg3632
g3721
sS'block_loop.thisIndex'
p5693
g3626
sg38
S'right'
p5694
sg58
g62
sS'trial_loop.thisN'
p5695
I149
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p5696
g59
(g98
S'\x95\x00\x00\x00'
tRp5697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5698
I0
sg3641
g3729
sS'block_loop.thisRepN'
p5699
I1
sg3644
g3731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5700
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p5701
Nsg69
Vn
sS'block_loop.thisTrialN'
p5702
I0
sg39
F0.96677812090638326
sg34
g752
(S'\x07\xdf\t\x1c\x12\x07\x1b\x0e\xf4 '
tRp5703
sa(dp5704
S'trial_loop.thisTrialN'
p5705
I150
sg3632
g3670
sS'block_loop.thisIndex'
p5706
g3626
sg38
S'right'
p5707
sg58
g62
sS'trial_loop.thisN'
p5708
I150
sg33
g3680
sg63
g64
sS'trial_loop.thisIndex'
p5709
g59
(g98
S'\x96\x00\x00\x00'
tRp5710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5711
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5712
I1
sg3644
g3680
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5713
I1
sg3646
g3674
sg55
g11
sS'block_loop.thisTrial'
p5714
Nsg69
Vn
sS'block_loop.thisTrialN'
p5715
I0
sg39
F0.93345987875363789
sg34
g752
(S'\x07\xdf\t\x1c\x12\x07!\x0f\x0b\x90'
tRp5716
sa(dp5717
S'trial_loop.thisTrialN'
p5718
I151
sg3632
g3988
sS'block_loop.thisIndex'
p5719
g3626
sg38
S'left'
p5720
sg58
g62
sS'trial_loop.thisN'
p5721
I151
sg33
g3893
sg63
g64
sS'trial_loop.thisIndex'
p5722
g59
(g98
S'\x97\x00\x00\x00'
tRp5723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5724
I0
sg3641
g3995
sS'block_loop.thisRepN'
p5725
I1
sg3644
g3893
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5726
I1
sg3646
g3887
sg55
g11
sS'block_loop.thisTrial'
p5727
Nsg69
Vn
sS'block_loop.thisTrialN'
p5728
I0
sg39
F0.98321629117344855
sg34
g752
(S"\x07\xdf\t\x1c\x12\x07'\x0ekh"
tRp5729
sa(dp5730
S'trial_loop.thisTrialN'
p5731
I152
sg3632
g4777
sS'block_loop.thisIndex'
p5732
g3626
sg38
S'left'
p5733
sg58
g62
sS'trial_loop.thisN'
p5734
I152
sg33
g4022
sg63
g64
sS'trial_loop.thisIndex'
p5735
g59
(g98
S'\x98\x00\x00\x00'
tRp5736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5737
I0
sg3641
g4784
sS'block_loop.thisRepN'
p5738
I1
sg3644
g4022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5739
I1
sg3646
g4029
sg55
g11
sS'block_loop.thisTrial'
p5740
Nsg69
Vn
sS'block_loop.thisTrialN'
p5741
I0
sg39
F1.0002106872889271
sg34
g752
(S'\x07\xdf\t\x1c\x12\x07-\x0e\xc1X'
tRp5742
sa(dp5743
S'trial_loop.thisTrialN'
p5744
I153
sg3632
g4108
sS'block_loop.thisIndex'
p5745
g3626
sg38
S'right'
p5746
sg58
g62
sS'trial_loop.thisN'
p5747
I153
sg33
g4112
sg63
g64
sS'trial_loop.thisIndex'
p5748
g59
(g98
S'\x99\x00\x00\x00'
tRp5749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5750
I0
sg3641
g4116
sS'block_loop.thisRepN'
p5751
I1
sg3644
g4112
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5752
I1
sg3646
g4119
sg55
g11
sS'block_loop.thisTrial'
p5753
Nsg69
Vn
sS'block_loop.thisTrialN'
p5754
I0
sg39
F0.83352453893894562
sg34
g752
(S'\x07\xdf\t\x1c\x12\x073\x0f\x13`'
tRp5755
sa(dp5756
S'trial_loop.thisTrialN'
p5757
I154
sg3632
g4091
sS'block_loop.thisIndex'
p5758
g3626
sg38
S'right'
p5759
sg58
g62
sS'trial_loop.thisN'
p5760
I154
sg33
g4101
sg63
g64
sS'trial_loop.thisIndex'
p5761
g59
(g98
S'\x9a\x00\x00\x00'
tRp5762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5763
I0
sg3641
g4099
sS'block_loop.thisRepN'
p5764
I1
sg3644
g4101
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5765
I1
sg3646
g4095
sg55
g11
sS'block_loop.thisTrial'
p5766
Nsg69
Vn
sS'block_loop.thisTrialN'
p5767
I0
sg39
F0.71683913184460835
sg34
g752
(S'\x07\xdf\t\x1c\x12\x079\rFp'
tRp5768
sa(dp5769
S'trial_loop.thisTrialN'
p5770
I155
sg3632
g3913
sS'block_loop.thisIndex'
p5771
g3626
sg38
S'right'
p5772
sg58
g62
sS'trial_loop.thisN'
p5773
I155
sg33
g3917
sg63
g64
sS'trial_loop.thisIndex'
p5774
g59
(g98
S'\x9b\x00\x00\x00'
tRp5775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5776
I0
sg3641
g3921
sS'block_loop.thisRepN'
p5777
I1
sg3644
g3917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5778
I1
sg3646
g3924
sg55
g11
sS'block_loop.thisTrial'
p5779
Nsg69
Vn
sS'block_loop.thisTrialN'
p5780
I0
sg39
F1.0834780679942924
sg34
g752
(S'\x07\xdf\t\x1c\x12\x08\x03\tN\xd0'
tRp5781
sa(dp5782
S'trial_loop.thisTrialN'
p5783
I156
sg3632
g4541
sS'block_loop.thisIndex'
p5784
g3626
sg38
S'left'
p5785
sg58
g62
sS'trial_loop.thisN'
p5786
I156
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p5787
g59
(g98
S'\x9c\x00\x00\x00'
tRp5788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5789
I0
sg3641
g4548
sS'block_loop.thisRepN'
p5790
I1
sg3644
g3731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5791
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p5792
Nsg69
Vn
sS'block_loop.thisTrialN'
p5793
I0
sg39
F0.81685543943603989
sg34
g752
(S'\x07\xdf\t\x1c\x12\x08\t\x0b\x13\xf0'
tRp5794
sa(dp5795
S'trial_loop.thisTrialN'
p5796
I157
sg3632
g4018
sS'block_loop.thisIndex'
p5797
g3626
sg38
S'right'
p5798
sg58
g62
sS'trial_loop.thisN'
p5799
I157
sg33
g4022
sg63
g64
sS'trial_loop.thisIndex'
p5800
g59
(g98
S'\x9d\x00\x00\x00'
tRp5801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5802
I0
sg3641
g4026
sS'block_loop.thisRepN'
p5803
I1
sg3644
g4022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5804
I1
sg3646
g4029
sg55
g11
sS'block_loop.thisTrial'
p5805
Nsg69
Vn
sS'block_loop.thisTrialN'
p5806
I0
sg39
F0.80019033130884054
sg34
g752
(S'\x07\xdf\t\x1c\x12\x08\x0f\x08\xca\x00'
tRp5807
sa(dp5808
S'trial_loop.thisTrialN'
p5809
I158
sg3632
g4347
sS'block_loop.thisIndex'
p5810
g3626
sg38
S'left'
p5811
sg58
g62
sS'trial_loop.thisN'
p5812
I158
sg33
g3680
sg63
g64
sS'trial_loop.thisIndex'
p5813
g59
(g98
S'\x9e\x00\x00\x00'
tRp5814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5815
I0
sg3641
g4354
sS'block_loop.thisRepN'
p5816
I1
sg3644
g3680
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5817
I1
sg3646
g3674
sg55
g11
sS'block_loop.thisTrial'
p5818
Nsg69
Vn
sS'block_loop.thisTrialN'
p5819
I0
sg39
F0.76686581700050738
sg34
g752
(S'\x07\xdf\t\x1c\x12\x08\x15\x06A\x90'
tRp5820
sa(dp5821
S'trial_loop.thisTrialN'
p5822
I159
sg3632
g4487
sS'block_loop.thisIndex'
p5823
g3626
sg38
S'right'
p5824
sg58
g62
sS'trial_loop.thisN'
p5825
I159
sg33
g4273
sg63
g64
sS'trial_loop.thisIndex'
p5826
g59
(g98
S'\x9f\x00\x00\x00'
tRp5827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5828
I0
sg3641
g4494
sS'block_loop.thisRepN'
p5829
I1
sg3644
g4273
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5830
I1
sg3646
g4267
sg55
g11
sS'block_loop.thisTrial'
p5831
Nsg69
Vn
sS'block_loop.thisTrialN'
p5832
I0
sg39
F0.93352345556922955
sg34
g752
(S'\x07\xdf\t\x1c\x12\x08\x1b\x03@\x08'
tRp5833
sa(dp5834
S'trial_loop.thisTrialN'
p5835
I160
sg3632
g5171
sS'block_loop.thisIndex'
p5836
g3626
sg38
S'left'
p5837
sg58
g62
sS'trial_loop.thisN'
p5838
I160
sg33
g4101
sg63
g64
sS'trial_loop.thisIndex'
p5839
g59
(g98
S'\xa0\x00\x00\x00'
tRp5840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5841
I0
sg3641
g5178
sS'block_loop.thisRepN'
p5842
I1
sg3644
g4101
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5843
I1
sg3646
g4095
sg55
g11
sS'block_loop.thisTrial'
p5844
Nsg69
Vn
sS'block_loop.thisTrialN'
p5845
I0
sg39
F0.88353012685547583
sg34
g752
(S'\x07\xdf\t\x1c\x12\x08!\x02\x9f\xe0'
tRp5846
sa(dp5847
S'trial_loop.thisTrialN'
p5848
I161
sg3632
g3738
sS'block_loop.thisIndex'
p5849
g3626
sg38
S'right'
p5850
sg58
g62
sS'trial_loop.thisN'
p5851
I161
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p5852
g59
(g98
S'\xa1\x00\x00\x00'
tRp5853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5854
I0
sg3641
g3746
sS'block_loop.thisRepN'
p5855
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5856
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p5857
Nsg69
Vn
sS'block_loop.thisTrialN'
p5858
I0
sg39
F0.91681045100267511
sg34
g752
(S"\x07\xdf\t\x1c\x12\x08'\x01\x86\xa0"
tRp5859
sa(dp5860
S'trial_loop.thisTrialN'
p5861
I162
sg3632
g4472
sS'block_loop.thisIndex'
p5862
g3626
sg38
S'left'
p5863
sg58
g62
sS'trial_loop.thisN'
p5864
I162
sg33
g3810
sg63
g64
sS'trial_loop.thisIndex'
p5865
g59
(g98
S'\xa2\x00\x00\x00'
tRp5866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5867
I0
sg3641
g4479
sS'block_loop.thisRepN'
p5868
I1
sg3644
g3810
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5869
I1
sg3646
g3817
sg55
g11
sS'block_loop.thisTrial'
p5870
Nsg69
Vn
sS'block_loop.thisTrialN'
p5871
I0
sg39
F0.95020053780899616
sg34
g752
(S'\x07\xdf\t\x1c\x12\x08-\x00\xab\xe0'
tRp5872
sa(dp5873
S'trial_loop.thisTrialN'
p5874
I163
sg3632
g3721
sS'block_loop.thisIndex'
p5875
g3626
sg38
S'right'
p5876
sg58
g62
sS'trial_loop.thisN'
p5877
I163
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p5878
g59
(g98
S'\xa3\x00\x00\x00'
tRp5879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5880
I0
sg3641
g3729
sS'block_loop.thisRepN'
p5881
I1
sg3644
g3731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5882
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p5883
Nsg69
Vn
sS'block_loop.thisTrialN'
p5884
I0
sg39
F0.80020886266720481
sg34
g752
(S'\x07\xdf\t\x1c\x12\x083\x00\x84\xd0'
tRp5885
sa(dp5886
S'trial_loop.thisTrialN'
p5887
I164
sg3632
g4190
sS'block_loop.thisIndex'
p5888
g3626
sg38
S'left'
p5889
sg58
g62
sS'trial_loop.thisN'
p5890
I164
sg33
g3924
sg63
g64
sS'trial_loop.thisIndex'
p5891
g59
(g98
S'\xa4\x00\x00\x00'
tRp5892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5893
I0
sg3641
g4197
sS'block_loop.thisRepN'
p5894
I1
sg3644
g3917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5895
I1
sg3646
g3924
sg55
g11
sS'block_loop.thisTrial'
p5896
Nsg69
Vn
sS'block_loop.thisTrialN'
p5897
I0
sg39
F1.2167918056074996
sg34
g752
(S'\x07\xdf\t\x1c\x12\x088\rB\x88'
tRp5898
sa(dp5899
S'trial_loop.thisTrialN'
p5900
I165
sg3632
g3653
sS'block_loop.thisIndex'
p5901
g3626
sg38
S'right'
p5902
sg58
g62
sS'trial_loop.thisN'
p5903
I165
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5904
g59
(g98
S'\xa5\x00\x00\x00'
tRp5905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5906
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5907
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5908
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5909
Nsg69
Vn
sS'block_loop.thisTrialN'
p5910
I0
sg39
F0.85009071812601178
sg34
g752
(S'\x07\xdf\t\x1c\x12\t\x03\x01\xa9\xc8'
tRp5911
sa(dp5912
S'trial_loop.thisTrialN'
p5913
I166
sg3632
g4190
sS'block_loop.thisIndex'
p5914
g3626
sg38
S'left'
p5915
sg58
g62
sS'trial_loop.thisN'
p5916
I166
sg33
g3924
sg63
g64
sS'trial_loop.thisIndex'
p5917
g59
(g98
S'\xa6\x00\x00\x00'
tRp5918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5919
I0
sg3641
g4197
sS'block_loop.thisRepN'
p5920
I1
sg3644
g3917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5921
I1
sg3646
g3924
sg55
g11
sS'block_loop.thisTrial'
p5922
Nsg69
Vn
sS'block_loop.thisTrialN'
p5923
I0
sg39
F0.86678319565180573
sg34
g752
(S'\x07\xdf\t\x1c\x12\t\x08\x0f\x1b0'
tRp5924
sa(dp5925
S'trial_loop.thisTrialN'
p5926
I167
sg3632
g4048
sS'block_loop.thisIndex'
p5927
g3626
sg38
S'right'
p5928
sg58
g62
sS'trial_loop.thisN'
p5929
I167
sg33
g4058
sg63
g64
sS'trial_loop.thisIndex'
p5930
g59
(g98
S'\xa7\x00\x00\x00'
tRp5931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5932
I0
sg3641
g4056
sS'block_loop.thisRepN'
p5933
I1
sg3644
g4058
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5934
I1
sg3646
g4052
sg55
g11
sS'block_loop.thisTrial'
p5935
Nsg69
Vn
sS'block_loop.thisTrialN'
p5936
I0
sg39
F0.71669145117266453
sg34
g752
(S'\x07\xdf\t\x1c\x12\t\x0e\r\xc3p'
tRp5937
sa(dp5938
S'trial_loop.thisTrialN'
p5939
I168
sg3632
g3868
sS'block_loop.thisIndex'
p5940
g3626
sg38
S'left'
p5941
sg58
g62
sS'trial_loop.thisN'
p5942
I168
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5943
g59
(g98
S'\xa8\x00\x00\x00'
tRp5944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5945
I0
sg3641
g3875
sS'block_loop.thisRepN'
p5946
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5947
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5948
Nsg69
Vn
sS'block_loop.thisTrialN'
p5949
I0
sg39
F0.73336425694651552
sg34
g752
(S'\x07\xdf\t\x1c\x12\t\x14\t\xcf\xb8'
tRp5950
sa(dp5951
S'trial_loop.thisTrialN'
p5952
I169
sg3632
g3823
sS'block_loop.thisIndex'
p5953
g3626
sg38
S'right'
p5954
sg58
g62
sS'trial_loop.thisN'
p5955
I169
sg33
g3834
sg63
g64
sS'trial_loop.thisIndex'
p5956
g59
(g98
S'\xa9\x00\x00\x00'
tRp5957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5958
I0
sg3641
g3831
sS'block_loop.thisRepN'
p5959
I1
sg3644
g3827
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5960
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p5961
Nsg69
Vn
sS'block_loop.thisTrialN'
p5962
I0
sg39
F0.71714447161139105
sg34
g752
(S'\x07\xdf\t\x1c\x12\t\x1a\x06U\x18'
tRp5963
sa(dp5964
S'trial_loop.thisTrialN'
p5965
I170
sg3632
g4777
sS'block_loop.thisIndex'
p5966
g3626
sg38
S'left'
p5967
sg58
g62
sS'trial_loop.thisN'
p5968
I170
sg33
g4022
sg63
g64
sS'trial_loop.thisIndex'
p5969
g59
(g98
S'\xaa\x00\x00\x00'
tRp5970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5971
I0
sg3641
g4784
sS'block_loop.thisRepN'
p5972
I1
sg3644
g4022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5973
I1
sg3646
g4029
sg55
g11
sS'block_loop.thisTrial'
p5974
Nsg69
Vn
sS'block_loop.thisTrialN'
p5975
I0
sg39
F0.85016997532147798
sg34
g752
(S'\x07\xdf\t\x1c\x12\t \x02a`'
tRp5976
sa(dp5977
S'trial_loop.thisTrialN'
p5978
I171
sg3632
g4362
sS'block_loop.thisIndex'
p5979
g3626
sg38
S'right'
p5980
sg58
g62
sS'trial_loop.thisN'
p5981
I171
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5982
g59
(g98
S'\xab\x00\x00\x00'
tRp5983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5984
I0
sg3641
g4369
sS'block_loop.thisRepN'
p5985
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5986
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5987
Nsg69
Vn
sS'block_loop.thisTrialN'
p5988
I0
sg39
F0.86676466429344146
sg34
g752
(S'\x07\xdf\t\x1c\x12\t&\x00\x90\x88'
tRp5989
sa(dp5990
S'trial_loop.thisTrialN'
p5991
I172
sg3632
g5026
sS'block_loop.thisIndex'
p5992
g3626
sg38
S'left'
p5993
sg58
g62
sS'trial_loop.thisN'
p5994
I172
sg33
g4119
sg63
g64
sS'trial_loop.thisIndex'
p5995
g59
(g98
S'\xac\x00\x00\x00'
tRp5996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5997
I0
sg3641
g5033
sS'block_loop.thisRepN'
p5998
I1
sg3644
g4112
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5999
I1
sg3646
g4119
sg55
g11
sS'block_loop.thisTrial'
p6000
Nsg69
Vn
sS'block_loop.thisTrialN'
p6001
I0
sg39
F1.000124872844026
sg34
g752
(S'\x07\xdf\t\x1c\x12\t+\x0e~\xf0'
tRp6002
sa(dp6003
S'trial_loop.thisTrialN'
p6004
I173
sg3632
g3840
sS'block_loop.thisIndex'
p6005
g3626
sg38
S'left'
p6006
sg58
g62
sS'trial_loop.thisN'
p6007
I173
sg33
g3765
sg63
g64
sS'trial_loop.thisIndex'
p6008
g59
(g98
S'\xad\x00\x00\x00'
tRp6009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6010
I0
sg3641
g3847
sS'block_loop.thisRepN'
p6011
I1
sg3644
g3765
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6012
I1
sg3646
g3759
sg55
g11
sS'block_loop.thisTrial'
p6013
Nsg69
Vn
sS'block_loop.thisTrialN'
p6014
I0
sg39
F1.8167530893188086
sg34
g752
(S'\x07\xdf\t\x1c\x12\t1\x0e\xd0\xf8'
tRp6015
sa(dp6016
S'trial_loop.thisTrialN'
p6017
I174
sg3632
g4457
sS'block_loop.thisIndex'
p6018
g3626
sg38
S'right'
p6019
sg58
g62
sS'trial_loop.thisN'
p6020
I174
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p6021
g59
(g98
S'\xae\x00\x00\x00'
tRp6022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6023
I0
sg3641
g4464
sS'block_loop.thisRepN'
p6024
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6025
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6026
Nsg69
Vn
sS'block_loop.thisTrialN'
p6027
I0
sg39
F1.0332743370890967
sg34
g752
(S'\x07\xdf\t\x1c\x12\t8\x0c\xbd\xb8'
tRp6028
sa(dp6029
S'trial_loop.thisTrialN'
p6030
I175
sg3632
g3772
sS'block_loop.thisIndex'
p6031
g3626
sg38
S'left'
p6032
sg58
g62
sS'trial_loop.thisN'
p6033
I175
sg33
g3783
sg63
g64
sS'trial_loop.thisIndex'
p6034
g59
(g98
S'\xaf\x00\x00\x00'
tRp6035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6036
I0
sg3641
g3780
sS'block_loop.thisRepN'
p6037
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6038
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p6039
Nsg69
Vn
sS'block_loop.thisTrialN'
p6040
I0
sg39
F0.70013268452385091
sg34
g752
(S'\x07\xdf\t\x1c\x12\n\x02\r\x8c\xc0'
tRp6041
sa(dp6042
S'trial_loop.thisTrialN'
p6043
I176
sg3632
g3721
sS'block_loop.thisIndex'
p6044
g3626
sg38
S'right'
p6045
sg58
g62
sS'trial_loop.thisN'
p6046
I176
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p6047
g59
(g98
S'\xb0\x00\x00\x00'
tRp6048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6049
I0
sg3641
g3729
sS'block_loop.thisRepN'
p6050
I1
sg3644
g3731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6051
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p6052
Nsg69
Vn
sS'block_loop.thisTrialN'
p6053
I0
sg39
F0.75021496375848074
sg34
g752
(S'\x07\xdf\t\x1c\x12\n\x08\t\x99\x08'
tRp6054
sa(dp6055
S'trial_loop.thisTrialN'
p6056
I177
sg3632
g5026
sS'block_loop.thisIndex'
p6057
g3626
sg38
S'left'
p6058
sg58
g62
sS'trial_loop.thisN'
p6059
I177
sg33
g4112
sg63
g64
sS'trial_loop.thisIndex'
p6060
g59
(g98
S'\xb1\x00\x00\x00'
tRp6061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6062
I0
sg3641
g5033
sS'block_loop.thisRepN'
p6063
I1
sg3644
g4112
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6064
I1
sg3646
g4119
sg55
g11
sS'block_loop.thisTrial'
p6065
Nsg69
Vn
sS'block_loop.thisTrialN'
p6066
I0
sg39
F1.1001867960912932
sg34
g752
(S'\x07\xdf\t\x1c\x12\n\x0e\x06\\\xe8'
tRp6067
sa(dp6068
S'trial_loop.thisTrialN'
p6069
I178
sg3632
g3738
sS'block_loop.thisIndex'
p6070
g3626
sg38
S'right'
p6071
sg58
g62
sS'trial_loop.thisN'
p6072
I178
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p6073
g59
(g98
S'\xb2\x00\x00\x00'
tRp6074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6075
I0
sg3641
g3746
sS'block_loop.thisRepN'
p6076
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6077
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p6078
Nsg69
Vn
sS'block_loop.thisTrialN'
p6079
I0
sg39
F0.83357756713667186
sg34
g752
(S'\x07\xdf\t\x1c\x12\n\x14\x08X\xb8'
tRp6080
sa(dp6081
S'trial_loop.thisTrialN'
p6082
I179
sg3632
g5171
sS'block_loop.thisIndex'
p6083
g3626
sg38
S'left'
p6084
sg58
g62
sS'trial_loop.thisN'
p6085
I179
sg33
g4101
sg63
g64
sS'trial_loop.thisIndex'
p6086
g59
(g98
S'\xb3\x00\x00\x00'
tRp6087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6088
I0
sg3641
g5178
sS'block_loop.thisRepN'
p6089
I1
sg3644
g4101
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6090
I1
sg3646
g4095
sg55
g11
sS'block_loop.thisTrial'
p6091
Nsg69
Vn
sS'block_loop.thisTrialN'
p6092
I0
sg39
F0.78348787536015152
sg34
g752
(S'\x07\xdf\t\x1c\x12\n\x1a\x06MH'
tRp6093
sa(dp6094
S'trial_loop.thisTrialN'
p6095
I180
sg3632
g4487
sS'block_loop.thisIndex'
p6096
g3626
sg38
S'right'
p6097
sg58
g62
sS'trial_loop.thisN'
p6098
I180
sg33
g4273
sg63
g64
sS'trial_loop.thisIndex'
p6099
g59
(g98
S'\xb4\x00\x00\x00'
tRp6100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6101
I0
sg3641
g4494
sS'block_loop.thisRepN'
p6102
I1
sg3644
g4273
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6103
I1
sg3646
g4267
sg55
g11
sS'block_loop.thisTrial'
p6104
Nsg69
Vn
sS'block_loop.thisTrialN'
p6105
I0
sg39
F0.88388706932892092
sg34
g752
(S'\x07\xdf\t\x1c\x12\n \x03\x8a@'
tRp6106
sa(dp6107
S'trial_loop.thisTrialN'
p6108
I181
sg3632
g3704
sS'block_loop.thisIndex'
p6109
g3626
sg38
S'left'
p6110
sg58
g62
sS'trial_loop.thisN'
p6111
I181
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p6112
g59
(g98
S'\xb5\x00\x00\x00'
tRp6113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6114
I0
sg3641
g3712
sS'block_loop.thisRepN'
p6115
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6116
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6117
Nsg69
Vn
sS'block_loop.thisTrialN'
p6118
I0
sg39
F0.99985802128503565
sg34
g752
(S'\x07\xdf\t\x1c\x12\n&\x022\x80'
tRp6119
sa(dp6120
S'trial_loop.thisTrialN'
p6121
I182
sg3632
g5026
sS'block_loop.thisIndex'
p6122
g3626
sg38
S'left'
p6123
sg58
g62
sS'trial_loop.thisN'
p6124
I182
sg33
g4119
sg63
g64
sS'trial_loop.thisIndex'
p6125
g59
(g98
S'\xb6\x00\x00\x00'
tRp6126
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6127
I0
sg3641
g5033
sS'block_loop.thisRepN'
p6128
I1
sg3644
g4112
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6129
I1
sg3646
g4119
sg55
g11
sS'block_loop.thisTrial'
p6130
Nsg69
Vn
sS'block_loop.thisTrialN'
p6131
I0
sg39
F0.8167607869618223
sg34
g752
(S'\x07\xdf\t\x1c\x12\n,\x02\xc3\x08'
tRp6132
sa(dp6133
S'trial_loop.thisTrialN'
p6134
I183
sg3632
g4457
sS'block_loop.thisIndex'
p6135
g3626
sg38
S'right'
p6136
sg58
g62
sS'trial_loop.thisN'
p6137
I183
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p6138
g59
(g98
S'\xb7\x00\x00\x00'
tRp6139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6140
I0
sg3641
g4464
sS'block_loop.thisRepN'
p6141
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6142
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6143
Nsg69
Vn
sS'block_loop.thisTrialN'
p6144
I0
sg39
F0.8832666964699456
sg34
g752
(S'\x07\xdf\t\x1c\x12\n2\x00y\x18'
tRp6145
sa(dp6146
S'trial_loop.thisTrialN'
p6147
I184
sg3632
g4190
sS'block_loop.thisIndex'
p6148
g3626
sg38
S'left'
p6149
sg58
g62
sS'trial_loop.thisN'
p6150
I184
sg33
g3917
sg63
g64
sS'trial_loop.thisIndex'
p6151
g59
(g98
S'\xb8\x00\x00\x00'
tRp6152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6153
I0
sg3641
g4197
sS'block_loop.thisRepN'
p6154
I1
sg3644
g3917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6155
I1
sg3646
g3924
sg55
g11
sS'block_loop.thisTrial'
p6156
Nsg69
Vn
sS'block_loop.thisTrialN'
p6157
I0
sg39
F0.76684557505359408
sg34
g752
(S'\x07\xdf\t\x1c\x12\n7\x0eg\x80'
tRp6158
sa(dp6159
S'trial_loop.thisTrialN'
p6160
I185
sg3632
g4263
sS'block_loop.thisIndex'
p6161
g3626
sg38
S'left'
p6162
sg58
g62
sS'trial_loop.thisN'
p6163
I185
sg33
g4267
sg63
g64
sS'trial_loop.thisIndex'
p6164
g59
(g98
S'\xb9\x00\x00\x00'
tRp6165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6166
I0
sg3641
g4271
sS'block_loop.thisRepN'
p6167
I1
sg3644
g4273
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6168
I1
sg3646
g4267
sg55
g11
sS'block_loop.thisTrial'
p6169
Nsg69
Vn
sS'block_loop.thisTrialN'
p6170
I0
sg39
F0.66685036469789338
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0b\x01\x0be\xf8'
tRp6171
sa(dp6172
S'trial_loop.thisTrialN'
p6173
I186
sg3632
g3806
sS'block_loop.thisIndex'
p6174
g3626
sg38
S'right'
p6175
sg58
g62
sS'trial_loop.thisN'
p6176
I186
sg33
g3810
sg63
g64
sS'trial_loop.thisIndex'
p6177
g59
(g98
S'\xba\x00\x00\x00'
tRp6178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6179
I0
sg3641
g3814
sS'block_loop.thisRepN'
p6180
I1
sg3644
g3810
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6181
I1
sg3646
g3817
sg55
g11
sS'block_loop.thisTrial'
p6182
Nsg69
Vn
sS'block_loop.thisTrialN'
p6183
I0
sg39
F0.88389818814539467
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0b\x07\x06\xba\xa8'
tRp6184
sa(dp6185
S'trial_loop.thisTrialN'
p6186
I187
sg3632
g4457
sS'block_loop.thisIndex'
p6187
g3626
sg38
S'right'
p6188
sg58
g62
sS'trial_loop.thisN'
p6189
I187
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p6190
g59
(g98
S'\xbb\x00\x00\x00'
tRp6191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6192
I0
sg3641
g4464
sS'block_loop.thisRepN'
p6193
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6194
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6195
Nsg69
Vn
sS'block_loop.thisTrialN'
p6196
I0
sg39
F0.81658915807201993
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0b\r\x05b\xe8'
tRp6197
sa(dp6198
S'trial_loop.thisTrialN'
p6199
I188
sg3632
g3653
sS'block_loop.thisIndex'
p6200
g3626
sg38
S'right'
p6201
sg58
g62
sS'trial_loop.thisN'
p6202
I188
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p6203
g59
(g98
S'\xbc\x00\x00\x00'
tRp6204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6205
I0
sg3641
g3661
sS'block_loop.thisRepN'
p6206
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6207
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p6208
Nsg69
Vn
sS'block_loop.thisTrialN'
p6209
I0
sg39
F0.63342321517484379
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0b\x13\x03\x18\xf8'
tRp6210
sa(dp6211
S'trial_loop.thisTrialN'
p6212
I189
sg3632
g4457
sS'block_loop.thisIndex'
p6213
g3626
sg38
S'right'
p6214
sg58
g62
sS'trial_loop.thisN'
p6215
I189
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p6216
g59
(g98
S'\xbd\x00\x00\x00'
tRp6217
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6218
I0
sg3641
g4464
sS'block_loop.thisRepN'
p6219
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6220
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6221
Nsg69
Vn
sS'block_loop.thisTrialN'
p6222
I0
sg39
F0.7499184620246524
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0b\x18\ruP'
tRp6223
sa(dp6224
S'trial_loop.thisTrialN'
p6225
I190
sg3632
g4319
sS'block_loop.thisIndex'
p6226
g3626
sg38
S'left'
p6227
sg58
g62
sS'trial_loop.thisN'
p6228
I190
sg33
g4058
sg63
g64
sS'trial_loop.thisIndex'
p6229
g59
(g98
S'\xbe\x00\x00\x00'
tRp6230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6231
I0
sg3641
g4326
sS'block_loop.thisRepN'
p6232
I1
sg3644
g4058
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6233
I1
sg3646
g4052
sg55
g11
sS'block_loop.thisTrial'
p6234
Nsg69
Vn
sS'block_loop.thisTrialN'
p6235
I0
sg39
F1.0667351281554147
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0b\x1e\t\xfa\xb0'
tRp6236
sa(dp6237
S'trial_loop.thisTrialN'
p6238
I191
sg3632
g5171
sS'block_loop.thisIndex'
p6239
g3626
sg38
S'left'
p6240
sg58
g62
sS'trial_loop.thisN'
p6241
I191
sg33
g4101
sg63
g64
sS'trial_loop.thisIndex'
p6242
g59
(g98
S'\xbf\x00\x00\x00'
tRp6243
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6244
I0
sg3641
g5178
sS'block_loop.thisRepN'
p6245
I1
sg3644
g4101
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6246
I1
sg3646
g4095
sg55
g11
sS'block_loop.thisTrial'
p6247
Nsg69
Vn
sS'block_loop.thisTrialN'
p6248
I0
sg39
F0.93343393485338311
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0b$\x0b\x81P'
tRp6249
sa(dp6250
S'trial_loop.thisTrialN'
p6251
I192
sg3632
g3772
sS'block_loop.thisIndex'
p6252
g3626
sg38
S'left'
p6253
sg58
g62
sS'trial_loop.thisN'
p6254
I192
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p6255
g59
(g98
S'\xc0\x00\x00\x00'
tRp6256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6257
I0
sg3641
g3780
sS'block_loop.thisRepN'
p6258
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6259
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p6260
Nsg69
Vn
sS'block_loop.thisTrialN'
p6261
I0
sg39
F0.7668860589437827
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0b*\x0b\x1b\xc0'
tRp6262
sa(dp6263
S'trial_loop.thisTrialN'
p6264
I193
sg3632
g3687
sS'block_loop.thisIndex'
p6265
g3626
sg38
S'left'
p6266
sg58
g62
sS'trial_loop.thisN'
p6267
I193
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p6268
g59
(g98
S'\xc1\x00\x00\x00'
tRp6269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6270
I0
sg3641
g3695
sS'block_loop.thisRepN'
p6271
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6272
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p6273
Nsg69
Vn
sS'block_loop.thisTrialN'
p6274
I0
sg39
F0.96676614680109196
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0b0\x08\x1e '
tRp6275
sa(dp6276
S'trial_loop.thisTrialN'
p6277
I194
sg3632
g5026
sS'block_loop.thisIndex'
p6278
g3626
sg38
S'left'
p6279
sg58
g62
sS'trial_loop.thisN'
p6280
I194
sg33
g4112
sg63
g64
sS'trial_loop.thisIndex'
p6281
g59
(g98
S'\xc2\x00\x00\x00'
tRp6282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6283
I0
sg3641
g5033
sS'block_loop.thisRepN'
p6284
I1
sg3644
g4112
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6285
I1
sg3646
g4119
sg55
g11
sS'block_loop.thisTrial'
p6286
Nsg69
Vn
sS'block_loop.thisTrialN'
p6287
I0
sg39
F0.90021433654328575
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0b6\x07\xf7\x10'
tRp6288
sa(dp6289
S'trial_loop.thisTrialN'
p6290
I195
sg3632
g4233
sS'block_loop.thisIndex'
p6291
g3626
sg38
S'right'
p6292
sg58
g62
sS'trial_loop.thisN'
p6293
I195
sg33
g3975
sg63
g64
sS'trial_loop.thisIndex'
p6294
g59
(g98
S'\xc3\x00\x00\x00'
tRp6295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6296
I0
sg3641
g4240
sS'block_loop.thisRepN'
p6297
I1
sg3644
g3975
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6298
I1
sg3646
g3982
sg55
g11
sS'block_loop.thisTrial'
p6299
Nsg69
Vn
sS'block_loop.thisTrialN'
p6300
I0
sg39
F0.6501912436215207
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0c\x00\x07\x1cP'
tRp6301
sa(dp6302
S'trial_loop.thisTrialN'
p6303
I196
sg3632
g4091
sS'block_loop.thisIndex'
p6304
g3626
sg38
S'right'
p6305
sg58
g62
sS'trial_loop.thisN'
p6306
I196
sg33
g4101
sg63
g64
sS'trial_loop.thisIndex'
p6307
g59
(g98
S'\xc4\x00\x00\x00'
tRp6308
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6309
I0
sg3641
g4099
sS'block_loop.thisRepN'
p6310
I1
sg3644
g4101
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6311
I1
sg3646
g4095
sg55
g11
sS'block_loop.thisTrial'
p6312
Nsg69
Vn
sS'block_loop.thisTrialN'
p6313
I0
sg39
F0.70017402371013304
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0c\x06\x022\x80'
tRp6314
sa(dp6315
S'trial_loop.thisTrialN'
p6316
I197
sg3632
g3988
sS'block_loop.thisIndex'
p6317
g3626
sg38
S'left'
p6318
sg58
g62
sS'trial_loop.thisN'
p6319
I197
sg33
g3893
sg63
g64
sS'trial_loop.thisIndex'
p6320
g59
(g98
S'\xc5\x00\x00\x00'
tRp6321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6322
I0
sg3641
g3995
sS'block_loop.thisRepN'
p6323
I1
sg3644
g3893
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6324
I1
sg3646
g3887
sg55
g11
sS'block_loop.thisTrial'
p6325
Nsg69
Vn
sS'block_loop.thisTrialN'
p6326
I0
sg39
F0.90009630604617996
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0c\x0b\rB\x88'
tRp6327
sa(dp6328
S'trial_loop.thisTrialN'
p6329
I198
sg3632
g4263
sS'block_loop.thisIndex'
p6330
g3626
sg38
S'left'
p6331
sg58
g62
sS'trial_loop.thisN'
p6332
I198
sg33
g4273
sg63
g64
sS'trial_loop.thisIndex'
p6333
g59
(g98
S'\xc6\x00\x00\x00'
tRp6334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6335
I0
sg3641
g4271
sS'block_loop.thisRepN'
p6336
I1
sg3644
g4273
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6337
I1
sg3646
g4267
sg55
g11
sS'block_loop.thisTrial'
p6338
Nsg69
Vn
sS'block_loop.thisTrialN'
p6339
I0
sg39
F0.85059762205855804
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0c\x11\x0cg\xc8'
tRp6340
sa(dp6341
S'trial_loop.thisTrialN'
p6342
I199
sg3632
g4541
sS'block_loop.thisIndex'
p6343
g3626
sg38
S'left'
p6344
sg58
g62
sS'trial_loop.thisN'
p6345
I199
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p6346
g59
(g98
S'\xc7\x00\x00\x00'
tRp6347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6348
I0
sg3641
g4548
sS'block_loop.thisRepN'
p6349
I1
sg3644
g3731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6350
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p6351
Nsg69
Vn
sS'block_loop.thisTrialN'
p6352
I0
sg39
F0.8668541850092879
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0c\x17\n\x96\xf0'
tRp6353
sa(dp6354
S'block_loop.thisRepN'
p6355
I1
sg55
g11
sg41
F23.633343102686922
sg56
Vr
sS'block_loop.thisIndex'
p6356
g3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6357
I1
sg40
S'space'
p6358
sg63
g64
sS'block_loop.thisTrial'
p6359
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6360
I0
sg69
Vn
sa(dp6361
S'block_loop.thisRepN'
p6362
I2
sg56
Vr
sS'block_loop.thisIndex'
p6363
g59
(g98
S'\x00\x00\x00\x00'
tRp6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6365
I2
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p6366
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6367
I0
sg69
Vn
sa(dp6368
S'trial_loop.thisTrialN'
p6369
I0
sS'img_left'
p6370
S'6-sour_patch_kids.png'
p6371
sS'block_loop.thisIndex'
p6372
g6364
sg38
S'right'
p6373
sg58
g62
sS'trial_loop.thisN'
p6374
I0
sg33
S'38-maltesers.png'
p6375
sg63
g64
sS'trial_loop.thisIndex'
p6376
g59
(g98
S'\x00\x00\x00\x00'
tRp6377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6378
I0
sS'img_right'
p6379
S'38-maltesers.png'
p6380
sS'block_loop.thisRepN'
p6381
I2
sS'img_correct'
p6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6383
I2
sS'img_wrong'
p6384
S'6-sour_patch_kids.png'
p6385
sg55
g11
sS'block_loop.thisTrial'
p6386
Nsg69
Vn
sS'block_loop.thisTrialN'
p6387
I0
sg39
F0.84987062260552193
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0c:\x04\x07@'
tRp6388
sa(dp6389
S'trial_loop.thisTrialN'
p6390
I1
sg6370
S'13-mccoys_steak_crisps.png'
p6391
sS'block_loop.thisIndex'
p6392
g6364
sg38
S'left'
p6393
sg58
g62
sS'trial_loop.thisN'
p6394
I1
sg33
S'13-mccoys_steak_crisps.png'
p6395
sg63
g64
sS'trial_loop.thisIndex'
p6396
g59
(g98
S'\x01\x00\x00\x00'
tRp6397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6398
I0
sg6379
S'3-ellas_strawberries_apples.png'
p6399
sS'block_loop.thisRepN'
p6400
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6401
I2
sg6384
S'3-ellas_strawberries_apples.png'
p6402
sg55
g11
sS'block_loop.thisTrial'
p6403
Nsg69
Vn
sS'block_loop.thisTrialN'
p6404
I0
sg39
F0.916798761991231
sg34
g752
(S'\x07\xdf\t\x1c\x12\r\x04\x026h'
tRp6405
sa(dp6406
S'trial_loop.thisTrialN'
p6407
I2
sg6370
S'2-steamed_puddings.png'
p6408
sS'block_loop.thisIndex'
p6409
g6364
sg38
S'left'
p6410
sg58
g62
sS'trial_loop.thisN'
p6411
I2
sg33
S'2-steamed_puddings.png'
p6412
sg63
g64
sS'trial_loop.thisIndex'
p6413
g59
(g98
S'\x02\x00\x00\x00'
tRp6414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6415
I0
sg6379
S'20-fruit_pastilles.png'
p6416
sS'block_loop.thisRepN'
p6417
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6418
I2
sg6384
S'20-fruit_pastilles.png'
p6419
sg55
g11
sS'block_loop.thisTrial'
p6420
Nsg69
Vn
sS'block_loop.thisTrialN'
p6421
I0
sg39
F0.71675103661618778
sg34
g752
(S'\x07\xdf\t\x1c\x12\r\n\x01W\xc0'
tRp6422
sa(dp6423
S'trial_loop.thisTrialN'
p6424
I3
sg6370
S'45-chewy_nougat_redo.png'
p6425
sS'block_loop.thisIndex'
p6426
g6364
sg38
S'right'
p6427
sg58
g62
sS'trial_loop.thisN'
p6428
I3
sg33
S'41-peanuts_redo.png'
p6429
sg63
g64
sS'trial_loop.thisIndex'
p6430
g59
(g98
S'\x03\x00\x00\x00'
tRp6431
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6432
I0
sg6379
S'41-peanuts_redo.png'
p6433
sS'block_loop.thisRepN'
p6434
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6435
I2
sg6384
S'45-chewy_nougat_redo.png'
p6436
sg55
g11
sS'block_loop.thisTrial'
p6437
Nsg69
Vn
sS'block_loop.thisTrialN'
p6438
I0
sg39
F0.96687020750687225
sg34
g752
(S'\x07\xdf\t\x1c\x12\r\x0f\x0c\xe4\xc8'
tRp6439
sa(dp6440
S'trial_loop.thisTrialN'
p6441
I4
sg6370
S'33-ambrosia_rice.png'
p6442
sS'block_loop.thisIndex'
p6443
g6364
sg38
S'left'
p6444
sg58
g62
sS'trial_loop.thisN'
p6445
I4
sg33
S'23-crunchie_redo.png'
p6446
sg63
g64
sS'trial_loop.thisIndex'
p6447
g59
(g98
S'\x04\x00\x00\x00'
tRp6448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6449
I0
sg6379
S'23-crunchie_redo.png'
p6450
sS'block_loop.thisRepN'
p6451
I2
sg6382
S'33-ambrosia_rice.png'
p6452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6453
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p6454
Nsg69
Vn
sS'block_loop.thisTrialN'
p6455
I0
sg39
F1.0668542990460992
sg34
g752
(S'\x07\xdf\t\x1c\x12\r\x15\x0c\xbd\xb8'
tRp6456
sa(dp6457
S'trial_loop.thisTrialN'
p6458
I5
sg6370
S'38-maltesers.png'
p6459
sS'block_loop.thisIndex'
p6460
g6364
sg38
S'left'
p6461
sg58
g62
sS'trial_loop.thisN'
p6462
I5
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p6463
g59
(g98
S'\x05\x00\x00\x00'
tRp6464
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6465
I0
sg6379
S'6-sour_patch_kids.png'
p6466
sS'block_loop.thisRepN'
p6467
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6468
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6469
Nsg69
Vn
sS'block_loop.thisTrialN'
p6470
I0
sg39
F0.79994771305791801
sg34
g752
(S'\x07\xdf\t\x1c\x12\r\x1b\x0e\x82\xd8'
tRp6471
sa(dp6472
S'trial_loop.thisTrialN'
p6473
I6
sg6370
S'10-bounty_redo.png'
p6474
sS'block_loop.thisIndex'
p6475
g6364
sg38
S'right'
p6476
sg58
g62
sS'trial_loop.thisN'
p6477
I6
sg33
S'4-corn.png'
p6478
sg63
g64
sS'trial_loop.thisIndex'
p6479
g59
(g98
S'\x06\x00\x00\x00'
tRp6480
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6481
I0
sg6379
S'4-corn.png'
p6482
sS'block_loop.thisRepN'
p6483
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6484
I2
sg6384
S'10-bounty_redo.png'
p6485
sg55
g11
sS'block_loop.thisTrial'
p6486
Nsg69
Vn
sS'block_loop.thisTrialN'
p6487
I0
sg39
F0.91682271020908956
sg34
g752
(S'\x07\xdf\t\x1c\x12\r!\x0b\xbb\xe8'
tRp6488
sa(dp6489
S'trial_loop.thisTrialN'
p6490
I7
sg6370
g6442
sS'block_loop.thisIndex'
p6491
g6364
sg38
S'left'
p6492
sg58
g62
sS'trial_loop.thisN'
p6493
I7
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p6494
g59
(g98
S'\x07\x00\x00\x00'
tRp6495
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6496
I0
sg6379
g6450
sS'block_loop.thisRepN'
p6497
I2
sg6382
g6452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6498
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p6499
Nsg69
Vn
sS'block_loop.thisTrialN'
p6500
I0
sg39
F1.1167854764316871
sg34
g752
(S"\x07\xdf\t\x1c\x12\r'\x0b\x1f\xa8"
tRp6501
sa(dp6502
S'trial_loop.thisTrialN'
p6503
I8
sg6370
S'19-caramello_redo.png'
p6504
sS'block_loop.thisIndex'
p6505
g6364
sg38
S'right'
p6506
sg58
g62
sS'trial_loop.thisN'
p6507
I8
sg33
S'30-spaghetti_hoops.png'
p6508
sg63
g64
sS'trial_loop.thisIndex'
p6509
g59
(g98
S'\x08\x00\x00\x00'
tRp6510
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6511
I0
sg6379
S'30-spaghetti_hoops.png'
p6512
sS'block_loop.thisRepN'
p6513
I2
sg6382
g6508
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6514
I2
sg6384
S'19-caramello_redo.png'
p6515
sg55
g11
sS'block_loop.thisTrial'
p6516
Nsg69
Vn
sS'block_loop.thisTrialN'
p6517
I0
sg39
F0.86678005957219284
sg34
g752
(S'\x07\xdf\t\x1c\x12\r-\rY\xf8'
tRp6518
sa(dp6519
S'trial_loop.thisTrialN'
p6520
I9
sg6370
S'40-sardines.png'
p6521
sS'block_loop.thisIndex'
p6522
g6364
sg38
S'right'
p6523
sg58
g62
sS'trial_loop.thisN'
p6524
I9
sg33
S'5-pineapple.png'
p6525
sg63
g64
sS'trial_loop.thisIndex'
p6526
g59
(g98
S'\t\x00\x00\x00'
tRp6527
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6528
I0
sg6379
S'5-pineapple.png'
p6529
sS'block_loop.thisRepN'
p6530
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6531
I2
sg6384
S'40-sardines.png'
p6532
sg55
g11
sS'block_loop.thisTrial'
p6533
Nsg69
Vn
sS'block_loop.thisTrialN'
p6534
I0
sg39
F0.76671813632492558
sg34
g752
(S'\x07\xdf\t\x1c\x12\r3\x0b\xc7\xa0'
tRp6535
sa(dp6536
S'trial_loop.thisTrialN'
p6537
I10
sg6370
g6474
sS'block_loop.thisIndex'
p6538
g6364
sg38
S'right'
p6539
sg58
g62
sS'trial_loop.thisN'
p6540
I10
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p6541
g59
(g98
S'\n\x00\x00\x00'
tRp6542
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6543
I0
sg6379
g6482
sS'block_loop.thisRepN'
p6544
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6545
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p6546
Nsg69
Vn
sS'block_loop.thisTrialN'
p6547
I0
sg39
F0.7168727733878768
sg34
g752
(S'\x07\xdf\t\x1c\x12\r9\x08\xc6\x18'
tRp6548
sa(dp6549
S'trial_loop.thisTrialN'
p6550
I11
sg6370
S'43-mrporky_pork_crackles_redo.png'
p6551
sS'block_loop.thisIndex'
p6552
g6364
sg38
S'right'
p6553
sg58
g62
sS'trial_loop.thisN'
p6554
I11
sg33
S'18-mms.png'
p6555
sg63
g64
sS'trial_loop.thisIndex'
p6556
g59
(g98
S'\x0b\x00\x00\x00'
tRp6557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6558
I0
sg6379
S'18-mms.png'
p6559
sS'block_loop.thisRepN'
p6560
I2
sg6382
g6555
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6561
I2
sg6384
S'43-mrporky_pork_crackles_redo.png'
p6562
sg55
g11
sS'block_loop.thisTrial'
p6563
Nsg69
Vn
sS'block_loop.thisTrialN'
p6564
I0
sg39
F0.86727555959078018
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0e\x03\x05\x0c\xf8'
tRp6565
sa(dp6566
S'trial_loop.thisTrialN'
p6567
I12
sg6370
g6425
sS'block_loop.thisIndex'
p6568
g6364
sg38
S'right'
p6569
sg58
g62
sS'trial_loop.thisN'
p6570
I12
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p6571
g59
(g98
S'\x0c\x00\x00\x00'
tRp6572
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6573
I0
sg6379
g6433
sS'block_loop.thisRepN'
p6574
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6575
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p6576
Nsg69
Vn
sS'block_loop.thisTrialN'
p6577
I0
sg39
F0.78343256638254388
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0e\t\x03z\xa0'
tRp6578
sa(dp6579
S'trial_loop.thisTrialN'
p6580
I13
sg6370
S'7-olives.png'
p6581
sS'block_loop.thisIndex'
p6582
g6364
sg38
S'right'
p6583
sg58
g62
sS'trial_loop.thisN'
p6584
I13
sg33
S'22-daim.png'
p6585
sg63
g64
sS'trial_loop.thisIndex'
p6586
g59
(g98
S'\r\x00\x00\x00'
tRp6587
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6588
I0
sg6379
S'22-daim.png'
p6589
sS'block_loop.thisRepN'
p6590
I2
sg6382
g6585
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6591
I2
sg6384
S'7-olives.png'
p6592
sg55
g11
sS'block_loop.thisTrial'
p6593
Nsg69
Vn
sS'block_loop.thisTrialN'
p6594
I0
sg39
F0.93352374066671473
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0e\x0f\x00\xb7\x98'
tRp6595
sa(dp6596
S'trial_loop.thisTrialN'
p6597
I14
sg6370
g6371
sS'block_loop.thisIndex'
p6598
g6364
sg38
S'right'
p6599
sg58
g62
sS'trial_loop.thisN'
p6600
I14
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p6601
g59
(g98
S'\x0e\x00\x00\x00'
tRp6602
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6603
I0
sg6379
g6380
sS'block_loop.thisRepN'
p6604
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6605
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6606
Nsg69
Vn
sS'block_loop.thisTrialN'
p6607
I0
sg39
F0.71659736888977932
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0e\x15\x00\x17p'
tRp6608
sa(dp6609
S'trial_loop.thisTrialN'
p6610
I15
sg6370
S'22-daim.png'
p6611
sS'block_loop.thisIndex'
p6612
g6364
sg38
S'left'
p6613
sg58
g62
sS'trial_loop.thisN'
p6614
I15
sg33
g6592
sg63
g64
sS'trial_loop.thisIndex'
p6615
g59
(g98
S'\x0f\x00\x00\x00'
tRp6616
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6617
I0
sg6379
S'7-olives.png'
p6618
sS'block_loop.thisRepN'
p6619
I2
sg6382
g6585
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6620
I2
sg6384
g6592
sg55
g11
sS'block_loop.thisTrial'
p6621
Nsg69
Vn
sS'block_loop.thisTrialN'
p6622
I0
sg39
F0.7167915205063764
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0e\x1a\x0b\xa4x'
tRp6623
sa(dp6624
S'trial_loop.thisTrialN'
p6625
I16
sg6370
g6521
sS'block_loop.thisIndex'
p6626
g6364
sg38
S'right'
p6627
sg58
g62
sS'trial_loop.thisN'
p6628
I16
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p6629
g59
(g98
S'\x10\x00\x00\x00'
tRp6630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6631
I0
sg6379
g6529
sS'block_loop.thisRepN'
p6632
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6633
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p6634
Nsg69
Vn
sS'block_loop.thisTrialN'
p6635
I0
sg39
F0.78356770275058807
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0e \x07\xac\xd8'
tRp6636
sa(dp6637
S'trial_loop.thisTrialN'
p6638
I17
sg6370
g6391
sS'block_loop.thisIndex'
p6639
g6364
sg38
S'left'
p6640
sg58
g62
sS'trial_loop.thisN'
p6641
I17
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p6642
g59
(g98
S'\x11\x00\x00\x00'
tRp6643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6644
I0
sg6379
g6399
sS'block_loop.thisRepN'
p6645
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6646
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6647
Nsg69
Vn
sS'block_loop.thisTrialN'
p6648
I0
sg39
F0.86715838438249193
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0e&\x04\xe9\xd0'
tRp6649
sa(dp6650
S'trial_loop.thisTrialN'
p6651
I18
sg6370
g6504
sS'block_loop.thisIndex'
p6652
g6364
sg38
S'right'
p6653
sg58
g62
sS'trial_loop.thisN'
p6654
I18
sg33
g6515
sg63
g64
sS'trial_loop.thisIndex'
p6655
g59
(g98
S'\x12\x00\x00\x00'
tRp6656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6657
I0
sg6379
g6512
sS'block_loop.thisRepN'
p6658
I2
sg6382
g6508
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6659
I2
sg6384
g6515
sg55
g11
sS'block_loop.thisTrial'
p6660
Nsg69
Vn
sS'block_loop.thisTrialN'
p6661
I0
sg39
F1.0168638213144732
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0e,\x03Wx'
tRp6662
sa(dp6663
S'trial_loop.thisTrialN'
p6664
I19
sg6370
S'21-nakd_banana_crunch.png'
p6665
sS'block_loop.thisIndex'
p6666
g6364
sg38
S'right'
p6667
sg58
g62
sS'trial_loop.thisN'
p6668
I19
sg33
S'1-treacle_cookies.png'
p6669
sg63
g64
sS'trial_loop.thisIndex'
p6670
g59
(g98
S'\x13\x00\x00\x00'
tRp6671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6672
I0
sg6379
S'1-treacle_cookies.png'
p6673
sS'block_loop.thisRepN'
p6674
I2
sg6382
g6669
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6675
I2
sg6384
S'21-nakd_banana_crunch.png'
p6676
sg55
g11
sS'block_loop.thisTrial'
p6677
Nsg69
Vn
sS'block_loop.thisTrialN'
p6678
I0
sg39
F0.71677412953795283
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0e2\x04&\x80'
tRp6679
sa(dp6680
S'trial_loop.thisTrialN'
p6681
I20
sg6370
S'26-walkers_smoky_bacon.png'
p6682
sS'block_loop.thisIndex'
p6683
g6364
sg38
S'left'
p6684
sg58
g62
sS'trial_loop.thisN'
p6685
I20
sg33
S'26-walkers_smoky_bacon.png'
p6686
sg63
g64
sS'trial_loop.thisIndex'
p6687
g59
(g98
S'\x14\x00\x00\x00'
tRp6688
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6689
I0
sg6379
S'44-crunch.png'
p6690
sS'block_loop.thisRepN'
p6691
I2
sg6382
g6686
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6692
I2
sg6384
S'44-crunch.png'
p6693
sg55
g11
sS'block_loop.thisTrial'
p6694
Nsg69
Vn
sS'block_loop.thisTrialN'
p6695
I0
sg39
F0.7835180957299599
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0e8\x00m`'
tRp6696
sa(dp6697
S'trial_loop.thisTrialN'
p6698
I21
sg6370
S'34-hula_hoops_bbq_beef_redo.png'
p6699
sS'block_loop.thisIndex'
p6700
g6364
sg38
S'left'
p6701
sg58
g62
sS'trial_loop.thisN'
p6702
I21
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p6703
sg63
g64
sS'trial_loop.thisIndex'
p6704
g59
(g98
S'\x15\x00\x00\x00'
tRp6705
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6706
I0
sg6379
S'36-fig_rolls.png'
p6707
sS'block_loop.thisRepN'
p6708
I2
sg6382
g6703
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6709
I2
sg6384
S'36-fig_rolls.png'
p6710
sg55
g11
sS'block_loop.thisTrial'
p6711
Nsg69
Vn
sS'block_loop.thisTrialN'
p6712
I0
sg39
F1.3001561195669638
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0f\x01\x0c\xec\x98'
tRp6713
sa(dp6714
S'trial_loop.thisTrialN'
p6715
I22
sg6370
g6611
sS'block_loop.thisIndex'
p6716
g6364
sg38
S'left'
p6717
sg58
g62
sS'trial_loop.thisN'
p6718
I22
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p6719
g59
(g98
S'\x16\x00\x00\x00'
tRp6720
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6721
I0
sg6379
g6618
sS'block_loop.thisRepN'
p6722
I2
sg6382
g6585
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6723
I2
sg6384
g6592
sg55
g11
sS'block_loop.thisTrial'
p6724
Nsg69
Vn
sS'block_loop.thisTrialN'
p6725
I0
sg39
F1.0167754409922054
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0f\x08\x02\xc3\x08'
tRp6726
sa(dp6727
S'trial_loop.thisTrialN'
p6728
I23
sg6370
S'27-hartleys_raspberries_jelly.png'
p6729
sS'block_loop.thisIndex'
p6730
g6364
sg38
S'left'
p6731
sg58
g62
sS'trial_loop.thisN'
p6732
I23
sg33
S'27-hartleys_raspberries_jelly.png'
p6733
sg63
g64
sS'trial_loop.thisIndex'
p6734
g59
(g98
S'\x17\x00\x00\x00'
tRp6735
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6736
I0
sg6379
S'51-mars.png'
p6737
sS'block_loop.thisRepN'
p6738
I2
sg6382
g6733
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6739
I2
sg6384
S'51-mars.png'
p6740
sg55
g11
sS'block_loop.thisTrial'
p6741
Nsg69
Vn
sS'block_loop.thisTrialN'
p6742
I0
sg39
F0.73343011454198859
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0f\x0e\x03S\x90'
tRp6743
sa(dp6744
S'trial_loop.thisTrialN'
p6745
I24
sg6370
g6391
sS'block_loop.thisIndex'
p6746
g6364
sg38
S'left'
p6747
sg58
g62
sS'trial_loop.thisN'
p6748
I24
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6749
g59
(g98
S'\x18\x00\x00\x00'
tRp6750
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6751
I0
sg6379
g6399
sS'block_loop.thisRepN'
p6752
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6753
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6754
Nsg69
Vn
sS'block_loop.thisTrialN'
p6755
I0
sg39
F0.93354740378345014
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0f\x13\x0f\x1b0'
tRp6756
sa(dp6757
S'trial_loop.thisTrialN'
p6758
I25
sg6370
g6459
sS'block_loop.thisIndex'
p6759
g6364
sg38
S'left'
p6760
sg58
g62
sS'trial_loop.thisN'
p6761
I25
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p6762
g59
(g98
S'\x19\x00\x00\x00'
tRp6763
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6764
I0
sg6379
g6466
sS'block_loop.thisRepN'
p6765
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6766
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6767
Nsg69
Vn
sS'block_loop.thisTrialN'
p6768
I0
sg39
F0.89969146713337977
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0f\x19\x0e\xb9\x88'
tRp6769
sa(dp6770
S'trial_loop.thisTrialN'
p6771
I26
sg6370
g6581
sS'block_loop.thisIndex'
p6772
g6364
sg38
S'right'
p6773
sg58
g62
sS'trial_loop.thisN'
p6774
I26
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p6775
g59
(g98
S'\x1a\x00\x00\x00'
tRp6776
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6777
I0
sg6379
g6589
sS'block_loop.thisRepN'
p6778
I2
sg6382
g6585
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6779
I2
sg6384
g6592
sg55
g11
sS'block_loop.thisTrial'
p6780
Nsg69
Vn
sS'block_loop.thisTrialN'
p6781
I0
sg39
F0.95015207117830869
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0f\x1f\r\xa0H'
tRp6782
sa(dp6783
S'trial_loop.thisTrialN'
p6784
I27
sg6370
g6371
sS'block_loop.thisIndex'
p6785
g6364
sg38
S'right'
p6786
sg58
g62
sS'trial_loop.thisN'
p6787
I27
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p6788
g59
(g98
S'\x1b\x00\x00\x00'
tRp6789
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6790
I0
sg6379
g6380
sS'block_loop.thisRepN'
p6791
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6792
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6793
Nsg69
Vn
sS'block_loop.thisTrialN'
p6794
I0
sg39
F0.81658830277592642
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0f%\r>\xa0'
tRp6795
sa(dp6796
S'trial_loop.thisTrialN'
p6797
I28
sg6370
S'17-jacobs_mini_cheddars_redo.png'
p6798
sS'block_loop.thisIndex'
p6799
g6364
sg38
S'left'
p6800
sg58
g62
sS'trial_loop.thisN'
p6801
I28
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6802
sg63
g64
sS'trial_loop.thisIndex'
p6803
g59
(g98
S'\x1c\x00\x00\x00'
tRp6804
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6805
I0
sg6379
S'8-liquorice_catherine_wheels.png'
p6806
sS'block_loop.thisRepN'
p6807
I2
sg6382
g6802
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6808
I2
sg6384
S'8-liquorice_catherine_wheels.png'
p6809
sg55
g11
sS'block_loop.thisTrial'
p6810
Nsg69
Vn
sS'block_loop.thisTrialN'
p6811
I0
sg39
F1.1835650798529969
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0f+\n\xf4\xb0'
tRp6812
sa(dp6813
S'trial_loop.thisTrialN'
p6814
I29
sg6370
g6551
sS'block_loop.thisIndex'
p6815
g6364
sg38
S'right'
p6816
sg58
g62
sS'trial_loop.thisN'
p6817
I29
sg33
g6555
sg63
g64
sS'trial_loop.thisIndex'
p6818
g59
(g98
S'\x1d\x00\x00\x00'
tRp6819
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6820
I0
sg6379
g6559
sS'block_loop.thisRepN'
p6821
I2
sg6382
g6555
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6822
I2
sg6384
g6562
sg55
g11
sS'block_loop.thisTrial'
p6823
Nsg69
Vn
sS'block_loop.thisTrialN'
p6824
I0
sg39
F0.80028270299953874
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0f1\x0e_\xb0'
tRp6825
sa(dp6826
S'trial_loop.thisTrialN'
p6827
I30
sg6370
S'8-liquorice_catherine_wheels.png'
p6828
sS'block_loop.thisIndex'
p6829
g6364
sg38
S'right'
p6830
sg58
g62
sS'trial_loop.thisN'
p6831
I30
sg33
g6802
sg63
g64
sS'trial_loop.thisIndex'
p6832
g59
(g98
S'\x1e\x00\x00\x00'
tRp6833
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6834
I0
sg6379
S'17-jacobs_mini_cheddars_redo.png'
p6835
sS'block_loop.thisRepN'
p6836
I2
sg6382
g6802
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6837
I2
sg6384
g6809
sg55
g11
sS'block_loop.thisTrial'
p6838
Nsg69
Vn
sS'block_loop.thisTrialN'
p6839
I0
sg39
F0.83358726045844378
sg34
g752
(S'\x07\xdf\t\x1c\x12\x0f7\x0b\xd7@'
tRp6840
sa(dp6841
S'trial_loop.thisTrialN'
p6842
I31
sg6370
S'51-mars.png'
p6843
sS'block_loop.thisIndex'
p6844
g6364
sg38
S'right'
p6845
sg58
g62
sS'trial_loop.thisN'
p6846
I31
sg33
g6740
sg63
g64
sS'trial_loop.thisIndex'
p6847
g59
(g98
S'\x1f\x00\x00\x00'
tRp6848
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6849
I0
sg6379
S'27-hartleys_raspberries_jelly.png'
p6850
sS'block_loop.thisRepN'
p6851
I2
sg6382
g6733
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6852
I2
sg6384
g6740
sg55
g11
sS'block_loop.thisTrial'
p6853
Nsg69
Vn
sS'block_loop.thisTrialN'
p6854
I0
sg39
F0.75014397440099856
sg34
g752
(S'\x07\xdf\t\x1c\x12\x10\x01\t\xcb\xd0'
tRp6855
sa(dp6856
S'trial_loop.thisTrialN'
p6857
I32
sg6370
S'16-skips_prawn.png'
p6858
sS'block_loop.thisIndex'
p6859
g6364
sg38
S'left'
p6860
sg58
g62
sS'trial_loop.thisN'
p6861
I32
sg33
S'16-skips_prawn.png'
p6862
sg63
g64
sS'trial_loop.thisIndex'
p6863
g59
(g98
S' \x00\x00\x00'
tRp6864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6865
I0
sg6379
S'42-mrkipling_lemon_slices.png'
p6866
sS'block_loop.thisRepN'
p6867
I2
sg6382
g6862
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6868
I2
sg6384
S'42-mrkipling_lemon_slices.png'
p6869
sg55
g11
sS'block_loop.thisTrial'
p6870
Nsg69
Vn
sS'block_loop.thisTrialN'
p6871
I0
sg39
F0.78342572403562372
sg34
g752
(S'\x07\xdf\t\x1c\x12\x10\x07\x06\x8f\xb0'
tRp6872
sa(dp6873
S'trial_loop.thisTrialN'
p6874
I33
sg6370
g6611
sS'block_loop.thisIndex'
p6875
g6364
sg38
S'left'
p6876
sg58
g62
sS'trial_loop.thisN'
p6877
I33
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p6878
g59
(g98
S'!\x00\x00\x00'
tRp6879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6880
I0
sg6379
g6618
sS'block_loop.thisRepN'
p6881
I2
sg6382
g6585
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6882
I2
sg6384
g6592
sg55
g11
sS'block_loop.thisTrial'
p6883
Nsg69
Vn
sS'block_loop.thisTrialN'
p6884
I0
sg39
F0.81675394461126416
sg34
g752
(S'\x07\xdf\t\x1c\x12\x10\r\x03\xc8\xc0'
tRp6885
sa(dp6886
S'trial_loop.thisTrialN'
p6887
I34
sg6370
S'31-hobnobs.png'
p6888
sS'block_loop.thisIndex'
p6889
g6364
sg38
S'right'
p6890
sg58
g62
sS'trial_loop.thisN'
p6891
I34
sg33
S'31-hobnobs.png'
p6892
sg63
g64
sS'trial_loop.thisIndex'
p6893
g59
(g98
S'"\x00\x00\x00'
tRp6894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6895
I0
sg6379
S'25-kitkat.png'
p6896
sS'block_loop.thisRepN'
p6897
I2
sg6382
S'25-kitkat.png'
p6898
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6899
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p6900
Nsg69
Vn
sS'block_loop.thisTrialN'
p6901
I0
sg39
F0.78389984171371907
sg34
g752
(S'\x07\xdf\t\x1c\x12\x10\x13\x01~\xd0'
tRp6902
sa(dp6903
S'trial_loop.thisTrialN'
p6904
I35
sg6370
S'50-polo.png'
p6905
sS'block_loop.thisIndex'
p6906
g6364
sg38
S'left'
p6907
sg58
g62
sS'trial_loop.thisN'
p6908
I35
sg33
S'50-polo.png'
p6909
sg63
g64
sS'trial_loop.thisIndex'
p6910
g59
(g98
S'#\x00\x00\x00'
tRp6911
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6912
I0
sg6379
S'48-twix.png'
p6913
sS'block_loop.thisRepN'
p6914
I2
sg6382
g6909
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6915
I2
sg6384
S'48-twix.png'
p6916
sg55
g11
sS'block_loop.thisTrial'
p6917
Nsg69
Vn
sS'block_loop.thisTrialN'
p6918
I0
sg39
F0.85010924948437605
sg34
g752
(S'\x07\xdf\t\x1c\x12\x10\x18\r\xc3p'
tRp6919
sa(dp6920
S'trial_loop.thisTrialN'
p6921
I36
sg6370
g6843
sS'block_loop.thisIndex'
p6922
g6364
sg38
S'right'
p6923
sg58
g62
sS'trial_loop.thisN'
p6924
I36
sg33
g6733
sg63
g64
sS'trial_loop.thisIndex'
p6925
g59
(g98
S'$\x00\x00\x00'
tRp6926
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6927
I0
sg6379
g6850
sS'block_loop.thisRepN'
p6928
I2
sg6382
g6733
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6929
I2
sg6384
g6740
sg55
g11
sS'block_loop.thisTrial'
p6930
Nsg69
Vn
sS'block_loop.thisTrialN'
p6931
I0
sg39
F1.0168561236714595
sg34
g752
(S'\x07\xdf\t\x1c\x12\x10\x1e\x0c-0'
tRp6932
sa(dp6933
S'trial_loop.thisTrialN'
p6934
I37
sg6370
g6408
sS'block_loop.thisIndex'
p6935
g6364
sg38
S'left'
p6936
sg58
g62
sS'trial_loop.thisN'
p6937
I37
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6938
g59
(g98
S'%\x00\x00\x00'
tRp6939
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6940
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6941
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6942
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6943
Nsg69
Vn
sS'block_loop.thisTrialN'
p6944
I0
sg39
F1.1835257363527489
sg34
g752
(S'\x07\xdf\t\x1c\x12\x10$\x0c\xc1\xa0'
tRp6945
sa(dp6946
S'trial_loop.thisTrialN'
p6947
I38
sg6370
S'30-spaghetti_hoops.png'
p6948
sS'block_loop.thisIndex'
p6949
g6364
sg38
S'left'
p6950
sg58
g62
sS'trial_loop.thisN'
p6951
I38
sg33
g6508
sg63
g64
sS'trial_loop.thisIndex'
p6952
g59
(g98
S'&\x00\x00\x00'
tRp6953
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6954
I0
sg6379
S'19-caramello_redo.png'
p6955
sS'block_loop.thisRepN'
p6956
I2
sg6382
g6508
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6957
I2
sg6384
g6515
sg55
g11
sS'block_loop.thisTrial'
p6958
Nsg69
Vn
sS'block_loop.thisTrialN'
p6959
I0
sg39
F0.73352191604135442
sg34
g752
(S'\x07\xdf\t\x1c\x12\x10+\x00\xea`'
tRp6960
sa(dp6961
S'trial_loop.thisTrialN'
p6962
I39
sg6370
g6798
sS'block_loop.thisIndex'
p6963
g6364
sg38
S'left'
p6964
sg58
g62
sS'trial_loop.thisN'
p6965
I39
sg33
g6802
sg63
g64
sS'trial_loop.thisIndex'
p6966
g59
(g98
S"'\x00\x00\x00"
tRp6967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6968
I0
sg6379
g6806
sS'block_loop.thisRepN'
p6969
I2
sg6382
g6802
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6970
I2
sg6384
g6809
sg55
g11
sS'block_loop.thisTrial'
p6971
Nsg69
Vn
sS'block_loop.thisTrialN'
p6972
I0
sg39
F0.63394437399256276
sg34
g752
(S'\x07\xdf\t\x1c\x12\x100\x0cs\x80'
tRp6973
sa(dp6974
S'trial_loop.thisTrialN'
p6975
I40
sg6370
g6504
sS'block_loop.thisIndex'
p6976
g6364
sg38
S'right'
p6977
sg58
g62
sS'trial_loop.thisN'
p6978
I40
sg33
g6515
sg63
g64
sS'trial_loop.thisIndex'
p6979
g59
(g98
S'(\x00\x00\x00'
tRp6980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6981
I0
sg6379
g6512
sS'block_loop.thisRepN'
p6982
I2
sg6382
g6508
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6983
I2
sg6384
g6515
sg55
g11
sS'block_loop.thisTrial'
p6984
Nsg69
Vn
sS'block_loop.thisTrialN'
p6985
I0
sg39
F0.68387127491223509
sg34
g752
(S'\x07\xdf\t\x1c\x12\x106\x07\x8d\x98'
tRp6986
sa(dp6987
S'trial_loop.thisTrialN'
p6988
I41
sg6370
S'18-mms.png'
p6989
sS'block_loop.thisIndex'
p6990
g6364
sg38
S'left'
p6991
sg58
g62
sS'trial_loop.thisN'
p6992
I41
sg33
g6555
sg63
g64
sS'trial_loop.thisIndex'
p6993
g59
(g98
S')\x00\x00\x00'
tRp6994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6995
I0
sg6379
S'43-mrporky_pork_crackles_redo.png'
p6996
sS'block_loop.thisRepN'
p6997
I2
sg6382
g6555
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6998
I2
sg6384
g6562
sg55
g11
sS'block_loop.thisTrial'
p6999
Nsg69
Vn
sS'block_loop.thisTrialN'
p7000
I0
sg39
F0.90017983970756177
sg34
g752
(S'\x07\xdf\t\x1c\x12\x11\x00\x03\x1c\xe0'
tRp7001
sa(dp7002
S'trial_loop.thisTrialN'
p7003
I42
sg6370
g6581
sS'block_loop.thisIndex'
p7004
g6364
sg38
S'right'
p7005
sg58
g62
sS'trial_loop.thisN'
p7006
I42
sg33
g6592
sg63
g64
sS'trial_loop.thisIndex'
p7007
g59
(g98
S'*\x00\x00\x00'
tRp7008
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7009
I0
sg6379
g6589
sS'block_loop.thisRepN'
p7010
I2
sg6382
g6585
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7011
I2
sg6384
g6592
sg55
g11
sS'block_loop.thisTrial'
p7012
Nsg69
Vn
sS'block_loop.thisTrialN'
p7013
I0
sg39
F0.81679784967855085
sg34
g752
(S'\x07\xdf\t\x1c\x12\x11\x06\x02B '
tRp7014
sa(dp7015
S'trial_loop.thisTrialN'
p7016
I43
sg6370
S'23-crunchie_redo.png'
p7017
sS'block_loop.thisIndex'
p7018
g6364
sg38
S'right'
p7019
sg58
g62
sS'trial_loop.thisN'
p7020
I43
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p7021
g59
(g98
S'+\x00\x00\x00'
tRp7022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7023
I0
sg6379
S'33-ambrosia_rice.png'
p7024
sS'block_loop.thisRepN'
p7025
I2
sg6382
g6452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7026
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p7027
Nsg69
Vn
sS'block_loop.thisTrialN'
p7028
I0
sg39
F0.83344699233202846
sg34
g752
(S'\x07\xdf\t\x1c\x12\x11\x0b\x0f:p'
tRp7029
sa(dp7030
S'trial_loop.thisTrialN'
p7031
I44
sg6370
S'20-fruit_pastilles.png'
p7032
sS'block_loop.thisIndex'
p7033
g6364
sg38
S'right'
p7034
sg58
g62
sS'trial_loop.thisN'
p7035
I44
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7036
g59
(g98
S',\x00\x00\x00'
tRp7037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7038
I0
sg6379
S'2-steamed_puddings.png'
p7039
sS'block_loop.thisRepN'
p7040
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7041
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7042
Nsg69
Vn
sS'block_loop.thisTrialN'
p7043
I0
sg39
F0.78352465297939489
sg34
g752
(S'\x07\xdf\t\x1c\x12\x11\x11\r/\x00'
tRp7044
sa(dp7045
S'trial_loop.thisTrialN'
p7046
I45
sg6370
g6504
sS'block_loop.thisIndex'
p7047
g6364
sg38
S'right'
p7048
sg58
g62
sS'trial_loop.thisN'
p7049
I45
sg33
g6508
sg63
g64
sS'trial_loop.thisIndex'
p7050
g59
(g98
S'-\x00\x00\x00'
tRp7051
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7052
I0
sg6379
g6512
sS'block_loop.thisRepN'
p7053
I2
sg6382
g6508
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7054
I2
sg6384
g6515
sg55
g11
sS'block_loop.thisTrial'
p7055
Nsg69
Vn
sS'block_loop.thisTrialN'
p7056
I0
sg39
F0.98343952276991331
sg34
g752
(S'\x07\xdf\t\x1c\x12\x11\x17\n-x'
tRp7057
sa(dp7058
S'trial_loop.thisTrialN'
p7059
I46
sg6370
g7032
sS'block_loop.thisIndex'
p7060
g6364
sg38
S'right'
p7061
sg58
g62
sS'trial_loop.thisN'
p7062
I46
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7063
g59
(g98
S'.\x00\x00\x00'
tRp7064
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7065
I0
sg6379
g7039
sS'block_loop.thisRepN'
p7066
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7067
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7068
Nsg69
Vn
sS'block_loop.thisTrialN'
p7069
I0
sg39
F0.78353292081737891
sg34
g752
(S'\x07\xdf\t\x1c\x12\x11\x1d\n\x83h'
tRp7070
sa(dp7071
S'trial_loop.thisTrialN'
p7072
I47
sg6370
S'29-beans.png'
p7073
sS'block_loop.thisIndex'
p7074
g6364
sg38
S'left'
p7075
sg58
g62
sS'trial_loop.thisN'
p7076
I47
sg33
S'46-pistachios.png'
p7077
sg63
g64
sS'trial_loop.thisIndex'
p7078
g59
(g98
S'/\x00\x00\x00'
tRp7079
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7080
I0
sg6379
S'46-pistachios.png'
p7081
sS'block_loop.thisRepN'
p7082
I2
sg6382
S'29-beans.png'
p7083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7084
I2
sg6384
g7077
sg55
g11
sS'block_loop.thisTrial'
p7085
Nsg69
Vn
sS'block_loop.thisTrialN'
p7086
I0
sg39
F1.0167740154975036
sg34
g752
(S'\x07\xdf\t\x1c\x12\x11#\x07\xbcx'
tRp7087
sa(dp7088
S'trial_loop.thisTrialN'
p7089
I48
sg6370
S'48-twix.png'
p7090
sS'block_loop.thisIndex'
p7091
g6364
sg38
S'right'
p7092
sg58
g62
sS'trial_loop.thisN'
p7093
I48
sg33
g6909
sg63
g64
sS'trial_loop.thisIndex'
p7094
g59
(g98
S'0\x00\x00\x00'
tRp7095
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7096
I0
sg6379
S'50-polo.png'
p7097
sS'block_loop.thisRepN'
p7098
I2
sg6382
g6909
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7099
I2
sg6384
g6916
sg55
g11
sS'block_loop.thisTrial'
p7100
Nsg69
Vn
sS'block_loop.thisTrialN'
p7101
I0
sg39
F0.70010246415768052
sg34
g752
(S'\x07\xdf\t\x1c\x12\x11)\x08\x8b\x80'
tRp7102
sa(dp7103
S'trial_loop.thisTrialN'
p7104
I49
sg6370
S'5-pineapple.png'
p7105
sS'block_loop.thisIndex'
p7106
g6364
sg38
S'left'
p7107
sg58
g62
sS'trial_loop.thisN'
p7108
I49
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p7109
g59
(g98
S'1\x00\x00\x00'
tRp7110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7111
I0
sg6379
S'40-sardines.png'
p7112
sS'block_loop.thisRepN'
p7113
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7114
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p7115
Nsg69
Vn
sS'block_loop.thisTrialN'
p7116
I0
sg39
F0.766863536216988
sg34
g752
(S'\x07\xdf\t\x1c\x12\x11/\x04YH'
tRp7117
sa(dp7118
S'trial_loop.thisTrialN'
p7119
I50
sg6370
g6551
sS'block_loop.thisIndex'
p7120
g6364
sg38
S'right'
p7121
sg58
g62
sS'trial_loop.thisN'
p7122
I50
sg33
g6555
sg63
g64
sS'trial_loop.thisIndex'
p7123
g59
(g98
S'2\x00\x00\x00'
tRp7124
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7125
I0
sg6379
g6559
sS'block_loop.thisRepN'
p7126
I2
sg6382
g6555
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7127
I2
sg6384
g6562
sg55
g11
sS'block_loop.thisTrial'
p7128
Nsg69
Vn
sS'block_loop.thisTrialN'
p7129
I0
sg39
F0.96675417269216268
sg34
g752
(S'\x07\xdf\t\x1c\x12\x115\x01[\xa8'
tRp7130
sa(dp7131
S'trial_loop.thisTrialN'
p7132
I51
sg6370
S'49-yorkie.png'
p7133
sS'block_loop.thisIndex'
p7134
g6364
sg38
S'left'
p7135
sg58
g62
sS'trial_loop.thisN'
p7136
I51
sg33
S'49-yorkie.png'
p7137
sg63
g64
sS'trial_loop.thisIndex'
p7138
g59
(g98
S'3\x00\x00\x00'
tRp7139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7140
I0
sg6379
S'35-raisins.png'
p7141
sS'block_loop.thisRepN'
p7142
I2
sg6382
g7137
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7143
I2
sg6384
S'35-raisins.png'
p7144
sg55
g11
sS'block_loop.thisTrial'
p7145
Nsg69
Vn
sS'block_loop.thisTrialN'
p7146
I0
sg39
F0.66676854162142263
sg34
g752
(S'\x07\xdf\t\x1c\x12\x11;\x01s\x18'
tRp7147
sa(dp7148
S'trial_loop.thisTrialN'
p7149
I52
sg6370
g6665
sS'block_loop.thisIndex'
p7150
g6364
sg38
S'right'
p7151
sg58
g62
sS'trial_loop.thisN'
p7152
I52
sg33
g6676
sg63
g64
sS'trial_loop.thisIndex'
p7153
g59
(g98
S'4\x00\x00\x00'
tRp7154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7155
I0
sg6379
g6673
sS'block_loop.thisRepN'
p7156
I2
sg6382
g6669
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7157
I2
sg6384
g6676
sg55
g11
sS'block_loop.thisTrial'
p7158
Nsg69
Vn
sS'block_loop.thisTrialN'
p7159
I0
sg39
F0.70026782089553308
sg34
g752
(S'\x07\xdf\t\x1c\x12\x12\x04\x0c\n\x08'
tRp7160
sa(dp7161
S'trial_loop.thisTrialN'
p7162
I53
sg6370
g6888
sS'block_loop.thisIndex'
p7163
g6364
sg38
S'right'
p7164
sg58
g62
sS'trial_loop.thisN'
p7165
I53
sg33
g6898
sg63
g64
sS'trial_loop.thisIndex'
p7166
g59
(g98
S'5\x00\x00\x00'
tRp7167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7168
I0
sg6379
g6896
sS'block_loop.thisRepN'
p7169
I2
sg6382
g6898
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7170
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p7171
Nsg69
Vn
sS'block_loop.thisTrialN'
p7172
I0
sg39
F0.71688873886523652
sg34
g752
(S'\x07\xdf\t\x1c\x12\x12\n\x08\x12h'
tRp7173
sa(dp7174
S'trial_loop.thisTrialN'
p7175
I54
sg6370
g6948
sS'block_loop.thisIndex'
p7176
g6364
sg38
S'left'
p7177
sg58
g62
sS'trial_loop.thisN'
p7178
I54
sg33
g6508
sg63
g64
sS'trial_loop.thisIndex'
p7179
g59
(g98
S'6\x00\x00\x00'
tRp7180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7181
I0
sg6379
g6955
sS'block_loop.thisRepN'
p7182
I2
sg6382
g6508
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7183
I2
sg6384
g6515
sg55
g11
sS'block_loop.thisTrial'
p7184
Nsg69
Vn
sS'block_loop.thisTrialN'
p7185
I0
sg39
F0.93351490263376036
sg34
g752
(S'\x07\xdf\t\x1c\x12\x12\x10\x04\x1e\xb0'
tRp7186
sa(dp7187
S'trial_loop.thisTrialN'
p7188
I55
sg6370
g6682
sS'block_loop.thisIndex'
p7189
g6364
sg38
S'left'
p7190
sg58
g62
sS'trial_loop.thisN'
p7191
I55
sg33
g6686
sg63
g64
sS'trial_loop.thisIndex'
p7192
g59
(g98
S'7\x00\x00\x00'
tRp7193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7194
I0
sg6379
g6690
sS'block_loop.thisRepN'
p7195
I2
sg6382
g6686
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7196
I2
sg6384
g6693
sg55
g11
sS'block_loop.thisTrial'
p7197
Nsg69
Vn
sS'block_loop.thisTrialN'
p7198
I0
sg39
F0.68353799555552541
sg34
g752
(S'\x07\xdf\t\x1c\x12\x12\x16\x03\xbd\x08'
tRp7199
sa(dp7200
S'trial_loop.thisTrialN'
p7201
I56
sg6370
g7090
sS'block_loop.thisIndex'
p7202
g6364
sg38
S'right'
p7203
sg58
g62
sS'trial_loop.thisN'
p7204
I56
sg33
g6916
sg63
g64
sS'trial_loop.thisIndex'
p7205
g59
(g98
S'8\x00\x00\x00'
tRp7206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7207
I0
sg6379
g7097
sS'block_loop.thisRepN'
p7208
I2
sg6382
g6909
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7209
I2
sg6384
g6916
sg55
g11
sS'block_loop.thisTrial'
p7210
Nsg69
Vn
sS'block_loop.thisTrialN'
p7211
I0
sg39
F0.70014323314535432
sg34
g752
(S'\x07\xdf\t\x1c\x12\x12\x1b\x0e\x92x'
tRp7212
sa(dp7213
S'trial_loop.thisTrialN'
p7214
I57
sg6370
g6989
sS'block_loop.thisIndex'
p7215
g6364
sg38
S'left'
p7216
sg58
g62
sS'trial_loop.thisN'
p7217
I57
sg33
g6555
sg63
g64
sS'trial_loop.thisIndex'
p7218
g59
(g98
S'9\x00\x00\x00'
tRp7219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7220
I0
sg6379
g6996
sS'block_loop.thisRepN'
p7221
I2
sg6382
g6555
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7222
I2
sg6384
g6562
sg55
g11
sS'block_loop.thisTrial'
p7223
Nsg69
Vn
sS'block_loop.thisTrialN'
p7224
I0
sg39
F0.66680674473172985
sg34
g752
(S'\x07\xdf\t\x1c\x12\x12!\n\x9a\xd8'
tRp7225
sa(dp7226
S'trial_loop.thisTrialN'
p7227
I58
sg6370
g6408
sS'block_loop.thisIndex'
p7228
g6364
sg38
S'left'
p7229
sg58
g62
sS'trial_loop.thisN'
p7230
I58
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7231
g59
(g98
S':\x00\x00\x00'
tRp7232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7233
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7234
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7235
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7236
Nsg69
Vn
sS'block_loop.thisTrialN'
p7237
I0
sg39
F0.71714931827591499
sg34
g752
(S"\x07\xdf\t\x1c\x12\x12'\x05\xef\x88"
tRp7238
sa(dp7239
S'trial_loop.thisTrialN'
p7240
I59
sg6370
g6843
sS'block_loop.thisIndex'
p7241
g6364
sg38
S'right'
p7242
sg58
g62
sS'trial_loop.thisN'
p7243
I59
sg33
g6733
sg63
g64
sS'trial_loop.thisIndex'
p7244
g59
(g98
S';\x00\x00\x00'
tRp7245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7246
I0
sg6379
g6850
sS'block_loop.thisRepN'
p7247
I2
sg6382
g6733
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7248
I2
sg6384
g6740
sg55
g11
sS'block_loop.thisTrial'
p7249
Nsg69
Vn
sS'block_loop.thisTrialN'
p7250
I0
sg39
F0.85012008320336463
sg34
g752
(S'\x07\xdf\t\x1c\x12\x12-\x02:P'
tRp7251
sa(dp7252
S'trial_loop.thisTrialN'
p7253
I60
sg6370
S'36-fig_rolls.png'
p7254
sS'block_loop.thisIndex'
p7255
g6364
sg38
S'right'
p7256
sg58
g62
sS'trial_loop.thisN'
p7257
I60
sg33
g6710
sg63
g64
sS'trial_loop.thisIndex'
p7258
g59
(g98
S'<\x00\x00\x00'
tRp7259
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7260
I0
sg6379
S'34-hula_hoops_bbq_beef_redo.png'
p7261
sS'block_loop.thisRepN'
p7262
I2
sg6382
g6703
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7263
I2
sg6384
g6710
sg55
g11
sS'block_loop.thisTrial'
p7264
Nsg69
Vn
sS'block_loop.thisTrialN'
p7265
I0
sg39
F0.83348462524736533
sg34
g752
(S'\x07\xdf\t\x1c\x12\x123\x00ix'
tRp7266
sa(dp7267
S'trial_loop.thisTrialN'
p7268
I61
sg6370
g6948
sS'block_loop.thisIndex'
p7269
g6364
sg38
S'left'
p7270
sg58
g62
sS'trial_loop.thisN'
p7271
I61
sg33
g6515
sg63
g64
sS'trial_loop.thisIndex'
p7272
g59
(g98
S'=\x00\x00\x00'
tRp7273
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7274
I0
sg6379
g6955
sS'block_loop.thisRepN'
p7275
I2
sg6382
g6508
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7276
I2
sg6384
g6515
sg55
g11
sS'block_loop.thisTrial'
p7277
Nsg69
Vn
sS'block_loop.thisTrialN'
p7278
I0
sg39
F0.76686610209435457
sg34
g752
(S'\x07\xdf\t\x1c\x12\x128\r\xa0H'
tRp7279
sa(dp7280
S'trial_loop.thisTrialN'
p7281
I62
sg6370
g6905
sS'block_loop.thisIndex'
p7282
g6364
sg38
S'left'
p7283
sg58
g62
sS'trial_loop.thisN'
p7284
I62
sg33
g6909
sg63
g64
sS'trial_loop.thisIndex'
p7285
g59
(g98
S'>\x00\x00\x00'
tRp7286
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7287
I0
sg6379
g6913
sS'block_loop.thisRepN'
p7288
I2
sg6382
g6909
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7289
I2
sg6384
g6916
sg55
g11
sS'block_loop.thisTrial'
p7290
Nsg69
Vn
sS'block_loop.thisTrialN'
p7291
I0
sg39
F0.76678000255196821
sg34
g752
(S'\x07\xdf\t\x1c\x12\x13\x02\n\x9e\xc0'
tRp7292
sa(dp7293
S'trial_loop.thisTrialN'
p7294
I63
sg6370
g6729
sS'block_loop.thisIndex'
p7295
g6364
sg38
S'left'
p7296
sg58
g62
sS'trial_loop.thisN'
p7297
I63
sg33
g6733
sg63
g64
sS'trial_loop.thisIndex'
p7298
g59
(g98
S'?\x00\x00\x00'
tRp7299
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7300
I0
sg6379
g6737
sS'block_loop.thisRepN'
p7301
I2
sg6382
g6733
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7302
I2
sg6384
g6740
sg55
g11
sS'block_loop.thisTrial'
p7303
Nsg69
Vn
sS'block_loop.thisTrialN'
p7304
I0
sg39
F0.71681603891920531
sg34
g752
(S'\x07\xdf\t\x1c\x12\x13\x08\x07b\xa0'
tRp7305
sa(dp7306
S'trial_loop.thisTrialN'
p7307
I64
sg6370
S'1-treacle_cookies.png'
p7308
sS'block_loop.thisIndex'
p7309
g6364
sg38
S'left'
p7310
sg58
g62
sS'trial_loop.thisN'
p7311
I64
sg33
g6669
sg63
g64
sS'trial_loop.thisIndex'
p7312
g59
(g98
S'@\x00\x00\x00'
tRp7313
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7314
I0
sg6379
S'21-nakd_banana_crunch.png'
p7315
sS'block_loop.thisRepN'
p7316
I2
sg6382
g6669
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7317
I2
sg6384
g6676
sg55
g11
sS'block_loop.thisTrial'
p7318
Nsg69
Vn
sS'block_loop.thisTrialN'
p7319
I0
sg39
F0.61688297988803242
sg34
g752
(S'\x07\xdf\t\x1c\x12\x13\x0e\x03\xa9\x80'
tRp7320
sa(dp7321
S'trial_loop.thisTrialN'
p7322
I65
sg6370
g7090
sS'block_loop.thisIndex'
p7323
g6364
sg38
S'right'
p7324
sg58
g62
sS'trial_loop.thisN'
p7325
I65
sg33
g6909
sg63
g64
sS'trial_loop.thisIndex'
p7326
g59
(g98
S'A\x00\x00\x00'
tRp7327
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7328
I0
sg6379
g7097
sS'block_loop.thisRepN'
p7329
I2
sg6382
g6909
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7330
I2
sg6384
g6916
sg55
g11
sS'block_loop.thisTrial'
p7331
Nsg69
Vn
sS'block_loop.thisTrialN'
p7332
I0
sg39
F0.73354871523406473
sg34
g752
(S'\x07\xdf\t\x1c\x12\x13\x13\r\x88\xd8'
tRp7333
sa(dp7334
S'trial_loop.thisTrialN'
p7335
I66
sg6370
g6442
sS'block_loop.thisIndex'
p7336
g6364
sg38
S'left'
p7337
sg58
g62
sS'trial_loop.thisN'
p7338
I66
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7339
g59
(g98
S'B\x00\x00\x00'
tRp7340
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7341
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7342
I2
sg6382
g6452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7343
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p7344
Nsg69
Vn
sS'block_loop.thisTrialN'
p7345
I0
sg39
F0.66677481377337244
sg34
g752
(S'\x07\xdf\t\x1c\x12\x13\x19\n\x0e8'
tRp7346
sa(dp7347
S'trial_loop.thisTrialN'
p7348
I67
sg6370
S'35-raisins.png'
p7349
sS'block_loop.thisIndex'
p7350
g6364
sg38
S'right'
p7351
sg58
g62
sS'trial_loop.thisN'
p7352
I67
sg33
g7137
sg63
g64
sS'trial_loop.thisIndex'
p7353
g59
(g98
S'C\x00\x00\x00'
tRp7354
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7355
I0
sg6379
S'49-yorkie.png'
p7356
sS'block_loop.thisRepN'
p7357
I2
sg6382
g7137
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7358
I2
sg6384
g7144
sg55
g11
sS'block_loop.thisTrial'
p7359
Nsg69
Vn
sS'block_loop.thisTrialN'
p7360
I0
sg39
F0.65019580518492148
sg34
g752
(S'\x07\xdf\t\x1c\x12\x13\x1f\x05b\xe8'
tRp7361
sa(dp7362
S'trial_loop.thisTrialN'
p7363
I68
sg6370
g6729
sS'block_loop.thisIndex'
p7364
g6364
sg38
S'left'
p7365
sg58
g62
sS'trial_loop.thisN'
p7366
I68
sg33
g6733
sg63
g64
sS'trial_loop.thisIndex'
p7367
g59
(g98
S'D\x00\x00\x00'
tRp7368
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7369
I0
sg6379
g6737
sS'block_loop.thisRepN'
p7370
I2
sg6382
g6733
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7371
I2
sg6384
g6740
sg55
g11
sS'block_loop.thisTrial'
p7372
Nsg69
Vn
sS'block_loop.thisTrialN'
p7373
I0
sg39
F0.65009630604617996
sg34
g752
(S'\x07\xdf\t\x1c\x12\x13%\x00}\x00'
tRp7374
sa(dp7375
S'trial_loop.thisTrialN'
p7376
I69
sg6370
S'3-ellas_strawberries_apples.png'
p7377
sS'block_loop.thisIndex'
p7378
g6364
sg38
S'right'
p7379
sg58
g62
sS'trial_loop.thisN'
p7380
I69
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7381
g59
(g98
S'E\x00\x00\x00'
tRp7382
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7383
I0
sg6379
S'13-mccoys_steak_crisps.png'
p7384
sS'block_loop.thisRepN'
p7385
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7386
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7387
Nsg69
Vn
sS'block_loop.thisTrialN'
p7388
I0
sg39
F1.0001285791149712
sg34
g752
(S'\x07\xdf\t\x1c\x12\x13*\x0b\x13\xf0'
tRp7389
sa(dp7390
S'trial_loop.thisTrialN'
p7391
I70
sg6370
g6948
sS'block_loop.thisIndex'
p7392
g6364
sg38
S'left'
p7393
sg58
g62
sS'trial_loop.thisN'
p7394
I70
sg33
g6508
sg63
g64
sS'trial_loop.thisIndex'
p7395
g59
(g98
S'F\x00\x00\x00'
tRp7396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7397
I0
sg6379
g6955
sS'block_loop.thisRepN'
p7398
I2
sg6382
g6508
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7399
I2
sg6384
g6515
sg55
g11
sS'block_loop.thisTrial'
p7400
Nsg69
Vn
sS'block_loop.thisTrialN'
p7401
I0
sg39
F0.66709725941109355
sg34
g752
(S'\x07\xdf\t\x1c\x12\x130\x0b\xa4x'
tRp7402
sa(dp7403
S'trial_loop.thisTrialN'
p7404
I71
sg6370
g6828
sS'block_loop.thisIndex'
p7405
g6364
sg38
S'right'
p7406
sg58
g62
sS'trial_loop.thisN'
p7407
I71
sg33
g6802
sg63
g64
sS'trial_loop.thisIndex'
p7408
g59
(g98
S'G\x00\x00\x00'
tRp7409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7410
I0
sg6379
g6835
sS'block_loop.thisRepN'
p7411
I2
sg6382
g6802
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7412
I2
sg6384
g6809
sg55
g11
sS'block_loop.thisTrial'
p7413
Nsg69
Vn
sS'block_loop.thisTrialN'
p7414
I0
sg39
F0.73353389014664572
sg34
g752
(S'\x07\xdf\t\x1c\x12\x136\x06\xf9('
tRp7415
sa(dp7416
S'trial_loop.thisTrialN'
p7417
I72
sg6370
S'41-peanuts_redo.png'
p7418
sS'block_loop.thisIndex'
p7419
g6364
sg38
S'left'
p7420
sg58
g62
sS'trial_loop.thisN'
p7421
I72
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7422
g59
(g98
S'H\x00\x00\x00'
tRp7423
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7424
I0
sg6379
S'45-chewy_nougat_redo.png'
p7425
sS'block_loop.thisRepN'
p7426
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7427
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7428
Nsg69
Vn
sS'block_loop.thisTrialN'
p7429
I0
sg39
F0.66687345761965844
sg34
g752
(S'\x07\xdf\t\x1c\x12\x14\x00\x03~\x88'
tRp7430
sa(dp7431
S'trial_loop.thisTrialN'
p7432
I73
sg6370
g6682
sS'block_loop.thisIndex'
p7433
g6364
sg38
S'left'
p7434
sg58
g62
sS'trial_loop.thisN'
p7435
I73
sg33
g6693
sg63
g64
sS'trial_loop.thisIndex'
p7436
g59
(g98
S'I\x00\x00\x00'
tRp7437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7438
I0
sg6379
g6690
sS'block_loop.thisRepN'
p7439
I2
sg6382
g6686
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7440
I2
sg6384
g6693
sg55
g11
sS'block_loop.thisTrial'
p7441
Nsg69
Vn
sS'block_loop.thisTrialN'
p7442
I0
sg39
F0.70013353981994442
sg34
g752
(S'\x07\xdf\t\x1c\x12\x14\x05\x0e\x15x'
tRp7443
sa(dp7444
S'trial_loop.thisTrialN'
p7445
I74
sg6370
S'42-mrkipling_lemon_slices.png'
p7446
sS'block_loop.thisIndex'
p7447
g6364
sg38
S'right'
p7448
sg58
g62
sS'trial_loop.thisN'
p7449
I74
sg33
g6862
sg63
g64
sS'trial_loop.thisIndex'
p7450
g59
(g98
S'J\x00\x00\x00'
tRp7451
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7452
I0
sg6379
S'16-skips_prawn.png'
p7453
sS'block_loop.thisRepN'
p7454
I2
sg6382
g6862
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7455
I2
sg6384
g6869
sg55
g11
sS'block_loop.thisTrial'
p7456
Nsg69
Vn
sS'block_loop.thisTrialN'
p7457
I0
sg39
F0.84996498998589232
sg34
g752
(S'\x07\xdf\t\x1c\x12\x14\x0b\t\xe3@'
tRp7458
sa(dp7459
S'trial_loop.thisTrialN'
p7460
I75
sg6370
S'44-crunch.png'
p7461
sS'block_loop.thisIndex'
p7462
g6364
sg38
S'right'
p7463
sg58
g62
sS'trial_loop.thisN'
p7464
I75
sg33
g6686
sg63
g64
sS'trial_loop.thisIndex'
p7465
g59
(g98
S'K\x00\x00\x00'
tRp7466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7467
I0
sg6379
S'26-walkers_smoky_bacon.png'
p7468
sS'block_loop.thisRepN'
p7469
I2
sg6382
g6686
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7470
I2
sg6384
g6693
sg55
g11
sS'block_loop.thisTrial'
p7471
Nsg69
Vn
sS'block_loop.thisTrialN'
p7472
I0
sg39
F0.83354021931882016
sg34
g752
(S'\x07\xdf\t\x1c\x12\x14\x11\x08P\xe8'
tRp7473
sa(dp7474
S'trial_loop.thisTrialN'
p7475
I76
sg6370
S'25-kitkat.png'
p7476
sS'block_loop.thisIndex'
p7477
g6364
sg38
S'left'
p7478
sg58
g62
sS'trial_loop.thisN'
p7479
I76
sg33
g6898
sg63
g64
sS'trial_loop.thisIndex'
p7480
g59
(g98
S'L\x00\x00\x00'
tRp7481
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7482
I0
sg6379
S'31-hobnobs.png'
p7483
sS'block_loop.thisRepN'
p7484
I2
sg6382
g6898
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7485
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p7486
Nsg69
Vn
sS'block_loop.thisTrialN'
p7487
I0
sg39
F0.93346187443603412
sg34
g752
(S'\x07\xdf\t\x1c\x12\x14\x17\x06A\x90'
tRp7488
sa(dp7489
S'trial_loop.thisTrialN'
p7490
I77
sg6370
S'46-pistachios.png'
p7491
sS'block_loop.thisIndex'
p7492
g6364
sg38
S'right'
p7493
sg58
g62
sS'trial_loop.thisN'
p7494
I77
sg33
g7083
sg63
g64
sS'trial_loop.thisIndex'
p7495
g59
(g98
S'M\x00\x00\x00'
tRp7496
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7497
I0
sg6379
S'29-beans.png'
p7498
sS'block_loop.thisRepN'
p7499
I2
sg6382
g7083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7500
I2
sg6384
g7077
sg55
g11
sS'block_loop.thisTrial'
p7501
Nsg69
Vn
sS'block_loop.thisTrialN'
p7502
I0
sg39
F1.2167738444404677
sg34
g752
(S'\x07\xdf\t\x1c\x12\x14\x1d\x05\xa5P'
tRp7503
sa(dp7504
S'trial_loop.thisTrialN'
p7505
I78
sg6370
g6425
sS'block_loop.thisIndex'
p7506
g6364
sg38
S'right'
p7507
sg58
g62
sS'trial_loop.thisN'
p7508
I78
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7509
g59
(g98
S'N\x00\x00\x00'
tRp7510
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7511
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7512
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7513
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7514
Nsg69
Vn
sS'block_loop.thisTrialN'
p7515
I0
sg39
F0.70019169977604179
sg34
g752
(S'\x07\xdf\t\x1c\x12\x14#\t\x89h'
tRp7516
sa(dp7517
S'trial_loop.thisTrialN'
p7518
I79
sg6370
g7491
sS'block_loop.thisIndex'
p7519
g6364
sg38
S'right'
p7520
sg58
g62
sS'trial_loop.thisN'
p7521
I79
sg33
g7083
sg63
g64
sS'trial_loop.thisIndex'
p7522
g59
(g98
S'O\x00\x00\x00'
tRp7523
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7524
I0
sg6379
g7498
sS'block_loop.thisRepN'
p7525
I2
sg6382
g7083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7526
I2
sg6384
g7077
sg55
g11
sS'block_loop.thisTrial'
p7527
Nsg69
Vn
sS'block_loop.thisTrialN'
p7528
I0
sg39
F0.75018046692275675
sg34
g752
(S'\x07\xdf\t\x1c\x12\x14)\x05W0'
tRp7529
sa(dp7530
S'trial_loop.thisTrialN'
p7531
I80
sg6370
g7105
sS'block_loop.thisIndex'
p7532
g6364
sg38
S'left'
p7533
sg58
g62
sS'trial_loop.thisN'
p7534
I80
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p7535
g59
(g98
S'P\x00\x00\x00'
tRp7536
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7537
I0
sg6379
g7112
sS'block_loop.thisRepN'
p7538
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7539
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p7540
Nsg69
Vn
sS'block_loop.thisTrialN'
p7541
I0
sg39
F0.98343068473695894
sg34
g752
(S'\x07\xdf\t\x1c\x12\x14/\x02\x1b\x10'
tRp7542
sa(dp7543
S'trial_loop.thisTrialN'
p7544
I81
sg6370
g6682
sS'block_loop.thisIndex'
p7545
g6364
sg38
S'left'
p7546
sg58
g62
sS'trial_loop.thisN'
p7547
I81
sg33
g6686
sg63
g64
sS'trial_loop.thisIndex'
p7548
g59
(g98
S'Q\x00\x00\x00'
tRp7549
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7550
I0
sg6379
g6690
sS'block_loop.thisRepN'
p7551
I2
sg6382
g6686
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7552
I2
sg6384
g6693
sg55
g11
sS'block_loop.thisTrial'
p7553
Nsg69
Vn
sS'block_loop.thisTrialN'
p7554
I0
sg39
F0.81678245439616148
sg34
g752
(S'\x07\xdf\t\x1c\x12\x145\x02q\x00'
tRp7555
sa(dp7556
S'trial_loop.thisTrialN'
p7557
I82
sg6370
g7349
sS'block_loop.thisIndex'
p7558
g6364
sg38
S'right'
p7559
sg58
g62
sS'trial_loop.thisN'
p7560
I82
sg33
g7137
sg63
g64
sS'trial_loop.thisIndex'
p7561
g59
(g98
S'R\x00\x00\x00'
tRp7562
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7563
I0
sg6379
g7356
sS'block_loop.thisRepN'
p7564
I2
sg6382
g7137
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7565
I2
sg6384
g7144
sg55
g11
sS'block_loop.thisTrial'
p7566
Nsg69
Vn
sS'block_loop.thisTrialN'
p7567
I0
sg39
F0.65021747261926066
sg34
g752
(S"\x07\xdf\t\x1c\x12\x14;\x00'\x10"
tRp7568
sa(dp7569
S'trial_loop.thisTrialN'
p7570
I83
sg6370
S'4-corn.png'
p7571
sS'block_loop.thisIndex'
p7572
g6364
sg38
S'left'
p7573
sg58
g62
sS'trial_loop.thisN'
p7574
I83
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p7575
g59
(g98
S'S\x00\x00\x00'
tRp7576
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7577
I0
sg6379
S'10-bounty_redo.png'
p7578
sS'block_loop.thisRepN'
p7579
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7580
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p7581
Nsg69
Vn
sS'block_loop.thisTrialN'
p7582
I0
sg39
F0.61686587401709403
sg34
g752
(S'\x07\xdf\t\x1c\x12\x15\x04\n\x7f\x80'
tRp7583
sa(dp7584
S'trial_loop.thisTrialN'
p7585
I84
sg6370
g7476
sS'block_loop.thisIndex'
p7586
g6364
sg38
S'left'
p7587
sg58
g62
sS'trial_loop.thisN'
p7588
I84
sg33
g6898
sg63
g64
sS'trial_loop.thisIndex'
p7589
g59
(g98
S'T\x00\x00\x00'
tRp7590
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7591
I0
sg6379
g7483
sS'block_loop.thisRepN'
p7592
I2
sg6382
g6898
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7593
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p7594
Nsg69
Vn
sS'block_loop.thisTrialN'
p7595
I0
sg39
F0.93346729129552841
sg34
g752
(S'\x07\xdf\t\x1c\x12\x15\n\x05\x1c\x98'
tRp7596
sa(dp7597
S'trial_loop.thisTrialN'
p7598
I85
sg6370
g7491
sS'block_loop.thisIndex'
p7599
g6364
sg38
S'right'
p7600
sg58
g62
sS'trial_loop.thisN'
p7601
I85
sg33
g7083
sg63
g64
sS'trial_loop.thisIndex'
p7602
g59
(g98
S'U\x00\x00\x00'
tRp7603
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7604
I0
sg6379
g7498
sS'block_loop.thisRepN'
p7605
I2
sg6382
g7083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7606
I2
sg6384
g7077
sg55
g11
sS'block_loop.thisTrial'
p7607
Nsg69
Vn
sS'block_loop.thisTrialN'
p7608
I0
sg39
F0.7001979719279916
sg34
g752
(S'\x07\xdf\t\x1c\x12\x15\x10\x04\xba\xf0'
tRp7609
sa(dp7610
S'trial_loop.thisTrialN'
p7611
I86
sg6370
g7446
sS'block_loop.thisIndex'
p7612
g6364
sg38
S'right'
p7613
sg58
g62
sS'trial_loop.thisN'
p7614
I86
sg33
g6862
sg63
g64
sS'trial_loop.thisIndex'
p7615
g59
(g98
S'V\x00\x00\x00'
tRp7616
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7617
I0
sg6379
g7453
sS'block_loop.thisRepN'
p7618
I2
sg6382
g6862
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7619
I2
sg6384
g6869
sg55
g11
sS'block_loop.thisTrial'
p7620
Nsg69
Vn
sS'block_loop.thisTrialN'
p7621
I0
sg39
F0.78339521856469219
sg34
g752
(S'\x07\xdf\t\x1c\x12\x15\x16\x00\x88\xb8'
tRp7622
sa(dp7623
S'trial_loop.thisTrialN'
p7624
I87
sg6370
g7133
sS'block_loop.thisIndex'
p7625
g6364
sg38
S'left'
p7626
sg58
g62
sS'trial_loop.thisN'
p7627
I87
sg33
g7137
sg63
g64
sS'trial_loop.thisIndex'
p7628
g59
(g98
S'W\x00\x00\x00'
tRp7629
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7630
I0
sg6379
g7141
sS'block_loop.thisRepN'
p7631
I2
sg6382
g7137
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7632
I2
sg6384
g7144
sg55
g11
sS'block_loop.thisTrial'
p7633
Nsg69
Vn
sS'block_loop.thisTrialN'
p7634
I0
sg39
F0.76677430059862672
sg34
g752
(S'\x07\xdf\t\x1c\x12\x15\x1b\r\x07\xf0'
tRp7635
sa(dp7636
S'trial_loop.thisTrialN'
p7637
I88
sg6370
g6521
sS'block_loop.thisIndex'
p7638
g6364
sg38
S'right'
p7639
sg58
g62
sS'trial_loop.thisN'
p7640
I88
sg33
g6532
sg63
g64
sS'trial_loop.thisIndex'
p7641
g59
(g98
S'X\x00\x00\x00'
tRp7642
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7643
I0
sg6379
g6529
sS'block_loop.thisRepN'
p7644
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7645
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p7646
Nsg69
Vn
sS'block_loop.thisTrialN'
p7647
I0
sg39
F0.68387412588708685
sg34
g752
(S'\x07\xdf\t\x1c\x12\x15!\n\x06h'
tRp7648
sa(dp7649
S'trial_loop.thisTrialN'
p7650
I89
sg6370
g7461
sS'block_loop.thisIndex'
p7651
g6364
sg38
S'right'
p7652
sg58
g62
sS'trial_loop.thisN'
p7653
I89
sg33
g6686
sg63
g64
sS'trial_loop.thisIndex'
p7654
g59
(g98
S'Y\x00\x00\x00'
tRp7655
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7656
I0
sg6379
g7468
sS'block_loop.thisRepN'
p7657
I2
sg6382
g6686
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7658
I2
sg6384
g6693
sg55
g11
sS'block_loop.thisTrial'
p7659
Nsg69
Vn
sS'block_loop.thisTrialN'
p7660
I0
sg39
F0.80019175679626642
sg34
g752
(S"\x07\xdf\t\x1c\x12\x15'\x05\x99\x98"
tRp7661
sa(dp7662
S'trial_loop.thisTrialN'
p7663
I90
sg6370
g6905
sS'block_loop.thisIndex'
p7664
g6364
sg38
S'left'
p7665
sg58
g62
sS'trial_loop.thisN'
p7666
I90
sg33
g6909
sg63
g64
sS'trial_loop.thisIndex'
p7667
g59
(g98
S'Z\x00\x00\x00'
tRp7668
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7669
I0
sg6379
g6913
sS'block_loop.thisRepN'
p7670
I2
sg6382
g6909
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7671
I2
sg6384
g6916
sg55
g11
sS'block_loop.thisTrial'
p7672
Nsg69
Vn
sS'block_loop.thisTrialN'
p7673
I0
sg39
F0.70013610570094897
sg34
g752
(S'\x07\xdf\t\x1c\x12\x15-\x03\x11('
tRp7674
sa(dp7675
S'trial_loop.thisTrialN'
p7676
I91
sg6370
g7017
sS'block_loop.thisIndex'
p7677
g6364
sg38
S'right'
p7678
sg58
g62
sS'trial_loop.thisN'
p7679
I91
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p7680
g59
(g98
S'[\x00\x00\x00'
tRp7681
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7682
I0
sg6379
g7024
sS'block_loop.thisRepN'
p7683
I2
sg6382
g6452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7684
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p7685
Nsg69
Vn
sS'block_loop.thisTrialN'
p7686
I0
sg39
F0.71687305848536198
sg34
g752
(S'\x07\xdf\t\x1c\x12\x152\x0e_\xb0'
tRp7687
sa(dp7688
S'trial_loop.thisTrialN'
p7689
I92
sg6370
g7133
sS'block_loop.thisIndex'
p7690
g6364
sg38
S'left'
p7691
sg58
g62
sS'trial_loop.thisN'
p7692
I92
sg33
g7137
sg63
g64
sS'trial_loop.thisIndex'
p7693
g59
(g98
S'\\\x00\x00\x00'
tRp7694
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7695
I0
sg6379
g7141
sS'block_loop.thisRepN'
p7696
I2
sg6382
g7137
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7697
I2
sg6384
g7144
sg55
g11
sS'block_loop.thisTrial'
p7698
Nsg69
Vn
sS'block_loop.thisTrialN'
p7699
I0
sg39
F0.70018428723415127
sg34
g752
(S'\x07\xdf\t\x1c\x12\x158\nk\xf8'
tRp7700
sa(dp7701
S'trial_loop.thisTrialN'
p7702
I93
sg6370
g7377
sS'block_loop.thisIndex'
p7703
g6364
sg38
S'right'
p7704
sg58
g62
sS'trial_loop.thisN'
p7705
I93
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7706
g59
(g98
S']\x00\x00\x00'
tRp7707
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7708
I0
sg6379
g7384
sS'block_loop.thisRepN'
p7709
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7710
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7711
Nsg69
Vn
sS'block_loop.thisTrialN'
p7712
I0
sg39
F0.7501006395323202
sg34
g752
(S'\x07\xdf\t\x1c\x12\x16\x02\x06x@'
tRp7713
sa(dp7714
S'trial_loop.thisTrialN'
p7715
I94
sg6370
g6504
sS'block_loop.thisIndex'
p7716
g6364
sg38
S'right'
p7717
sg58
g62
sS'trial_loop.thisN'
p7718
I94
sg33
g6508
sg63
g64
sS'trial_loop.thisIndex'
p7719
g59
(g98
S'^\x00\x00\x00'
tRp7720
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7721
I0
sg6379
g6512
sS'block_loop.thisRepN'
p7722
I2
sg6382
g6508
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7723
I2
sg6384
g6515
sg55
g11
sS'block_loop.thisTrial'
p7724
Nsg69
Vn
sS'block_loop.thisTrialN'
p7725
I0
sg39
F0.81724060659689712
sg34
g752
(S'\x07\xdf\t\x1c\x12\x16\x08\x0388'
tRp7726
sa(dp7727
S'trial_loop.thisTrialN'
p7728
I95
sg6370
g6843
sS'block_loop.thisIndex'
p7729
g6364
sg38
S'right'
p7730
sg58
g62
sS'trial_loop.thisN'
p7731
I95
sg33
g6733
sg63
g64
sS'trial_loop.thisIndex'
p7732
g59
(g98
S'_\x00\x00\x00'
tRp7733
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7734
I0
sg6379
g6850
sS'block_loop.thisRepN'
p7735
I2
sg6382
g6733
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7736
I2
sg6384
g6740
sg55
g11
sS'block_loop.thisTrial'
p7737
Nsg69
Vn
sS'block_loop.thisTrialN'
p7738
I0
sg39
F0.81686883903603302
sg34
g752
(S'\x07\xdf\t\x1c\x12\x16\x0e\x00\xeeH'
tRp7739
sa(dp7740
S'trial_loop.thisTrialN'
p7741
I96
sg6370
g7446
sS'block_loop.thisIndex'
p7742
g6364
sg38
S'right'
p7743
sg58
g62
sS'trial_loop.thisN'
p7744
I96
sg33
g6862
sg63
g64
sS'trial_loop.thisIndex'
p7745
g59
(g98
S'`\x00\x00\x00'
tRp7746
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7747
I0
sg6379
g7453
sS'block_loop.thisRepN'
p7748
I2
sg6382
g6862
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7749
I2
sg6384
g6869
sg55
g11
sS'block_loop.thisTrial'
p7750
Nsg69
Vn
sS'block_loop.thisTrialN'
p7751
I0
sg39
F0.98339989417218021
sg34
g752
(S'\x07\xdf\t\x1c\x12\x16\x13\r\xe6\x98'
tRp7752
sa(dp7753
S'trial_loop.thisTrialN'
p7754
I97
sg6370
g6729
sS'block_loop.thisIndex'
p7755
g6364
sg38
S'left'
p7756
sg58
g62
sS'trial_loop.thisN'
p7757
I97
sg33
g6733
sg63
g64
sS'trial_loop.thisIndex'
p7758
g59
(g98
S'a\x00\x00\x00'
tRp7759
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7760
I0
sg6379
g6737
sS'block_loop.thisRepN'
p7761
I2
sg6382
g6733
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7762
I2
sg6384
g6740
sg55
g11
sS'block_loop.thisTrial'
p7763
Nsg69
Vn
sS'block_loop.thisTrialN'
p7764
I0
sg39
F0.63328095135875628
sg34
g752
(S'\x07\xdf\t\x1c\x12\x16\x19\r\xfe\x08'
tRp7765
sa(dp7766
S'trial_loop.thisTrialN'
p7767
I98
sg6370
g6828
sS'block_loop.thisIndex'
p7768
g6364
sg38
S'right'
p7769
sg58
g62
sS'trial_loop.thisN'
p7770
I98
sg33
g6809
sg63
g64
sS'trial_loop.thisIndex'
p7771
g59
(g98
S'b\x00\x00\x00'
tRp7772
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7773
I0
sg6379
g6835
sS'block_loop.thisRepN'
p7774
I2
sg6382
g6802
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7775
I2
sg6384
g6809
sg55
g11
sS'block_loop.thisTrial'
p7776
Nsg69
Vn
sS'block_loop.thisTrialN'
p7777
I0
sg39
F0.70021165662183193
sg34
g752
(S'\x07\xdf\t\x1c\x12\x16\x1f\x08\xd9\xa0'
tRp7778
sa(dp7779
S'trial_loop.thisTrialN'
p7780
I99
sg6370
g6581
sS'block_loop.thisIndex'
p7781
g6364
sg38
S'right'
p7782
sg58
g62
sS'trial_loop.thisN'
p7783
I99
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p7784
g59
(g98
S'c\x00\x00\x00'
tRp7785
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7786
I0
sg6379
g6589
sS'block_loop.thisRepN'
p7787
I2
sg6382
g6585
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7788
I2
sg6384
g6592
sg55
g11
sS'block_loop.thisTrial'
p7789
Nsg69
Vn
sS'block_loop.thisTrialN'
p7790
I0
sg39
F0.85009870086651063
sg34
g752
(S'\x07\xdf\t\x1c\x12\x16%\x04\xe5\xe8'
tRp7791
sa(dp7792
S'trial_loop.thisTrialN'
p7793
I100
sg6370
g7254
sS'block_loop.thisIndex'
p7794
g6364
sg38
S'right'
p7795
sg58
g62
sS'trial_loop.thisN'
p7796
I100
sg33
g6710
sg63
g64
sS'trial_loop.thisIndex'
p7797
g59
(g98
S'd\x00\x00\x00'
tRp7798
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7799
I0
sg6379
g7261
sS'block_loop.thisRepN'
p7800
I2
sg6382
g6703
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7801
I2
sg6384
g6710
sg55
g11
sS'block_loop.thisTrial'
p7802
Nsg69
Vn
sS'block_loop.thisTrialN'
p7803
I0
sg39
F1.0005676297660102
sg34
g752
(S'\x07\xdf\t\x1c\x12\x16+\x03\x15\x10'
tRp7804
sa(dp7805
S'trial_loop.thisTrialN'
p7806
I101
sg6370
g7032
sS'block_loop.thisIndex'
p7807
g6364
sg38
S'right'
p7808
sg58
g62
sS'trial_loop.thisN'
p7809
I101
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7810
g59
(g98
S'e\x00\x00\x00'
tRp7811
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7812
I0
sg6379
g7039
sS'block_loop.thisRepN'
p7813
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7814
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7815
Nsg69
Vn
sS'block_loop.thisTrialN'
p7816
I0
sg39
F0.70019654643692775
sg34
g752
(S'\x07\xdf\t\x1c\x12\x161\x03\xa9\x80'
tRp7817
sa(dp7818
S'trial_loop.thisTrialN'
p7819
I102
sg6370
g6828
sS'block_loop.thisIndex'
p7820
g6364
sg38
S'right'
p7821
sg58
g62
sS'trial_loop.thisN'
p7822
I102
sg33
g6802
sg63
g64
sS'trial_loop.thisIndex'
p7823
g59
(g98
S'f\x00\x00\x00'
tRp7824
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7825
I0
sg6379
g6835
sS'block_loop.thisRepN'
p7826
I2
sg6382
g6802
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7827
I2
sg6384
g6809
sg55
g11
sS'block_loop.thisTrial'
p7828
Nsg69
Vn
sS'block_loop.thisTrialN'
p7829
I0
sg39
F0.70014180765429046
sg34
g752
(S'\x07\xdf\t\x1c\x12\x166\x0e\xb9\x88'
tRp7830
sa(dp7831
S'trial_loop.thisTrialN'
p7832
I103
sg6370
g6699
sS'block_loop.thisIndex'
p7833
g6364
sg38
S'left'
p7834
sg58
g62
sS'trial_loop.thisN'
p7835
I103
sg33
g6703
sg63
g64
sS'trial_loop.thisIndex'
p7836
g59
(g98
S'g\x00\x00\x00'
tRp7837
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7838
I0
sg6379
g6707
sS'block_loop.thisRepN'
p7839
I2
sg6382
g6703
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7840
I2
sg6384
g6710
sg55
g11
sS'block_loop.thisTrial'
p7841
Nsg69
Vn
sS'block_loop.thisTrialN'
p7842
I0
sg39
F0.866851048933313
sg34
g752
(S'\x07\xdf\t\x1c\x12\x17\x00\n\xc5\xd0'
tRp7843
sa(dp7844
S'trial_loop.thisTrialN'
p7845
I104
sg6370
g7349
sS'block_loop.thisIndex'
p7846
g6364
sg38
S'right'
p7847
sg58
g62
sS'trial_loop.thisN'
p7848
I104
sg33
g7137
sg63
g64
sS'trial_loop.thisIndex'
p7849
g59
(g98
S'h\x00\x00\x00'
tRp7850
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7851
I0
sg6379
g7356
sS'block_loop.thisRepN'
p7852
I2
sg6382
g7137
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7853
I2
sg6384
g7144
sg55
g11
sS'block_loop.thisTrial'
p7854
Nsg69
Vn
sS'block_loop.thisTrialN'
p7855
I0
sg39
F0.65021148556479602
sg34
g752
(S'\x07\xdf\t\x1c\x12\x17\x06\t/\x90'
tRp7856
sa(dp7857
S'trial_loop.thisTrialN'
p7858
I105
sg6370
g7491
sS'block_loop.thisIndex'
p7859
g6364
sg38
S'right'
p7860
sg58
g62
sS'trial_loop.thisN'
p7861
I105
sg33
g7083
sg63
g64
sS'trial_loop.thisIndex'
p7862
g59
(g98
S'i\x00\x00\x00'
tRp7863
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7864
I0
sg6379
g7498
sS'block_loop.thisRepN'
p7865
I2
sg6382
g7083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7866
I2
sg6384
g7077
sg55
g11
sS'block_loop.thisTrial'
p7867
Nsg69
Vn
sS'block_loop.thisTrialN'
p7868
I0
sg39
F0.70005941438648733
sg34
g752
(S'\x07\xdf\t\x1c\x12\x17\x0c\x04I\xa8'
tRp7869
sa(dp7870
S'trial_loop.thisTrialN'
p7871
I106
sg6370
g7418
sS'block_loop.thisIndex'
p7872
g6364
sg38
S'left'
p7873
sg58
g62
sS'trial_loop.thisN'
p7874
I106
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p7875
g59
(g98
S'j\x00\x00\x00'
tRp7876
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7877
I0
sg6379
g7425
sS'block_loop.thisRepN'
p7878
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7879
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7880
Nsg69
Vn
sS'block_loop.thisTrialN'
p7881
I0
sg39
F1.2672062237979844
sg34
g752
(S'\x07\xdf\t\x1c\x12\x17\x12\x00U\xf0'
tRp7882
sa(dp7883
S'trial_loop.thisTrialN'
p7884
I107
sg6370
g6989
sS'block_loop.thisIndex'
p7885
g6364
sg38
S'left'
p7886
sg58
g62
sS'trial_loop.thisN'
p7887
I107
sg33
g6555
sg63
g64
sS'trial_loop.thisIndex'
p7888
g59
(g98
S'k\x00\x00\x00'
tRp7889
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7890
I0
sg6379
g6996
sS'block_loop.thisRepN'
p7891
I2
sg6382
g6555
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7892
I2
sg6384
g6562
sg55
g11
sS'block_loop.thisTrial'
p7893
Nsg69
Vn
sS'block_loop.thisTrialN'
p7894
I0
sg39
F0.8834488739776134
sg34
g752
(S'\x07\xdf\t\x1c\x12\x17\x18\x04\xf1\xa0'
tRp7895
sa(dp7896
S'trial_loop.thisTrialN'
p7897
I108
sg6370
g6459
sS'block_loop.thisIndex'
p7898
g6364
sg38
S'left'
p7899
sg58
g62
sS'trial_loop.thisN'
p7900
I108
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7901
g59
(g98
S'l\x00\x00\x00'
tRp7902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7903
I0
sg6379
g6466
sS'block_loop.thisRepN'
p7904
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7905
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7906
Nsg69
Vn
sS'block_loop.thisTrialN'
p7907
I0
sg39
F1.0332692053307255
sg34
g752
(S'\x07\xdf\t\x1c\x12\x17\x1e\x03\x99\xe0'
tRp7908
sa(dp7909
S'trial_loop.thisTrialN'
p7910
I109
sg6370
g6474
sS'block_loop.thisIndex'
p7911
g6364
sg38
S'right'
p7912
sg58
g62
sS'trial_loop.thisN'
p7913
I109
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p7914
g59
(g98
S'm\x00\x00\x00'
tRp7915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7916
I0
sg6379
g6482
sS'block_loop.thisRepN'
p7917
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7918
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p7919
Nsg69
Vn
sS'block_loop.thisTrialN'
p7920
I0
sg39
F0.81672714541855385
sg34
g752
(S'\x07\xdf\t\x1c\x12\x17$\x04\xa7h'
tRp7921
sa(dp7922
S'trial_loop.thisTrialN'
p7923
I110
sg6370
g6611
sS'block_loop.thisIndex'
p7924
g6364
sg38
S'left'
p7925
sg58
g62
sS'trial_loop.thisN'
p7926
I110
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p7927
g59
(g98
S'n\x00\x00\x00'
tRp7928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7929
I0
sg6379
g6618
sS'block_loop.thisRepN'
p7930
I2
sg6382
g6585
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7931
I2
sg6384
g6592
sg55
g11
sS'block_loop.thisTrial'
p7932
Nsg69
Vn
sS'block_loop.thisTrialN'
p7933
I0
sg39
F0.78342743462417275
sg34
g752
(S'\x07\xdf\t\x1c\x12\x17*\x02]x'
tRp7934
sa(dp7935
S'trial_loop.thisTrialN'
p7936
I111
sg6370
g6442
sS'block_loop.thisIndex'
p7937
g6364
sg38
S'left'
p7938
sg58
g62
sS'trial_loop.thisN'
p7939
I111
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7940
g59
(g98
S'o\x00\x00\x00'
tRp7941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7942
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7943
I2
sg6382
g6452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7944
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p7945
Nsg69
Vn
sS'block_loop.thisTrialN'
p7946
I0
sg39
F0.8667923187786073
sg34
g752
(S'\x07\xdf\t\x1c\x12\x17/\x0e\xdc\xb0'
tRp7947
sa(dp7948
S'trial_loop.thisTrialN'
p7949
I112
sg6370
g7461
sS'block_loop.thisIndex'
p7950
g6364
sg38
S'right'
p7951
sg58
g62
sS'trial_loop.thisN'
p7952
I112
sg33
g6686
sg63
g64
sS'trial_loop.thisIndex'
p7953
g59
(g98
S'p\x00\x00\x00'
tRp7954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7955
I0
sg6379
g7468
sS'block_loop.thisRepN'
p7956
I2
sg6382
g6686
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7957
I2
sg6384
g6693
sg55
g11
sS'block_loop.thisTrial'
p7958
Nsg69
Vn
sS'block_loop.thisTrialN'
p7959
I0
sg39
F0.85057823540410027
sg34
g752
(S'\x07\xdf\t\x1c\x12\x175\rFp'
tRp7960
sa(dp7961
S'trial_loop.thisTrialN'
p7962
I113
sg6370
g6699
sS'block_loop.thisIndex'
p7963
g6364
sg38
S'left'
p7964
sg58
g62
sS'trial_loop.thisN'
p7965
I113
sg33
g6703
sg63
g64
sS'trial_loop.thisIndex'
p7966
g59
(g98
S'q\x00\x00\x00'
tRp7967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7968
I0
sg6379
g6707
sS'block_loop.thisRepN'
p7969
I2
sg6382
g6703
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7970
I2
sg6384
g6710
sg55
g11
sS'block_loop.thisTrial'
p7971
Nsg69
Vn
sS'block_loop.thisTrialN'
p7972
I0
sg39
F1.2668518472055439
sg34
g752
(S'\x07\xdf\t\x1c\x12\x17;\x0by\x80'
tRp7973
sa(dp7974
S'trial_loop.thisTrialN'
p7975
I114
sg6370
g7446
sS'block_loop.thisIndex'
p7976
g6364
sg38
S'right'
p7977
sg58
g62
sS'trial_loop.thisN'
p7978
I114
sg33
g6862
sg63
g64
sS'trial_loop.thisIndex'
p7979
g59
(g98
S'r\x00\x00\x00'
tRp7980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7981
I0
sg6379
g7453
sS'block_loop.thisRepN'
p7982
I2
sg6382
g6862
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7983
I2
sg6384
g6869
sg55
g11
sS'block_loop.thisTrial'
p7984
Nsg69
Vn
sS'block_loop.thisTrialN'
p7985
I0
sg39
F0.683422245841939
sg34
g752
(S'\x07\xdf\t\x1c\x12\x18\x06\x00\xd2\xf0'
tRp7986
sa(dp7987
S'trial_loop.thisTrialN'
p7988
I115
sg6370
g6798
sS'block_loop.thisIndex'
p7989
g6364
sg38
S'left'
p7990
sg58
g62
sS'trial_loop.thisN'
p7991
I115
sg33
g6802
sg63
g64
sS'trial_loop.thisIndex'
p7992
g59
(g98
S's\x00\x00\x00'
tRp7993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7994
I0
sg6379
g6806
sS'block_loop.thisRepN'
p7995
I2
sg6382
g6802
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7996
I2
sg6384
g6809
sg55
g11
sS'block_loop.thisTrial'
p7997
Nsg69
Vn
sS'block_loop.thisTrialN'
p7998
I0
sg39
F1.0167663178581279
sg34
g752
(S'\x07\xdf\t\x1c\x12\x18\x0b\x0b\xa8`'
tRp7999
sa(dp8000
S'trial_loop.thisTrialN'
p8001
I116
sg6370
g6699
sS'block_loop.thisIndex'
p8002
g6364
sg38
S'left'
p8003
sg58
g62
sS'trial_loop.thisN'
p8004
I116
sg33
g6710
sg63
g64
sS'trial_loop.thisIndex'
p8005
g59
(g98
S't\x00\x00\x00'
tRp8006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8007
I0
sg6379
g6707
sS'block_loop.thisRepN'
p8008
I2
sg6382
g6703
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8009
I2
sg6384
g6710
sg55
g11
sS'block_loop.thisTrial'
p8010
Nsg69
Vn
sS'block_loop.thisTrialN'
p8011
I0
sg39
F1.066854013948614
sg34
g752
(S'\x07\xdf\t\x1c\x12\x18\x11\x0cs\x80'
tRp8012
sa(dp8013
S'trial_loop.thisTrialN'
p8014
I117
sg6370
g6858
sS'block_loop.thisIndex'
p8015
g6364
sg38
S'left'
p8016
sg58
g62
sS'trial_loop.thisN'
p8017
I117
sg33
g6862
sg63
g64
sS'trial_loop.thisIndex'
p8018
g59
(g98
S'u\x00\x00\x00'
tRp8019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8020
I0
sg6379
g6866
sS'block_loop.thisRepN'
p8021
I2
sg6382
g6862
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8022
I2
sg6384
g6869
sg55
g11
sS'block_loop.thisTrial'
p8023
Nsg69
Vn
sS'block_loop.thisTrialN'
p8024
I0
sg39
F0.60007446755116689
sg34
g752
(S'\x07\xdf\t\x1c\x12\x18\x17\r\xfa '
tRp8025
sa(dp8026
S'trial_loop.thisTrialN'
p8027
I118
sg6370
g7032
sS'block_loop.thisIndex'
p8028
g6364
sg38
S'right'
p8029
sg58
g62
sS'trial_loop.thisN'
p8030
I118
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8031
g59
(g98
S'v\x00\x00\x00'
tRp8032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8033
I0
sg6379
g7039
sS'block_loop.thisRepN'
p8034
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8035
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8036
Nsg69
Vn
sS'block_loop.thisTrialN'
p8037
I0
sg39
F0.83328619716121466
sg34
g752
(S'\x07\xdf\t\x1c\x12\x18\x1d\x08\\\xa0'
tRp8038
sa(dp8039
S'trial_loop.thisTrialN'
p8040
I119
sg6370
g7571
sS'block_loop.thisIndex'
p8041
g6364
sg38
S'left'
p8042
sg58
g62
sS'trial_loop.thisN'
p8043
I119
sg33
g6485
sg63
g64
sS'trial_loop.thisIndex'
p8044
g59
(g98
S'w\x00\x00\x00'
tRp8045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8046
I0
sg6379
g7578
sS'block_loop.thisRepN'
p8047
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8048
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p8049
Nsg69
Vn
sS'block_loop.thisTrialN'
p8050
I0
sg39
F0.70014123745932011
sg34
g752
(S'\x07\xdf\t\x1c\x12\x18#\x06MH'
tRp8051
sa(dp8052
S'trial_loop.thisTrialN'
p8053
I120
sg6370
g7418
sS'block_loop.thisIndex'
p8054
g6364
sg38
S'left'
p8055
sg58
g62
sS'trial_loop.thisN'
p8056
I120
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8057
g59
(g98
S'x\x00\x00\x00'
tRp8058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8059
I0
sg6379
g7425
sS'block_loop.thisRepN'
p8060
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8061
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8062
Nsg69
Vn
sS'block_loop.thisTrialN'
p8063
I0
sg39
F0.68352145988319535
sg34
g752
(S'\x07\xdf\t\x1c\x12\x18)\x02Y\x90'
tRp8064
sa(dp8065
S'trial_loop.thisTrialN'
p8066
I121
sg6370
g6474
sS'block_loop.thisIndex'
p8067
g6364
sg38
S'right'
p8068
sg58
g62
sS'trial_loop.thisN'
p8069
I121
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p8070
g59
(g98
S'y\x00\x00\x00'
tRp8071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8072
I0
sg6379
g6482
sS'block_loop.thisRepN'
p8073
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8074
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p8075
Nsg69
Vn
sS'block_loop.thisTrialN'
p8076
I0
sg39
F0.8502115996016073
sg34
g752
(S'\x07\xdf\t\x1c\x12\x18.\r/\x00'
tRp8077
sa(dp8078
S'trial_loop.thisTrialN'
p8079
I122
sg6370
g7017
sS'block_loop.thisIndex'
p8080
g6364
sg38
S'right'
p8081
sg58
g62
sS'trial_loop.thisN'
p8082
I122
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p8083
g59
(g98
S'z\x00\x00\x00'
tRp8084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8085
I0
sg6379
g7024
sS'block_loop.thisRepN'
p8086
I2
sg6382
g6452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8087
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p8088
Nsg69
Vn
sS'block_loop.thisTrialN'
p8089
I0
sg39
F0.81687454099301249
sg34
g752
(S'\x07\xdf\t\x1c\x12\x184\x0b\x9c\xa8'
tRp8090
sa(dp8091
S'trial_loop.thisTrialN'
p8092
I123
sg6370
g7476
sS'block_loop.thisIndex'
p8093
g6364
sg38
S'left'
p8094
sg58
g62
sS'trial_loop.thisN'
p8095
I123
sg33
g6892
sg63
g64
sS'trial_loop.thisIndex'
p8096
g59
(g98
S'{\x00\x00\x00'
tRp8097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8098
I0
sg6379
g7483
sS'block_loop.thisRepN'
p8099
I2
sg6382
g6898
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8100
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p8101
Nsg69
Vn
sS'block_loop.thisTrialN'
p8102
I0
sg39
F0.9167785200443177
sg34
g752
(S'\x07\xdf\t\x1c\x12\x18:\tR\xb8'
tRp8103
sa(dp8104
S'trial_loop.thisTrialN'
p8105
I124
sg6370
g7461
sS'block_loop.thisIndex'
p8106
g6364
sg38
S'right'
p8107
sg58
g62
sS'trial_loop.thisN'
p8108
I124
sg33
g6693
sg63
g64
sS'trial_loop.thisIndex'
p8109
g59
(g98
S'|\x00\x00\x00'
tRp8110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8111
I0
sg6379
g7468
sS'block_loop.thisRepN'
p8112
I2
sg6382
g6686
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8113
I2
sg6384
g6693
sg55
g11
sS'block_loop.thisTrial'
p8114
Nsg69
Vn
sS'block_loop.thisTrialN'
p8115
I0
sg39
F1.1338722442415019
sg34
g752
(S'\x07\xdf\t\x1c\x12\x19\x04\x08t\x10'
tRp8116
sa(dp8117
S'trial_loop.thisTrialN'
p8118
I125
sg6370
g7073
sS'block_loop.thisIndex'
p8119
g6364
sg38
S'left'
p8120
sg58
g62
sS'trial_loop.thisN'
p8121
I125
sg33
g7083
sg63
g64
sS'trial_loop.thisIndex'
p8122
g59
(g98
S'}\x00\x00\x00'
tRp8123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8124
I0
sg6379
g7081
sS'block_loop.thisRepN'
p8125
I2
sg6382
g7083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8126
I2
sg6384
g7077
sg55
g11
sS'block_loop.thisTrial'
p8127
Nsg69
Vn
sS'block_loop.thisTrialN'
p8128
I0
sg39
F0.76683474133824348
sg34
g752
(S'\x07\xdf\t\x1c\x12\x19\n\n\xec\xe0'
tRp8129
sa(dp8130
S'trial_loop.thisTrialN'
p8131
I126
sg6370
g6474
sS'block_loop.thisIndex'
p8132
g6364
sg38
S'right'
p8133
sg58
g62
sS'trial_loop.thisN'
p8134
I126
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p8135
g59
(g98
S'~\x00\x00\x00'
tRp8136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8137
I0
sg6379
g6482
sS'block_loop.thisRepN'
p8138
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8139
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p8140
Nsg69
Vn
sS'block_loop.thisTrialN'
p8141
I0
sg39
F0.75020127906100242
sg34
g752
(S'\x07\xdf\t\x1c\x12\x19\x10\x07\xebX'
tRp8142
sa(dp8143
S'trial_loop.thisTrialN'
p8144
I127
sg6370
g7073
sS'block_loop.thisIndex'
p8145
g6364
sg38
S'left'
p8146
sg58
g62
sS'trial_loop.thisN'
p8147
I127
sg33
g7083
sg63
g64
sS'trial_loop.thisIndex'
p8148
g59
(g98
S'\x7f\x00\x00\x00'
tRp8149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8150
I0
sg6379
g7081
sS'block_loop.thisRepN'
p8151
I2
sg6382
g7083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8152
I2
sg6384
g7077
sg55
g11
sS'block_loop.thisTrial'
p8153
Nsg69
Vn
sS'block_loop.thisTrialN'
p8154
I0
sg39
F0.5835345173618407
sg34
g752
(S'\x07\xdf\t\x1c\x12\x19\x16\x04\xaf8'
tRp8155
sa(dp8156
S'trial_loop.thisTrialN'
p8157
I128
sg6370
g6371
sS'block_loop.thisIndex'
p8158
g6364
sg38
S'right'
p8159
sg58
g62
sS'trial_loop.thisN'
p8160
I128
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8161
g59
(g98
S'\x80\x00\x00\x00'
tRp8162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8163
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8164
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8165
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8166
Nsg69
Vn
sS'block_loop.thisTrialN'
p8167
I0
sg39
F0.81654297222485184
sg34
g752
(S'\x07\xdf\t\x1c\x12\x19\x1b\x0e\x15x'
tRp8168
sa(dp8169
S'trial_loop.thisTrialN'
p8170
I129
sg6370
g7254
sS'block_loop.thisIndex'
p8171
g6364
sg38
S'right'
p8172
sg58
g62
sS'trial_loop.thisN'
p8173
I129
sg33
g6703
sg63
g64
sS'trial_loop.thisIndex'
p8174
g59
(g98
S'\x81\x00\x00\x00'
tRp8175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8176
I0
sg6379
g7261
sS'block_loop.thisRepN'
p8177
I2
sg6382
g6703
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8178
I2
sg6384
g6710
sg55
g11
sS'block_loop.thisTrial'
p8179
Nsg69
Vn
sS'block_loop.thisTrialN'
p8180
I0
sg39
F0.71687676475630724
sg34
g752
(S'\x07\xdf\t\x1c\x12\x19!\x0b\xcb\x88'
tRp8181
sa(dp8182
S'trial_loop.thisTrialN'
p8183
I130
sg6370
g7418
sS'block_loop.thisIndex'
p8184
g6364
sg38
S'left'
p8185
sg58
g62
sS'trial_loop.thisN'
p8186
I130
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8187
g59
(g98
S'\x82\x00\x00\x00'
tRp8188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8189
I0
sg6379
g7425
sS'block_loop.thisRepN'
p8190
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8191
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8192
Nsg69
Vn
sS'block_loop.thisTrialN'
p8193
I0
sg39
F0.65056158569132094
sg34
g752
(S"\x07\xdf\t\x1c\x12\x19'\x07\xd7\xd0"
tRp8194
sa(dp8195
S'trial_loop.thisTrialN'
p8196
I131
sg6370
g6665
sS'block_loop.thisIndex'
p8197
g6364
sg38
S'right'
p8198
sg58
g62
sS'trial_loop.thisN'
p8199
I131
sg33
g6669
sg63
g64
sS'trial_loop.thisIndex'
p8200
g59
(g98
S'\x83\x00\x00\x00'
tRp8201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8202
I0
sg6379
g6673
sS'block_loop.thisRepN'
p8203
I2
sg6382
g6669
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8204
I2
sg6384
g6676
sg55
g11
sS'block_loop.thisTrial'
p8205
Nsg69
Vn
sS'block_loop.thisTrialN'
p8206
I0
sg39
F0.75025601784363971
sg34
g752
(S'\x07\xdf\t\x1c\x12\x19-\x03,\x80'
tRp8207
sa(dp8208
S'trial_loop.thisTrialN'
p8209
I132
sg6370
g6551
sS'block_loop.thisIndex'
p8210
g6364
sg38
S'right'
p8211
sg58
g62
sS'trial_loop.thisN'
p8212
I132
sg33
g6555
sg63
g64
sS'trial_loop.thisIndex'
p8213
g59
(g98
S'\x84\x00\x00\x00'
tRp8214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8215
I0
sg6379
g6559
sS'block_loop.thisRepN'
p8216
I2
sg6382
g6555
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8217
I2
sg6384
g6562
sg55
g11
sS'block_loop.thisTrial'
p8218
Nsg69
Vn
sS'block_loop.thisTrialN'
p8219
I0
sg39
F1.1667753839683428
sg34
g752
(S'\x07\xdf\t\x1c\x12\x192\x0e\xf4 '
tRp8220
sa(dp8221
S'trial_loop.thisTrialN'
p8222
I133
sg6370
g6858
sS'block_loop.thisIndex'
p8223
g6364
sg38
S'left'
p8224
sg58
g62
sS'trial_loop.thisN'
p8225
I133
sg33
g6869
sg63
g64
sS'trial_loop.thisIndex'
p8226
g59
(g98
S'\x85\x00\x00\x00'
tRp8227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8228
I0
sg6379
g6866
sS'block_loop.thisRepN'
p8229
I2
sg6382
g6862
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8230
I2
sg6384
g6869
sg55
g11
sS'block_loop.thisTrial'
p8231
Nsg69
Vn
sS'block_loop.thisTrialN'
p8232
I0
sg39
F0.75004618584716809
sg34
g752
(S'\x07\xdf\t\x1c\x12\x199\x02\xe2H'
tRp8233
sa(dp8234
S'trial_loop.thisTrialN'
p8235
I134
sg6370
g7377
sS'block_loop.thisIndex'
p8236
g6364
sg38
S'right'
p8237
sg58
g62
sS'trial_loop.thisN'
p8238
I134
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8239
g59
(g98
S'\x86\x00\x00\x00'
tRp8240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8241
I0
sg6379
g7384
sS'block_loop.thisRepN'
p8242
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8243
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8244
Nsg69
Vn
sS'block_loop.thisTrialN'
p8245
I0
sg39
F0.78345081264342298
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1a\x02\x0e\xe4\x80'
tRp8246
sa(dp8247
S'trial_loop.thisTrialN'
p8248
I135
sg6370
g7571
sS'block_loop.thisIndex'
p8249
g6364
sg38
S'left'
p8250
sg58
g62
sS'trial_loop.thisN'
p8251
I135
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p8252
g59
(g98
S'\x87\x00\x00\x00'
tRp8253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8254
I0
sg6379
g7578
sS'block_loop.thisRepN'
p8255
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8256
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p8257
Nsg69
Vn
sS'block_loop.thisTrialN'
p8258
I0
sg39
F1.1333815908910765
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1a\x08\x0b\xe2\xf8'
tRp8259
sa(dp8260
S'trial_loop.thisTrialN'
p8261
I136
sg6370
g6858
sS'block_loop.thisIndex'
p8262
g6364
sg38
S'left'
p8263
sg58
g62
sS'trial_loop.thisN'
p8264
I136
sg33
g6869
sg63
g64
sS'trial_loop.thisIndex'
p8265
g59
(g98
S'\x88\x00\x00\x00'
tRp8266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8267
I0
sg6379
g6866
sS'block_loop.thisRepN'
p8268
I2
sg6382
g6862
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8269
I2
sg6384
g6869
sg55
g11
sS'block_loop.thisTrial'
p8270
Nsg69
Vn
sS'block_loop.thisTrialN'
p8271
I0
sg39
F0.86645305237107095
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1a\x0e\x0e\x9aH'
tRp8272
sa(dp8273
S'trial_loop.thisTrialN'
p8274
I137
sg6370
g6665
sS'block_loop.thisIndex'
p8275
g6364
sg38
S'right'
p8276
sg58
g62
sS'trial_loop.thisN'
p8277
I137
sg33
g6669
sg63
g64
sS'trial_loop.thisIndex'
p8278
g59
(g98
S'\x89\x00\x00\x00'
tRp8279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8280
I0
sg6379
g6673
sS'block_loop.thisRepN'
p8281
I2
sg6382
g6669
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8282
I2
sg6384
g6676
sg55
g11
sS'block_loop.thisTrial'
p8283
Nsg69
Vn
sS'block_loop.thisTrialN'
p8284
I0
sg39
F0.88343975084717385
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1a\x14\r\x07\xf0'
tRp8285
sa(dp8286
S'trial_loop.thisTrialN'
p8287
I138
sg6370
g7017
sS'block_loop.thisIndex'
p8288
g6364
sg38
S'right'
p8289
sg58
g62
sS'trial_loop.thisN'
p8290
I138
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p8291
g59
(g98
S'\x8a\x00\x00\x00'
tRp8292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8293
I0
sg6379
g7024
sS'block_loop.thisRepN'
p8294
I2
sg6382
g6452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8295
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p8296
Nsg69
Vn
sS'block_loop.thisTrialN'
p8297
I0
sg39
F0.76673210611988907
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1a\x1a\x0b\xb00'
tRp8298
sa(dp8299
S'trial_loop.thisTrialN'
p8300
I139
sg6370
g6521
sS'block_loop.thisIndex'
p8301
g6364
sg38
S'right'
p8302
sg58
g62
sS'trial_loop.thisN'
p8303
I139
sg33
g6532
sg63
g64
sS'trial_loop.thisIndex'
p8304
g59
(g98
S'\x8b\x00\x00\x00'
tRp8305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8306
I0
sg6379
g6529
sS'block_loop.thisRepN'
p8307
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8308
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p8309
Nsg69
Vn
sS'block_loop.thisTrialN'
p8310
I0
sg39
F0.7167798314949323
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1a \x08\xae\xa8'
tRp8311
sa(dp8312
S'trial_loop.thisTrialN'
p8313
I140
sg6370
g6989
sS'block_loop.thisIndex'
p8314
g6364
sg38
S'left'
p8315
sg58
g62
sS'trial_loop.thisN'
p8316
I140
sg33
g6555
sg63
g64
sS'trial_loop.thisIndex'
p8317
g59
(g98
S'\x8c\x00\x00\x00'
tRp8318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8319
I0
sg6379
g6996
sS'block_loop.thisRepN'
p8320
I2
sg6382
g6555
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8321
I2
sg6384
g6562
sg55
g11
sS'block_loop.thisTrial'
p8322
Nsg69
Vn
sS'block_loop.thisTrialN'
p8323
I0
sg39
F1.1168447767813632
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1a&\x04\xf9p'
tRp8324
sa(dp8325
S'trial_loop.thisTrialN'
p8326
I141
sg6370
g7461
sS'block_loop.thisIndex'
p8327
g6364
sg38
S'right'
p8328
sg58
g62
sS'trial_loop.thisN'
p8329
I141
sg33
g6686
sg63
g64
sS'trial_loop.thisIndex'
p8330
g59
(g98
S'\x8d\x00\x00\x00'
tRp8331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8332
I0
sg6379
g7468
sS'block_loop.thisRepN'
p8333
I2
sg6382
g6686
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8334
I2
sg6384
g6693
sg55
g11
sS'block_loop.thisTrial'
p8335
Nsg69
Vn
sS'block_loop.thisTrialN'
p8336
I0
sg39
F0.78343627265348914
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1a,\x073\xc0'
tRp8337
sa(dp8338
S'trial_loop.thisTrialN'
p8339
I142
sg6370
g6729
sS'block_loop.thisIndex'
p8340
g6364
sg38
S'left'
p8341
sg58
g62
sS'trial_loop.thisN'
p8342
I142
sg33
g6740
sg63
g64
sS'trial_loop.thisIndex'
p8343
g59
(g98
S'\x8e\x00\x00\x00'
tRp8344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8345
I0
sg6379
g6737
sS'block_loop.thisRepN'
p8346
I2
sg6382
g6733
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8347
I2
sg6384
g6740
sg55
g11
sS'block_loop.thisTrial'
p8348
Nsg69
Vn
sS'block_loop.thisTrialN'
p8349
I0
sg39
F0.68353799555916339
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1a2\x04p\xb8'
tRp8350
sa(dp8351
S'trial_loop.thisTrialN'
p8352
I143
sg6370
g7308
sS'block_loop.thisIndex'
p8353
g6364
sg38
S'left'
p8354
sg58
g62
sS'trial_loop.thisN'
p8355
I143
sg33
g6669
sg63
g64
sS'trial_loop.thisIndex'
p8356
g59
(g98
S'\x8f\x00\x00\x00'
tRp8357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8358
I0
sg6379
g7315
sS'block_loop.thisRepN'
p8359
I2
sg6382
g6669
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8360
I2
sg6384
g6676
sg55
g11
sS'block_loop.thisTrial'
p8361
Nsg69
Vn
sS'block_loop.thisTrialN'
p8362
I0
sg39
F0.65016615501372144
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1a8\x00\x03\xe8'
tRp8363
sa(dp8364
S'trial_loop.thisTrialN'
p8365
I144
sg6370
g7254
sS'block_loop.thisIndex'
p8366
g6364
sg38
S'right'
p8367
sg58
g62
sS'trial_loop.thisN'
p8368
I144
sg33
g6710
sg63
g64
sS'trial_loop.thisIndex'
p8369
g59
(g98
S'\x90\x00\x00\x00'
tRp8370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8371
I0
sg6379
g7261
sS'block_loop.thisRepN'
p8372
I2
sg6382
g6703
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8373
I2
sg6384
g6710
sg55
g11
sS'block_loop.thisTrial'
p8374
Nsg69
Vn
sS'block_loop.thisTrialN'
p8375
I0
sg39
F0.96674305387568893
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1b\x01\n\\X'
tRp8376
sa(dp8377
S'trial_loop.thisTrialN'
p8378
I145
sg6370
g6371
sS'block_loop.thisIndex'
p8379
g6364
sg38
S'right'
p8380
sg58
g62
sS'trial_loop.thisN'
p8381
I145
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8382
g59
(g98
S'\x91\x00\x00\x00'
tRp8383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8384
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8385
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8386
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8387
Nsg69
Vn
sS'block_loop.thisTrialN'
p8388
I0
sg39
F0.88324474393812125
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1b\x07\ns\xc8'
tRp8389
sa(dp8390
S'trial_loop.thisTrialN'
p8391
I146
sg6370
g6581
sS'block_loop.thisIndex'
p8392
g6364
sg38
S'right'
p8393
sg58
g62
sS'trial_loop.thisN'
p8394
I146
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p8395
g59
(g98
S'\x92\x00\x00\x00'
tRp8396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8397
I0
sg6379
g6589
sS'block_loop.thisRepN'
p8398
I2
sg6382
g6585
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8399
I2
sg6384
g6592
sg55
g11
sS'block_loop.thisTrial'
p8400
Nsg69
Vn
sS'block_loop.thisTrialN'
p8401
I0
sg39
F0.88344659319409402
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1b\r\t\x1f\xf0'
tRp8402
sa(dp8403
S'trial_loop.thisTrialN'
p8404
I147
sg6370
g6699
sS'block_loop.thisIndex'
p8405
g6364
sg38
S'left'
p8406
sg58
g62
sS'trial_loop.thisN'
p8407
I147
sg33
g6703
sg63
g64
sS'trial_loop.thisIndex'
p8408
g59
(g98
S'\x93\x00\x00\x00'
tRp8409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8410
I0
sg6379
g6707
sS'block_loop.thisRepN'
p8411
I2
sg6382
g6703
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8412
I2
sg6384
g6710
sg55
g11
sS'block_loop.thisTrial'
p8413
Nsg69
Vn
sS'block_loop.thisTrialN'
p8414
I0
sg39
F1.1334756731739617
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1b\x13\x08\x06\xb0'
tRp8415
sa(dp8416
S'trial_loop.thisTrialN'
p8417
I148
sg6370
g6391
sS'block_loop.thisIndex'
p8418
g6364
sg38
S'left'
p8419
sg58
g62
sS'trial_loop.thisN'
p8420
I148
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8421
g59
(g98
S'\x94\x00\x00\x00'
tRp8422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8423
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8424
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8425
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8426
Nsg69
Vn
sS'block_loop.thisTrialN'
p8427
I0
sg39
F0.71687163299429812
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1b\x19\n\x7f\x80'
tRp8428
sa(dp8429
S'trial_loop.thisTrialN'
p8430
I149
sg6370
g7073
sS'block_loop.thisIndex'
p8431
g6364
sg38
S'left'
p8432
sg58
g62
sS'trial_loop.thisN'
p8433
I149
sg33
g7083
sg63
g64
sS'trial_loop.thisIndex'
p8434
g59
(g98
S'\x95\x00\x00\x00'
tRp8435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8436
I0
sg6379
g7081
sS'block_loop.thisRepN'
p8437
I2
sg6382
g7083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8438
I2
sg6384
g7077
sg55
g11
sS'block_loop.thisTrial'
p8439
Nsg69
Vn
sS'block_loop.thisTrialN'
p8440
I0
sg39
F0.70019626133944257
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1b\x1f\x06\x87\xe0'
tRp8441
sa(dp8442
S'trial_loop.thisTrialN'
p8443
I150
sg6370
g7105
sS'block_loop.thisIndex'
p8444
g6364
sg38
S'left'
p8445
sg58
g62
sS'trial_loop.thisN'
p8446
I150
sg33
g6532
sg63
g64
sS'trial_loop.thisIndex'
p8447
g59
(g98
S'\x96\x00\x00\x00'
tRp8448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8449
I0
sg6379
g7112
sS'block_loop.thisRepN'
p8450
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8451
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p8452
Nsg69
Vn
sS'block_loop.thisTrialN'
p8453
I0
sg39
F0.96682487694852171
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1b%\x02\x94('
tRp8454
sa(dp8455
S'trial_loop.thisTrialN'
p8456
I151
sg6370
g7073
sS'block_loop.thisIndex'
p8457
g6364
sg38
S'left'
p8458
sg58
g62
sS'trial_loop.thisN'
p8459
I151
sg33
g7083
sg63
g64
sS'trial_loop.thisIndex'
p8460
g59
(g98
S'\x97\x00\x00\x00'
tRp8461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8462
I0
sg6379
g7081
sS'block_loop.thisRepN'
p8463
I2
sg6382
g7083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8464
I2
sg6384
g7077
sg55
g11
sS'block_loop.thisTrial'
p8465
Nsg69
Vn
sS'block_loop.thisTrialN'
p8466
I0
sg39
F0.80015070271110744
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1b+\x02\xab\x98'
tRp8467
sa(dp8468
S'trial_loop.thisTrialN'
p8469
I152
sg6370
g6611
sS'block_loop.thisIndex'
p8470
g6364
sg38
S'left'
p8471
sg58
g62
sS'trial_loop.thisN'
p8472
I152
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p8473
g59
(g98
S'\x98\x00\x00\x00'
tRp8474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8475
I0
sg6379
g6618
sS'block_loop.thisRepN'
p8476
I2
sg6382
g6585
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8477
I2
sg6384
g6592
sg55
g11
sS'block_loop.thisTrial'
p8478
Nsg69
Vn
sS'block_loop.thisTrialN'
p8479
I0
sg39
F1.2168690671169315
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1b0\x0f*\xd0'
tRp8480
sa(dp8481
S'trial_loop.thisTrialN'
p8482
I153
sg6370
g7476
sS'block_loop.thisIndex'
p8483
g6364
sg38
S'left'
p8484
sg58
g62
sS'trial_loop.thisN'
p8485
I153
sg33
g6892
sg63
g64
sS'trial_loop.thisIndex'
p8486
g59
(g98
S'\x99\x00\x00\x00'
tRp8487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8488
I0
sg6379
g7483
sS'block_loop.thisRepN'
p8489
I2
sg6382
g6898
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8490
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p8491
Nsg69
Vn
sS'block_loop.thisTrialN'
p8492
I0
sg39
F1.0668035516355303
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1b7\x03\xd0\x90'
tRp8493
sa(dp8494
S'trial_loop.thisTrialN'
p8495
I154
sg6370
g7308
sS'block_loop.thisIndex'
p8496
g6364
sg38
S'left'
p8497
sg58
g62
sS'trial_loop.thisN'
p8498
I154
sg33
g6669
sg63
g64
sS'trial_loop.thisIndex'
p8499
g59
(g98
S'\x9a\x00\x00\x00'
tRp8500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8501
I0
sg6379
g7315
sS'block_loop.thisRepN'
p8502
I2
sg6382
g6669
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8503
I2
sg6384
g6676
sg55
g11
sS'block_loop.thisTrial'
p8504
Nsg69
Vn
sS'block_loop.thisTrialN'
p8505
I0
sg39
F0.68344277288633748
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1c\x01\x05SH'
tRp8506
sa(dp8507
S'trial_loop.thisTrialN'
p8508
I155
sg6370
g6459
sS'block_loop.thisIndex'
p8509
g6364
sg38
S'left'
p8510
sg58
g62
sS'trial_loop.thisN'
p8511
I155
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8512
g59
(g98
S'\x9b\x00\x00\x00'
tRp8513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8514
I0
sg6379
g6466
sS'block_loop.thisRepN'
p8515
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8516
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8517
Nsg69
Vn
sS'block_loop.thisTrialN'
p8518
I0
sg39
F0.68318704013654497
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1c\x07\x01!\x10'
tRp8519
sa(dp8520
S'trial_loop.thisTrialN'
p8521
I156
sg6370
g7446
sS'block_loop.thisIndex'
p8522
g6364
sg38
S'right'
p8523
sg58
g62
sS'trial_loop.thisN'
p8524
I156
sg33
g6862
sg63
g64
sS'trial_loop.thisIndex'
p8525
g59
(g98
S'\x9c\x00\x00\x00'
tRp8526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8527
I0
sg6379
g7453
sS'block_loop.thisRepN'
p8528
I2
sg6382
g6862
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8529
I2
sg6384
g6869
sg55
g11
sS'block_loop.thisTrial'
p8530
Nsg69
Vn
sS'block_loop.thisTrialN'
p8531
I0
sg39
F0.89999338573034038
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1c\x0c\x0b\xf6\x80'
tRp8532
sa(dp8533
S'trial_loop.thisTrialN'
p8534
I157
sg6370
g6798
sS'block_loop.thisIndex'
p8535
g6364
sg38
S'left'
p8536
sg58
g62
sS'trial_loop.thisN'
p8537
I157
sg33
g6802
sg63
g64
sS'trial_loop.thisIndex'
p8538
g59
(g98
S'\x9d\x00\x00\x00'
tRp8539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8540
I0
sg6379
g6806
sS'block_loop.thisRepN'
p8541
I2
sg6382
g6802
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8542
I2
sg6384
g6809
sg55
g11
sS'block_loop.thisTrial'
p8543
Nsg69
Vn
sS'block_loop.thisTrialN'
p8544
I0
sg39
F0.91685150508783408
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1c\x12\n\xdd@'
tRp8545
sa(dp8546
S'trial_loop.thisTrialN'
p8547
I158
sg6370
g6551
sS'block_loop.thisIndex'
p8548
g6364
sg38
S'right'
p8549
sg58
g62
sS'trial_loop.thisN'
p8550
I158
sg33
g6562
sg63
g64
sS'trial_loop.thisIndex'
p8551
g59
(g98
S'\x9e\x00\x00\x00'
tRp8552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8553
I0
sg6379
g6559
sS'block_loop.thisRepN'
p8554
I2
sg6382
g6555
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8555
I2
sg6384
g6562
sg55
g11
sS'block_loop.thisTrial'
p8556
Nsg69
Vn
sS'block_loop.thisTrialN'
p8557
I0
sg39
F0.73344180355343269
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1c\x18\n=\x18'
tRp8558
sa(dp8559
S'trial_loop.thisTrialN'
p8560
I159
sg6370
g6408
sS'block_loop.thisIndex'
p8561
g6364
sg38
S'left'
p8562
sg58
g62
sS'trial_loop.thisN'
p8563
I159
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8564
g59
(g98
S'\x9f\x00\x00\x00'
tRp8565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8566
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8567
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8568
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8569
Nsg69
Vn
sS'block_loop.thisTrialN'
p8570
I0
sg39
F0.70035734161137952
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1c\x1e\x06\x87\xe0'
tRp8571
sa(dp8572
S'trial_loop.thisTrialN'
p8573
I160
sg6370
g7308
sS'block_loop.thisIndex'
p8574
g6364
sg38
S'left'
p8575
sg58
g62
sS'trial_loop.thisN'
p8576
I160
sg33
g6669
sg63
g64
sS'trial_loop.thisIndex'
p8577
g59
(g98
S'\xa0\x00\x00\x00'
tRp8578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8579
I0
sg6379
g7315
sS'block_loop.thisRepN'
p8580
I2
sg6382
g6669
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8581
I2
sg6384
g6676
sg55
g11
sS'block_loop.thisTrial'
p8582
Nsg69
Vn
sS'block_loop.thisTrialN'
p8583
I0
sg39
F0.68326715262446669
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1c$\x02\x94('
tRp8584
sa(dp8585
S'trial_loop.thisTrialN'
p8586
I161
sg6370
g7491
sS'block_loop.thisIndex'
p8587
g6364
sg38
S'right'
p8588
sg58
g62
sS'trial_loop.thisN'
p8589
I161
sg33
g7083
sg63
g64
sS'trial_loop.thisIndex'
p8590
g59
(g98
S'\xa1\x00\x00\x00'
tRp8591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8592
I0
sg6379
g7498
sS'block_loop.thisRepN'
p8593
I2
sg6382
g7083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8594
I2
sg6384
g7077
sg55
g11
sS'block_loop.thisTrial'
p8595
Nsg69
Vn
sS'block_loop.thisTrialN'
p8596
I0
sg39
F0.78345423381688306
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1c)\re\xb0'
tRp8597
sa(dp8598
S'trial_loop.thisTrialN'
p8599
I162
sg6370
g7133
sS'block_loop.thisIndex'
p8600
g6364
sg38
S'left'
p8601
sg58
g62
sS'trial_loop.thisN'
p8602
I162
sg33
g7137
sg63
g64
sS'trial_loop.thisIndex'
p8603
g59
(g98
S'\xa2\x00\x00\x00'
tRp8604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8605
I0
sg6379
g7141
sS'block_loop.thisRepN'
p8606
I2
sg6382
g7137
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8607
I2
sg6384
g7144
sg55
g11
sS'block_loop.thisTrial'
p8608
Nsg69
Vn
sS'block_loop.thisTrialN'
p8609
I0
sg39
F0.70021222682044026
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1c/\n\xa2\xa8'
tRp8610
sa(dp8611
S'trial_loop.thisTrialN'
p8612
I163
sg6370
g6905
sS'block_loop.thisIndex'
p8613
g6364
sg38
S'left'
p8614
sg58
g62
sS'trial_loop.thisN'
p8615
I163
sg33
g6909
sg63
g64
sS'trial_loop.thisIndex'
p8616
g59
(g98
S'\xa3\x00\x00\x00'
tRp8617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8618
I0
sg6379
g6913
sS'block_loop.thisRepN'
p8619
I2
sg6382
g6909
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8620
I2
sg6384
g6916
sg55
g11
sS'block_loop.thisTrial'
p8621
Nsg69
Vn
sS'block_loop.thisTrialN'
p8622
I0
sg39
F0.81686256688408321
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1c5\x06\xae\xf0'
tRp8623
sa(dp8624
S'trial_loop.thisTrialN'
p8625
I164
sg6370
g7377
sS'block_loop.thisIndex'
p8626
g6364
sg38
S'right'
p8627
sg58
g62
sS'trial_loop.thisN'
p8628
I164
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8629
g59
(g98
S'\xa4\x00\x00\x00'
tRp8630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8631
I0
sg6379
g7384
sS'block_loop.thisRepN'
p8632
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8633
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8634
Nsg69
Vn
sS'block_loop.thisTrialN'
p8635
I0
sg39
F0.73348029175758711
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1c;\x04e\x00'
tRp8636
sa(dp8637
S'trial_loop.thisTrialN'
p8638
I165
sg6370
g6888
sS'block_loop.thisIndex'
p8639
g6364
sg38
S'right'
p8640
sg58
g62
sS'trial_loop.thisN'
p8641
I165
sg33
g6898
sg63
g64
sS'trial_loop.thisIndex'
p8642
g59
(g98
S'\xa5\x00\x00\x00'
tRp8643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8644
I0
sg6379
g6896
sS'block_loop.thisRepN'
p8645
I2
sg6382
g6898
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8646
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p8647
Nsg69
Vn
sS'block_loop.thisTrialN'
p8648
I0
sg39
F0.73353759641759098
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1d\x05\x00\xab\xe0'
tRp8649
sa(dp8650
S'trial_loop.thisTrialN'
p8651
I166
sg6370
g6408
sS'block_loop.thisIndex'
p8652
g6364
sg38
S'left'
p8653
sg58
g62
sS'trial_loop.thisN'
p8654
I166
sg33
g6419
sg63
g64
sS'trial_loop.thisIndex'
p8655
g59
(g98
S'\xa6\x00\x00\x00'
tRp8656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8657
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8658
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8659
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8660
Nsg69
Vn
sS'block_loop.thisTrialN'
p8661
I0
sg39
F0.75010320541332476
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1d\n\x0cs\x80'
tRp8662
sa(dp8663
S'trial_loop.thisTrialN'
p8664
I167
sg6370
g6948
sS'block_loop.thisIndex'
p8665
g6364
sg38
S'left'
p8666
sg58
g62
sS'trial_loop.thisN'
p8667
I167
sg33
g6508
sg63
g64
sS'trial_loop.thisIndex'
p8668
g59
(g98
S'\xa7\x00\x00\x00'
tRp8669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8670
I0
sg6379
g6955
sS'block_loop.thisRepN'
p8671
I2
sg6382
g6508
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8672
I2
sg6384
g6515
sg55
g11
sS'block_loop.thisTrial'
p8673
Nsg69
Vn
sS'block_loop.thisTrialN'
p8674
I0
sg39
F0.6502117706622812
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1d\x10\t7`'
tRp8675
sa(dp8676
S'trial_loop.thisTrialN'
p8677
I168
sg6370
g7571
sS'block_loop.thisIndex'
p8678
g6364
sg38
S'left'
p8679
sg58
g62
sS'trial_loop.thisN'
p8680
I168
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p8681
g59
(g98
S'\xa8\x00\x00\x00'
tRp8682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8683
I0
sg6379
g7578
sS'block_loop.thisRepN'
p8684
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8685
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p8686
Nsg69
Vn
sS'block_loop.thisTrialN'
p8687
I0
sg39
F1.0335200914159941
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1d\x16\x04M\x90'
tRp8688
sa(dp8689
S'trial_loop.thisTrialN'
p8690
I169
sg6370
g7349
sS'block_loop.thisIndex'
p8691
g6364
sg38
S'right'
p8692
sg58
g62
sS'trial_loop.thisN'
p8693
I169
sg33
g7137
sg63
g64
sS'trial_loop.thisIndex'
p8694
g59
(g98
S'\xa9\x00\x00\x00'
tRp8695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8696
I0
sg6379
g7356
sS'block_loop.thisRepN'
p8697
I2
sg6382
g7137
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8698
I2
sg6384
g7144
sg55
g11
sS'block_loop.thisTrial'
p8699
Nsg69
Vn
sS'block_loop.thisTrialN'
p8700
I0
sg39
F0.70009049004875124
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1d\x1c\x05[\x18'
tRp8701
sa(dp8702
S'trial_loop.thisTrialN'
p8703
I170
sg6370
g6828
sS'block_loop.thisIndex'
p8704
g6364
sg38
S'right'
p8705
sg58
g62
sS'trial_loop.thisN'
p8706
I170
sg33
g6802
sg63
g64
sS'trial_loop.thisIndex'
p8707
g59
(g98
S'\xaa\x00\x00\x00'
tRp8708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8709
I0
sg6379
g6835
sS'block_loop.thisRepN'
p8710
I2
sg6382
g6802
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8711
I2
sg6384
g6809
sg55
g11
sS'block_loop.thisTrial'
p8712
Nsg69
Vn
sS'block_loop.thisTrialN'
p8713
I0
sg39
F0.65011027583750547
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1d"\x01(\xe0'
tRp8714
sa(dp8715
S'trial_loop.thisTrialN'
p8716
I171
sg6370
g6391
sS'block_loop.thisIndex'
p8717
g6364
sg38
S'left'
p8718
sg58
g62
sS'trial_loop.thisN'
p8719
I171
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8720
g59
(g98
S'\xab\x00\x00\x00'
tRp8721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8722
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8723
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8724
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8725
Nsg69
Vn
sS'block_loop.thisTrialN'
p8726
I0
sg39
F0.68346558071061736
sg34
g752
(S"\x07\xdf\t\x1c\x12\x1d'\x0b\xbf\xd0"
tRp8727
sa(dp8728
S'trial_loop.thisTrialN'
p8729
I172
sg6370
g6459
sS'block_loop.thisIndex'
p8730
g6364
sg38
S'left'
p8731
sg58
g62
sS'trial_loop.thisN'
p8732
I172
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8733
g59
(g98
S'\xac\x00\x00\x00'
tRp8734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8735
I0
sg6379
g6466
sS'block_loop.thisRepN'
p8736
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8737
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8738
Nsg69
Vn
sS'block_loop.thisTrialN'
p8739
I0
sg39
F0.84992308060827781
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1d-\x07O\x18'
tRp8740
sa(dp8741
S'trial_loop.thisTrialN'
p8742
I173
sg6370
g6888
sS'block_loop.thisIndex'
p8743
g6364
sg38
S'right'
p8744
sg58
g62
sS'trial_loop.thisN'
p8745
I173
sg33
g6898
sg63
g64
sS'trial_loop.thisIndex'
p8746
g59
(g98
S'\xad\x00\x00\x00'
tRp8747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8748
I0
sg6379
g6896
sS'block_loop.thisRepN'
p8749
I2
sg6382
g6898
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8750
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p8751
Nsg69
Vn
sS'block_loop.thisTrialN'
p8752
I0
sg39
F0.75019671749760164
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1d3\x05\x82('
tRp8753
sa(dp8754
S'trial_loop.thisTrialN'
p8755
I174
sg6370
g6843
sS'block_loop.thisIndex'
p8756
g6364
sg38
S'right'
p8757
sg58
g62
sS'trial_loop.thisN'
p8758
I174
sg33
g6733
sg63
g64
sS'trial_loop.thisIndex'
p8759
g59
(g98
S'\xae\x00\x00\x00'
tRp8760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8761
I0
sg6379
g6850
sS'block_loop.thisRepN'
p8762
I2
sg6382
g6733
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8763
I2
sg6384
g6740
sg55
g11
sS'block_loop.thisTrial'
p8764
Nsg69
Vn
sS'block_loop.thisTrialN'
p8765
I0
sg39
F0.7668549832815188
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1d9\x02B '
tRp8766
sa(dp8767
S'trial_loop.thisTrialN'
p8768
I175
sg6370
g6798
sS'block_loop.thisIndex'
p8769
g6364
sg38
S'left'
p8770
sg58
g62
sS'trial_loop.thisN'
p8771
I175
sg33
g6802
sg63
g64
sS'trial_loop.thisIndex'
p8772
g59
(g98
S'\xaf\x00\x00\x00'
tRp8773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8774
I0
sg6379
g6806
sS'block_loop.thisRepN'
p8775
I2
sg6382
g6802
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8776
I2
sg6384
g6809
sg55
g11
sS'block_loop.thisTrial'
p8777
Nsg69
Vn
sS'block_loop.thisTrialN'
p8778
I0
sg39
F0.91674972516557318
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1e\x02\x0e\x82\xd8'
tRp8779
sa(dp8780
S'trial_loop.thisTrialN'
p8781
I176
sg6370
g6665
sS'block_loop.thisIndex'
p8782
g6364
sg38
S'right'
p8783
sg58
g62
sS'trial_loop.thisN'
p8784
I176
sg33
g6669
sg63
g64
sS'trial_loop.thisIndex'
p8785
g59
(g98
S'\xb0\x00\x00\x00'
tRp8786
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8787
I0
sg6379
g6673
sS'block_loop.thisRepN'
p8788
I2
sg6382
g6669
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8789
I2
sg6384
g6676
sg55
g11
sS'block_loop.thisTrial'
p8790
Nsg69
Vn
sS'block_loop.thisTrialN'
p8791
I0
sg39
F0.71677698051644256
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1e\x08\r\xa8\x18'
tRp8792
sa(dp8793
S'trial_loop.thisTrialN'
p8794
I177
sg6370
g7377
sS'block_loop.thisIndex'
p8795
g6364
sg38
S'right'
p8796
sg58
g62
sS'trial_loop.thisN'
p8797
I177
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8798
g59
(g98
S'\xb1\x00\x00\x00'
tRp8799
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8800
I0
sg6379
g7384
sS'block_loop.thisRepN'
p8801
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8802
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8803
Nsg69
Vn
sS'block_loop.thisTrialN'
p8804
I0
sg39
F2.0668446057206893
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1e\x0e\t\xee\xf8'
tRp8805
sa(dp8806
S'trial_loop.thisTrialN'
p8807
I178
sg6370
g6425
sS'block_loop.thisIndex'
p8808
g6364
sg38
S'right'
p8809
sg58
g62
sS'trial_loop.thisN'
p8810
I178
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p8811
g59
(g98
S'\xb2\x00\x00\x00'
tRp8812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8813
I0
sg6379
g6433
sS'block_loop.thisRepN'
p8814
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8815
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8816
Nsg69
Vn
sS'block_loop.thisTrialN'
p8817
I0
sg39
F0.71676500641115126
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1e\x15\x0bm\xc8'
tRp8818
sa(dp8819
S'trial_loop.thisTrialN'
p8820
I179
sg6370
g6442
sS'block_loop.thisIndex'
p8821
g6364
sg38
S'left'
p8822
sg58
g62
sS'trial_loop.thisN'
p8823
I179
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p8824
g59
(g98
S'\xb3\x00\x00\x00'
tRp8825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8826
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8827
I2
sg6382
g6452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8828
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p8829
Nsg69
Vn
sS'block_loop.thisTrialN'
p8830
I0
sg39
F0.86680172701017
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1e\x1b\x07\xb8\x90'
tRp8831
sa(dp8832
S'trial_loop.thisTrialN'
p8833
I180
sg6370
g7105
sS'block_loop.thisIndex'
p8834
g6364
sg38
S'left'
p8835
sg58
g62
sS'trial_loop.thisN'
p8836
I180
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p8837
g59
(g98
S'\xb4\x00\x00\x00'
tRp8838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8839
I0
sg6379
g7112
sS'block_loop.thisRepN'
p8840
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8841
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p8842
Nsg69
Vn
sS'block_loop.thisTrialN'
p8843
I0
sg39
F0.71681546872059698
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1e!\x06&8'
tRp8844
sa(dp8845
S'trial_loop.thisTrialN'
p8846
I181
sg6370
g7032
sS'block_loop.thisIndex'
p8847
g6364
sg38
S'right'
p8848
sg58
g62
sS'trial_loop.thisN'
p8849
I181
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8850
g59
(g98
S'\xb5\x00\x00\x00'
tRp8851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8852
I0
sg6379
g7039
sS'block_loop.thisRepN'
p8853
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8854
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8855
Nsg69
Vn
sS'block_loop.thisTrialN'
p8856
I0
sg39
F0.73351393330085557
sg34
g752
(S"\x07\xdf\t\x1c\x12\x1e'\x022\x80"
tRp8857
sa(dp8858
S'trial_loop.thisTrialN'
p8859
I182
sg6370
g6858
sS'block_loop.thisIndex'
p8860
g6364
sg38
S'left'
p8861
sg58
g62
sS'trial_loop.thisN'
p8862
I182
sg33
g6869
sg63
g64
sS'trial_loop.thisIndex'
p8863
g59
(g98
S'\xb6\x00\x00\x00'
tRp8864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8865
I0
sg6379
g6866
sS'block_loop.thisRepN'
p8866
I2
sg6382
g6862
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8867
I2
sg6384
g6869
sg55
g11
sS'block_loop.thisTrial'
p8868
Nsg69
Vn
sS'block_loop.thisTrialN'
p8869
I0
sg39
F0.79999047773162602
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1e,\r\xfa '
tRp8870
sa(dp8871
S'trial_loop.thisTrialN'
p8872
I183
sg6370
g7090
sS'block_loop.thisIndex'
p8873
g6364
sg38
S'right'
p8874
sg58
g62
sS'trial_loop.thisN'
p8875
I183
sg33
g6909
sg63
g64
sS'trial_loop.thisIndex'
p8876
g59
(g98
S'\xb7\x00\x00\x00'
tRp8877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8878
I0
sg6379
g7097
sS'block_loop.thisRepN'
p8879
I2
sg6382
g6909
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8880
I2
sg6384
g6916
sg55
g11
sS'block_loop.thisTrial'
p8881
Nsg69
Vn
sS'block_loop.thisTrialN'
p8882
I0
sg39
F0.850531764459447
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1e2\x0bq\xb0'
tRp8883
sa(dp8884
S'trial_loop.thisTrialN'
p8885
I184
sg6370
g7017
sS'block_loop.thisIndex'
p8886
g6364
sg38
S'right'
p8887
sg58
g62
sS'trial_loop.thisN'
p8888
I184
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p8889
g59
(g98
S'\xb8\x00\x00\x00'
tRp8890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8891
I0
sg6379
g7024
sS'block_loop.thisRepN'
p8892
I2
sg6382
g6452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8893
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p8894
Nsg69
Vn
sS'block_loop.thisTrialN'
p8895
I0
sg39
F0.63341580262931529
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1e8\t\xa0\xd8'
tRp8896
sa(dp8897
S'trial_loop.thisTrialN'
p8898
I185
sg6370
g7105
sS'block_loop.thisIndex'
p8899
g6364
sg38
S'left'
p8900
sg58
g62
sS'trial_loop.thisN'
p8901
I185
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p8902
g59
(g98
S'\xb9\x00\x00\x00'
tRp8903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8904
I0
sg6379
g7112
sS'block_loop.thisRepN'
p8905
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8906
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p8907
Nsg69
Vn
sS'block_loop.thisTrialN'
p8908
I0
sg39
F0.65021120046731085
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1f\x02\x04|p'
tRp8909
sa(dp8910
S'trial_loop.thisTrialN'
p8911
I186
sg6370
g6888
sS'block_loop.thisIndex'
p8912
g6364
sg38
S'right'
p8913
sg58
g62
sS'trial_loop.thisN'
p8914
I186
sg33
g6898
sg63
g64
sS'trial_loop.thisIndex'
p8915
g59
(g98
S'\xba\x00\x00\x00'
tRp8916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8917
I0
sg6379
g6896
sS'block_loop.thisRepN'
p8918
I2
sg6382
g6898
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8919
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p8920
Nsg69
Vn
sS'block_loop.thisTrialN'
p8921
I0
sg39
F0.80018605483928695
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1f\x07\x0f\x13`'
tRp8922
sa(dp8923
S'trial_loop.thisTrialN'
p8924
I187
sg6370
g6425
sS'block_loop.thisIndex'
p8925
g6364
sg38
S'right'
p8926
sg58
g62
sS'trial_loop.thisN'
p8927
I187
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8928
g59
(g98
S'\xbb\x00\x00\x00'
tRp8929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8930
I0
sg6379
g6433
sS'block_loop.thisRepN'
p8931
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8932
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8933
Nsg69
Vn
sS'block_loop.thisTrialN'
p8934
I0
sg39
F0.68346729129916639
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1f\r\x0c\x8a\xf0'
tRp8935
sa(dp8936
S'trial_loop.thisTrialN'
p8937
I188
sg6370
g6682
sS'block_loop.thisIndex'
p8938
g6364
sg38
S'left'
p8939
sg58
g62
sS'trial_loop.thisN'
p8940
I188
sg33
g6686
sg63
g64
sS'trial_loop.thisIndex'
p8941
g59
(g98
S'\xbc\x00\x00\x00'
tRp8942
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8943
I0
sg6379
g6690
sS'block_loop.thisRepN'
p8944
I2
sg6382
g6686
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8945
I2
sg6384
g6693
sg55
g11
sS'block_loop.thisTrial'
p8946
Nsg69
Vn
sS'block_loop.thisTrialN'
p8947
I0
sg39
F0.70022562641679542
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1f\x13\x08\x1e '
tRp8948
sa(dp8949
S'trial_loop.thisTrialN'
p8950
I189
sg6370
g7090
sS'block_loop.thisIndex'
p8951
g6364
sg38
S'right'
p8952
sg58
g62
sS'trial_loop.thisN'
p8953
I189
sg33
g6909
sg63
g64
sS'trial_loop.thisIndex'
p8954
g59
(g98
S'\xbd\x00\x00\x00'
tRp8955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8956
I0
sg6379
g7097
sS'block_loop.thisRepN'
p8957
I2
sg6382
g6909
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8958
I2
sg6384
g6916
sg55
g11
sS'block_loop.thisTrial'
p8959
Nsg69
Vn
sS'block_loop.thisTrialN'
p8960
I0
sg39
F0.65021661732316716
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1f\x19\x04*h'
tRp8961
sa(dp8962
S'trial_loop.thisTrialN'
p8963
I190
sg6370
g7418
sS'block_loop.thisIndex'
p8964
g6364
sg38
S'left'
p8965
sg58
g62
sS'trial_loop.thisN'
p8966
I190
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8967
g59
(g98
S'\xbe\x00\x00\x00'
tRp8968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8969
I0
sg6379
g7425
sS'block_loop.thisRepN'
p8970
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8971
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8972
Nsg69
Vn
sS'block_loop.thisTrialN'
p8973
I0
sg39
F0.66688029997021658
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1f\x1e\x0e\x82\xd8'
tRp8974
sa(dp8975
S'trial_loop.thisTrialN'
p8976
I191
sg6370
g7308
sS'block_loop.thisIndex'
p8977
g6364
sg38
S'left'
p8978
sg58
g62
sS'trial_loop.thisN'
p8979
I191
sg33
g6669
sg63
g64
sS'trial_loop.thisIndex'
p8980
g59
(g98
S'\xbf\x00\x00\x00'
tRp8981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8982
I0
sg6379
g7315
sS'block_loop.thisRepN'
p8983
I2
sg6382
g6669
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8984
I2
sg6384
g6676
sg55
g11
sS'block_loop.thisTrial'
p8985
Nsg69
Vn
sS'block_loop.thisTrialN'
p8986
I0
sg39
F0.75011974108565482
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1f$\t\xd7\x88'
tRp8987
sa(dp8988
S'trial_loop.thisTrialN'
p8989
I192
sg6370
g6905
sS'block_loop.thisIndex'
p8990
g6364
sg38
S'left'
p8991
sg58
g62
sS'trial_loop.thisN'
p8992
I192
sg33
g6909
sg63
g64
sS'trial_loop.thisIndex'
p8993
g59
(g98
S'\xc0\x00\x00\x00'
tRp8994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8995
I0
sg6379
g6913
sS'block_loop.thisRepN'
p8996
I2
sg6382
g6909
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8997
I2
sg6384
g6916
sg55
g11
sS'block_loop.thisTrial'
p8998
Nsg69
Vn
sS'block_loop.thisTrialN'
p8999
I0
sg39
F0.60017596237594262
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1f*\x06\x9bh'
tRp9000
sa(dp9001
S'trial_loop.thisTrialN'
p9002
I193
sg6370
g7133
sS'block_loop.thisIndex'
p9003
g6364
sg38
S'left'
p9004
sg58
g62
sS'trial_loop.thisN'
p9005
I193
sg33
g7137
sg63
g64
sS'trial_loop.thisIndex'
p9006
g59
(g98
S'\xc1\x00\x00\x00'
tRp9007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9008
I0
sg6379
g7141
sS'block_loop.thisRepN'
p9009
I2
sg6382
g7137
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9010
I2
sg6384
g7144
sg55
g11
sS'block_loop.thisTrial'
p9011
Nsg69
Vn
sS'block_loop.thisTrialN'
p9012
I0
sg39
F0.63324189295599353
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1f0\x00\xfa\x00'
tRp9013
sa(dp9014
S'trial_loop.thisTrialN'
p9015
I194
sg6370
g6989
sS'block_loop.thisIndex'
p9016
g6364
sg38
S'left'
p9017
sg58
g62
sS'trial_loop.thisN'
p9018
I194
sg33
g6562
sg63
g64
sS'trial_loop.thisIndex'
p9019
g59
(g98
S'\xc2\x00\x00\x00'
tRp9020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9021
I0
sg6379
g6996
sS'block_loop.thisRepN'
p9022
I2
sg6382
g6555
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9023
I2
sg6384
g6562
sg55
g11
sS'block_loop.thisTrial'
p9024
Nsg69
Vn
sS'block_loop.thisTrialN'
p9025
I0
sg39
F0.85019991059380118
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1f5\x0b\x17\xd8'
tRp9026
sa(dp9027
S'trial_loop.thisTrialN'
p9028
I195
sg6370
g7254
sS'block_loop.thisIndex'
p9029
g6364
sg38
S'right'
p9030
sg58
g62
sS'trial_loop.thisN'
p9031
I195
sg33
g6703
sg63
g64
sS'trial_loop.thisIndex'
p9032
g59
(g98
S'\xc3\x00\x00\x00'
tRp9033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9034
I0
sg6379
g7261
sS'block_loop.thisRepN'
p9035
I2
sg6382
g6703
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9036
I2
sg6384
g6710
sg55
g11
sS'block_loop.thisTrial'
p9037
Nsg69
Vn
sS'block_loop.thisTrialN'
p9038
I0
sg39
F1.1835342892845802
sg34
g752
(S'\x07\xdf\t\x1c\x12\x1f;\tG\x00'
tRp9039
sa(dp9040
S'trial_loop.thisTrialN'
p9041
I196
sg6370
g6521
sS'block_loop.thisIndex'
p9042
g6364
sg38
S'right'
p9043
sg58
g62
sS'trial_loop.thisN'
p9044
I196
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p9045
g59
(g98
S'\xc4\x00\x00\x00'
tRp9046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9047
I0
sg6379
g6529
sS'block_loop.thisRepN'
p9048
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9049
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p9050
Nsg69
Vn
sS'block_loop.thisTrialN'
p9051
I0
sg39
F0.81689107666898053
sg34
g752
(S'\x07\xdf\t\x1c\x12 \x05\x0c\xb5\xe8'
tRp9052
sa(dp9053
S'trial_loop.thisTrialN'
p9054
I197
sg6370
g7571
sS'block_loop.thisIndex'
p9055
g6364
sg38
S'left'
p9056
sg58
g62
sS'trial_loop.thisN'
p9057
I197
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p9058
g59
(g98
S'\xc5\x00\x00\x00'
tRp9059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9060
I0
sg6379
g7578
sS'block_loop.thisRepN'
p9061
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9062
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p9063
Nsg69
Vn
sS'block_loop.thisTrialN'
p9064
I0
sg39
F0.76687465503346175
sg34
g752
(S'\x07\xdf\t\x1c\x12 \x0b\nk\xf8'
tRp9065
sa(dp9066
S'trial_loop.thisTrialN'
p9067
I198
sg6370
g7349
sS'block_loop.thisIndex'
p9068
g6364
sg38
S'right'
p9069
sg58
g62
sS'trial_loop.thisN'
p9070
I198
sg33
g7137
sg63
g64
sS'trial_loop.thisIndex'
p9071
g59
(g98
S'\xc6\x00\x00\x00'
tRp9072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9073
I0
sg6379
g7356
sS'block_loop.thisRepN'
p9074
I2
sg6382
g7137
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9075
I2
sg6384
g7144
sg55
g11
sS'block_loop.thisTrial'
p9076
Nsg69
Vn
sS'block_loop.thisTrialN'
p9077
I0
sg39
F0.60014203573518898
sg34
g752
(S'\x07\xdf\t\x1c\x12 \x11\x07jp'
tRp9078
sa(dp9079
S'trial_loop.thisTrialN'
p9080
I199
sg6370
g7476
sS'block_loop.thisIndex'
p9081
g6364
sg38
S'left'
p9082
sg58
g62
sS'trial_loop.thisN'
p9083
I199
sg33
g6898
sg63
g64
sS'trial_loop.thisIndex'
p9084
g59
(g98
S'\xc7\x00\x00\x00'
tRp9085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9086
I0
sg6379
g7483
sS'block_loop.thisRepN'
p9087
I2
sg6382
g6898
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9088
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p9089
Nsg69
Vn
sS'block_loop.thisTrialN'
p9090
I0
sg39
F0.78346364204480778
sg34
g752
(S'\x07\xdf\t\x1c\x12 \x17\x01\xcc\xf0'
tRp9091
sa(dp9092
S'block_loop.thisRepN'
p9093
I2
sg56
Vr
sS'block_loop.thisIndex'
p9094
g6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p9095
I2
sg55
g11
sg63
g64
sS'block_loop.thisTrial'
p9096
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p9097
I0
sg69
Vn
sa(dp9098
g63
g64
sg43
I72
sg56
Vr
sg57
Vn
sg42
I528
sg58
g62
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp9099
g63
g64
sg43
I72
sg55
g11
sg56
Vr
sg45
F1.3100000000000001
sg42
I528
sg49
F0.01
sg57
Vn
sg58
g62
sg44
I00
sg48
I25
sg47
g641
sg51
F30.280000000000001
sg46
F0.039999999999999161
sg65
g66
sg67
g68
sg50
I0
sg69
Vn
sasS'loops'
p9100
(lp9101
g1
(cpsychopy.data
TrialHandler
p9102
g3
NtRp9103
(dp9104
S'origin'
p9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9106
sS'thisTrial'
p9107
(lp9108
sS'_exp'
p9109
I80044880
sg10
S'bdm_loop1'
p9110
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1_no_eyetracking.py'
p9111
sS'thisRepN'
p9112
I1
sg52
I01
sg53
g54
sS'data'
p9113
g1
(cpsychopy.data
DataHandler
p9114
c__builtin__
dict
p9115
(dp9116
S'ran'
p9117
cnumpy.ma.core
_mareconstruct
p9118
(cnumpy.ma.core
MaskedArray
p9119
g92
(I0
tp9120
S'b'
tRp9121
(I1
(I40
I1
tg60
(S'f4'
I0
I1
tRp9122
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9118
(g9119
g92
g9120
S'b'
tRp9123
(I1
(I40
I1
tg9122
I00
S'333?)\\\x0f?\x00\x00\x00\x00=\n\xd7>\x9a\x99\x99>\x00\x00\x00\x00\x8f\xc2\xf5>\xcd\xcc\xcc=\n\xd7#=\x00\x00\x00\x00\x00\x00\x00\x00\xb8\x1e\x05?\x8f\xc2\xf5=\xcd\xcc\xcc=\n\xd7#=\n\xd7#>)\\\x0f>\n\xd7#>\x8f\xc2\xf5>\x00\x00\x00\x00\x00\x00\x00\x00)\\\x0f>\x00\x00\x00\x00\xd7\xa3p?\n\xd7#>\x00\x00\x00\x00\n\xd7#=\xcd\xccL?\xaeG\xe1>\x00\x00\x00\x00\xcd\xcc\xcc>\xb8\x1e\x05?\x00\x00\x00\x00\n\xd7#>\x00\x00\x00\x00\x9a\x99\x19?\x8f\xc2u>\x8f\xc2\xf5>\n\xd7#=\n\xd7#>'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9118
(g9119
g92
g9120
S'b'
tRp9124
(I1
(I40
I1
tg9122
I00
S'\xbaI\x94@\x10X\xcd@!\xb0\x1a@\x87\x16\xd9@\x98n\x96@\xbaI\x14@\x9a\x99=A\x87\x16q@\xfc\xa9\xc4A\xee|\x07@\x96C#@D\x8b\xc0@B`u@T\xe3\x9d@\x96CS@\xa2E\x10A\xbaI\xac@\xe9&1@!\xb0\xe2@\x10X\xad@\x0e-\x02@\x19\x04(A\x87\x16a@T\xe3\x8d@\x10X\x8d@u\x93\x08@/\xddL@\xee|w@T\xe3=@!\xb0\x1a@\x87\x16\x99@o\x12\x19A\xee|\x07@\xdd$\x9a@B`\x15@w\xbe\xb3@\xdd$\x92@\xbaIT@\xaa\xf1\xb6@\xee|\x8f@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9125
g9118
(g9119
g92
g9120
S'b'
tRp9126
(I1
(I40
I1
tg9122
I00
S'\x00\x00\xb0A\x00\x00\x0cB\x00\x00\xd0A\x00\x00\xa0A\x00\x00\x00A\x00\x00\xe0A\x00\x00\x80@\x00\x00\xe0@\x00\x00\x00\x00\x00\x00 A\x00\x00pA\x00\x00PA\x00\x00\xa0@\x00\x00\xc0@\x00\x00\x18B\x00\x00\x00@\x00\x00\x88A\x00\x00\x90A\x00\x00`A\x00\x00\x80?\x00\x00\x08B\x00\x00\x98A\x00\x00\x10A\x00\x00\x80A\x00\x00\xa8A\x00\x00\x00B\x00\x00\xf0A\x00\x00\x1cB\x00\x00\x04B\x00\x000A\x00\x00\x14B\x00\x00@@\x00\x00\xd8A\x00\x00\xe8A\x00\x00\xf8A\x00\x00@A\x00\x00\xc0A\x00\x00\xb8A\x00\x00\xc8A\x00\x00\x10B'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9118
(g9119
g92
g9120
S'b'
tRp9127
(I1
(I40
I1
tg9122
I00
S'\xcd\xcc\xcc?33\xb3?\x9a\x99\xd9?\x00\x00\xc0?ff\xa6?\xcd\xcc\x8c?\x9a\x99\x99?ff\xa6?ff\xa6?ff\xa6?33\xf3?\xcd\xcc\x8c?33\xb3?\x9a\x99\x99?\x00\x00\xc0?33\xf3?ff\xa6?\xcd\xcc\x8c?\x9a\x99\xd9?\x9a\x99\xd9?ff\xa6?\x9a\x99\xd9?33\xf3?\x9a\x99\xd9?ff\xe6?\x9a\x99\x99?\x00\x00\xc0?\xcd\xcc\xcc?ff\xe6?\xcd\xcc\xcc?ff\xe6?\xcd\xcc\x8c?\x9a\x99\x99?\xcd\xcc\xcc?ff\xe6?\x00\x00\xc0?ff\xe6?\x00\x00\x00@\x9a\x99\x99?\x9a\x99\xd9?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9128
(dp9129
S'isNumeric'
p9130
(dp9131
g9117
I01
sg19
I01
sg20
I01
sg9125
I01
sg21
I01
ssS'trials'
p9132
g9103
sS'dataTypes'
p9133
(lp9134
g9117
ag9125
ag19
ag20
ag21
asS'dataShape'
p9135
(lp9136
I40
aI1
asbsS'method'
p9137
Vrandom
p9138
sS'sequenceIndices'
p9139
g91
(g92
(I0
tS'b'
tRp9140
(I1
(I40
I1
tg98
I01
S'\x08\x00\x00\x00\x13\x00\x00\x00\x0f\x00\x00\x00\x1f\x00\x00\x00\x06\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x07\x00\x00\x00\x04\x00\x00\x00\x16\x00\x00\x00\t\x00\x00\x00\x1d\x00\x00\x00#\x00\x00\x00\x0b\x00\x00\x00\x12\x00\x00\x00\n\x00\x00\x00\x17\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x15\x00\x00\x00\x03\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00%\x00\x00\x00$\x00\x00\x00&\x00\x00\x00\x02\x00\x00\x00 \x00\x00\x00\x05\x00\x00\x00!\x00\x00\x00\x1a\x00\x00\x00"\x00\x00\x00\x19\x00\x00\x00\x1c\x00\x00\x00\x14\x00\x00\x00\x01\x00\x00\x00\'\x00\x00\x00\x1e\x00\x00\x00\x0e\x00\x00\x00\x1b\x00\x00\x00'
tbsS'finished'
p9141
I01
sS'nReps'
p9142
I1
sS'nRemaining'
p9143
I-1
sS'trialList'
p9144
(lp9145
g1
(cpsychopy.data
TrialType
p9146
g9115
(dp9147
g78
g256
stRp9148
ag1
(g9146
g9115
(dp9149
g78
g347
stRp9150
ag1
(g9146
g9115
(dp9151
g78
g284
stRp9152
ag1
(g9146
g9115
(dp9153
g78
g242
stRp9154
ag1
(g9146
g9115
(dp9155
g78
g158
stRp9156
ag1
(g9146
g9115
(dp9157
g78
g298
stRp9158
ag1
(g9146
g9115
(dp9159
g78
g130
stRp9160
ag1
(g9146
g9115
(dp9161
g78
g151
stRp9162
ag1
(g9146
g9115
(dp9163
g78
g102
stRp9164
ag1
(g9146
g9115
(dp9165
g78
g172
stRp9166
ag1
(g9146
g9115
(dp9167
g78
g207
stRp9168
ag1
(g9146
g9115
(dp9169
g78
g193
stRp9170
ag1
(g9146
g9115
(dp9171
g78
g137
stRp9172
ag1
(g9146
g9115
(dp9173
g78
g144
stRp9174
ag1
(g9146
g9115
(dp9175
g78
g368
stRp9176
ag1
(g9146
g9115
(dp9177
g78
g116
stRp9178
ag1
(g9146
g9115
(dp9179
g78
g221
stRp9180
ag1
(g9146
g9115
(dp9181
g78
g228
stRp9182
ag1
(g9146
g9115
(dp9183
g78
g200
stRp9184
ag1
(g9146
g9115
(dp9185
g78
g109
stRp9186
ag1
(g9146
g9115
(dp9187
g78
g340
stRp9188
ag1
(g9146
g9115
(dp9189
g78
g235
stRp9190
ag1
(g9146
g9115
(dp9191
g78
g165
stRp9192
ag1
(g9146
g9115
(dp9193
g78
g214
stRp9194
ag1
(g9146
g9115
(dp9195
g78
g249
stRp9196
ag1
(g9146
g9115
(dp9197
g78
g326
stRp9198
ag1
(g9146
g9115
(dp9199
g78
g312
stRp9200
ag1
(g9146
g9115
(dp9201
g78
g375
stRp9202
ag1
(g9146
g9115
(dp9203
g78
g333
stRp9204
ag1
(g9146
g9115
(dp9205
g78
g179
stRp9206
ag1
(g9146
g9115
(dp9207
g78
g361
stRp9208
ag1
(g9146
g9115
(dp9209
g78
g123
stRp9210
ag1
(g9146
g9115
(dp9211
g78
g291
stRp9212
ag1
(g9146
g9115
(dp9213
g78
g305
stRp9214
ag1
(g9146
g9115
(dp9215
g78
g319
stRp9216
ag1
(g9146
g9115
(dp9217
g78
g186
stRp9218
ag1
(g9146
g9115
(dp9219
g78
g270
stRp9220
ag1
(g9146
g9115
(dp9221
g78
g263
stRp9222
ag1
(g9146
g9115
(dp9223
g78
g277
stRp9224
ag1
(g9146
g9115
(dp9225
g78
g354
stRp9226
asS'seed'
p9227
NsS'thisIndex'
p9228
g372
sS'thisN'
p9229
I40
sS'thisTrialN'
p9230
I0
sS'nTotal'
p9231
I40
sS'_warnUseOfNext'
p9232
I01
sbag1
(g9102
g3
NtRp9233
(dp9234
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9235
sg9107
(lp9236
sg9109
I80044880
sg10
S'binary'
p9237
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9238
g26
g9118
(g9119
g92
g9120
S'b'
tRp9239
(I1
(I40
I1
tg9122
I00
S'\x00\x00\xc0@\x00\x00\x00@\x00\x00\xc0@\x00\x00\xc0@\xcd\xcc\x9c@\x00\x00\xc0@\x00\x00\xc0@33\xa3@\x00\x00\xc0@33\x93@\x00\x00@@\x00\x00\xc0@33\xb3@\x00\x00\x80?33\xb3@ff\xb6@\x00\x00\xc0@ff\xb6@ff\x96@\x00\x00\xc0@33\x93@\x9a\x99y@\x00\x00\xc0@33\x13@\x9a\x99\x99@\xcd\xcc\x9c@\xcd\xcc\x9c@ff\xa6@\x00\x00\xc0@\xcd\xcc,@\x9a\x99\x89@33\xb3@\xcd\xcc\xac@\x00\x00\xc0@\xcd\xcc\x8c@ff\xb6@ff\xa6@33S@33s@\xcd\xcc\xbc@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9240
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9118
(g9119
g92
g9120
S'b'
tRp9241
(I1
(I40
I1
tg9122
I00
S'\x1a\xcd\x0c@\xc1\xe0\x1d@\xa1\xf5\xae?V\x8d\xa8?u\xe4\x9d?\x9c\x80\xd7?\xf6"\x02@\x03\x8c\xc8?\xa6F\xa4?{\x9aI@\x17\xab:@\x8a\xce\x8c?j\x83\x88?\x08\xbe\x0b@\x14J\x84?n\xac\x8a?\xb6\x89\xa8?\x86\x85\x97?I\x9b\x99?\x9dx\x97?\x85\x83\x88?Xw\xb7?k\xce\x8c?P\xa0\t@\xc7\x12\xf1?\x03m\xc6?\xb5y\xf7?\x82\x9c\xb9?\x91A\x84?\xabg\xc6?\xfa\xf3n?\xc1\xce\x8c?|%b?(B\x84?\xae\x99\x99?.\x8a\xc8?\xd0\xae\xca?\x87\xf0\xce?\xfa\xab\n@\xbfx\x97?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9118
(g9119
g92
g9120
S'b'
tRp9242
(I1
(I40
I1
tg9122
I00
S'33s@ffF@ffF@\xcd\xccl@ffF@\x00\x00\x80@\x00\x00\x80@\x00\x00\x80@\x00\x00@@33\x83@\x9a\x99Y@333@\x9a\x999@33S@fff@\x9a\x999@\xcd\xccL@33\x83@\xcd\xccL@333@\xcd\xccL@333@\x9a\x99y@\x00\x00`@\x00\x00`@\xcd\xccl@\x9a\x99y@33S@\x9a\x99y@ffF@fff@\x00\x00\x80@33S@\x00\x00`@fff@333@\x9a\x99y@\x9a\x999@\x9a\x999@333@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9118
(g9119
g92
g9120
S'b'
tRp9243
(I1
(I40
I1
tg60
(S'O4'
I0
I1
tRp9244
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'`\xcd\x10\x03\xc0\xb5\xa8\x0c\xa0\xb5\xa8\x0c`\xe0X\x0c\xc0\xb6\xa8\x0c\xc0\xb3\xa8\x0c\xe0\xb0\xa8\x0c\x00\xb6\xa8\x0c\xa0\xdc\xa6\x0c \xb7\xa8\x0c\x00l\x0f\x03\x80\xb2\xa8\x0c@\xdf\xa6\x0c k\x0f\x03\xc0@\x11\x03\xa0B\x11\x03\x80B\x11\x03\xa0A\x11\x03\x80@\x11\x03\xa0@\x11\x03@A\x11\x03`B\x11\x03\xe0@\x11\x03 C\x11\x03`\xe1X\x0c\xc0\xe0X\x0c\xc0\xe3X\x0c\x00C\x11\x03\x80E\x11\x03\xe0A\x11\x03 @\x11\x03@B\x11\x03\xe0B\x11\x03\x80qY\x0c`@\x11\x03\x80A\x11\x03 B\x11\x03@C\x11\x03\xc0B\x11\x03@@\x11\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9118
(g9119
g92
g9120
S'b'
tRp9245
(I1
(I40
I1
tg9122
I00
S'\xc9vV@\xe9&\xf1?\x91\xed\xac?B`\xf5?B`\xf5?\x91\xed\x8c?\x0e-\x82?\x1dZ\xa4?^\xba\x99?^\xba\xb9?\x1dZ\xa4?\xc5 \xa0?\xc9v&@B`\x05@u\x93\xa8?\xdb\xf9\x1e@\x83\xc0\xca?\x0e-\xa2?u\x93\xa8?\xdb\xf9\x8e?P\x8d\x97?\xbaI\x14@\xf0\xa7f?!\xb0J@B`E@\xdb\xf9\x8e?\xcb\xa1\x81@\xee|\x07@\xa8\xc6\xbb?\xf8S\xf3?\xdb\xf9\x0e@\xdb\xf9^@B`\xb5?\xa0\x1a/?\xd3M\xa2?\x98n\x8e@b\x10P@\xe9&\xd1?\x0e-\x8a@\xe9&\xd1?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9246
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9247
(dp9248
g9130
(dp9249
g26
I01
sg9117
I01
sg28
I01
sg25
I01
sg24
I00
sg9125
I01
sg27
I01
ssg9132
g9233
sg9133
(lp9250
g9117
ag9125
ag24
ag25
ag26
ag27
ag28
asg9135
(lp9251
I40
aI1
asbsg9137
Vsequential
p9252
sg9139
g91
(g92
(I0
tS'b'
tRp9253
(I1
(I40
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9254
g1
(g9146
g9115
(dp9255
g79
g380
sg80
g381
stRp9256
ag1
(g9146
g9115
(dp9257
g79
g389
sg80
g390
stRp9258
ag1
(g9146
g9115
(dp9259
g79
g398
sg80
g399
stRp9260
ag1
(g9146
g9115
(dp9261
g79
g407
sg80
g408
stRp9262
ag1
(g9146
g9115
(dp9263
g79
g416
sg80
g417
stRp9264
ag1
(g9146
g9115
(dp9265
g79
g425
sg80
g426
stRp9266
ag1
(g9146
g9115
(dp9267
g79
g434
sg80
g435
stRp9268
ag1
(g9146
g9115
(dp9269
g79
g443
sg80
g444
stRp9270
ag1
(g9146
g9115
(dp9271
g79
g452
sg80
g453
stRp9272
ag1
(g9146
g9115
(dp9273
g79
g461
sg80
g462
stRp9274
ag1
(g9146
g9115
(dp9275
g79
g470
sg80
g471
stRp9276
ag1
(g9146
g9115
(dp9277
g79
g479
sg80
g480
stRp9278
ag1
(g9146
g9115
(dp9279
g79
g488
sg80
g489
stRp9280
ag1
(g9146
g9115
(dp9281
g79
g497
sg80
g498
stRp9282
ag1
(g9146
g9115
(dp9283
g79
g506
sg80
g507
stRp9284
ag1
(g9146
g9115
(dp9285
g79
g515
sg80
g516
stRp9286
ag1
(g9146
g9115
(dp9287
g79
g524
sg80
g525
stRp9288
ag1
(g9146
g9115
(dp9289
g79
g533
sg80
g534
stRp9290
ag1
(g9146
g9115
(dp9291
g79
g542
sg80
g543
stRp9292
ag1
(g9146
g9115
(dp9293
g79
g551
sg80
g552
stRp9294
ag1
(g9146
g9115
(dp9295
g79
g560
sg80
g561
stRp9296
ag1
(g9146
g9115
(dp9297
g79
g569
sg80
g570
stRp9298
ag1
(g9146
g9115
(dp9299
g79
g578
sg80
g579
stRp9300
ag1
(g9146
g9115
(dp9301
g79
g587
sg80
g588
stRp9302
ag1
(g9146
g9115
(dp9303
g79
g596
sg80
g597
stRp9304
ag1
(g9146
g9115
(dp9305
g79
g605
sg80
g606
stRp9306
ag1
(g9146
g9115
(dp9307
g79
g614
sg80
g615
stRp9308
ag1
(g9146
g9115
(dp9309
g79
g623
sg80
g624
stRp9310
ag1
(g9146
g9115
(dp9311
g79
g632
sg80
g633
stRp9312
ag1
(g9146
g9115
(dp9313
g79
g641
sg80
g642
stRp9314
ag1
(g9146
g9115
(dp9315
g79
g650
sg80
g651
stRp9316
ag1
(g9146
g9115
(dp9317
g79
g659
sg80
g660
stRp9318
ag1
(g9146
g9115
(dp9319
g79
g668
sg80
g669
stRp9320
ag1
(g9146
g9115
(dp9321
g79
g677
sg80
g678
stRp9322
ag1
(g9146
g9115
(dp9323
g79
g686
sg80
g687
stRp9324
ag1
(g9146
g9115
(dp9325
g79
g695
sg80
g696
stRp9326
ag1
(g9146
g9115
(dp9327
g79
g704
sg80
g705
stRp9328
ag1
(g9146
g9115
(dp9329
g79
g713
sg80
g714
stRp9330
ag1
(g9146
g9115
(dp9331
g79
g722
sg80
g723
stRp9332
ag1
(g9146
g9115
(dp9333
g79
g731
sg80
g732
stRp9334
asg9227
Nsg9228
g735
sg9229
I40
sg9230
I0
sg9231
I40
sg9232
I01
sbag1
(g9102
g3
NtRp9335
(dp9336
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9337
sg9107
(lp9338
sg9109
I80044880
sg10
S'practice_loop'
p9339
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9340
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9341
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9118
(g9119
g92
g9120
S'b'
tRp9342
(I1
(I14
I1
tg9244
I00
S'H?\xec\x0cp?\xec\x0c\x98?\xec\x0c\x00q\xec\x0c\x00e\x11\x03\xc0?\xec\x0cp\x80\xec\x0cp?\xec\x0c0e\x11\x03 \x80\xec\x0c`e\x11\x030e\x11\x03\xd0d\x11\x03 \x80\xec\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9343
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9344
(I1
(I14
I1
tg9244
I00
S'pg\xec\x04h\xc9P\x02\x08\xbc\xf4\x04X\xba\xf4\x04\xc8\xbc\xf4\x04`\xbb\xf4\x040\xbb\xf4\x04P\xb3\xf4\x04\xc0\xbe\xf4\x04\x90\xbe\xf4\x04\x88\xb1\xf4\x04\xd0\xb4\xf4\x04h\xbc\xf4\x04\xd0\xb7\xf4\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9345
(dp9346
g9130
(dp9347
g9117
I01
sg33
I00
sg9125
I01
sg34
I00
ssg9132
g9335
sg9133
(lp9348
g9117
ag9125
ag33
ag34
asg9135
(lp9349
I14
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9350
(I1
(I14
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9351
g1
(g9146
g9115
(dp9352
g81
g743
sg82
g744
sg83
g748
sg84
g749
stRp9353
ag1
(g9146
g9115
(dp9354
g81
g755
sg82
g756
sg83
g760
sg84
g761
stRp9355
ag1
(g9146
g9115
(dp9356
g81
g766
sg82
g767
sg83
g771
sg84
g772
stRp9357
ag1
(g9146
g9115
(dp9358
g81
g777
sg82
g778
sg83
g782
sg84
g783
stRp9359
ag1
(g9146
g9115
(dp9360
g81
g766
sg82
g788
sg83
g771
sg84
g792
stRp9361
ag1
(g9146
g9115
(dp9362
g81
g797
sg82
g798
sg83
g802
sg84
g803
stRp9363
ag1
(g9146
g9115
(dp9364
g81
g743
sg82
g808
sg83
g748
sg84
g812
stRp9365
ag1
(g9146
g9115
(dp9366
g81
g755
sg82
g817
sg83
g760
sg84
g821
stRp9367
ag1
(g9146
g9115
(dp9368
g81
g826
sg82
g827
sg83
g831
sg84
g832
stRp9369
ag1
(g9146
g9115
(dp9370
g81
g837
sg82
g838
sg83
g842
sg84
g843
stRp9371
ag1
(g9146
g9115
(dp9372
g81
g777
sg82
g848
sg83
g782
sg84
g852
stRp9373
ag1
(g9146
g9115
(dp9374
g81
g826
sg82
g857
sg83
g831
sg84
g861
stRp9375
ag1
(g9146
g9115
(dp9376
g81
g797
sg82
g866
sg83
g802
sg84
g870
stRp9377
ag1
(g9146
g9115
(dp9378
g81
g837
sg82
g875
sg83
g842
sg84
g879
stRp9379
asg9227
Nsg9228
g881
sg9229
I14
sg9230
I0
sg9231
I14
sg9232
I01
sbag1
(g9102
g3
NtRp9380
(dp9381
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9382
sg9107
(lp9383
sg9109
I80044880
sg10
S'block_loop'
p9384
sg6
g9111
sg9112
I3
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9385
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9386
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9387
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9388
(dp9389
g9130
(dp9390
g9117
I01
sg9125
I01
ssg9132
g9380
sg9133
(lp9391
g9117
ag9125
asg9135
(lp9392
I1
aI3
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9393
(I1
(I1
I3
tg98
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9141
I01
sg9142
I3
sg9143
I-1
sg9144
(lp9394
Nasg9227
Nsg9228
g6364
sg9229
I3
sg9230
I0
sg9231
I3
sg9232
I01
sbag1
(g9102
g3
NtRp9395
(dp9396
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9397
sg9107
(lp9398
sg9109
I80044880
sg10
S'trial_loop'
p9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9400
g33
g9118
(g9119
g92
g9120
S'b'
tRp9401
(I1
(I200
I1
tg9244
I00
S'H\x90\xee\x0c\xe0\x80\xee\x0c G\xee\x0c\xb0F\xee\x0cp\x90\xee\x0c\x98\x90\xee\x0c\xc0\x90\xee\x0c\x00\x92\xee\x0c\x10\x81\xee\x0c\xe8\x90\xee\x0c\xb0F\xee\x0cH\x90\xee\x0cxF\xee\x0c@\x81\xee\x0c\x88\x91\xee\x0cp\x90\xee\x0c\xe0\n\x0f\x03\x90\x82\xee\x0cp\x81\xee\x0c\xe8\x90\xee\x0c@\x81\xee\x0c G\xee\x0c\xc0\r\x0f\x03\x98\x90\xee\x0c\xe8F\xee\x0c\xe0\n\x0f\x03\x98\x90\xee\x0c@\x81\xee\x0c\xb0F\xee\x0c\x90G\xee\x0c\xf0\x82\xee\x0c(\x92\xee\x0c\x00\x92\xee\x0c\xc0\r\x0f\x03\x10\x81\xee\x0cxF\xee\x0c\xe0\x80\xee\x0cp\x90\xee\x0cx\x92\xee\x0c\xc0\r\x0f\x03p\x81\xee\x0c\xe0\x80\xee\x0c\xd0\x81\xee\x0c\xc0\x90\xee\x0cp\x81\xee\x0c\x90\x82\xee\x0c\xc0\x90\xee\x0cx\x92\xee\x0cxF\xee\x0c\x10\x91\xee\x0cp\x81\xee\x0c\xa0\x81\xee\x0c\x80\x06\x0f\x03H\x90\xee\x0c\xa0\x81\xee\x0c8\x91\xee\x0c\xa0\x03\x0f\x03\xc0\n\x0f\x03\x10\x81\xee\x0c\xa0\x03\x0f\x03\x10\x91\xee\x0c\xc0\x90\xee\x0cxF\xee\x0c\xe0\n\x0f\x03\xb0F\xee\x0c\xe0\x80\xee\x0c\xe0\n\x0f\x03\xa0\x03\x0f\x03\x80\x06\x0f\x03\xe0\x80\xee\x0c\x10\x81\xee\x0c\xe8\x90\xee\x0cxF\xee\x0cp\x81\xee\x0c\x00\x92\xee\x0c\xc0\x90\xee\x0c\xe8F\xee\x0c\xc0\x82\xee\x0c\xc8G\xee\x0c\x98\x90\xee\x0c\xc0\x90\xee\x0c\x10\x81\xee\x0c\xd0\x81\xee\x0c\x98\x90\xee\x0c\xc0\r\x0f\x03H\x90\xee\x0c\xa0\x03\x0f\x03p\x90\xee\x0cH\x90\xee\x0c\xb0F\xee\x0c\xe8\x90\xee\x0c\x90\x82\xee\x0c\xb0F\xee\x0c\xa0\x03\x0f\x03\x00\x82\xee\x0c\xe8\x90\xee\x0c\x80\x06\x0f\x03\x10\x81\xee\x0c\x98\x90\xee\x0c\x00\x82\xee\x0c\xc8G\xee\x0c@\x81\xee\x0c\xa0\x03\x0f\x03\xc0\x90\xee\x0cxF\xee\x0cp\x90\xee\x0cXG\xee\x0c\xe8F\xee\x0c\xe8\x90\xee\x0c(\x92\xee\x0c\xc0\x90\xee\x0c\xf0\x82\xee\x0c\xd0\x81\xee\x0c@\x81\xee\x0c\xc0\r\x0f\x03\x10\x81\xee\x0cx\x92\xee\x0c\xd0\x81\xee\x0cp\x90\xee\x0c\xe0\n\x0f\x03\xc0\x90\xee\x0c\xe0\n\x0f\x03(\x92\xee\x0cxF\xee\x0cH\x90\xee\x0c\xc0\n\x0f\x038\x91\xee\x0cp\x90\xee\x0c\xe0\n\x0f\x03\xd0\x81\xee\x0c\xe8F\xee\x0c8\x91\xee\x0c\xe0\n\x0f\x03\xa0\x03\x0f\x03@\x81\xee\x0c\xe8F\xee\x0cP\x92\xee\x0cp\x90\xee\x0c\xf0\x82\xee\x0c`\x82\xee\x0c\x10\x91\xee\x0c\x80\x06\x0f\x03x\x92\xee\x0cp\x81\xee\x0c\xe8\x90\xee\x0c\xc0\x90\xee\x0c\x10\x91\xee\x0c\xe8\x90\xee\x0c\xa0\x03\x0f\x038\x91\xee\x0c\xb0F\xee\x0c\x00\x92\xee\x0cH\x90\xee\x0c\xf0\x82\xee\x0c\xc0\n\x0f\x03\xb0\x91\xee\x0c@\x81\xee\x0c\x10\x91\xee\x0cP\x92\xee\x0c8\x91\xee\x0c\x88\x91\xee\x0c\xd0\x81\xee\x0c\xa0\x03\x0f\x03\xd0\x81\xee\x0c8\x91\xee\x0cp\x81\xee\x0c\xe0\x80\xee\x0c\xf0\x82\xee\x0c\x98\x90\xee\x0cp\x81\xee\x0c\xa0\x81\xee\x0c\xc0\x03\x0f\x03\xc0\r\x0f\x038\x91\xee\x0cp\x81\xee\x0c\x10\x81\xee\x0c\x00\x82\xee\x0c\x10\x91\xee\x0c\xa0\x81\xee\x0c\xc0\r\x0f\x038\x91\xee\x0c0\x82\xee\x0c\x10\x81\xee\x0c8\x91\xee\x0c\x98\x90\xee\x0cxF\xee\x0c\xf0\x82\xee\x0cp\x90\xee\x0c\x10\x91\xee\x0cH\x90\xee\x0c\xe0\x80\xee\x0c\xc0\r\x0f\x03\xd0\x81\xee\x0c\xe8\x90\xee\x0c\x98\x90\xee\x0c8\x91\xee\x0c\xe8F\xee\x0c\x00\x92\xee\x0c\xe0\n\x0f\x03\x80\x06\x0f\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9402
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9403
(I1
(I200
I1
tg9244
I00
S'\x80\xe1X\x0c\x80bM\x0c A\x11\x03`mM\x0c\x80gM\x0c mM\x0c\xe0oM\x0c\xc0\x00\xa9\x0c`zZ\x0c`tZ\x0c\x00tZ\x0c@tZ\x0c xZ\x0c`xZ\x0c\xc0{Z\x0c\xe0zZ\x0c\x80tZ\x0c\xa0{Z\x0c\x00uZ\x0c@uZ\x0c\x80|Z\x0c@\x08\xa9\x0c`}Z\x0c\x80zZ\x0c\xe0\r\x10\x03\x80\n\x10\x03\xa0\x0e\x10\x03\x00\x02\x10\x03`\x0e\x10\x03`\r\x10\x03\xe0\x0f\x10\x03\xe0\x0e\x10\x03 \r\x10\x03`\x0c\x10\x03\xc0\x0b\x10\x03\x80\x0e\x10\x03\xc0\x0e\x10\x03\x00\x0e\x10\x03 \x0f\x10\x03\xc0\t\x10\x03@\x0e\x10\x03\x80\x0c\x10\x03\x00\x0f\x10\x03\x80\r\x10\x03\x80\x0f\x10\x03\xc0\r\x10\x03\x00\r\x10\x03@\n\x10\x03@\x0b\x10\x03\xc0\x0c\x10\x03\xa0\x0b\x10\x03\xa0\t\x10\x03\xe0\x0b\x10\x03\x80\x0b\x10\x03@\r\x10\x03\xa0\r\x10\x03`\x0f\x10\x03\xa0\x0f\x10\x03@\x0c\x10\x03 \x0e\x10\x03 \x0b\x10\x03\xe0\t\x10\x03\xe0\x0c\x10\x03`\x0b\x10\x03\x00\x0c\x10\x03 \x0c\x10\x03\x00\x0b\x10\x03@fM\x0c\x00\t\x10\x03\xc0K[\x0c\xc0J[\x0c C[\x0c\xe0B[\x0c\x00E[\x0c\x00K[\x0c\xa0D[\x0c`A[\x0c\x80C[\x0c\xc0@[\x0c\xe0C[\x0c\xa0J[\x0c\xc0A\x11\x03\x00C[\x0c\x00NX\x0c OX\x0c\xe0OX\x0c\x80kM\x0c`OX\x0c\xe0NX\x0c\x80JX\x0c`a\xb5\x04 d\xb5\x04\x00a\xb5\x04@`M\x0c\xa0c\xb5\x04\xe0c\xb5\x04\x00b\xb5\x04\x00d\xb5\x04 c\xb5\x04@d\xb5\x04\xe0e\xb5\x04`c\xb5\x04\xe0b\xb5\x04\xa0\x0c\x10\x03 a\xb5\x04`b\xb5\x04\x80b\xb5\x04 e\xb5\x04\x80d\xb5\x04\xa0b\xb5\x04\xc0`\xb5\x04\xa0`\xb5\x04\x00c\xb5\x04@b\xb5\x04\xc0d\xb5\x04\xe0d\xb5\x04`f\xb5\x04\x00f\xb5\x04\x00g\xb5\x04\xe0a\xb5\x04 g\xb5\x04@g\xb5\x04\xe0`\xb5\x04\xc0o\xb5\x04\xc0a\xb5\x04\xc0b\xb5\x04\x80f\xb5\x04\xa0f\xb5\x04\xe0h\xb5\x04\x80g\xb5\x04 f\xb5\x04@h\xb5\x04@c\xb5\x04 b\xb5\x04\xc0f\xb5\x04 h\xb5\x04\xa0g\xb5\x04\x80e\xb5\x04\xa0d\xb5\x04\x00h\xb5\x04`g\xb5\x04\xa0h\xb5\x04\xc0g\xb5\x04\xe0g\xb5\x04\xc0h\xb5\x04\xa0a\xb5\x04`d\xb5\x04\x80a\xb5\x04 j\xb5\x04\x80i\xb5\x04\x00i\xb5\x04\xc0j\xb5\x04\xa0e\xb5\x04\xc0c\xb5\x04\xe0f\xb5\x04@f\xb5\x04`j\xb5\x04@e\xb5\x04`e\xb5\x04 i\xb5\x04 k\xb5\x04\xc0e\xb5\x04\xc0k\xb5\x04\xa0l\xb5\x04\x80c\xb5\x04\xa0i\xb5\x04@j\xb5\x04\x00j\xb5\x04\x80l\xb5\x04`h\xb5\x04\x00l\xb5\x04\xe0j\xb5\x04\x80j\xb5\x04\xe0l\xb5\x04@l\xb5\x04\x80h\xb5\x04`m\xb5\x04`l\xb5\x04\xe0k\xb5\x04`n\xb5\x04\x00n\xb5\x04\xc0l\xb5\x04@a\xb5\x04\xc0m\xb5\x04\x00e\xb5\x04\x80m\xb5\x04\xa0j\xb5\x04@m\xb5\x04@k\xb5\x04\x80k\xb5\x04@i\xb5\x04 m\xb5\x04\x00m\xb5\x04\xc0n\xb5\x04@o\xb5\x04 n\xb5\x04 o\xb5\x04`k\xb5\x04\xa0m\xb5\x04@n\xb5\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9404
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9405
(I1
(I200
I1
tg9122
I00
S",\x86\xa8?\xbb\x8d\xe8?\x9b\x1e\xc2?\xc28s?\x86\xc1\x9b?\x94\x8f\x88?t\x13\x91?Q\xdf\xac?\xd4\x05\xa0?\xa9\xf1\x8e?\xc8\xd0\x8c?\xe1OD?\xd6(\x82?\xfc\x88\xa8?\xfa\xb5j?\xfd'\xa2?.\xfan?sk\x86?,\xf1\x8e?\xda\xbd\x9b?}\xbe\x9b?\x88V\xd5?\x1b\xc2\xdb?2\xad\xea?Bx\x07@\xec\xd0\x8c?:\x8b\xa8?\xe2\xb8\x8a?\x1a\xc7{?l\xbe\xdb?:i\xe6? \xa2Y?\x8aV\x84?\x9f\xf5n?\xc3\x81w?\x9c\xa1\x99?\\\xbf\x9b?\xc8D\x93?\xdeF\x04@L%\xc2?N\xe8]?\x0e\x04\x80?w\xad\xd9?\x8e*\x82?z\xc5;?\xc3\xb9\x0b@'G\x84?6\xd1{?\xc8\xd1\x8c?q\x84H?\xa0sf?\x87\xf1\xae?\x13\x06\x80?o(\x82?\xf5.b?^\xf4\x8e?\x86\xe0\x9d?\xc3\xef\x9d?T\xc0\xbb?\x0f\x9f\xf9?\xfd^\xc6?Y\x8b\x88? \xef\xbd?\x15%\xc2?]3b?y\xd1\xcc?\x88<s?\xdc\xe3\xbd?d\x06\x80?C\xf9n?\xe3\x06\x80?\xe8\x00\xe0?\x95\xcej?*H\x84?\x9dZU?\xfc\x83w?\xa4\x03\x00@\xab\xce\x9b?X'\xe2?z\xad\x8a?\x0e\xb2\x8a?\xf7LD?\x8cBs?\xea;s?}\xf7\xee?J\xb0\x8a?\xae'\xe2?\xb1l\xa6?\xf493?\xa7\xcf\xcc?Yg\x86?\xd1Q\xd5?\t\x1cQ?3\xfd\x9f?\xf9\x16\x91?\xa7W\x95?\x06~w?\xc3\xcfj?\xde\x94H?6aU?\xba9\x93?\x82}\xb7?$\x18\x91?zvw?A\xe1\xfd?\xdc\x1cQ?\xa06\x93?\xc7\xcf\x0c@J\xcc\x8c?\xbf9s?[;s?f}\xb7?!\x1eQ?q\xad\x1a@\xb6\x00\xe0?\xfd\x1eQ?o\xc0\xbb?\xb4\xef\x9d?\xa03b?\x8c%\xc2?`\x8b\xa8?C9\x93?\x91\xb1\x8a?\xf6[\x95?\xc2\xc1{?o\xf4\xce?\xb8\x8e\x88?s\x9b7?\xbd\xa4Y?\xeb\xb9j?g\xc3{?\x81\xfbn?\x84/b?\xddh\x95?\x1a\xcf\x8c?^+b?\x0e\xcf\x8c?\xd8\xc0;?%F\xd3?CQD?\x9aQ\xf5?\x9f\xab*@>2b?;\t @s\xdd\x9d?E\xe6]?\x01\xb8\xbb?Q\xce\x8c?\xd6}U?\xe1MD?9\xeb]?\x9el\x86?^\xd4;?\xa5\xa6Y?[\x1eQ?$sf?\xec$\x82?wB\x84?\xe6\xe1\x9d?\x15\xfen?\x83|7?SY\x95?\xa2\xcf\xac?I\xf5n?\x1c\xec.?\xcd\xad\x8a?\xe3\x03\xa0?\x8d\xac\x8a?\xac\xb0j?\x85yU?h\xb2j?\x94\x8d\xe8?7\xaf\xaa?\xa51b?\xa6bU?\xce\xa1Y?\x11\x85w?\xb89D?\xde$\xc2?\x91\x99\x88?z\x8d\xa8?\x84\xfcn?<\xfc.?5\x8c\x88?\xf3A3?\x9a\xb9j?\t\xe7]?\xca\xdb]?\xb5\xb1{?7\xc9;?\x0e\xe4\x9d?.\xeeL?\x82\xb5j?\xdby\x97?f\xa67?\x8f'\xe2?_\xaf\xea?zX\xb5?k<s?\x8c\xee]?"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9406
(I1
(I200
I1
tg9244
I00
S'@\xba\xf4\x04@\xbd\xf4\x04X\x17\x16\x05P\x10\x16\x05\xe0\x13\x16\x05 \x16\x16\x05\xb0\x19\x16\x05 \x1c\x16\x05\x88\x11\x16\x05\x98\x10\x16\x05X\x11\x16\x05\xe0\x19\x16\x05\x90\x1b\x16\x05`\x12\x16\x05\x98\x16\x16\x05\xa0\x17\x16\x05\x00\x15\x16\x05x\x18\x16\x05\xd8\x1b\x16\x05@\x1a\x16\x05\x98\x1c\x16\x05\xd8\x18\x16\x05\xa0\x11\x16\x05\xc8\x10\x16\x05\xf0\x15\x16\x05h\x1f\x16\x05p\x11\x16\x05\x00\x1e\x16\x05\x08\x16\x16\x05x\x12\x16\x05\xc8\x1c\x16\x05\x88\x1d\x16\x05\xb8\x17\x16\x05\xe8\x17\x16\x05\x08\x19\x16\x05x\x15\x16\x05 \x13\x16\x05 \x19\x16\x05x\x1e\x16\x05\xf0\x12\x16\x05\xa0\x1d\x16\x05\xc0\x1e\x16\x05\x18\x15\x16\x05\xb0\x16\x16\x05\xe0\x10\x16\x05\x80\x16\x16\x05`\x1b\x16\x05p\x1a\x16\x05\xd8\x12\x16\x05\xc8\x19\x16\x05X\x14\x16\x058\x16\x16\x05\x18\x12\x16\x05h\x13\x16\x05P\x13\x16\x05\x80\x1c\x16\x05p\x1d\x16\x05\xf8\x1c\x16\x05\xc0\x18\x16\x05\xd0\x11\x16\x05\xb0\x13\x16\x05 \x1f\x16\x05\xd0\x1a\x16\x05\xd8\x1e\x16\x05`\x18\x16\x05\x90\x1e\x16\x05\x10\x1d\x16\x050\x1b\x16\x058\x19\x16\x05\x00\x12\x16\x058\x10\x16\x05P\x16\x16\x05\xa0\x14\x16\x05X\x1a\x16\x05\xc8\x16\x16\x05\xe8\x1a\x16\x05h\x10\x16\x05\xf8\x19\x16\x05(\x1d\x16\x058\x1c\x16\x05\x80\x19\x16\x05`\x1e\x16\x05@\x1d\x16\x05h\x19\x16\x05`\x15\x16\x05H\x1b\x16\x05\x10\x17\x16\x05(\x17\x16\x05H\x1e\x16\x05\xb0\x1c\x16\x058\x1f\x16\x05\xe8\x1d\x16\x05H\x15\x16\x05\xf8\x16\x16\x050\x1e\x16\x05\xe8\x11\x16\x05h\x1c\x16\x05\xf0\x1e\x16\x05\x00\x18\x16\x050\x15\x16\x05P\x1f\x16\x05\x08\x1f\x16\x05\xb8\x1a\x16\x05P\x1c\x16\x05\x18\x1e\x16\x05\xc0\x15\x16\x05\x90\x18\x16\x05x\x1b\x16\x05\x10\x1a\x16\x05\xb8\x1d\x16\x05\xa8\x15\x16\x05\x08\x1c\x16\x05\xc0\x1b\x16\x05\x88\x14\x16\x05\xf0\x1b\x16\x05(\x14\x16\x05\xc8\x13\x16\x05\xa8\x1e\x16\x05\xa0\x1a\x16\x05\xb0\x1f\x16\x05@\x11\x16\x05\xe0\x1f\x16\x05\x10\x14\x16\x05\xd0\x14\x16\x05\xe0\x1c\x16\x05\x98\x19\x16\x05\xd0\x17\x16\x05\xb8\x11\x16\x050\x18\x16\x05X\x1d\x16\x05\xd0\x1d\x16\x05\x18\x1b\x16\x05\x80\x13\x16\x05(\x1a\x16\x058\x13\x16\x05\x80\x10\x16\x05\xa8\x18\x16\x05\xa8\x1b\x16\x05\xc8\x1f\x16\x058|\xf5\x04\x90{\xf5\x04\xe0s\xf5\x04\xd0}\xf5\x04\xb0y\xf5\x04\x00{\xf5\x04\xe8q\xf5\x040u\xf5\x04xu\xf5\x04\xf0~\xf5\x04\xc8y\xf5\x04hs\xf5\x04\xe8w\xf5\x04\xd0w\xf5\x04\xc0{\xf5\x04\xa8x\xf5\x04\xb0p\xf5\x04P|\xf5\x04pq\xf5\x04\xc0x\xf5\x04P\x7f\xf5\x04\x98\x7f\xf5\x04\xb0|\xf5\x04xx\xf5\x04\xe8t\xf5\x04\xf8v\xf5\x04\xa0}\xf5\x04\xd8u\xf5\x04h|\xf5\x04\xd0z\xf5\x04\xa8~\xf5\x04x~\xf5\x04\x90x\xf5\x04\x00u\xf5\x04@}\xf5\x04\x08\x7f\xf5\x04\x90u\xf5\x04\x90~\xf5\x04@q\xf5\x04\x18{\xf5\x04\x00\x1b\x16\x050\x12\x16\x05\x98\x1f\x16\x05P\x19\x16\x05\xb8\x14\x16\x05H\x18\x16\x05\xf8\x10\x16\x05\x90\x15\x16\x05H\x12\x16\x05\xe0\x16\x16\x05h\x16\x16\x05\xd8\x15\x16\x05\x08\x13\x16\x05\x18\x18\x16\x05\xe8\x14\x16\x05\xf0\x18\x16\x05\xf8\x13\x16\x05@\x14\x16\x05 \x10\x16\x05\xc0\x12\x16\x05\x88\x17\x16\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9407
(dp9408
g9130
(dp9409
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9395
sg9133
(lp9410
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9411
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9412
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9413
g1
(g9146
g9115
(dp9414
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9415
ag1
(g9146
g9115
(dp9416
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9417
ag1
(g9146
g9115
(dp9418
g906
g942
sg894
g932
sg908
g936
sg903
g940
stRp9419
ag1
(g9146
g9115
(dp9420
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9421
ag1
(g9146
g9115
(dp9422
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9423
ag1
(g9146
g9115
(dp9424
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9425
ag1
(g9146
g9115
(dp9426
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9427
ag1
(g9146
g9115
(dp9428
g906
g1027
sg894
g1017
sg908
g1021
sg903
g1025
stRp9429
ag1
(g9146
g9115
(dp9430
g906
g1038
sg894
g1034
sg908
g1045
sg903
g1042
stRp9431
ag1
(g9146
g9115
(dp9432
g906
g1055
sg894
g1051
sg908
g1062
sg903
g1059
stRp9433
ag1
(g9146
g9115
(dp9434
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9435
ag1
(g9146
g9115
(dp9436
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9437
ag1
(g9146
g9115
(dp9438
g906
g942
sg894
g1094
sg908
g936
sg903
g1101
stRp9439
ag1
(g9146
g9115
(dp9440
g906
g1113
sg894
g1109
sg908
g1120
sg903
g1117
stRp9441
ag1
(g9146
g9115
(dp9442
g906
g899
sg894
g1126
sg908
g909
sg903
g1133
stRp9443
ag1
(g9146
g9115
(dp9444
g906
g970
sg894
g1141
sg908
g977
sg903
g1148
stRp9445
ag1
(g9146
g9115
(dp9446
g906
g1160
sg894
g1156
sg908
g1167
sg903
g1164
stRp9447
ag1
(g9146
g9115
(dp9448
g906
g1183
sg894
g1173
sg908
g1177
sg903
g1181
stRp9449
ag1
(g9146
g9115
(dp9450
g906
g1194
sg894
g1190
sg908
g1201
sg903
g1198
stRp9451
ag1
(g9146
g9115
(dp9452
g906
g1055
sg894
g1207
sg908
g1062
sg903
g1214
stRp9453
ag1
(g9146
g9115
(dp9454
g906
g1113
sg894
g1109
sg908
g1120
sg903
g1117
stRp9455
ag1
(g9146
g9115
(dp9456
g906
g942
sg894
g1094
sg908
g936
sg903
g1101
stRp9457
ag1
(g9146
g9115
(dp9458
g906
g1252
sg894
g1248
sg908
g1259
sg903
g1256
stRp9459
ag1
(g9146
g9115
(dp9460
g906
g987
sg894
g1265
sg908
g994
sg903
g1272
stRp9461
ag1
(g9146
g9115
(dp9462
g906
g1284
sg894
g1280
sg908
g1291
sg903
g1288
stRp9463
ag1
(g9146
g9115
(dp9464
g906
g1160
sg894
g1297
sg908
g1167
sg903
g1304
stRp9465
ag1
(g9146
g9115
(dp9466
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9467
ag1
(g9146
g9115
(dp9468
g906
g1113
sg894
g1109
sg908
g1120
sg903
g1117
stRp9469
ag1
(g9146
g9115
(dp9470
g906
g953
sg894
g1338
sg908
g960
sg903
g1345
stRp9471
ag1
(g9146
g9115
(dp9472
g906
g1363
sg894
g1353
sg908
g1357
sg903
g1361
stRp9473
ag1
(g9146
g9115
(dp9474
g906
g1380
sg894
g1370
sg908
g1374
sg903
g1378
stRp9475
ag1
(g9146
g9115
(dp9476
g906
g1113
sg894
g1387
sg908
g1120
sg903
g1394
stRp9477
ag1
(g9146
g9115
(dp9478
g906
g1027
sg894
g1402
sg908
g1021
sg903
g1409
stRp9479
ag1
(g9146
g9115
(dp9480
g906
g1252
sg894
g1417
sg908
g1259
sg903
g1424
stRp9481
ag1
(g9146
g9115
(dp9482
g906
g1038
sg894
g1034
sg908
g1045
sg903
g1042
stRp9483
ag1
(g9146
g9115
(dp9484
g906
g942
sg894
g1094
sg908
g936
sg903
g1101
stRp9485
ag1
(g9146
g9115
(dp9486
g906
g919
sg894
g1458
sg908
g926
sg903
g1465
stRp9487
ag1
(g9146
g9115
(dp9488
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9489
ag1
(g9146
g9115
(dp9490
g906
g1284
sg894
g1280
sg908
g1291
sg903
g1288
stRp9491
ag1
(g9146
g9115
(dp9492
g906
g1252
sg894
g1417
sg908
g1259
sg903
g1424
stRp9493
ag1
(g9146
g9115
(dp9494
g906
g1194
sg894
g1512
sg908
g1201
sg903
g1519
stRp9495
ag1
(g9146
g9115
(dp9496
g906
g919
sg894
g1458
sg908
g926
sg903
g1465
stRp9497
ag1
(g9146
g9115
(dp9498
g906
g1544
sg894
g1540
sg908
g1551
sg903
g1548
stRp9499
ag1
(g9146
g9115
(dp9500
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9501
ag1
(g9146
g9115
(dp9502
g906
g1194
sg894
g1512
sg908
g1201
sg903
g1519
stRp9503
ag1
(g9146
g9115
(dp9504
g906
g1183
sg894
g1173
sg908
g1177
sg903
g1181
stRp9505
ag1
(g9146
g9115
(dp9506
g906
g1004
sg894
g1596
sg908
g1011
sg903
g1603
stRp9507
ag1
(g9146
g9115
(dp9508
g906
g1284
sg894
g1611
sg908
g1291
sg903
g1618
stRp9509
ag1
(g9146
g9115
(dp9510
g906
g942
sg894
g1094
sg908
g936
sg903
g1101
stRp9511
ag1
(g9146
g9115
(dp9512
g906
g1183
sg894
g1173
sg908
g1177
sg903
g1181
stRp9513
ag1
(g9146
g9115
(dp9514
g906
g1194
sg894
g1190
sg908
g1201
sg903
g1198
stRp9515
ag1
(g9146
g9115
(dp9516
g906
g1380
sg894
g1665
sg908
g1374
sg903
g1672
stRp9517
ag1
(g9146
g9115
(dp9518
g906
g1027
sg894
g1017
sg908
g1021
sg903
g1025
stRp9519
ag1
(g9146
g9115
(dp9520
g906
g899
sg894
g1126
sg908
g909
sg903
g1133
stRp9521
ag1
(g9146
g9115
(dp9522
g906
g1380
sg894
g1370
sg908
g1374
sg903
g1378
stRp9523
ag1
(g9146
g9115
(dp9524
g906
g1723
sg894
g1719
sg908
g1730
sg903
g1727
stRp9525
ag1
(g9146
g9115
(dp9526
g906
g1363
sg894
g1353
sg908
g1357
sg903
g1361
stRp9527
ag1
(g9146
g9115
(dp9528
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9529
ag1
(g9146
g9115
(dp9530
g906
g1038
sg894
g1034
sg908
g1045
sg903
g1042
stRp9531
ag1
(g9146
g9115
(dp9532
g906
g1363
sg894
g1775
sg908
g1357
sg903
g1782
stRp9533
ag1
(g9146
g9115
(dp9534
g906
g1183
sg894
g1790
sg908
g1177
sg903
g1797
stRp9535
ag1
(g9146
g9115
(dp9536
g906
g1004
sg894
g1596
sg908
g1011
sg903
g1603
stRp9537
ag1
(g9146
g9115
(dp9538
g906
g942
sg894
g932
sg908
g936
sg903
g940
stRp9539
ag1
(g9146
g9115
(dp9540
g906
g1160
sg894
g1297
sg908
g1167
sg903
g1304
stRp9541
ag1
(g9146
g9115
(dp9542
g906
g953
sg894
g1338
sg908
g960
sg903
g1345
stRp9543
ag1
(g9146
g9115
(dp9544
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9545
ag1
(g9146
g9115
(dp9546
g906
g1160
sg894
g1156
sg908
g1167
sg903
g1164
stRp9547
ag1
(g9146
g9115
(dp9548
g906
g1363
sg894
g1353
sg908
g1357
sg903
g1361
stRp9549
ag1
(g9146
g9115
(dp9550
g906
g1027
sg894
g1402
sg908
g1021
sg903
g1409
stRp9551
ag1
(g9146
g9115
(dp9552
g906
g919
sg894
g1458
sg908
g926
sg903
g1465
stRp9553
ag1
(g9146
g9115
(dp9554
g906
g1038
sg894
g1922
sg908
g1045
sg903
g1929
stRp9555
ag1
(g9146
g9115
(dp9556
g906
g1055
sg894
g1207
sg908
g1062
sg903
g1214
stRp9557
ag1
(g9146
g9115
(dp9558
g906
g942
sg894
g1094
sg908
g936
sg903
g1101
stRp9559
ag1
(g9146
g9115
(dp9560
g906
g1194
sg894
g1512
sg908
g1201
sg903
g1519
stRp9561
ag1
(g9146
g9115
(dp9562
g906
g1027
sg894
g1017
sg908
g1021
sg903
g1025
stRp9563
ag1
(g9146
g9115
(dp9564
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9565
ag1
(g9146
g9115
(dp9566
g906
g1284
sg894
g1280
sg908
g1291
sg903
g1288
stRp9567
ag1
(g9146
g9115
(dp9568
g906
g1194
sg894
g1512
sg908
g1201
sg903
g1519
stRp9569
ag1
(g9146
g9115
(dp9570
g906
g1544
sg894
g1540
sg908
g1551
sg903
g1548
stRp9571
ag1
(g9146
g9115
(dp9572
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9573
ag1
(g9146
g9115
(dp9574
g906
g1004
sg894
g1596
sg908
g1011
sg903
g1603
stRp9575
ag1
(g9146
g9115
(dp9576
g906
g1038
sg894
g1922
sg908
g1045
sg903
g1929
stRp9577
ag1
(g9146
g9115
(dp9578
g906
g1544
sg894
g2080
sg908
g1551
sg903
g2087
stRp9579
ag1
(g9146
g9115
(dp9580
g906
g987
sg894
g1265
sg908
g994
sg903
g1272
stRp9581
ag1
(g9146
g9115
(dp9582
g906
g1252
sg894
g1248
sg908
g1259
sg903
g1256
stRp9583
ag1
(g9146
g9115
(dp9584
g906
g899
sg894
g1126
sg908
g909
sg903
g1133
stRp9585
ag1
(g9146
g9115
(dp9586
g906
g1363
sg894
g1353
sg908
g1357
sg903
g1361
stRp9587
ag1
(g9146
g9115
(dp9588
g906
g970
sg894
g1141
sg908
g977
sg903
g1148
stRp9589
ag1
(g9146
g9115
(dp9590
g906
g899
sg894
g1126
sg908
g909
sg903
g1133
stRp9591
ag1
(g9146
g9115
(dp9592
g906
g953
sg894
g1338
sg908
g960
sg903
g1345
stRp9593
ag1
(g9146
g9115
(dp9594
g906
g1055
sg894
g1207
sg908
g1062
sg903
g1214
stRp9595
ag1
(g9146
g9115
(dp9596
g906
g1183
sg894
g1790
sg908
g1177
sg903
g1797
stRp9597
ag1
(g9146
g9115
(dp9598
g906
g953
sg894
g1338
sg908
g960
sg903
g1345
stRp9599
ag1
(g9146
g9115
(dp9600
g906
g1363
sg894
g1775
sg908
g1357
sg903
g1782
stRp9601
ag1
(g9146
g9115
(dp9602
g906
g919
sg894
g1458
sg908
g926
sg903
g1465
stRp9603
ag1
(g9146
g9115
(dp9604
g906
g1055
sg894
g1207
sg908
g1062
sg903
g1214
stRp9605
ag1
(g9146
g9115
(dp9606
g906
g1027
sg894
g1402
sg908
g1021
sg903
g1409
stRp9607
ag1
(g9146
g9115
(dp9608
g906
g1038
sg894
g1922
sg908
g1045
sg903
g1929
stRp9609
ag1
(g9146
g9115
(dp9610
g906
g987
sg894
g1265
sg908
g994
sg903
g1272
stRp9611
ag1
(g9146
g9115
(dp9612
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9613
ag1
(g9146
g9115
(dp9614
g906
g1544
sg894
g1540
sg908
g1551
sg903
g1548
stRp9615
ag1
(g9146
g9115
(dp9616
g906
g1113
sg894
g1109
sg908
g1120
sg903
g1117
stRp9617
ag1
(g9146
g9115
(dp9618
g906
g1363
sg894
g1353
sg908
g1357
sg903
g1361
stRp9619
ag1
(g9146
g9115
(dp9620
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9621
ag1
(g9146
g9115
(dp9622
g906
g942
sg894
g932
sg908
g936
sg903
g940
stRp9623
ag1
(g9146
g9115
(dp9624
g906
g970
sg894
g1141
sg908
g977
sg903
g1148
stRp9625
ag1
(g9146
g9115
(dp9626
g906
g1055
sg894
g1051
sg908
g1062
sg903
g1059
stRp9627
ag1
(g9146
g9115
(dp9628
g906
g1284
sg894
g1611
sg908
g1291
sg903
g1618
stRp9629
ag1
(g9146
g9115
(dp9630
g906
g1055
sg894
g1207
sg908
g1062
sg903
g1214
stRp9631
ag1
(g9146
g9115
(dp9632
g906
g1113
sg894
g1387
sg908
g1120
sg903
g1394
stRp9633
ag1
(g9146
g9115
(dp9634
g906
g1004
sg894
g1596
sg908
g1011
sg903
g1603
stRp9635
ag1
(g9146
g9115
(dp9636
g906
g1380
sg894
g1665
sg908
g1374
sg903
g1672
stRp9637
ag1
(g9146
g9115
(dp9638
g906
g1544
sg894
g1540
sg908
g1551
sg903
g1548
stRp9639
ag1
(g9146
g9115
(dp9640
g906
g1113
sg894
g1387
sg908
g1120
sg903
g1394
stRp9641
ag1
(g9146
g9115
(dp9642
g906
g1252
sg894
g1417
sg908
g1259
sg903
g1424
stRp9643
ag1
(g9146
g9115
(dp9644
g906
g1038
sg894
g1922
sg908
g1045
sg903
g1929
stRp9645
ag1
(g9146
g9115
(dp9646
g906
g1284
sg894
g1280
sg908
g1291
sg903
g1288
stRp9647
ag1
(g9146
g9115
(dp9648
g906
g1544
sg894
g2080
sg908
g1551
sg903
g2087
stRp9649
ag1
(g9146
g9115
(dp9650
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9651
ag1
(g9146
g9115
(dp9652
g906
g1160
sg894
g1297
sg908
g1167
sg903
g1304
stRp9653
ag1
(g9146
g9115
(dp9654
g906
g1004
sg894
g1596
sg908
g1011
sg903
g1603
stRp9655
ag1
(g9146
g9115
(dp9656
g906
g1160
sg894
g1156
sg908
g1167
sg903
g1164
stRp9657
ag1
(g9146
g9115
(dp9658
g906
g1113
sg894
g1387
sg908
g1120
sg903
g1394
stRp9659
ag1
(g9146
g9115
(dp9660
g906
g942
sg894
g932
sg908
g936
sg903
g940
stRp9661
ag1
(g9146
g9115
(dp9662
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9663
ag1
(g9146
g9115
(dp9664
g906
g953
sg894
g1338
sg908
g960
sg903
g1345
stRp9665
ag1
(g9146
g9115
(dp9666
g906
g1723
sg894
g2654
sg908
g1730
sg903
g2661
stRp9667
ag1
(g9146
g9115
(dp9668
g906
g970
sg894
g1141
sg908
g977
sg903
g1148
stRp9669
ag1
(g9146
g9115
(dp9670
g906
g1160
sg894
g1156
sg908
g1167
sg903
g1164
stRp9671
ag1
(g9146
g9115
(dp9672
g906
g1544
sg894
g2080
sg908
g1551
sg903
g2087
stRp9673
ag1
(g9146
g9115
(dp9674
g906
g1284
sg894
g1611
sg908
g1291
sg903
g1618
stRp9675
ag1
(g9146
g9115
(dp9676
g906
g1723
sg894
g1719
sg908
g1730
sg903
g1727
stRp9677
ag1
(g9146
g9115
(dp9678
g906
g1160
sg894
g1156
sg908
g1167
sg903
g1164
stRp9679
ag1
(g9146
g9115
(dp9680
g906
g1363
sg894
g1775
sg908
g1357
sg903
g1782
stRp9681
ag1
(g9146
g9115
(dp9682
g906
g1113
sg894
g1387
sg908
g1120
sg903
g1394
stRp9683
ag1
(g9146
g9115
(dp9684
g906
g1284
sg894
g1280
sg908
g1291
sg903
g1288
stRp9685
ag1
(g9146
g9115
(dp9686
g906
g1252
sg894
g1248
sg908
g1259
sg903
g1256
stRp9687
ag1
(g9146
g9115
(dp9688
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9689
ag1
(g9146
g9115
(dp9690
g906
g1380
sg894
g1665
sg908
g1374
sg903
g1672
stRp9691
ag1
(g9146
g9115
(dp9692
g906
g1038
sg894
g1034
sg908
g1045
sg903
g1042
stRp9693
ag1
(g9146
g9115
(dp9694
g906
g1183
sg894
g1790
sg908
g1177
sg903
g1797
stRp9695
ag1
(g9146
g9115
(dp9696
g906
g1027
sg894
g1017
sg908
g1021
sg903
g1025
stRp9697
ag1
(g9146
g9115
(dp9698
g906
g1284
sg894
g1611
sg908
g1291
sg903
g1618
stRp9699
ag1
(g9146
g9115
(dp9700
g906
g1194
sg894
g1190
sg908
g1201
sg903
g1198
stRp9701
ag1
(g9146
g9115
(dp9702
g906
g1055
sg894
g1051
sg908
g1062
sg903
g1059
stRp9703
ag1
(g9146
g9115
(dp9704
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9705
ag1
(g9146
g9115
(dp9706
g906
g1183
sg894
g1790
sg908
g1177
sg903
g1797
stRp9707
ag1
(g9146
g9115
(dp9708
g906
g1055
sg894
g1051
sg908
g1062
sg903
g1059
stRp9709
ag1
(g9146
g9115
(dp9710
g906
g1363
sg894
g1775
sg908
g1357
sg903
g1782
stRp9711
ag1
(g9146
g9115
(dp9712
g906
g1723
sg894
g2654
sg908
g1730
sg903
g2661
stRp9713
ag1
(g9146
g9115
(dp9714
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9715
ag1
(g9146
g9115
(dp9716
g906
g1027
sg894
g1402
sg908
g1021
sg903
g1409
stRp9717
ag1
(g9146
g9115
(dp9718
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9719
ag1
(g9146
g9115
(dp9720
g906
g1380
sg894
g1665
sg908
g1374
sg903
g1672
stRp9721
ag1
(g9146
g9115
(dp9722
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9723
ag1
(g9146
g9115
(dp9724
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9725
ag1
(g9146
g9115
(dp9726
g906
g1113
sg894
g1109
sg908
g1120
sg903
g1117
stRp9727
ag1
(g9146
g9115
(dp9728
g906
g1183
sg894
g1173
sg908
g1177
sg903
g1181
stRp9729
ag1
(g9146
g9115
(dp9730
g906
g1252
sg894
g1248
sg908
g1259
sg903
g1256
stRp9731
ag1
(g9146
g9115
(dp9732
g906
g1723
sg894
g2654
sg908
g1730
sg903
g2661
stRp9733
ag1
(g9146
g9115
(dp9734
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9735
ag1
(g9146
g9115
(dp9736
g906
g1544
sg894
g2080
sg908
g1551
sg903
g2087
stRp9737
ag1
(g9146
g9115
(dp9738
g906
g1363
sg894
g1775
sg908
g1357
sg903
g1782
stRp9739
ag1
(g9146
g9115
(dp9740
g906
g1544
sg894
g1540
sg908
g1551
sg903
g1548
stRp9741
ag1
(g9146
g9115
(dp9742
g906
g1723
sg894
g2654
sg908
g1730
sg903
g2661
stRp9743
ag1
(g9146
g9115
(dp9744
g906
g1194
sg894
g1512
sg908
g1201
sg903
g1519
stRp9745
ag1
(g9146
g9115
(dp9746
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9747
ag1
(g9146
g9115
(dp9748
g906
g1380
sg894
g1665
sg908
g1374
sg903
g1672
stRp9749
ag1
(g9146
g9115
(dp9750
g906
g987
sg894
g1265
sg908
g994
sg903
g1272
stRp9751
ag1
(g9146
g9115
(dp9752
g906
g1194
sg894
g1190
sg908
g1201
sg903
g1198
stRp9753
ag1
(g9146
g9115
(dp9754
g906
g1380
sg894
g1370
sg908
g1374
sg903
g1378
stRp9755
ag1
(g9146
g9115
(dp9756
g906
g1160
sg894
g1297
sg908
g1167
sg903
g1304
stRp9757
ag1
(g9146
g9115
(dp9758
g906
g1252
sg894
g1417
sg908
g1259
sg903
g1424
stRp9759
ag1
(g9146
g9115
(dp9760
g906
g1723
sg894
g2654
sg908
g1730
sg903
g2661
stRp9761
ag1
(g9146
g9115
(dp9762
g906
g1194
sg894
g1190
sg908
g1201
sg903
g1198
stRp9763
ag1
(g9146
g9115
(dp9764
g906
g1038
sg894
g1034
sg908
g1045
sg903
g1042
stRp9765
ag1
(g9146
g9115
(dp9766
g906
g919
sg894
g1458
sg908
g926
sg903
g1465
stRp9767
ag1
(g9146
g9115
(dp9768
g906
g1183
sg894
g1173
sg908
g1177
sg903
g1181
stRp9769
ag1
(g9146
g9115
(dp9770
g906
g1380
sg894
g1370
sg908
g1374
sg903
g1378
stRp9771
ag1
(g9146
g9115
(dp9772
g906
g1252
sg894
g1248
sg908
g1259
sg903
g1256
stRp9773
ag1
(g9146
g9115
(dp9774
g906
g1723
sg894
g1719
sg908
g1730
sg903
g1727
stRp9775
ag1
(g9146
g9115
(dp9776
g906
g987
sg894
g1265
sg908
g994
sg903
g1272
stRp9777
ag1
(g9146
g9115
(dp9778
g906
g1038
sg894
g1922
sg908
g1045
sg903
g1929
stRp9779
ag1
(g9146
g9115
(dp9780
g906
g1723
sg894
g1719
sg908
g1730
sg903
g1727
stRp9781
ag1
(g9146
g9115
(dp9782
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9783
ag1
(g9146
g9115
(dp9784
g906
g942
sg894
g932
sg908
g936
sg903
g940
stRp9785
ag1
(g9146
g9115
(dp9786
g906
g1380
sg894
g1370
sg908
g1374
sg903
g1378
stRp9787
ag1
(g9146
g9115
(dp9788
g906
g970
sg894
g1141
sg908
g977
sg903
g1148
stRp9789
ag1
(g9146
g9115
(dp9790
g906
g1183
sg894
g1790
sg908
g1177
sg903
g1797
stRp9791
ag1
(g9146
g9115
(dp9792
g906
g899
sg894
g1126
sg908
g909
sg903
g1133
stRp9793
ag1
(g9146
g9115
(dp9794
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9795
ag1
(g9146
g9115
(dp9796
g906
g1252
sg894
g1417
sg908
g1259
sg903
g1424
stRp9797
ag1
(g9146
g9115
(dp9798
g906
g1544
sg894
g2080
sg908
g1551
sg903
g2087
stRp9799
ag1
(g9146
g9115
(dp9800
g906
g1055
sg894
g1051
sg908
g1062
sg903
g1059
stRp9801
ag1
(g9146
g9115
(dp9802
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9803
ag1
(g9146
g9115
(dp9804
g906
g1723
sg894
g1719
sg908
g1730
sg903
g1727
stRp9805
ag1
(g9146
g9115
(dp9806
g906
g1284
sg894
g1611
sg908
g1291
sg903
g1618
stRp9807
ag1
(g9146
g9115
(dp9808
g906
g1027
sg894
g1402
sg908
g1021
sg903
g1409
stRp9809
ag1
(g9146
g9115
(dp9810
g906
g1160
sg894
g1297
sg908
g1167
sg903
g1304
stRp9811
ag1
(g9146
g9115
(dp9812
g906
g1027
sg894
g1017
sg908
g1021
sg903
g1025
stRp9813
asg9227
Nsg9228
g3609
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp9814
(dp9815
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9816
sg9107
(lp9817
sg9109
I80044880
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9818
g33
g9118
(g9119
g92
g9120
S'b'
tRp9819
(I1
(I200
I1
tg9244
I00
S'p\x97%\x12h\xd3%\x12\xa8\xd4%\x12\xd0\x97%\x12\x90\xd3%\x12\xd0\xd4%\x12\xf0\x98%\x12\xf8\xd4%\x12\xe0\xd3%\x120\x98%\x12\xc0\xda\xa5\x0c \xd0\xa5\x0c\xb0M%\x12p\x97%\x12h\xd3%\x12H\xd5%\x12\x80\xd0\xa5\x0c`\x98%\x12\x00\x98%\x120\x98%\x12\xb0M%\x120\xd4%\x12\x08\xd4%\x12\xe0\xd3%\x12\x00\xd1\xa5\x0c \xd0\xa5\x0c\x80\x99%\x12`\x98%\x12X\xd4%\x12\xa0\xd0\xa5\x0c N%\x12\x08\xd4%\x12h\xd3%\x12\xe0\xd3%\x12\xd0\x97%\x12\xe0\xd3%\x12`\x98%\x12 N%\x12p\x97%\x120\xd4%\x120\x98%\x12\xc0\xd5%\x12\xe0\xd3%\x12\xf8\xd4%\x12\x00\x98%\x12X\xd4%\x12\x00\x98%\x12\xa0\x97%\x12\xd0\x97%\x12\xe8M%\x12\xb0M%\x12`\x98%\x12h\xd3%\x12 \xd0\xa5\x0c\x00\x98%\x12\xc0\x98%\x12\x80\xd0\xa5\x0c\xc0\xd0\xa5\x0cX\xd4%\x12\xa0\x97%\x12 \x99%\x12\xd0\xd4%\x12XN%\x12\xc0\x98%\x120\xd4%\x12 \xd0\xa5\x0c\x80\x99%\x12h\xd3%\x12\x00\xd1\xa5\x0c\xc0\xda\xa5\x0cp\x97%\x120\x98%\x12\xc0\xd0\xa5\x0cH\xd5%\x12\x00\xd1\xa5\x0c N%\x120\xd4%\x12\xd0\x97%\x12\x00\x98%\x12\x00\xd1\xa5\x0c\xc0\xd0\xa5\x0cXN%\x12\xd0\x97%\x12\xb0M%\x120\xd4%\x12p\x97%\x12\x90\xd3%\x12\xa0\x97%\x120\x98%\x12\x00\xd1\xa5\x0c\xd0\x97%\x12 \xd5%\x12 \xd0\xa5\x0c\xc0\xd0\xa5\x0c\x00\xd1\xa5\x0ch\xd3%\x12\xe0\xd3%\x12\x90\x98%\x12 N%\x12X\xd4%\x12 \xd0\xa5\x0c\x00\x98%\x12X\xd4%\x12P\x99%\x12\xf0\x98%\x12X\xd4%\x12\xc0\xda\xa5\x0c\xc8N%\x120\x98%\x12\xe8M%\x120\x98%\x12p\x97%\x12\xa0\x97%\x12\xb0M%\x12\xd0\x97%\x12\xe0\xd3%\x120\xd4%\x12\xa0\x97%\x12\x08\xd4%\x12\xe8M%\x12XN%\x12\x00\xd1\xa5\x0c\x08\xd4%\x12 \xd0\xa5\x0c`\x98%\x12 \xd0\xa5\x0c0\xd4%\x12H\xd5%\x12\xa0\x97%\x12\xd0\xd4%\x12\xb0M%\x120\x98%\x12\xb8\xd3%\x12\xc0\xd0\xa5\x0c\xb8\xd3%\x12p\x97%\x12\xc0\xda\xa5\x0c\xa0\x97%\x12H\xd5%\x12\x80\xd0\xa5\x0c0\xd4%\x12\xc0\xda\xa5\x0c0\x98%\x12\xe8M%\x12\xb0M%\x12\x90\xd3%\x120\xd4%\x12 N%\x12h\xd3%\x12\xb8\xd3%\x12\xa0\x97%\x12\x08\xd4%\x12\x00\xd1\xa5\x0c N%\x12\xe8M%\x12`\x98%\x12\xb8\xd3%\x12\x00\xd1\xa5\x0c\xa0\x97%\x12\xc0\xd0\xa5\x0c\xe8M%\x12\x00\x98%\x12\xc0\xda\xa5\x0c\xb8\xd3%\x12P\x99%\x12h\xd3%\x12P\x99%\x12X\xd4%\x12h\xd3%\x12\xc8N%\x12\x00\xd1\xa5\x0c\xd0\x97%\x12\x00O%\x12\xb0M%\x12\x90\xd3%\x12 \xd5%\x12\xb8\xd3%\x12 N%\x12\x00\x98%\x12\xe8M%\x12\xc0\xd0\xa5\x0c\x90\xd3%\x12\x00O%\x12\x90\xd3%\x12`\x98%\x12\xc0\xd5%\x12\xc0\xda\xa5\x0c\x90\xd3%\x12h\xd3%\x12\x90\xd3%\x12X\xd4%\x12\xe8M%\x12\xe0\xd3%\x12\xd0\x97%\x12 N%\x120\xd4%\x12\xe8M%\x12\x08\xd4%\x12\xc0\xd0\xa5\x0c\xb8\xd3%\x12'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9820
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9821
(I1
(I200
I1
tg9244
I00
S' l\xb5\x04\xe0`\x0f\x03\x00k\xb5\x04@\xd3\xa5\x0c@\xd1\xa5\x0c\xe0\xd0\xa5\x0c\xc0`\x0f\x03`\xa2M\x0c\xa0\xa1M\x0c\xe0\xa3M\x0c\x00\xa3M\x0c@\xa8M\x0c\xc0\xa0M\x0c\xa0\xa3M\x0c@\xa3M\x0c \xa2M\x0c \xa3M\x0c\x80\xa3M\x0c\xa0\xa4M\x0c\x00\xa2M\x0c\xc0\xa5M\x0c`\xa1M\x0c`\xa5M\x0c\xa0\xa2M\x0c\xe0\xa1M\x0c\x00\xa5M\x0c\x80\xa4M\x0c \xa4M\x0c\xc0\xa2M\x0c \xa6M\x0c`\xa4M\x0c\x00\xa6M\x0c\xc0\xa6M\x0c\x80\xa6M\x0c\x80\xa5M\x0c\x80\xa7M\x0c\xe0\xa4M\x0c \xa0M\x0c\xe0\xa5M\x0c@\xa7M\x0c\x00\xa1M\x0c`\xa3M\x0c@\xa4M\x0c@\xa5M\x0c@\xa0M\x0c@\xa6M\x0c\x00\xa8M\x0c\xe0\xa7M\x0c\xc0\xa1M\x0c \xa5M\x0c`\xa8M\x0c\xc0\xa3M\x0c\xe0\xa8M\x0c \xa8M\x0c\xc0\xa8M\x0c\xc0\xa9M\x0c\xe0\xa6M\x0c`\xa0M\x0c\xa0\xa6M\x0c \xa9M\x0c \xa7M\x0c\x80\xce\x10\x03\xe0\xc4\x10\x03\xa0\xc3\x10\x03\xa0\xc9\x10\x03@\xc4\x10\x03`\xc5\x10\x03`\xcf\x10\x03@\xcd\x10\x03`\xc6\x10\x03\xc0\xcc\x10\x03\xc0\xc4\x10\x03\x00\xc4\x10\x03\xe0\xcf\x10\x03 \xcf\x10\x03@\xcf\x10\x03\xa0\xcd\x10\x03\xa0\xcf\x10\x03\x80\xcf\x10\x03 \xcb\x10\x03\xc0\xcf\x10\x03\x00\xcd\x10\x03\x00\xc9\x10\x03 \xc9\x10\x03\xc0\xc9\x10\x03\xa0\xce\x10\x03\x80\xcd\x10\x03\x80\xc0\x10\x03@\xc6\x10\x03\x80\xc4\x10\x03@\xca\x10\x03\x80\xcb\x10\x03\x00\xcb\x10\x03@\xcb\x10\x03\xc0\xcd\x10\x03@\xc9\x10\x03\x80\xc9\x10\x03\x80\xca\x10\x03\xe0\xcb\x10\x03`\xcb\x10\x03`\xc9\x10\x03 \xc5\x10\x03\xc0\xca\x10\x03@\x0f\x10\x03\xa0\xc8\x10\x03\x80\xcc\x10\x03\xe0kM\x0c\xc0\x0f\x10\x03\x80lM\x0c\x00cM\x0c\xc0kM\x0c\xe0fM\x0c@kM\x0c@mM\x0c\xa0fM\x0c\xa0bM\x0c fM\x0c\x00fM\x0c`fM\x0c`gM\x0c\xc0gM\x0c\xa0lM\x0c\xe0bM\x0c\x00gM\x0c gM\x0c\x00kM\x0c\x80mM\x0c@gM\x0c\xe0\xcf\xb2\x04\x80fM\x0c@cM\x0c\x00lM\x0c bM\x0c`bM\x0c `M\x0c\x80cM\x0c kM\x0c`lM\x0c`\xca\x10\x03 \xcd\x10\x03\xa0gM\x0c uZ\x0c\xa0tZ\x0c@{Z\x0c\xe0uZ\x0c\x00zZ\x0c\xc0yZ\x0c\x00rZ\x0c\xc0uZ\x0c\xa0cM\x0c\x00{Z\x0c\xc0bM\x0c\xa0\xda\xa5\x0c\x00\xd3\xa5\x0c\x00\xd7\xa5\x0c@\xd0\xa5\x0c`\xda\xa5\x0c\xc0\xd2\xa5\x0c`\xd1\xa5\x0c \xd3\xa5\x0c`N[\x0c`C[\x0c\xc0G[\x0c\xe0K[\x0c\xe0A[\x0c\x00L[\x0c\xe0D[\x0c\x00A[\x0c L[\x0c\xe0F[\x0c\x00B[\x0c\xa0K[\x0c A[\x0c\xa0A[\x0c\x80D[\x0c\xc0D[\x0c@rY\x0c\xa0\xb0\xa8\x0c`\xb9\xa8\x0c\xa0\xb6\xa8\x0c\xe0\xb2\xa8\x0c\xe0\xb6\xa8\x0c\xc0\xb0\xa8\x0c`\xb0\xa8\x0c\xc0\xb4\xa8\x0c\x80\xb0\xa8\x0c \xbf\xa8\x0c\x00\xb7\xa8\x0c\x00vZ\x0c\xc0\t\xa9\x0c \x0b\xa9\x0c\xc0\x06\xa9\x0c\xa0\t\xa9\x0c\x00\xc6\x10\x03@\xb0\xa8\x0c\xc0k\x0f\x03@a\x0f\x03\xe0k\x0f\x03`a\x0f\x03@b\x0f\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9822
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9823
(I1
(I200
I1
tg9122
I00
S'\xdf\x85w?\xae\x99Y?\xe4\xa0Y?aJ\x84?Vow?\xd2\xe9]?\x1b\x16\x91?(\\\xb5?`.b?:\xc4;?\x87\x96H?/bU?\n\xa0\x99?;\xb7j?*\xbc\xdb?\xca\x9b7?\x18;3?\xd7\xad\x8a?\xb2~w?m\xeb\x1d?\xab\xf6n?\xa5PD?\x8b\x02\x80?\xa9\xb1j?,aU?#\t\x80?\xfd\x91H?\x16\x14\x80?\xd2\x93H?f(b?\x9b\xea]?sQD?\xc3%b?\x81:b?\x7f\xe2]?\xe4\xd5L?r\x06\x80?\xd1\x83w?\x12~\x97?\xac;3?\xa393?\xd5\xc1{?\xe0=3?\x04;s?\xef<\xb3?\xa1\xf6n?\xfe\x8b\x88?\x05\x8d\x88?\xb2\xf7n?1\x9c\x88?\x9c/b?V\xa7Y?\x95GD?U\xb4j?\x0f*b?\xba@D?\xba\\\x95??\x84w?\r\x97H?\x9e\xe3]?\x04\x06@?s\x9bw?\x0c\x90H?\x83\xd3]?mA3?\xb3\xfcn?sl&?8)b?\xec\x9b\xf9?\xb9H\x84?"\xc4;?\xdc2"?\xfb\xc5;?\xdfJD?\xd5l\x86?\x11\xfan?L\xeb\x1d?{\x97H?\xcb\x8e\x88?\xc2\xc7;?q\xc1;?\xbb\x827?w\x06@?K\x16\xf1?\x9e\x18Q?A\xd9L?\xf6\xe9n?\x91\x92H?\x91\xea\x1d?\xf9\x9bw?O\xf8n?\xae\xea]?\xfe\x8c\x88?#\x05@?_\x95H?\xee\xd5L?!\xd1\x8c?\x7f\xc5{?w&\x82?\xdd\xdaL?\xa9\x92H?\xa0:\x93?t\xb7*?\x06\xf5\xae?f[U?\xfb\xa6Y?\xa6\xd2\x8c?Y0s?\x0e\xc6;?\x80\xd5L?\xb2\xf5.?\x98\xed]?nnD?>\xfbn?\x1b\xf6n?\xe8\x16\x91?\xb4ND?HMD?\t\xca;?\x8e\xd2\x8c?\xed\xa6Y?/\\\xb5?\xbc~7?%Cs?\xf9\x01\x80?\xbb\x847?\x99\xfbn?\x85\x7f7?\xbc\x0eQ?\xcd7Q?;\xd4\x8c?\x140b?\xae{\x97?*\xeb]?5\x11\x80?Q\x05\xe0?\xbb\x8a\x88?\xe1lf?Y\x8c\x88?m\xcd\x9b?\xb1QD?u\x19Q?\xb383?\r\x0e@?\xde\xcb{?#\xb9\x9b?\x98\xce;?=)b?\x93\'b?\xc5~w?:\xf7n?\x10\xb4{?\xe7\x06\x80?\xddaU?\xc5\x827?i\xaf\x8a?p\x1dQ?F\xd9L?QQD?e\xfbn?\x08/b?\x17\xb4j?X@s?}\xdaL?\xd5\xbf\x9b?\x8c\x9fY?\x81\xe5]?\x17y7?\xc3\xbd;?\xc8\x967?\xbd\xa4Y?J\xe4]?\x18\x04\x80?]\x8b\xe8?UB\x84?\xe5;3?\x16\x0e@?\xec\xd2\x8c?WeU?\xa9\x92H?lFb?\xb2\xf6\x7f?<\x17Q?\xc4\x1db?\xfeOD?\xb5\xb6*?\'Gb?\xfd\x0bQ?\x06("?\xa8\xfa??\xc7\x8a\x88?\x87\xf5n?\xa5RD?\xfc}w?rtf?\xefr&?\x9b>3?\xb6lf?\xc4\xc0Y?(\xea]?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9824
(I1
(I200
I1
tg9244
I00
S'\xb8t\xf5\x04\xd8~\xf5\x04\xd0:\x85\x04@:\x85\x04\xc89\x85\x04\xa8>\x85\x04X=\x85\x04\xe0?\x85\x04\x88=\x85\x04\xa0=\x85\x04\x90>\x85\x04H>\x85\x04 9\x85\x04h?\x85\x04\x989\x85\x04(=\x85\x04\xb87\x85\x04x>\x85\x04\xc05\x85\x04\x80<\x85\x04\xf80\x85\x04\x00>\x85\x04\xb09\x85\x04x2\x85\x04\x089\x85\x04p1\x85\x04\x18>\x85\x04\xe09\x85\x04X7\x85\x04P9\x85\x0486\x85\x04h3\x85\x04`>\x85\x04\x90;\x85\x04\x00;\x85\x0408\x85\x04H2\x85\x04\xb03\x85\x04\xb0?\x85\x04\xc86\x85\x04\x98<\x85\x04\xe06\x85\x0480\x85\x04\x887\x85\x04\x88:\x85\x04X:\x85\x04\xc08\x85\x04\x008\x85\x04\x08<\x85\x04p=\x85\x04\xa0:\x85\x04\xc8?\x85\x04\x983\x85\x04(:\x85\x04\xb8:\x85\x04 <\x85\x04\xc8<\x85\x04@7\x85\x04\x10:\x85\x04\xb8=\x85\x04\xd8>\x85\x04p\x17\x16\x05\xf0>\x85\x040;\x85\x04\xf8<\x85\x04\xa07\x85\x048?\x85\x04@=\x85\x04\x10=\x85\x04 ?\x85\x04\x98?\x85\x04\x809\x85\x04\x80?\x85\x04P?\x85\x04p7\x85\x048<\x85\x04H8\x85\x04\xf0;\x85\x04\x980\x85\x04\xb81\x85\x04P<\x85\x04\xe0<\x85\x04h<\x85\x04\xe8\xbd\xed\x04\x80\xbf\xed\x04\x98\xb3\xed\x04\xf0\xb8\xed\x04\xf8\xb0\xed\x04h\xbc\xed\x04\xd8\xbb\xed\x04\x10\xb7\xed\x04\xf8\xb6\xed\x04\xb8\xba\xed\x04\x88\xb4\xed\x04\xf0\xbb\xed\x04\xd8\xb2\xed\x04\x98\xb0\xed\x04\xb8\xbd\xed\x04x\xb8\xed\x04\x10\xbd\xed\x04\x10\xb4\xed\x04(\xbd\xed\x040\xb5\xed\x04\xe0\xb9\xed\x04\xf8\xb9\xed\x04p\xb1\xed\x04\xa8\xb2\xed\x04\xe0\xb0\xed\x04 \xb0\xed\x04\xc0\xbe\xed\x04\xe0\xb6\xed\x04\xc8\xb3\xed\x04@\xb4\xed\x04P\xb3\xed\x040\xbb\xed\x04p\xba\xed\x04\xc8\xb0\xed\x04\xa8\xbb\xed\x04\xf8\xbc\xed\x04 \xb3\xed\x04\x98\xbc\xed\x048\xbc\xed\x04 \xbf\xed\x04\xa0\xb7\xed\x04\x08\xb3\xed\x04H\xb2\xed\x04\x18\xb5\xed\x048\xb9\xed\x04\xa0\xb1\xf4\x04\x00\xbe\xf4\x04H\xbe\xf4\x04\x90\xbb\xf4\x04\xd8\xbe\xf4\x04\xe8\xb7\xf4\x04\x08?\x85\x04\x182\x85\x04\xf08\x85\x04X1\x85\x04\xe03\x85\x04h0\x85\x04\x188\x85\x04\xd88\x85\x04\xb0<\x85\x04\xa8;\x85\x04\xe87\x85\x04\xc83\x85\x04\xe8:\x85\x04(1\x85\x040>\x85\x04\xb00\x85\x04\xf83\x85\x04\x908\x85\x04\xd82\x85\x04\xc0;\x85\x04\x107\x85\x04\xf89\x85\x04P6\x85\x04\x18;\x85\x04\xa01\x85\x04\xf05\x85\x04\xe81\x85\x04p:\x85\x04@4\x85\x04`;\x85\x04H;\x85\x04(7\x85\x04`8\x85\x04\xc80\x85\x0402\x85\x04\x902\x85\x04\xa85\x85\x04\x986\x85\x04\xe00\x85\x04h6\x85\x04\xa88\x85\x04\xd01\x85\x04\x803\x85\x04\xf86\x85\x04\x086\x85\x04\xd8;\x85\x0489\x85\x04\xa82\x85\x04`2\x85\x04x;\x85\x04h9\x85\x04P3\x85\x04\x806\x85\x04 6\x85\x04x8\x85\x04\xd07\x85\x04\x881\x85\x04@1\x85\x04\x800\x85\x04P0\x85\x04\x101\x85\x04\x002\x85\x04\xc0>\x85\x04\xd85\x85\x04\x104\x85\x04 0\x85\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9825
(dp9826
g9130
(dp9827
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9814
sg9133
(lp9828
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9829
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9830
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9831
g1
(g9146
g9115
(dp9832
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9833
ag1
(g9146
g9115
(dp9834
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9835
ag1
(g9146
g9115
(dp9836
g3644
g3680
sg3632
g3670
sg3646
g3674
sg3641
g3678
stRp9837
ag1
(g9146
g9115
(dp9838
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9839
ag1
(g9146
g9115
(dp9840
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9841
ag1
(g9146
g9115
(dp9842
g3644
g3731
sg3632
g3721
sg3646
g3725
sg3641
g3729
stRp9843
ag1
(g9146
g9115
(dp9844
g3644
g3748
sg3632
g3738
sg3646
g3742
sg3641
g3746
stRp9845
ag1
(g9146
g9115
(dp9846
g3644
g3765
sg3632
g3755
sg3646
g3759
sg3641
g3763
stRp9847
ag1
(g9146
g9115
(dp9848
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp9849
ag1
(g9146
g9115
(dp9850
g3644
g3793
sg3632
g3789
sg3646
g3800
sg3641
g3797
stRp9851
ag1
(g9146
g9115
(dp9852
g3644
g3810
sg3632
g3806
sg3646
g3817
sg3641
g3814
stRp9853
ag1
(g9146
g9115
(dp9854
g3644
g3827
sg3632
g3823
sg3646
g3834
sg3641
g3831
stRp9855
ag1
(g9146
g9115
(dp9856
g3644
g3765
sg3632
g3840
sg3646
g3759
sg3641
g3847
stRp9857
ag1
(g9146
g9115
(dp9858
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9859
ag1
(g9146
g9115
(dp9860
g3644
g3657
sg3632
g3868
sg3646
g3664
sg3641
g3875
stRp9861
ag1
(g9146
g9115
(dp9862
g3644
g3893
sg3632
g3883
sg3646
g3887
sg3641
g3891
stRp9863
ag1
(g9146
g9115
(dp9864
g3644
g3810
sg3632
g3806
sg3646
g3817
sg3641
g3814
stRp9865
ag1
(g9146
g9115
(dp9866
g3644
g3917
sg3632
g3913
sg3646
g3924
sg3641
g3921
stRp9867
ag1
(g9146
g9115
(dp9868
g3644
g3748
sg3632
g3930
sg3646
g3742
sg3641
g3937
stRp9869
ag1
(g9146
g9115
(dp9870
g3644
g3793
sg3632
g3789
sg3646
g3800
sg3641
g3797
stRp9871
ag1
(g9146
g9115
(dp9872
g3644
g3765
sg3632
g3840
sg3646
g3759
sg3641
g3847
stRp9873
ag1
(g9146
g9115
(dp9874
g3644
g3975
sg3632
g3971
sg3646
g3982
sg3641
g3979
stRp9875
ag1
(g9146
g9115
(dp9876
g3644
g3893
sg3632
g3988
sg3646
g3887
sg3641
g3995
stRp9877
ag1
(g9146
g9115
(dp9878
g3644
g3776
sg3632
g4003
sg3646
g3783
sg3641
g4010
stRp9879
ag1
(g9146
g9115
(dp9880
g3644
g4022
sg3632
g4018
sg3646
g4029
sg3641
g4026
stRp9881
ag1
(g9146
g9115
(dp9882
g3644
g3827
sg3632
g3823
sg3646
g3834
sg3641
g3831
stRp9883
ag1
(g9146
g9115
(dp9884
g3644
g4058
sg3632
g4048
sg3646
g4052
sg3641
g4056
stRp9885
ag1
(g9146
g9115
(dp9886
g3644
g3917
sg3632
g3913
sg3646
g3924
sg3641
g3921
stRp9887
ag1
(g9146
g9115
(dp9888
g3644
g4058
sg3632
g4048
sg3646
g4052
sg3641
g4056
stRp9889
ag1
(g9146
g9115
(dp9890
g3644
g4101
sg3632
g4091
sg3646
g4095
sg3641
g4099
stRp9891
ag1
(g9146
g9115
(dp9892
g3644
g4112
sg3632
g4108
sg3646
g4119
sg3641
g4116
stRp9893
ag1
(g9146
g9115
(dp9894
g3644
g3893
sg3632
g3883
sg3646
g3887
sg3641
g3891
stRp9895
ag1
(g9146
g9115
(dp9896
g3644
g3657
sg3632
g3868
sg3646
g3664
sg3641
g3875
stRp9897
ag1
(g9146
g9115
(dp9898
g3644
g3776
sg3632
g4003
sg3646
g3783
sg3641
g4010
stRp9899
ag1
(g9146
g9115
(dp9900
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9901
ag1
(g9146
g9115
(dp9902
g3644
g3776
sg3632
g4003
sg3646
g3783
sg3641
g4010
stRp9903
ag1
(g9146
g9115
(dp9904
g3644
g3917
sg3632
g4190
sg3646
g3924
sg3641
g4197
stRp9905
ag1
(g9146
g9115
(dp9906
g3644
g4112
sg3632
g4108
sg3646
g4119
sg3641
g4116
stRp9907
ag1
(g9146
g9115
(dp9908
g3644
g3637
sg3632
g4218
sg3646
g3647
sg3641
g4225
stRp9909
ag1
(g9146
g9115
(dp9910
g3644
g3975
sg3632
g4233
sg3646
g3982
sg3641
g4240
stRp9911
ag1
(g9146
g9115
(dp9912
g3644
g3793
sg3632
g4248
sg3646
g3800
sg3641
g4255
stRp9913
ag1
(g9146
g9115
(dp9914
g3644
g4273
sg3632
g4263
sg3646
g4267
sg3641
g4271
stRp9915
ag1
(g9146
g9115
(dp9916
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp9917
ag1
(g9146
g9115
(dp9918
g3644
g3765
sg3632
g3755
sg3646
g3759
sg3641
g3763
stRp9919
ag1
(g9146
g9115
(dp9920
g3644
g3748
sg3632
g3930
sg3646
g3742
sg3641
g3937
stRp9921
ag1
(g9146
g9115
(dp9922
g3644
g4058
sg3632
g4319
sg3646
g4052
sg3641
g4326
stRp9923
ag1
(g9146
g9115
(dp9924
g3644
g3748
sg3632
g3930
sg3646
g3742
sg3641
g3937
stRp9925
ag1
(g9146
g9115
(dp9926
g3644
g3680
sg3632
g4347
sg3646
g3674
sg3641
g4354
stRp9927
ag1
(g9146
g9115
(dp9928
g3644
g3691
sg3632
g4362
sg3646
g3698
sg3641
g4369
stRp9929
ag1
(g9146
g9115
(dp9930
g3644
g4101
sg3632
g4091
sg3646
g4095
sg3641
g4099
stRp9931
ag1
(g9146
g9115
(dp9932
g3644
g3765
sg3632
g3755
sg3646
g3759
sg3641
g3763
stRp9933
ag1
(g9146
g9115
(dp9934
g3644
g3917
sg3632
g3913
sg3646
g3924
sg3641
g3921
stRp9935
ag1
(g9146
g9115
(dp9936
g3644
g3657
sg3632
g3868
sg3646
g3664
sg3641
g3875
stRp9937
ag1
(g9146
g9115
(dp9938
g3644
g3827
sg3632
g4429
sg3646
g3834
sg3641
g4436
stRp9939
ag1
(g9146
g9115
(dp9940
g3644
g3748
sg3632
g3738
sg3646
g3742
sg3641
g3746
stRp9941
ag1
(g9146
g9115
(dp9942
g3644
g3708
sg3632
g4457
sg3646
g3715
sg3641
g4464
stRp9943
ag1
(g9146
g9115
(dp9944
g3644
g3810
sg3632
g4472
sg3646
g3817
sg3641
g4479
stRp9945
ag1
(g9146
g9115
(dp9946
g3644
g4273
sg3632
g4487
sg3646
g4267
sg3641
g4494
stRp9947
ag1
(g9146
g9115
(dp9948
g3644
g4058
sg3632
g4319
sg3646
g4052
sg3641
g4326
stRp9949
ag1
(g9146
g9115
(dp9950
g3644
g3680
sg3632
g3670
sg3646
g3674
sg3641
g3678
stRp9951
ag1
(g9146
g9115
(dp9952
g3644
g3793
sg3632
g4248
sg3646
g3800
sg3641
g4255
stRp9953
ag1
(g9146
g9115
(dp9954
g3644
g3731
sg3632
g4541
sg3646
g3725
sg3641
g4548
stRp9955
ag1
(g9146
g9115
(dp9956
g3644
g3637
sg3632
g4218
sg3646
g3647
sg3641
g4225
stRp9957
ag1
(g9146
g9115
(dp9958
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9959
ag1
(g9146
g9115
(dp9960
g3644
g3975
sg3632
g3971
sg3646
g3982
sg3641
g3979
stRp9961
ag1
(g9146
g9115
(dp9962
g3644
g3827
sg3632
g4429
sg3646
g3834
sg3641
g4436
stRp9963
ag1
(g9146
g9115
(dp9964
g3644
g4058
sg3632
g4319
sg3646
g4052
sg3641
g4326
stRp9965
ag1
(g9146
g9115
(dp9966
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9967
ag1
(g9146
g9115
(dp9968
g3644
g4022
sg3632
g4018
sg3646
g4029
sg3641
g4026
stRp9969
ag1
(g9146
g9115
(dp9970
g3644
g3810
sg3632
g4472
sg3646
g3817
sg3641
g4479
stRp9971
ag1
(g9146
g9115
(dp9972
g3644
g3637
sg3632
g4218
sg3646
g3647
sg3641
g4225
stRp9973
ag1
(g9146
g9115
(dp9974
g3644
g3793
sg3632
g4248
sg3646
g3800
sg3641
g4255
stRp9975
ag1
(g9146
g9115
(dp9976
g3644
g4273
sg3632
g4487
sg3646
g4267
sg3641
g4494
stRp9977
ag1
(g9146
g9115
(dp9978
g3644
g3893
sg3632
g3988
sg3646
g3887
sg3641
g3995
stRp9979
ag1
(g9146
g9115
(dp9980
g3644
g4022
sg3632
g4018
sg3646
g4029
sg3641
g4026
stRp9981
ag1
(g9146
g9115
(dp9982
g3644
g4112
sg3632
g4108
sg3646
g4119
sg3641
g4116
stRp9983
ag1
(g9146
g9115
(dp9984
g3644
g3975
sg3632
g4233
sg3646
g3982
sg3641
g4240
stRp9985
ag1
(g9146
g9115
(dp9986
g3644
g3691
sg3632
g4362
sg3646
g3698
sg3641
g4369
stRp9987
ag1
(g9146
g9115
(dp9988
g3644
g3748
sg3632
g3738
sg3646
g3742
sg3641
g3746
stRp9989
ag1
(g9146
g9115
(dp9990
g3644
g4022
sg3632
g4777
sg3646
g4029
sg3641
g4784
stRp9991
ag1
(g9146
g9115
(dp9992
g3644
g4273
sg3632
g4263
sg3646
g4267
sg3641
g4271
stRp9993
ag1
(g9146
g9115
(dp9994
g3644
g3637
sg3632
g4218
sg3646
g3647
sg3641
g4225
stRp9995
ag1
(g9146
g9115
(dp9996
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9997
ag1
(g9146
g9115
(dp9998
g3644
g3765
sg3632
g3755
sg3646
g3759
sg3641
g3763
stRp9999
ag1
(g9146
g9115
(dp10000
g3644
g3975
sg3632
g3971
sg3646
g3982
sg3641
g3979
stRp10001
ag1
(g9146
g9115
(dp10002
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10003
ag1
(g9146
g9115
(dp10004
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10005
ag1
(g9146
g9115
(dp10006
g3644
g3680
sg3632
g3670
sg3646
g3674
sg3641
g3678
stRp10007
ag1
(g9146
g9115
(dp10008
g3644
g3793
sg3632
g4248
sg3646
g3800
sg3641
g4255
stRp10009
ag1
(g9146
g9115
(dp10010
g3644
g4022
sg3632
g4018
sg3646
g4029
sg3641
g4026
stRp10011
ag1
(g9146
g9115
(dp10012
g3644
g3691
sg3632
g4362
sg3646
g3698
sg3641
g4369
stRp10013
ag1
(g9146
g9115
(dp10014
g3644
g3776
sg3632
g4003
sg3646
g3783
sg3641
g4010
stRp10015
ag1
(g9146
g9115
(dp10016
g3644
g3827
sg3632
g4429
sg3646
g3834
sg3641
g4436
stRp10017
ag1
(g9146
g9115
(dp10018
g3644
g4273
sg3632
g4263
sg3646
g4267
sg3641
g4271
stRp10019
ag1
(g9146
g9115
(dp10020
g3644
g4022
sg3632
g4777
sg3646
g4029
sg3641
g4784
stRp10021
ag1
(g9146
g9115
(dp10022
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10023
ag1
(g9146
g9115
(dp10024
g3644
g3776
sg3632
g4003
sg3646
g3783
sg3641
g4010
stRp10025
ag1
(g9146
g9115
(dp10026
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10027
ag1
(g9146
g9115
(dp10028
g3644
g4112
sg3632
g5026
sg3646
g4119
sg3641
g5033
stRp10029
ag1
(g9146
g9115
(dp10030
g3644
g4058
sg3632
g4048
sg3646
g4052
sg3641
g4056
stRp10031
ag1
(g9146
g9115
(dp10032
g3644
g3827
sg3632
g4429
sg3646
g3834
sg3641
g4436
stRp10033
ag1
(g9146
g9115
(dp10034
g3644
g3748
sg3632
g3930
sg3646
g3742
sg3641
g3937
stRp10035
ag1
(g9146
g9115
(dp10036
g3644
g4058
sg3632
g4048
sg3646
g4052
sg3641
g4056
stRp10037
ag1
(g9146
g9115
(dp10038
g3644
g3917
sg3632
g4190
sg3646
g3924
sg3641
g4197
stRp10039
ag1
(g9146
g9115
(dp10040
g3644
g3748
sg3632
g3930
sg3646
g3742
sg3641
g3937
stRp10041
ag1
(g9146
g9115
(dp10042
g3644
g4058
sg3632
g4319
sg3646
g4052
sg3641
g4326
stRp10043
ag1
(g9146
g9115
(dp10044
g3644
g3810
sg3632
g3806
sg3646
g3817
sg3641
g3814
stRp10045
ag1
(g9146
g9115
(dp10046
g3644
g3827
sg3632
g4429
sg3646
g3834
sg3641
g4436
stRp10047
ag1
(g9146
g9115
(dp10048
g3644
g3793
sg3632
g3789
sg3646
g3800
sg3641
g3797
stRp10049
ag1
(g9146
g9115
(dp10050
g3644
g4101
sg3632
g5171
sg3646
g4095
sg3641
g5178
stRp10051
ag1
(g9146
g9115
(dp10052
g3644
g3793
sg3632
g4248
sg3646
g3800
sg3641
g4255
stRp10053
ag1
(g9146
g9115
(dp10054
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10055
ag1
(g9146
g9115
(dp10056
g3644
g3680
sg3632
g4347
sg3646
g3674
sg3641
g4354
stRp10057
ag1
(g9146
g9115
(dp10058
g3644
g3765
sg3632
g3840
sg3646
g3759
sg3641
g3847
stRp10059
ag1
(g9146
g9115
(dp10060
g3644
g3691
sg3632
g4362
sg3646
g3698
sg3641
g4369
stRp10061
ag1
(g9146
g9115
(dp10062
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp10063
ag1
(g9146
g9115
(dp10064
g3644
g3975
sg3632
g4233
sg3646
g3982
sg3641
g4240
stRp10065
ag1
(g9146
g9115
(dp10066
g3644
g3680
sg3632
g4347
sg3646
g3674
sg3641
g4354
stRp10067
ag1
(g9146
g9115
(dp10068
g3644
g3893
sg3632
g3883
sg3646
g3887
sg3641
g3891
stRp10069
ag1
(g9146
g9115
(dp10070
g3644
g4101
sg3632
g5171
sg3646
g4095
sg3641
g5178
stRp10071
ag1
(g9146
g9115
(dp10072
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10073
ag1
(g9146
g9115
(dp10074
g3644
g4022
sg3632
g4777
sg3646
g4029
sg3641
g4784
stRp10075
ag1
(g9146
g9115
(dp10076
g3644
g3893
sg3632
g3883
sg3646
g3887
sg3641
g3891
stRp10077
ag1
(g9146
g9115
(dp10078
g3644
g3827
sg3632
g3823
sg3646
g3834
sg3641
g3831
stRp10079
ag1
(g9146
g9115
(dp10080
g3644
g3917
sg3632
g3913
sg3646
g3924
sg3641
g3921
stRp10081
ag1
(g9146
g9115
(dp10082
g3644
g3827
sg3632
g3823
sg3646
g3834
sg3641
g3831
stRp10083
ag1
(g9146
g9115
(dp10084
g3644
g3975
sg3632
g3971
sg3646
g3982
sg3641
g3979
stRp10085
ag1
(g9146
g9115
(dp10086
g3644
g3893
sg3632
g3883
sg3646
g3887
sg3641
g3891
stRp10087
ag1
(g9146
g9115
(dp10088
g3644
g3680
sg3632
g4347
sg3646
g3674
sg3641
g4354
stRp10089
ag1
(g9146
g9115
(dp10090
g3644
g3731
sg3632
g3721
sg3646
g3725
sg3641
g3729
stRp10091
ag1
(g9146
g9115
(dp10092
g3644
g3765
sg3632
g3755
sg3646
g3759
sg3641
g3763
stRp10093
ag1
(g9146
g9115
(dp10094
g3644
g3793
sg3632
g3789
sg3646
g3800
sg3641
g3797
stRp10095
ag1
(g9146
g9115
(dp10096
g3644
g3731
sg3632
g4541
sg3646
g3725
sg3641
g4548
stRp10097
ag1
(g9146
g9115
(dp10098
g3644
g4273
sg3632
g4487
sg3646
g4267
sg3641
g4494
stRp10099
ag1
(g9146
g9115
(dp10100
g3644
g3731
sg3632
g4541
sg3646
g3725
sg3641
g4548
stRp10101
ag1
(g9146
g9115
(dp10102
g3644
g3637
sg3632
g4218
sg3646
g3647
sg3641
g4225
stRp10103
ag1
(g9146
g9115
(dp10104
g3644
g3810
sg3632
g4472
sg3646
g3817
sg3641
g4479
stRp10105
ag1
(g9146
g9115
(dp10106
g3644
g3680
sg3632
g3670
sg3646
g3674
sg3641
g3678
stRp10107
ag1
(g9146
g9115
(dp10108
g3644
g3893
sg3632
g3988
sg3646
g3887
sg3641
g3995
stRp10109
ag1
(g9146
g9115
(dp10110
g3644
g3810
sg3632
g3806
sg3646
g3817
sg3641
g3814
stRp10111
ag1
(g9146
g9115
(dp10112
g3644
g3975
sg3632
g4233
sg3646
g3982
sg3641
g4240
stRp10113
ag1
(g9146
g9115
(dp10114
g3644
g3810
sg3632
g4472
sg3646
g3817
sg3641
g4479
stRp10115
ag1
(g9146
g9115
(dp10116
g3644
g3793
sg3632
g3789
sg3646
g3800
sg3641
g3797
stRp10117
ag1
(g9146
g9115
(dp10118
g3644
g4101
sg3632
g4091
sg3646
g4095
sg3641
g4099
stRp10119
ag1
(g9146
g9115
(dp10120
g3644
g3765
sg3632
g3840
sg3646
g3759
sg3641
g3847
stRp10121
ag1
(g9146
g9115
(dp10122
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10123
ag1
(g9146
g9115
(dp10124
g3644
g3975
sg3632
g3971
sg3646
g3982
sg3641
g3979
stRp10125
ag1
(g9146
g9115
(dp10126
g3644
g4112
sg3632
g4108
sg3646
g4119
sg3641
g4116
stRp10127
ag1
(g9146
g9115
(dp10128
g3644
g3657
sg3632
g3868
sg3646
g3664
sg3641
g3875
stRp10129
ag1
(g9146
g9115
(dp10130
g3644
g3731
sg3632
g3721
sg3646
g3725
sg3641
g3729
stRp10131
ag1
(g9146
g9115
(dp10132
g3644
g3680
sg3632
g3670
sg3646
g3674
sg3641
g3678
stRp10133
ag1
(g9146
g9115
(dp10134
g3644
g3893
sg3632
g3988
sg3646
g3887
sg3641
g3995
stRp10135
ag1
(g9146
g9115
(dp10136
g3644
g4022
sg3632
g4777
sg3646
g4029
sg3641
g4784
stRp10137
ag1
(g9146
g9115
(dp10138
g3644
g4112
sg3632
g4108
sg3646
g4119
sg3641
g4116
stRp10139
ag1
(g9146
g9115
(dp10140
g3644
g4101
sg3632
g4091
sg3646
g4095
sg3641
g4099
stRp10141
ag1
(g9146
g9115
(dp10142
g3644
g3917
sg3632
g3913
sg3646
g3924
sg3641
g3921
stRp10143
ag1
(g9146
g9115
(dp10144
g3644
g3731
sg3632
g4541
sg3646
g3725
sg3641
g4548
stRp10145
ag1
(g9146
g9115
(dp10146
g3644
g4022
sg3632
g4018
sg3646
g4029
sg3641
g4026
stRp10147
ag1
(g9146
g9115
(dp10148
g3644
g3680
sg3632
g4347
sg3646
g3674
sg3641
g4354
stRp10149
ag1
(g9146
g9115
(dp10150
g3644
g4273
sg3632
g4487
sg3646
g4267
sg3641
g4494
stRp10151
ag1
(g9146
g9115
(dp10152
g3644
g4101
sg3632
g5171
sg3646
g4095
sg3641
g5178
stRp10153
ag1
(g9146
g9115
(dp10154
g3644
g3748
sg3632
g3738
sg3646
g3742
sg3641
g3746
stRp10155
ag1
(g9146
g9115
(dp10156
g3644
g3810
sg3632
g4472
sg3646
g3817
sg3641
g4479
stRp10157
ag1
(g9146
g9115
(dp10158
g3644
g3731
sg3632
g3721
sg3646
g3725
sg3641
g3729
stRp10159
ag1
(g9146
g9115
(dp10160
g3644
g3917
sg3632
g4190
sg3646
g3924
sg3641
g4197
stRp10161
ag1
(g9146
g9115
(dp10162
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10163
ag1
(g9146
g9115
(dp10164
g3644
g3917
sg3632
g4190
sg3646
g3924
sg3641
g4197
stRp10165
ag1
(g9146
g9115
(dp10166
g3644
g4058
sg3632
g4048
sg3646
g4052
sg3641
g4056
stRp10167
ag1
(g9146
g9115
(dp10168
g3644
g3657
sg3632
g3868
sg3646
g3664
sg3641
g3875
stRp10169
ag1
(g9146
g9115
(dp10170
g3644
g3827
sg3632
g3823
sg3646
g3834
sg3641
g3831
stRp10171
ag1
(g9146
g9115
(dp10172
g3644
g4022
sg3632
g4777
sg3646
g4029
sg3641
g4784
stRp10173
ag1
(g9146
g9115
(dp10174
g3644
g3691
sg3632
g4362
sg3646
g3698
sg3641
g4369
stRp10175
ag1
(g9146
g9115
(dp10176
g3644
g4112
sg3632
g5026
sg3646
g4119
sg3641
g5033
stRp10177
ag1
(g9146
g9115
(dp10178
g3644
g3765
sg3632
g3840
sg3646
g3759
sg3641
g3847
stRp10179
ag1
(g9146
g9115
(dp10180
g3644
g3708
sg3632
g4457
sg3646
g3715
sg3641
g4464
stRp10181
ag1
(g9146
g9115
(dp10182
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp10183
ag1
(g9146
g9115
(dp10184
g3644
g3731
sg3632
g3721
sg3646
g3725
sg3641
g3729
stRp10185
ag1
(g9146
g9115
(dp10186
g3644
g4112
sg3632
g5026
sg3646
g4119
sg3641
g5033
stRp10187
ag1
(g9146
g9115
(dp10188
g3644
g3748
sg3632
g3738
sg3646
g3742
sg3641
g3746
stRp10189
ag1
(g9146
g9115
(dp10190
g3644
g4101
sg3632
g5171
sg3646
g4095
sg3641
g5178
stRp10191
ag1
(g9146
g9115
(dp10192
g3644
g4273
sg3632
g4487
sg3646
g4267
sg3641
g4494
stRp10193
ag1
(g9146
g9115
(dp10194
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10195
ag1
(g9146
g9115
(dp10196
g3644
g4112
sg3632
g5026
sg3646
g4119
sg3641
g5033
stRp10197
ag1
(g9146
g9115
(dp10198
g3644
g3708
sg3632
g4457
sg3646
g3715
sg3641
g4464
stRp10199
ag1
(g9146
g9115
(dp10200
g3644
g3917
sg3632
g4190
sg3646
g3924
sg3641
g4197
stRp10201
ag1
(g9146
g9115
(dp10202
g3644
g4273
sg3632
g4263
sg3646
g4267
sg3641
g4271
stRp10203
ag1
(g9146
g9115
(dp10204
g3644
g3810
sg3632
g3806
sg3646
g3817
sg3641
g3814
stRp10205
ag1
(g9146
g9115
(dp10206
g3644
g3708
sg3632
g4457
sg3646
g3715
sg3641
g4464
stRp10207
ag1
(g9146
g9115
(dp10208
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10209
ag1
(g9146
g9115
(dp10210
g3644
g3708
sg3632
g4457
sg3646
g3715
sg3641
g4464
stRp10211
ag1
(g9146
g9115
(dp10212
g3644
g4058
sg3632
g4319
sg3646
g4052
sg3641
g4326
stRp10213
ag1
(g9146
g9115
(dp10214
g3644
g4101
sg3632
g5171
sg3646
g4095
sg3641
g5178
stRp10215
ag1
(g9146
g9115
(dp10216
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp10217
ag1
(g9146
g9115
(dp10218
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10219
ag1
(g9146
g9115
(dp10220
g3644
g4112
sg3632
g5026
sg3646
g4119
sg3641
g5033
stRp10221
ag1
(g9146
g9115
(dp10222
g3644
g3975
sg3632
g4233
sg3646
g3982
sg3641
g4240
stRp10223
ag1
(g9146
g9115
(dp10224
g3644
g4101
sg3632
g4091
sg3646
g4095
sg3641
g4099
stRp10225
ag1
(g9146
g9115
(dp10226
g3644
g3893
sg3632
g3988
sg3646
g3887
sg3641
g3995
stRp10227
ag1
(g9146
g9115
(dp10228
g3644
g4273
sg3632
g4263
sg3646
g4267
sg3641
g4271
stRp10229
ag1
(g9146
g9115
(dp10230
g3644
g3731
sg3632
g4541
sg3646
g3725
sg3641
g4548
stRp10231
asg9227
Nsg9228
g6347
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp10232
(dp10233
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10234
sg9107
(lp10235
sg9109
I80044880
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp10236
g33
g9118
(g9119
g92
g9120
S'b'
tRp10237
(I1
(I200
I1
tg9244
I00
S'\xe8\xfa\xf9\x0c ,\xf9\x0cP,\xf9\x0c\x10\xfb\xf9\x0c\xd0-\xf9\x0c@-\xf9\x0c\x80\x01\x0f\x03\x80,\xf9\x0c\xb0,\xf9\x0c8\xfb\xf9\x0c\x80\x01\x0f\x03`\x07\x0f\x03\x10\xfb\xf9\x0c\x00\x7f\xa9\x0c\xe8\xfa\xf9\x0cx\xfc\xf9\x0c8\xfb\xf9\x0c\xc0"\xfa\x0c\x00.\xf9\x0c\xe0,\xf9\x0c\x10-\xf9\x0c\x18"\xfa\x0c\x00\x7f\xa9\x0cP"\xfa\x0c ,\xf9\x0c\xe8\xfa\xf9\x0c\x00\x7f\xa9\x0c\xe8\xfa\xf9\x0c\x88"\xfa\x0c`\x07\x0f\x03\x88"\xfa\x0c\xc0}\xa9\x0c`\xfb\xf9\x0c\x00\x7f\xa9\x0c\xf0\xfc\xf9\x0c\xa0}\xa9\x0cP"\xfa\x0cP,\xf9\x0c\xb0,\xf9\x0c\x88"\xfa\x0c\x00.\xf9\x0c`\x07\x0f\x03x\xfc\xf9\x0c\x80,\xf9\x0cP,\xf9\x0c\xb0,\xf9\x0cP,\xf9\x0c\x18\xfd\xf9\x0c\xa0}\xa9\x0c8\xfb\xf9\x0c`\x07\x0f\x03\xd8\xfb\xf9\x0c0.\xf9\x0c\x88\xfb\xf9\x0c\xb0,\xf9\x0c\x10-\xf9\x0c r\xa9\x0c`\x07\x0f\x03P,\xf9\x0cP"\xfa\x0c\xc8\xfc\xf9\x0c\x00.\xf9\x0c\xa0}\xa9\x0cP"\xfa\x0c\xe0,\xf9\x0c\xa0}\xa9\x0c\xd0-\xf9\x0c\xd8\xfb\xf9\x0cP"\xfa\x0c ,\xf9\x0c\xb0,\xf9\x0c\x88"\xfa\x0c\x10\xfb\xf9\x0c\xa0\xfc\xf9\x0c`\xfb\xf9\x0c\x10-\xf9\x0c\x88\xfb\xf9\x0c\xb0\xfb\xf9\x0c\x10\xfb\xf9\x0c\xb0\xfb\xf9\x0c8\xfb\xf9\x0c\x10-\xf9\x0c\xd8\xfb\xf9\x0c\x80\x01\x0f\x03\x88\xfb\xf9\x0c\xb0\xfb\xf9\x0c`\xfb\xf9\x0c\xd8\xfb\xf9\x0cP\xfc\xf9\x0c\x10-\xf9\x0c\xa0}\xa9\x0c\x80,\xf9\x0c\xd8\xfb\xf9\x0c ,\xf9\x0c\xb0,\xf9\x0cP"\xfa\x0c`\xfb\xf9\x0cP"\xfa\x0c0#\xfa\x0c\x00\x7f\xa9\x0c\xc8\xfc\xf9\x0cP,\xf9\x0c\x88"\xfa\x0c\x18"\xfa\x0c\xd8\xfb\xf9\x0c\xb0\xfb\xf9\x0c\xa0-\xf9\x0c`\x07\x0f\x03\xe8\xfa\xf9\x0c\x80\x01\x0f\x03\x00\x7f\xa9\x0c\xd0-\xf9\x0c\x10-\xf9\x0c\x18"\xfa\x0c`\xfb\xf9\x0c\x88"\xfa\x0c\xc8\xfc\xf9\x0c`\xfb\xf9\x0cP,\xf9\x0c(\xfc\xf9\x0c\x10\xfb\xf9\x0c\x80\x01\x0f\x03\x80,\xf9\x0c\xf0\xfc\xf9\x0c\xa0\xfc\xf9\x0c\xb0\xfb\xf9\x0c\x80\x01\x0f\x03\xb0\xfb\xf9\x0c\xe8\xfa\xf9\x0c\x18"\xfa\x0c\x10\xfb\xf9\x0c\xe0,\xf9\x0c`\x07\x0f\x03h#\xfa\x0c ,\xf9\x0c\x80\x01\x0f\x03h#\xfa\x0c\xe0,\xf9\x0c\x80,\xf9\x0cP\xfc\xf9\x0c`\x07\x0f\x03\x10-\xf9\x0c\xc0}\xa9\x0c\xe0,\xf9\x0c\xc8\xfc\xf9\x0c\xe8\xfa\xf9\x0c\x00\x7f\xa9\x0c\x18"\xfa\x0c ,\xf9\x0c\xb0\xfb\xf9\x0cP\xfc\xf9\x0c\xb0\xfb\xf9\x0c\x00\x7f\xa9\x0c\xf0\xfc\xf9\x0c\xe0,\xf9\x0c\xe8\xfa\xf9\x0c`\xfb\xf9\x0c\x88"\xfa\x0c\xf8"\xfa\x0cP,\xf9\x0c\xe0,\xf9\x0c\xb0\xfb\xf9\x0c\xd8\xfb\xf9\x0c\xa0}\xa9\x0c ,\xf9\x0c\x88\xfb\xf9\x0cp-\xf9\x0c\xb0,\xf9\x0c\x80\x01\x0f\x03\xd8\xfb\xf9\x0c\x88"\xfa\x0c ,\xf9\x0c\xe8\xfa\xf9\x0c\x88\xfb\xf9\x0cP"\xfa\x0c\x88"\xfa\x0c\xe0,\xf9\x0c ,\xf9\x0c\xa0-\xf9\x0c\x80,\xf9\x0c8\xfb\xf9\x0cP,\xf9\x0ch#\xfa\x0c\xa0}\xa9\x0c\x80,\xf9\x0c8\xfb\xf9\x0c\x88\xfb\xf9\x0c\x10\xfb\xf9\x0c\x10-\xf9\x0c\xa0}\xa9\x0c\x10\xfb\xf9\x0c\xe0,\xf9\x0c\xa0}\xa9\x0c\xd8\xfb\xf9\x0c\xf8"\xfa\x0c\x18"\xfa\x0c8\xfb\xf9\x0c\x80\x01\x0f\x03\xd8\xfb\xf9\x0c\x88\xfb\xf9\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp10238
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp10239
(I1
(I200
I1
tg9244
I00
S'\x00\x0c\xfb\x0c\xe0\n\xfb\x0c`\x0b\xfb\x0c\xa0\x0c\xfb\x0c@i\x0f\x03\x80\x0b\xfb\x0c\x80\x0c\xfb\x0c`\x0c\xfb\x0c \r\xfb\x0c\x00\x0b\xfb\x0c\xe0\x0c\xfb\x0c\x80\r\xfb\x0c@\r\xfb\x0c\xe0\r\xfb\x0c\xc0\r\xfb\x0c@\x0c\xfb\x0c\x00\x0e\xfb\x0c \x0e\xfb\x0c\x80\x0e\xfb\x0c`\x0e\xfb\x0c\xc0\x0e\xfb\x0c\xa0\x0e\xfb\x0c`\r\xfb\x0c\xe0\x0e\xfb\x0c\x00\x0f\xfb\x0c\xa0v\xa9\x0c\x00\r\xfb\x0c\xc0\x0c\xfb\x0c\x80\x0f\xfb\x0c@\x0b\xfb\x0c \x0b\xfb\x0c\xc0\x0f\xfb\x0c\xe0\x0f\xfb\x0c`\x0f\xfb\x0c\xa0\x0b\xfb\x0c \x0c\xfb\x0c`\n\xfb\x0c\xc0\x0b\xfb\x0c@\x0e\xfb\x0c\xa0\r\xfb\x0c\xc0\n\xfb\x0c\xa0\n\xfb\x0c@\x0f\xfb\x0c \x0f\xfb\x0c\xe0\x0b\xfb\x0c\xa0\x0f\xfb\x0c\xc0\xe1z\x12 \xe1z\x12\xa0\xe2z\x12@\xe2z\x12 \xe0z\x12`\xe2z\x12\xe0\xe2z\x12\x00\xe3z\x12 \xe2z\x12@\xe3z\x12 \xe3z\x12\xe0\xe1z\x12\xa0\xe3z\x12\x80\xe3z\x12\xe0\xe0z\x12\x00\xe4z\x12 \xe4z\x12\xc0\xe0z\x12\xa0\xe1z\x12@\xe4z\x12`\xe4z\x12\xc0\xe4z\x12\xa0\xe4z\x12\x80\xe2z\x12\xe0\xe4z\x12@\xe5z\x12`\xe5z\x12\x80\xe5z\x12\x00\xe1z\x12`\xe3z\x12\xa0\xe5z\x12\x00\xe6z\x12\xe0\xe5z\x12@\xe6z\x12 \xe6z\x12\x80\xe4z\x12`\xe6z\x12\x80\xe6z\x12\xe0\xe6z\x12\x00\xe7z\x12 \xe5z\x12\xc0\xe2z\x12`\xe7z\x12@\xe7z\x12\x80\xe0z\x12\x80\xe7z\x12\xe0\xe7z\x12\x00\xe8z\x12`\xe0z\x12\x00\xe2z\x12 \xe8z\x12\x80\n\xfb\x0c\xc0\xe5z\x12\xa0\xe7z\x12\xe0\xe3z\x12\x00\xe9z\x12 \xe9z\x12@\xe0z\x12\xa0\xe8z\x12\xe0\xe8z\x12@\xe9z\x12\xa0\xe9z\x12`\xe1z\x12\xc0\xe7z\x12\xc0\xe6z\x12\xe0\xe9z\x12@\xeaz\x12\xa0\xe6z\x12\xc0\xe9z\x12`\xeaz\x12\x00\xeaz\x12`\xe9z\x12\x80a\x0f\x03 \xe7z\x12@\xebz\x12`\xebz\x12\x80\xe1z\x12\xc0\xe3z\x12\xc0\xebz\x12\xe0\xebz\x12\x00\xecz\x12`\xe8z\x12\x00\xebz\x12@\xe8z\x12\x00\xe5z\x12\xa0\xecz\x12\xe0\xeaz\x12 \xeaz\x12 \xedz\x12\x80\xe9z\x12\xa0\xebz\x12\xc0\xeaz\x12\xa0\xe0z\x12\x00\xedz\x12\xa0\xeaz\x12@\xe1z\x12\x00\xeez\x12 \xebz\x12@\xecz\x12@\xedz\x12\xe0\xecz\x12`\xeez\x12\xc0\xeez\x12\x80\xe8z\x12\x80\xecz\x12\x80\xebz\x12`\xecz\x12\x80\xeez\x12\x80\xefz\x12\x00\xefz\x12\xc0\xecz\x12\xe0\xeez\x12 \xecz\x12\xc0\xefz\x12@\x00\xa9\x0c \xeez\x12`\xedz\x12\xa0\xeez\x12\xe0\xefz\x12`\xefz\x12\xe0\xedz\x12@\xefz\x12\x80\xeaz\x12\x80\xedz\x12\xa0\xefz\x12\xa0\xedz\x12 \xefz\x12\xc0\x91\xa1\x12 \x91\xa1\x12\xa0\x91\xa1\x12@\x92\xa1\x12\x80\x92\xa1\x12`\x92\xa1\x12\xe0\x92\xa1\x12\x00\x93\xa1\x12 \x92\xa1\x12\xa0\x90\xa1\x12`\x93\xa1\x12@\x93\xa1\x12\xa0\x93\xa1\x12\x80\x93\xa1\x12\xe0\x90\xa1\x12\x00\x94\xa1\x12\xe0\x93\xa1\x12 \x90\xa1\x12`\x94\xa1\x12@\x94\xa1\x12\xc0\xedz\x12\x80\x91\xa1\x12@\x90\xa1\x12\x00\x95\xa1\x12 \x95\xa1\x12\xc0\x94\xa1\x12\xc0\x92\xa1\x12'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp10240
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp10241
(I1
(I200
I1
tg9122
I00
S'\x1f\x91Y?S\xb3j?\xff|7?\xce\x84w?\xaf\x8e\x88?`\xc9L?\xe5\xb4j?\xd4\xf2\x8e?L\xe5]?\xa4GD?\xf9\x847?\xc5\x05^?\t\x8fH?i\xfbn?\xedr7?\xa6\x7f7?\xe5\x97H?\x18\xfe]?\x98(\x82?\x82~7?\xa4\x94H?\x84k\xa6?\xb3%\x82?\x13\xc2;?\xf6\xfcn?.Rf?+=s?\xee\x0bQ?\x0f\x7f\x97?T\xdfL?\xfaeU?o\t@?\x97\x8eH?\xc9\x16Q?\xa9\xadH?\xc3\xa0Y?W(\x82?\xc5}\x97?\x18\xc8;?.J"?0\x12/?0rf?\xaa\x19Q?\xc8\\U?\x12\x95H?\xb1\xc2{?\x9d\x95H?\xa7%\x82?\xea93?+QD?4}w?X\xb1*?\xc0D3?\x05\x867?\xd5\xfan?Y\xfc.?\x96<3?\xd9\xb3*?\x19\x977?x\xa1Y?@_U?VQD?\xb2KD?B\x817?\x0b\xec\x1d?\xd9\xc9;?\xc1\xb1*?;s&?\xb6l&?7\x04\x80?\xe3\xc6*?\xe1\xc8;?8\xb8*?\xf4;3?N\x97Y?\xe4bU?[\xf7n??\xbf\x9b?\xc3?3?\xd4\x0b@?\x1d\xc2{?\xa8\x18Q?\xa7t&?\xec\xea\x1d?\xb6\xf7n?-@3?\x97\x8cH?RKD?`\x12/?^\xd9L?\x1f<3?\xfe\x847?G?3?\x98\x06@?\xae6Q?Q\x1eQ?\x18\xc0{?\xb3\x1e"?\x12A3?\x12\xa0Y?\x9a\x12\x80?\x15@3?~<3?\xf3\xe9]?Ct&?\x1873?\xd03\xa2?\xb5)b?*B\x84?\x08\x15Q?\xb3\x8eH?\x1a\xe6]?\x7f\xbfY?4(\xa2?\xc3\xf4.?f%\x82?\xac\x8e\x88?{\x9e\x19??RU?u<3?C\xfb.?x\xa7Y?\xb1\x1eQ?\xff\xb1j?\xba"\x91?HOD?1\r@?\x85b\x15?\xf6\x08Q?<\x857?4\x8b&?\xc7\x10@?\xe5X\x95?\x07\x03@?<\x90H?\xa6\x12\x91?\xde\xcf]?\x1c)b?\x8eHD?\xe2~7?\xc5\xf4\x8e?H\x8fH?Y\xfc.?Jq&?y|w?T\x1cb?\x8e)b?\xbb\x15\x91?\xe6\x847?\x10@3?\xd6\x81w?\xad\xd6L?^\xc2\x9b?\x05\x8d\x88?\x1b\xf6.?Y\xe5.?\xf7ef?\xc8\xb6j?\xd8\xc2;?\x9eJ3?\x99\xea.?u\x90H?\x1cA3?\xe8\x1dQ?]\xc5;?\x1f\xc9;?\xc3\x06@?Gt&?cJ\x84?!93?\xa1m&?\x9a\xf7.?\x8f\x94Y?\xe4\x0c@?\x9cPD?\x1c\xb0j?\xb2~7?/G\x04@\xe9}7?\xb8\xe6]?8\x817?\x92\xc7;?-\xccL?s\xbcY?\x8a\'"?>t&?\xfe\xd8L?\xb6\xf7.?\xfdA3?\x99t&?\xab\xb8*?\xd9\x07@?"\xa5\x19?$\x1c"?\xb4\xa6Y?\r~\x97?\xc6\x1fQ?\xe6QD?\xe9\xa2\x19?\x13\x91H?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp10242
(I1
(I200
I1
tg9244
I00
S'\x80\xbc\xed\x04`\xbb\xed\x04(\xfd\xea\x04\x88\xf4\xea\x04\xa8\xf8\xea\x04\xc8\xf3\xea\x04\xc8\xf9\xea\x04(\xf1\xea\x04(\xf7\xea\x04\x98\xf3\xea\x04h\xfc\xea\x040\xf5\xea\x04\xb8\xf7\xea\x04\xc0\xfe\xea\x04\xc8\xff\xea\x04\x90\xfe\xea\x04\x08\xf6\xea\x04h\xf3\xea\x04\x98\xff\xea\x04\xa8\xfe\xea\x04\xa0\xf7\xea\x04`\xfe\xea\x04P\xf3\xea\x04\xc8\xfc\xea\x04\xd0\xfa\xea\x048\xff\xea\x04`\xfb\xea\x04\xb0\xff\xea\x04\x08\xff\xea\x04\xc0\xf2\xea\x04\xf0\xf8\xea\x04p\xfa\xea\x040\xf8\xea\x04\xf8\xfc\xea\x04h\xf9\xea\x04x\xfe\xea\x04H\xfb\xea\x04X\xfa\xea\x04 \xf9\xea\x04\x18\xdb\x13\x05\x90\xd8\x13\x05\x80\xdf\x13\x05\x08\xd9\x13\x05 \xdf\x13\x05(\xd7\x13\x05\x10\xd7\x13\x05\xe8\xdd\x13\x05H\xd5\x13\x05P\xd0\x13\x058\xd6\x13\x05p\xdd\x13\x05\xa8\xd8\x13\x05P\xd9\x13\x05H\xd8\x13\x05\x00\xd2\x13\x05H\xdb\x13\x05`\xd5\x13\x05h\xdc\x13\x05\xb0\xd3\x13\x05(\xda\x13\x05\xd8\xd5\x13\x05\xe8\xd1\x13\x05\x10\xd4\x13\x05\x88\xd1\x13\x05\x08\xd6\x13\x05\xc8\xd0\x13\x05\xe8\xd7\x13\x05\x90\xd5\x13\x05\xe0\xd6\x13\x05\x90\xde\x13\x05\x00\xd8\x13\x05\xc8\xd6\x13\x05\xa0\xd7\x13\x05\xb8\xd4\x13\x05(\xdd\x13\x05\xc0\xd2\x13\x05\xf0\xd8\x13\x05 \xd9\x13\x05p\xd1\x13\x05\xc0\xd5\x13\x05x\xd8\x13\x05\xd0\xdd\x13\x05p\xd7\x13\x05\xd8\xd8\x13\x05 \xd0\x13\x05\x18\xde\x13\x05X\xdd\x13\x05\xb8\xd7\x13\x05(\xd1\x13\x05\xe8\xd4\x13\x05\x80\xd6\x13\x058\xdf\x13\x05\x18\xd5\x13\x05\xf8\xd6\x13\x05H\xde\x13\x058\xd9\x13\x05\xb8\xda\x13\x05p\xd4\x13\x058\xd0\x13\x05\x10\xdd\x13\x050\xdb\x13\x05P\xdc\x13\x05\xb8\xdd\x13\x05\x90\xdb\x13\x05\xc8\xdc\x13\x05\x88\xdd\x13\x05X\xd7\x13\x05\xe0\xd9\x13\x05\x88\xd7\x13\x05\x00\xde\x13\x05\xa8\xd5\x13\x058\xdc\x13\x05\xa0\xda\x13\x05P\xd6\x13\x05x\xdb\x13\x05\xb0\xd9\x13\x05\xb8\xd1\x13\x05x\xd2\x13\x05\x10\xda\x13\x05`\xdb\x13\x05\xa0\xdd\x13\x05\xa8\xde\x13\x05\x80\xd0\x13\x05`\xde\x13\x05X\xd4\x13\x05x\xd5\x13\x05\x98\xd0\x13\x05\xd8\xdb\x13\x05@\xdd\x13\x05\x00\xd5\x13\x05\xc0\xde\x13\x05\xb0\xdf\x13\x05x\xde\x13\x05@\xda\x13\x05\xc8\xd9\x13\x05\xe0\xdc\x13\x05h\xd0\x13\x05\xe0\xdf\x13\x05\xc0\xdb\x13\x05\xa0\xd1\x13\x05\x98\xdc\x13\x05\xb0\xd6\x13\x05\xd0\xd4\x13\x05\xd8\xde\x13\x05\x08\xdc\x13\x05 \xd6\x13\x05\x98\xd6\x13\x05\xa8\xdb\x13\x05h\xdf\x13\x05\xc8\xdf\x13\x05\x80\xdc\x13\x050\xd8\x13\x05\x18\xd2\x13\x05\xb0\xdc\x13\x05\x88\xda\x13\x05\x98\xdf\x13\x05`\xd8\x13\x050\xde\x13\x05\xc0\xd8\x13\x05\xf8\xd9\x13\x05p\xda\x13\x05\xf0\xdb\x13\x05@\xd4\x13\x05P\xdf\x13\x05h\xd9\x13\x05\x18\xd8\x13\x05@\xd7\x13\x05 \xdc\x13\x05\x08\xdf\x13\x05\xa0\xd4\x13\x05\xe8\xda\x13\x05\x80\xd9\x13\x05\xd0\xd1\x13\x05\xf8\xdc\x13\x05\xf0\xd5\x13\x05h\xd6\x13\x05 \xf6\xea\x04\x80\xf3\xea\x04P\xf6\xea\x04`\xf2\xea\x048\xfc\xea\x04\xb8\xfd\xea\x04\x00\xf2\xea\x04\xb0\xf3\xea\x04\x10\xf1\xea\x04\xa8\xf2\xea\x04\xd0\xf4\xea\x04\x08\xf3\xea\x04\xb0\xf9\xea\x04\xf8\xf0\xea\x04p\xf4\xea\x04p\xfd\xea\x04\xa0\xfd\xea\x04H\xf2\xea\x04H\xf8\xea\x04\x08\xfc\xea\x04\xd0\xf7\xea\x04P\xfc\xea\x04\xd8\xf8\xea\x04\xa8\xfb\xea\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10243
(dp10244
g9130
(dp10245
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g10232
sg9133
(lp10246
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp10247
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp10248
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp10249
g1
(g9146
g9115
(dp10250
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10251
ag1
(g9146
g9115
(dp10252
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10253
ag1
(g9146
g9115
(dp10254
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10255
ag1
(g9146
g9115
(dp10256
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10257
ag1
(g9146
g9115
(dp10258
g6382
g6452
sg6370
g6442
sg6384
g6446
sg6379
g6450
stRp10259
ag1
(g9146
g9115
(dp10260
g6382
g6375
sg6370
g6459
sg6384
g6385
sg6379
g6466
stRp10261
ag1
(g9146
g9115
(dp10262
g6382
g6478
sg6370
g6474
sg6384
g6485
sg6379
g6482
stRp10263
ag1
(g9146
g9115
(dp10264
g6382
g6452
sg6370
g6442
sg6384
g6446
sg6379
g6450
stRp10265
ag1
(g9146
g9115
(dp10266
g6382
g6508
sg6370
g6504
sg6384
g6515
sg6379
g6512
stRp10267
ag1
(g9146
g9115
(dp10268
g6382
g6525
sg6370
g6521
sg6384
g6532
sg6379
g6529
stRp10269
ag1
(g9146
g9115
(dp10270
g6382
g6478
sg6370
g6474
sg6384
g6485
sg6379
g6482
stRp10271
ag1
(g9146
g9115
(dp10272
g6382
g6555
sg6370
g6551
sg6384
g6562
sg6379
g6559
stRp10273
ag1
(g9146
g9115
(dp10274
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10275
ag1
(g9146
g9115
(dp10276
g6382
g6585
sg6370
g6581
sg6384
g6592
sg6379
g6589
stRp10277
ag1
(g9146
g9115
(dp10278
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10279
ag1
(g9146
g9115
(dp10280
g6382
g6585
sg6370
g6611
sg6384
g6592
sg6379
g6618
stRp10281
ag1
(g9146
g9115
(dp10282
g6382
g6525
sg6370
g6521
sg6384
g6532
sg6379
g6529
stRp10283
ag1
(g9146
g9115
(dp10284
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10285
ag1
(g9146
g9115
(dp10286
g6382
g6508
sg6370
g6504
sg6384
g6515
sg6379
g6512
stRp10287
ag1
(g9146
g9115
(dp10288
g6382
g6669
sg6370
g6665
sg6384
g6676
sg6379
g6673
stRp10289
ag1
(g9146
g9115
(dp10290
g6382
g6686
sg6370
g6682
sg6384
g6693
sg6379
g6690
stRp10291
ag1
(g9146
g9115
(dp10292
g6382
g6703
sg6370
g6699
sg6384
g6710
sg6379
g6707
stRp10293
ag1
(g9146
g9115
(dp10294
g6382
g6585
sg6370
g6611
sg6384
g6592
sg6379
g6618
stRp10295
ag1
(g9146
g9115
(dp10296
g6382
g6733
sg6370
g6729
sg6384
g6740
sg6379
g6737
stRp10297
ag1
(g9146
g9115
(dp10298
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10299
ag1
(g9146
g9115
(dp10300
g6382
g6375
sg6370
g6459
sg6384
g6385
sg6379
g6466
stRp10301
ag1
(g9146
g9115
(dp10302
g6382
g6585
sg6370
g6581
sg6384
g6592
sg6379
g6589
stRp10303
ag1
(g9146
g9115
(dp10304
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10305
ag1
(g9146
g9115
(dp10306
g6382
g6802
sg6370
g6798
sg6384
g6809
sg6379
g6806
stRp10307
ag1
(g9146
g9115
(dp10308
g6382
g6555
sg6370
g6551
sg6384
g6562
sg6379
g6559
stRp10309
ag1
(g9146
g9115
(dp10310
g6382
g6802
sg6370
g6828
sg6384
g6809
sg6379
g6835
stRp10311
ag1
(g9146
g9115
(dp10312
g6382
g6733
sg6370
g6843
sg6384
g6740
sg6379
g6850
stRp10313
ag1
(g9146
g9115
(dp10314
g6382
g6862
sg6370
g6858
sg6384
g6869
sg6379
g6866
stRp10315
ag1
(g9146
g9115
(dp10316
g6382
g6585
sg6370
g6611
sg6384
g6592
sg6379
g6618
stRp10317
ag1
(g9146
g9115
(dp10318
g6382
g6898
sg6370
g6888
sg6384
g6892
sg6379
g6896
stRp10319
ag1
(g9146
g9115
(dp10320
g6382
g6909
sg6370
g6905
sg6384
g6916
sg6379
g6913
stRp10321
ag1
(g9146
g9115
(dp10322
g6382
g6733
sg6370
g6843
sg6384
g6740
sg6379
g6850
stRp10323
ag1
(g9146
g9115
(dp10324
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10325
ag1
(g9146
g9115
(dp10326
g6382
g6508
sg6370
g6948
sg6384
g6515
sg6379
g6955
stRp10327
ag1
(g9146
g9115
(dp10328
g6382
g6802
sg6370
g6798
sg6384
g6809
sg6379
g6806
stRp10329
ag1
(g9146
g9115
(dp10330
g6382
g6508
sg6370
g6504
sg6384
g6515
sg6379
g6512
stRp10331
ag1
(g9146
g9115
(dp10332
g6382
g6555
sg6370
g6989
sg6384
g6562
sg6379
g6996
stRp10333
ag1
(g9146
g9115
(dp10334
g6382
g6585
sg6370
g6581
sg6384
g6592
sg6379
g6589
stRp10335
ag1
(g9146
g9115
(dp10336
g6382
g6452
sg6370
g7017
sg6384
g6446
sg6379
g7024
stRp10337
ag1
(g9146
g9115
(dp10338
g6382
g6412
sg6370
g7032
sg6384
g6419
sg6379
g7039
stRp10339
ag1
(g9146
g9115
(dp10340
g6382
g6508
sg6370
g6504
sg6384
g6515
sg6379
g6512
stRp10341
ag1
(g9146
g9115
(dp10342
g6382
g6412
sg6370
g7032
sg6384
g6419
sg6379
g7039
stRp10343
ag1
(g9146
g9115
(dp10344
g6382
g7083
sg6370
g7073
sg6384
g7077
sg6379
g7081
stRp10345
ag1
(g9146
g9115
(dp10346
g6382
g6909
sg6370
g7090
sg6384
g6916
sg6379
g7097
stRp10347
ag1
(g9146
g9115
(dp10348
g6382
g6525
sg6370
g7105
sg6384
g6532
sg6379
g7112
stRp10349
ag1
(g9146
g9115
(dp10350
g6382
g6555
sg6370
g6551
sg6384
g6562
sg6379
g6559
stRp10351
ag1
(g9146
g9115
(dp10352
g6382
g7137
sg6370
g7133
sg6384
g7144
sg6379
g7141
stRp10353
ag1
(g9146
g9115
(dp10354
g6382
g6669
sg6370
g6665
sg6384
g6676
sg6379
g6673
stRp10355
ag1
(g9146
g9115
(dp10356
g6382
g6898
sg6370
g6888
sg6384
g6892
sg6379
g6896
stRp10357
ag1
(g9146
g9115
(dp10358
g6382
g6508
sg6370
g6948
sg6384
g6515
sg6379
g6955
stRp10359
ag1
(g9146
g9115
(dp10360
g6382
g6686
sg6370
g6682
sg6384
g6693
sg6379
g6690
stRp10361
ag1
(g9146
g9115
(dp10362
g6382
g6909
sg6370
g7090
sg6384
g6916
sg6379
g7097
stRp10363
ag1
(g9146
g9115
(dp10364
g6382
g6555
sg6370
g6989
sg6384
g6562
sg6379
g6996
stRp10365
ag1
(g9146
g9115
(dp10366
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10367
ag1
(g9146
g9115
(dp10368
g6382
g6733
sg6370
g6843
sg6384
g6740
sg6379
g6850
stRp10369
ag1
(g9146
g9115
(dp10370
g6382
g6703
sg6370
g7254
sg6384
g6710
sg6379
g7261
stRp10371
ag1
(g9146
g9115
(dp10372
g6382
g6508
sg6370
g6948
sg6384
g6515
sg6379
g6955
stRp10373
ag1
(g9146
g9115
(dp10374
g6382
g6909
sg6370
g6905
sg6384
g6916
sg6379
g6913
stRp10375
ag1
(g9146
g9115
(dp10376
g6382
g6733
sg6370
g6729
sg6384
g6740
sg6379
g6737
stRp10377
ag1
(g9146
g9115
(dp10378
g6382
g6669
sg6370
g7308
sg6384
g6676
sg6379
g7315
stRp10379
ag1
(g9146
g9115
(dp10380
g6382
g6909
sg6370
g7090
sg6384
g6916
sg6379
g7097
stRp10381
ag1
(g9146
g9115
(dp10382
g6382
g6452
sg6370
g6442
sg6384
g6446
sg6379
g6450
stRp10383
ag1
(g9146
g9115
(dp10384
g6382
g7137
sg6370
g7349
sg6384
g7144
sg6379
g7356
stRp10385
ag1
(g9146
g9115
(dp10386
g6382
g6733
sg6370
g6729
sg6384
g6740
sg6379
g6737
stRp10387
ag1
(g9146
g9115
(dp10388
g6382
g6395
sg6370
g7377
sg6384
g6402
sg6379
g7384
stRp10389
ag1
(g9146
g9115
(dp10390
g6382
g6508
sg6370
g6948
sg6384
g6515
sg6379
g6955
stRp10391
ag1
(g9146
g9115
(dp10392
g6382
g6802
sg6370
g6828
sg6384
g6809
sg6379
g6835
stRp10393
ag1
(g9146
g9115
(dp10394
g6382
g6429
sg6370
g7418
sg6384
g6436
sg6379
g7425
stRp10395
ag1
(g9146
g9115
(dp10396
g6382
g6686
sg6370
g6682
sg6384
g6693
sg6379
g6690
stRp10397
ag1
(g9146
g9115
(dp10398
g6382
g6862
sg6370
g7446
sg6384
g6869
sg6379
g7453
stRp10399
ag1
(g9146
g9115
(dp10400
g6382
g6686
sg6370
g7461
sg6384
g6693
sg6379
g7468
stRp10401
ag1
(g9146
g9115
(dp10402
g6382
g6898
sg6370
g7476
sg6384
g6892
sg6379
g7483
stRp10403
ag1
(g9146
g9115
(dp10404
g6382
g7083
sg6370
g7491
sg6384
g7077
sg6379
g7498
stRp10405
ag1
(g9146
g9115
(dp10406
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10407
ag1
(g9146
g9115
(dp10408
g6382
g7083
sg6370
g7491
sg6384
g7077
sg6379
g7498
stRp10409
ag1
(g9146
g9115
(dp10410
g6382
g6525
sg6370
g7105
sg6384
g6532
sg6379
g7112
stRp10411
ag1
(g9146
g9115
(dp10412
g6382
g6686
sg6370
g6682
sg6384
g6693
sg6379
g6690
stRp10413
ag1
(g9146
g9115
(dp10414
g6382
g7137
sg6370
g7349
sg6384
g7144
sg6379
g7356
stRp10415
ag1
(g9146
g9115
(dp10416
g6382
g6478
sg6370
g7571
sg6384
g6485
sg6379
g7578
stRp10417
ag1
(g9146
g9115
(dp10418
g6382
g6898
sg6370
g7476
sg6384
g6892
sg6379
g7483
stRp10419
ag1
(g9146
g9115
(dp10420
g6382
g7083
sg6370
g7491
sg6384
g7077
sg6379
g7498
stRp10421
ag1
(g9146
g9115
(dp10422
g6382
g6862
sg6370
g7446
sg6384
g6869
sg6379
g7453
stRp10423
ag1
(g9146
g9115
(dp10424
g6382
g7137
sg6370
g7133
sg6384
g7144
sg6379
g7141
stRp10425
ag1
(g9146
g9115
(dp10426
g6382
g6525
sg6370
g6521
sg6384
g6532
sg6379
g6529
stRp10427
ag1
(g9146
g9115
(dp10428
g6382
g6686
sg6370
g7461
sg6384
g6693
sg6379
g7468
stRp10429
ag1
(g9146
g9115
(dp10430
g6382
g6909
sg6370
g6905
sg6384
g6916
sg6379
g6913
stRp10431
ag1
(g9146
g9115
(dp10432
g6382
g6452
sg6370
g7017
sg6384
g6446
sg6379
g7024
stRp10433
ag1
(g9146
g9115
(dp10434
g6382
g7137
sg6370
g7133
sg6384
g7144
sg6379
g7141
stRp10435
ag1
(g9146
g9115
(dp10436
g6382
g6395
sg6370
g7377
sg6384
g6402
sg6379
g7384
stRp10437
ag1
(g9146
g9115
(dp10438
g6382
g6508
sg6370
g6504
sg6384
g6515
sg6379
g6512
stRp10439
ag1
(g9146
g9115
(dp10440
g6382
g6733
sg6370
g6843
sg6384
g6740
sg6379
g6850
stRp10441
ag1
(g9146
g9115
(dp10442
g6382
g6862
sg6370
g7446
sg6384
g6869
sg6379
g7453
stRp10443
ag1
(g9146
g9115
(dp10444
g6382
g6733
sg6370
g6729
sg6384
g6740
sg6379
g6737
stRp10445
ag1
(g9146
g9115
(dp10446
g6382
g6802
sg6370
g6828
sg6384
g6809
sg6379
g6835
stRp10447
ag1
(g9146
g9115
(dp10448
g6382
g6585
sg6370
g6581
sg6384
g6592
sg6379
g6589
stRp10449
ag1
(g9146
g9115
(dp10450
g6382
g6703
sg6370
g7254
sg6384
g6710
sg6379
g7261
stRp10451
ag1
(g9146
g9115
(dp10452
g6382
g6412
sg6370
g7032
sg6384
g6419
sg6379
g7039
stRp10453
ag1
(g9146
g9115
(dp10454
g6382
g6802
sg6370
g6828
sg6384
g6809
sg6379
g6835
stRp10455
ag1
(g9146
g9115
(dp10456
g6382
g6703
sg6370
g6699
sg6384
g6710
sg6379
g6707
stRp10457
ag1
(g9146
g9115
(dp10458
g6382
g7137
sg6370
g7349
sg6384
g7144
sg6379
g7356
stRp10459
ag1
(g9146
g9115
(dp10460
g6382
g7083
sg6370
g7491
sg6384
g7077
sg6379
g7498
stRp10461
ag1
(g9146
g9115
(dp10462
g6382
g6429
sg6370
g7418
sg6384
g6436
sg6379
g7425
stRp10463
ag1
(g9146
g9115
(dp10464
g6382
g6555
sg6370
g6989
sg6384
g6562
sg6379
g6996
stRp10465
ag1
(g9146
g9115
(dp10466
g6382
g6375
sg6370
g6459
sg6384
g6385
sg6379
g6466
stRp10467
ag1
(g9146
g9115
(dp10468
g6382
g6478
sg6370
g6474
sg6384
g6485
sg6379
g6482
stRp10469
ag1
(g9146
g9115
(dp10470
g6382
g6585
sg6370
g6611
sg6384
g6592
sg6379
g6618
stRp10471
ag1
(g9146
g9115
(dp10472
g6382
g6452
sg6370
g6442
sg6384
g6446
sg6379
g6450
stRp10473
ag1
(g9146
g9115
(dp10474
g6382
g6686
sg6370
g7461
sg6384
g6693
sg6379
g7468
stRp10475
ag1
(g9146
g9115
(dp10476
g6382
g6703
sg6370
g6699
sg6384
g6710
sg6379
g6707
stRp10477
ag1
(g9146
g9115
(dp10478
g6382
g6862
sg6370
g7446
sg6384
g6869
sg6379
g7453
stRp10479
ag1
(g9146
g9115
(dp10480
g6382
g6802
sg6370
g6798
sg6384
g6809
sg6379
g6806
stRp10481
ag1
(g9146
g9115
(dp10482
g6382
g6703
sg6370
g6699
sg6384
g6710
sg6379
g6707
stRp10483
ag1
(g9146
g9115
(dp10484
g6382
g6862
sg6370
g6858
sg6384
g6869
sg6379
g6866
stRp10485
ag1
(g9146
g9115
(dp10486
g6382
g6412
sg6370
g7032
sg6384
g6419
sg6379
g7039
stRp10487
ag1
(g9146
g9115
(dp10488
g6382
g6478
sg6370
g7571
sg6384
g6485
sg6379
g7578
stRp10489
ag1
(g9146
g9115
(dp10490
g6382
g6429
sg6370
g7418
sg6384
g6436
sg6379
g7425
stRp10491
ag1
(g9146
g9115
(dp10492
g6382
g6478
sg6370
g6474
sg6384
g6485
sg6379
g6482
stRp10493
ag1
(g9146
g9115
(dp10494
g6382
g6452
sg6370
g7017
sg6384
g6446
sg6379
g7024
stRp10495
ag1
(g9146
g9115
(dp10496
g6382
g6898
sg6370
g7476
sg6384
g6892
sg6379
g7483
stRp10497
ag1
(g9146
g9115
(dp10498
g6382
g6686
sg6370
g7461
sg6384
g6693
sg6379
g7468
stRp10499
ag1
(g9146
g9115
(dp10500
g6382
g7083
sg6370
g7073
sg6384
g7077
sg6379
g7081
stRp10501
ag1
(g9146
g9115
(dp10502
g6382
g6478
sg6370
g6474
sg6384
g6485
sg6379
g6482
stRp10503
ag1
(g9146
g9115
(dp10504
g6382
g7083
sg6370
g7073
sg6384
g7077
sg6379
g7081
stRp10505
ag1
(g9146
g9115
(dp10506
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10507
ag1
(g9146
g9115
(dp10508
g6382
g6703
sg6370
g7254
sg6384
g6710
sg6379
g7261
stRp10509
ag1
(g9146
g9115
(dp10510
g6382
g6429
sg6370
g7418
sg6384
g6436
sg6379
g7425
stRp10511
ag1
(g9146
g9115
(dp10512
g6382
g6669
sg6370
g6665
sg6384
g6676
sg6379
g6673
stRp10513
ag1
(g9146
g9115
(dp10514
g6382
g6555
sg6370
g6551
sg6384
g6562
sg6379
g6559
stRp10515
ag1
(g9146
g9115
(dp10516
g6382
g6862
sg6370
g6858
sg6384
g6869
sg6379
g6866
stRp10517
ag1
(g9146
g9115
(dp10518
g6382
g6395
sg6370
g7377
sg6384
g6402
sg6379
g7384
stRp10519
ag1
(g9146
g9115
(dp10520
g6382
g6478
sg6370
g7571
sg6384
g6485
sg6379
g7578
stRp10521
ag1
(g9146
g9115
(dp10522
g6382
g6862
sg6370
g6858
sg6384
g6869
sg6379
g6866
stRp10523
ag1
(g9146
g9115
(dp10524
g6382
g6669
sg6370
g6665
sg6384
g6676
sg6379
g6673
stRp10525
ag1
(g9146
g9115
(dp10526
g6382
g6452
sg6370
g7017
sg6384
g6446
sg6379
g7024
stRp10527
ag1
(g9146
g9115
(dp10528
g6382
g6525
sg6370
g6521
sg6384
g6532
sg6379
g6529
stRp10529
ag1
(g9146
g9115
(dp10530
g6382
g6555
sg6370
g6989
sg6384
g6562
sg6379
g6996
stRp10531
ag1
(g9146
g9115
(dp10532
g6382
g6686
sg6370
g7461
sg6384
g6693
sg6379
g7468
stRp10533
ag1
(g9146
g9115
(dp10534
g6382
g6733
sg6370
g6729
sg6384
g6740
sg6379
g6737
stRp10535
ag1
(g9146
g9115
(dp10536
g6382
g6669
sg6370
g7308
sg6384
g6676
sg6379
g7315
stRp10537
ag1
(g9146
g9115
(dp10538
g6382
g6703
sg6370
g7254
sg6384
g6710
sg6379
g7261
stRp10539
ag1
(g9146
g9115
(dp10540
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10541
ag1
(g9146
g9115
(dp10542
g6382
g6585
sg6370
g6581
sg6384
g6592
sg6379
g6589
stRp10543
ag1
(g9146
g9115
(dp10544
g6382
g6703
sg6370
g6699
sg6384
g6710
sg6379
g6707
stRp10545
ag1
(g9146
g9115
(dp10546
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10547
ag1
(g9146
g9115
(dp10548
g6382
g7083
sg6370
g7073
sg6384
g7077
sg6379
g7081
stRp10549
ag1
(g9146
g9115
(dp10550
g6382
g6525
sg6370
g7105
sg6384
g6532
sg6379
g7112
stRp10551
ag1
(g9146
g9115
(dp10552
g6382
g7083
sg6370
g7073
sg6384
g7077
sg6379
g7081
stRp10553
ag1
(g9146
g9115
(dp10554
g6382
g6585
sg6370
g6611
sg6384
g6592
sg6379
g6618
stRp10555
ag1
(g9146
g9115
(dp10556
g6382
g6898
sg6370
g7476
sg6384
g6892
sg6379
g7483
stRp10557
ag1
(g9146
g9115
(dp10558
g6382
g6669
sg6370
g7308
sg6384
g6676
sg6379
g7315
stRp10559
ag1
(g9146
g9115
(dp10560
g6382
g6375
sg6370
g6459
sg6384
g6385
sg6379
g6466
stRp10561
ag1
(g9146
g9115
(dp10562
g6382
g6862
sg6370
g7446
sg6384
g6869
sg6379
g7453
stRp10563
ag1
(g9146
g9115
(dp10564
g6382
g6802
sg6370
g6798
sg6384
g6809
sg6379
g6806
stRp10565
ag1
(g9146
g9115
(dp10566
g6382
g6555
sg6370
g6551
sg6384
g6562
sg6379
g6559
stRp10567
ag1
(g9146
g9115
(dp10568
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10569
ag1
(g9146
g9115
(dp10570
g6382
g6669
sg6370
g7308
sg6384
g6676
sg6379
g7315
stRp10571
ag1
(g9146
g9115
(dp10572
g6382
g7083
sg6370
g7491
sg6384
g7077
sg6379
g7498
stRp10573
ag1
(g9146
g9115
(dp10574
g6382
g7137
sg6370
g7133
sg6384
g7144
sg6379
g7141
stRp10575
ag1
(g9146
g9115
(dp10576
g6382
g6909
sg6370
g6905
sg6384
g6916
sg6379
g6913
stRp10577
ag1
(g9146
g9115
(dp10578
g6382
g6395
sg6370
g7377
sg6384
g6402
sg6379
g7384
stRp10579
ag1
(g9146
g9115
(dp10580
g6382
g6898
sg6370
g6888
sg6384
g6892
sg6379
g6896
stRp10581
ag1
(g9146
g9115
(dp10582
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10583
ag1
(g9146
g9115
(dp10584
g6382
g6508
sg6370
g6948
sg6384
g6515
sg6379
g6955
stRp10585
ag1
(g9146
g9115
(dp10586
g6382
g6478
sg6370
g7571
sg6384
g6485
sg6379
g7578
stRp10587
ag1
(g9146
g9115
(dp10588
g6382
g7137
sg6370
g7349
sg6384
g7144
sg6379
g7356
stRp10589
ag1
(g9146
g9115
(dp10590
g6382
g6802
sg6370
g6828
sg6384
g6809
sg6379
g6835
stRp10591
ag1
(g9146
g9115
(dp10592
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10593
ag1
(g9146
g9115
(dp10594
g6382
g6375
sg6370
g6459
sg6384
g6385
sg6379
g6466
stRp10595
ag1
(g9146
g9115
(dp10596
g6382
g6898
sg6370
g6888
sg6384
g6892
sg6379
g6896
stRp10597
ag1
(g9146
g9115
(dp10598
g6382
g6733
sg6370
g6843
sg6384
g6740
sg6379
g6850
stRp10599
ag1
(g9146
g9115
(dp10600
g6382
g6802
sg6370
g6798
sg6384
g6809
sg6379
g6806
stRp10601
ag1
(g9146
g9115
(dp10602
g6382
g6669
sg6370
g6665
sg6384
g6676
sg6379
g6673
stRp10603
ag1
(g9146
g9115
(dp10604
g6382
g6395
sg6370
g7377
sg6384
g6402
sg6379
g7384
stRp10605
ag1
(g9146
g9115
(dp10606
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10607
ag1
(g9146
g9115
(dp10608
g6382
g6452
sg6370
g6442
sg6384
g6446
sg6379
g6450
stRp10609
ag1
(g9146
g9115
(dp10610
g6382
g6525
sg6370
g7105
sg6384
g6532
sg6379
g7112
stRp10611
ag1
(g9146
g9115
(dp10612
g6382
g6412
sg6370
g7032
sg6384
g6419
sg6379
g7039
stRp10613
ag1
(g9146
g9115
(dp10614
g6382
g6862
sg6370
g6858
sg6384
g6869
sg6379
g6866
stRp10615
ag1
(g9146
g9115
(dp10616
g6382
g6909
sg6370
g7090
sg6384
g6916
sg6379
g7097
stRp10617
ag1
(g9146
g9115
(dp10618
g6382
g6452
sg6370
g7017
sg6384
g6446
sg6379
g7024
stRp10619
ag1
(g9146
g9115
(dp10620
g6382
g6525
sg6370
g7105
sg6384
g6532
sg6379
g7112
stRp10621
ag1
(g9146
g9115
(dp10622
g6382
g6898
sg6370
g6888
sg6384
g6892
sg6379
g6896
stRp10623
ag1
(g9146
g9115
(dp10624
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10625
ag1
(g9146
g9115
(dp10626
g6382
g6686
sg6370
g6682
sg6384
g6693
sg6379
g6690
stRp10627
ag1
(g9146
g9115
(dp10628
g6382
g6909
sg6370
g7090
sg6384
g6916
sg6379
g7097
stRp10629
ag1
(g9146
g9115
(dp10630
g6382
g6429
sg6370
g7418
sg6384
g6436
sg6379
g7425
stRp10631
ag1
(g9146
g9115
(dp10632
g6382
g6669
sg6370
g7308
sg6384
g6676
sg6379
g7315
stRp10633
ag1
(g9146
g9115
(dp10634
g6382
g6909
sg6370
g6905
sg6384
g6916
sg6379
g6913
stRp10635
ag1
(g9146
g9115
(dp10636
g6382
g7137
sg6370
g7133
sg6384
g7144
sg6379
g7141
stRp10637
ag1
(g9146
g9115
(dp10638
g6382
g6555
sg6370
g6989
sg6384
g6562
sg6379
g6996
stRp10639
ag1
(g9146
g9115
(dp10640
g6382
g6703
sg6370
g7254
sg6384
g6710
sg6379
g7261
stRp10641
ag1
(g9146
g9115
(dp10642
g6382
g6525
sg6370
g6521
sg6384
g6532
sg6379
g6529
stRp10643
ag1
(g9146
g9115
(dp10644
g6382
g6478
sg6370
g7571
sg6384
g6485
sg6379
g7578
stRp10645
ag1
(g9146
g9115
(dp10646
g6382
g7137
sg6370
g7349
sg6384
g7144
sg6379
g7356
stRp10647
ag1
(g9146
g9115
(dp10648
g6382
g6898
sg6370
g7476
sg6384
g6892
sg6379
g7483
stRp10649
asg9227
Nsg9228
g9085
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbasS'savePickle'
p10650
I00
sb.