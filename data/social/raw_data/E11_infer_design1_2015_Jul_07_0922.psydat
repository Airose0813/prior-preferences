ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E11_infer_design1_2015_Jul_07_0922
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vright
p57
sVcontacts
p58
Vn
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xf8\x8d\x91\xa0c\xffM@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_07_0922
p67
sVparticipant
p68
VE11
p69
sVglasses
p70
Vy
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F11.499793733430579
sg14
S'space'
p89
sg59
g63
sg58
Vn
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp90
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F63.614686065702472
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P3\x00'
tbsg70
Vy
sa(dp96
g64
g65
sg20
F8.5670000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F0.35999999999999921
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x02\x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p103
sg21
F1.2
sg70
Vy
sa(dp104
g64
g65
sg20
F4.7510000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F0.69999999999999929
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'\x1e\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p110
sg21
F1.3999999999999999
sg70
Vy
sa(dp111
g64
g65
sg20
F3.9169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F0.79999999999999893
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'$\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V48-twix.png
p117
sg21
F1.8999999999999999
sg70
Vy
sa(dp118
g64
g65
sg20
F2.9510000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F0.079999999999999169
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'\x1d\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V40-sardines.png
p124
sg21
F1.3
sg70
Vy
sa(dp125
g64
g65
sg20
F4.3010000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F0.75999999999999912
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S'%\x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p131
sg21
F1.8
sg70
Vy
sa(dp132
g64
g65
sg20
F2.8010000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F0.39999999999999925
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S'\x0e\x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p138
sg21
F1.3
sg70
Vy
sa(dp139
g64
g65
sg20
F4.9009999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F0.49999999999999867
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'\x04\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p145
sg21
F1.8999999999999999
sg70
Vy
sa(dp146
g64
g65
sg20
F3.7509999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F1.1199999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\x1c\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p152
sg21
F1.3
sg70
Vy
sa(dp153
g64
g65
sg20
F6.5670000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F0.77999999999999958
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'\x10\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V22-daim.png
p159
sg21
F1.3
sg70
Vy
sa(dp160
g64
g65
sg20
F2.984
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F0.31999999999999895
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'\x05\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p166
sg21
F1.5
sg70
Vy
sa(dp167
g64
g65
sg20
F4.7670000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F0.39999999999999902
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S'\x07\x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p173
sg21
F1.6000000000000001
sg70
Vy
sa(dp174
g64
g65
sg20
F4.8170000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F0.97999999999999976
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S'\x0b\x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p180
sg21
F1.3
sg70
Vy
sa(dp181
g64
g65
sg20
F7.3339999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F1.6600000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\x1f\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p187
sg21
F1.3
sg70
Vy
sa(dp188
g64
g65
sg20
F3.2010000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F0.7999999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'\r\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p194
sg21
F1.2
sg70
Vy
sa(dp195
g64
g65
sg20
F2.601
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F0.83999999999999986
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S"'\x00\x00\x00"
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V51-mars.png
p201
sg21
F1.1000000000000001
sg70
Vy
sa(dp202
g64
g65
sg20
F3.117
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F0.85999999999999899
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'\x0f\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p208
sg21
F1.8999999999999999
sg70
Vy
sa(dp209
g64
g65
sg20
F4.1840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F0.11999999999999918
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'\x06\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V7-olives.png
p215
sg21
F1.3
sg70
Vy
sa(dp216
g64
g65
sg20
F3.6840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F0.7599999999999989
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S'\x11\x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p222
sg21
F1.8999999999999999
sg70
Vy
sa(dp223
g64
g65
sg20
F2.4009999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F0.49999999999999889
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'&\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V50-polo.png
p229
sg21
F1.7
sg70
Vy
sa(dp230
g64
g65
sg20
F4.0839999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F0.89999999999999947
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S'\x08\x00\x00\x00'
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p236
sg21
F1.6000000000000001
sg70
Vy
sa(dp237
g64
g65
sg20
F4.2009999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F1.3799999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'\x01\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p243
sg21
F1.8999999999999999
sg70
Vy
sa(dp244
g64
g65
sg20
F2.8010000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F1.2399999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'!\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V44-crunch.png
p250
sg21
F1.8
sg70
Vy
sa(dp251
g64
g65
sg20
F3.0009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F0.91999999999999948
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S'\x12\x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p257
sg21
F1.5
sg70
Vy
sa(dp258
g64
g65
sg20
F3.7669999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F0.83999999999999919
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S'\x14\x00\x00\x00'
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p264
sg21
F1.8
sg70
Vy
sa(dp265
g64
g65
sg20
F2.7839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F1.4799999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'"\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p271
sg21
F1.8
sg70
Vy
sa(dp272
g64
g65
sg20
F2.4009999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F0.81999999999999962
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'\n\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p278
sg21
F1.3
sg70
Vy
sa(dp279
g64
g65
sg20
F3.0169999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F0.89999999999999969
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'\t\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p285
sg21
F1.3
sg70
Vy
sa(dp286
g64
g65
sg20
F2.7839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F0.93999999999999906
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'\x19\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p292
sg21
F2
sg70
Vy
sa(dp293
g64
g65
sg20
F4.3170000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F0.55999999999999939
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'\x03\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V4-corn.png
p299
sg21
F1.2
sg70
Vy
sa(dp300
g64
g65
sg20
F7.7510000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F1.9000000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'\x00\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p306
sg21
F1.2
sg70
Vy
sa(dp307
g64
g65
sg20
F2.8340000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F1.2799999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'\x17\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p313
sg21
F1.5
sg70
Vy
sa(dp314
g64
g65
sg20
F5.5510000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F0.35999999999999854
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'\x18\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p320
sg21
F1.8999999999999999
sg70
Vy
sa(dp321
g64
g65
sg20
F4.9340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F0.3199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S' \x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p327
sg21
F1.1000000000000001
sg70
Vy
sa(dp328
g64
g65
sg20
F2.7010000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F0.19999999999999893
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'\x16\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p334
sg21
F1.5
sg70
Vy
sa(dp335
g64
g65
sg20
F2.3010000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F0.29999999999999893
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S'\x15\x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V29-beans.png
p341
sg21
F1.3999999999999999
sg70
Vy
sa(dp342
g64
g65
sg20
F5.2510000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F1.0799999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S'\x1a\x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V35-raisins.png
p348
sg21
F1.5
sg70
Vy
sa(dp349
g64
g65
sg20
F3.0840000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F1.3599999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'\x1b\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p355
sg21
F1.5
sg70
Vy
sa(dp356
g64
g65
sg20
F3.4340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F0.7999999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'\x13\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p362
sg21
F1.2
sg70
Vy
sa(dp363
g64
g65
sg20
F4.7670000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F1.8600000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S'#\x00\x00\x00'
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p369
sg21
F1.3999999999999999
sg70
Vy
sa(dp370
g64
g65
sg20
F4.0170000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F1.2999999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'\x0c\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V18-mms.png
p376
sg21
F1.5
sg70
Vy
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F3.2668228419627212
sg58
Vn
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vy
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'40-sardines.png'
p381
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'5-pineapple.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'right'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F1.8000177899568826
sg27
F3.351
sg70
Vy
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'7-olives.png'
p390
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'22-daim.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'right'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F1.0501799380031116
sg27
F1.9670000000000001
sg70
Vy
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p399
sg26
F4.9000000000000012
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'13-mccoys_steak_crisps.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'right'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F0.95006182295173858
sg27
F1.601
sg70
Vy
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p408
sg26
F2.899999999999999
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'left'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F4.7999168661622207
sg27
F4.1509999999999998
sg70
Vy
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'50-polo.png'
p417
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'48-twix.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'right'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F1.0000362071241398
sg27
F1.8839999999999999
sg70
Vy
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p426
sg26
F4.4000000000000004
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'8-liquorice_catherine_wheels.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'left'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F3.4166085784656843
sg27
F1.284
sg70
Vy
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p435
sg26
F4.6000000000000014
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'20-fruit_pastilles.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'left'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F2.2999942695812479
sg27
F3.117
sg70
Vy
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p444
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'4-corn.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'left'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F0.88337742334692848
sg27
F1.734
sg70
Vy
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'49-yorkie.png'
p453
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'35-raisins.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'left'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F1.3000219238413138
sg27
F3.2509999999999999
sg70
Vy
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p462
sg26
F5.2000000000000002
sg28
F4
sg59
g63
sg58
Vn
sg81
S'3-ellas_strawberries_apples.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'left'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F1.7501366320018406
sg27
F5.0170000000000003
sg70
Vy
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p471
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'18-mms.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'right'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F0.95003901531435986
sg27
F1.3839999999999999
sg70
Vy
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'4-corn.png'
p480
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'10-bounty_redo.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'right'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F1.033363011771371
sg27
F4.8840000000000003
sg70
Vy
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'48-twix.png'
p489
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'50-polo.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'left'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F0.95009147288010354
sg27
F1.1339999999999999
sg70
Vy
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p498
sg26
F5.4999999999999991
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'16-skips_prawn.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'left'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F2.8332297011315859
sg27
F2.1840000000000002
sg70
Vy
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'29-beans.png'
p507
sg26
F4.9000000000000004
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'46-pistachios.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'right'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F1.9332429010516989
sg27
F2.7170000000000001
sg70
Vy
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'51-mars.png'
p516
sg26
F4.8000000000000007
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'27-hartleys_raspberries_jelly.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'left'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F2.7500605115126291
sg27
F3.0510000000000002
sg70
Vy
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p525
sg26
F5.3000000000000007
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'42-mrkipling_lemon_slices.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'right'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F3.6998731610271989
sg27
F2.1669999999999998
sg70
Vy
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p534
sg26
F5.2999999999999998
sg28
F4
sg59
g63
sg58
Vn
sg81
S'41-peanuts_redo.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'left'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F1.1334600297584529
sg27
F1.417
sg70
Vy
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'25-kitkat.png'
p543
sg26
F3.6000000000000005
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'31-hobnobs.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'right'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F6.6166783128164752
sg27
F5.9669999999999996
sg70
Vy
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p552
sg26
F3.6999999999999993
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'44-crunch.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'right'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F3.2167241561671744
sg27
F2.5670000000000002
sg70
Vy
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p561
sg26
F5.9999999999999973
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'33-ambrosia_rice.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'left'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F1.6668266052229228
sg27
F1.234
sg70
Vy
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'38-maltesers.png'
p570
sg26
F5.2000000000000011
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'6-sour_patch_kids.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'left'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F1.0997626010057502
sg27
F2.5179999999999998
sg70
Vy
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'18-mms.png'
p579
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'43-mrporky_pork_crackles_redo.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'left'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F0.98344678707394451
sg27
F1.2010000000000001
sg70
Vy
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p588
sg26
F5.4999999999999991
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'45-chewy_nougat_redo.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'right'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F1.1167072500061295
sg27
F2.7509999999999999
sg70
Vy
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'46-pistachios.png'
p597
sg26
F5.5999999999999988
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'29-beans.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'left'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F1.7500613667989455
sg27
F3.1509999999999998
sg70
Vy
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p606
sg26
F4.9000000000000021
sg28
F3
sg59
g63
sg58
Vn
sg81
S'17-jacobs_mini_cheddars_redo.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'right'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F1.633420258940987
sg27
F2.601
sg70
Vy
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p615
sg26
F4.1000000000000005
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'36-fig_rolls.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'right'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F2.8500631629005966
sg27
F2.0339999999999998
sg70
Vy
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'31-hobnobs.png'
p624
sg26
F3.9000000000000008
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'25-kitkat.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'left'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F4.6837766710373216
sg27
F3.9009999999999998
sg70
Vy
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'35-raisins.png'
p633
sg26
F5.3999999999999995
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'49-yorkie.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'right'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F3.4666023491297437
sg27
F3.0670000000000002
sg70
Vy
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p642
sg26
F4.9000000000000021
sg28
F3
sg59
g63
sg58
Vn
sg81
S'51-mars.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'right'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F1.4834355258028609
sg27
F2.101
sg70
Vy
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p651
sg26
F5.799999999999998
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'2-steamed_puddings.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'right'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F1.7500625071807008
sg27
F1.7170000000000001
sg70
Vy
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p660
sg26
F5.3999999999999995
sg28
F4
sg59
g63
sg58
Vn
sg81
S'21-nakd_banana_crunch.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'left'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F3.4671354776503449
sg27
F2.734
sg70
Vy
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p669
sg26
F5.9999999999999973
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'19-caramello_redo.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'right'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F1.1834549408042676
sg27
F1.351
sg70
Vy
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'44-crunch.png'
p678
sg26
F5.0000000000000018
sg28
F2.7000000000000002
sg59
g63
sg58
Vn
sg81
S'26-walkers_smoky_bacon.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'left'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F3.2334264740218259
sg27
F2.0670000000000002
sg70
Vy
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p687
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'23-crunchie_redo.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'right'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F2.0333935169860524
sg27
F1.2509999999999999
sg70
Vy
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'5-pineapple.png'
p696
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'40-sardines.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'left'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F1.1834153125344073
sg27
F1.2509999999999999
sg70
Vy
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'22-daim.png'
p705
sg26
F5.9999999999999973
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'7-olives.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'left'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F1.0499415981939819
sg27
F1.151
sg70
Vy
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p714
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'30-spaghetti_hoops.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'left'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F1.0166983265180534
sg27
F1.117
sg70
Vy
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p723
sg26
F5.4000000000000004
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'1-treacle_cookies.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'right'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F1.4000325579022501
sg27
F1.0840000000000001
sg70
Vy
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p732
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'38-maltesers.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'right'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F1.833082591871289
sg27
F1.3169999999999999
sg70
Vy
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vn
sg59
g63
sg30
F359.02094453838322
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp741
g64
g65
sg56
g57
sg58
Vn
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F3.1335022238870351
sg66
g67
sg68
g69
sg70
Vy
sa(dp743
g64
g65
sg82
S'53-cheestrings.png'
p744
sg83
S'47-picnic.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'47-picnic.png'
p749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\x07\t%6\t\xfe\x98'
tRp754
sa(dp755
g64
g65
sg82
S'52-aero_mousse.png'
p756
sg83
S'52-aero_mousse.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'14-discos_salt_vinegar.png'
p761
sg33
g761
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\x07\t&\x02\x04\x16\xe0'
tRp765
sa(dp766
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p767
sg83
S'37-nakd_cashew_cookie.png'
p768
sg56
g57
sS'practice_loop.thisN'
p769
I2
sS'practice_loop.thisTrialN'
p770
I2
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p771
I0
sg84
S'9-yu_mango_pieces.png'
p772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p773
sS'practice_loop.thisIndex'
p774
g60
(g99
S'\x02\x00\x00\x00'
tRp775
sg34
g753
(S'\x07\xdf\x07\x07\t&\t\n\x93\x08'
tRp776
sa(dp777
g64
g65
sg82
S'15-walnut_whip.png'
p778
sg83
S'28-maple_pecan.png'
p779
sg56
g57
sS'practice_loop.thisN'
p780
I3
sS'practice_loop.thisTrialN'
p781
I3
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p782
I0
sg84
S'28-maple_pecan.png'
p783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p784
sS'practice_loop.thisIndex'
p785
g60
(g99
S'\x03\x00\x00\x00'
tRp786
sg34
g753
(S'\x07\xdf\x07\x07\t&\x11\x06\xd2\x18'
tRp787
sa(dp788
g64
g65
sg82
g767
sg83
S'9-yu_mango_pieces.png'
p789
sg56
g57
sS'practice_loop.thisN'
p790
I4
sS'practice_loop.thisTrialN'
p791
I4
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p792
I0
sg84
g772
sg33
g772
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p793
sS'practice_loop.thisIndex'
p794
g60
(g99
S'\x04\x00\x00\x00'
tRp795
sg34
g753
(S'\x07\xdf\x07\x07\t&\x19\n\xe8\xf8'
tRp796
sa(dp797
g64
g65
sg82
S'12-topic.png'
p798
sg83
S'12-topic.png'
p799
sg56
g57
sS'practice_loop.thisN'
p800
I5
sS'practice_loop.thisTrialN'
p801
I5
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p802
I0
sg84
S'39-mackerel.png'
p803
sg33
g798
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p804
sS'practice_loop.thisIndex'
p805
g60
(g99
S'\x05\x00\x00\x00'
tRp806
sg34
g753
(S'\x07\xdf\x07\x07\t&#\x07S\x00'
tRp807
sa(dp808
g64
g65
sg82
S'11-snickers.png'
p809
sg83
S'11-snickers.png'
p810
sg56
g57
sS'practice_loop.thisN'
p811
I6
sS'practice_loop.thisTrialN'
p812
I6
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p813
I0
sg84
S'54-frubes_yogurt.png'
p814
sg33
g814
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p815
sS'practice_loop.thisIndex'
p816
g60
(g99
S'\x06\x00\x00\x00'
tRp817
sg34
g753
(S'\x07\xdf\x07\x07\t&*\x04M\x90'
tRp818
sa(dp819
g64
g65
sg82
S'32-hovis_crackers.png'
p820
sg83
S'24-food_doctor_apple_walnut_bar.png'
p821
sg56
g57
sS'practice_loop.thisN'
p822
I7
sS'practice_loop.thisTrialN'
p823
I7
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p824
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p825
sg33
g820
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p826
sS'practice_loop.thisIndex'
p827
g60
(g99
S'\x07\x00\x00\x00'
tRp828
sg34
g753
(S'\x07\xdf\x07\x07\t&2\x06\xf5@'
tRp829
sa(dp830
g64
g65
sg82
g778
sg83
S'15-walnut_whip.png'
p831
sg56
g57
sS'practice_loop.thisN'
p832
I8
sS'practice_loop.thisTrialN'
p833
I8
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p834
I0
sg84
g783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p835
sS'practice_loop.thisIndex'
p836
g60
(g99
S'\x08\x00\x00\x00'
tRp837
sg34
g753
(S'\x07\xdf\x07\x07\t&:\x0b\x0c '
tRp838
sa(dp839
g64
g65
sg82
g820
sg83
S'32-hovis_crackers.png'
p840
sg56
g57
sS'practice_loop.thisN'
p841
I9
sS'practice_loop.thisTrialN'
p842
I9
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p843
I0
sg84
g825
sg33
g820
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p844
sS'practice_loop.thisIndex'
p845
g60
(g99
S'\t\x00\x00\x00'
tRp846
sg34
g753
(S"\x07\xdf\x07\x07\t'\x05\x06\x1eh"
tRp847
sa(dp848
g64
g65
sg82
g744
sg83
S'53-cheestrings.png'
p849
sg56
g57
sS'practice_loop.thisN'
p850
I10
sS'practice_loop.thisTrialN'
p851
I10
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p852
I0
sg84
g749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S"\x07\xdf\x07\x07\t'\r\t\xfa\xb0"
tRp856
sa(dp857
g64
g65
sg82
g809
sg83
S'54-frubes_yogurt.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g814
sg33
g809
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S"\x07\xdf\x07\x07\t'\x13\x0c\xec\x98"
tRp865
sa(dp866
g64
g65
sg82
g756
sg83
S'14-discos_salt_vinegar.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S"\x07\xdf\x07\x07\t'\x1b\x0f\x1b0"
tRp874
sa(dp875
g64
g65
sg82
g798
sg83
S'39-mackerel.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g803
sg33
g798
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S"\x07\xdf\x07\x07\t'#\x07K0"
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F97.696673249520927
sg66
g67
sg68
g69
sg70
Vy
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vy
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'13-mccoys_steak_crisps.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'left'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'13-mccoys_steak_crisps.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'3-ellas_strawberries_apples.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
S'3-ellas_strawberries_apples.png'
p910
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vy
sS'block_loop.thisTrialN'
p912
I0
sg39
F1.8332510832910884
sg34
g753
(S'\x07\xdf\x07\x07\t,\x01\t#\xd8'
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'35-raisins.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'right'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'49-yorkie.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'49-yorkie.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p926
I0
sg909
S'35-raisins.png'
p927
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vy
sS'block_loop.thisTrialN'
p929
I0
sg39
F1.9666290055556601
sg34
g753
(S'\x07\xdf\x07\x07\t,\x08\x07\x10\x98'
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'40-sardines.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'left'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'40-sardines.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'5-pineapple.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p943
I0
sg909
S'5-pineapple.png'
p944
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vy
sS'block_loop.thisTrialN'
p946
I0
sg39
F2.2165984290668348
sg34
g753
(S'\x07\xdf\x07\x07\t,\x0f\x07 8'
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
S'23-crunchie_redo.png'
p950
sS'block_loop.thisIndex'
p951
g889
sg38
S'right'
p952
sg59
g63
sS'trial_loop.thisN'
p953
I3
sg33
S'33-ambrosia_rice.png'
p954
sg64
g65
sS'trial_loop.thisIndex'
p955
g60
(g99
S'\x03\x00\x00\x00'
tRp956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p957
I0
sg904
S'33-ambrosia_rice.png'
p958
sS'block_loop.thisRepN'
p959
I0
sg907
S'23-crunchie_redo.png'
p960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p961
I0
sg909
g954
sg55
g11
sS'block_loop.thisTrial'
p962
Nsg70
Vy
sS'block_loop.thisTrialN'
p963
I0
sg39
F1.7998732465557623
sg34
g753
(S'\x07\xdf\x07\x07\t,\x16\n\xc5\xd0'
tRp964
sa(dp965
S'trial_loop.thisTrialN'
p966
I4
sg895
S'30-spaghetti_hoops.png'
p967
sS'block_loop.thisIndex'
p968
g889
sg38
S'left'
p969
sg59
g63
sS'trial_loop.thisN'
p970
I4
sg33
S'19-caramello_redo.png'
p971
sg64
g65
sS'trial_loop.thisIndex'
p972
g60
(g99
S'\x04\x00\x00\x00'
tRp973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p974
I0
sg904
S'19-caramello_redo.png'
p975
sS'block_loop.thisRepN'
p976
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p977
I0
sg909
S'30-spaghetti_hoops.png'
p978
sg55
g11
sS'block_loop.thisTrial'
p979
Nsg70
Vy
sS'block_loop.thisTrialN'
p980
I0
sg39
F1.7832972259925555
sg34
g753
(S'\x07\xdf\x07\x07\t,\x1d\x089x'
tRp981
sa(dp982
S'trial_loop.thisTrialN'
p983
I5
sg895
S'10-bounty_redo.png'
p984
sS'block_loop.thisIndex'
p985
g889
sg38
S'right'
p986
sg59
g63
sS'trial_loop.thisN'
p987
I5
sg33
S'4-corn.png'
p988
sg64
g65
sS'trial_loop.thisIndex'
p989
g60
(g99
S'\x05\x00\x00\x00'
tRp990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p991
I0
sg904
S'4-corn.png'
p992
sS'block_loop.thisRepN'
p993
I0
sg907
S'10-bounty_redo.png'
p994
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p995
I0
sg909
g988
sg55
g11
sS'block_loop.thisTrial'
p996
Nsg70
Vy
sS'block_loop.thisTrialN'
p997
I0
sg39
F1.5165254161183839
sg34
g753
(S'\x07\xdf\x07\x07\t,$\x05n\xa0'
tRp998
sa(dp999
S'trial_loop.thisTrialN'
p1000
I6
sg895
S'25-kitkat.png'
p1001
sS'block_loop.thisIndex'
p1002
g889
sg38
S'right'
p1003
sg59
g63
sS'trial_loop.thisN'
p1004
I6
sg33
S'25-kitkat.png'
p1005
sg64
g65
sS'trial_loop.thisIndex'
p1006
g60
(g99
S'\x06\x00\x00\x00'
tRp1007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1008
I0
sg904
S'31-hobnobs.png'
p1009
sS'block_loop.thisRepN'
p1010
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1011
I0
sg909
S'31-hobnobs.png'
p1012
sg55
g11
sS'block_loop.thisTrial'
p1013
Nsg70
Vy
sS'block_loop.thisTrialN'
p1014
I0
sg39
F2.2165385590192273
sg34
g753
(S'\x07\xdf\x07\x07\t,*\r\xda\xe0'
tRp1015
sa(dp1016
S'trial_loop.thisTrialN'
p1017
I7
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p1018
sS'block_loop.thisIndex'
p1019
g889
sg38
S'left'
p1020
sg59
g63
sS'trial_loop.thisN'
p1021
I7
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p1022
sg64
g65
sS'trial_loop.thisIndex'
p1023
g60
(g99
S'\x07\x00\x00\x00'
tRp1024
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1025
I0
sg904
S'36-fig_rolls.png'
p1026
sS'block_loop.thisRepN'
p1027
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1028
I0
sg909
S'36-fig_rolls.png'
p1029
sg55
g11
sS'block_loop.thisTrial'
p1030
Nsg70
Vy
sS'block_loop.thisTrialN'
p1031
I0
sg39
F1.5000061295522755
sg34
g753
(S'\x07\xdf\x07\x07\t,2\x02x\xd0'
tRp1032
sa(dp1033
S'trial_loop.thisTrialN'
p1034
I8
sg895
S'45-chewy_nougat_redo.png'
p1035
sS'block_loop.thisIndex'
p1036
g889
sg38
S'right'
p1037
sg59
g63
sS'trial_loop.thisN'
p1038
I8
sg33
S'41-peanuts_redo.png'
p1039
sg64
g65
sS'trial_loop.thisIndex'
p1040
g60
(g99
S'\x08\x00\x00\x00'
tRp1041
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1042
I0
sg904
S'41-peanuts_redo.png'
p1043
sS'block_loop.thisRepN'
p1044
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1045
I0
sg909
S'45-chewy_nougat_redo.png'
p1046
sg55
g11
sS'block_loop.thisTrial'
p1047
Nsg70
Vy
sS'block_loop.thisTrialN'
p1048
I0
sg39
F2.0166016791549737
sg34
g753
(S'\x07\xdf\x07\x07\t,8\n\xa6\x90'
tRp1049
sa(dp1050
S'trial_loop.thisTrialN'
p1051
I9
sg895
g950
sS'block_loop.thisIndex'
p1052
g889
sg38
S'right'
p1053
sg59
g63
sS'trial_loop.thisN'
p1054
I9
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p1055
g60
(g99
S'\t\x00\x00\x00'
tRp1056
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1057
I0
sg904
g958
sS'block_loop.thisRepN'
p1058
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1059
I0
sg909
g954
sg55
g11
sS'block_loop.thisTrial'
p1060
Nsg70
Vy
sS'block_loop.thisTrialN'
p1061
I0
sg39
F2.0833017590102827
sg34
g753
(S'\x07\xdf\x07\x07\t-\x03\x0bm\xc8'
tRp1062
sa(dp1063
S'trial_loop.thisTrialN'
p1064
I10
sg895
g1035
sS'block_loop.thisIndex'
p1065
g889
sg38
S'right'
p1066
sg59
g63
sS'trial_loop.thisN'
p1067
I10
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p1068
g60
(g99
S'\n\x00\x00\x00'
tRp1069
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1070
I0
sg904
g1043
sS'block_loop.thisRepN'
p1071
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1072
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p1073
Nsg70
Vy
sS'block_loop.thisTrialN'
p1074
I0
sg39
F2.6165180891648561
sg34
g753
(S'\x07\xdf\x07\x07\t-\n\r+\x18'
tRp1075
sa(dp1076
S'trial_loop.thisTrialN'
p1077
I11
sg895
S'36-fig_rolls.png'
p1078
sS'block_loop.thisIndex'
p1079
g889
sg38
S'right'
p1080
sg59
g63
sS'trial_loop.thisN'
p1081
I11
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1082
g60
(g99
S'\x0b\x00\x00\x00'
tRp1083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1084
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p1085
sS'block_loop.thisRepN'
p1086
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1087
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1088
Nsg70
Vy
sS'block_loop.thisTrialN'
p1089
I0
sg39
F2.9498767959944416
sg34
g753
(S'\x07\xdf\x07\x07\t-\x12\x07\xbcx'
tRp1090
sa(dp1091
S'trial_loop.thisTrialN'
p1092
I12
sg895
g1001
sS'block_loop.thisIndex'
p1093
g889
sg38
S'left'
p1094
sg59
g63
sS'trial_loop.thisN'
p1095
I12
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1096
g60
(g99
S'\x0c\x00\x00\x00'
tRp1097
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1098
I0
sg904
g1009
sS'block_loop.thisRepN'
p1099
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1100
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1101
Nsg70
Vy
sS'block_loop.thisTrialN'
p1102
I0
sg39
F1.2166423337689594
sg34
g753
(S'\x07\xdf\x07\x07\t-\x1a\x07\x89\xb0'
tRp1103
sa(dp1104
S'trial_loop.thisTrialN'
p1105
I13
sg895
S'18-mms.png'
p1106
sS'block_loop.thisIndex'
p1107
g889
sg38
S'right'
p1108
sg59
g63
sS'trial_loop.thisN'
p1109
I13
sg33
S'18-mms.png'
p1110
sg64
g65
sS'trial_loop.thisIndex'
p1111
g60
(g99
S'\r\x00\x00\x00'
tRp1112
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1113
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1114
sS'block_loop.thisRepN'
p1115
I0
sg907
g1110
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1116
I0
sg909
S'43-mrporky_pork_crackles_redo.png'
p1117
sg55
g11
sS'block_loop.thisTrial'
p1118
Nsg70
Vy
sS'block_loop.thisTrialN'
p1119
I0
sg39
F1.7332358877029037
sg34
g753
(S'\x07\xdf\x07\x07\t- \x0bq\xb0'
tRp1120
sa(dp1121
S'trial_loop.thisTrialN'
p1122
I14
sg895
S'6-sour_patch_kids.png'
p1123
sS'block_loop.thisIndex'
p1124
g889
sg38
S'right'
p1125
sg59
g63
sS'trial_loop.thisN'
p1126
I14
sg33
S'38-maltesers.png'
p1127
sg64
g65
sS'trial_loop.thisIndex'
p1128
g60
(g99
S'\x0e\x00\x00\x00'
tRp1129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1130
I0
sg904
S'38-maltesers.png'
p1131
sS'block_loop.thisRepN'
p1132
I0
sg907
g1127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1133
I0
sg909
S'6-sour_patch_kids.png'
p1134
sg55
g11
sS'block_loop.thisTrial'
p1135
Nsg70
Vy
sS'block_loop.thisTrialN'
p1136
I0
sg39
F3.6495828910792625
sg34
g753
(S"\x07\xdf\x07\x07\t-'\x07\xb4\xa8"
tRp1137
sa(dp1138
S'trial_loop.thisTrialN'
p1139
I15
sg895
S'33-ambrosia_rice.png'
p1140
sS'block_loop.thisIndex'
p1141
g889
sg38
S'right'
p1142
sg59
g63
sS'trial_loop.thisN'
p1143
I15
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p1144
g60
(g99
S'\x0f\x00\x00\x00'
tRp1145
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1146
I0
sg904
S'23-crunchie_redo.png'
p1147
sS'block_loop.thisRepN'
p1148
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1149
I0
sg909
g954
sg55
g11
sS'block_loop.thisTrial'
p1150
Nsg70
Vy
sS'block_loop.thisTrialN'
p1151
I0
sg39
F2.3666324837204229
sg34
g753
(S'\x07\xdf\x07\x07\t-0\x02\xf5\xd0'
tRp1152
sa(dp1153
S'trial_loop.thisTrialN'
p1154
I16
sg895
g1106
sS'block_loop.thisIndex'
p1155
g889
sg38
S'left'
p1156
sg59
g63
sS'trial_loop.thisN'
p1157
I16
sg33
g1110
sg64
g65
sS'trial_loop.thisIndex'
p1158
g60
(g99
S'\x10\x00\x00\x00'
tRp1159
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1160
I0
sg904
g1114
sS'block_loop.thisRepN'
p1161
I0
sg907
g1110
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1162
I0
sg909
g1117
sg55
g11
sS'block_loop.thisTrial'
p1163
Nsg70
Vy
sS'block_loop.thisTrialN'
p1164
I0
sg39
F1.9999253049877552
sg34
g753
(S'\x07\xdf\x07\x07\t-7\x08\xf8\xe0'
tRp1165
sa(dp1166
S'trial_loop.thisTrialN'
p1167
I17
sg895
S'21-nakd_banana_crunch.png'
p1168
sS'block_loop.thisIndex'
p1169
g889
sg38
S'right'
p1170
sg59
g63
sS'trial_loop.thisN'
p1171
I17
sg33
S'1-treacle_cookies.png'
p1172
sg64
g65
sS'trial_loop.thisIndex'
p1173
g60
(g99
S'\x11\x00\x00\x00'
tRp1174
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1175
I0
sg904
S'1-treacle_cookies.png'
p1176
sS'block_loop.thisRepN'
p1177
I0
sg907
g1172
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1178
I0
sg909
S'21-nakd_banana_crunch.png'
p1179
sg55
g11
sS'block_loop.thisTrial'
p1180
Nsg70
Vy
sS'block_loop.thisTrialN'
p1181
I0
sg39
F2.9164721602855934
sg34
g753
(S'\x07\xdf\x07\x07\t.\x02\t\x85\x80'
tRp1182
sa(dp1183
S'trial_loop.thisTrialN'
p1184
I18
sg895
S'8-liquorice_catherine_wheels.png'
p1185
sS'block_loop.thisIndex'
p1186
g889
sg38
S'right'
p1187
sg59
g63
sS'trial_loop.thisN'
p1188
I18
sg33
S'17-jacobs_mini_cheddars_redo.png'
p1189
sg64
g65
sS'trial_loop.thisIndex'
p1190
g60
(g99
S'\x12\x00\x00\x00'
tRp1191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1192
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p1193
sS'block_loop.thisRepN'
p1194
I0
sg907
g1189
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1195
I0
sg909
S'8-liquorice_catherine_wheels.png'
p1196
sg55
g11
sS'block_loop.thisTrial'
p1197
Nsg70
Vy
sS'block_loop.thisTrialN'
p1198
I0
sg39
F2.2165704897111027
sg34
g753
(S'\x07\xdf\x07\x07\t.\n\x08\xd9\xa0'
tRp1199
sa(dp1200
S'trial_loop.thisTrialN'
p1201
I19
sg895
S'50-polo.png'
p1202
sS'block_loop.thisIndex'
p1203
g889
sg38
S'right'
p1204
sg59
g63
sS'trial_loop.thisN'
p1205
I19
sg33
S'48-twix.png'
p1206
sg64
g65
sS'trial_loop.thisIndex'
p1207
g60
(g99
S'\x13\x00\x00\x00'
tRp1208
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1209
I0
sg904
S'48-twix.png'
p1210
sS'block_loop.thisRepN'
p1211
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1212
I0
sg909
S'50-polo.png'
p1213
sg55
g11
sS'block_loop.thisTrial'
p1214
Nsg70
Vy
sS'block_loop.thisTrialN'
p1215
I0
sg39
F2.6665386588024376
sg34
g753
(S'\x07\xdf\x07\x07\t.\x11\x0c\xb9\xd0'
tRp1216
sa(dp1217
S'trial_loop.thisTrialN'
p1218
I20
sg895
S'3-ellas_strawberries_apples.png'
p1219
sS'block_loop.thisIndex'
p1220
g889
sg38
S'right'
p1221
sg59
g63
sS'trial_loop.thisN'
p1222
I20
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1223
g60
(g99
S'\x14\x00\x00\x00'
tRp1224
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1225
I0
sg904
S'13-mccoys_steak_crisps.png'
p1226
sS'block_loop.thisRepN'
p1227
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1228
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1229
Nsg70
Vy
sS'block_loop.thisTrialN'
p1230
I0
sg39
F4.8664604286068425
sg34
g753
(S'\x07\xdf\x07\x07\t.\x19\x08\x02\xc8'
tRp1231
sa(dp1232
S'trial_loop.thisTrialN'
p1233
I21
sg895
g1202
sS'block_loop.thisIndex'
p1234
g889
sg38
S'right'
p1235
sg59
g63
sS'trial_loop.thisN'
p1236
I21
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p1237
g60
(g99
S'\x15\x00\x00\x00'
tRp1238
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1239
I0
sg904
g1210
sS'block_loop.thisRepN'
p1240
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1241
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p1242
Nsg70
Vy
sS'block_loop.thisTrialN'
p1243
I0
sg39
F2.649872833167592
sg34
g753
(S'\x07\xdf\x07\x07\t.#\x06\x93\x98'
tRp1244
sa(dp1245
S'trial_loop.thisTrialN'
p1246
I22
sg895
S'49-yorkie.png'
p1247
sS'block_loop.thisIndex'
p1248
g889
sg38
S'left'
p1249
sg59
g63
sS'trial_loop.thisN'
p1250
I22
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1251
g60
(g99
S'\x16\x00\x00\x00'
tRp1252
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1253
I0
sg904
S'35-raisins.png'
p1254
sS'block_loop.thisRepN'
p1255
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1256
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1257
Nsg70
Vy
sS'block_loop.thisTrialN'
p1258
I0
sg39
F3.3332306989655081
sg34
g753
(S'\x07\xdf\x07\x07\t.+\x01\x9e\x10'
tRp1259
sa(dp1260
S'trial_loop.thisTrialN'
p1261
I23
sg895
S'22-daim.png'
p1262
sS'block_loop.thisIndex'
p1263
g889
sg38
S'right'
p1264
sg59
g63
sS'trial_loop.thisN'
p1265
I23
sg33
S'22-daim.png'
p1266
sg64
g65
sS'trial_loop.thisIndex'
p1267
g60
(g99
S'\x17\x00\x00\x00'
tRp1268
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1269
I0
sg904
S'7-olives.png'
p1270
sS'block_loop.thisRepN'
p1271
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1272
I0
sg909
S'7-olives.png'
p1273
sg55
g11
sS'block_loop.thisTrial'
p1274
Nsg70
Vy
sS'block_loop.thisTrialN'
p1275
I0
sg39
F2.4336761036115604
sg34
g753
(S'\x07\xdf\x07\x07\t.3\x07^\xb8'
tRp1276
sa(dp1277
S'trial_loop.thisTrialN'
p1278
I24
sg895
S'38-maltesers.png'
p1279
sS'block_loop.thisIndex'
p1280
g889
sg38
S'left'
p1281
sg59
g63
sS'trial_loop.thisN'
p1282
I24
sg33
g1127
sg64
g65
sS'trial_loop.thisIndex'
p1283
g60
(g99
S'\x18\x00\x00\x00'
tRp1284
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1285
I0
sg904
S'6-sour_patch_kids.png'
p1286
sS'block_loop.thisRepN'
p1287
I0
sg907
g1127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1288
I0
sg909
g1134
sg55
g11
sS'block_loop.thisTrial'
p1289
Nsg70
Vy
sS'block_loop.thisTrialN'
p1290
I0
sg39
F2.316319976325758
sg34
g753
(S'\x07\xdf\x07\x07\t.:\x0eW\xe0'
tRp1291
sa(dp1292
S'trial_loop.thisTrialN'
p1293
I25
sg895
S'41-peanuts_redo.png'
p1294
sS'block_loop.thisIndex'
p1295
g889
sg38
S'left'
p1296
sg59
g63
sS'trial_loop.thisN'
p1297
I25
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p1298
g60
(g99
S'\x19\x00\x00\x00'
tRp1299
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1300
I0
sg904
S'45-chewy_nougat_redo.png'
p1301
sS'block_loop.thisRepN'
p1302
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1303
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p1304
Nsg70
Vy
sS'block_loop.thisTrialN'
p1305
I0
sg39
F2.5330831905716877
sg34
g753
(S'\x07\xdf\x07\x07\t/\x06\x04e\x00'
tRp1306
sa(dp1307
S'trial_loop.thisTrialN'
p1308
I26
sg895
S'48-twix.png'
p1309
sS'block_loop.thisIndex'
p1310
g889
sg38
S'left'
p1311
sg59
g63
sS'trial_loop.thisN'
p1312
I26
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p1313
g60
(g99
S'\x1a\x00\x00\x00'
tRp1314
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1315
I0
sg904
S'50-polo.png'
p1316
sS'block_loop.thisRepN'
p1317
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1318
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p1319
Nsg70
Vy
sS'block_loop.thisTrialN'
p1320
I0
sg39
F3.0831224339626715
sg34
g753
(S'\x07\xdf\x07\x07\t/\r\r\x07\xf0'
tRp1321
sa(dp1322
S'trial_loop.thisTrialN'
p1323
I27
sg895
g1168
sS'block_loop.thisIndex'
p1324
g889
sg38
S'right'
p1325
sg59
g63
sS'trial_loop.thisN'
p1326
I27
sg33
g1179
sg64
g65
sS'trial_loop.thisIndex'
p1327
g60
(g99
S'\x1b\x00\x00\x00'
tRp1328
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1329
I0
sg904
g1176
sS'block_loop.thisRepN'
p1330
I0
sg907
g1172
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1331
I0
sg909
g1179
sg55
g11
sS'block_loop.thisTrial'
p1332
Nsg70
Vy
sS'block_loop.thisTrialN'
p1333
I0
sg39
F2.5499497234145565
sg34
g753
(S'\x07\xdf\x07\x07\t/\x15\x0e\xf8\x08'
tRp1334
sa(dp1335
S'trial_loop.thisTrialN'
p1336
I28
sg895
g896
sS'block_loop.thisIndex'
p1337
g889
sg38
S'left'
p1338
sg59
g63
sS'trial_loop.thisN'
p1339
I28
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1340
g60
(g99
S'\x1c\x00\x00\x00'
tRp1341
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1342
I0
sg904
g905
sS'block_loop.thisRepN'
p1343
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1344
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1345
Nsg70
Vy
sS'block_loop.thisTrialN'
p1346
I0
sg39
F2.0832812321368692
sg34
g753
(S'\x07\xdf\x07\x07\t/\x1d\x08\x978'
tRp1347
sa(dp1348
S'trial_loop.thisTrialN'
p1349
I29
sg895
S'46-pistachios.png'
p1350
sS'block_loop.thisIndex'
p1351
g889
sg38
S'left'
p1352
sg59
g63
sS'trial_loop.thisN'
p1353
I29
sg33
S'46-pistachios.png'
p1354
sg64
g65
sS'trial_loop.thisIndex'
p1355
g60
(g99
S'\x1d\x00\x00\x00'
tRp1356
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1357
I0
sg904
S'29-beans.png'
p1358
sS'block_loop.thisRepN'
p1359
I0
sg907
g1354
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1360
I0
sg909
S'29-beans.png'
p1361
sg55
g11
sS'block_loop.thisTrial'
p1362
Nsg70
Vy
sS'block_loop.thisTrialN'
p1363
I0
sg39
F3.549814873259038
sg34
g753
(S'\x07\xdf\x07\x07\t/$\nP\xa0'
tRp1364
sa(dp1365
S'trial_loop.thisTrialN'
p1366
I30
sg895
S'16-skips_prawn.png'
p1367
sS'block_loop.thisIndex'
p1368
g889
sg38
S'left'
p1369
sg59
g63
sS'trial_loop.thisN'
p1370
I30
sg33
S'16-skips_prawn.png'
p1371
sg64
g65
sS'trial_loop.thisIndex'
p1372
g60
(g99
S'\x1e\x00\x00\x00'
tRp1373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1374
I0
sg904
S'42-mrkipling_lemon_slices.png'
p1375
sS'block_loop.thisRepN'
p1376
I0
sg907
g1371
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1377
I0
sg909
S'42-mrkipling_lemon_slices.png'
p1378
sg55
g11
sS'block_loop.thisTrial'
p1379
Nsg70
Vy
sS'block_loop.thisTrialN'
p1380
I0
sg39
F2.5165083103902361
sg34
g753
(S'\x07\xdf\x07\x07\t/-\x03\xeb\xe8'
tRp1381
sa(dp1382
S'trial_loop.thisTrialN'
p1383
I31
sg895
S'43-mrporky_pork_crackles_redo.png'
p1384
sS'block_loop.thisIndex'
p1385
g889
sg38
S'right'
p1386
sg59
g63
sS'trial_loop.thisN'
p1387
I31
sg33
g1110
sg64
g65
sS'trial_loop.thisIndex'
p1388
g60
(g99
S'\x1f\x00\x00\x00'
tRp1389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1390
I0
sg904
S'18-mms.png'
p1391
sS'block_loop.thisRepN'
p1392
I0
sg907
g1110
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1393
I0
sg909
g1117
sg55
g11
sS'block_loop.thisTrial'
p1394
Nsg70
Vy
sS'block_loop.thisTrialN'
p1395
I0
sg39
F1.2166149646036502
sg34
g753
(S'\x07\xdf\x07\x07\t/4\x0cPX'
tRp1396
sa(dp1397
S'trial_loop.thisTrialN'
p1398
I32
sg895
g1185
sS'block_loop.thisIndex'
p1399
g889
sg38
S'right'
p1400
sg59
g63
sS'trial_loop.thisN'
p1401
I32
sg33
g1189
sg64
g65
sS'trial_loop.thisIndex'
p1402
g60
(g99
S' \x00\x00\x00'
tRp1403
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1404
I0
sg904
g1193
sS'block_loop.thisRepN'
p1405
I0
sg907
g1189
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1406
I0
sg909
g1196
sg55
g11
sS'block_loop.thisTrial'
p1407
Nsg70
Vy
sS'block_loop.thisTrialN'
p1408
I0
sg39
F2.1169430239560825
sg34
g753
(S'\x07\xdf\x07\x07\t/;\x00\xf6\x18'
tRp1409
sa(dp1410
S'trial_loop.thisTrialN'
p1411
I33
sg895
S'5-pineapple.png'
p1412
sS'block_loop.thisIndex'
p1413
g889
sg38
S'left'
p1414
sg59
g63
sS'trial_loop.thisN'
p1415
I33
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1416
g60
(g99
S'!\x00\x00\x00'
tRp1417
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1418
I0
sg904
S'40-sardines.png'
p1419
sS'block_loop.thisRepN'
p1420
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1421
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1422
Nsg70
Vy
sS'block_loop.thisTrialN'
p1423
I0
sg39
F3.2164518899976429
sg34
g753
(S'\x07\xdf\x07\x07\t0\x06\x03(\x98'
tRp1424
sa(dp1425
S'trial_loop.thisTrialN'
p1426
I34
sg895
S'19-caramello_redo.png'
p1427
sS'block_loop.thisIndex'
p1428
g889
sg38
S'left'
p1429
sg59
g63
sS'trial_loop.thisN'
p1430
I34
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1431
g60
(g99
S'"\x00\x00\x00'
tRp1432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1433
I0
sg904
S'30-spaghetti_hoops.png'
p1434
sS'block_loop.thisRepN'
p1435
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1436
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1437
Nsg70
Vy
sS'block_loop.thisTrialN'
p1438
I0
sg39
F3.6498360558525746
sg34
g753
(S'\x07\xdf\x07\x07\t0\x0e\x07\x04\xe0'
tRp1439
sa(dp1440
S'trial_loop.thisTrialN'
p1441
I35
sg895
S'31-hobnobs.png'
p1442
sS'block_loop.thisIndex'
p1443
g889
sg38
S'right'
p1444
sg59
g63
sS'trial_loop.thisN'
p1445
I35
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1446
g60
(g99
S'#\x00\x00\x00'
tRp1447
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1448
I0
sg904
S'25-kitkat.png'
p1449
sS'block_loop.thisRepN'
p1450
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1451
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1452
Nsg70
Vy
sS'block_loop.thisTrialN'
p1453
I0
sg39
F3.1831652838109221
sg34
g753
(S'\x07\xdf\x07\x07\t0\x17\x02F\x08'
tRp1454
sa(dp1455
S'trial_loop.thisTrialN'
p1456
I36
sg895
S'29-beans.png'
p1457
sS'block_loop.thisIndex'
p1458
g889
sg38
S'right'
p1459
sg59
g63
sS'trial_loop.thisN'
p1460
I36
sg33
g1361
sg64
g65
sS'trial_loop.thisIndex'
p1461
g60
(g99
S'$\x00\x00\x00'
tRp1462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1463
I0
sg904
S'46-pistachios.png'
p1464
sS'block_loop.thisRepN'
p1465
I0
sg907
g1354
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1466
I0
sg909
g1361
sg55
g11
sS'block_loop.thisTrial'
p1467
Nsg70
Vy
sS'block_loop.thisTrialN'
p1468
I0
sg39
F1.4666388413493223
sg34
g753
(S'\x07\xdf\x07\x07\t0\x1f\x05j\xb8'
tRp1469
sa(dp1470
S'trial_loop.thisTrialN'
p1471
I37
sg895
S'27-hartleys_raspberries_jelly.png'
p1472
sS'block_loop.thisIndex'
p1473
g889
sg38
S'right'
p1474
sg59
g63
sS'trial_loop.thisN'
p1475
I37
sg33
S'51-mars.png'
p1476
sg64
g65
sS'trial_loop.thisIndex'
p1477
g60
(g99
S'%\x00\x00\x00'
tRp1478
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1479
I0
sg904
S'51-mars.png'
p1480
sS'block_loop.thisRepN'
p1481
I0
sg907
g1476
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1482
I0
sg909
S'27-hartleys_raspberries_jelly.png'
p1483
sg55
g11
sS'block_loop.thisTrial'
p1484
Nsg70
Vy
sS'block_loop.thisTrialN'
p1485
I0
sg39
F2.4499388042581813
sg34
g753
(S'\x07\xdf\x07\x07\t0%\r\x1f`'
tRp1486
sa(dp1487
S'trial_loop.thisTrialN'
p1488
I38
sg895
g1350
sS'block_loop.thisIndex'
p1489
g889
sg38
S'left'
p1490
sg59
g63
sS'trial_loop.thisN'
p1491
I38
sg33
g1354
sg64
g65
sS'trial_loop.thisIndex'
p1492
g60
(g99
S'&\x00\x00\x00'
tRp1493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1494
I0
sg904
g1358
sS'block_loop.thisRepN'
p1495
I0
sg907
g1354
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1496
I0
sg909
g1361
sg55
g11
sS'block_loop.thisTrial'
p1497
Nsg70
Vy
sS'block_loop.thisTrialN'
p1498
I0
sg39
F1.7499695660590078
sg34
g753
(S'\x07\xdf\x07\x07\t0-\x05O`'
tRp1499
sa(dp1500
S'trial_loop.thisTrialN'
p1501
I39
sg895
g1262
sS'block_loop.thisIndex'
p1502
g889
sg38
S'left'
p1503
sg59
g63
sS'trial_loop.thisN'
p1504
I39
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p1505
g60
(g99
S"'\x00\x00\x00"
tRp1506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1507
I0
sg904
g1270
sS'block_loop.thisRepN'
p1508
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1509
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p1510
Nsg70
Vy
sS'block_loop.thisTrialN'
p1511
I0
sg39
F2.5498482294287896
sg34
g753
(S'\x07\xdf\x07\x07\t04\x01\xcc\xf0'
tRp1512
sa(dp1513
S'trial_loop.thisTrialN'
p1514
I40
sg895
g1202
sS'block_loop.thisIndex'
p1515
g889
sg38
S'right'
p1516
sg59
g63
sS'trial_loop.thisN'
p1517
I40
sg33
g1213
sg64
g65
sS'trial_loop.thisIndex'
p1518
g60
(g99
S'(\x00\x00\x00'
tRp1519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1520
I0
sg904
g1210
sS'block_loop.thisRepN'
p1521
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1522
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p1523
Nsg70
Vy
sS'block_loop.thisTrialN'
p1524
I0
sg39
F2.2165205980049905
sg34
g753
(S'\x07\xdf\x07\x07\t0;\n\xe8\xf8'
tRp1525
sa(dp1526
S'trial_loop.thisTrialN'
p1527
I41
sg895
g1219
sS'block_loop.thisIndex'
p1528
g889
sg38
S'right'
p1529
sg59
g63
sS'trial_loop.thisN'
p1530
I41
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1531
g60
(g99
S')\x00\x00\x00'
tRp1532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1533
I0
sg904
g1226
sS'block_loop.thisRepN'
p1534
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1535
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1536
Nsg70
Vy
sS'block_loop.thisTrialN'
p1537
I0
sg39
F1.9003078175742303
sg34
g753
(S'\x07\xdf\x07\x07\t1\x06\x0e\x8e\x90'
tRp1538
sa(dp1539
S'trial_loop.thisTrialN'
p1540
I42
sg895
S'17-jacobs_mini_cheddars_redo.png'
p1541
sS'block_loop.thisIndex'
p1542
g889
sg38
S'left'
p1543
sg59
g63
sS'trial_loop.thisN'
p1544
I42
sg33
g1189
sg64
g65
sS'trial_loop.thisIndex'
p1545
g60
(g99
S'*\x00\x00\x00'
tRp1546
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1547
I0
sg904
S'8-liquorice_catherine_wheels.png'
p1548
sS'block_loop.thisRepN'
p1549
I0
sg907
g1189
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1550
I0
sg909
g1196
sg55
g11
sS'block_loop.thisTrial'
p1551
Nsg70
Vy
sS'block_loop.thisTrialN'
p1552
I0
sg39
F1.5499745267202343
sg34
g753
(S'\x07\xdf\x07\x07\t1\r\r\xac\x00'
tRp1553
sa(dp1554
S'trial_loop.thisTrialN'
p1555
I43
sg895
g950
sS'block_loop.thisIndex'
p1556
g889
sg38
S'left'
p1557
sg59
g63
sS'trial_loop.thisN'
p1558
I43
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1559
g60
(g99
S'+\x00\x00\x00'
tRp1560
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1561
I0
sg904
g958
sS'block_loop.thisRepN'
p1562
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1563
I0
sg909
g954
sg55
g11
sS'block_loop.thisTrial'
p1564
Nsg70
Vy
sS'block_loop.thisTrialN'
p1565
I0
sg39
F1.9164758665260706
sg34
g753
(S'\x07\xdf\x07\x07\t1\x14\x07O\x18'
tRp1566
sa(dp1567
S'trial_loop.thisTrialN'
p1568
I44
sg895
g1123
sS'block_loop.thisIndex'
p1569
g889
sg38
S'right'
p1570
sg59
g63
sS'trial_loop.thisN'
p1571
I44
sg33
g1127
sg64
g65
sS'trial_loop.thisIndex'
p1572
g60
(g99
S',\x00\x00\x00'
tRp1573
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1574
I0
sg904
g1131
sS'block_loop.thisRepN'
p1575
I0
sg907
g1127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1576
I0
sg909
g1134
sg55
g11
sS'block_loop.thisTrial'
p1577
Nsg70
Vy
sS'block_loop.thisTrialN'
p1578
I0
sg39
F1.3329715471877535
sg34
g753
(S'\x07\xdf\x07\x07\t1\x1b\x06l\x88'
tRp1579
sa(dp1580
S'trial_loop.thisTrialN'
p1581
I45
sg895
g1106
sS'block_loop.thisIndex'
p1582
g889
sg38
S'left'
p1583
sg59
g63
sS'trial_loop.thisN'
p1584
I45
sg33
g1110
sg64
g65
sS'trial_loop.thisIndex'
p1585
g60
(g99
S'-\x00\x00\x00'
tRp1586
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1587
I0
sg904
g1114
sS'block_loop.thisRepN'
p1588
I0
sg907
g1110
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1589
I0
sg909
g1117
sg55
g11
sS'block_loop.thisTrial'
p1590
Nsg70
Vy
sS'block_loop.thisTrialN'
p1591
I0
sg39
F1.2498992900268604
sg34
g753
(S'\x07\xdf\x07\x07\t1!\x0b\xfeP'
tRp1592
sa(dp1593
S'trial_loop.thisTrialN'
p1594
I46
sg895
S'20-fruit_pastilles.png'
p1595
sS'block_loop.thisIndex'
p1596
g889
sg38
S'right'
p1597
sg59
g63
sS'trial_loop.thisN'
p1598
I46
sg33
S'20-fruit_pastilles.png'
p1599
sg64
g65
sS'trial_loop.thisIndex'
p1600
g60
(g99
S'.\x00\x00\x00'
tRp1601
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1602
I0
sg904
S'2-steamed_puddings.png'
p1603
sS'block_loop.thisRepN'
p1604
I0
sg907
S'2-steamed_puddings.png'
p1605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1606
I0
sg909
g1599
sg55
g11
sS'block_loop.thisTrial'
p1607
Nsg70
Vy
sS'block_loop.thisTrialN'
p1608
I0
sg39
F4.7335734407347445
sg34
g753
(S'\x07\xdf\x07\x07\t1(\x01\x1d('
tRp1609
sa(dp1610
S'trial_loop.thisTrialN'
p1611
I47
sg895
g1472
sS'block_loop.thisIndex'
p1612
g889
sg38
S'right'
p1613
sg59
g63
sS'trial_loop.thisN'
p1614
I47
sg33
g1483
sg64
g65
sS'trial_loop.thisIndex'
p1615
g60
(g99
S'/\x00\x00\x00'
tRp1616
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1617
I0
sg904
g1480
sS'block_loop.thisRepN'
p1618
I0
sg907
g1476
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1619
I0
sg909
g1483
sg55
g11
sS'block_loop.thisTrial'
p1620
Nsg70
Vy
sS'block_loop.thisTrialN'
p1621
I0
sg39
F4.5165234204496301
sg34
g753
(S'\x07\xdf\x07\x07\t11\x0c\xc9p'
tRp1622
sa(dp1623
S'trial_loop.thisTrialN'
p1624
I48
sg895
S'42-mrkipling_lemon_slices.png'
p1625
sS'block_loop.thisIndex'
p1626
g889
sg38
S'right'
p1627
sg59
g63
sS'trial_loop.thisN'
p1628
I48
sg33
g1371
sg64
g65
sS'trial_loop.thisIndex'
p1629
g60
(g99
S'0\x00\x00\x00'
tRp1630
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1631
I0
sg904
S'16-skips_prawn.png'
p1632
sS'block_loop.thisRepN'
p1633
I0
sg907
g1371
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1634
I0
sg909
g1378
sg55
g11
sS'block_loop.thisTrial'
p1635
Nsg70
Vy
sS'block_loop.thisTrialN'
p1636
I0
sg39
F5.2662452385493452
sg34
g753
(S'\x07\xdf\x07\x07\t1;\x05\xe3\xd0'
tRp1637
sa(dp1638
S'trial_loop.thisTrialN'
p1639
I49
sg895
g1442
sS'block_loop.thisIndex'
p1640
g889
sg38
S'right'
p1641
sg59
g63
sS'trial_loop.thisN'
p1642
I49
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1643
g60
(g99
S'1\x00\x00\x00'
tRp1644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1645
I0
sg904
g1449
sS'block_loop.thisRepN'
p1646
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1647
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1648
Nsg70
Vy
sS'block_loop.thisTrialN'
p1649
I0
sg39
F2.2333107252629816
sg34
g753
(S'\x07\xdf\x07\x07\t2\t\n\xa2\xa8'
tRp1650
sa(dp1651
S'trial_loop.thisTrialN'
p1652
I50
sg895
g1457
sS'block_loop.thisIndex'
p1653
g889
sg38
S'right'
p1654
sg59
g63
sS'trial_loop.thisN'
p1655
I50
sg33
g1354
sg64
g65
sS'trial_loop.thisIndex'
p1656
g60
(g99
S'2\x00\x00\x00'
tRp1657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1658
I0
sg904
g1464
sS'block_loop.thisRepN'
p1659
I0
sg907
g1354
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1660
I0
sg909
g1361
sg55
g11
sS'block_loop.thisTrial'
p1661
Nsg70
Vy
sS'block_loop.thisTrialN'
p1662
I0
sg39
F1.2000084388259893
sg34
g753
(S'\x07\xdf\x07\x07\t2\x10\x0e\x82\xd8'
tRp1663
sa(dp1664
S'trial_loop.thisTrialN'
p1665
I51
sg895
g1427
sS'block_loop.thisIndex'
p1666
g889
sg38
S'left'
p1667
sg59
g63
sS'trial_loop.thisN'
p1668
I51
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1669
g60
(g99
S'3\x00\x00\x00'
tRp1670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1671
I0
sg904
g1434
sS'block_loop.thisRepN'
p1672
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1673
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1674
Nsg70
Vy
sS'block_loop.thisTrialN'
p1675
I0
sg39
F1.9499415126651911
sg34
g753
(S'\x07\xdf\x07\x07\t2\x17\x02\xea\x18'
tRp1676
sa(dp1677
S'trial_loop.thisTrialN'
p1678
I52
sg895
g1541
sS'block_loop.thisIndex'
p1679
g889
sg38
S'left'
p1680
sg59
g63
sS'trial_loop.thisN'
p1681
I52
sg33
g1189
sg64
g65
sS'trial_loop.thisIndex'
p1682
g60
(g99
S'4\x00\x00\x00'
tRp1683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1684
I0
sg904
g1548
sS'block_loop.thisRepN'
p1685
I0
sg907
g1189
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1686
I0
sg909
g1196
sg55
g11
sS'block_loop.thisTrial'
p1687
Nsg70
Vy
sS'block_loop.thisTrialN'
p1688
I0
sg39
F1.0832330510033898
sg34
g753
(S'\x07\xdf\x07\x07\t2\x1e\x02\xbf '
tRp1689
sa(dp1690
S'trial_loop.thisTrialN'
p1691
I53
sg895
g1219
sS'block_loop.thisIndex'
p1692
g889
sg38
S'right'
p1693
sg59
g63
sS'trial_loop.thisN'
p1694
I53
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1695
g60
(g99
S'5\x00\x00\x00'
tRp1696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1697
I0
sg904
g1226
sS'block_loop.thisRepN'
p1698
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1699
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1700
Nsg70
Vy
sS'block_loop.thisTrialN'
p1701
I0
sg39
F1.1666870509920955
sg34
g753
(S'\x07\xdf\x07\x07\t2$\x04\x80X'
tRp1702
sa(dp1703
S'trial_loop.thisTrialN'
p1704
I54
sg895
g1247
sS'block_loop.thisIndex'
p1705
g889
sg38
S'left'
p1706
sg59
g63
sS'trial_loop.thisN'
p1707
I54
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1708
g60
(g99
S'6\x00\x00\x00'
tRp1709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1710
I0
sg904
g1254
sS'block_loop.thisRepN'
p1711
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1712
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1713
Nsg70
Vy
sS'block_loop.thisTrialN'
p1714
I0
sg39
F3.0498443806400246
sg34
g753
(S'\x07\xdf\x07\x07\t2*\x07r@'
tRp1715
sa(dp1716
S'trial_loop.thisTrialN'
p1717
I55
sg895
g1185
sS'block_loop.thisIndex'
p1718
g889
sg38
S'right'
p1719
sg59
g63
sS'trial_loop.thisN'
p1720
I55
sg33
g1196
sg64
g65
sS'trial_loop.thisIndex'
p1721
g60
(g99
S'7\x00\x00\x00'
tRp1722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1723
I0
sg904
g1193
sS'block_loop.thisRepN'
p1724
I0
sg907
g1189
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1725
I0
sg909
g1196
sg55
g11
sS'block_loop.thisTrial'
p1726
Nsg70
Vy
sS'block_loop.thisTrialN'
p1727
I0
sg39
F1.200415555150812
sg34
g753
(S'\x07\xdf\x07\x07\t22\x08\xae\xa8'
tRp1728
sa(dp1729
S'trial_loop.thisTrialN'
p1730
I56
sg895
g967
sS'block_loop.thisIndex'
p1731
g889
sg38
S'right'
p1732
sg59
g63
sS'trial_loop.thisN'
p1733
I56
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1734
g60
(g99
S'8\x00\x00\x00'
tRp1735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1736
I0
sg904
g975
sS'block_loop.thisRepN'
p1737
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1738
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1739
Nsg70
Vy
sS'block_loop.thisTrialN'
p1740
I0
sg39
F1.1832545186916832
sg34
g753
(S'\x07\xdf\x07\x07\t28\x0cX('
tRp1741
sa(dp1742
S'trial_loop.thisTrialN'
p1743
I57
sg895
g1001
sS'block_loop.thisIndex'
p1744
g889
sg38
S'left'
p1745
sg59
g63
sS'trial_loop.thisN'
p1746
I57
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1747
g60
(g99
S'9\x00\x00\x00'
tRp1748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1749
I0
sg904
g1009
sS'block_loop.thisRepN'
p1750
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1751
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1752
Nsg70
Vy
sS'block_loop.thisTrialN'
p1753
I0
sg39
F1.0165549234989157
sg34
g753
(S'\x07\xdf\x07\x07\t3\x03\x00FP'
tRp1754
sa(dp1755
S'trial_loop.thisTrialN'
p1756
I58
sg895
g1294
sS'block_loop.thisIndex'
p1757
g889
sg38
S'left'
p1758
sg59
g63
sS'trial_loop.thisN'
p1759
I58
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p1760
g60
(g99
S':\x00\x00\x00'
tRp1761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1762
I0
sg904
g1301
sS'block_loop.thisRepN'
p1763
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1764
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p1765
Nsg70
Vy
sS'block_loop.thisTrialN'
p1766
I0
sg39
F3.5664846902309364
sg34
g753
(S'\x07\xdf\x07\x07\t3\t\x01\x15X'
tRp1767
sa(dp1768
S'trial_loop.thisTrialN'
p1769
I59
sg895
S'44-crunch.png'
p1770
sS'block_loop.thisIndex'
p1771
g889
sg38
S'left'
p1772
sg59
g63
sS'trial_loop.thisN'
p1773
I59
sg33
S'26-walkers_smoky_bacon.png'
p1774
sg64
g65
sS'trial_loop.thisIndex'
p1775
g60
(g99
S';\x00\x00\x00'
tRp1776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1777
I0
sg904
S'26-walkers_smoky_bacon.png'
p1778
sS'block_loop.thisRepN'
p1779
I0
sg907
g1774
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1780
I0
sg909
S'44-crunch.png'
p1781
sg55
g11
sS'block_loop.thisTrial'
p1782
Nsg70
Vy
sS'block_loop.thisTrialN'
p1783
I0
sg39
F3.4997495436336976
sg34
g753
(S'\x07\xdf\x07\x07\t3\x11\n)\x90'
tRp1784
sa(dp1785
S'trial_loop.thisTrialN'
p1786
I60
sg895
g1123
sS'block_loop.thisIndex'
p1787
g889
sg38
S'right'
p1788
sg59
g63
sS'trial_loop.thisN'
p1789
I60
sg33
g1127
sg64
g65
sS'trial_loop.thisIndex'
p1790
g60
(g99
S'<\x00\x00\x00'
tRp1791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1792
I0
sg904
g1131
sS'block_loop.thisRepN'
p1793
I0
sg907
g1127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1794
I0
sg909
g1134
sg55
g11
sS'block_loop.thisTrial'
p1795
Nsg70
Vy
sS'block_loop.thisTrialN'
p1796
I0
sg39
F1.4662642259072527
sg34
g753
(S'\x07\xdf\x07\x07\t3\x1a\x03\r@'
tRp1797
sa(dp1798
S'trial_loop.thisTrialN'
p1799
I61
sg895
g984
sS'block_loop.thisIndex'
p1800
g889
sg38
S'right'
p1801
sg59
g63
sS'trial_loop.thisN'
p1802
I61
sg33
g994
sg64
g65
sS'trial_loop.thisIndex'
p1803
g60
(g99
S'=\x00\x00\x00'
tRp1804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1805
I0
sg904
g992
sS'block_loop.thisRepN'
p1806
I0
sg907
g994
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1807
I0
sg909
g988
sg55
g11
sS'block_loop.thisTrial'
p1808
Nsg70
Vy
sS'block_loop.thisTrialN'
p1809
I0
sg39
F4.0165534980219491
sg34
g753
(S'\x07\xdf\x07\x07\t3 \n\xc1\xe8'
tRp1810
sa(dp1811
S'trial_loop.thisTrialN'
p1812
I62
sg895
g1219
sS'block_loop.thisIndex'
p1813
g889
sg38
S'right'
p1814
sg59
g63
sS'trial_loop.thisN'
p1815
I62
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1816
g60
(g99
S'>\x00\x00\x00'
tRp1817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1818
I0
sg904
g1226
sS'block_loop.thisRepN'
p1819
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1820
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1821
Nsg70
Vy
sS'block_loop.thisTrialN'
p1822
I0
sg39
F1.3165720007173149
sg34
g753
(S'\x07\xdf\x07\x07\t3)\x0b}h'
tRp1823
sa(dp1824
S'trial_loop.thisTrialN'
p1825
I63
sg895
g1412
sS'block_loop.thisIndex'
p1826
g889
sg38
S'right'
p1827
sg59
g63
sS'trial_loop.thisN'
p1828
I63
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1829
g60
(g99
S'?\x00\x00\x00'
tRp1830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1831
I0
sg904
g1419
sS'block_loop.thisRepN'
p1832
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1833
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1834
Nsg70
Vy
sS'block_loop.thisTrialN'
p1835
I0
sg39
F4.0496918545659355
sg34
g753
(S'\x07\xdf\x07\x07\t30\x01\x8ep'
tRp1836
sa(dp1837
S'trial_loop.thisTrialN'
p1838
I64
sg895
g984
sS'block_loop.thisIndex'
p1839
g889
sg38
S'left'
p1840
sg59
g63
sS'trial_loop.thisN'
p1841
I64
sg33
g994
sg64
g65
sS'trial_loop.thisIndex'
p1842
g60
(g99
S'@\x00\x00\x00'
tRp1843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1844
I0
sg904
g992
sS'block_loop.thisRepN'
p1845
I0
sg907
g994
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1846
I0
sg909
g988
sg55
g11
sS'block_loop.thisTrial'
p1847
Nsg70
Vy
sS'block_loop.thisTrialN'
p1848
I0
sg39
F1.9336337669346904
sg34
g753
(S'\x07\xdf\x07\x07\t39\x03\x01\x88'
tRp1849
sa(dp1850
S'trial_loop.thisTrialN'
p1851
I65
sg895
g1384
sS'block_loop.thisIndex'
p1852
g889
sg38
S'right'
p1853
sg59
g63
sS'trial_loop.thisN'
p1854
I65
sg33
g1110
sg64
g65
sS'trial_loop.thisIndex'
p1855
g60
(g99
S'A\x00\x00\x00'
tRp1856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1857
I0
sg904
g1391
sS'block_loop.thisRepN'
p1858
I0
sg907
g1110
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1859
I0
sg909
g1117
sg55
g11
sS'block_loop.thisTrial'
p1860
Nsg70
Vy
sS'block_loop.thisTrialN'
p1861
I0
sg39
F1.1665693065651794
sg34
g753
(S'\x07\xdf\x07\x07\t4\x04\x02]x'
tRp1862
sa(dp1863
S'trial_loop.thisTrialN'
p1864
I66
sg895
S'4-corn.png'
p1865
sS'block_loop.thisIndex'
p1866
g889
sg38
S'right'
p1867
sg59
g63
sS'trial_loop.thisN'
p1868
I66
sg33
g994
sg64
g65
sS'trial_loop.thisIndex'
p1869
g60
(g99
S'B\x00\x00\x00'
tRp1870
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1871
I0
sg904
S'10-bounty_redo.png'
p1872
sS'block_loop.thisRepN'
p1873
I0
sg907
g994
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1874
I0
sg909
g988
sg55
g11
sS'block_loop.thisTrial'
p1875
Nsg70
Vy
sS'block_loop.thisTrialN'
p1876
I0
sg39
F1.2666514995876241
sg34
g753
(S'\x07\xdf\x07\x07\t4\n\x05\x89\xf8'
tRp1877
sa(dp1878
S'trial_loop.thisTrialN'
p1879
I67
sg895
g1625
sS'block_loop.thisIndex'
p1880
g889
sg38
S'right'
p1881
sg59
g63
sS'trial_loop.thisN'
p1882
I67
sg33
g1371
sg64
g65
sS'trial_loop.thisIndex'
p1883
g60
(g99
S'C\x00\x00\x00'
tRp1884
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1885
I0
sg904
g1632
sS'block_loop.thisRepN'
p1886
I0
sg907
g1371
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1887
I0
sg909
g1378
sg55
g11
sS'block_loop.thisTrial'
p1888
Nsg70
Vy
sS'block_loop.thisTrialN'
p1889
I0
sg39
F4.2997804479819024
sg34
g753
(S'\x07\xdf\x07\x07\t4\x10\t\xeb\x10'
tRp1890
sa(dp1891
S'trial_loop.thisTrialN'
p1892
I68
sg895
g967
sS'block_loop.thisIndex'
p1893
g889
sg38
S'right'
p1894
sg59
g63
sS'trial_loop.thisN'
p1895
I68
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1896
g60
(g99
S'D\x00\x00\x00'
tRp1897
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1898
I0
sg904
g975
sS'block_loop.thisRepN'
p1899
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1900
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1901
Nsg70
Vy
sS'block_loop.thisTrialN'
p1902
I0
sg39
F2.4498375953680807
sg34
g753
(S'\x07\xdf\x07\x07\t4\x19\x0f.\xb8'
tRp1903
sa(dp1904
S'trial_loop.thisTrialN'
p1905
I69
sg895
S'51-mars.png'
p1906
sS'block_loop.thisIndex'
p1907
g889
sg38
S'right'
p1908
sg59
g63
sS'trial_loop.thisN'
p1909
I69
sg33
g1483
sg64
g65
sS'trial_loop.thisIndex'
p1910
g60
(g99
S'E\x00\x00\x00'
tRp1911
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1912
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p1913
sS'block_loop.thisRepN'
p1914
I0
sg907
g1476
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1915
I0
sg909
g1483
sg55
g11
sS'block_loop.thisTrial'
p1916
Nsg70
Vy
sS'block_loop.thisTrialN'
p1917
I0
sg39
F2.0166279079380729
sg34
g753
(S'\x07\xdf\x07\x07\t4!\x07 8'
tRp1918
sa(dp1919
S'trial_loop.thisTrialN'
p1920
I70
sg895
g1247
sS'block_loop.thisIndex'
p1921
g889
sg38
S'left'
p1922
sg59
g63
sS'trial_loop.thisN'
p1923
I70
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1924
g60
(g99
S'F\x00\x00\x00'
tRp1925
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1926
I0
sg904
g1254
sS'block_loop.thisRepN'
p1927
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1928
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1929
Nsg70
Vy
sS'block_loop.thisTrialN'
p1930
I0
sg39
F2.8499134877806682
sg34
g753
(S'\x07\xdf\x07\x07\t4(\x07\xe7p'
tRp1931
sa(dp1932
S'trial_loop.thisTrialN'
p1933
I71
sg895
g1140
sS'block_loop.thisIndex'
p1934
g889
sg38
S'left'
p1935
sg59
g63
sS'trial_loop.thisN'
p1936
I71
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p1937
g60
(g99
S'G\x00\x00\x00'
tRp1938
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1939
I0
sg904
g1147
sS'block_loop.thisRepN'
p1940
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1941
I0
sg909
g954
sg55
g11
sS'block_loop.thisTrial'
p1942
Nsg70
Vy
sS'block_loop.thisTrialN'
p1943
I0
sg39
F3.7832422025676351
sg34
g753
(S'\x07\xdf\x07\x07\t40\x06I`'
tRp1944
sa(dp1945
S'trial_loop.thisTrialN'
p1946
I72
sg895
g896
sS'block_loop.thisIndex'
p1947
g889
sg38
S'left'
p1948
sg59
g63
sS'trial_loop.thisN'
p1949
I72
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p1950
g60
(g99
S'H\x00\x00\x00'
tRp1951
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1952
I0
sg904
g905
sS'block_loop.thisRepN'
p1953
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1954
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1955
Nsg70
Vy
sS'block_loop.thisTrialN'
p1956
I0
sg39
F1.099915127080294
sg34
g753
(S'\x07\xdf\x07\x07\t49\x03r\xd0'
tRp1957
sa(dp1958
S'trial_loop.thisTrialN'
p1959
I73
sg895
g933
sS'block_loop.thisIndex'
p1960
g889
sg38
S'left'
p1961
sg59
g63
sS'trial_loop.thisN'
p1962
I73
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1963
g60
(g99
S'I\x00\x00\x00'
tRp1964
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1965
I0
sg904
g941
sS'block_loop.thisRepN'
p1966
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1967
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1968
Nsg70
Vy
sS'block_loop.thisTrialN'
p1969
I0
sg39
F1.3332726079988788
sg34
g753
(S'\x07\xdf\x07\x07\t5\x03\x05r\x88'
tRp1970
sa(dp1971
S'trial_loop.thisTrialN'
p1972
I74
sg895
g1442
sS'block_loop.thisIndex'
p1973
g889
sg38
S'right'
p1974
sg59
g63
sS'trial_loop.thisN'
p1975
I74
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1976
g60
(g99
S'J\x00\x00\x00'
tRp1977
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1978
I0
sg904
g1449
sS'block_loop.thisRepN'
p1979
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1980
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1981
Nsg70
Vy
sS'block_loop.thisTrialN'
p1982
I0
sg39
F1.9503235405891246
sg34
g753
(S'\x07\xdf\x07\x07\t5\t\x0b\x00h'
tRp1983
sa(dp1984
S'trial_loop.thisTrialN'
p1985
I75
sg895
g984
sS'block_loop.thisIndex'
p1986
g889
sg38
S'left'
p1987
sg59
g63
sS'trial_loop.thisN'
p1988
I75
sg33
g994
sg64
g65
sS'trial_loop.thisIndex'
p1989
g60
(g99
S'K\x00\x00\x00'
tRp1990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1991
I0
sg904
g992
sS'block_loop.thisRepN'
p1992
I0
sg907
g994
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1993
I0
sg909
g988
sg55
g11
sS'block_loop.thisTrial'
p1994
Nsg70
Vy
sS'block_loop.thisTrialN'
p1995
I0
sg39
F1.5999762800570352
sg34
g753
(S'\x07\xdf\x07\x07\t5\x10\n\xd5p'
tRp1996
sa(dp1997
S'trial_loop.thisTrialN'
p1998
I76
sg895
g1350
sS'block_loop.thisIndex'
p1999
g889
sg38
S'left'
p2000
sg59
g63
sS'trial_loop.thisN'
p2001
I76
sg33
g1354
sg64
g65
sS'trial_loop.thisIndex'
p2002
g60
(g99
S'L\x00\x00\x00'
tRp2003
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2004
I0
sg904
g1358
sS'block_loop.thisRepN'
p2005
I0
sg907
g1354
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2006
I0
sg909
g1361
sg55
g11
sS'block_loop.thisTrial'
p2007
Nsg70
Vy
sS'block_loop.thisTrialN'
p2008
I0
sg39
F2.4165127863889211
sg34
g753
(S'\x07\xdf\x07\x07\t5\x17\x050 '
tRp2009
sa(dp2010
S'trial_loop.thisTrialN'
p2011
I77
sg895
g1262
sS'block_loop.thisIndex'
p2012
g889
sg38
S'left'
p2013
sg59
g63
sS'trial_loop.thisN'
p2014
I77
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p2015
g60
(g99
S'M\x00\x00\x00'
tRp2016
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2017
I0
sg904
g1270
sS'block_loop.thisRepN'
p2018
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2019
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p2020
Nsg70
Vy
sS'block_loop.thisTrialN'
p2021
I0
sg39
F1.9000193009628674
sg34
g753
(S'\x07\xdf\x07\x07\t5\x1e\x0c)H'
tRp2022
sa(dp2023
S'trial_loop.thisTrialN'
p2024
I78
sg895
g1457
sS'block_loop.thisIndex'
p2025
g889
sg38
S'right'
p2026
sg59
g63
sS'trial_loop.thisN'
p2027
I78
sg33
g1354
sg64
g65
sS'trial_loop.thisIndex'
p2028
g60
(g99
S'N\x00\x00\x00'
tRp2029
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2030
I0
sg904
g1464
sS'block_loop.thisRepN'
p2031
I0
sg907
g1354
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2032
I0
sg909
g1361
sg55
g11
sS'block_loop.thisTrial'
p2033
Nsg70
Vy
sS'block_loop.thisTrialN'
p2034
I0
sg39
F1.0999727163639363
sg34
g753
(S'\x07\xdf\x07\x07\t5%\x0b\x0c '
tRp2035
sa(dp2036
S'trial_loop.thisTrialN'
p2037
I79
sg895
g1018
sS'block_loop.thisIndex'
p2038
g889
sg38
S'right'
p2039
sg59
g63
sS'trial_loop.thisN'
p2040
I79
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p2041
g60
(g99
S'O\x00\x00\x00'
tRp2042
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2043
I0
sg904
g1026
sS'block_loop.thisRepN'
p2044
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2045
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p2046
Nsg70
Vy
sS'block_loop.thisTrialN'
p2047
I0
sg39
F5.6830371333990115
sg34
g753
(S'\x07\xdf\x07\x07\t5+\r\x07\xf0'
tRp2048
sa(dp2049
S'trial_loop.thisTrialN'
p2050
I80
sg895
g1140
sS'block_loop.thisIndex'
p2051
g889
sg38
S'right'
p2052
sg59
g63
sS'trial_loop.thisN'
p2053
I80
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p2054
g60
(g99
S'P\x00\x00\x00'
tRp2055
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2056
I0
sg904
g1147
sS'block_loop.thisRepN'
p2057
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2058
I0
sg909
g954
sg55
g11
sS'block_loop.thisTrial'
p2059
Nsg70
Vy
sS'block_loop.thisTrialN'
p2060
I0
sg39
F1.7831572441191383
sg34
g753
(S'\x07\xdf\x07\x07\t56\x08\xba`'
tRp2061
sa(dp2062
S'trial_loop.thisTrialN'
p2063
I81
sg895
g1472
sS'block_loop.thisIndex'
p2064
g889
sg38
S'left'
p2065
sg59
g63
sS'trial_loop.thisN'
p2066
I81
sg33
g1476
sg64
g65
sS'trial_loop.thisIndex'
p2067
g60
(g99
S'Q\x00\x00\x00'
tRp2068
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2069
I0
sg904
g1480
sS'block_loop.thisRepN'
p2070
I0
sg907
g1476
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2071
I0
sg909
g1483
sg55
g11
sS'block_loop.thisTrial'
p2072
Nsg70
Vy
sS'block_loop.thisTrialN'
p2073
I0
sg39
F0.99989223391366977
sg34
g753
(S'\x07\xdf\x07\x07\t6\x01\x05\xef\x88'
tRp2074
sa(dp2075
S'trial_loop.thisTrialN'
p2076
I82
sg895
g1367
sS'block_loop.thisIndex'
p2077
g889
sg38
S'left'
p2078
sg59
g63
sS'trial_loop.thisN'
p2079
I82
sg33
g1378
sg64
g65
sS'trial_loop.thisIndex'
p2080
g60
(g99
S'R\x00\x00\x00'
tRp2081
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2082
I0
sg904
g1375
sS'block_loop.thisRepN'
p2083
I0
sg907
g1371
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2084
I0
sg909
g1378
sg55
g11
sS'block_loop.thisTrial'
p2085
Nsg70
Vy
sS'block_loop.thisTrialN'
p2086
I0
sg39
F2.3998230127349416
sg34
g753
(S'\x07\xdf\x07\x07\t6\x07\x06\x80\x10'
tRp2087
sa(dp2088
S'trial_loop.thisTrialN'
p2089
I83
sg895
g1168
sS'block_loop.thisIndex'
p2090
g889
sg38
S'right'
p2091
sg59
g63
sS'trial_loop.thisN'
p2092
I83
sg33
g1172
sg64
g65
sS'trial_loop.thisIndex'
p2093
g60
(g99
S'S\x00\x00\x00'
tRp2094
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2095
I0
sg904
g1176
sS'block_loop.thisRepN'
p2096
I0
sg907
g1172
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2097
I0
sg909
g1179
sg55
g11
sS'block_loop.thisTrial'
p2098
Nsg70
Vy
sS'block_loop.thisTrialN'
p2099
I0
sg39
F1.999848329212
sg34
g753
(S'\x07\xdf\x07\x07\t6\x0e\r\x00 '
tRp2100
sa(dp2101
S'trial_loop.thisTrialN'
p2102
I84
sg895
g1123
sS'block_loop.thisIndex'
p2103
g889
sg38
S'right'
p2104
sg59
g63
sS'trial_loop.thisN'
p2105
I84
sg33
g1127
sg64
g65
sS'trial_loop.thisIndex'
p2106
g60
(g99
S'T\x00\x00\x00'
tRp2107
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2108
I0
sg904
g1131
sS'block_loop.thisRepN'
p2109
I0
sg907
g1127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2110
I0
sg909
g1134
sg55
g11
sS'block_loop.thisTrial'
p2111
Nsg70
Vy
sS'block_loop.thisTrialN'
p2112
I0
sg39
F0.81639139273966066
sg34
g753
(S'\x07\xdf\x07\x07\t6\x15\r\x88\xd8'
tRp2113
sa(dp2114
S'trial_loop.thisTrialN'
p2115
I85
sg895
g1140
sS'block_loop.thisIndex'
p2116
g889
sg38
S'right'
p2117
sg59
g63
sS'trial_loop.thisN'
p2118
I85
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2119
g60
(g99
S'U\x00\x00\x00'
tRp2120
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2121
I0
sg904
g1147
sS'block_loop.thisRepN'
p2122
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2123
I0
sg909
g954
sg55
g11
sS'block_loop.thisTrial'
p2124
Nsg70
Vy
sS'block_loop.thisTrialN'
p2125
I0
sg39
F2.2165827488161085
sg34
g753
(S'\x07\xdf\x07\x07\t6\x1b\x0b>\xe8'
tRp2126
sa(dp2127
S'trial_loop.thisTrialN'
p2128
I86
sg895
S'2-steamed_puddings.png'
p2129
sS'block_loop.thisIndex'
p2130
g889
sg38
S'right'
p2131
sg59
g63
sS'trial_loop.thisN'
p2132
I86
sg33
g1599
sg64
g65
sS'trial_loop.thisIndex'
p2133
g60
(g99
S'V\x00\x00\x00'
tRp2134
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2135
I0
sg904
S'20-fruit_pastilles.png'
p2136
sS'block_loop.thisRepN'
p2137
I0
sg907
g1605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2138
I0
sg909
g1599
sg55
g11
sS'block_loop.thisTrial'
p2139
Nsg70
Vy
sS'block_loop.thisTrialN'
p2140
I0
sg39
F3.1998276883005019
sg34
g753
(S'\x07\xdf\x07\x07\t6"\x0f\x1f\x18'
tRp2141
sa(dp2142
S'trial_loop.thisTrialN'
p2143
I87
sg895
g1279
sS'block_loop.thisIndex'
p2144
g889
sg38
S'left'
p2145
sg59
g63
sS'trial_loop.thisN'
p2146
I87
sg33
g1134
sg64
g65
sS'trial_loop.thisIndex'
p2147
g60
(g99
S'W\x00\x00\x00'
tRp2148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2149
I0
sg904
g1286
sS'block_loop.thisRepN'
p2150
I0
sg907
g1127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2151
I0
sg909
g1134
sg55
g11
sS'block_loop.thisTrial'
p2152
Nsg70
Vy
sS'block_loop.thisTrialN'
p2153
I0
sg39
F0.84971620171882023
sg34
g753
(S'\x07\xdf\x07\x07\t6+\x03z\xa0'
tRp2154
sa(dp2155
S'trial_loop.thisTrialN'
p2156
I88
sg895
g1865
sS'block_loop.thisIndex'
p2157
g889
sg38
S'right'
p2158
sg59
g63
sS'trial_loop.thisN'
p2159
I88
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2160
g60
(g99
S'X\x00\x00\x00'
tRp2161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2162
I0
sg904
g1872
sS'block_loop.thisRepN'
p2163
I0
sg907
g994
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2164
I0
sg909
g988
sg55
g11
sS'block_loop.thisTrial'
p2165
Nsg70
Vy
sS'block_loop.thisTrialN'
p2166
I0
sg39
F4.0668349300103728
sg34
g753
(S'\x07\xdf\x07\x07\t61\x01\xa9\xc8'
tRp2167
sa(dp2168
S'trial_loop.thisTrialN'
p2169
I89
sg895
g1472
sS'block_loop.thisIndex'
p2170
g889
sg38
S'left'
p2171
sg59
g63
sS'trial_loop.thisN'
p2172
I89
sg33
g1476
sg64
g65
sS'trial_loop.thisIndex'
p2173
g60
(g99
S'Y\x00\x00\x00'
tRp2174
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2175
I0
sg904
g1480
sS'block_loop.thisRepN'
p2176
I0
sg907
g1476
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2177
I0
sg909
g1483
sg55
g11
sS'block_loop.thisTrial'
p2178
Nsg70
Vy
sS'block_loop.thisTrialN'
p2179
I0
sg39
F0.98313289696625361
sg34
g753
(S'\x07\xdf\x07\x07\t6:\x03\x1c\xe0'
tRp2180
sa(dp2181
S'trial_loop.thisTrialN'
p2182
I90
sg895
g1123
sS'block_loop.thisIndex'
p2183
g889
sg38
S'right'
p2184
sg59
g63
sS'trial_loop.thisN'
p2185
I90
sg33
g1127
sg64
g65
sS'trial_loop.thisIndex'
p2186
g60
(g99
S'Z\x00\x00\x00'
tRp2187
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2188
I0
sg904
g1131
sS'block_loop.thisRepN'
p2189
I0
sg907
g1127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2190
I0
sg909
g1134
sg55
g11
sS'block_loop.thisTrial'
p2191
Nsg70
Vy
sS'block_loop.thisTrialN'
p2192
I0
sg39
F0.81639794993543546
sg34
g753
(S'\x07\xdf\x07\x07\t7\x04\x03r\xd0'
tRp2193
sa(dp2194
S'trial_loop.thisTrialN'
p2195
I91
sg895
g916
sS'block_loop.thisIndex'
p2196
g889
sg38
S'right'
p2197
sg59
g63
sS'trial_loop.thisN'
p2198
I91
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p2199
g60
(g99
S'[\x00\x00\x00'
tRp2200
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2201
I0
sg904
g924
sS'block_loop.thisRepN'
p2202
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2203
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2204
Nsg70
Vy
sS'block_loop.thisTrialN'
p2205
I0
sg39
F3.316449409667257
sg34
g753
(S'\x07\xdf\x07\x07\t7\n\x01(\xe0'
tRp2206
sa(dp2207
S'trial_loop.thisTrialN'
p2208
I92
sg895
g1219
sS'block_loop.thisIndex'
p2209
g889
sg38
S'right'
p2210
sg59
g63
sS'trial_loop.thisN'
p2211
I92
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p2212
g60
(g99
S'\\\x00\x00\x00'
tRp2213
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2214
I0
sg904
g1226
sS'block_loop.thisRepN'
p2215
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2216
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2217
Nsg70
Vy
sS'block_loop.thisTrialN'
p2218
I0
sg39
F0.89994745690592026
sg34
g753
(S'\x07\xdf\x07\x07\t7\x12\x06pp'
tRp2219
sa(dp2220
S'trial_loop.thisTrialN'
p2221
I93
sg895
g1427
sS'block_loop.thisIndex'
p2222
g889
sg38
S'left'
p2223
sg59
g63
sS'trial_loop.thisN'
p2224
I93
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2225
g60
(g99
S']\x00\x00\x00'
tRp2226
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2227
I0
sg904
g1434
sS'block_loop.thisRepN'
p2228
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2229
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2230
Nsg70
Vy
sS'block_loop.thisTrialN'
p2231
I0
sg39
F1.066592598864645
sg34
g753
(S'\x07\xdf\x07\x07\t7\x18\x05W0'
tRp2232
sa(dp2233
S'trial_loop.thisTrialN'
p2234
I94
sg895
g1865
sS'block_loop.thisIndex'
p2235
g889
sg38
S'right'
p2236
sg59
g63
sS'trial_loop.thisN'
p2237
I94
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2238
g60
(g99
S'^\x00\x00\x00'
tRp2239
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2240
I0
sg904
g1872
sS'block_loop.thisRepN'
p2241
I0
sg907
g994
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2242
I0
sg909
g988
sg55
g11
sS'block_loop.thisTrial'
p2243
Nsg70
Vy
sS'block_loop.thisTrialN'
p2244
I0
sg39
F3.0498144456159935
sg34
g753
(S'\x07\xdf\x07\x07\t7\x1e\x06\xd9\xe8'
tRp2245
sa(dp2246
S'trial_loop.thisTrialN'
p2247
I95
sg895
g1262
sS'block_loop.thisIndex'
p2248
g889
sg38
S'left'
p2249
sg59
g63
sS'trial_loop.thisN'
p2250
I95
sg33
g1273
sg64
g65
sS'trial_loop.thisIndex'
p2251
g60
(g99
S'_\x00\x00\x00'
tRp2252
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2253
I0
sg904
g1270
sS'block_loop.thisRepN'
p2254
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2255
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p2256
Nsg70
Vy
sS'block_loop.thisTrialN'
p2257
I0
sg39
F0.88333066769064317
sg34
g753
(S'\x07\xdf\x07\x07\t7&\x08T\xd0'
tRp2258
sa(dp2259
S'trial_loop.thisTrialN'
p2260
I96
sg895
g1770
sS'block_loop.thisIndex'
p2261
g889
sg38
S'right'
p2262
sg59
g63
sS'trial_loop.thisN'
p2263
I96
sg33
g1774
sg64
g65
sS'trial_loop.thisIndex'
p2264
g60
(g99
S'`\x00\x00\x00'
tRp2265
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2266
I0
sg904
g1778
sS'block_loop.thisRepN'
p2267
I0
sg907
g1774
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2268
I0
sg909
g1781
sg55
g11
sS'block_loop.thisTrial'
p2269
Nsg70
Vy
sS'block_loop.thisTrialN'
p2270
I0
sg39
F2.4665923707880211
sg34
g753
(S'\x07\xdf\x07\x07\t7,\x06\xfd\x10'
tRp2271
sa(dp2272
S'trial_loop.thisTrialN'
p2273
I97
sg895
g1472
sS'block_loop.thisIndex'
p2274
g889
sg38
S'right'
p2275
sg59
g63
sS'trial_loop.thisN'
p2276
I97
sg33
g1483
sg64
g65
sS'trial_loop.thisIndex'
p2277
g60
(g99
S'a\x00\x00\x00'
tRp2278
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2279
I0
sg904
g1480
sS'block_loop.thisRepN'
p2280
I0
sg907
g1476
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2281
I0
sg909
g1483
sg55
g11
sS'block_loop.thisTrial'
p2282
Nsg70
Vy
sS'block_loop.thisTrialN'
p2283
I0
sg39
F1.0832116688434326
sg34
g753
(S'\x07\xdf\x07\x07\t73\x0e\xad\xd0'
tRp2284
sa(dp2285
S'trial_loop.thisTrialN'
p2286
I98
sg895
g1078
sS'block_loop.thisIndex'
p2287
g889
sg38
S'right'
p2288
sg59
g63
sS'trial_loop.thisN'
p2289
I98
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p2290
g60
(g99
S'b\x00\x00\x00'
tRp2291
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2292
I0
sg904
g1085
sS'block_loop.thisRepN'
p2293
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2294
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p2295
Nsg70
Vy
sS'block_loop.thisTrialN'
p2296
I0
sg39
F4.5336097618965141
sg34
g753
(S'\x07\xdf\x07\x07\t7:\x01,\xc8'
tRp2297
sa(dp2298
S'trial_loop.thisTrialN'
p2299
I99
sg895
g1541
sS'block_loop.thisIndex'
p2300
g889
sg38
S'left'
p2301
sg59
g63
sS'trial_loop.thisN'
p2302
I99
sg33
g1189
sg64
g65
sS'trial_loop.thisIndex'
p2303
g60
(g99
S'c\x00\x00\x00'
tRp2304
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2305
I0
sg904
g1548
sS'block_loop.thisRepN'
p2306
I0
sg907
g1189
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2307
I0
sg909
g1196
sg55
g11
sS'block_loop.thisTrial'
p2308
Nsg70
Vy
sS'block_loop.thisTrialN'
p2309
I0
sg39
F1.6998822840823777
sg34
g753
(S'\x07\xdf\x07\x07\t8\x07\t\xc4\x00'
tRp2310
sa(dp2311
S'trial_loop.thisTrialN'
p2312
I100
sg895
g1294
sS'block_loop.thisIndex'
p2313
g889
sg38
S'left'
p2314
sg59
g63
sS'trial_loop.thisN'
p2315
I100
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p2316
g60
(g99
S'd\x00\x00\x00'
tRp2317
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2318
I0
sg904
g1301
sS'block_loop.thisRepN'
p2319
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2320
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p2321
Nsg70
Vy
sS'block_loop.thisTrialN'
p2322
I0
sg39
F3.616492145477423
sg34
g753
(S'\x07\xdf\x07\x07\t8\x0e\x05\xc8x'
tRp2323
sa(dp2324
S'trial_loop.thisTrialN'
p2325
I101
sg895
g1427
sS'block_loop.thisIndex'
p2326
g889
sg38
S'left'
p2327
sg59
g63
sS'trial_loop.thisN'
p2328
I101
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2329
g60
(g99
S'e\x00\x00\x00'
tRp2330
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2331
I0
sg904
g1434
sS'block_loop.thisRepN'
p2332
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2333
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2334
Nsg70
Vy
sS'block_loop.thisTrialN'
p2335
I0
sg39
F0.91664008151428789
sg34
g753
(S'\x07\xdf\x07\x07\t8\x17\x00R\x08'
tRp2336
sa(dp2337
S'trial_loop.thisTrialN'
p2338
I102
sg895
g1018
sS'block_loop.thisIndex'
p2339
g889
sg38
S'left'
p2340
sg59
g63
sS'trial_loop.thisN'
p2341
I102
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p2342
g60
(g99
S'f\x00\x00\x00'
tRp2343
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2344
I0
sg904
g1026
sS'block_loop.thisRepN'
p2345
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2346
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p2347
Nsg70
Vy
sS'block_loop.thisTrialN'
p2348
I0
sg39
F1.3499276000065947
sg34
g753
(S'\x07\xdf\x07\x07\t8\x1c\x0e\xb9\x88'
tRp2349
sa(dp2350
S'trial_loop.thisTrialN'
p2351
I103
sg895
g1202
sS'block_loop.thisIndex'
p2352
g889
sg38
S'right'
p2353
sg59
g63
sS'trial_loop.thisN'
p2354
I103
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p2355
g60
(g99
S'g\x00\x00\x00'
tRp2356
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2357
I0
sg904
g1210
sS'block_loop.thisRepN'
p2358
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2359
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p2360
Nsg70
Vy
sS'block_loop.thisTrialN'
p2361
I0
sg39
F3.5502678899542843
sg34
g753
(S'\x07\xdf\x07\x07\t8#\x05\x82('
tRp2362
sa(dp2363
S'trial_loop.thisTrialN'
p2364
I104
sg895
g984
sS'block_loop.thisIndex'
p2365
g889
sg38
S'left'
p2366
sg59
g63
sS'trial_loop.thisN'
p2367
I104
sg33
g994
sg64
g65
sS'trial_loop.thisIndex'
p2368
g60
(g99
S'h\x00\x00\x00'
tRp2369
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2370
I0
sg904
g992
sS'block_loop.thisRepN'
p2371
I0
sg907
g994
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2372
I0
sg909
g988
sg55
g11
sS'block_loop.thisTrial'
p2373
Nsg70
Vy
sS'block_loop.thisTrialN'
p2374
I0
sg39
F0.98307616296824563
sg34
g753
(S'\x07\xdf\x07\x07\t8+\x0e[\xc8'
tRp2375
sa(dp2376
S'trial_loop.thisTrialN'
p2377
I105
sg895
S'26-walkers_smoky_bacon.png'
p2378
sS'block_loop.thisIndex'
p2379
g889
sg38
S'left'
p2380
sg59
g63
sS'trial_loop.thisN'
p2381
I105
sg33
g1781
sg64
g65
sS'trial_loop.thisIndex'
p2382
g60
(g99
S'i\x00\x00\x00'
tRp2383
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2384
I0
sg904
S'44-crunch.png'
p2385
sS'block_loop.thisRepN'
p2386
I0
sg907
g1774
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2387
I0
sg909
g1781
sg55
g11
sS'block_loop.thisTrial'
p2388
Nsg70
Vy
sS'block_loop.thisTrialN'
p2389
I0
sg39
F4.8331150927547242
sg34
g753
(S'\x07\xdf\x07\x07\t81\x0es8'
tRp2390
sa(dp2391
S'trial_loop.thisTrialN'
p2392
I106
sg895
g1106
sS'block_loop.thisIndex'
p2393
g889
sg38
S'left'
p2394
sg59
g63
sS'trial_loop.thisN'
p2395
I106
sg33
g1110
sg64
g65
sS'trial_loop.thisIndex'
p2396
g60
(g99
S'j\x00\x00\x00'
tRp2397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2398
I0
sg904
g1114
sS'block_loop.thisRepN'
p2399
I0
sg907
g1110
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2400
I0
sg909
g1117
sg55
g11
sS'block_loop.thisTrial'
p2401
Nsg70
Vy
sS'block_loop.thisTrialN'
p2402
I0
sg39
F1.0999042934522549
sg34
g753
(S'\x07\xdf\x07\x07\t8;\x0c\x8a\xf0'
tRp2403
sa(dp2404
S'trial_loop.thisTrialN'
p2405
I107
sg895
g1202
sS'block_loop.thisIndex'
p2406
g889
sg38
S'left'
p2407
sg59
g63
sS'trial_loop.thisN'
p2408
I107
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p2409
g60
(g99
S'k\x00\x00\x00'
tRp2410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2411
I0
sg904
g1210
sS'block_loop.thisRepN'
p2412
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2413
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p2414
Nsg70
Vy
sS'block_loop.thisTrialN'
p2415
I0
sg39
F3.8336342515972319
sg34
g753
(S'\x07\xdf\x07\x07\t9\x05\x0e\x8a\xa8'
tRp2416
sa(dp2417
S'trial_loop.thisTrialN'
p2418
I108
sg895
g2129
sS'block_loop.thisIndex'
p2419
g889
sg38
S'right'
p2420
sg59
g63
sS'trial_loop.thisN'
p2421
I108
sg33
g1605
sg64
g65
sS'trial_loop.thisIndex'
p2422
g60
(g99
S'l\x00\x00\x00'
tRp2423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2424
I0
sg904
g2136
sS'block_loop.thisRepN'
p2425
I0
sg907
g1605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2426
I0
sg909
g1599
sg55
g11
sS'block_loop.thisTrial'
p2427
Nsg70
Vy
sS'block_loop.thisTrialN'
p2428
I0
sg39
F3.1332764282783501
sg34
g753
(S'\x07\xdf\x07\x07\t9\x0e\x0ck\xb0'
tRp2429
sa(dp2430
S'trial_loop.thisTrialN'
p2431
I109
sg895
g1541
sS'block_loop.thisIndex'
p2432
g889
sg38
S'left'
p2433
sg59
g63
sS'trial_loop.thisN'
p2434
I109
sg33
g1189
sg64
g65
sS'trial_loop.thisIndex'
p2435
g60
(g99
S'm\x00\x00\x00'
tRp2436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2437
I0
sg904
g1548
sS'block_loop.thisRepN'
p2438
I0
sg907
g1189
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2439
I0
sg909
g1196
sg55
g11
sS'block_loop.thisTrial'
p2440
Nsg70
Vy
sS'block_loop.thisTrialN'
p2441
I0
sg39
F1.2165955781124467
sg34
g753
(S'\x07\xdf\x07\x07\t9\x16\x0f\x13`'
tRp2442
sa(dp2443
S'trial_loop.thisTrialN'
p2444
I110
sg895
g1350
sS'block_loop.thisIndex'
p2445
g889
sg38
S'left'
p2446
sg59
g63
sS'trial_loop.thisN'
p2447
I110
sg33
g1354
sg64
g65
sS'trial_loop.thisIndex'
p2448
g60
(g99
S'n\x00\x00\x00'
tRp2449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2450
I0
sg904
g1358
sS'block_loop.thisRepN'
p2451
I0
sg907
g1354
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2452
I0
sg909
g1361
sg55
g11
sS'block_loop.thisTrial'
p2453
Nsg70
Vy
sS'block_loop.thisTrialN'
p2454
I0
sg39
F0.94993495546941631
sg34
g753
(S'\x07\xdf\x07\x07\t9\x1d\x03\xb9 '
tRp2455
sa(dp2456
S'trial_loop.thisTrialN'
p2457
I111
sg895
g1035
sS'block_loop.thisIndex'
p2458
g889
sg38
S'right'
p2459
sg59
g63
sS'trial_loop.thisN'
p2460
I111
sg33
g1046
sg64
g65
sS'trial_loop.thisIndex'
p2461
g60
(g99
S'o\x00\x00\x00'
tRp2462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2463
I0
sg904
g1043
sS'block_loop.thisRepN'
p2464
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2465
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p2466
Nsg70
Vy
sS'block_loop.thisTrialN'
p2467
I0
sg39
F2.099843853213315
sg34
g753
(S'\x07\xdf\x07\x07\t9#\x03S\x90'
tRp2468
sa(dp2469
S'trial_loop.thisTrialN'
p2470
I112
sg895
g1367
sS'block_loop.thisIndex'
p2471
g889
sg38
S'left'
p2472
sg59
g63
sS'trial_loop.thisN'
p2473
I112
sg33
g1371
sg64
g65
sS'trial_loop.thisIndex'
p2474
g60
(g99
S'p\x00\x00\x00'
tRp2475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2476
I0
sg904
g1375
sS'block_loop.thisRepN'
p2477
I0
sg907
g1371
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2478
I0
sg909
g1378
sg55
g11
sS'block_loop.thisTrial'
p2479
Nsg70
Vy
sS'block_loop.thisTrialN'
p2480
I0
sg39
F2.0498497974540442
sg34
g753
(S'\x07\xdf\x07\x07\t9*\x05O`'
tRp2481
sa(dp2482
S'trial_loop.thisTrialN'
p2483
I113
sg895
g1106
sS'block_loop.thisIndex'
p2484
g889
sg38
S'left'
p2485
sg59
g63
sS'trial_loop.thisN'
p2486
I113
sg33
g1110
sg64
g65
sS'trial_loop.thisIndex'
p2487
g60
(g99
S'q\x00\x00\x00'
tRp2488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2489
I0
sg904
g1114
sS'block_loop.thisRepN'
p2490
I0
sg907
g1110
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2491
I0
sg909
g1117
sg55
g11
sS'block_loop.thisTrial'
p2492
Nsg70
Vy
sS'block_loop.thisTrialN'
p2493
I0
sg39
F1.0332874614728098
sg34
g753
(S'\x07\xdf\x07\x07\t91\x06\x8f\xb0'
tRp2494
sa(dp2495
S'trial_loop.thisTrialN'
p2496
I114
sg895
g2378
sS'block_loop.thisIndex'
p2497
g889
sg38
S'left'
p2498
sg59
g63
sS'trial_loop.thisN'
p2499
I114
sg33
g1774
sg64
g65
sS'trial_loop.thisIndex'
p2500
g60
(g99
S'r\x00\x00\x00'
tRp2501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2502
I0
sg904
g2385
sS'block_loop.thisRepN'
p2503
I0
sg907
g1774
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2504
I0
sg909
g1781
sg55
g11
sS'block_loop.thisTrial'
p2505
Nsg70
Vy
sS'block_loop.thisTrialN'
p2506
I0
sg39
F2.3664711196865937
sg34
g753
(S'\x07\xdf\x07\x07\t97\x07\x99P'
tRp2507
sa(dp2508
S'trial_loop.thisTrialN'
p2509
I115
sg895
g1625
sS'block_loop.thisIndex'
p2510
g889
sg38
S'right'
p2511
sg59
g63
sS'trial_loop.thisN'
p2512
I115
sg33
g1378
sg64
g65
sS'trial_loop.thisIndex'
p2513
g60
(g99
S's\x00\x00\x00'
tRp2514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2515
I0
sg904
g1632
sS'block_loop.thisRepN'
p2516
I0
sg907
g1371
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2517
I0
sg909
g1378
sg55
g11
sS'block_loop.thisTrial'
p2518
Nsg70
Vy
sS'block_loop.thisTrialN'
p2519
I0
sg39
F1.1332074351753363
sg34
g753
(S'\x07\xdf\x07\x07\t:\x02\r\xda\xe0'
tRp2520
sa(dp2521
S'trial_loop.thisTrialN'
p2522
I116
sg895
g1442
sS'block_loop.thisIndex'
p2523
g889
sg38
S'right'
p2524
sg59
g63
sS'trial_loop.thisN'
p2525
I116
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p2526
g60
(g99
S't\x00\x00\x00'
tRp2527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2528
I0
sg904
g1449
sS'block_loop.thisRepN'
p2529
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2530
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2531
Nsg70
Vy
sS'block_loop.thisTrialN'
p2532
I0
sg39
F1.4999716330012234
sg34
g753
(S'\x07\xdf\x07\x07\t:\t\x01\x11p'
tRp2533
sa(dp2534
S'trial_loop.thisTrialN'
p2535
I117
sg895
g1384
sS'block_loop.thisIndex'
p2536
g889
sg38
S'right'
p2537
sg59
g63
sS'trial_loop.thisN'
p2538
I117
sg33
g1110
sg64
g65
sS'trial_loop.thisIndex'
p2539
g60
(g99
S'u\x00\x00\x00'
tRp2540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2541
I0
sg904
g1391
sS'block_loop.thisRepN'
p2542
I0
sg907
g1110
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2543
I0
sg909
g1117
sg55
g11
sS'block_loop.thisTrial'
p2544
Nsg70
Vy
sS'block_loop.thisTrialN'
p2545
I0
sg39
F1.1166664813549687
sg34
g753
(S'\x07\xdf\x07\x07\t:\x0f\tC\x18'
tRp2546
sa(dp2547
S'trial_loop.thisTrialN'
p2548
I118
sg895
g1595
sS'block_loop.thisIndex'
p2549
g889
sg38
S'left'
p2550
sg59
g63
sS'trial_loop.thisN'
p2551
I118
sg33
g1605
sg64
g65
sS'trial_loop.thisIndex'
p2552
g60
(g99
S'v\x00\x00\x00'
tRp2553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2554
I0
sg904
g1603
sS'block_loop.thisRepN'
p2555
I0
sg907
g1605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2556
I0
sg909
g1599
sg55
g11
sS'block_loop.thisTrial'
p2557
Nsg70
Vy
sS'block_loop.thisTrialN'
p2558
I0
sg39
F1.6165309184607395
sg34
g753
(S'\x07\xdf\x07\x07\t:\x15\x0b}h'
tRp2559
sa(dp2560
S'trial_loop.thisTrialN'
p2561
I119
sg895
g1457
sS'block_loop.thisIndex'
p2562
g889
sg38
S'right'
p2563
sg59
g63
sS'trial_loop.thisN'
p2564
I119
sg33
g1354
sg64
g65
sS'trial_loop.thisIndex'
p2565
g60
(g99
S'w\x00\x00\x00'
tRp2566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2567
I0
sg904
g1464
sS'block_loop.thisRepN'
p2568
I0
sg907
g1354
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2569
I0
sg909
g1361
sg55
g11
sS'block_loop.thisTrial'
p2570
Nsg70
Vy
sS'block_loop.thisTrialN'
p2571
I0
sg39
F0.833294987993213
sg34
g753
(S'\x07\xdf\x07\x07\t:\x1c\x06\x16\x98'
tRp2572
sa(dp2573
S'trial_loop.thisTrialN'
p2574
I120
sg895
g1247
sS'block_loop.thisIndex'
p2575
g889
sg38
S'left'
p2576
sg59
g63
sS'trial_loop.thisN'
p2577
I120
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2578
g60
(g99
S'x\x00\x00\x00'
tRp2579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2580
I0
sg904
g1254
sS'block_loop.thisRepN'
p2581
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2582
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2583
Nsg70
Vy
sS'block_loop.thisTrialN'
p2584
I0
sg39
F2.6832883025044794
sg34
g753
(S'\x07\xdf\x07\x07\t:"\x04\x07@'
tRp2585
sa(dp2586
S'trial_loop.thisTrialN'
p2587
I121
sg895
g2129
sS'block_loop.thisIndex'
p2588
g889
sg38
S'right'
p2589
sg59
g63
sS'trial_loop.thisN'
p2590
I121
sg33
g1605
sg64
g65
sS'trial_loop.thisIndex'
p2591
g60
(g99
S'y\x00\x00\x00'
tRp2592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2593
I0
sg904
g2136
sS'block_loop.thisRepN'
p2594
I0
sg907
g1605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2595
I0
sg909
g1599
sg55
g11
sS'block_loop.thisTrial'
p2596
Nsg70
Vy
sS'block_loop.thisTrialN'
p2597
I0
sg39
F1.6498762543133125
sg34
g753
(S'\x07\xdf\x07\x07\t:)\x0f\x0b\x90'
tRp2598
sa(dp2599
S'trial_loop.thisTrialN'
p2600
I122
sg895
g1906
sS'block_loop.thisIndex'
p2601
g889
sg38
S'right'
p2602
sg59
g63
sS'trial_loop.thisN'
p2603
I122
sg33
g1476
sg64
g65
sS'trial_loop.thisIndex'
p2604
g60
(g99
S'z\x00\x00\x00'
tRp2605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2606
I0
sg904
g1913
sS'block_loop.thisRepN'
p2607
I0
sg907
g1476
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2608
I0
sg909
g1483
sg55
g11
sS'block_loop.thisTrial'
p2609
Nsg70
Vy
sS'block_loop.thisTrialN'
p2610
I0
sg39
F3.1003105544909886
sg34
g753
(S'\x07\xdf\x07\x07\t:0\n\x1d\xd8'
tRp2611
sa(dp2612
S'trial_loop.thisTrialN'
p2613
I123
sg895
g1309
sS'block_loop.thisIndex'
p2614
g889
sg38
S'left'
p2615
sg59
g63
sS'trial_loop.thisN'
p2616
I123
sg33
g1213
sg64
g65
sS'trial_loop.thisIndex'
p2617
g60
(g99
S'{\x00\x00\x00'
tRp2618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2619
I0
sg904
g1316
sS'block_loop.thisRepN'
p2620
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2621
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p2622
Nsg70
Vy
sS'block_loop.thisTrialN'
p2623
I0
sg39
F2.4499479273135876
sg34
g753
(S'\x07\xdf\x07\x07\t:8\x0cLp'
tRp2624
sa(dp2625
S'trial_loop.thisTrialN'
p2626
I124
sg895
S'7-olives.png'
p2627
sS'block_loop.thisIndex'
p2628
g889
sg38
S'right'
p2629
sg59
g63
sS'trial_loop.thisN'
p2630
I124
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p2631
g60
(g99
S'|\x00\x00\x00'
tRp2632
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2633
I0
sg904
S'22-daim.png'
p2634
sS'block_loop.thisRepN'
p2635
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2636
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p2637
Nsg70
Vy
sS'block_loop.thisTrialN'
p2638
I0
sg39
F1.0665920286737673
sg34
g753
(S'\x07\xdf\x07\x07\t;\x04\x04\x80X'
tRp2639
sa(dp2640
S'trial_loop.thisTrialN'
p2641
I125
sg895
g933
sS'block_loop.thisIndex'
p2642
g889
sg38
S'left'
p2643
sg59
g63
sS'trial_loop.thisN'
p2644
I125
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p2645
g60
(g99
S'}\x00\x00\x00'
tRp2646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2647
I0
sg904
g941
sS'block_loop.thisRepN'
p2648
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2649
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2650
Nsg70
Vy
sS'block_loop.thisTrialN'
p2651
I0
sg39
F2.4331700591601475
sg34
g753
(S'\x07\xdf\x07\x07\t;\n\x06\x03\x10'
tRp2652
sa(dp2653
S'trial_loop.thisTrialN'
p2654
I126
sg895
g1442
sS'block_loop.thisIndex'
p2655
g889
sg38
S'right'
p2656
sg59
g63
sS'trial_loop.thisN'
p2657
I126
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2658
g60
(g99
S'~\x00\x00\x00'
tRp2659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2660
I0
sg904
g1449
sS'block_loop.thisRepN'
p2661
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2662
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2663
Nsg70
Vy
sS'block_loop.thisTrialN'
p2664
I0
sg39
F1.2332214903822205
sg34
g753
(S'\x07\xdf\x07\x07\t;\x11\x0c\xfc8'
tRp2665
sa(dp2666
S'trial_loop.thisTrialN'
p2667
I127
sg895
g1309
sS'block_loop.thisIndex'
p2668
g889
sg38
S'right'
p2669
sg59
g63
sS'trial_loop.thisN'
p2670
I127
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p2671
g60
(g99
S'\x7f\x00\x00\x00'
tRp2672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2673
I0
sg904
g1316
sS'block_loop.thisRepN'
p2674
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2675
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p2676
Nsg70
Vy
sS'block_loop.thisTrialN'
p2677
I0
sg39
F5.0664192608219309
sg34
g753
(S'\x07\xdf\x07\x07\t;\x18\x01\xdc\x90'
tRp2678
sa(dp2679
S'trial_loop.thisTrialN'
p2680
I128
sg895
g1865
sS'block_loop.thisIndex'
p2681
g889
sg38
S'right'
p2682
sg59
g63
sS'trial_loop.thisN'
p2683
I128
sg33
g994
sg64
g65
sS'trial_loop.thisIndex'
p2684
g60
(g99
S'\x80\x00\x00\x00'
tRp2685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2686
I0
sg904
g1872
sS'block_loop.thisRepN'
p2687
I0
sg907
g994
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2688
I0
sg909
g988
sg55
g11
sS'block_loop.thisTrial'
p2689
Nsg70
Vy
sS'block_loop.thisTrialN'
p2690
I0
sg39
F1.1165518729776522
sg34
g753
(S'\x07\xdf\x07\x07\t;"\x03G\xd8'
tRp2691
sa(dp2692
S'trial_loop.thisTrialN'
p2693
I129
sg895
g1367
sS'block_loop.thisIndex'
p2694
g889
sg38
S'left'
p2695
sg59
g63
sS'trial_loop.thisN'
p2696
I129
sg33
g1371
sg64
g65
sS'trial_loop.thisIndex'
p2697
g60
(g99
S'\x81\x00\x00\x00'
tRp2698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2699
I0
sg904
g1375
sS'block_loop.thisRepN'
p2700
I0
sg907
g1371
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2701
I0
sg909
g1378
sg55
g11
sS'block_loop.thisTrial'
p2702
Nsg70
Vy
sS'block_loop.thisTrialN'
p2703
I0
sg39
F1.2164846759760621
sg34
g753
(S'\x07\xdf\x07\x07\t;(\x05\xc0\xa8'
tRp2704
sa(dp2705
S'trial_loop.thisTrialN'
p2706
I130
sg895
S'1-treacle_cookies.png'
p2707
sS'block_loop.thisIndex'
p2708
g889
sg38
S'right'
p2709
sg59
g63
sS'trial_loop.thisN'
p2710
I130
sg33
g1179
sg64
g65
sS'trial_loop.thisIndex'
p2711
g60
(g99
S'\x82\x00\x00\x00'
tRp2712
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2713
I0
sg904
S'21-nakd_banana_crunch.png'
p2714
sS'block_loop.thisRepN'
p2715
I0
sg907
g1172
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2716
I0
sg909
g1179
sg55
g11
sS'block_loop.thisTrial'
p2717
Nsg70
Vy
sS'block_loop.thisTrialN'
p2718
I0
sg39
F3.3165617372806082
sg34
g753
(S'\x07\xdf\x07\x07\t;.\tj('
tRp2719
sa(dp2720
S'trial_loop.thisTrialN'
p2721
I131
sg895
g1625
sS'block_loop.thisIndex'
p2722
g889
sg38
S'right'
p2723
sg59
g63
sS'trial_loop.thisN'
p2724
I131
sg33
g1371
sg64
g65
sS'trial_loop.thisIndex'
p2725
g60
(g99
S'\x83\x00\x00\x00'
tRp2726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2727
I0
sg904
g1632
sS'block_loop.thisRepN'
p2728
I0
sg907
g1371
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2729
I0
sg909
g1378
sg55
g11
sS'block_loop.thisTrial'
p2730
Nsg70
Vy
sS'block_loop.thisTrialN'
p2731
I0
sg39
F0.98311579123810588
sg34
g753
(S'\x07\xdf\x07\x07\t;6\x0e\xb1\xb8'
tRp2732
sa(dp2733
S'trial_loop.thisTrialN'
p2734
I132
sg895
g896
sS'block_loop.thisIndex'
p2735
g889
sg38
S'left'
p2736
sg59
g63
sS'trial_loop.thisN'
p2737
I132
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p2738
g60
(g99
S'\x84\x00\x00\x00'
tRp2739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2740
I0
sg904
g905
sS'block_loop.thisRepN'
p2741
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2742
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2743
Nsg70
Vy
sS'block_loop.thisTrialN'
p2744
I0
sg39
F0.91701042052409321
sg34
g753
(S'\x07\xdf\x07\x07\n\x00\x00\x0f\x07\xa8'
tRp2745
sa(dp2746
S'trial_loop.thisTrialN'
p2747
I133
sg895
g1770
sS'block_loop.thisIndex'
p2748
g889
sg38
S'right'
p2749
sg59
g63
sS'trial_loop.thisN'
p2750
I133
sg33
g1774
sg64
g65
sS'trial_loop.thisIndex'
p2751
g60
(g99
S'\x85\x00\x00\x00'
tRp2752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2753
I0
sg904
g1778
sS'block_loop.thisRepN'
p2754
I0
sg907
g1774
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2755
I0
sg909
g1781
sg55
g11
sS'block_loop.thisTrial'
p2756
Nsg70
Vy
sS'block_loop.thisTrialN'
p2757
I0
sg39
F1.6665797125497193
sg34
g753
(S'\x07\xdf\x07\x07\n\x00\x06\x0e,\xe8'
tRp2758
sa(dp2759
S'trial_loop.thisTrialN'
p2760
I134
sg895
g2627
sS'block_loop.thisIndex'
p2761
g889
sg38
S'right'
p2762
sg59
g63
sS'trial_loop.thisN'
p2763
I134
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p2764
g60
(g99
S'\x86\x00\x00\x00'
tRp2765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2766
I0
sg904
g2634
sS'block_loop.thisRepN'
p2767
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2768
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p2769
Nsg70
Vy
sS'block_loop.thisTrialN'
p2770
I0
sg39
F1.2666506443015351
sg34
g753
(S'\x07\xdf\x07\x07\n\x00\r\t\xb8H'
tRp2771
sa(dp2772
S'trial_loop.thisTrialN'
p2773
I135
sg895
g1625
sS'block_loop.thisIndex'
p2774
g889
sg38
S'right'
p2775
sg59
g63
sS'trial_loop.thisN'
p2776
I135
sg33
g1378
sg64
g65
sS'trial_loop.thisIndex'
p2777
g60
(g99
S'\x87\x00\x00\x00'
tRp2778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2779
I0
sg904
g1632
sS'block_loop.thisRepN'
p2780
I0
sg907
g1371
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2781
I0
sg909
g1378
sg55
g11
sS'block_loop.thisTrial'
p2782
Nsg70
Vy
sS'block_loop.thisTrialN'
p2783
I0
sg39
F1.1665445032599564
sg34
g753
(S'\x07\xdf\x07\x07\n\x00\x13\x0eS\xf8'
tRp2784
sa(dp2785
S'trial_loop.thisTrialN'
p2786
I136
sg895
g1309
sS'block_loop.thisIndex'
p2787
g889
sg38
S'left'
p2788
sg59
g63
sS'trial_loop.thisN'
p2789
I136
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p2790
g60
(g99
S'\x88\x00\x00\x00'
tRp2791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2792
I0
sg904
g1316
sS'block_loop.thisRepN'
p2793
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2794
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p2795
Nsg70
Vy
sS'block_loop.thisTrialN'
p2796
I0
sg39
F1.3498534751856823
sg34
g753
(S'\x07\xdf\x07\x07\n\x00\x1a\x02\x03\xa0'
tRp2797
sa(dp2798
S'trial_loop.thisTrialN'
p2799
I137
sg895
g1279
sS'block_loop.thisIndex'
p2800
g889
sg38
S'left'
p2801
sg59
g63
sS'trial_loop.thisN'
p2802
I137
sg33
g1127
sg64
g65
sS'trial_loop.thisIndex'
p2803
g60
(g99
S'\x89\x00\x00\x00'
tRp2804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2805
I0
sg904
g1286
sS'block_loop.thisRepN'
p2806
I0
sg907
g1127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2807
I0
sg909
g1134
sg55
g11
sS'block_loop.thisTrial'
p2808
Nsg70
Vy
sS'block_loop.thisTrialN'
p2809
I0
sg39
F1.0834038231873819
sg34
g753
(S'\x07\xdf\x07\x07\n\x00 \x07\xd3\xe8'
tRp2810
sa(dp2811
S'trial_loop.thisTrialN'
p2812
I138
sg895
g2707
sS'block_loop.thisIndex'
p2813
g889
sg38
S'right'
p2814
sg59
g63
sS'trial_loop.thisN'
p2815
I138
sg33
g1172
sg64
g65
sS'trial_loop.thisIndex'
p2816
g60
(g99
S'\x8a\x00\x00\x00'
tRp2817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2818
I0
sg904
g2714
sS'block_loop.thisRepN'
p2819
I0
sg907
g1172
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2820
I0
sg909
g1179
sg55
g11
sS'block_loop.thisTrial'
p2821
Nsg70
Vy
sS'block_loop.thisTrialN'
p2822
I0
sg39
F1.2166186708450368
sg34
g753
(S'\x07\xdf\x07\x07\n\x00&\t\x95 '
tRp2823
sa(dp2824
S'trial_loop.thisTrialN'
p2825
I139
sg895
g1001
sS'block_loop.thisIndex'
p2826
g889
sg38
S'left'
p2827
sg59
g63
sS'trial_loop.thisN'
p2828
I139
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2829
g60
(g99
S'\x8b\x00\x00\x00'
tRp2830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2831
I0
sg904
g1009
sS'block_loop.thisRepN'
p2832
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2833
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2834
Nsg70
Vy
sS'block_loop.thisTrialN'
p2835
I0
sg39
F1.1332017332661053
sg34
g753
(S'\x07\xdf\x07\x07\n\x00,\ry8'
tRp2836
sa(dp2837
S'trial_loop.thisTrialN'
p2838
I140
sg895
g2707
sS'block_loop.thisIndex'
p2839
g889
sg38
S'right'
p2840
sg59
g63
sS'trial_loop.thisN'
p2841
I140
sg33
g1172
sg64
g65
sS'trial_loop.thisIndex'
p2842
g60
(g99
S'\x8c\x00\x00\x00'
tRp2843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2844
I0
sg904
g2714
sS'block_loop.thisRepN'
p2845
I0
sg907
g1172
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2846
I0
sg909
g1179
sg55
g11
sS'block_loop.thisTrial'
p2847
Nsg70
Vy
sS'block_loop.thisTrialN'
p2848
I0
sg39
F1.1332211197582183
sg34
g753
(S'\x07\xdf\x07\x07\n\x003\x00\xaf\xc8'
tRp2849
sa(dp2850
S'trial_loop.thisTrialN'
p2851
I141
sg895
g1906
sS'block_loop.thisIndex'
p2852
g889
sg38
S'left'
p2853
sg59
g63
sS'trial_loop.thisN'
p2854
I141
sg33
g1483
sg64
g65
sS'trial_loop.thisIndex'
p2855
g60
(g99
S'\x8d\x00\x00\x00'
tRp2856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2857
I0
sg904
g1913
sS'block_loop.thisRepN'
p2858
I0
sg907
g1476
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2859
I0
sg909
g1483
sg55
g11
sS'block_loop.thisTrial'
p2860
Nsg70
Vy
sS'block_loop.thisTrialN'
p2861
I0
sg39
F4.1330517730511929
sg34
g753
(S'\x07\xdf\x07\x07\n\x009\x03g\x18'
tRp2862
sa(dp2863
S'trial_loop.thisTrialN'
p2864
I142
sg895
g2627
sS'block_loop.thisIndex'
p2865
g889
sg38
S'right'
p2866
sg59
g63
sS'trial_loop.thisN'
p2867
I142
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p2868
g60
(g99
S'\x8e\x00\x00\x00'
tRp2869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2870
I0
sg904
g2634
sS'block_loop.thisRepN'
p2871
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2872
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vy
sS'block_loop.thisTrialN'
p2874
I0
sg39
F0.64986228463521911
sg34
g753
(S'\x07\xdf\x07\x07\n\x01\x06\x05\xcc`'
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g2707
sS'block_loop.thisIndex'
p2878
g889
sg38
S'right'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g1179
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g2714
sS'block_loop.thisRepN'
p2884
I0
sg907
g1172
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2885
I0
sg909
g1179
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vy
sS'block_loop.thisTrialN'
p2887
I0
sg39
F0.91671563181262172
sg34
g753
(S'\x07\xdf\x07\x07\n\x01\x0c\x01!\x10'
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g1412
sS'block_loop.thisIndex'
p2891
g889
sg38
S'right'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g1419
sS'block_loop.thisRepN'
p2897
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2898
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vy
sS'block_loop.thisTrialN'
p2900
I0
sg39
F1.8999648477292794
sg34
g753
(S'\x07\xdf\x07\x07\n\x01\x12\x00FP'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g1350
sS'block_loop.thisIndex'
p2904
g889
sg38
S'left'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g1361
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g1358
sS'block_loop.thisRepN'
p2910
I0
sg907
g1354
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2911
I0
sg909
g1361
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vy
sS'block_loop.thisTrialN'
p2913
I0
sg39
F0.76657096011877002
sg34
g753
(S'\x07\xdf\x07\x07\n\x01\x18\x0eg\x80'
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g1185
sS'block_loop.thisIndex'
p2917
g889
sg38
S'right'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g1189
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g1193
sS'block_loop.thisRepN'
p2923
I0
sg907
g1189
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2924
I0
sg909
g1196
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vy
sS'block_loop.thisTrialN'
p2926
I0
sg39
F0.84994513337778699
sg34
g753
(S'\x07\xdf\x07\x07\n\x01\x1e\x0bi\xe0'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g916
sS'block_loop.thisIndex'
p2930
g889
sg38
S'right'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g924
sS'block_loop.thisRepN'
p2936
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2937
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vy
sS'block_loop.thisTrialN'
p2939
I0
sg39
F1.5166043875619835
sg34
g753
(S'\x07\xdf\x07\x07\n\x01$\t\x99\x08'
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g1018
sS'block_loop.thisIndex'
p2943
g889
sg38
S'left'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g1026
sS'block_loop.thisRepN'
p2949
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2950
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vy
sS'block_loop.thisTrialN'
p2952
I0
sg39
F2.0332452673442276
sg34
g753
(S'\x07\xdf\x07\x07\n\x01+\x02\xc3\x08'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g1770
sS'block_loop.thisIndex'
p2956
g889
sg38
S'right'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g1774
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g1778
sS'block_loop.thisRepN'
p2962
I0
sg907
g1774
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2963
I0
sg909
g1781
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vy
sS'block_loop.thisTrialN'
p2965
I0
sg39
F1.0166701020666551
sg34
g753
(S'\x07\xdf\x07\x07\n\x012\x03\xc8\xc0'
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g1309
sS'block_loop.thisIndex'
p2969
g889
sg38
S'left'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g1316
sS'block_loop.thisRepN'
p2975
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2976
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vy
sS'block_loop.thisTrialN'
p2978
I0
sg39
F3.5331393543783634
sg34
g753
(S'\x07\xdf\x07\x07\n\x018\x04\x93\xe0'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g967
sS'block_loop.thisIndex'
p2982
g889
sg38
S'right'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g975
sS'block_loop.thisRepN'
p2988
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2989
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vy
sS'block_loop.thisTrialN'
p2991
I0
sg39
F0.84998789769770156
sg34
g753
(S'\x07\xdf\x07\x07\n\x02\x04\r2\xe8'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g1078
sS'block_loop.thisIndex'
p2995
g889
sg38
S'right'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g1029
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g1085
sS'block_loop.thisRepN'
p3001
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3002
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vy
sS'block_loop.thisTrialN'
p3004
I0
sg39
F0.91669082850739869
sg34
g753
(S'\x07\xdf\x07\x07\n\x02\n\x0bb\x10'
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g1412
sS'block_loop.thisIndex'
p3008
g889
sg38
S'right'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g1419
sS'block_loop.thisRepN'
p3014
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3015
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vy
sS'block_loop.thisTrialN'
p3017
I0
sg39
F0.73326268667688055
sg34
g753
(S'\x07\xdf\x07\x07\n\x02\x10\n\xc1\xe8'
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g1294
sS'block_loop.thisIndex'
p3021
g889
sg38
S'left'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g1046
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g1301
sS'block_loop.thisRepN'
p3027
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3028
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vy
sS'block_loop.thisTrialN'
p3030
I0
sg39
F2.1166131685022265
sg34
g753
(S'\x07\xdf\x07\x07\n\x02\x16\x07\x0c\xb0'
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g1018
sS'block_loop.thisIndex'
p3034
g889
sg38
S'left'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g1029
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g1026
sS'block_loop.thisRepN'
p3040
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3041
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vy
sS'block_loop.thisTrialN'
p3043
I0
sg39
F1.7998832248972576
sg34
g753
(S'\x07\xdf\x07\x07\n\x02\x1d\t}\xb0'
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g1541
sS'block_loop.thisIndex'
p3047
g889
sg38
S'left'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g1189
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g1548
sS'block_loop.thisRepN'
p3053
I0
sg907
g1189
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3054
I0
sg909
g1196
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vy
sS'block_loop.thisTrialN'
p3056
I0
sg39
F0.88318726467150555
sg34
g753
(S'\x07\xdf\x07\x07\n\x02$\x06\xf1X'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g896
sS'block_loop.thisIndex'
p3060
g889
sg38
S'left'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g905
sS'block_loop.thisRepN'
p3066
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3067
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vy
sS'block_loop.thisTrialN'
p3069
I0
sg39
F1.3170270130804056
sg34
g753
(S'\x07\xdf\x07\x07\n\x02*\x05\x99\x98'
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g916
sS'block_loop.thisIndex'
p3073
g889
sg38
S'right'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g924
sS'block_loop.thisRepN'
p3079
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3080
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vy
sS'block_loop.thisTrialN'
p3082
I0
sg39
F0.9166762886388824
sg34
g753
(S'\x07\xdf\x07\x07\n\x020\n\xec\xe0'
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g1427
sS'block_loop.thisIndex'
p3086
g889
sg38
S'left'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g1434
sS'block_loop.thisRepN'
p3092
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3093
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vy
sS'block_loop.thisTrialN'
p3095
I0
sg39
F1.0832091029842559
sg34
g753
(S'\x07\xdf\x07\x07\n\x026\nP\xa0'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g2129
sS'block_loop.thisIndex'
p3099
g889
sg38
S'right'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g1605
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g2136
sS'block_loop.thisRepN'
p3105
I0
sg907
g1605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3106
I0
sg909
g1599
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vy
sS'block_loop.thisTrialN'
p3108
I0
sg39
F4.4331147506400157
sg34
g753
(S'\x07\xdf\x07\x07\n\x03\x00\x0c\x11\xd8'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g1078
sS'block_loop.thisIndex'
p3112
g889
sg38
S'right'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g1085
sS'block_loop.thisRepN'
p3118
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3119
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vy
sS'block_loop.thisTrialN'
p3121
I0
sg39
F2.9998286576251303
sg34
g753
(S'\x07\xdf\x07\x07\n\x03\n\x03\xbd\x08'
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g1457
sS'block_loop.thisIndex'
p3125
g889
sg38
S'right'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g1354
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g1464
sS'block_loop.thisRepN'
p3131
I0
sg907
g1354
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3132
I0
sg909
g1361
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vy
sS'block_loop.thisTrialN'
p3134
I0
sg39
F0.78321283773448158
sg34
g753
(S'\x07\xdf\x07\x07\n\x03\x12\x04A\xd8'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g1595
sS'block_loop.thisIndex'
p3138
g889
sg38
S'right'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g1605
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g1603
sS'block_loop.thisRepN'
p3144
I0
sg907
g1605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3145
I0
sg909
g1599
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vy
sS'block_loop.thisTrialN'
p3147
I0
sg39
F1.3333022579276985
sg34
g753
(S'\x07\xdf\x07\x07\n\x03\x18\x01z\xe8'
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g2378
sS'block_loop.thisIndex'
p3151
g889
sg38
S'left'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g1774
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g2385
sS'block_loop.thisRepN'
p3157
I0
sg907
g1774
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3158
I0
sg909
g1781
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vy
sS'block_loop.thisTrialN'
p3160
I0
sg39
F1.2665528565567001
sg34
g753
(S'\x07\xdf\x07\x07\n\x03\x1e\x07\x0c\xb0'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g1035
sS'block_loop.thisIndex'
p3164
g889
sg38
S'right'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g1043
sS'block_loop.thisRepN'
p3170
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3171
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vy
sS'block_loop.thisTrialN'
p3173
I0
sg39
F1.2666942639075387
sg34
g753
(S'\x07\xdf\x07\x07\n\x03$\x0b\xacH'
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g967
sS'block_loop.thisIndex'
p3177
g889
sg38
S'right'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g975
sS'block_loop.thisRepN'
p3183
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3184
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vy
sS'block_loop.thisTrialN'
p3186
I0
sg39
F0.69998947997737559
sg34
g753
(S'\x07\xdf\x07\x07\n\x03+\x01\x05\xb8'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g1865
sS'block_loop.thisIndex'
p3190
g889
sg38
S'right'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g994
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g1872
sS'block_loop.thisRepN'
p3196
I0
sg907
g994
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3197
I0
sg909
g988
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vy
sS'block_loop.thisTrialN'
p3199
I0
sg39
F0.8666733949198715
sg34
g753
(S'\x07\xdf\x07\x07\n\x030\x0cT@'
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g1279
sS'block_loop.thisIndex'
p3203
g889
sg38
S'left'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g1134
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1286
sS'block_loop.thisRepN'
p3209
I0
sg907
g1127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3210
I0
sg909
g1134
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vy
sS'block_loop.thisTrialN'
p3212
I0
sg39
F0.68302686996275952
sg34
g753
(S'\x07\xdf\x07\x07\n\x036\n\xc1\xe8'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g1168
sS'block_loop.thisIndex'
p3216
g889
sg38
S'left'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g1172
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g1176
sS'block_loop.thisRepN'
p3222
I0
sg907
g1172
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3223
I0
sg909
g1179
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vy
sS'block_loop.thisTrialN'
p3225
I0
sg39
F1.2333306819450627
sg34
g753
(S'\x07\xdf\x07\x07\n\x04\x00\x06Q0'
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g1384
sS'block_loop.thisIndex'
p3229
g889
sg38
S'right'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g1110
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g1391
sS'block_loop.thisRepN'
p3235
I0
sg907
g1110
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3236
I0
sg909
g1117
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vy
sS'block_loop.thisTrialN'
p3238
I0
sg39
F0.7665358933763855
sg34
g753
(S'\x07\xdf\x07\x07\n\x04\x06\ns\xc8'
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g933
sS'block_loop.thisIndex'
p3242
g889
sg38
S'left'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g941
sS'block_loop.thisRepN'
p3248
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3249
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vy
sS'block_loop.thisTrialN'
p3251
I0
sg39
F1.3665321301164113
sg34
g753
(S'\x07\xdf\x07\x07\n\x04\x0c\x07v('
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g1906
sS'block_loop.thisIndex'
p3255
g889
sg38
S'right'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g1476
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g1913
sS'block_loop.thisRepN'
p3261
I0
sg907
g1476
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3262
I0
sg909
g1483
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vy
sS'block_loop.thisTrialN'
p3264
I0
sg39
F3.2169194465614055
sg34
g753
(S'\x07\xdf\x07\x07\n\x04\x12\r\x81\x08'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g1247
sS'block_loop.thisIndex'
p3268
g889
sg38
S'left'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g1254
sS'block_loop.thisRepN'
p3274
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3275
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vy
sS'block_loop.thisTrialN'
p3277
I0
sg39
F0.88326652121077132
sg34
g753
(S'\x07\xdf\x07\x07\n\x04\x1b\x02\x17('
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g1595
sS'block_loop.thisIndex'
p3281
g889
sg38
S'right'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g1605
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g1603
sS'block_loop.thisRepN'
p3287
I0
sg907
g1605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3288
I0
sg909
g1599
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vy
sS'block_loop.thisTrialN'
p3290
I0
sg39
F0.88332952730888792
sg34
g753
(S'\x07\xdf\x07\x07\n\x04!\x00\xbfh'
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g950
sS'block_loop.thisIndex'
p3294
g889
sg38
S'right'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g958
sS'block_loop.thisRepN'
p3300
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3301
I0
sg909
g954
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vy
sS'block_loop.thisTrialN'
p3303
I0
sg39
F3.9331605084621515
sg34
g753
(S'\x07\xdf\x07\x07\n\x04&\x0e\xad\xd0'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g1384
sS'block_loop.thisIndex'
p3307
g889
sg38
S'right'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g1110
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g1391
sS'block_loop.thisRepN'
p3313
I0
sg907
g1110
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3314
I0
sg909
g1117
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vy
sS'block_loop.thisTrialN'
p3316
I0
sg39
F0.76663111526204375
sg34
g753
(S'\x07\xdf\x07\x07\n\x04/\x0e8\xa0'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g933
sS'block_loop.thisIndex'
p3320
g889
sg38
S'left'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g941
sS'block_loop.thisRepN'
p3326
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3327
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vy
sS'block_loop.thisTrialN'
p3329
I0
sg39
F0.71705073302337041
sg34
g753
(S'\x07\xdf\x07\x07\n\x045\x0b7\x18'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g1770
sS'block_loop.thisIndex'
p3333
g889
sg38
S'right'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g1774
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g1778
sS'block_loop.thisRepN'
p3339
I0
sg907
g1774
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3340
I0
sg909
g1781
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vy
sS'block_loop.thisTrialN'
p3342
I0
sg39
F1.3832398647850823
sg34
g753
(S'\x07\xdf\x07\x07\n\x04;\x07C`'
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g2129
sS'block_loop.thisIndex'
p3346
g889
sg38
S'left'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g1605
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g2136
sS'block_loop.thisRepN'
p3352
I0
sg907
g1605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3353
I0
sg909
g1599
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vy
sS'block_loop.thisTrialN'
p3355
I0
sg39
F0.8166881771194312
sg34
g753
(S'\x07\xdf\x07\x07\n\x05\x05\r\xc7X'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g2378
sS'block_loop.thisIndex'
p3359
g889
sg38
S'left'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g1774
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g2385
sS'block_loop.thisRepN'
p3365
I0
sg907
g1774
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3366
I0
sg909
g1781
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vy
sS'block_loop.thisTrialN'
p3368
I0
sg39
F0.93326029187483073
sg34
g753
(S'\x07\xdf\x07\x07\n\x05\x0b\x0b}h'
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g1168
sS'block_loop.thisIndex'
p3372
g889
sg38
S'left'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g1179
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g1176
sS'block_loop.thisRepN'
p3378
I0
sg907
g1172
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3379
I0
sg909
g1179
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vy
sS'block_loop.thisTrialN'
p3381
I0
sg39
F0.84992346612216352
sg34
g753
(S'\x07\xdf\x07\x07\n\x05\x11\n\xdd@'
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g950
sS'block_loop.thisIndex'
p3385
g889
sg38
S'right'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g958
sS'block_loop.thisRepN'
p3391
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3392
I0
sg909
g954
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vy
sS'block_loop.thisTrialN'
p3394
I0
sg39
F0.86701123304646899
sg34
g753
(S'\x07\xdf\x07\x07\n\x05\x17\t\x10P'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g916
sS'block_loop.thisIndex'
p3398
g889
sg38
S'right'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g924
sS'block_loop.thisRepN'
p3404
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3405
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vy
sS'block_loop.thisTrialN'
p3407
I0
sg39
F0.76667188391365926
sg34
g753
(S'\x07\xdf\x07\x07\n\x05\x1d\x07\xb8\x90'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g1367
sS'block_loop.thisIndex'
p3411
g889
sg38
S'left'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g1378
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g1375
sS'block_loop.thisRepN'
p3417
I0
sg907
g1371
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3418
I0
sg909
g1378
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vy
sS'block_loop.thisTrialN'
p3420
I0
sg39
F2.1497577971467763
sg34
g753
(S'\x07\xdf\x07\x07\n\x05#\x04|p'
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g1035
sS'block_loop.thisIndex'
p3424
g889
sg38
S'right'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g1046
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g1043
sS'block_loop.thisRepN'
p3430
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3431
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vy
sS'block_loop.thisTrialN'
p3433
I0
sg39
F1.2498952986902623
sg34
g753
(S'\x07\xdf\x07\x07\n\x05*\x07f\x88'
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g1078
sS'block_loop.thisIndex'
p3437
g889
sg38
S'right'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g1085
sS'block_loop.thisRepN'
p3443
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3444
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vy
sS'block_loop.thisTrialN'
p3446
I0
sg39
F2.0166296185111605
sg34
g753
(S'\x07\xdf\x07\x07\n\x050\x0b\xc7\xa0'
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g2707
sS'block_loop.thisIndex'
p3450
g889
sg38
S'right'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g1172
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g2714
sS'block_loop.thisRepN'
p3456
I0
sg907
g1172
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3457
I0
sg909
g1179
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vy
sS'block_loop.thisTrialN'
p3459
I0
sg39
F0.98332362583278154
sg34
g753
(S'\x07\xdf\x07\x07\n\x057\x0c\x8e\xd8'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g1279
sS'block_loop.thisIndex'
p3463
g889
sg38
S'left'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g1134
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g1286
sS'block_loop.thisRepN'
p3469
I0
sg907
g1127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3470
I0
sg909
g1134
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vy
sS'block_loop.thisTrialN'
p3472
I0
sg39
F0.96638724460080994
sg34
g753
(S'\x07\xdf\x07\x07\n\x06\x01\x0c\xa6H'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g1262
sS'block_loop.thisIndex'
p3476
g889
sg38
S'left'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g1270
sS'block_loop.thisRepN'
p3482
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3483
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vy
sS'block_loop.thisTrialN'
p3485
I0
sg39
F0.88335547099632095
sg34
g753
(S'\x07\xdf\x07\x07\n\x06\x07\x0c\xbd\xb8'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g2378
sS'block_loop.thisIndex'
p3489
g889
sg38
S'left'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g1781
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g2385
sS'block_loop.thisRepN'
p3495
I0
sg907
g1774
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3496
I0
sg909
g1781
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vy
sS'block_loop.thisTrialN'
p3498
I0
sg39
F1.0333020013417809
sg34
g753
(S'\x07\xdf\x07\x07\n\x06\r\x0bi\xe0'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g2627
sS'block_loop.thisIndex'
p3502
g889
sg38
S'right'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g2634
sS'block_loop.thisRepN'
p3508
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3509
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vy
sS'block_loop.thisTrialN'
p3511
I0
sg39
F0.63324435503864152
sg34
g753
(S'\x07\xdf\x07\x07\n\x06\x13\x0cs\x80'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g1412
sS'block_loop.thisIndex'
p3515
g889
sg38
S'right'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g1419
sS'block_loop.thisRepN'
p3521
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3522
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vy
sS'block_loop.thisTrialN'
p3524
I0
sg39
F1.0165258437614284
sg34
g753
(S'\x07\xdf\x07\x07\n\x06\x19\x07O\x18'
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g1595
sS'block_loop.thisIndex'
p3528
g889
sg38
S'right'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g1599
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g1603
sS'block_loop.thisRepN'
p3534
I0
sg907
g1605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3535
I0
sg909
g1599
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vy
sS'block_loop.thisTrialN'
p3537
I0
sg39
F0.83334516479544618
sg34
g753
(S'\x07\xdf\x07\x07\n\x06\x1f\x08\x978'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g1001
sS'block_loop.thisIndex'
p3541
g889
sg38
S'left'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g1009
sS'block_loop.thisRepN'
p3547
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3548
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vy
sS'block_loop.thisTrialN'
p3550
I0
sg39
F1.4832459373183156
sg34
g753
(S'\x07\xdf\x07\x07\n\x06%\x06\x87\xe0'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g1294
sS'block_loop.thisIndex'
p3554
g889
sg38
S'left'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g1046
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g1301
sS'block_loop.thisRepN'
p3560
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3561
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vy
sS'block_loop.thisTrialN'
p3563
I0
sg39
F1.0332481182986157
sg34
g753
(S'\x07\xdf\x07\x07\n\x06+\x0e{\x08'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g1140
sS'block_loop.thisIndex'
p3567
g889
sg38
S'right'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1147
sS'block_loop.thisRepN'
p3573
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3574
I0
sg909
g954
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vy
sS'block_loop.thisTrialN'
p3576
I0
sg39
F1.6333062207545481
sg34
g753
(S'\x07\xdf\x07\x07\n\x062\x00FP'
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g2627
sS'block_loop.thisIndex'
p3580
g889
sg38
S'right'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g2634
sS'block_loop.thisRepN'
p3586
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3587
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vy
sS'block_loop.thisTrialN'
p3589
I0
sg39
F0.666584274077195
sg34
g753
(S'\x07\xdf\x07\x07\n\x068\n\\X'
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g1185
sS'block_loop.thisIndex'
p3593
g889
sg38
S'right'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g1196
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g1193
sS'block_loop.thisRepN'
p3599
I0
sg907
g1189
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3600
I0
sg909
g1196
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vy
sS'block_loop.thisTrialN'
p3602
I0
sg39
F0.95038055968234403
sg34
g753
(S'\x07\xdf\x07\x07\n\x07\x02\x05\xef\x88'
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g1906
sS'block_loop.thisIndex'
p3606
g889
sg38
S'left'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g1476
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g1913
sS'block_loop.thisRepN'
p3612
I0
sg907
g1476
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3613
I0
sg909
g1483
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vy
sS'block_loop.thisTrialN'
p3615
I0
sg39
F2.7999296954581041
sg34
g753
(S'\x07\xdf\x07\x07\n\x07\x08\x05\x89\xf8'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F123.51247164369261
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vy
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vy
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'20-fruit_pastilles.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'right'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'2-steamed_puddings.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'2-steamed_puddings.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
S'20-fruit_pastilles.png'
p3648
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vy
sS'block_loop.thisTrialN'
p3650
I0
sg39
F1.1165019812706305
sg34
g753
(S'\x07\xdf\x07\x07\n\n)\x02\xbb8'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'1-treacle_cookies.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'right'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'1-treacle_cookies.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'21-nakd_banana_crunch.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3664
I1
sg3647
S'21-nakd_banana_crunch.png'
p3665
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vy
sS'block_loop.thisTrialN'
p3667
I0
sg39
F0.98324864572487058
sg34
g753
(S'\x07\xdf\x07\x07\n\n/\x04\xf5\x88'
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'26-walkers_smoky_bacon.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'left'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'26-walkers_smoky_bacon.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'44-crunch.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3681
I1
sg3647
S'44-crunch.png'
p3682
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vy
sS'block_loop.thisTrialN'
p3684
I0
sg39
F0.84994769923696367
sg34
g753
(S'\x07\xdf\x07\x07\n\n5\x05Kx'
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
S'19-caramello_redo.png'
p3688
sS'block_loop.thisIndex'
p3689
g3627
sg38
S'left'
p3690
sg59
g63
sS'trial_loop.thisN'
p3691
I3
sg33
S'19-caramello_redo.png'
p3692
sg64
g65
sS'trial_loop.thisIndex'
p3693
g60
(g99
S'\x03\x00\x00\x00'
tRp3694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3695
I0
sg3642
S'30-spaghetti_hoops.png'
p3696
sS'block_loop.thisRepN'
p3697
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3698
I1
sg3647
S'30-spaghetti_hoops.png'
p3699
sg55
g11
sS'block_loop.thisTrial'
p3700
Nsg70
Vy
sS'block_loop.thisTrialN'
p3701
I0
sg39
F0.81664883394523713
sg34
g753
(S'\x07\xdf\x07\x07\n\n;\x03z\xa0'
tRp3702
sa(dp3703
S'trial_loop.thisTrialN'
p3704
I4
sg3633
S'35-raisins.png'
p3705
sS'block_loop.thisIndex'
p3706
g3627
sg38
S'right'
p3707
sg59
g63
sS'trial_loop.thisN'
p3708
I4
sg33
S'49-yorkie.png'
p3709
sg64
g65
sS'trial_loop.thisIndex'
p3710
g60
(g99
S'\x04\x00\x00\x00'
tRp3711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3712
I0
sg3642
S'49-yorkie.png'
p3713
sS'block_loop.thisRepN'
p3714
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3715
I1
sg3647
S'35-raisins.png'
p3716
sg55
g11
sS'block_loop.thisTrial'
p3717
Nsg70
Vy
sS'block_loop.thisTrialN'
p3718
I0
sg39
F1.1166604943500715
sg34
g753
(S'\x07\xdf\x07\x07\n\x0b\x05\x010\xb0'
tRp3719
sa(dp3720
S'trial_loop.thisTrialN'
p3721
I5
sg3633
S'29-beans.png'
p3722
sS'block_loop.thisIndex'
p3723
g3627
sg38
S'right'
p3724
sg59
g63
sS'trial_loop.thisN'
p3725
I5
sg33
S'46-pistachios.png'
p3726
sg64
g65
sS'trial_loop.thisIndex'
p3727
g60
(g99
S'\x05\x00\x00\x00'
tRp3728
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3729
I0
sg3642
S'46-pistachios.png'
p3730
sS'block_loop.thisRepN'
p3731
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3732
I1
sg3647
S'29-beans.png'
p3733
sg55
g11
sS'block_loop.thisTrial'
p3734
Nsg70
Vy
sS'block_loop.thisTrialN'
p3735
I0
sg39
F0.6669010151395014
sg34
g753
(S'\x07\xdf\x07\x07\n\x0b\x0b\x03n\xe8'
tRp3736
sa(dp3737
S'trial_loop.thisTrialN'
p3738
I6
sg3633
S'10-bounty_redo.png'
p3739
sS'block_loop.thisIndex'
p3740
g3627
sg38
S'left'
p3741
sg59
g63
sS'trial_loop.thisN'
p3742
I6
sg33
S'10-bounty_redo.png'
p3743
sg64
g65
sS'trial_loop.thisIndex'
p3744
g60
(g99
S'\x06\x00\x00\x00'
tRp3745
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3746
I0
sg3642
S'4-corn.png'
p3747
sS'block_loop.thisRepN'
p3748
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3749
I1
sg3647
S'4-corn.png'
p3750
sg55
g11
sS'block_loop.thisTrial'
p3751
Nsg70
Vy
sS'block_loop.thisTrialN'
p3752
I0
sg39
F0.94987451523093114
sg34
g753
(S'\x07\xdf\x07\x07\n\x0b\x10\x0e@p'
tRp3753
sa(dp3754
S'trial_loop.thisTrialN'
p3755
I7
sg3633
S'36-fig_rolls.png'
p3756
sS'block_loop.thisIndex'
p3757
g3627
sg38
S'right'
p3758
sg59
g63
sS'trial_loop.thisN'
p3759
I7
sg33
S'36-fig_rolls.png'
p3760
sg64
g65
sS'trial_loop.thisIndex'
p3761
g60
(g99
S'\x07\x00\x00\x00'
tRp3762
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3763
I0
sg3642
S'34-hula_hoops_bbq_beef_redo.png'
p3764
sS'block_loop.thisRepN'
p3765
I1
sg3645
S'34-hula_hoops_bbq_beef_redo.png'
p3766
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3767
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p3768
Nsg70
Vy
sS'block_loop.thisTrialN'
p3769
I0
sg39
F1.4666240163846851
sg34
g753
(S'\x07\xdf\x07\x07\n\x0b\x16\r\xde\xc8'
tRp3770
sa(dp3771
S'trial_loop.thisTrialN'
p3772
I8
sg3633
S'33-ambrosia_rice.png'
p3773
sS'block_loop.thisIndex'
p3774
g3627
sg38
S'right'
p3775
sg59
g63
sS'trial_loop.thisN'
p3776
I8
sg33
S'33-ambrosia_rice.png'
p3777
sg64
g65
sS'trial_loop.thisIndex'
p3778
g60
(g99
S'\x08\x00\x00\x00'
tRp3779
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3780
I0
sg3642
S'23-crunchie_redo.png'
p3781
sS'block_loop.thisRepN'
p3782
I1
sg3645
S'23-crunchie_redo.png'
p3783
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3784
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p3785
Nsg70
Vy
sS'block_loop.thisTrialN'
p3786
I0
sg39
F1.2999018986506599
sg34
g753
(S'\x07\xdf\x07\x07\n\x0b\x1d\x06Q0'
tRp3787
sa(dp3788
S'trial_loop.thisTrialN'
p3789
I9
sg3633
g3739
sS'block_loop.thisIndex'
p3790
g3627
sg38
S'left'
p3791
sg59
g63
sS'trial_loop.thisN'
p3792
I9
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p3793
g60
(g99
S'\t\x00\x00\x00'
tRp3794
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3795
I0
sg3642
g3747
sS'block_loop.thisRepN'
p3796
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3797
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p3798
Nsg70
Vy
sS'block_loop.thisTrialN'
p3799
I0
sg39
F0.79983875000471016
sg34
g753
(S'\x07\xdf\x07\x07\n\x0b#\x0bi\xe0'
tRp3800
sa(dp3801
S'trial_loop.thisTrialN'
p3802
I10
sg3633
g3773
sS'block_loop.thisIndex'
p3803
g3627
sg38
S'right'
p3804
sg59
g63
sS'trial_loop.thisN'
p3805
I10
sg33
g3783
sg64
g65
sS'trial_loop.thisIndex'
p3806
g60
(g99
S'\n\x00\x00\x00'
tRp3807
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3808
I0
sg3642
g3781
sS'block_loop.thisRepN'
p3809
I1
sg3645
g3783
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3810
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p3811
Nsg70
Vy
sS'block_loop.thisTrialN'
p3812
I0
sg39
F1.9169000885794958
sg34
g753
(S'\x07\xdf\x07\x07\n\x0b)\x08\xe1p'
tRp3813
sa(dp3814
S'trial_loop.thisTrialN'
p3815
I11
sg3633
g3756
sS'block_loop.thisIndex'
p3816
g3627
sg38
S'right'
p3817
sg59
g63
sS'trial_loop.thisN'
p3818
I11
sg33
g3766
sg64
g65
sS'trial_loop.thisIndex'
p3819
g60
(g99
S'\x0b\x00\x00\x00'
tRp3820
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3821
I0
sg3642
g3764
sS'block_loop.thisRepN'
p3822
I1
sg3645
g3766
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3823
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p3824
Nsg70
Vy
sS'block_loop.thisTrialN'
p3825
I0
sg39
F1.5998015165368997
sg34
g753
(S'\x07\xdf\x07\x07\n\x0b0\x07\xfe\xe0'
tRp3826
sa(dp3827
S'trial_loop.thisTrialN'
p3828
I12
sg3633
S'48-twix.png'
p3829
sS'block_loop.thisIndex'
p3830
g3627
sg38
S'left'
p3831
sg59
g63
sS'trial_loop.thisN'
p3832
I12
sg33
S'48-twix.png'
p3833
sg64
g65
sS'trial_loop.thisIndex'
p3834
g60
(g99
S'\x0c\x00\x00\x00'
tRp3835
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3836
I0
sg3642
S'50-polo.png'
p3837
sS'block_loop.thisRepN'
p3838
I1
sg3645
g3833
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3839
I1
sg3647
S'50-polo.png'
p3840
sg55
g11
sS'block_loop.thisTrial'
p3841
Nsg70
Vy
sS'block_loop.thisTrialN'
p3842
I0
sg39
F2.0498996891601564
sg34
g753
(S'\x07\xdf\x07\x07\n\x0b7\x02\x98\x10'
tRp3843
sa(dp3844
S'trial_loop.thisTrialN'
p3845
I13
sg3633
S'46-pistachios.png'
p3846
sS'block_loop.thisIndex'
p3847
g3627
sg38
S'left'
p3848
sg59
g63
sS'trial_loop.thisN'
p3849
I13
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p3850
g60
(g99
S'\r\x00\x00\x00'
tRp3851
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3852
I0
sg3642
S'29-beans.png'
p3853
sS'block_loop.thisRepN'
p3854
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3855
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p3856
Nsg70
Vy
sS'block_loop.thisTrialN'
p3857
I0
sg39
F0.74980392559336906
sg34
g753
(S'\x07\xdf\x07\x07\n\x0c\x02\x03\xd8`'
tRp3858
sa(dp3859
S'trial_loop.thisTrialN'
p3860
I14
sg3633
S'42-mrkipling_lemon_slices.png'
p3861
sS'block_loop.thisIndex'
p3862
g3627
sg38
S'right'
p3863
sg59
g63
sS'trial_loop.thisN'
p3864
I14
sg33
S'16-skips_prawn.png'
p3865
sg64
g65
sS'trial_loop.thisIndex'
p3866
g60
(g99
S'\x0e\x00\x00\x00'
tRp3867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3868
I0
sg3642
S'16-skips_prawn.png'
p3869
sS'block_loop.thisRepN'
p3870
I1
sg3645
g3865
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3871
I1
sg3647
S'42-mrkipling_lemon_slices.png'
p3872
sg55
g11
sS'block_loop.thisTrial'
p3873
Nsg70
Vy
sS'block_loop.thisTrialN'
p3874
I0
sg39
F1.6830989991153729
sg34
g753
(S'\x07\xdf\x07\x07\n\x0c\x08\x00]\xc0'
tRp3875
sa(dp3876
S'trial_loop.thisTrialN'
p3877
I15
sg3633
S'3-ellas_strawberries_apples.png'
p3878
sS'block_loop.thisIndex'
p3879
g3627
sg38
S'right'
p3880
sg59
g63
sS'trial_loop.thisN'
p3881
I15
sg33
S'3-ellas_strawberries_apples.png'
p3882
sg64
g65
sS'trial_loop.thisIndex'
p3883
g60
(g99
S'\x0f\x00\x00\x00'
tRp3884
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3885
I0
sg3642
S'13-mccoys_steak_crisps.png'
p3886
sS'block_loop.thisRepN'
p3887
I1
sg3645
S'13-mccoys_steak_crisps.png'
p3888
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3889
I1
sg3647
g3882
sg55
g11
sS'block_loop.thisTrial'
p3890
Nsg70
Vy
sS'block_loop.thisTrialN'
p3891
I0
sg39
F0.84997791935620626
sg34
g753
(S'\x07\xdf\x07\x07\n\x0c\x0e\x0bi\xe0'
tRp3892
sa(dp3893
S'trial_loop.thisTrialN'
p3894
I16
sg3633
S'18-mms.png'
p3895
sS'block_loop.thisIndex'
p3896
g3627
sg38
S'left'
p3897
sg59
g63
sS'trial_loop.thisN'
p3898
I16
sg33
S'18-mms.png'
p3899
sg64
g65
sS'trial_loop.thisIndex'
p3900
g60
(g99
S'\x10\x00\x00\x00'
tRp3901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3902
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p3903
sS'block_loop.thisRepN'
p3904
I1
sg3645
g3899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3905
I1
sg3647
S'43-mrporky_pork_crackles_redo.png'
p3906
sg55
g11
sS'block_loop.thisTrial'
p3907
Nsg70
Vy
sS'block_loop.thisTrialN'
p3908
I0
sg39
F0.90001017790837068
sg34
g753
(S'\x07\xdf\x07\x07\n\x0c\x14\t\x99\x08'
tRp3909
sa(dp3910
S'trial_loop.thisTrialN'
p3911
I17
sg3633
S'25-kitkat.png'
p3912
sS'block_loop.thisIndex'
p3913
g3627
sg38
S'left'
p3914
sg59
g63
sS'trial_loop.thisN'
p3915
I17
sg33
S'31-hobnobs.png'
p3916
sg64
g65
sS'trial_loop.thisIndex'
p3917
g60
(g99
S'\x11\x00\x00\x00'
tRp3918
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3919
I0
sg3642
S'31-hobnobs.png'
p3920
sS'block_loop.thisRepN'
p3921
I1
sg3645
S'25-kitkat.png'
p3922
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3923
I1
sg3647
g3916
sg55
g11
sS'block_loop.thisTrial'
p3924
Nsg70
Vy
sS'block_loop.thisTrialN'
p3925
I0
sg39
F0.79992370845366167
sg34
g753
(S'\x07\xdf\x07\x07\n\x0c\x1a\x08\x7f\xc8'
tRp3926
sa(dp3927
S'trial_loop.thisTrialN'
p3928
I18
sg3633
S'8-liquorice_catherine_wheels.png'
p3929
sS'block_loop.thisIndex'
p3930
g3627
sg38
S'right'
p3931
sg59
g63
sS'trial_loop.thisN'
p3932
I18
sg33
S'8-liquorice_catherine_wheels.png'
p3933
sg64
g65
sS'trial_loop.thisIndex'
p3934
g60
(g99
S'\x12\x00\x00\x00'
tRp3935
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3936
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p3937
sS'block_loop.thisRepN'
p3938
I1
sg3645
S'17-jacobs_mini_cheddars_redo.png'
p3939
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3940
I1
sg3647
g3933
sg55
g11
sS'block_loop.thisTrial'
p3941
Nsg70
Vy
sS'block_loop.thisTrialN'
p3942
I0
sg39
F0.79995592424120332
sg34
g753
(S'\x07\xdf\x07\x07\n\x0c \x05\xfb@'
tRp3943
sa(dp3944
S'trial_loop.thisTrialN'
p3945
I19
sg3633
g3671
sS'block_loop.thisIndex'
p3946
g3627
sg38
S'left'
p3947
sg59
g63
sS'trial_loop.thisN'
p3948
I19
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p3949
g60
(g99
S'\x13\x00\x00\x00'
tRp3950
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3951
I0
sg3642
g3679
sS'block_loop.thisRepN'
p3952
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3953
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p3954
Nsg70
Vy
sS'block_loop.thisTrialN'
p3955
I0
sg39
F0.96655259997078247
sg34
g753
(S'\x07\xdf\x07\x07\n\x0c&\x03r\xd0'
tRp3956
sa(dp3957
S'trial_loop.thisTrialN'
p3958
I20
sg3633
S'51-mars.png'
p3959
sS'block_loop.thisIndex'
p3960
g3627
sg38
S'left'
p3961
sg59
g63
sS'trial_loop.thisN'
p3962
I20
sg33
S'51-mars.png'
p3963
sg64
g65
sS'trial_loop.thisIndex'
p3964
g60
(g99
S'\x14\x00\x00\x00'
tRp3965
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3966
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p3967
sS'block_loop.thisRepN'
p3968
I1
sg3645
g3963
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3969
I1
sg3647
S'27-hartleys_raspberries_jelly.png'
p3970
sg55
g11
sS'block_loop.thisTrial'
p3971
Nsg70
Vy
sS'block_loop.thisTrialN'
p3972
I0
sg39
F2.3332666209944364
sg34
g753
(S'\x07\xdf\x07\x07\n\x0c,\x03\x8a@'
tRp3973
sa(dp3974
S'trial_loop.thisTrialN'
p3975
I21
sg3633
g3773
sS'block_loop.thisIndex'
p3976
g3627
sg38
S'right'
p3977
sg59
g63
sS'trial_loop.thisN'
p3978
I21
sg33
g3783
sg64
g65
sS'trial_loop.thisIndex'
p3979
g60
(g99
S'\x15\x00\x00\x00'
tRp3980
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3981
I0
sg3642
g3781
sS'block_loop.thisRepN'
p3982
I1
sg3645
g3783
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3983
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p3984
Nsg70
Vy
sS'block_loop.thisTrialN'
p3985
I0
sg39
F1.3998289997398388
sg34
g753
(S'\x07\xdf\x07\x07\n\x0c3\t\x148'
tRp3986
sa(dp3987
S'trial_loop.thisTrialN'
p3988
I22
sg3633
g3654
sS'block_loop.thisIndex'
p3989
g3627
sg38
S'right'
p3990
sg59
g63
sS'trial_loop.thisN'
p3991
I22
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p3992
g60
(g99
S'\x16\x00\x00\x00'
tRp3993
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3994
I0
sg3642
g3662
sS'block_loop.thisRepN'
p3995
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3996
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p3997
Nsg70
Vy
sS'block_loop.thisTrialN'
p3998
I0
sg39
F0.94992155598265526
sg34
g753
(S'\x07\xdf\x07\x07\n\x0c:\x00U\xf0'
tRp3999
sa(dp4000
S'trial_loop.thisTrialN'
p4001
I23
sg3633
S'50-polo.png'
p4002
sS'block_loop.thisIndex'
p4003
g3627
sg38
S'right'
p4004
sg59
g63
sS'trial_loop.thisN'
p4005
I23
sg33
g3833
sg64
g65
sS'trial_loop.thisIndex'
p4006
g60
(g99
S'\x17\x00\x00\x00'
tRp4007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4008
I0
sg3642
S'48-twix.png'
p4009
sS'block_loop.thisRepN'
p4010
I1
sg3645
g3833
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4011
I1
sg3647
g3840
sg55
g11
sS'block_loop.thisTrial'
p4012
Nsg70
Vy
sS'block_loop.thisTrialN'
p4013
I0
sg39
F1.6999116489155313
sg34
g753
(S'\x07\xdf\x07\x07\n\r\x04\x002\xc8'
tRp4014
sa(dp4015
S'trial_loop.thisTrialN'
p4016
I24
sg3633
S'43-mrporky_pork_crackles_redo.png'
p4017
sS'block_loop.thisIndex'
p4018
g3627
sg38
S'right'
p4019
sg59
g63
sS'trial_loop.thisN'
p4020
I24
sg33
g3899
sg64
g65
sS'trial_loop.thisIndex'
p4021
g60
(g99
S'\x18\x00\x00\x00'
tRp4022
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4023
I0
sg3642
S'18-mms.png'
p4024
sS'block_loop.thisRepN'
p4025
I1
sg3645
g3899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4026
I1
sg3647
g3906
sg55
g11
sS'block_loop.thisTrial'
p4027
Nsg70
Vy
sS'block_loop.thisTrialN'
p4028
I0
sg39
F0.71663848497973959
sg34
g753
(S'\x07\xdf\x07\x07\n\r\n\x0by\x80'
tRp4029
sa(dp4030
S'trial_loop.thisTrialN'
p4031
I25
sg3633
g3688
sS'block_loop.thisIndex'
p4032
g3627
sg38
S'left'
p4033
sg59
g63
sS'trial_loop.thisN'
p4034
I25
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4035
g60
(g99
S'\x19\x00\x00\x00'
tRp4036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4037
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4038
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4039
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4040
Nsg70
Vy
sS'block_loop.thisTrialN'
p4041
I0
sg39
F0.91665604686068036
sg34
g753
(S'\x07\xdf\x07\x07\n\r\x10\x07\x85\xc8'
tRp4042
sa(dp4043
S'trial_loop.thisTrialN'
p4044
I26
sg3633
g4017
sS'block_loop.thisIndex'
p4045
g3627
sg38
S'right'
p4046
sg59
g63
sS'trial_loop.thisN'
p4047
I26
sg33
g3899
sg64
g65
sS'trial_loop.thisIndex'
p4048
g60
(g99
S'\x1a\x00\x00\x00'
tRp4049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4050
I0
sg3642
g4024
sS'block_loop.thisRepN'
p4051
I1
sg3645
g3899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4052
I1
sg3647
g3906
sg55
g11
sS'block_loop.thisTrial'
p4053
Nsg70
Vy
sS'block_loop.thisTrialN'
p4054
I0
sg39
F0.59991726529597145
sg34
g753
(S'\x07\xdf\x07\x07\n\r\x16\x06\xe5\xa0'
tRp4055
sa(dp4056
S'trial_loop.thisTrialN'
p4057
I27
sg3633
S'45-chewy_nougat_redo.png'
p4058
sS'block_loop.thisIndex'
p4059
g3627
sg38
S'right'
p4060
sg59
g63
sS'trial_loop.thisN'
p4061
I27
sg33
S'41-peanuts_redo.png'
p4062
sg64
g65
sS'trial_loop.thisIndex'
p4063
g60
(g99
S'\x1b\x00\x00\x00'
tRp4064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4065
I0
sg3642
S'41-peanuts_redo.png'
p4066
sS'block_loop.thisRepN'
p4067
I1
sg3645
g4062
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4068
I1
sg3647
S'45-chewy_nougat_redo.png'
p4069
sg55
g11
sS'block_loop.thisTrial'
p4070
Nsg70
Vy
sS'block_loop.thisTrialN'
p4071
I0
sg39
F1.3166566740706003
sg34
g753
(S'\x07\xdf\x07\x07\n\r\x1c\x01H '
tRp4072
sa(dp4073
S'trial_loop.thisTrialN'
p4074
I28
sg3633
g3688
sS'block_loop.thisIndex'
p4075
g3627
sg38
S'left'
p4076
sg59
g63
sS'trial_loop.thisN'
p4077
I28
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4078
g60
(g99
S'\x1c\x00\x00\x00'
tRp4079
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4080
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4081
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4082
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4083
Nsg70
Vy
sS'block_loop.thisTrialN'
p4084
I0
sg39
F0.7999707492053858
sg34
g753
(S'\x07\xdf\x07\x07\n\r"\x06\x9bh'
tRp4085
sa(dp4086
S'trial_loop.thisTrialN'
p4087
I29
sg3633
g3634
sS'block_loop.thisIndex'
p4088
g3627
sg38
S'right'
p4089
sg59
g63
sS'trial_loop.thisN'
p4090
I29
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4091
g60
(g99
S'\x1d\x00\x00\x00'
tRp4092
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4093
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4094
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4095
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4096
Nsg70
Vy
sS'block_loop.thisTrialN'
p4097
I0
sg39
F1.2333007469214863
sg34
g753
(S'\x07\xdf\x07\x07\n\r(\x04\x12\xf8'
tRp4098
sa(dp4099
S'trial_loop.thisTrialN'
p4100
I30
sg3633
S'44-crunch.png'
p4101
sS'block_loop.thisIndex'
p4102
g3627
sg38
S'right'
p4103
sg59
g63
sS'trial_loop.thisN'
p4104
I30
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4105
g60
(g99
S'\x1e\x00\x00\x00'
tRp4106
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4107
I0
sg3642
S'26-walkers_smoky_bacon.png'
p4108
sS'block_loop.thisRepN'
p4109
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4110
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4111
Nsg70
Vy
sS'block_loop.thisTrialN'
p4112
I0
sg39
F1.349881984732292
sg34
g753
(S'\x07\xdf\x07\x07\n\r.\x07\xfa\xf8'
tRp4113
sa(dp4114
S'trial_loop.thisTrialN'
p4115
I31
sg3633
g4058
sS'block_loop.thisIndex'
p4116
g3627
sg38
S'right'
p4117
sg59
g63
sS'trial_loop.thisN'
p4118
I31
sg33
g4062
sg64
g65
sS'trial_loop.thisIndex'
p4119
g60
(g99
S'\x1f\x00\x00\x00'
tRp4120
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4121
I0
sg3642
g4066
sS'block_loop.thisRepN'
p4122
I1
sg3645
g4062
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4123
I1
sg3647
g4069
sg55
g11
sS'block_loop.thisTrial'
p4124
Nsg70
Vy
sS'block_loop.thisTrialN'
p4125
I0
sg39
F0.96669742846734152
sg34
g753
(S'\x07\xdf\x07\x07\n\r4\x0e\x05\xd8'
tRp4126
sa(dp4127
S'trial_loop.thisTrialN'
p4128
I32
sg3633
g3895
sS'block_loop.thisIndex'
p4129
g3627
sg38
S'left'
p4130
sg59
g63
sS'trial_loop.thisN'
p4131
I32
sg33
g3899
sg64
g65
sS'trial_loop.thisIndex'
p4132
g60
(g99
S' \x00\x00\x00'
tRp4133
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4134
I0
sg3642
g3903
sS'block_loop.thisRepN'
p4135
I1
sg3645
g3899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4136
I1
sg3647
g3906
sg55
g11
sS'block_loop.thisTrial'
p4137
Nsg70
Vy
sS'block_loop.thisTrialN'
p4138
I0
sg39
F0.99992188384248948
sg34
g753
(S'\x07\xdf\x07\x07\n\r:\r\xde\xc8'
tRp4139
sa(dp4140
S'trial_loop.thisTrialN'
p4141
I33
sg3633
S'16-skips_prawn.png'
p4142
sS'block_loop.thisIndex'
p4143
g3627
sg38
S'left'
p4144
sg59
g63
sS'trial_loop.thisN'
p4145
I33
sg33
g3865
sg64
g65
sS'trial_loop.thisIndex'
p4146
g60
(g99
S'!\x00\x00\x00'
tRp4147
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4148
I0
sg3642
S'42-mrkipling_lemon_slices.png'
p4149
sS'block_loop.thisRepN'
p4150
I1
sg3645
g3865
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4151
I1
sg3647
g3872
sg55
g11
sS'block_loop.thisTrial'
p4152
Nsg70
Vy
sS'block_loop.thisTrialN'
p4153
I0
sg39
F2.3164742129729348
sg34
g753
(S'\x07\xdf\x07\x07\n\x0e\x04\x0eoP'
tRp4154
sa(dp4155
S'trial_loop.thisTrialN'
p4156
I34
sg3633
g3959
sS'block_loop.thisIndex'
p4157
g3627
sg38
S'left'
p4158
sg59
g63
sS'trial_loop.thisN'
p4159
I34
sg33
g3963
sg64
g65
sS'trial_loop.thisIndex'
p4160
g60
(g99
S'"\x00\x00\x00'
tRp4161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4162
I0
sg3642
g3967
sS'block_loop.thisRepN'
p4163
I1
sg3645
g3963
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4164
I1
sg3647
g3970
sg55
g11
sS'block_loop.thisTrial'
p4165
Nsg70
Vy
sS'block_loop.thisTrialN'
p4166
I0
sg39
F3.3998632111956795
sg34
g753
(S'\x07\xdf\x07\x07\n\x0e\x0c\x04|p'
tRp4167
sa(dp4168
S'trial_loop.thisTrialN'
p4169
I35
sg3633
S'7-olives.png'
p4170
sS'block_loop.thisIndex'
p4171
g3627
sg38
S'right'
p4172
sg59
g63
sS'trial_loop.thisN'
p4173
I35
sg33
S'7-olives.png'
p4174
sg64
g65
sS'trial_loop.thisIndex'
p4175
g60
(g99
S'#\x00\x00\x00'
tRp4176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4177
I0
sg3642
S'22-daim.png'
p4178
sS'block_loop.thisRepN'
p4179
I1
sg3645
S'22-daim.png'
p4180
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4181
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p4182
Nsg70
Vy
sS'block_loop.thisTrialN'
p4183
I0
sg39
F0.59996772719296132
sg34
g753
(S'\x07\xdf\x07\x07\n\x0e\x14\x0b30'
tRp4184
sa(dp4185
S'trial_loop.thisTrialN'
p4186
I36
sg3633
S'30-spaghetti_hoops.png'
p4187
sS'block_loop.thisIndex'
p4188
g3627
sg38
S'right'
p4189
sg59
g63
sS'trial_loop.thisN'
p4190
I36
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4191
g60
(g99
S'$\x00\x00\x00'
tRp4192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4193
I0
sg3642
S'19-caramello_redo.png'
p4194
sS'block_loop.thisRepN'
p4195
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4196
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4197
Nsg70
Vy
sS'block_loop.thisTrialN'
p4198
I0
sg39
F0.61665493498821888
sg34
g753
(S'\x07\xdf\x07\x07\n\x0e\x1a\x05\x91\xc8'
tRp4199
sa(dp4200
S'trial_loop.thisTrialN'
p4201
I37
sg3633
S'23-crunchie_redo.png'
p4202
sS'block_loop.thisIndex'
p4203
g3627
sg38
S'left'
p4204
sg59
g63
sS'trial_loop.thisN'
p4205
I37
sg33
g3777
sg64
g65
sS'trial_loop.thisIndex'
p4206
g60
(g99
S'%\x00\x00\x00'
tRp4207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4208
I0
sg3642
S'33-ambrosia_rice.png'
p4209
sS'block_loop.thisRepN'
p4210
I1
sg3645
g3783
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4211
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p4212
Nsg70
Vy
sS'block_loop.thisTrialN'
p4213
I0
sg39
F2.2831793390178063
sg34
g753
(S'\x07\xdf\x07\x07\n\x0e \x002\xc8'
tRp4214
sa(dp4215
S'trial_loop.thisTrialN'
p4216
I38
sg3633
g3878
sS'block_loop.thisIndex'
p4217
g3627
sg38
S'right'
p4218
sg59
g63
sS'trial_loop.thisN'
p4219
I38
sg33
g3888
sg64
g65
sS'trial_loop.thisIndex'
p4220
g60
(g99
S'&\x00\x00\x00'
tRp4221
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4222
I0
sg3642
g3886
sS'block_loop.thisRepN'
p4223
I1
sg3645
g3888
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4224
I1
sg3647
g3882
sg55
g11
sS'block_loop.thisTrial'
p4225
Nsg70
Vy
sS'block_loop.thisTrialN'
p4226
I0
sg39
F0.61666263256574894
sg34
g753
(S"\x07\xdf\x07\x07\n\x0e'\x05\x05("
tRp4227
sa(dp4228
S'trial_loop.thisTrialN'
p4229
I39
sg3633
S'27-hartleys_raspberries_jelly.png'
p4230
sS'block_loop.thisIndex'
p4231
g3627
sg38
S'right'
p4232
sg59
g63
sS'trial_loop.thisN'
p4233
I39
sg33
g3963
sg64
g65
sS'trial_loop.thisIndex'
p4234
g60
(g99
S"'\x00\x00\x00"
tRp4235
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4236
I0
sg3642
S'51-mars.png'
p4237
sS'block_loop.thisRepN'
p4238
I1
sg3645
g3963
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4239
I1
sg3647
g3970
sg55
g11
sS'block_loop.thisTrial'
p4240
Nsg70
Vy
sS'block_loop.thisTrialN'
p4241
I0
sg39
F1.4999739137651886
sg34
g753
(S'\x07\xdf\x07\x07\n\x0e,\x0e\xe4\x80'
tRp4242
sa(dp4243
S'trial_loop.thisTrialN'
p4244
I40
sg3633
S'38-maltesers.png'
p4245
sS'block_loop.thisIndex'
p4246
g3627
sg38
S'left'
p4247
sg59
g63
sS'trial_loop.thisN'
p4248
I40
sg33
S'38-maltesers.png'
p4249
sg64
g65
sS'trial_loop.thisIndex'
p4250
g60
(g99
S'(\x00\x00\x00'
tRp4251
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4252
I0
sg3642
S'6-sour_patch_kids.png'
p4253
sS'block_loop.thisRepN'
p4254
I1
sg3645
g4249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4255
I1
sg3647
S'6-sour_patch_kids.png'
p4256
sg55
g11
sS'block_loop.thisTrial'
p4257
Nsg70
Vy
sS'block_loop.thisTrialN'
p4258
I0
sg39
F0.91641542628758543
sg34
g753
(S'\x07\xdf\x07\x07\n\x0e3\x07\xd3\xe8'
tRp4259
sa(dp4260
S'trial_loop.thisTrialN'
p4261
I41
sg3633
g3878
sS'block_loop.thisIndex'
p4262
g3627
sg38
S'right'
p4263
sg59
g63
sS'trial_loop.thisN'
p4264
I41
sg33
g3888
sg64
g65
sS'trial_loop.thisIndex'
p4265
g60
(g99
S')\x00\x00\x00'
tRp4266
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4267
I0
sg3642
g3886
sS'block_loop.thisRepN'
p4268
I1
sg3645
g3888
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4269
I1
sg3647
g3882
sg55
g11
sS'block_loop.thisTrial'
p4270
Nsg70
Vy
sS'block_loop.thisTrialN'
p4271
I0
sg39
F0.58330817365867915
sg34
g753
(S'\x07\xdf\x07\x07\n\x0e9\x06\xf5@'
tRp4272
sa(dp4273
S'trial_loop.thisTrialN'
p4274
I42
sg3633
S'49-yorkie.png'
p4275
sS'block_loop.thisIndex'
p4276
g3627
sg38
S'left'
p4277
sg59
g63
sS'trial_loop.thisN'
p4278
I42
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4279
g60
(g99
S'*\x00\x00\x00'
tRp4280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4281
I0
sg3642
S'35-raisins.png'
p4282
sS'block_loop.thisRepN'
p4283
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4284
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4285
Nsg70
Vy
sS'block_loop.thisTrialN'
p4286
I0
sg39
F2.9331471089753904
sg34
g753
(S'\x07\xdf\x07\x07\n\x0f\x03\x01\x19@'
tRp4287
sa(dp4288
S'trial_loop.thisTrialN'
p4289
I43
sg3633
g3878
sS'block_loop.thisIndex'
p4290
g3627
sg38
S'right'
p4291
sg59
g63
sS'trial_loop.thisN'
p4292
I43
sg33
g3882
sg64
g65
sS'trial_loop.thisIndex'
p4293
g60
(g99
S'+\x00\x00\x00'
tRp4294
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4295
I0
sg3642
g3886
sS'block_loop.thisRepN'
p4296
I1
sg3645
g3888
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4297
I1
sg3647
g3882
sg55
g11
sS'block_loop.thisTrial'
p4298
Nsg70
Vy
sS'block_loop.thisTrialN'
p4299
I0
sg39
F0.56663835668678075
sg34
g753
(S'\x07\xdf\x07\x07\n\x0f\x0b\x00\xab\xe0'
tRp4300
sa(dp4301
S'trial_loop.thisTrialN'
p4302
I44
sg3633
S'2-steamed_puddings.png'
p4303
sS'block_loop.thisIndex'
p4304
g3627
sg38
S'left'
p4305
sg59
g63
sS'trial_loop.thisN'
p4306
I44
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4307
g60
(g99
S',\x00\x00\x00'
tRp4308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4309
I0
sg3642
S'20-fruit_pastilles.png'
p4310
sS'block_loop.thisRepN'
p4311
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4312
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4313
Nsg70
Vy
sS'block_loop.thisTrialN'
p4314
I0
sg39
F0.83322371412714347
sg34
g753
(S'\x07\xdf\x07\x07\n\x0f\x10\t\xd3\xa0'
tRp4315
sa(dp4316
S'trial_loop.thisTrialN'
p4317
I45
sg3633
g3688
sS'block_loop.thisIndex'
p4318
g3627
sg38
S'left'
p4319
sg59
g63
sS'trial_loop.thisN'
p4320
I45
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4321
g60
(g99
S'-\x00\x00\x00'
tRp4322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4323
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4324
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4325
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4326
Nsg70
Vy
sS'block_loop.thisTrialN'
p4327
I0
sg39
F0.68335216388868503
sg34
g753
(S'\x07\xdf\x07\x07\n\x0f\x16\x07\xc80'
tRp4328
sa(dp4329
S'trial_loop.thisTrialN'
p4330
I46
sg3633
g4275
sS'block_loop.thisIndex'
p4331
g3627
sg38
S'left'
p4332
sg59
g63
sS'trial_loop.thisN'
p4333
I46
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4334
g60
(g99
S'.\x00\x00\x00'
tRp4335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4336
I0
sg3642
g4282
sS'block_loop.thisRepN'
p4337
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4338
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4339
Nsg70
Vy
sS'block_loop.thisTrialN'
p4340
I0
sg39
F0.74999009293242125
sg34
g753
(S'\x07\xdf\x07\x07\n\x0f\x1c\x03\x95\xf8'
tRp4341
sa(dp4342
S'trial_loop.thisTrialN'
p4343
I47
sg3633
g3861
sS'block_loop.thisIndex'
p4344
g3627
sg38
S'right'
p4345
sg59
g63
sS'trial_loop.thisN'
p4346
I47
sg33
g3865
sg64
g65
sS'trial_loop.thisIndex'
p4347
g60
(g99
S'/\x00\x00\x00'
tRp4348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4349
I0
sg3642
g3869
sS'block_loop.thisRepN'
p4350
I1
sg3645
g3865
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4351
I1
sg3647
g3872
sg55
g11
sS'block_loop.thisTrial'
p4352
Nsg70
Vy
sS'block_loop.thisTrialN'
p4353
I0
sg39
F1.0165110187972459
sg34
g753
(S'\x07\xdf\x07\x07\n\x0f"\x00\x1bX'
tRp4354
sa(dp4355
S'trial_loop.thisTrialN'
p4356
I48
sg3633
S'41-peanuts_redo.png'
p4357
sS'block_loop.thisIndex'
p4358
g3627
sg38
S'left'
p4359
sg59
g63
sS'trial_loop.thisN'
p4360
I48
sg33
g4062
sg64
g65
sS'trial_loop.thisIndex'
p4361
g60
(g99
S'0\x00\x00\x00'
tRp4362
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4363
I0
sg3642
S'45-chewy_nougat_redo.png'
p4364
sS'block_loop.thisRepN'
p4365
I1
sg3645
g4062
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4366
I1
sg3647
g4069
sg55
g11
sS'block_loop.thisTrial'
p4367
Nsg70
Vy
sS'block_loop.thisTrialN'
p4368
I0
sg39
F0.91665148533320462
sg34
g753
(S'\x07\xdf\x07\x07\n\x0f(\x00\xea`'
tRp4369
sa(dp4370
S'trial_loop.thisTrialN'
p4371
I49
sg3633
g4170
sS'block_loop.thisIndex'
p4372
g3627
sg38
S'right'
p4373
sg59
g63
sS'trial_loop.thisN'
p4374
I49
sg33
g4174
sg64
g65
sS'trial_loop.thisIndex'
p4375
g60
(g99
S'1\x00\x00\x00'
tRp4376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4377
I0
sg3642
g4178
sS'block_loop.thisRepN'
p4378
I1
sg3645
g4180
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4379
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p4380
Nsg70
Vy
sS'block_loop.thisTrialN'
p4381
I0
sg39
F0.63330878661372481
sg34
g753
(S'\x07\xdf\x07\x07\n\x0f.\x00\x0b\xb8'
tRp4382
sa(dp4383
S'trial_loop.thisTrialN'
p4384
I50
sg3633
g3829
sS'block_loop.thisIndex'
p4385
g3627
sg38
S'left'
p4386
sg59
g63
sS'trial_loop.thisN'
p4387
I50
sg33
g3833
sg64
g65
sS'trial_loop.thisIndex'
p4388
g60
(g99
S'2\x00\x00\x00'
tRp4389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4390
I0
sg3642
g3837
sS'block_loop.thisRepN'
p4391
I1
sg3645
g3833
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4392
I1
sg3647
g3840
sg55
g11
sS'block_loop.thisTrial'
p4393
Nsg70
Vy
sS'block_loop.thisTrialN'
p4394
I0
sg39
F2.233661107590251
sg34
g753
(S'\x07\xdf\x07\x07\n\x0f3\nh\x10'
tRp4395
sa(dp4396
S'trial_loop.thisTrialN'
p4397
I51
sg3633
g4142
sS'block_loop.thisIndex'
p4398
g3627
sg38
S'left'
p4399
sg59
g63
sS'trial_loop.thisN'
p4400
I51
sg33
g3865
sg64
g65
sS'trial_loop.thisIndex'
p4401
g60
(g99
S'3\x00\x00\x00'
tRp4402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4403
I0
sg3642
g4149
sS'block_loop.thisRepN'
p4404
I1
sg3645
g3865
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4405
I1
sg3647
g3872
sg55
g11
sS'block_loop.thisTrial'
p4406
Nsg70
Vy
sS'block_loop.thisTrialN'
p4407
I0
sg39
F1.3831939644146587
sg34
g753
(S'\x07\xdf\x07\x07\n\x0f:\x0eH@'
tRp4408
sa(dp4409
S'trial_loop.thisTrialN'
p4410
I52
sg3633
g3959
sS'block_loop.thisIndex'
p4411
g3627
sg38
S'left'
p4412
sg59
g63
sS'trial_loop.thisN'
p4413
I52
sg33
g3970
sg64
g65
sS'trial_loop.thisIndex'
p4414
g60
(g99
S'4\x00\x00\x00'
tRp4415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4416
I0
sg3642
g3967
sS'block_loop.thisRepN'
p4417
I1
sg3645
g3963
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4418
I1
sg3647
g3970
sg55
g11
sS'block_loop.thisTrial'
p4419
Nsg70
Vy
sS'block_loop.thisTrialN'
p4420
I0
sg39
F1.4664552398689921
sg34
g753
(S'\x07\xdf\x07\x07\n\x10\x05\x05\x89\xf8'
tRp4421
sa(dp4422
S'trial_loop.thisTrialN'
p4423
I53
sg3633
S'31-hobnobs.png'
p4424
sS'block_loop.thisIndex'
p4425
g3627
sg38
S'right'
p4426
sg59
g63
sS'trial_loop.thisN'
p4427
I53
sg33
g3922
sg64
g65
sS'trial_loop.thisIndex'
p4428
g60
(g99
S'5\x00\x00\x00'
tRp4429
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4430
I0
sg3642
S'25-kitkat.png'
p4431
sS'block_loop.thisRepN'
p4432
I1
sg3645
g3922
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4433
I1
sg3647
g3916
sg55
g11
sS'block_loop.thisTrial'
p4434
Nsg70
Vy
sS'block_loop.thisTrialN'
p4435
I0
sg39
F0.78319801277075385
sg34
g753
(S'\x07\xdf\x07\x07\n\x10\x0b\r\x04\x08'
tRp4436
sa(dp4437
S'trial_loop.thisTrialN'
p4438
I54
sg3633
S'6-sour_patch_kids.png'
p4439
sS'block_loop.thisIndex'
p4440
g3627
sg38
S'right'
p4441
sg59
g63
sS'trial_loop.thisN'
p4442
I54
sg33
g4249
sg64
g65
sS'trial_loop.thisIndex'
p4443
g60
(g99
S'6\x00\x00\x00'
tRp4444
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4445
I0
sg3642
S'38-maltesers.png'
p4446
sS'block_loop.thisRepN'
p4447
I1
sg3645
g4249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4448
I1
sg3647
g4256
sg55
g11
sS'block_loop.thisTrial'
p4449
Nsg70
Vy
sS'block_loop.thisTrialN'
p4450
I0
sg39
F0.74959438042651527
sg34
g753
(S'\x07\xdf\x07\x07\n\x10\x11\nA\x00'
tRp4451
sa(dp4452
S'trial_loop.thisTrialN'
p4453
I55
sg3633
g3846
sS'block_loop.thisIndex'
p4454
g3627
sg38
S'left'
p4455
sg59
g63
sS'trial_loop.thisN'
p4456
I55
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4457
g60
(g99
S'7\x00\x00\x00'
tRp4458
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4459
I0
sg3642
g3853
sS'block_loop.thisRepN'
p4460
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4461
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4462
Nsg70
Vy
sS'block_loop.thisTrialN'
p4463
I0
sg39
F0.81663258350363321
sg34
g753
(S'\x07\xdf\x07\x07\n\x10\x17\x07\x00\xf8'
tRp4464
sa(dp4465
S'trial_loop.thisTrialN'
p4466
I56
sg3633
g3756
sS'block_loop.thisIndex'
p4467
g3627
sg38
S'right'
p4468
sg59
g63
sS'trial_loop.thisN'
p4469
I56
sg33
g3766
sg64
g65
sS'trial_loop.thisIndex'
p4470
g60
(g99
S'8\x00\x00\x00'
tRp4471
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4472
I0
sg3642
g3764
sS'block_loop.thisRepN'
p4473
I1
sg3645
g3766
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4474
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p4475
Nsg70
Vy
sS'block_loop.thisTrialN'
p4476
I0
sg39
F2.0499678269766264
sg34
g753
(S'\x07\xdf\x07\x07\n\x10\x1d\x04\xb7\x08'
tRp4477
sa(dp4478
S'trial_loop.thisTrialN'
p4479
I57
sg3633
g3671
sS'block_loop.thisIndex'
p4480
g3627
sg38
S'left'
p4481
sg59
g63
sS'trial_loop.thisN'
p4482
I57
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4483
g60
(g99
S'9\x00\x00\x00'
tRp4484
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4485
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4486
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4487
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4488
Nsg70
Vy
sS'block_loop.thisTrialN'
p4489
I0
sg39
F1.166549634977855
sg34
g753
(S'\x07\xdf\x07\x07\n\x10$\x05\xfb@'
tRp4490
sa(dp4491
S'trial_loop.thisTrialN'
p4492
I58
sg3633
S'40-sardines.png'
p4493
sS'block_loop.thisIndex'
p4494
g3627
sg38
S'left'
p4495
sg59
g63
sS'trial_loop.thisN'
p4496
I58
sg33
S'5-pineapple.png'
p4497
sg64
g65
sS'trial_loop.thisIndex'
p4498
g60
(g99
S':\x00\x00\x00'
tRp4499
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4500
I0
sg3642
S'5-pineapple.png'
p4501
sS'block_loop.thisRepN'
p4502
I1
sg3645
S'40-sardines.png'
p4503
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4504
I1
sg3647
g4497
sg55
g11
sS'block_loop.thisTrial'
p4505
Nsg70
Vy
sS'block_loop.thisTrialN'
p4506
I0
sg39
F1.0165098784150359
sg34
g753
(S"\x07\xdf\x07\x07\n\x10*\t'\xc0"
tRp4507
sa(dp4508
S'trial_loop.thisTrialN'
p4509
I59
sg3633
g3846
sS'block_loop.thisIndex'
p4510
g3627
sg38
S'left'
p4511
sg59
g63
sS'trial_loop.thisN'
p4512
I59
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4513
g60
(g99
S';\x00\x00\x00'
tRp4514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4515
I0
sg3642
g3853
sS'block_loop.thisRepN'
p4516
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4517
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4518
Nsg70
Vy
sS'block_loop.thisTrialN'
p4519
I0
sg39
F0.84995881796021422
sg34
g753
(S'\x07\xdf\x07\x07\n\x100\t\xbc0'
tRp4520
sa(dp4521
S'trial_loop.thisTrialN'
p4522
I60
sg3633
g4424
sS'block_loop.thisIndex'
p4523
g3627
sg38
S'right'
p4524
sg59
g63
sS'trial_loop.thisN'
p4525
I60
sg33
g3922
sg64
g65
sS'trial_loop.thisIndex'
p4526
g60
(g99
S'<\x00\x00\x00'
tRp4527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4528
I0
sg3642
g4431
sS'block_loop.thisRepN'
p4529
I1
sg3645
g3922
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4530
I1
sg3647
g3916
sg55
g11
sS'block_loop.thisTrial'
p4531
Nsg70
Vy
sS'block_loop.thisTrialN'
p4532
I0
sg39
F0.88333152297718698
sg34
g753
(S'\x07\xdf\x07\x07\n\x106\x08%\xf0'
tRp4533
sa(dp4534
S'trial_loop.thisTrialN'
p4535
I61
sg3633
g3895
sS'block_loop.thisIndex'
p4536
g3627
sg38
S'left'
p4537
sg59
g63
sS'trial_loop.thisN'
p4538
I61
sg33
g3906
sg64
g65
sS'trial_loop.thisIndex'
p4539
g60
(g99
S'=\x00\x00\x00'
tRp4540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4541
I0
sg3642
g3903
sS'block_loop.thisRepN'
p4542
I1
sg3645
g3899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4543
I1
sg3647
g3906
sg55
g11
sS'block_loop.thisTrial'
p4544
Nsg70
Vy
sS'block_loop.thisTrialN'
p4545
I0
sg39
F0.83331694034404791
sg34
g753
(S'\x07\xdf\x07\x07\n\x11\x00\x06\xd2\x18'
tRp4546
sa(dp4547
S'trial_loop.thisTrialN'
p4548
I62
sg3633
g4202
sS'block_loop.thisIndex'
p4549
g3627
sg38
S'left'
p4550
sg59
g63
sS'trial_loop.thisN'
p4551
I62
sg33
g3783
sg64
g65
sS'trial_loop.thisIndex'
p4552
g60
(g99
S'>\x00\x00\x00'
tRp4553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4554
I0
sg3642
g4209
sS'block_loop.thisRepN'
p4555
I1
sg3645
g3783
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4556
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p4557
Nsg70
Vy
sS'block_loop.thisTrialN'
p4558
I0
sg39
F1.8334346847714187
sg34
g753
(S'\x07\xdf\x07\x07\n\x11\x06\x04\xc2\xc0'
tRp4559
sa(dp4560
S'trial_loop.thisTrialN'
p4561
I63
sg3633
g4424
sS'block_loop.thisIndex'
p4562
g3627
sg38
S'right'
p4563
sg59
g63
sS'trial_loop.thisN'
p4564
I63
sg33
g3922
sg64
g65
sS'trial_loop.thisIndex'
p4565
g60
(g99
S'?\x00\x00\x00'
tRp4566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4567
I0
sg3642
g4431
sS'block_loop.thisRepN'
p4568
I1
sg3645
g3922
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4569
I1
sg3647
g3916
sg55
g11
sS'block_loop.thisTrial'
p4570
Nsg70
Vy
sS'block_loop.thisTrialN'
p4571
I0
sg39
F0.7499325036483242
sg34
g753
(S'\x07\xdf\x07\x07\n\x11\r\x02\xaf\x80'
tRp4572
sa(dp4573
S'trial_loop.thisTrialN'
p4574
I64
sg3633
S'22-daim.png'
p4575
sS'block_loop.thisIndex'
p4576
g3627
sg38
S'left'
p4577
sg59
g63
sS'trial_loop.thisN'
p4578
I64
sg33
g4180
sg64
g65
sS'trial_loop.thisIndex'
p4579
g60
(g99
S'@\x00\x00\x00'
tRp4580
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4581
I0
sg3642
S'7-olives.png'
p4582
sS'block_loop.thisRepN'
p4583
I1
sg3645
g4180
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4584
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p4585
Nsg70
Vy
sS'block_loop.thisTrialN'
p4586
I0
sg39
F1.4831874927476747
sg34
g753
(S'\x07\xdf\x07\x07\n\x11\x12\x0e\xb5\xa0'
tRp4587
sa(dp4588
S'trial_loop.thisTrialN'
p4589
I65
sg3633
g4187
sS'block_loop.thisIndex'
p4590
g3627
sg38
S'right'
p4591
sg59
g63
sS'trial_loop.thisN'
p4592
I65
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4593
g60
(g99
S'A\x00\x00\x00'
tRp4594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4595
I0
sg3642
g4194
sS'block_loop.thisRepN'
p4596
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4597
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4598
Nsg70
Vy
sS'block_loop.thisTrialN'
p4599
I0
sg39
F0.61662214900979961
sg34
g753
(S'\x07\xdf\x07\x07\n\x11\x19\x07(\x08'
tRp4600
sa(dp4601
S'trial_loop.thisTrialN'
p4602
I66
sg3633
g4493
sS'block_loop.thisIndex'
p4603
g3627
sg38
S'left'
p4604
sg59
g63
sS'trial_loop.thisN'
p4605
I66
sg33
g4503
sg64
g65
sS'trial_loop.thisIndex'
p4606
g60
(g99
S'B\x00\x00\x00'
tRp4607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4608
I0
sg3642
g4501
sS'block_loop.thisRepN'
p4609
I1
sg3645
g4503
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4610
I1
sg3647
g4497
sg55
g11
sS'block_loop.thisTrial'
p4611
Nsg70
Vy
sS'block_loop.thisTrialN'
p4612
I0
sg39
F0.66667379405316751
sg34
g753
(S'\x07\xdf\x07\x07\n\x11\x1f\x02\x03\xa0'
tRp4613
sa(dp4614
S'trial_loop.thisTrialN'
p4615
I67
sg3633
g4575
sS'block_loop.thisIndex'
p4616
g3627
sg38
S'left'
p4617
sg59
g63
sS'trial_loop.thisN'
p4618
I67
sg33
g4174
sg64
g65
sS'trial_loop.thisIndex'
p4619
g60
(g99
S'C\x00\x00\x00'
tRp4620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4621
I0
sg3642
g4582
sS'block_loop.thisRepN'
p4622
I1
sg3645
g4180
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4623
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p4624
Nsg70
Vy
sS'block_loop.thisTrialN'
p4625
I0
sg39
F0.59991954605948195
sg34
g753
(S'\x07\xdf\x07\x07\n\x11$\x0c\x9a\x90'
tRp4626
sa(dp4627
S'trial_loop.thisTrialN'
p4628
I68
sg3633
g4002
sS'block_loop.thisIndex'
p4629
g3627
sg38
S'right'
p4630
sg59
g63
sS'trial_loop.thisN'
p4631
I68
sg33
g3840
sg64
g65
sS'trial_loop.thisIndex'
p4632
g60
(g99
S'D\x00\x00\x00'
tRp4633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4634
I0
sg3642
g4009
sS'block_loop.thisRepN'
p4635
I1
sg3645
g3833
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4636
I1
sg3647
g3840
sg55
g11
sS'block_loop.thisTrial'
p4637
Nsg70
Vy
sS'block_loop.thisTrialN'
p4638
I0
sg39
F1.26659676125837
sg34
g753
(S'\x07\xdf\x07\x07\n\x11*\x06\xfd\x10'
tRp4639
sa(dp4640
S'trial_loop.thisTrialN'
p4641
I69
sg3633
g4142
sS'block_loop.thisIndex'
p4642
g3627
sg38
S'left'
p4643
sg59
g63
sS'trial_loop.thisN'
p4644
I69
sg33
g3865
sg64
g65
sS'trial_loop.thisIndex'
p4645
g60
(g99
S'E\x00\x00\x00'
tRp4646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4647
I0
sg3642
g4149
sS'block_loop.thisRepN'
p4648
I1
sg3645
g3865
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4649
I1
sg3647
g3872
sg55
g11
sS'block_loop.thisTrial'
p4650
Nsg70
Vy
sS'block_loop.thisTrialN'
p4651
I0
sg39
F0.8498242529003619
sg34
g753
(S'\x07\xdf\x07\x07\n\x110\x0b\x98\xc0'
tRp4652
sa(dp4653
S'trial_loop.thisTrialN'
p4654
I70
sg3633
g3912
sS'block_loop.thisIndex'
p4655
g3627
sg38
S'left'
p4656
sg59
g63
sS'trial_loop.thisN'
p4657
I70
sg33
g3916
sg64
g65
sS'trial_loop.thisIndex'
p4658
g60
(g99
S'F\x00\x00\x00'
tRp4659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4660
I0
sg3642
g3920
sS'block_loop.thisRepN'
p4661
I1
sg3645
g3922
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4662
I1
sg3647
g3916
sg55
g11
sS'block_loop.thisTrial'
p4663
Nsg70
Vy
sS'block_loop.thisTrialN'
p4664
I0
sg39
F0.80001950053019755
sg34
g753
(S'\x07\xdf\x07\x07\n\x116\t\xc7\xe8'
tRp4665
sa(dp4666
S'trial_loop.thisTrialN'
p4667
I71
sg3633
g4439
sS'block_loop.thisIndex'
p4668
g3627
sg38
S'right'
p4669
sg59
g63
sS'trial_loop.thisN'
p4670
I71
sg33
g4256
sg64
g65
sS'trial_loop.thisIndex'
p4671
g60
(g99
S'G\x00\x00\x00'
tRp4672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4673
I0
sg3642
g4446
sS'block_loop.thisRepN'
p4674
I1
sg3645
g4249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4675
I1
sg3647
g4256
sg55
g11
sS'block_loop.thisTrial'
p4676
Nsg70
Vy
sS'block_loop.thisTrialN'
p4677
I0
sg39
F1.3000815087934825
sg34
g753
(S'\x07\xdf\x07\x07\n\x12\x00\x07C`'
tRp4678
sa(dp4679
S'trial_loop.thisTrialN'
p4680
I72
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p4681
sS'block_loop.thisIndex'
p4682
g3627
sg38
S'left'
p4683
sg59
g63
sS'trial_loop.thisN'
p4684
I72
sg33
g3766
sg64
g65
sS'trial_loop.thisIndex'
p4685
g60
(g99
S'H\x00\x00\x00'
tRp4686
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4687
I0
sg3642
S'36-fig_rolls.png'
p4688
sS'block_loop.thisRepN'
p4689
I1
sg3645
g3766
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4690
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p4691
Nsg70
Vy
sS'block_loop.thisTrialN'
p4692
I0
sg39
F1.1999060895532239
sg34
g753
(S'\x07\xdf\x07\x07\n\x12\x06\x0cX('
tRp4693
sa(dp4694
S'trial_loop.thisTrialN'
p4695
I73
sg3633
g3846
sS'block_loop.thisIndex'
p4696
g3627
sg38
S'left'
p4697
sg59
g63
sS'trial_loop.thisN'
p4698
I73
sg33
g3733
sg64
g65
sS'trial_loop.thisIndex'
p4699
g60
(g99
S'I\x00\x00\x00'
tRp4700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4701
I0
sg3642
g3853
sS'block_loop.thisRepN'
p4702
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4703
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4704
Nsg70
Vy
sS'block_loop.thisTrialN'
p4705
I0
sg39
F0.69983353275802074
sg34
g753
(S'\x07\xdf\x07\x07\n\x12\r\x00\xbfh'
tRp4706
sa(dp4707
S'trial_loop.thisTrialN'
p4708
I74
sg3633
g4681
sS'block_loop.thisIndex'
p4709
g3627
sg38
S'left'
p4710
sg59
g63
sS'trial_loop.thisN'
p4711
I74
sg33
g3766
sg64
g65
sS'trial_loop.thisIndex'
p4712
g60
(g99
S'J\x00\x00\x00'
tRp4713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4714
I0
sg3642
g4688
sS'block_loop.thisRepN'
p4715
I1
sg3645
g3766
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4716
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p4717
Nsg70
Vy
sS'block_loop.thisTrialN'
p4718
I0
sg39
F0.81667392234612635
sg34
g753
(S'\x07\xdf\x07\x07\n\x12\x12\x0b\xd3X'
tRp4719
sa(dp4720
S'trial_loop.thisTrialN'
p4721
I75
sg3633
g4575
sS'block_loop.thisIndex'
p4722
g3627
sg38
S'left'
p4723
sg59
g63
sS'trial_loop.thisN'
p4724
I75
sg33
g4180
sg64
g65
sS'trial_loop.thisIndex'
p4725
g60
(g99
S'K\x00\x00\x00'
tRp4726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4727
I0
sg3642
g4582
sS'block_loop.thisRepN'
p4728
I1
sg3645
g4180
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4729
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p4730
Nsg70
Vy
sS'block_loop.thisTrialN'
p4731
I0
sg39
F0.84985219225563924
sg34
g753
(S'\x07\xdf\x07\x07\n\x12\x18\t\x89h'
tRp4732
sa(dp4733
S'trial_loop.thisTrialN'
p4734
I76
sg3633
g4002
sS'block_loop.thisIndex'
p4735
g3627
sg38
S'right'
p4736
sg59
g63
sS'trial_loop.thisN'
p4737
I76
sg33
g3833
sg64
g65
sS'trial_loop.thisIndex'
p4738
g60
(g99
S'L\x00\x00\x00'
tRp4739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4740
I0
sg3642
g4009
sS'block_loop.thisRepN'
p4741
I1
sg3645
g3833
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4742
I1
sg3647
g3840
sg55
g11
sS'block_loop.thisTrial'
p4743
Nsg70
Vy
sS'block_loop.thisTrialN'
p4744
I0
sg39
F2.666604515855397
sg34
g753
(S'\x07\xdf\x07\x07\n\x12\x1e\x07\xb8\x90'
tRp4745
sa(dp4746
S'trial_loop.thisTrialN'
p4747
I77
sg3633
g3878
sS'block_loop.thisIndex'
p4748
g3627
sg38
S'right'
p4749
sg59
g63
sS'trial_loop.thisN'
p4750
I77
sg33
g3888
sg64
g65
sS'trial_loop.thisIndex'
p4751
g60
(g99
S'M\x00\x00\x00'
tRp4752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4753
I0
sg3642
g3886
sS'block_loop.thisRepN'
p4754
I1
sg3645
g3888
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4755
I1
sg3647
g3882
sg55
g11
sS'block_loop.thisTrial'
p4756
Nsg70
Vy
sS'block_loop.thisTrialN'
p4757
I0
sg39
F0.66646396379110229
sg34
g753
(S'\x07\xdf\x07\x07\n\x12&\x03< '
tRp4758
sa(dp4759
S'trial_loop.thisTrialN'
p4760
I78
sg3633
g3722
sS'block_loop.thisIndex'
p4761
g3627
sg38
S'right'
p4762
sg59
g63
sS'trial_loop.thisN'
p4763
I78
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4764
g60
(g99
S'N\x00\x00\x00'
tRp4765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4766
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4767
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4768
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4769
Nsg70
Vy
sS'block_loop.thisTrialN'
p4770
I0
sg39
F0.71662194944292423
sg34
g753
(S'\x07\xdf\x07\x07\n\x12+\r\xd3\x10'
tRp4771
sa(dp4772
S'trial_loop.thisTrialN'
p4773
I79
sg3633
g3929
sS'block_loop.thisIndex'
p4774
g3627
sg38
S'right'
p4775
sg59
g63
sS'trial_loop.thisN'
p4776
I79
sg33
g3939
sg64
g65
sS'trial_loop.thisIndex'
p4777
g60
(g99
S'O\x00\x00\x00'
tRp4778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4779
I0
sg3642
g3937
sS'block_loop.thisRepN'
p4780
I1
sg3645
g3939
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4781
I1
sg3647
g3933
sg55
g11
sS'block_loop.thisTrial'
p4782
Nsg70
Vy
sS'block_loop.thisTrialN'
p4783
I0
sg39
F1.0999866860420298
sg34
g753
(S'\x07\xdf\x07\x07\n\x121\n\x1d\xd8'
tRp4784
sa(dp4785
S'trial_loop.thisTrialN'
p4786
I80
sg3633
S'5-pineapple.png'
p4787
sS'block_loop.thisIndex'
p4788
g3627
sg38
S'right'
p4789
sg59
g63
sS'trial_loop.thisN'
p4790
I80
sg33
g4503
sg64
g65
sS'trial_loop.thisIndex'
p4791
g60
(g99
S'P\x00\x00\x00'
tRp4792
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4793
I0
sg3642
S'40-sardines.png'
p4794
sS'block_loop.thisRepN'
p4795
I1
sg3645
g4503
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4796
I1
sg3647
g4497
sg55
g11
sS'block_loop.thisTrial'
p4797
Nsg70
Vy
sS'block_loop.thisTrialN'
p4798
I0
sg39
F0.96660591282216046
sg34
g753
(S'\x07\xdf\x07\x07\n\x127\x0c\x19\xa8'
tRp4799
sa(dp4800
S'trial_loop.thisTrialN'
p4801
I81
sg3633
S'21-nakd_banana_crunch.png'
p4802
sS'block_loop.thisIndex'
p4803
g3627
sg38
S'left'
p4804
sg59
g63
sS'trial_loop.thisN'
p4805
I81
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4806
g60
(g99
S'Q\x00\x00\x00'
tRp4807
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4808
I0
sg3642
S'1-treacle_cookies.png'
p4809
sS'block_loop.thisRepN'
p4810
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4811
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4812
Nsg70
Vy
sS'block_loop.thisTrialN'
p4813
I0
sg39
F0.84998447655198106
sg34
g753
(S'\x07\xdf\x07\x07\n\x13\x01\x0c1\x18'
tRp4814
sa(dp4815
S'trial_loop.thisTrialN'
p4816
I82
sg3633
g3773
sS'block_loop.thisIndex'
p4817
g3627
sg38
S'right'
p4818
sg59
g63
sS'trial_loop.thisN'
p4819
I82
sg33
g3777
sg64
g65
sS'trial_loop.thisIndex'
p4820
g60
(g99
S'R\x00\x00\x00'
tRp4821
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4822
I0
sg3642
g3781
sS'block_loop.thisRepN'
p4823
I1
sg3645
g3783
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4824
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p4825
Nsg70
Vy
sS'block_loop.thisTrialN'
p4826
I0
sg39
F2.4503442100103712
sg34
g753
(S'\x07\xdf\x07\x07\n\x13\x07\nd('
tRp4827
sa(dp4828
S'trial_loop.thisTrialN'
p4829
I83
sg3633
g4245
sS'block_loop.thisIndex'
p4830
g3627
sg38
S'left'
p4831
sg59
g63
sS'trial_loop.thisN'
p4832
I83
sg33
g4249
sg64
g65
sS'trial_loop.thisIndex'
p4833
g60
(g99
S'S\x00\x00\x00'
tRp4834
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4835
I0
sg3642
g4253
sS'block_loop.thisRepN'
p4836
I1
sg3645
g4249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4837
I1
sg3647
g4256
sg55
g11
sS'block_loop.thisTrial'
p4838
Nsg70
Vy
sS'block_loop.thisTrialN'
p4839
I0
sg39
F0.63300687051560089
sg34
g753
(S'\x07\xdf\x07\x07\n\x13\x0f\x02U\xa8'
tRp4840
sa(dp4841
S'trial_loop.thisTrialN'
p4842
I84
sg3633
g4303
sS'block_loop.thisIndex'
p4843
g3627
sg38
S'left'
p4844
sg59
g63
sS'trial_loop.thisN'
p4845
I84
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4846
g60
(g99
S'T\x00\x00\x00'
tRp4847
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4848
I0
sg3642
g4310
sS'block_loop.thisRepN'
p4849
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4850
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4851
Nsg70
Vy
sS'block_loop.thisTrialN'
p4852
I0
sg39
F0.99988795748231496
sg34
g753
(S'\x07\xdf\x07\x07\n\x13\x14\x0c\xae\x18'
tRp4853
sa(dp4854
S'trial_loop.thisTrialN'
p4855
I85
sg3633
g4101
sS'block_loop.thisIndex'
p4856
g3627
sg38
S'right'
p4857
sg59
g63
sS'trial_loop.thisN'
p4858
I85
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4859
g60
(g99
S'U\x00\x00\x00'
tRp4860
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4861
I0
sg3642
g4108
sS'block_loop.thisRepN'
p4862
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4863
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4864
Nsg70
Vy
sS'block_loop.thisTrialN'
p4865
I0
sg39
F0.86658416003865568
sg34
g753
(S'\x07\xdf\x07\x07\n\x13\x1a\r\x04\x08'
tRp4866
sa(dp4867
S'trial_loop.thisTrialN'
p4868
I86
sg3633
g3739
sS'block_loop.thisIndex'
p4869
g3627
sg38
S'left'
p4870
sg59
g63
sS'trial_loop.thisN'
p4871
I86
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p4872
g60
(g99
S'V\x00\x00\x00'
tRp4873
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4874
I0
sg3642
g3747
sS'block_loop.thisRepN'
p4875
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4876
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p4877
Nsg70
Vy
sS'block_loop.thisTrialN'
p4878
I0
sg39
F1.4332421883127608
sg34
g753
(S'\x07\xdf\x07\x07\n\x13 \x0b\xacH'
tRp4879
sa(dp4880
S'trial_loop.thisTrialN'
p4881
I87
sg3633
g4357
sS'block_loop.thisIndex'
p4882
g3627
sg38
S'left'
p4883
sg59
g63
sS'trial_loop.thisN'
p4884
I87
sg33
g4069
sg64
g65
sS'trial_loop.thisIndex'
p4885
g60
(g99
S'W\x00\x00\x00'
tRp4886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4887
I0
sg3642
g4364
sS'block_loop.thisRepN'
p4888
I1
sg3645
g4062
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4889
I1
sg3647
g4069
sg55
g11
sS'block_loop.thisTrial'
p4890
Nsg70
Vy
sS'block_loop.thisTrialN'
p4891
I0
sg39
F0.84986445136019029
sg34
g753
(S"\x07\xdf\x07\x07\n\x13'\x03k\x00"
tRp4892
sa(dp4893
S'trial_loop.thisTrialN'
p4894
I88
sg3633
g4439
sS'block_loop.thisIndex'
p4895
g3627
sg38
S'right'
p4896
sg59
g63
sS'trial_loop.thisN'
p4897
I88
sg33
g4249
sg64
g65
sS'trial_loop.thisIndex'
p4898
g60
(g99
S'X\x00\x00\x00'
tRp4899
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4900
I0
sg3642
g4446
sS'block_loop.thisRepN'
p4901
I1
sg3645
g4249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4902
I1
sg3647
g4256
sg55
g11
sS'block_loop.thisTrial'
p4903
Nsg70
Vy
sS'block_loop.thisTrialN'
p4904
I0
sg39
F0.66641749323025579
sg34
g753
(S'\x07\xdf\x07\x07\n\x13-\x01\x9a('
tRp4905
sa(dp4906
S'trial_loop.thisTrialN'
p4907
I89
sg3633
g4170
sS'block_loop.thisIndex'
p4908
g3627
sg38
S'right'
p4909
sg59
g63
sS'trial_loop.thisN'
p4910
I89
sg33
g4180
sg64
g65
sS'trial_loop.thisIndex'
p4911
g60
(g99
S'Y\x00\x00\x00'
tRp4912
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4913
I0
sg3642
g4178
sS'block_loop.thisRepN'
p4914
I1
sg3645
g4180
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4915
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p4916
Nsg70
Vy
sS'block_loop.thisTrialN'
p4917
I0
sg39
F0.65001224484967679
sg34
g753
(S'\x07\xdf\x07\x07\n\x132\x0co\x98'
tRp4918
sa(dp4919
S'trial_loop.thisTrialN'
p4920
I90
sg3633
g3722
sS'block_loop.thisIndex'
p4921
g3627
sg38
S'right'
p4922
sg59
g63
sS'trial_loop.thisN'
p4923
I90
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4924
g60
(g99
S'Z\x00\x00\x00'
tRp4925
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4926
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4927
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4928
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4929
Nsg70
Vy
sS'block_loop.thisTrialN'
p4930
I0
sg39
F0.7499977905099513
sg34
g753
(S'\x07\xdf\x07\x07\n\x138\x07\x85\xc8'
tRp4931
sa(dp4932
S'trial_loop.thisTrialN'
p4933
I91
sg3633
g4424
sS'block_loop.thisIndex'
p4934
g3627
sg38
S'right'
p4935
sg59
g63
sS'trial_loop.thisN'
p4936
I91
sg33
g3922
sg64
g65
sS'trial_loop.thisIndex'
p4937
g60
(g99
S'[\x00\x00\x00'
tRp4938
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4939
I0
sg3642
g4431
sS'block_loop.thisRepN'
p4940
I1
sg3645
g3922
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4941
I1
sg3647
g3916
sg55
g11
sS'block_loop.thisTrial'
p4942
Nsg70
Vy
sS'block_loop.thisTrialN'
p4943
I0
sg39
F0.88334150131777278
sg34
g753
(S'\x07\xdf\x07\x07\n\x14\x02\x04I\xa8'
tRp4944
sa(dp4945
S'trial_loop.thisTrialN'
p4946
I92
sg3633
g4202
sS'block_loop.thisIndex'
p4947
g3627
sg38
S'left'
p4948
sg59
g63
sS'trial_loop.thisN'
p4949
I92
sg33
g3783
sg64
g65
sS'trial_loop.thisIndex'
p4950
g60
(g99
S'\\\x00\x00\x00'
tRp4951
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4952
I0
sg3642
g4209
sS'block_loop.thisRepN'
p4953
I1
sg3645
g3783
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4954
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p4955
Nsg70
Vy
sS'block_loop.thisTrialN'
p4956
I0
sg39
F0.79993397189082316
sg34
g753
(S'\x07\xdf\x07\x07\n\x14\x08\x02\xf1\xe8'
tRp4957
sa(dp4958
S'trial_loop.thisTrialN'
p4959
I93
sg3633
g3829
sS'block_loop.thisIndex'
p4960
g3627
sg38
S'left'
p4961
sg59
g63
sS'trial_loop.thisN'
p4962
I93
sg33
g3833
sg64
g65
sS'trial_loop.thisIndex'
p4963
g60
(g99
S']\x00\x00\x00'
tRp4964
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4965
I0
sg3642
g3837
sS'block_loop.thisRepN'
p4966
I1
sg3645
g3833
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4967
I1
sg3647
g3840
sg55
g11
sS'block_loop.thisTrial'
p4968
Nsg70
Vy
sS'block_loop.thisTrialN'
p4969
I0
sg39
F0.80038556310773856
sg34
g753
(S'\x07\xdf\x07\x07\n\x14\x0e\x00m`'
tRp4970
sa(dp4971
S'trial_loop.thisTrialN'
p4972
I94
sg3633
g3705
sS'block_loop.thisIndex'
p4973
g3627
sg38
S'right'
p4974
sg59
g63
sS'trial_loop.thisN'
p4975
I94
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4976
g60
(g99
S'^\x00\x00\x00'
tRp4977
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4978
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4979
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4980
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4981
Nsg70
Vy
sS'block_loop.thisTrialN'
p4982
I0
sg39
F1.1332789941379815
sg34
g753
(S"\x07\xdf\x07\x07\n\x14\x13\r'0"
tRp4983
sa(dp4984
S'trial_loop.thisTrialN'
p4985
I95
sg3633
g4170
sS'block_loop.thisIndex'
p4986
g3627
sg38
S'right'
p4987
sg59
g63
sS'trial_loop.thisN'
p4988
I95
sg33
g4180
sg64
g65
sS'trial_loop.thisIndex'
p4989
g60
(g99
S'_\x00\x00\x00'
tRp4990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4991
I0
sg3642
g4178
sS'block_loop.thisRepN'
p4992
I1
sg3645
g4180
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4993
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p4994
Nsg70
Vy
sS'block_loop.thisTrialN'
p4995
I0
sg39
F0.71667098586294742
sg34
g753
(S'\x07\xdf\x07\x07\n\x14\x1a\x00]\xc0'
tRp4996
sa(dp4997
S'trial_loop.thisTrialN'
p4998
I96
sg3633
g3756
sS'block_loop.thisIndex'
p4999
g3627
sg38
S'right'
p5000
sg59
g63
sS'trial_loop.thisN'
p5001
I96
sg33
g3766
sg64
g65
sS'trial_loop.thisIndex'
p5002
g60
(g99
S'`\x00\x00\x00'
tRp5003
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5004
I0
sg3642
g3764
sS'block_loop.thisRepN'
p5005
I1
sg3645
g3766
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5006
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p5007
Nsg70
Vy
sS'block_loop.thisTrialN'
p5008
I0
sg39
F1.1500736829239031
sg34
g753
(S'\x07\xdf\x07\x07\n\x14\x1f\x0b\xe6\xe0'
tRp5009
sa(dp5010
S'trial_loop.thisTrialN'
p5011
I97
sg3633
g4002
sS'block_loop.thisIndex'
p5012
g3627
sg38
S'right'
p5013
sg59
g63
sS'trial_loop.thisN'
p5014
I97
sg33
g3833
sg64
g65
sS'trial_loop.thisIndex'
p5015
g60
(g99
S'a\x00\x00\x00'
tRp5016
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5017
I0
sg3642
g4009
sS'block_loop.thisRepN'
p5018
I1
sg3645
g3833
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5019
I1
sg3647
g3840
sg55
g11
sS'block_loop.thisTrial'
p5020
Nsg70
Vy
sS'block_loop.thisTrialN'
p5021
I0
sg39
F2.8331892175756366
sg34
g753
(S'\x07\xdf\x07\x07\n\x14%\x0e\x9e0'
tRp5022
sa(dp5023
S'trial_loop.thisTrialN'
p5024
I98
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p5025
sS'block_loop.thisIndex'
p5026
g3627
sg38
S'left'
p5027
sg59
g63
sS'trial_loop.thisN'
p5028
I98
sg33
g3939
sg64
g65
sS'trial_loop.thisIndex'
p5029
g60
(g99
S'b\x00\x00\x00'
tRp5030
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5031
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p5032
sS'block_loop.thisRepN'
p5033
I1
sg3645
g3939
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5034
I1
sg3647
g3933
sg55
g11
sS'block_loop.thisTrial'
p5035
Nsg70
Vy
sS'block_loop.thisTrialN'
p5036
I0
sg39
F1.5837118688377814
sg34
g753
(S'\x07\xdf\x07\x07\n\x14-\x0c\x83 '
tRp5037
sa(dp5038
S'trial_loop.thisTrialN'
p5039
I99
sg3633
g3895
sS'block_loop.thisIndex'
p5040
g3627
sg38
S'left'
p5041
sg59
g63
sS'trial_loop.thisN'
p5042
I99
sg33
g3899
sg64
g65
sS'trial_loop.thisIndex'
p5043
g60
(g99
S'c\x00\x00\x00'
tRp5044
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5045
I0
sg3642
g3903
sS'block_loop.thisRepN'
p5046
I1
sg3645
g3899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5047
I1
sg3647
g3906
sg55
g11
sS'block_loop.thisTrial'
p5048
Nsg70
Vy
sS'block_loop.thisTrialN'
p5049
I0
sg39
F2.4332054109972887
sg34
g753
(S'\x07\xdf\x07\x07\n\x144\x06\xa38'
tRp5050
sa(dp5051
S'trial_loop.thisTrialN'
p5052
I100
sg3633
g3634
sS'block_loop.thisIndex'
p5053
g3627
sg38
S'right'
p5054
sg59
g63
sS'trial_loop.thisN'
p5055
I100
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5056
g60
(g99
S'd\x00\x00\x00'
tRp5057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5058
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5059
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5060
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5061
Nsg70
Vy
sS'block_loop.thisTrialN'
p5062
I0
sg39
F0.89989300367142278
sg34
g753
(S'\x07\xdf\x07\x07\n\x14;\r\xd6\xf8'
tRp5063
sa(dp5064
S'trial_loop.thisTrialN'
p5065
I101
sg3633
g4439
sS'block_loop.thisIndex'
p5066
g3627
sg38
S'right'
p5067
sg59
g63
sS'trial_loop.thisN'
p5068
I101
sg33
g4249
sg64
g65
sS'trial_loop.thisIndex'
p5069
g60
(g99
S'e\x00\x00\x00'
tRp5070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5071
I0
sg3642
g4446
sS'block_loop.thisRepN'
p5072
I1
sg3645
g4249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5073
I1
sg3647
g4256
sg55
g11
sS'block_loop.thisTrial'
p5074
Nsg70
Vy
sS'block_loop.thisTrialN'
p5075
I0
sg39
F0.6996972571250808
sg34
g753
(S'\x07\xdf\x07\x07\n\x15\x05\x0c\xbd\xb8'
tRp5076
sa(dp5077
S'trial_loop.thisTrialN'
p5078
I102
sg3633
g4202
sS'block_loop.thisIndex'
p5079
g3627
sg38
S'left'
p5080
sg59
g63
sS'trial_loop.thisN'
p5081
I102
sg33
g3783
sg64
g65
sS'trial_loop.thisIndex'
p5082
g60
(g99
S'f\x00\x00\x00'
tRp5083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5084
I0
sg3642
g4209
sS'block_loop.thisRepN'
p5085
I1
sg3645
g3783
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5086
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p5087
Nsg70
Vy
sS'block_loop.thisTrialN'
p5088
I0
sg39
F1.7832903837015692
sg34
g753
(S'\x07\xdf\x07\x07\n\x15\x0b\x08\xca\x00'
tRp5089
sa(dp5090
S'trial_loop.thisTrialN'
p5091
I103
sg3633
g4681
sS'block_loop.thisIndex'
p5092
g3627
sg38
S'left'
p5093
sg59
g63
sS'trial_loop.thisN'
p5094
I103
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p5095
g60
(g99
S'g\x00\x00\x00'
tRp5096
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5097
I0
sg3642
g4688
sS'block_loop.thisRepN'
p5098
I1
sg3645
g3766
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5099
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p5100
Nsg70
Vy
sS'block_loop.thisTrialN'
p5101
I0
sg39
F1.2000112897803774
sg34
g753
(S'\x07\xdf\x07\x07\n\x15\x12\x05\xff('
tRp5102
sa(dp5103
S'trial_loop.thisTrialN'
p5104
I104
sg3633
g3739
sS'block_loop.thisIndex'
p5105
g3627
sg38
S'left'
p5106
sg59
g63
sS'trial_loop.thisN'
p5107
I104
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p5108
g60
(g99
S'h\x00\x00\x00'
tRp5109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5110
I0
sg3642
g3747
sS'block_loop.thisRepN'
p5111
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5112
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p5113
Nsg70
Vy
sS'block_loop.thisTrialN'
p5114
I0
sg39
F0.74994989447168336
sg34
g753
(S'\x07\xdf\x07\x07\n\x15\x18\tn\x10'
tRp5115
sa(dp5116
S'trial_loop.thisTrialN'
p5117
I105
sg3633
g4787
sS'block_loop.thisIndex'
p5118
g3627
sg38
S'right'
p5119
sg59
g63
sS'trial_loop.thisN'
p5120
I105
sg33
g4503
sg64
g65
sS'trial_loop.thisIndex'
p5121
g60
(g99
S'i\x00\x00\x00'
tRp5122
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5123
I0
sg3642
g4794
sS'block_loop.thisRepN'
p5124
I1
sg3645
g4503
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5125
I1
sg3647
g4497
sg55
g11
sS'block_loop.thisTrial'
p5126
Nsg70
Vy
sS'block_loop.thisTrialN'
p5127
I0
sg39
F1.0165643316495334
sg34
g753
(S'\x07\xdf\x07\x07\n\x15\x1e\x06.\x08'
tRp5128
sa(dp5129
S'trial_loop.thisTrialN'
p5130
I106
sg3633
g5025
sS'block_loop.thisIndex'
p5131
g3627
sg38
S'left'
p5132
sg59
g63
sS'trial_loop.thisN'
p5133
I106
sg33
g3939
sg64
g65
sS'trial_loop.thisIndex'
p5134
g60
(g99
S'j\x00\x00\x00'
tRp5135
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5136
I0
sg3642
g5032
sS'block_loop.thisRepN'
p5137
I1
sg3645
g3939
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5138
I1
sg3647
g3933
sg55
g11
sS'block_loop.thisTrial'
p5139
Nsg70
Vy
sS'block_loop.thisTrialN'
p5140
I0
sg39
F0.70001314290038863
sg34
g753
(S'\x07\xdf\x07\x07\n\x15$\x06\xfd\x10'
tRp5141
sa(dp5142
S'trial_loop.thisTrialN'
p5143
I107
sg3633
g4058
sS'block_loop.thisIndex'
p5144
g3627
sg38
S'right'
p5145
sg59
g63
sS'trial_loop.thisN'
p5146
I107
sg33
g4062
sg64
g65
sS'trial_loop.thisIndex'
p5147
g60
(g99
S'k\x00\x00\x00'
tRp5148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5149
I0
sg3642
g4066
sS'block_loop.thisRepN'
p5150
I1
sg3645
g4062
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5151
I1
sg3647
g4069
sg55
g11
sS'block_loop.thisTrial'
p5152
Nsg70
Vy
sS'block_loop.thisTrialN'
p5153
I0
sg39
F1.0332002222603478
sg34
g753
(S'\x07\xdf\x07\x07\n\x15*\x02\xca\xd8'
tRp5154
sa(dp5155
S'trial_loop.thisTrialN'
p5156
I108
sg3633
g3959
sS'block_loop.thisIndex'
p5157
g3627
sg38
S'left'
p5158
sg59
g63
sS'trial_loop.thisN'
p5159
I108
sg33
g3963
sg64
g65
sS'trial_loop.thisIndex'
p5160
g60
(g99
S'l\x00\x00\x00'
tRp5161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5162
I0
sg3642
g3967
sS'block_loop.thisRepN'
p5163
I1
sg3645
g3963
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5164
I1
sg3647
g3970
sg55
g11
sS'block_loop.thisTrial'
p5165
Nsg70
Vy
sS'block_loop.thisTrialN'
p5166
I0
sg39
F1.4668706239626772
sg34
g753
(S'\x07\xdf\x07\x07\n\x150\x03\xd8`'
tRp5167
sa(dp5168
S'trial_loop.thisTrialN'
p5169
I109
sg3633
S'13-mccoys_steak_crisps.png'
p5170
sS'block_loop.thisIndex'
p5171
g3627
sg38
S'left'
p5172
sg59
g63
sS'trial_loop.thisN'
p5173
I109
sg33
g3888
sg64
g65
sS'trial_loop.thisIndex'
p5174
g60
(g99
S'm\x00\x00\x00'
tRp5175
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5176
I0
sg3642
S'3-ellas_strawberries_apples.png'
p5177
sS'block_loop.thisRepN'
p5178
I1
sg3645
g3888
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5179
I1
sg3647
g3882
sg55
g11
sS'block_loop.thisTrial'
p5180
Nsg70
Vy
sS'block_loop.thisTrialN'
p5181
I0
sg39
F0.66664785036573448
sg34
g753
(S'\x07\xdf\x07\x07\n\x156\x0b\x8d\x08'
tRp5182
sa(dp5183
S'trial_loop.thisTrialN'
p5184
I110
sg3633
g3929
sS'block_loop.thisIndex'
p5185
g3627
sg38
S'right'
p5186
sg59
g63
sS'trial_loop.thisN'
p5187
I110
sg33
g3939
sg64
g65
sS'trial_loop.thisIndex'
p5188
g60
(g99
S'n\x00\x00\x00'
tRp5189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5190
I0
sg3642
g3937
sS'block_loop.thisRepN'
p5191
I1
sg3645
g3939
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5192
I1
sg3647
g3933
sg55
g11
sS'block_loop.thisTrial'
p5193
Nsg70
Vy
sS'block_loop.thisTrialN'
p5194
I0
sg39
F0.79989206285608816
sg34
g753
(S'\x07\xdf\x07\x07\n\x16\x00\x06\xe1\xb8'
tRp5195
sa(dp5196
S'trial_loop.thisTrialN'
p5197
I111
sg3633
g3654
sS'block_loop.thisIndex'
p5198
g3627
sg38
S'right'
p5199
sg59
g63
sS'trial_loop.thisN'
p5200
I111
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5201
g60
(g99
S'o\x00\x00\x00'
tRp5202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5203
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5204
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5205
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5206
Nsg70
Vy
sS'block_loop.thisTrialN'
p5207
I0
sg39
F1.0165840032359483
sg34
g753
(S'\x07\xdf\x07\x07\n\x16\x06\x04YH'
tRp5208
sa(dp5209
S'trial_loop.thisTrialN'
p5210
I112
sg3633
g4787
sS'block_loop.thisIndex'
p5211
g3627
sg38
S'right'
p5212
sg59
g63
sS'trial_loop.thisN'
p5213
I112
sg33
g4503
sg64
g65
sS'trial_loop.thisIndex'
p5214
g60
(g99
S'p\x00\x00\x00'
tRp5215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5216
I0
sg3642
g4794
sS'block_loop.thisRepN'
p5217
I1
sg3645
g4503
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5218
I1
sg3647
g4497
sg55
g11
sS'block_loop.thisTrial'
p5219
Nsg70
Vy
sS'block_loop.thisTrialN'
p5220
I0
sg39
F3.0831569305146331
sg34
g753
(S'\x07\xdf\x07\x07\n\x16\x0c\x05(P'
tRp5221
sa(dp5222
S'trial_loop.thisTrialN'
p5223
I113
sg3633
g4101
sS'block_loop.thisIndex'
p5224
g3627
sg38
S'right'
p5225
sg59
g63
sS'trial_loop.thisN'
p5226
I113
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5227
g60
(g99
S'q\x00\x00\x00'
tRp5228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5229
I0
sg3642
g4108
sS'block_loop.thisRepN'
p5230
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5231
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5232
Nsg70
Vy
sS'block_loop.thisTrialN'
p5233
I0
sg39
F0.74989544123855012
sg34
g753
(S'\x07\xdf\x07\x07\n\x16\x14\x06\xdd\xd0'
tRp5234
sa(dp5235
S'trial_loop.thisTrialN'
p5236
I114
sg3633
g4681
sS'block_loop.thisIndex'
p5237
g3627
sg38
S'left'
p5238
sg59
g63
sS'trial_loop.thisN'
p5239
I114
sg33
g3766
sg64
g65
sS'trial_loop.thisIndex'
p5240
g60
(g99
S'r\x00\x00\x00'
tRp5241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5242
I0
sg3642
g4688
sS'block_loop.thisRepN'
p5243
I1
sg3645
g3766
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5244
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p5245
Nsg70
Vy
sS'block_loop.thisTrialN'
p5246
I0
sg39
F0.93332671911866782
sg34
g753
(S'\x07\xdf\x07\x07\n\x16\x1a\x03\xa1\xb0'
tRp5247
sa(dp5248
S'trial_loop.thisTrialN'
p5249
I115
sg3633
g3929
sS'block_loop.thisIndex'
p5250
g3627
sg38
S'right'
p5251
sg59
g63
sS'trial_loop.thisN'
p5252
I115
sg33
g3939
sg64
g65
sS'trial_loop.thisIndex'
p5253
g60
(g99
S's\x00\x00\x00'
tRp5254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5255
I0
sg3642
g3937
sS'block_loop.thisRepN'
p5256
I1
sg3645
g3939
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5257
I1
sg3647
g3933
sg55
g11
sS'block_loop.thisTrial'
p5258
Nsg70
Vy
sS'block_loop.thisTrialN'
p5259
I0
sg39
F0.91657764560750365
sg34
g753
(S'\x07\xdf\x07\x07\n\x16 \x03@\x08'
tRp5260
sa(dp5261
S'trial_loop.thisTrialN'
p5262
I116
sg3633
g3912
sS'block_loop.thisIndex'
p5263
g3627
sg38
S'left'
p5264
sg59
g63
sS'trial_loop.thisN'
p5265
I116
sg33
g3922
sg64
g65
sS'trial_loop.thisIndex'
p5266
g60
(g99
S't\x00\x00\x00'
tRp5267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5268
I0
sg3642
g3920
sS'block_loop.thisRepN'
p5269
I1
sg3645
g3922
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5270
I1
sg3647
g3916
sg55
g11
sS'block_loop.thisTrial'
p5271
Nsg70
Vy
sS'block_loop.thisTrialN'
p5272
I0
sg39
F2.2499189616146396
sg34
g753
(S'\x07\xdf\x07\x07\n\x16&\x02a`'
tRp5273
sa(dp5274
S'trial_loop.thisTrialN'
p5275
I117
sg3633
g5170
sS'block_loop.thisIndex'
p5276
g3627
sg38
S'left'
p5277
sg59
g63
sS'trial_loop.thisN'
p5278
I117
sg33
g3888
sg64
g65
sS'trial_loop.thisIndex'
p5279
g60
(g99
S'u\x00\x00\x00'
tRp5280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5281
I0
sg3642
g5177
sS'block_loop.thisRepN'
p5282
I1
sg3645
g3888
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5283
I1
sg3647
g3882
sg55
g11
sS'block_loop.thisTrial'
p5284
Nsg70
Vy
sS'block_loop.thisTrialN'
p5285
I0
sg39
F0.633208147914047
sg34
g753
(S'\x07\xdf\x07\x07\n\x16-\x06\xba\xa8'
tRp5286
sa(dp5287
S'trial_loop.thisTrialN'
p5288
I118
sg3633
g3861
sS'block_loop.thisIndex'
p5289
g3627
sg38
S'right'
p5290
sg59
g63
sS'trial_loop.thisN'
p5291
I118
sg33
g3865
sg64
g65
sS'trial_loop.thisIndex'
p5292
g60
(g99
S'v\x00\x00\x00'
tRp5293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5294
I0
sg3642
g3869
sS'block_loop.thisRepN'
p5295
I1
sg3645
g3865
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5296
I1
sg3647
g3872
sg55
g11
sS'block_loop.thisTrial'
p5297
Nsg70
Vy
sS'block_loop.thisTrialN'
p5298
I0
sg39
F1.1165655575596247
sg34
g753
(S'\x07\xdf\x07\x07\n\x163\x01\x96@'
tRp5299
sa(dp5300
S'trial_loop.thisTrialN'
p5301
I119
sg3633
g4245
sS'block_loop.thisIndex'
p5302
g3627
sg38
S'left'
p5303
sg59
g63
sS'trial_loop.thisN'
p5304
I119
sg33
g4249
sg64
g65
sS'trial_loop.thisIndex'
p5305
g60
(g99
S'w\x00\x00\x00'
tRp5306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5307
I0
sg3642
g4253
sS'block_loop.thisRepN'
p5308
I1
sg3645
g4249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5309
I1
sg3647
g4256
sg55
g11
sS'block_loop.thisTrial'
p5310
Nsg70
Vy
sS'block_loop.thisTrialN'
p5311
I0
sg39
F0.66641549756150198
sg34
g753
(S'\x07\xdf\x07\x07\n\x169\x03\xd4x'
tRp5312
sa(dp5313
S'trial_loop.thisTrialN'
p5314
I120
sg3633
g4787
sS'block_loop.thisIndex'
p5315
g3627
sg38
S'right'
p5316
sg59
g63
sS'trial_loop.thisN'
p5317
I120
sg33
g4503
sg64
g65
sS'trial_loop.thisIndex'
p5318
g60
(g99
S'x\x00\x00\x00'
tRp5319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5320
I0
sg3642
g4794
sS'block_loop.thisRepN'
p5321
I1
sg3645
g4503
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5322
I1
sg3647
g4497
sg55
g11
sS'block_loop.thisTrial'
p5323
Nsg70
Vy
sS'block_loop.thisTrialN'
p5324
I0
sg39
F0.6665788572627207
sg34
g753
(S'\x07\xdf\x07\x07\n\x17\x02\x0e\xa6\x00'
tRp5325
sa(dp5326
S'trial_loop.thisTrialN'
p5327
I121
sg3633
g4058
sS'block_loop.thisIndex'
p5328
g3627
sg38
S'right'
p5329
sg59
g63
sS'trial_loop.thisN'
p5330
I121
sg33
g4062
sg64
g65
sS'trial_loop.thisIndex'
p5331
g60
(g99
S'y\x00\x00\x00'
tRp5332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5333
I0
sg3642
g4066
sS'block_loop.thisRepN'
p5334
I1
sg3645
g4062
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5335
I1
sg3647
g4069
sg55
g11
sS'block_loop.thisTrial'
p5336
Nsg70
Vy
sS'block_loop.thisTrialN'
p5337
I0
sg39
F0.81662773688094603
sg34
g753
(S'\x07\xdf\x07\x07\n\x17\x08\t\xfa\xb0'
tRp5338
sa(dp5339
S'trial_loop.thisTrialN'
p5340
I122
sg3633
g3895
sS'block_loop.thisIndex'
p5341
g3627
sg38
S'left'
p5342
sg59
g63
sS'trial_loop.thisN'
p5343
I122
sg33
g3899
sg64
g65
sS'trial_loop.thisIndex'
p5344
g60
(g99
S'z\x00\x00\x00'
tRp5345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5346
I0
sg3642
g3903
sS'block_loop.thisRepN'
p5347
I1
sg3645
g3899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5348
I1
sg3647
g3906
sg55
g11
sS'block_loop.thisTrial'
p5349
Nsg70
Vy
sS'block_loop.thisTrialN'
p5350
I0
sg39
F0.86667282472899387
sg34
g753
(S'\x07\xdf\x07\x07\n\x17\x0e\x07\xb0\xc0'
tRp5351
sa(dp5352
S'trial_loop.thisTrialN'
p5353
I123
sg3633
g3705
sS'block_loop.thisIndex'
p5354
g3627
sg38
S'right'
p5355
sg59
g63
sS'trial_loop.thisN'
p5356
I123
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5357
g60
(g99
S'{\x00\x00\x00'
tRp5358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5359
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5360
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5361
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5362
Nsg70
Vy
sS'block_loop.thisTrialN'
p5363
I0
sg39
F0.64986855673578248
sg34
g753
(S'\x07\xdf\x07\x07\n\x17\x14\x06\x1eh'
tRp5364
sa(dp5365
S'trial_loop.thisTrialN'
p5366
I124
sg3633
g4187
sS'block_loop.thisIndex'
p5367
g3627
sg38
S'right'
p5368
sg59
g63
sS'trial_loop.thisN'
p5369
I124
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5370
g60
(g99
S'|\x00\x00\x00'
tRp5371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5372
I0
sg3642
g4194
sS'block_loop.thisRepN'
p5373
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5374
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5375
Nsg70
Vy
sS'block_loop.thisTrialN'
p5376
I0
sg39
F0.9170149820520237
sg34
g753
(S'\x07\xdf\x07\x07\n\x17\x1a\x01s\x18'
tRp5377
sa(dp5378
S'trial_loop.thisTrialN'
p5379
I125
sg3633
g4275
sS'block_loop.thisIndex'
p5380
g3627
sg38
S'left'
p5381
sg59
g63
sS'trial_loop.thisN'
p5382
I125
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5383
g60
(g99
S'}\x00\x00\x00'
tRp5384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5385
I0
sg3642
g4282
sS'block_loop.thisRepN'
p5386
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5387
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5388
Nsg70
Vy
sS'block_loop.thisTrialN'
p5389
I0
sg39
F0.68325551652560534
sg34
g753
(S'\x07\xdf\x07\x07\n\x17 \x00\x98X'
tRp5390
sa(dp5391
S'trial_loop.thisTrialN'
p5392
I126
sg3633
g3756
sS'block_loop.thisIndex'
p5393
g3627
sg38
S'right'
p5394
sg59
g63
sS'trial_loop.thisN'
p5395
I126
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p5396
g60
(g99
S'~\x00\x00\x00'
tRp5397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5398
I0
sg3642
g3764
sS'block_loop.thisRepN'
p5399
I1
sg3645
g3766
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5400
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p5401
Nsg70
Vy
sS'block_loop.thisTrialN'
p5402
I0
sg39
F1.5166408797813347
sg34
g753
(S'\x07\xdf\x07\x07\n\x17%\x0b\xa8`'
tRp5403
sa(dp5404
S'trial_loop.thisTrialN'
p5405
I127
sg3633
g4017
sS'block_loop.thisIndex'
p5406
g3627
sg38
S'right'
p5407
sg59
g63
sS'trial_loop.thisN'
p5408
I127
sg33
g3899
sg64
g65
sS'trial_loop.thisIndex'
p5409
g60
(g99
S'\x7f\x00\x00\x00'
tRp5410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5411
I0
sg3642
g4024
sS'block_loop.thisRepN'
p5412
I1
sg3645
g3899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5413
I1
sg3647
g3906
sg55
g11
sS'block_loop.thisTrial'
p5414
Nsg70
Vy
sS'block_loop.thisTrialN'
p5415
I0
sg39
F0.79999783327457408
sg34
g753
(S'\x07\xdf\x07\x07\n\x17,\x04\x93\xe0'
tRp5416
sa(dp5417
S'trial_loop.thisTrialN'
p5418
I128
sg3633
g4187
sS'block_loop.thisIndex'
p5419
g3627
sg38
S'right'
p5420
sg59
g63
sS'trial_loop.thisN'
p5421
I128
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5422
g60
(g99
S'\x80\x00\x00\x00'
tRp5423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5424
I0
sg3642
g4194
sS'block_loop.thisRepN'
p5425
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5426
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5427
Nsg70
Vy
sS'block_loop.thisTrialN'
p5428
I0
sg39
F0.68334047497410211
sg34
g753
(S'\x07\xdf\x07\x07\n\x172\x02\x0fX'
tRp5429
sa(dp5430
S'trial_loop.thisTrialN'
p5431
I129
sg3633
g4170
sS'block_loop.thisIndex'
p5432
g3627
sg38
S'right'
p5433
sg59
g63
sS'trial_loop.thisN'
p5434
I129
sg33
g4180
sg64
g65
sS'trial_loop.thisIndex'
p5435
g60
(g99
S'\x81\x00\x00\x00'
tRp5436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5437
I0
sg3642
g4178
sS'block_loop.thisRepN'
p5438
I1
sg3645
g4180
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5439
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p5440
Nsg70
Vy
sS'block_loop.thisTrialN'
p5441
I0
sg39
F0.58332470919503976
sg34
g753
(S'\x07\xdf\x07\x07\n\x177\r\x1f`'
tRp5442
sa(dp5443
S'trial_loop.thisTrialN'
p5444
I130
sg3633
g5025
sS'block_loop.thisIndex'
p5445
g3627
sg38
S'left'
p5446
sg59
g63
sS'trial_loop.thisN'
p5447
I130
sg33
g3939
sg64
g65
sS'trial_loop.thisIndex'
p5448
g60
(g99
S'\x82\x00\x00\x00'
tRp5449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5450
I0
sg3642
g5032
sS'block_loop.thisRepN'
p5451
I1
sg3645
g3939
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5452
I1
sg3647
g3933
sg55
g11
sS'block_loop.thisTrial'
p5453
Nsg70
Vy
sS'block_loop.thisTrialN'
p5454
I0
sg39
F0.86704458921576588
sg34
g753
(S'\x07\xdf\x07\x07\n\x18\x01\x07C`'
tRp5455
sa(dp5456
S'trial_loop.thisTrialN'
p5457
I131
sg3633
g3912
sS'block_loop.thisIndex'
p5458
g3627
sg38
S'left'
p5459
sg59
g63
sS'trial_loop.thisN'
p5460
I131
sg33
g3922
sg64
g65
sS'trial_loop.thisIndex'
p5461
g60
(g99
S'\x83\x00\x00\x00'
tRp5462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5463
I0
sg3642
g3920
sS'block_loop.thisRepN'
p5464
I1
sg3645
g3922
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5465
I1
sg3647
g3916
sg55
g11
sS'block_loop.thisTrial'
p5466
Nsg70
Vy
sS'block_loop.thisTrialN'
p5467
I0
sg39
F0.76666561181355064
sg34
g753
(S'\x07\xdf\x07\x07\n\x18\x07\x05\xb1\x08'
tRp5468
sa(dp5469
S'trial_loop.thisTrialN'
p5470
I132
sg3633
g4230
sS'block_loop.thisIndex'
p5471
g3627
sg38
S'right'
p5472
sg59
g63
sS'trial_loop.thisN'
p5473
I132
sg33
g3963
sg64
g65
sS'trial_loop.thisIndex'
p5474
g60
(g99
S'\x84\x00\x00\x00'
tRp5475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5476
I0
sg3642
g4237
sS'block_loop.thisRepN'
p5477
I1
sg3645
g3963
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5478
I1
sg3647
g3970
sg55
g11
sS'block_loop.thisTrial'
p5479
Nsg70
Vy
sS'block_loop.thisTrialN'
p5480
I0
sg39
F1.4665065570534352
sg34
g753
(S'\x07\xdf\x07\x07\n\x18\r\x02\xaf\x80'
tRp5481
sa(dp5482
S'trial_loop.thisTrialN'
p5483
I133
sg3633
g3688
sS'block_loop.thisIndex'
p5484
g3627
sg38
S'left'
p5485
sg59
g63
sS'trial_loop.thisN'
p5486
I133
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5487
g60
(g99
S'\x85\x00\x00\x00'
tRp5488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5489
I0
sg3642
g3696
sS'block_loop.thisRepN'
p5490
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5491
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5492
Nsg70
Vy
sS'block_loop.thisTrialN'
p5493
I0
sg39
F0.68328687702796742
sg34
g753
(S'\x07\xdf\x07\x07\n\x18\x13\n)\x90'
tRp5494
sa(dp5495
S'trial_loop.thisTrialN'
p5496
I134
sg3633
g4493
sS'block_loop.thisIndex'
p5497
g3627
sg38
S'left'
p5498
sg59
g63
sS'trial_loop.thisN'
p5499
I134
sg33
g4503
sg64
g65
sS'trial_loop.thisIndex'
p5500
g60
(g99
S'\x86\x00\x00\x00'
tRp5501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5502
I0
sg3642
g4501
sS'block_loop.thisRepN'
p5503
I1
sg3645
g4503
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5504
I1
sg3647
g4497
sg55
g11
sS'block_loop.thisTrial'
p5505
Nsg70
Vy
sS'block_loop.thisTrialN'
p5506
I0
sg39
F0.81658468746536528
sg34
g753
(S'\x07\xdf\x07\x07\n\x18\x19\x05\xf7X'
tRp5507
sa(dp5508
S'trial_loop.thisTrialN'
p5509
I135
sg3633
g5170
sS'block_loop.thisIndex'
p5510
g3627
sg38
S'left'
p5511
sg59
g63
sS'trial_loop.thisN'
p5512
I135
sg33
g3888
sg64
g65
sS'trial_loop.thisIndex'
p5513
g60
(g99
S'\x87\x00\x00\x00'
tRp5514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5515
I0
sg3642
g5177
sS'block_loop.thisRepN'
p5516
I1
sg3645
g3888
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5517
I1
sg3647
g3882
sg55
g11
sS'block_loop.thisTrial'
p5518
Nsg70
Vy
sS'block_loop.thisTrialN'
p5519
I0
sg39
F0.68331139523706952
sg34
g753
(S'\x07\xdf\x07\x07\n\x18\x1f\x03\xadh'
tRp5520
sa(dp5521
S'trial_loop.thisTrialN'
p5522
I136
sg3633
g4493
sS'block_loop.thisIndex'
p5523
g3627
sg38
S'left'
p5524
sg59
g63
sS'trial_loop.thisN'
p5525
I136
sg33
g4503
sg64
g65
sS'trial_loop.thisIndex'
p5526
g60
(g99
S'\x88\x00\x00\x00'
tRp5527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5528
I0
sg3642
g4501
sS'block_loop.thisRepN'
p5529
I1
sg3645
g4503
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5530
I1
sg3647
g4497
sg55
g11
sS'block_loop.thisTrial'
p5531
Nsg70
Vy
sS'block_loop.thisTrialN'
p5532
I0
sg39
F0.70001285780563194
sg34
g753
(S'\x07\xdf\x07\x07\n\x18$\x0e~\xf0'
tRp5533
sa(dp5534
S'trial_loop.thisTrialN'
p5535
I137
sg3633
g3722
sS'block_loop.thisIndex'
p5536
g3627
sg38
S'right'
p5537
sg59
g63
sS'trial_loop.thisN'
p5538
I137
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5539
g60
(g99
S'\x89\x00\x00\x00'
tRp5540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5541
I0
sg3642
g3730
sS'block_loop.thisRepN'
p5542
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5543
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5544
Nsg70
Vy
sS'block_loop.thisTrialN'
p5545
I0
sg39
F0.83325621500989655
sg34
g753
(S'\x07\xdf\x07\x07\n\x18*\n\x8b8'
tRp5546
sa(dp5547
S'trial_loop.thisTrialN'
p5548
I138
sg3633
g3959
sS'block_loop.thisIndex'
p5549
g3627
sg38
S'left'
p5550
sg59
g63
sS'trial_loop.thisN'
p5551
I138
sg33
g3963
sg64
g65
sS'trial_loop.thisIndex'
p5552
g60
(g99
S'\x8a\x00\x00\x00'
tRp5553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5554
I0
sg3642
g3967
sS'block_loop.thisRepN'
p5555
I1
sg3645
g3963
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5556
I1
sg3647
g3970
sg55
g11
sS'block_loop.thisTrial'
p5557
Nsg70
Vy
sS'block_loop.thisTrialN'
p5558
I0
sg39
F1.1999197741361058
sg34
g753
(S'\x07\xdf\x07\x07\n\x180\x08\x7f\xc8'
tRp5559
sa(dp5560
S'trial_loop.thisTrialN'
p5561
I139
sg3633
g3739
sS'block_loop.thisIndex'
p5562
g3627
sg38
S'left'
p5563
sg59
g63
sS'trial_loop.thisN'
p5564
I139
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p5565
g60
(g99
S'\x8b\x00\x00\x00'
tRp5566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5567
I0
sg3642
g3747
sS'block_loop.thisRepN'
p5568
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5569
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p5570
Nsg70
Vy
sS'block_loop.thisTrialN'
p5571
I0
sg39
F0.69987088026391575
sg34
g753
(S'\x07\xdf\x07\x07\n\x186\x0b\xea\xc8'
tRp5572
sa(dp5573
S'trial_loop.thisTrialN'
p5574
I140
sg3633
g3829
sS'block_loop.thisIndex'
p5575
g3627
sg38
S'left'
p5576
sg59
g63
sS'trial_loop.thisN'
p5577
I140
sg33
g3833
sg64
g65
sS'trial_loop.thisIndex'
p5578
g60
(g99
S'\x8c\x00\x00\x00'
tRp5579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5580
I0
sg3642
g3837
sS'block_loop.thisRepN'
p5581
I1
sg3645
g3833
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5582
I1
sg3647
g3840
sg55
g11
sS'block_loop.thisTrial'
p5583
Nsg70
Vy
sS'block_loop.thisTrialN'
p5584
I0
sg39
F0.65000283669905912
sg34
g753
(S'\x07\xdf\x07\x07\n\x19\x00\x07\xf7\x10'
tRp5585
sa(dp5586
S'trial_loop.thisTrialN'
p5587
I141
sg3633
g4357
sS'block_loop.thisIndex'
p5588
g3627
sg38
S'left'
p5589
sg59
g63
sS'trial_loop.thisN'
p5590
I141
sg33
g4062
sg64
g65
sS'trial_loop.thisIndex'
p5591
g60
(g99
S'\x8d\x00\x00\x00'
tRp5592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5593
I0
sg3642
g4364
sS'block_loop.thisRepN'
p5594
I1
sg3645
g4062
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5595
I1
sg3647
g4069
sg55
g11
sS'block_loop.thisTrial'
p5596
Nsg70
Vy
sS'block_loop.thisTrialN'
p5597
I0
sg39
F0.96648588763218868
sg34
g753
(S'\x07\xdf\x07\x07\n\x19\x06\x03\r@'
tRp5598
sa(dp5599
S'trial_loop.thisTrialN'
p5600
I142
sg3633
g4275
sS'block_loop.thisIndex'
p5601
g3627
sg38
S'left'
p5602
sg59
g63
sS'trial_loop.thisN'
p5603
I142
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5604
g60
(g99
S'\x8e\x00\x00\x00'
tRp5605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5606
I0
sg3642
g4282
sS'block_loop.thisRepN'
p5607
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5608
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5609
Nsg70
Vy
sS'block_loop.thisTrialN'
p5610
I0
sg39
F0.81696215386273252
sg34
g753
(S'\x07\xdf\x07\x07\n\x19\x0c\x03$\xb0'
tRp5611
sa(dp5612
S'trial_loop.thisTrialN'
p5613
I143
sg3633
g4424
sS'block_loop.thisIndex'
p5614
g3627
sg38
S'right'
p5615
sg59
g63
sS'trial_loop.thisN'
p5616
I143
sg33
g3916
sg64
g65
sS'trial_loop.thisIndex'
p5617
g60
(g99
S'\x8f\x00\x00\x00'
tRp5618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5619
I0
sg3642
g4431
sS'block_loop.thisRepN'
p5620
I1
sg3645
g3922
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5621
I1
sg3647
g3916
sg55
g11
sS'block_loop.thisTrial'
p5622
Nsg70
Vy
sS'block_loop.thisTrialN'
p5623
I0
sg39
F0.84998903807991155
sg34
g753
(S'\x07\xdf\x07\x07\n\x19\x12\x00\xda\xc0'
tRp5624
sa(dp5625
S'trial_loop.thisTrialN'
p5626
I144
sg3633
g4802
sS'block_loop.thisIndex'
p5627
g3627
sg38
S'left'
p5628
sg59
g63
sS'trial_loop.thisN'
p5629
I144
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5630
g60
(g99
S'\x90\x00\x00\x00'
tRp5631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5632
I0
sg3642
g4809
sS'block_loop.thisRepN'
p5633
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5634
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5635
Nsg70
Vy
sS'block_loop.thisTrialN'
p5636
I0
sg39
F0.8000306192525386
sg34
g753
(S'\x07\xdf\x07\x07\n\x19\x17\x0eP\x10'
tRp5637
sa(dp5638
S'trial_loop.thisTrialN'
p5639
I145
sg3633
g4681
sS'block_loop.thisIndex'
p5640
g3627
sg38
S'left'
p5641
sg59
g63
sS'trial_loop.thisN'
p5642
I145
sg33
g3766
sg64
g65
sS'trial_loop.thisIndex'
p5643
g60
(g99
S'\x91\x00\x00\x00'
tRp5644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5645
I0
sg3642
g4688
sS'block_loop.thisRepN'
p5646
I1
sg3645
g3766
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5647
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p5648
Nsg70
Vy
sS'block_loop.thisTrialN'
p5649
I0
sg39
F0.8166151926798193
sg34
g753
(S'\x07\xdf\x07\x07\n\x19\x1d\x0b\xc7\xa0'
tRp5650
sa(dp5651
S'trial_loop.thisTrialN'
p5652
I146
sg3633
g4230
sS'block_loop.thisIndex'
p5653
g3627
sg38
S'right'
p5654
sg59
g63
sS'trial_loop.thisN'
p5655
I146
sg33
g3963
sg64
g65
sS'trial_loop.thisIndex'
p5656
g60
(g99
S'\x92\x00\x00\x00'
tRp5657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5658
I0
sg3642
g4237
sS'block_loop.thisRepN'
p5659
I1
sg3645
g3963
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5660
I1
sg3647
g3970
sg55
g11
sS'block_loop.thisTrial'
p5661
Nsg70
Vy
sS'block_loop.thisTrialN'
p5662
I0
sg39
F0.76655642025070847
sg34
g753
(S'\x07\xdf\x07\x07\n\x19#\t}\xb0'
tRp5663
sa(dp5664
S'trial_loop.thisTrialN'
p5665
I147
sg3633
S'4-corn.png'
p5666
sS'block_loop.thisIndex'
p5667
g3627
sg38
S'right'
p5668
sg59
g63
sS'trial_loop.thisN'
p5669
I147
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p5670
g60
(g99
S'\x93\x00\x00\x00'
tRp5671
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5672
I0
sg3642
S'10-bounty_redo.png'
p5673
sS'block_loop.thisRepN'
p5674
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5675
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vy
sS'block_loop.thisTrialN'
p5677
I0
sg39
F0.88330187304836727
sg34
g753
(S'\x07\xdf\x07\x07\n\x19)\x06|('
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g4202
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'left'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g3777
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g4209
sS'block_loop.thisRepN'
p5687
I1
sg3645
g3783
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5688
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vy
sS'block_loop.thisTrialN'
p5690
I0
sg39
F1.2669850612828668
sg34
g753
(S'\x07\xdf\x07\x07\n\x19/\x05(P'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g4142
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'left'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g3872
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g4149
sS'block_loop.thisRepN'
p5700
I1
sg3645
g3865
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5701
I1
sg3647
g3872
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vy
sS'block_loop.thisTrialN'
p5703
I0
sg39
F0.88315020226036722
sg34
g753
(S'\x07\xdf\x07\x07\n\x195\t\xc4\x00'
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g5025
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'left'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g3933
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g5032
sS'block_loop.thisRepN'
p5713
I1
sg3645
g3939
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5714
I1
sg3647
g3933
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vy
sS'block_loop.thisTrialN'
p5716
I0
sg39
F0.9166232608813516
sg34
g753
(S'\x07\xdf\x07\x07\n\x19;\x08p('
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g4101
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'right'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g4108
sS'block_loop.thisRepN'
p5726
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5727
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vy
sS'block_loop.thisTrialN'
p5729
I0
sg39
F0.83327873755206383
sg34
g753
(S'\x07\xdf\x07\x07\n\x1a\x05\x07\xd0\x00'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g5666
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'right'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g5673
sS'block_loop.thisRepN'
p5739
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5740
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vy
sS'block_loop.thisTrialN'
p5742
I0
sg39
F0.883221476127801
sg34
g753
(S'\x07\xdf\x07\x07\n\x1a\x0b\x05\xc0\xa8'
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g4002
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'right'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g3833
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g4009
sS'block_loop.thisRepN'
p5752
I1
sg3645
g3833
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5753
I1
sg3647
g3840
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vy
sS'block_loop.thisTrialN'
p5755
I0
sg39
F1.2330931974229316
sg34
g753
(S'\x07\xdf\x07\x07\n\x1a\x11\x04l\xd0'
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g5666
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'right'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g5673
sS'block_loop.thisRepN'
p5765
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5766
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vy
sS'block_loop.thisTrialN'
p5768
I0
sg39
F2.2333016022075753
sg34
g753
(S'\x07\xdf\x07\x07\n\x1a\x17\x08\x8fh'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g3705
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'right'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5778
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5779
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vy
sS'block_loop.thisTrialN'
p5781
I0
sg39
F0.66666638157130365
sg34
g753
(S'\x07\xdf\x07\x07\n\x1a\x1e\x0co\x98'
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g3912
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'left'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g3922
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g3920
sS'block_loop.thisRepN'
p5791
I1
sg3645
g3922
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5792
I1
sg3647
g3916
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vy
sS'block_loop.thisTrialN'
p5794
I0
sg39
F0.8665858706117433
sg34
g753
(S'\x07\xdf\x07\x07\n\x1a$\x08\x02\xc8'
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g4439
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'right'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g4249
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g4446
sS'block_loop.thisRepN'
p5804
I1
sg3645
g4249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5805
I1
sg3647
g4256
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vy
sS'block_loop.thisTrialN'
p5807
I0
sg39
F0.6496310722131966
sg34
g753
(S'\x07\xdf\x07\x07\n\x1a*\x06l\x88'
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g4802
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'left'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g4809
sS'block_loop.thisRepN'
p5817
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5818
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vy
sS'block_loop.thisTrialN'
p5820
I0
sg39
F1.3836806223753229
sg34
g753
(S'\x07\xdf\x07\x07\n\x1a0\x01\x86\xa0'
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g4058
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'right'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g4062
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g4066
sS'block_loop.thisRepN'
p5830
I1
sg3645
g4062
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5831
I1
sg3647
g4069
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vy
sS'block_loop.thisTrialN'
p5833
I0
sg39
F0.96666549777546606
sg34
g753
(S'\x07\xdf\x07\x07\n\x1a6\x08\n\x98'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g4275
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'left'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g4282
sS'block_loop.thisRepN'
p5843
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5844
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vy
sS'block_loop.thisTrialN'
p5846
I0
sg39
F0.70006331970307656
sg34
g753
(S'\x07\xdf\x07\x07\n\x1b\x00\x07\xe3\x88'
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g4802
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'right'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g4809
sS'block_loop.thisRepN'
p5856
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5857
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vy
sS'block_loop.thisTrialN'
p5859
I0
sg39
F1.0000037062409319
sg34
g753
(S'\x07\xdf\x07\x07\n\x1b\x06\x03\xef\xd0'
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g5170
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'left'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g3888
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g5177
sS'block_loop.thisRepN'
p5869
I1
sg3645
g3888
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5870
I1
sg3647
g3882
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vy
sS'block_loop.thisTrialN'
p5872
I0
sg39
F0.64998345020740089
sg34
g753
(S'\x07\xdf\x07\x07\n\x1b\x0c\x04E\xc0'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g4230
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'right'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g3963
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g4237
sS'block_loop.thisRepN'
p5882
I1
sg3645
g3963
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5883
I1
sg3647
g3970
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vy
sS'block_loop.thisTrialN'
p5885
I0
sg39
F0.84999958661137498
sg34
g753
(S'\x07\xdf\x07\x07\n\x1b\x11\x0e\xdc\xb0'
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g3705
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'right'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5895
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5896
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vy
sS'block_loop.thisTrialN'
p5898
I0
sg39
F0.80025612976623961
sg34
g753
(S'\x07\xdf\x07\x07\n\x1b\x17\r\x0b\xd8'
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g3829
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'left'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g3833
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g3837
sS'block_loop.thisRepN'
p5908
I1
sg3645
g3833
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5909
I1
sg3647
g3840
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vy
sS'block_loop.thisTrialN'
p5911
I0
sg39
F0.7666111585795079
sg34
g753
(S'\x07\xdf\x07\x07\n\x1b\x1d\n\x83h'
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g3634
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'right'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5921
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5922
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vy
sS'block_loop.thisTrialN'
p5924
I0
sg39
F1.0666521838165863
sg34
g753
(S'\x07\xdf\x07\x07\n\x1b#\x07\x85\xc8'
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g3671
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'left'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5934
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5935
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vy
sS'block_loop.thisTrialN'
p5937
I0
sg39
F0.89979664140446403
sg34
g753
(S'\x07\xdf\x07\x07\n\x1b)\t\x08\x80'
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g4230
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'right'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g3963
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g4237
sS'block_loop.thisRepN'
p5947
I1
sg3645
g3963
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5948
I1
sg3647
g3970
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vy
sS'block_loop.thisTrialN'
p5950
I0
sg39
F0.80000895199736988
sg34
g753
(S'\x07\xdf\x07\x07\n\x1b/\x07\xef@'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g3773
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'right'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g3783
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g3781
sS'block_loop.thisRepN'
p5960
I1
sg3645
g3783
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5961
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vy
sS'block_loop.thisTrialN'
p5963
I0
sg39
F0.73330374042416224
sg34
g753
(S'\x07\xdf\x07\x07\n\x1b5\x05j\xb8'
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g3671
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'left'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5973
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5974
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vy
sS'block_loop.thisTrialN'
p5976
I0
sg39
F1.2169872992817545
sg34
g753
(S'\x07\xdf\x07\x07\n\x1b;\x01\xf0\x18'
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g3634
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'right'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5986
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5987
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vy
sS'block_loop.thisTrialN'
p5989
I0
sg39
F0.71658260626827541
sg34
g753
(S'\x07\xdf\x07\x07\n\x1c\x05\x05\x99\x98'
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g3861
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'right'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g3872
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g3869
sS'block_loop.thisRepN'
p5999
I1
sg3645
g3865
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6000
I1
sg3647
g3872
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vy
sS'block_loop.thisTrialN'
p6002
I0
sg39
F1.0997794216382317
sg34
g753
(S'\x07\xdf\x07\x07\n\x1c\x0b\x01\xe0x'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g4303
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'left'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g4310
sS'block_loop.thisRepN'
p6012
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6013
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vy
sS'block_loop.thisTrialN'
p6015
I0
sg39
F0.63325575885755825
sg34
g753
(S'\x07\xdf\x07\x07\n\x1c\x11\x03\xe00'
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g4493
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'left'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g4497
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g4501
sS'block_loop.thisRepN'
p6025
I1
sg3645
g4503
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6026
I1
sg3647
g4497
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vy
sS'block_loop.thisTrialN'
p6028
I0
sg39
F0.81654135295502783
sg34
g753
(S'\x07\xdf\x07\x07\n\x1c\x16\r\xfe\x08'
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g4303
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'left'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g4310
sS'block_loop.thisRepN'
p6038
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6039
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vy
sS'block_loop.thisTrialN'
p6041
I0
sg39
F0.68324012137054524
sg34
g753
(S'\x07\xdf\x07\x07\n\x1c\x1c\x0b\xb4\x18'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g3722
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'right'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g3730
sS'block_loop.thisRepN'
p6051
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6052
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vy
sS'block_loop.thisTrialN'
p6054
I0
sg39
F0.91655426777924731
sg34
g753
(S'\x07\xdf\x07\x07\n\x1c"\x07\x81\xe0'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g4142
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'left'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g3865
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g4149
sS'block_loop.thisRepN'
p6064
I1
sg3645
g3865
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6065
I1
sg3647
g3872
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vy
sS'block_loop.thisTrialN'
p6067
I0
sg39
F1.1663506383438289
sg34
g753
(S'\x07\xdf\x07\x07\n\x1c(\x06\xa7 '
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g4575
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'left'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g4180
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g4582
sS'block_loop.thisRepN'
p6077
I1
sg3645
g4180
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6078
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vy
sS'block_loop.thisTrialN'
p6080
I0
sg39
F0.63336295475255611
sg34
g753
(S'\x07\xdf\x07\x07\n\x1c.\t\x99\x08'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g4187
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'right'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g4194
sS'block_loop.thisRepN'
p6090
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6091
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vy
sS'block_loop.thisTrialN'
p6093
I0
sg39
F0.66668035124894232
sg34
g753
(S'\x07\xdf\x07\x07\n\x1c4\x04\xaf8'
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g4575
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'left'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g4180
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g4582
sS'block_loop.thisRepN'
p6103
I1
sg3645
g4180
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6104
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vy
sS'block_loop.thisTrialN'
p6106
I0
sg39
F0.61668002338956285
sg34
g753
(S'\x07\xdf\x07\x07\n\x1c:\x00\x03\xe8'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g4017
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'right'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g3899
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g4024
sS'block_loop.thisRepN'
p6116
I1
sg3645
g3899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6117
I1
sg3647
g3906
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vy
sS'block_loop.thisTrialN'
p6119
I0
sg39
F0.89989072290882177
sg34
g753
(S'\x07\xdf\x07\x07\n\x1d\x03\t\xe3@'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g5666
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'right'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g5673
sS'block_loop.thisRepN'
p6129
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6130
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vy
sS'block_loop.thisTrialN'
p6132
I0
sg39
F0.81682587822979258
sg34
g753
(S'\x07\xdf\x07\x07\n\x1d\t\t\x08\x80'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g4245
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'left'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g4249
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g4253
sS'block_loop.thisRepN'
p6142
I1
sg3645
g4249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6143
I1
sg3647
g4256
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vy
sS'block_loop.thisTrialN'
p6145
I0
sg39
F0.78301840262702171
sg34
g753
(S'\x07\xdf\x07\x07\n\x1d\x0f\x06\xbe\x90'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g4802
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'right'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g4809
sS'block_loop.thisRepN'
p6155
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6156
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vy
sS'block_loop.thisTrialN'
p6158
I0
sg39
F1.1498467469327807
sg34
g753
(S'\x07\xdf\x07\x07\n\x1d\x15\x03\xbd\x08'
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g4245
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'left'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g4249
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g4253
sS'block_loop.thisRepN'
p6168
I1
sg3645
g4249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6169
I1
sg3647
g4256
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vy
sS'block_loop.thisTrialN'
p6171
I0
sg39
F1.6330530559816907
sg34
g753
(S'\x07\xdf\x07\x07\n\x1d\x1b\x06\xb2\xd8'
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g3654
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'left'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g3662
sS'block_loop.thisRepN'
p6181
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6182
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vy
sS'block_loop.thisTrialN'
p6184
I0
sg39
F1.2500007840126273
sg34
g753
(S'\x07\xdf\x07\x07\n\x1d"\x01\x86\xa0'
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g5025
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'left'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g3939
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g5032
sS'block_loop.thisRepN'
p6194
I1
sg3645
g3939
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6195
I1
sg3647
g3933
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vy
sS'block_loop.thisTrialN'
p6197
I0
sg39
F1.1000214676887481
sg34
g753
(S'\x07\xdf\x07\x07\n\x1d(\x05\xe7\xb8'
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g4017
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'right'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g3906
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g4024
sS'block_loop.thisRepN'
p6207
I1
sg3645
g3899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6208
I1
sg3647
g3906
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vy
sS'block_loop.thisTrialN'
p6210
I0
sg39
F0.71645716426337458
sg34
g753
(S'\x07\xdf\x07\x07\n\x1d.\x07\xe3\x88'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g3861
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'right'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g3865
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g3869
sS'block_loop.thisRepN'
p6220
I1
sg3645
g3865
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6221
I1
sg3647
g3872
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vy
sS'block_loop.thisTrialN'
p6223
I0
sg39
F1.033211911174476
sg34
g753
(S'\x07\xdf\x07\x07\n\x1d4\x04.P'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g4357
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'left'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g4062
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g4364
sS'block_loop.thisRepN'
p6233
I1
sg3645
g4062
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6234
I1
sg3647
g4069
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vy
sS'block_loop.thisTrialN'
p6236
I0
sg39
F1.6329230524488594
sg34
g753
(S'\x07\xdf\x07\x07\n\x1d:\x057\xf0'
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g4101
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'right'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g4108
sS'block_loop.thisRepN'
p6246
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6247
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vy
sS'block_loop.thisTrialN'
p6249
I0
sg39
F1.8166827603054116
sg34
g753
(S'\x07\xdf\x07\x07\n\x1e\x05\x00\x0b\xb8'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g3846
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'left'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g3853
sS'block_loop.thisRepN'
p6259
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6260
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vy
sS'block_loop.thisTrialN'
p6262
I0
sg39
F0.8168144744104211
sg34
g753
(S'\x07\xdf\x07\x07\n\x1e\x0b\r\x00 '
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g4357
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'left'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g4062
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g4364
sS'block_loop.thisRepN'
p6272
I1
sg3645
g4062
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6273
I1
sg3647
g4069
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vy
sS'block_loop.thisTrialN'
p6275
I0
sg39
F0.8665858706117433
sg34
g753
(S'\x07\xdf\x07\x07\n\x1e\x11\n\xb60'
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g3929
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'right'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g3939
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g3937
sS'block_loop.thisRepN'
p6285
I1
sg3645
g3939
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6286
I1
sg3647
g3933
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vy
sS'block_loop.thisTrialN'
p6288
I0
sg39
F0.79990204119803821
sg34
g753
(S'\x07\xdf\x07\x07\n\x1e\x17\t#\xd8'
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g5666
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'right'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g3750
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g5673
sS'block_loop.thisRepN'
p6298
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6299
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vy
sS'block_loop.thisTrialN'
p6301
I0
sg39
F0.86666541224713001
sg34
g753
(S'\x07\xdf\x07\x07\n\x1e\x1d\x06\x9bh'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g3654
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'left'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g3662
sS'block_loop.thisRepN'
p6311
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6312
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vy
sS'block_loop.thisTrialN'
p6314
I0
sg39
F0.93332614892733545
sg34
g753
(S'\x07\xdf\x07\x07\n\x1e#\x05\t\x10'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g4303
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'left'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g4310
sS'block_loop.thisRepN'
p6324
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6325
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vy
sS'block_loop.thisTrialN'
p6327
I0
sg39
F1.1666616774955401
sg34
g753
(S'\x07\xdf\x07\x07\n\x1e)\x04\xa7h'
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g5170
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'left'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g3888
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g5177
sS'block_loop.thisRepN'
p6337
I1
sg3645
g3888
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6338
I1
sg3647
g3882
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vy
sS'block_loop.thisTrialN'
p6340
I0
sg39
F0.76681414655104163
sg34
g753
(S'\x07\xdf\x07\x07\n\x1e/\x07\x99P'
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g4787
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'right'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g4503
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g4794
sS'block_loop.thisRepN'
p6350
I1
sg3645
g4503
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6351
I1
sg3647
g4497
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vy
sS'block_loop.thisTrialN'
p6353
I0
sg39
F0.68325095499858435
sg34
g753
(S'\x07\xdf\x07\x07\n\x1e5\x04\x97\xc8'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F273.1407254026044
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vy
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vy
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'18-mms.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'left'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'18-mms.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'43-mrporky_pork_crackles_redo.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6384
I2
sS'img_wrong'
p6385
S'43-mrporky_pork_crackles_redo.png'
p6386
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vy
sS'block_loop.thisTrialN'
p6388
I0
sg39
F0.96653292838345806
sg34
g753
(S'\x07\xdf\x07\x07\n&\x0c\x07v('
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'46-pistachios.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'left'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'46-pistachios.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'29-beans.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6402
I2
sg6385
S'29-beans.png'
p6403
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vy
sS'block_loop.thisTrialN'
p6405
I0
sg39
F0.98326432597605162
sg34
g753
(S'\x07\xdf\x07\x07\n&\x12\x07O\x18'
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'42-mrkipling_lemon_slices.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'right'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
S'16-skips_prawn.png'
p6413
sg64
g65
sS'trial_loop.thisIndex'
p6414
g60
(g99
S'\x02\x00\x00\x00'
tRp6415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6416
I0
sg6380
S'16-skips_prawn.png'
p6417
sS'block_loop.thisRepN'
p6418
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6419
I2
sg6385
S'42-mrkipling_lemon_slices.png'
p6420
sg55
g11
sS'block_loop.thisTrial'
p6421
Nsg70
Vy
sS'block_loop.thisTrialN'
p6422
I0
sg39
F1.0331249570572254
sg34
g753
(S'\x07\xdf\x07\x07\n&\x18\x07\xa5\x08'
tRp6423
sa(dp6424
S'trial_loop.thisTrialN'
p6425
I3
sg6371
S'33-ambrosia_rice.png'
p6426
sS'block_loop.thisIndex'
p6427
g6365
sg38
S'right'
p6428
sg59
g63
sS'trial_loop.thisN'
p6429
I3
sg33
S'23-crunchie_redo.png'
p6430
sg64
g65
sS'trial_loop.thisIndex'
p6431
g60
(g99
S'\x03\x00\x00\x00'
tRp6432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6433
I0
sg6380
S'23-crunchie_redo.png'
p6434
sS'block_loop.thisRepN'
p6435
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6436
I2
sg6385
S'33-ambrosia_rice.png'
p6437
sg55
g11
sS'block_loop.thisTrial'
p6438
Nsg70
Vy
sS'block_loop.thisTrialN'
p6439
I0
sg39
F1.266548865220102
sg34
g753
(S'\x07\xdf\x07\x07\n&\x1e\x08\xae\xa8'
tRp6440
sa(dp6441
S'trial_loop.thisTrialN'
p6442
I4
sg6371
g6372
sS'block_loop.thisIndex'
p6443
g6365
sg38
S'left'
p6444
sg59
g63
sS'trial_loop.thisN'
p6445
I4
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6446
g60
(g99
S'\x04\x00\x00\x00'
tRp6447
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6448
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6449
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6450
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6451
Nsg70
Vy
sS'block_loop.thisTrialN'
p6452
I0
sg39
F0.94996973711658939
sg34
g753
(S'\x07\xdf\x07\x07\n&$\rJX'
tRp6453
sa(dp6454
S'trial_loop.thisTrialN'
p6455
I5
sg6371
S'35-raisins.png'
p6456
sS'block_loop.thisIndex'
p6457
g6365
sg38
S'right'
p6458
sg59
g63
sS'trial_loop.thisN'
p6459
I5
sg33
S'49-yorkie.png'
p6460
sg64
g65
sS'trial_loop.thisIndex'
p6461
g60
(g99
S'\x05\x00\x00\x00'
tRp6462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6463
I0
sg6380
S'49-yorkie.png'
p6464
sS'block_loop.thisRepN'
p6465
I2
sg6383
g6460
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6466
I2
sg6385
S'35-raisins.png'
p6467
sg55
g11
sS'block_loop.thisTrial'
p6468
Nsg70
Vy
sS'block_loop.thisTrialN'
p6469
I0
sg39
F0.66674022129700461
sg34
g753
(S'\x07\xdf\x07\x07\n&*\x0c\xe8\xb0'
tRp6470
sa(dp6471
S'trial_loop.thisTrialN'
p6472
I6
sg6371
S'6-sour_patch_kids.png'
p6473
sS'block_loop.thisIndex'
p6474
g6365
sg38
S'right'
p6475
sg59
g63
sS'trial_loop.thisN'
p6476
I6
sg33
S'6-sour_patch_kids.png'
p6477
sg64
g65
sS'trial_loop.thisIndex'
p6478
g60
(g99
S'\x06\x00\x00\x00'
tRp6479
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6480
I0
sg6380
S'38-maltesers.png'
p6481
sS'block_loop.thisRepN'
p6482
I2
sg6383
S'38-maltesers.png'
p6483
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6484
I2
sg6385
g6477
sg55
g11
sS'block_loop.thisTrial'
p6485
Nsg70
Vy
sS'block_loop.thisTrialN'
p6486
I0
sg39
F1.2662837264369955
sg34
g753
(S'\x07\xdf\x07\x07\n&0\x08=`'
tRp6487
sa(dp6488
S'trial_loop.thisTrialN'
p6489
I7
sg6371
S'51-mars.png'
p6490
sS'block_loop.thisIndex'
p6491
g6365
sg38
S'left'
p6492
sg59
g63
sS'trial_loop.thisN'
p6493
I7
sg33
S'51-mars.png'
p6494
sg64
g65
sS'trial_loop.thisIndex'
p6495
g60
(g99
S'\x07\x00\x00\x00'
tRp6496
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6497
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p6498
sS'block_loop.thisRepN'
p6499
I2
sg6383
g6494
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6500
I2
sg6385
S'27-hartleys_raspberries_jelly.png'
p6501
sg55
g11
sS'block_loop.thisTrial'
p6502
Nsg70
Vy
sS'block_loop.thisTrialN'
p6503
I0
sg39
F0.88332040425393643
sg34
g753
(S'\x07\xdf\x07\x07\n&6\x0c\xdc\xf8'
tRp6504
sa(dp6505
S'trial_loop.thisTrialN'
p6506
I8
sg6371
S'23-crunchie_redo.png'
p6507
sS'block_loop.thisIndex'
p6508
g6365
sg38
S'left'
p6509
sg59
g63
sS'trial_loop.thisN'
p6510
I8
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6511
g60
(g99
S'\x08\x00\x00\x00'
tRp6512
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6513
I0
sg6380
S'33-ambrosia_rice.png'
p6514
sS'block_loop.thisRepN'
p6515
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6516
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6517
Nsg70
Vy
sS'block_loop.thisTrialN'
p6518
I0
sg39
F0.89992864060513966
sg34
g753
(S"\x07\xdf\x07\x07\n'\x00\x0b\xc3\xb8"
tRp6519
sa(dp6520
S'trial_loop.thisTrialN'
p6521
I9
sg6371
S'7-olives.png'
p6522
sS'block_loop.thisIndex'
p6523
g6365
sg38
S'right'
p6524
sg59
g63
sS'trial_loop.thisN'
p6525
I9
sg33
S'7-olives.png'
p6526
sg64
g65
sS'trial_loop.thisIndex'
p6527
g60
(g99
S'\t\x00\x00\x00'
tRp6528
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6529
I0
sg6380
S'22-daim.png'
p6530
sS'block_loop.thisRepN'
p6531
I2
sg6383
S'22-daim.png'
p6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6533
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p6534
Nsg70
Vy
sS'block_loop.thisTrialN'
p6535
I0
sg39
F0.69992647387971374
sg34
g753
(S"\x07\xdf\x07\x07\n'\x06\n\xaax"
tRp6536
sa(dp6537
S'trial_loop.thisTrialN'
p6538
I10
sg6371
S'40-sardines.png'
p6539
sS'block_loop.thisIndex'
p6540
g6365
sg38
S'left'
p6541
sg59
g63
sS'trial_loop.thisN'
p6542
I10
sg33
S'40-sardines.png'
p6543
sg64
g65
sS'trial_loop.thisIndex'
p6544
g60
(g99
S'\n\x00\x00\x00'
tRp6545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6546
I0
sg6380
S'5-pineapple.png'
p6547
sS'block_loop.thisRepN'
p6548
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6549
I2
sg6385
S'5-pineapple.png'
p6550
sg55
g11
sS'block_loop.thisTrial'
p6551
Nsg70
Vy
sS'block_loop.thisTrialN'
p6552
I0
sg39
F0.79990090081537346
sg34
g753
(S"\x07\xdf\x07\x07\n'\x0c\x06x@"
tRp6553
sa(dp6554
S'trial_loop.thisTrialN'
p6555
I11
sg6371
S'50-polo.png'
p6556
sS'block_loop.thisIndex'
p6557
g6365
sg38
S'right'
p6558
sg59
g63
sS'trial_loop.thisN'
p6559
I11
sg33
S'48-twix.png'
p6560
sg64
g65
sS'trial_loop.thisIndex'
p6561
g60
(g99
S'\x0b\x00\x00\x00'
tRp6562
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6563
I0
sg6380
S'48-twix.png'
p6564
sS'block_loop.thisRepN'
p6565
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6566
I2
sg6385
S'50-polo.png'
p6567
sg55
g11
sS'block_loop.thisTrial'
p6568
Nsg70
Vy
sS'block_loop.thisTrialN'
p6569
I0
sg39
F0.750367559328879
sg34
g753
(S"\x07\xdf\x07\x07\n'\x12\x03\xef\xd0"
tRp6570
sa(dp6571
S'trial_loop.thisTrialN'
p6572
I12
sg6371
g6392
sS'block_loop.thisIndex'
p6573
g6365
sg38
S'left'
p6574
sg59
g63
sS'trial_loop.thisN'
p6575
I12
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6576
g60
(g99
S'\x0c\x00\x00\x00'
tRp6577
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6578
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6579
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6580
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6581
Nsg70
Vy
sS'block_loop.thisTrialN'
p6582
I0
sg39
F0.68331310581015714
sg34
g753
(S"\x07\xdf\x07\x07\n'\x18\x00\xb3\xb0"
tRp6583
sa(dp6584
S'trial_loop.thisTrialN'
p6585
I13
sg6371
g6372
sS'block_loop.thisIndex'
p6586
g6365
sg38
S'left'
p6587
sg59
g63
sS'trial_loop.thisN'
p6588
I13
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6589
g60
(g99
S'\r\x00\x00\x00'
tRp6590
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6591
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6592
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6593
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6594
Nsg70
Vy
sS'block_loop.thisTrialN'
p6595
I0
sg39
F0.88324827510132309
sg34
g753
(S"\x07\xdf\x07\x07\n'\x1d\x0b\x89 "
tRp6596
sa(dp6597
S'trial_loop.thisTrialN'
p6598
I14
sg6371
S'8-liquorice_catherine_wheels.png'
p6599
sS'block_loop.thisIndex'
p6600
g6365
sg38
S'right'
p6601
sg59
g63
sS'trial_loop.thisN'
p6602
I14
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6603
sg64
g65
sS'trial_loop.thisIndex'
p6604
g60
(g99
S'\x0e\x00\x00\x00'
tRp6605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6606
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p6607
sS'block_loop.thisRepN'
p6608
I2
sg6383
g6603
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6609
I2
sg6385
S'8-liquorice_catherine_wheels.png'
p6610
sg55
g11
sS'block_loop.thisTrial'
p6611
Nsg70
Vy
sS'block_loop.thisTrialN'
p6612
I0
sg39
F0.88333123788197554
sg34
g753
(S"\x07\xdf\x07\x07\n'#\no\xe0"
tRp6613
sa(dp6614
S'trial_loop.thisTrialN'
p6615
I15
sg6371
S'20-fruit_pastilles.png'
p6616
sS'block_loop.thisIndex'
p6617
g6365
sg38
S'right'
p6618
sg59
g63
sS'trial_loop.thisN'
p6619
I15
sg33
S'2-steamed_puddings.png'
p6620
sg64
g65
sS'trial_loop.thisIndex'
p6621
g60
(g99
S'\x0f\x00\x00\x00'
tRp6622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6623
I0
sg6380
S'2-steamed_puddings.png'
p6624
sS'block_loop.thisRepN'
p6625
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6626
I2
sg6385
S'20-fruit_pastilles.png'
p6627
sg55
g11
sS'block_loop.thisTrial'
p6628
Nsg70
Vy
sS'block_loop.thisTrialN'
p6629
I0
sg39
F1.099992387950806
sg34
g753
(S"\x07\xdf\x07\x07\n')\t\x18 "
tRp6630
sa(dp6631
S'trial_loop.thisTrialN'
p6632
I16
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p6633
sS'block_loop.thisIndex'
p6634
g6365
sg38
S'left'
p6635
sg59
g63
sS'trial_loop.thisN'
p6636
I16
sg33
g6603
sg64
g65
sS'trial_loop.thisIndex'
p6637
g60
(g99
S'\x10\x00\x00\x00'
tRp6638
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6639
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p6640
sS'block_loop.thisRepN'
p6641
I2
sg6383
g6603
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6642
I2
sg6385
g6610
sg55
g11
sS'block_loop.thisTrial'
p6643
Nsg70
Vy
sS'block_loop.thisTrialN'
p6644
I0
sg39
F0.99999002165804995
sg34
g753
(S"\x07\xdf\x07\x07\n'/\x0b\x17\xd8"
tRp6645
sa(dp6646
S'trial_loop.thisTrialN'
p6647
I17
sg6371
g6426
sS'block_loop.thisIndex'
p6648
g6365
sg38
S'right'
p6649
sg59
g63
sS'trial_loop.thisN'
p6650
I17
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6651
g60
(g99
S'\x11\x00\x00\x00'
tRp6652
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6653
I0
sg6380
g6434
sS'block_loop.thisRepN'
p6654
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6655
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6656
Nsg70
Vy
sS'block_loop.thisTrialN'
p6657
I0
sg39
F0.91699901670654071
sg34
g753
(S"\x07\xdf\x07\x07\n'5\x0b\xa8`"
tRp6658
sa(dp6659
S'trial_loop.thisTrialN'
p6660
I18
sg6371
g6633
sS'block_loop.thisIndex'
p6661
g6365
sg38
S'left'
p6662
sg59
g63
sS'trial_loop.thisN'
p6663
I18
sg33
g6603
sg64
g65
sS'trial_loop.thisIndex'
p6664
g60
(g99
S'\x12\x00\x00\x00'
tRp6665
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6666
I0
sg6380
g6640
sS'block_loop.thisRepN'
p6667
I2
sg6383
g6603
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6668
I2
sg6385
g6610
sg55
g11
sS'block_loop.thisTrial'
p6669
Nsg70
Vy
sS'block_loop.thisTrialN'
p6670
I0
sg39
F1.149949381299848
sg34
g753
(S"\x07\xdf\x07\x07\n';\n\xcd\xa0"
tRp6671
sa(dp6672
S'trial_loop.thisTrialN'
p6673
I19
sg6371
S'44-crunch.png'
p6674
sS'block_loop.thisIndex'
p6675
g6365
sg38
S'right'
p6676
sg59
g63
sS'trial_loop.thisN'
p6677
I19
sg33
S'26-walkers_smoky_bacon.png'
p6678
sg64
g65
sS'trial_loop.thisIndex'
p6679
g60
(g99
S'\x13\x00\x00\x00'
tRp6680
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6681
I0
sg6380
S'26-walkers_smoky_bacon.png'
p6682
sS'block_loop.thisRepN'
p6683
I2
sg6383
g6678
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6684
I2
sg6385
S'44-crunch.png'
p6685
sg55
g11
sS'block_loop.thisTrial'
p6686
Nsg70
Vy
sS'block_loop.thisTrialN'
p6687
I0
sg39
F1.9331445431162138
sg34
g753
(S'\x07\xdf\x07\x07\n(\x05\r\xbf\x88'
tRp6688
sa(dp6689
S'trial_loop.thisTrialN'
p6690
I20
sg6371
S'5-pineapple.png'
p6691
sS'block_loop.thisIndex'
p6692
g6365
sg38
S'right'
p6693
sg59
g63
sS'trial_loop.thisN'
p6694
I20
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p6695
g60
(g99
S'\x14\x00\x00\x00'
tRp6696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6697
I0
sg6380
S'40-sardines.png'
p6698
sS'block_loop.thisRepN'
p6699
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6700
I2
sg6385
g6550
sg55
g11
sS'block_loop.thisTrial'
p6701
Nsg70
Vy
sS'block_loop.thisTrialN'
p6702
I0
sg39
F0.71658602741354116
sg34
g753
(S'\x07\xdf\x07\x07\n(\x0c\r\x17\x90'
tRp6703
sa(dp6704
S'trial_loop.thisTrialN'
p6705
I21
sg6371
S'26-walkers_smoky_bacon.png'
p6706
sS'block_loop.thisIndex'
p6707
g6365
sg38
S'left'
p6708
sg59
g63
sS'trial_loop.thisN'
p6709
I21
sg33
g6685
sg64
g65
sS'trial_loop.thisIndex'
p6710
g60
(g99
S'\x15\x00\x00\x00'
tRp6711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6712
I0
sg6380
S'44-crunch.png'
p6713
sS'block_loop.thisRepN'
p6714
I2
sg6383
g6678
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6715
I2
sg6385
g6685
sg55
g11
sS'block_loop.thisTrial'
p6716
Nsg70
Vy
sS'block_loop.thisTrialN'
p6717
I0
sg39
F1.0333347873202001
sg34
g753
(S'\x07\xdf\x07\x07\n(\x12\tbX'
tRp6718
sa(dp6719
S'trial_loop.thisTrialN'
p6720
I22
sg6371
g6456
sS'block_loop.thisIndex'
p6721
g6365
sg38
S'right'
p6722
sg59
g63
sS'trial_loop.thisN'
p6723
I22
sg33
g6467
sg64
g65
sS'trial_loop.thisIndex'
p6724
g60
(g99
S'\x16\x00\x00\x00'
tRp6725
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6726
I0
sg6380
g6464
sS'block_loop.thisRepN'
p6727
I2
sg6383
g6460
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6728
I2
sg6385
g6467
sg55
g11
sS'block_loop.thisTrial'
p6729
Nsg70
Vy
sS'block_loop.thisTrialN'
p6730
I0
sg39
F0.68366092227824993
sg34
g753
(S'\x07\xdf\x07\x07\n(\x18\nk\xf8'
tRp6731
sa(dp6732
S'trial_loop.thisTrialN'
p6733
I23
sg6371
S'45-chewy_nougat_redo.png'
p6734
sS'block_loop.thisIndex'
p6735
g6365
sg38
S'right'
p6736
sg59
g63
sS'trial_loop.thisN'
p6737
I23
sg33
S'41-peanuts_redo.png'
p6738
sg64
g65
sS'trial_loop.thisIndex'
p6739
g60
(g99
S'\x17\x00\x00\x00'
tRp6740
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6741
I0
sg6380
S'41-peanuts_redo.png'
p6742
sS'block_loop.thisRepN'
p6743
I2
sg6383
g6738
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6744
I2
sg6385
S'45-chewy_nougat_redo.png'
p6745
sg55
g11
sS'block_loop.thisTrial'
p6746
Nsg70
Vy
sS'block_loop.thisTrialN'
p6747
I0
sg39
F0.99996863949945691
sg34
g753
(S'\x07\xdf\x07\x07\n(\x1e\x05\xff('
tRp6748
sa(dp6749
S'trial_loop.thisTrialN'
p6750
I24
sg6371
S'25-kitkat.png'
p6751
sS'block_loop.thisIndex'
p6752
g6365
sg38
S'left'
p6753
sg59
g63
sS'trial_loop.thisN'
p6754
I24
sg33
S'25-kitkat.png'
p6755
sg64
g65
sS'trial_loop.thisIndex'
p6756
g60
(g99
S'\x18\x00\x00\x00'
tRp6757
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6758
I0
sg6380
S'31-hobnobs.png'
p6759
sS'block_loop.thisRepN'
p6760
I2
sg6383
g6755
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6761
I2
sg6385
S'31-hobnobs.png'
p6762
sg55
g11
sS'block_loop.thisTrial'
p6763
Nsg70
Vy
sS'block_loop.thisTrialN'
p6764
I0
sg39
F0.86671387847582082
sg34
g753
(S'\x07\xdf\x07\x07\n($\x06\x8f\xb0'
tRp6765
sa(dp6766
S'trial_loop.thisTrialN'
p6767
I25
sg6371
S'29-beans.png'
p6768
sS'block_loop.thisIndex'
p6769
g6365
sg38
S'right'
p6770
sg59
g63
sS'trial_loop.thisN'
p6771
I25
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6772
g60
(g99
S'\x19\x00\x00\x00'
tRp6773
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6774
I0
sg6380
S'46-pistachios.png'
p6775
sS'block_loop.thisRepN'
p6776
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6777
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6778
Nsg70
Vy
sS'block_loop.thisTrialN'
p6779
I0
sg39
F0.89995857562917081
sg34
g753
(S'\x07\xdf\x07\x07\n(*\x04\xfdX'
tRp6780
sa(dp6781
S'trial_loop.thisTrialN'
p6782
I26
sg6371
S'36-fig_rolls.png'
p6783
sS'block_loop.thisIndex'
p6784
g6365
sg38
S'right'
p6785
sg59
g63
sS'trial_loop.thisN'
p6786
I26
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p6787
sg64
g65
sS'trial_loop.thisIndex'
p6788
g60
(g99
S'\x1a\x00\x00\x00'
tRp6789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6790
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p6791
sS'block_loop.thisRepN'
p6792
I2
sg6383
g6787
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6793
I2
sg6385
S'36-fig_rolls.png'
p6794
sg55
g11
sS'block_loop.thisTrial'
p6795
Nsg70
Vy
sS'block_loop.thisTrialN'
p6796
I0
sg39
F1.3164650899170738
sg34
g753
(S'\x07\xdf\x07\x07\n(0\x03\xe4\x18'
tRp6797
sa(dp6798
S'trial_loop.thisTrialN'
p6799
I27
sg6371
S'1-treacle_cookies.png'
p6800
sS'block_loop.thisIndex'
p6801
g6365
sg38
S'left'
p6802
sg59
g63
sS'trial_loop.thisN'
p6803
I27
sg33
S'1-treacle_cookies.png'
p6804
sg64
g65
sS'trial_loop.thisIndex'
p6805
g60
(g99
S'\x1b\x00\x00\x00'
tRp6806
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6807
I0
sg6380
S'21-nakd_banana_crunch.png'
p6808
sS'block_loop.thisRepN'
p6809
I2
sg6383
g6804
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6810
I2
sg6385
S'21-nakd_banana_crunch.png'
p6811
sg55
g11
sS'block_loop.thisTrial'
p6812
Nsg70
Vy
sS'block_loop.thisTrialN'
p6813
I0
sg39
F1.8668912078555877
sg34
g753
(S'\x07\xdf\x07\x07\n(6\tu\xe0'
tRp6814
sa(dp6815
S'trial_loop.thisTrialN'
p6816
I28
sg6371
S'13-mccoys_steak_crisps.png'
p6817
sS'block_loop.thisIndex'
p6818
g6365
sg38
S'left'
p6819
sg59
g63
sS'trial_loop.thisN'
p6820
I28
sg33
S'13-mccoys_steak_crisps.png'
p6821
sg64
g65
sS'trial_loop.thisIndex'
p6822
g60
(g99
S'\x1c\x00\x00\x00'
tRp6823
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6824
I0
sg6380
S'3-ellas_strawberries_apples.png'
p6825
sS'block_loop.thisRepN'
p6826
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6827
I2
sg6385
S'3-ellas_strawberries_apples.png'
p6828
sg55
g11
sS'block_loop.thisTrial'
p6829
Nsg70
Vy
sS'block_loop.thisTrialN'
p6830
I0
sg39
F0.94989846325006511
sg34
g753
(S'\x07\xdf\x07\x07\n)\x01\x07\xdb\xb8'
tRp6831
sa(dp6832
S'trial_loop.thisTrialN'
p6833
I29
sg6371
g6409
sS'block_loop.thisIndex'
p6834
g6365
sg38
S'right'
p6835
sg59
g63
sS'trial_loop.thisN'
p6836
I29
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p6837
g60
(g99
S'\x1d\x00\x00\x00'
tRp6838
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6839
I0
sg6380
g6417
sS'block_loop.thisRepN'
p6840
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6841
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6842
Nsg70
Vy
sS'block_loop.thisTrialN'
p6843
I0
sg39
F1.0832290596672465
sg34
g753
(S'\x07\xdf\x07\x07\n)\x07\x07z\x10'
tRp6844
sa(dp6845
S'trial_loop.thisTrialN'
p6846
I30
sg6371
S'4-corn.png'
p6847
sS'block_loop.thisIndex'
p6848
g6365
sg38
S'right'
p6849
sg59
g63
sS'trial_loop.thisN'
p6850
I30
sg33
S'10-bounty_redo.png'
p6851
sg64
g65
sS'trial_loop.thisIndex'
p6852
g60
(g99
S'\x1e\x00\x00\x00'
tRp6853
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6854
I0
sg6380
S'10-bounty_redo.png'
p6855
sS'block_loop.thisRepN'
p6856
I2
sg6383
g6851
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6857
I2
sg6385
S'4-corn.png'
p6858
sg55
g11
sS'block_loop.thisTrial'
p6859
Nsg70
Vy
sS'block_loop.thisTrialN'
p6860
I0
sg39
F0.68332964134697249
sg34
g753
(S'\x07\xdf\x07\x07\n)\r\t;H'
tRp6861
sa(dp6862
S'trial_loop.thisTrialN'
p6863
I31
sg6371
S'38-maltesers.png'
p6864
sS'block_loop.thisIndex'
p6865
g6365
sg38
S'left'
p6866
sg59
g63
sS'trial_loop.thisN'
p6867
I31
sg33
g6483
sg64
g65
sS'trial_loop.thisIndex'
p6868
g60
(g99
S'\x1f\x00\x00\x00'
tRp6869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6870
I0
sg6380
S'6-sour_patch_kids.png'
p6871
sS'block_loop.thisRepN'
p6872
I2
sg6383
g6483
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6873
I2
sg6385
g6477
sg55
g11
sS'block_loop.thisTrial'
p6874
Nsg70
Vy
sS'block_loop.thisTrialN'
p6875
I0
sg39
F0.74973008586766809
sg34
g753
(S'\x07\xdf\x07\x07\n)\x13\x05\t\x10'
tRp6876
sa(dp6877
S'trial_loop.thisTrialN'
p6878
I32
sg6371
g6783
sS'block_loop.thisIndex'
p6879
g6365
sg38
S'right'
p6880
sg59
g63
sS'trial_loop.thisN'
p6881
I32
sg33
g6794
sg64
g65
sS'trial_loop.thisIndex'
p6882
g60
(g99
S' \x00\x00\x00'
tRp6883
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6884
I0
sg6380
g6791
sS'block_loop.thisRepN'
p6885
I2
sg6383
g6787
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6886
I2
sg6385
g6794
sg55
g11
sS'block_loop.thisTrial'
p6887
Nsg70
Vy
sS'block_loop.thisTrialN'
p6888
I0
sg39
F1.800342798787824
sg34
g753
(S'\x07\xdf\x07\x07\n)\x19\x01\xcc\xf0'
tRp6889
sa(dp6890
S'trial_loop.thisTrialN'
p6891
I33
sg6371
g6864
sS'block_loop.thisIndex'
p6892
g6365
sg38
S'left'
p6893
sg59
g63
sS'trial_loop.thisN'
p6894
I33
sg33
g6483
sg64
g65
sS'trial_loop.thisIndex'
p6895
g60
(g99
S'!\x00\x00\x00'
tRp6896
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6897
I0
sg6380
g6871
sS'block_loop.thisRepN'
p6898
I2
sg6383
g6483
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6899
I2
sg6385
g6477
sg55
g11
sS'block_loop.thisTrial'
p6900
Nsg70
Vy
sS'block_loop.thisTrialN'
p6901
I0
sg39
F0.71628724736638105
sg34
g753
(S'\x07\xdf\x07\x07\n)\x1f\x0e\x82\xd8'
tRp6902
sa(dp6903
S'trial_loop.thisTrialN'
p6904
I34
sg6371
g6456
sS'block_loop.thisIndex'
p6905
g6365
sg38
S'right'
p6906
sg59
g63
sS'trial_loop.thisN'
p6907
I34
sg33
g6460
sg64
g65
sS'trial_loop.thisIndex'
p6908
g60
(g99
S'"\x00\x00\x00'
tRp6909
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6910
I0
sg6380
g6464
sS'block_loop.thisRepN'
p6911
I2
sg6383
g6460
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6912
I2
sg6385
g6467
sg55
g11
sS'block_loop.thisTrial'
p6913
Nsg70
Vy
sS'block_loop.thisTrialN'
p6914
I0
sg39
F0.55002897995382227
sg34
g753
(S'\x07\xdf\x07\x07\n)%\n\x8b8'
tRp6915
sa(dp6916
S'trial_loop.thisTrialN'
p6917
I35
sg6371
g6507
sS'block_loop.thisIndex'
p6918
g6365
sg38
S'left'
p6919
sg59
g63
sS'trial_loop.thisN'
p6920
I35
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6921
g60
(g99
S'#\x00\x00\x00'
tRp6922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6923
I0
sg6380
g6514
sS'block_loop.thisRepN'
p6924
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6925
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6926
Nsg70
Vy
sS'block_loop.thisTrialN'
p6927
I0
sg39
F0.68331795243284432
sg34
g753
(S'\x07\xdf\x07\x07\n)+\x046 '
tRp6928
sa(dp6929
S'trial_loop.thisTrialN'
p6930
I36
sg6371
g6599
sS'block_loop.thisIndex'
p6931
g6365
sg38
S'right'
p6932
sg59
g63
sS'trial_loop.thisN'
p6933
I36
sg33
g6603
sg64
g65
sS'trial_loop.thisIndex'
p6934
g60
(g99
S'$\x00\x00\x00'
tRp6935
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6936
I0
sg6380
g6607
sS'block_loop.thisRepN'
p6937
I2
sg6383
g6603
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6938
I2
sg6385
g6610
sg55
g11
sS'block_loop.thisTrial'
p6939
Nsg70
Vy
sS'block_loop.thisTrialN'
p6940
I0
sg39
F0.93329364804412762
sg34
g753
(S'\x07\xdf\x07\x07\n)1\x00\x03\xe8'
tRp6941
sa(dp6942
S'trial_loop.thisTrialN'
p6943
I37
sg6371
g6783
sS'block_loop.thisIndex'
p6944
g6365
sg38
S'right'
p6945
sg59
g63
sS'trial_loop.thisN'
p6946
I37
sg33
g6794
sg64
g65
sS'trial_loop.thisIndex'
p6947
g60
(g99
S'%\x00\x00\x00'
tRp6948
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6949
I0
sg6380
g6791
sS'block_loop.thisRepN'
p6950
I2
sg6383
g6787
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6951
I2
sg6385
g6794
sg55
g11
sS'block_loop.thisTrial'
p6952
Nsg70
Vy
sS'block_loop.thisTrialN'
p6953
I0
sg39
F0.84993658051371312
sg34
g753
(S'\x07\xdf\x07\x07\n)6\x0e\xa9\xe8'
tRp6954
sa(dp6955
S'trial_loop.thisTrialN'
p6956
I38
sg6371
g6691
sS'block_loop.thisIndex'
p6957
g6365
sg38
S'right'
p6958
sg59
g63
sS'trial_loop.thisN'
p6959
I38
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p6960
g60
(g99
S'&\x00\x00\x00'
tRp6961
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6962
I0
sg6380
g6698
sS'block_loop.thisRepN'
p6963
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6964
I2
sg6385
g6550
sg55
g11
sS'block_loop.thisTrial'
p6965
Nsg70
Vy
sS'block_loop.thisTrialN'
p6966
I0
sg39
F0.7999818679281816
sg34
g753
(S'\x07\xdf\x07\x07\n*\x00\x0c\xd9\x10'
tRp6967
sa(dp6968
S'trial_loop.thisTrialN'
p6969
I39
sg6371
S'2-steamed_puddings.png'
p6970
sS'block_loop.thisIndex'
p6971
g6365
sg38
S'left'
p6972
sg59
g63
sS'trial_loop.thisN'
p6973
I39
sg33
g6627
sg64
g65
sS'trial_loop.thisIndex'
p6974
g60
(g99
S"'\x00\x00\x00"
tRp6975
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6976
I0
sg6380
S'20-fruit_pastilles.png'
p6977
sS'block_loop.thisRepN'
p6978
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6979
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p6980
Nsg70
Vy
sS'block_loop.thisTrialN'
p6981
I0
sg39
F1.0166641150626674
sg34
g753
(S'\x07\xdf\x07\x07\n*\x06\nP\xa0'
tRp6982
sa(dp6983
S'trial_loop.thisTrialN'
p6984
I40
sg6371
g6409
sS'block_loop.thisIndex'
p6985
g6365
sg38
S'right'
p6986
sg59
g63
sS'trial_loop.thisN'
p6987
I40
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p6988
g60
(g99
S'(\x00\x00\x00'
tRp6989
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6990
I0
sg6380
g6417
sS'block_loop.thisRepN'
p6991
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6992
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6993
Nsg70
Vy
sS'block_loop.thisTrialN'
p6994
I0
sg39
F0.59963102944857383
sg34
g753
(S'\x07\xdf\x07\x07\n*\x0c\x0b\x1f\xa8'
tRp6995
sa(dp6996
S'trial_loop.thisTrialN'
p6997
I41
sg6371
S'22-daim.png'
p6998
sS'block_loop.thisIndex'
p6999
g6365
sg38
S'left'
p7000
sg59
g63
sS'trial_loop.thisN'
p7001
I41
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p7002
g60
(g99
S')\x00\x00\x00'
tRp7003
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7004
I0
sg6380
S'7-olives.png'
p7005
sS'block_loop.thisRepN'
p7006
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7007
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p7008
Nsg70
Vy
sS'block_loop.thisTrialN'
p7009
I0
sg39
F0.84999987170704117
sg34
g753
(S'\x07\xdf\x07\x07\n*\x12\x05\x82('
tRp7010
sa(dp7011
S'trial_loop.thisTrialN'
p7012
I42
sg6371
S'3-ellas_strawberries_apples.png'
p7013
sS'block_loop.thisIndex'
p7014
g6365
sg38
S'right'
p7015
sg59
g63
sS'trial_loop.thisN'
p7016
I42
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p7017
g60
(g99
S'*\x00\x00\x00'
tRp7018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7019
I0
sg6380
S'13-mccoys_steak_crisps.png'
p7020
sS'block_loop.thisRepN'
p7021
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7022
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p7023
Nsg70
Vy
sS'block_loop.thisTrialN'
p7024
I0
sg39
F0.7832732779734215
sg34
g753
(S'\x07\xdf\x07\x07\n*\x18\x03\xb1P'
tRp7025
sa(dp7026
S'trial_loop.thisTrialN'
p7027
I43
sg6371
S'41-peanuts_redo.png'
p7028
sS'block_loop.thisIndex'
p7029
g6365
sg38
S'left'
p7030
sg59
g63
sS'trial_loop.thisN'
p7031
I43
sg33
g6738
sg64
g65
sS'trial_loop.thisIndex'
p7032
g60
(g99
S'+\x00\x00\x00'
tRp7033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7034
I0
sg6380
S'45-chewy_nougat_redo.png'
p7035
sS'block_loop.thisRepN'
p7036
I2
sg6383
g6738
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7037
I2
sg6385
g6745
sg55
g11
sS'block_loop.thisTrial'
p7038
Nsg70
Vy
sS'block_loop.thisTrialN'
p7039
I0
sg39
F0.84994883961826417
sg34
g753
(S'\x07\xdf\x07\x07\n*\x1e\x00\xeeH'
tRp7040
sa(dp7041
S'trial_loop.thisTrialN'
p7042
I44
sg6371
g6426
sS'block_loop.thisIndex'
p7043
g6365
sg38
S'right'
p7044
sg59
g63
sS'trial_loop.thisN'
p7045
I44
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7046
g60
(g99
S',\x00\x00\x00'
tRp7047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7048
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7049
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7050
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7051
Nsg70
Vy
sS'block_loop.thisTrialN'
p7052
I0
sg39
F1.033356739671035
sg34
g753
(S'\x07\xdf\x07\x07\n*#\x0e_\xb0'
tRp7053
sa(dp7054
S'trial_loop.thisTrialN'
p7055
I45
sg6371
S'16-skips_prawn.png'
p7056
sS'block_loop.thisIndex'
p7057
g6365
sg38
S'left'
p7058
sg59
g63
sS'trial_loop.thisN'
p7059
I45
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7060
g60
(g99
S'-\x00\x00\x00'
tRp7061
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7062
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p7063
sS'block_loop.thisRepN'
p7064
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7065
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7066
Nsg70
Vy
sS'block_loop.thisTrialN'
p7067
I0
sg39
F0.74980192992552475
sg34
g753
(S"\x07\xdf\x07\x07\n**\x00'\x10"
tRp7068
sa(dp7069
S'trial_loop.thisTrialN'
p7070
I46
sg6371
g6751
sS'block_loop.thisIndex'
p7071
g6365
sg38
S'left'
p7072
sg59
g63
sS'trial_loop.thisN'
p7073
I46
sg33
g6762
sg64
g65
sS'trial_loop.thisIndex'
p7074
g60
(g99
S'.\x00\x00\x00'
tRp7075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7076
I0
sg6380
g6759
sS'block_loop.thisRepN'
p7077
I2
sg6383
g6755
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7078
I2
sg6385
g6762
sg55
g11
sS'block_loop.thisTrial'
p7079
Nsg70
Vy
sS'block_loop.thisTrialN'
p7080
I0
sg39
F0.66660679661890754
sg34
g753
(S'\x07\xdf\x07\x07\n*/\x0c-0'
tRp7081
sa(dp7082
S'trial_loop.thisTrialN'
p7083
I47
sg6371
g6539
sS'block_loop.thisIndex'
p7084
g6365
sg38
S'left'
p7085
sg59
g63
sS'trial_loop.thisN'
p7086
I47
sg33
g6550
sg64
g65
sS'trial_loop.thisIndex'
p7087
g60
(g99
S'/\x00\x00\x00'
tRp7088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7089
I0
sg6380
g6547
sS'block_loop.thisRepN'
p7090
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7091
I2
sg6385
g6550
sg55
g11
sS'block_loop.thisTrial'
p7092
Nsg70
Vy
sS'block_loop.thisTrialN'
p7093
I0
sg39
F0.71661938358374755
sg34
g753
(S'\x07\xdf\x07\x07\n*5\x07\x81\xe0'
tRp7094
sa(dp7095
S'trial_loop.thisTrialN'
p7096
I48
sg6371
g6970
sS'block_loop.thisIndex'
p7097
g6365
sg38
S'left'
p7098
sg59
g63
sS'trial_loop.thisN'
p7099
I48
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p7100
g60
(g99
S'0\x00\x00\x00'
tRp7101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7102
I0
sg6380
g6977
sS'block_loop.thisRepN'
p7103
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7104
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p7105
Nsg70
Vy
sS'block_loop.thisTrialN'
p7106
I0
sg39
F0.7831980127702991
sg34
g753
(S'\x07\xdf\x07\x07\n*;\x03\xc8\xc0'
tRp7107
sa(dp7108
S'trial_loop.thisTrialN'
p7109
I49
sg6371
g7056
sS'block_loop.thisIndex'
p7110
g6365
sg38
S'left'
p7111
sg59
g63
sS'trial_loop.thisN'
p7112
I49
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p7113
g60
(g99
S'1\x00\x00\x00'
tRp7114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7115
I0
sg6380
g7063
sS'block_loop.thisRepN'
p7116
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7117
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7118
Nsg70
Vy
sS'block_loop.thisTrialN'
p7119
I0
sg39
F0.66640637450655049
sg34
g753
(S'\x07\xdf\x07\x07\n+\x05\x01\x05\xb8'
tRp7120
sa(dp7121
S'trial_loop.thisTrialN'
p7122
I50
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p7123
sS'block_loop.thisIndex'
p7124
g6365
sg38
S'left'
p7125
sg59
g63
sS'trial_loop.thisN'
p7126
I50
sg33
g6794
sg64
g65
sS'trial_loop.thisIndex'
p7127
g60
(g99
S'2\x00\x00\x00'
tRp7128
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7129
I0
sg6380
S'36-fig_rolls.png'
p7130
sS'block_loop.thisRepN'
p7131
I2
sg6383
g6787
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7132
I2
sg6385
g6794
sg55
g11
sS'block_loop.thisTrial'
p7133
Nsg70
Vy
sS'block_loop.thisTrialN'
p7134
I0
sg39
F0.83371065718165482
sg34
g753
(S'\x07\xdf\x07\x07\n+\n\x0b\x9c\xa8'
tRp7135
sa(dp7136
S'trial_loop.thisTrialN'
p7137
I51
sg6371
g7028
sS'block_loop.thisIndex'
p7138
g6365
sg38
S'left'
p7139
sg59
g63
sS'trial_loop.thisN'
p7140
I51
sg33
g6738
sg64
g65
sS'trial_loop.thisIndex'
p7141
g60
(g99
S'3\x00\x00\x00'
tRp7142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7143
I0
sg6380
g7035
sS'block_loop.thisRepN'
p7144
I2
sg6383
g6738
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7145
I2
sg6385
g6745
sg55
g11
sS'block_loop.thisTrial'
p7146
Nsg70
Vy
sS'block_loop.thisTrialN'
p7147
I0
sg39
F0.73332740334717528
sg34
g753
(S'\x07\xdf\x07\x07\n+\x10\t\x918'
tRp7148
sa(dp7149
S'trial_loop.thisTrialN'
p7150
I52
sg6371
g7123
sS'block_loop.thisIndex'
p7151
g6365
sg38
S'left'
p7152
sg59
g63
sS'trial_loop.thisN'
p7153
I52
sg33
g6787
sg64
g65
sS'trial_loop.thisIndex'
p7154
g60
(g99
S'4\x00\x00\x00'
tRp7155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7156
I0
sg6380
g7130
sS'block_loop.thisRepN'
p7157
I2
sg6383
g6787
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7158
I2
sg6385
g6794
sg55
g11
sS'block_loop.thisTrial'
p7159
Nsg70
Vy
sS'block_loop.thisTrialN'
p7160
I0
sg39
F0.7000025943689252
sg34
g753
(S'\x07\xdf\x07\x07\n+\x16\x06\x16\x98'
tRp7161
sa(dp7162
S'trial_loop.thisTrialN'
p7163
I53
sg6371
g7028
sS'block_loop.thisIndex'
p7164
g6365
sg38
S'left'
p7165
sg59
g63
sS'trial_loop.thisN'
p7166
I53
sg33
g6738
sg64
g65
sS'trial_loop.thisIndex'
p7167
g60
(g99
S'5\x00\x00\x00'
tRp7168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7169
I0
sg6380
g7035
sS'block_loop.thisRepN'
p7170
I2
sg6383
g6738
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7171
I2
sg6385
g6745
sg55
g11
sS'block_loop.thisTrial'
p7172
Nsg70
Vy
sS'block_loop.thisTrialN'
p7173
I0
sg39
F0.7332361727985699
sg34
g753
(S'\x07\xdf\x07\x07\n+\x1c\x01\xe4`'
tRp7174
sa(dp7175
S'trial_loop.thisTrialN'
p7176
I54
sg6371
g6556
sS'block_loop.thisIndex'
p7177
g6365
sg38
S'right'
p7178
sg59
g63
sS'trial_loop.thisN'
p7179
I54
sg33
g6567
sg64
g65
sS'trial_loop.thisIndex'
p7180
g60
(g99
S'6\x00\x00\x00'
tRp7181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7182
I0
sg6380
g6564
sS'block_loop.thisRepN'
p7183
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7184
I2
sg6385
g6567
sg55
g11
sS'block_loop.thisTrial'
p7185
Nsg70
Vy
sS'block_loop.thisTrialN'
p7186
I0
sg39
F1.0165703186539758
sg34
g753
(S'\x07\xdf\x07\x07\n+!\r\xac\x00'
tRp7187
sa(dp7188
S'trial_loop.thisTrialN'
p7189
I55
sg6371
g7123
sS'block_loop.thisIndex'
p7190
g6365
sg38
S'left'
p7191
sg59
g63
sS'trial_loop.thisN'
p7192
I55
sg33
g6794
sg64
g65
sS'trial_loop.thisIndex'
p7193
g60
(g99
S'7\x00\x00\x00'
tRp7194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7195
I0
sg6380
g7130
sS'block_loop.thisRepN'
p7196
I2
sg6383
g6787
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7197
I2
sg6385
g6794
sg55
g11
sS'block_loop.thisTrial'
p7198
Nsg70
Vy
sS'block_loop.thisTrialN'
p7199
I0
sg39
F2.0835631915524573
sg34
g753
(S"\x07\xdf\x07\x07\n+'\x0e{\x08"
tRp7200
sa(dp7201
S'trial_loop.thisTrialN'
p7202
I56
sg6371
g6616
sS'block_loop.thisIndex'
p7203
g6365
sg38
S'right'
p7204
sg59
g63
sS'trial_loop.thisN'
p7205
I56
sg33
g6627
sg64
g65
sS'trial_loop.thisIndex'
p7206
g60
(g99
S'8\x00\x00\x00'
tRp7207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7208
I0
sg6380
g6624
sS'block_loop.thisRepN'
p7209
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7210
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p7211
Nsg70
Vy
sS'block_loop.thisTrialN'
p7212
I0
sg39
F0.8499083560627696
sg34
g753
(S'\x07\xdf\x07\x07\n+/\x00\xf20'
tRp7213
sa(dp7214
S'trial_loop.thisTrialN'
p7215
I57
sg6371
g7013
sS'block_loop.thisIndex'
p7216
g6365
sg38
S'right'
p7217
sg59
g63
sS'trial_loop.thisN'
p7218
I57
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p7219
g60
(g99
S'9\x00\x00\x00'
tRp7220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7221
I0
sg6380
g7020
sS'block_loop.thisRepN'
p7222
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7223
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p7224
Nsg70
Vy
sS'block_loop.thisTrialN'
p7225
I0
sg39
F0.59999851750399102
sg34
g753
(S'\x07\xdf\x07\x07\n+4\x0eg\x80'
tRp7226
sa(dp7227
S'trial_loop.thisTrialN'
p7228
I58
sg6371
S'31-hobnobs.png'
p7229
sS'block_loop.thisIndex'
p7230
g6365
sg38
S'right'
p7231
sg59
g63
sS'trial_loop.thisN'
p7232
I58
sg33
g6762
sg64
g65
sS'trial_loop.thisIndex'
p7233
g60
(g99
S':\x00\x00\x00'
tRp7234
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7235
I0
sg6380
S'25-kitkat.png'
p7236
sS'block_loop.thisRepN'
p7237
I2
sg6383
g6755
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7238
I2
sg6385
g6762
sg55
g11
sS'block_loop.thisTrial'
p7239
Nsg70
Vy
sS'block_loop.thisTrialN'
p7240
I0
sg39
F0.7666399532217838
sg34
g753
(S'\x07\xdf\x07\x07\n+:\x08\xc6\x18'
tRp7241
sa(dp7242
S'trial_loop.thisTrialN'
p7243
I59
sg6371
g6734
sS'block_loop.thisIndex'
p7244
g6365
sg38
S'right'
p7245
sg59
g63
sS'trial_loop.thisN'
p7246
I59
sg33
g6745
sg64
g65
sS'trial_loop.thisIndex'
p7247
g60
(g99
S';\x00\x00\x00'
tRp7248
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7249
I0
sg6380
g6742
sS'block_loop.thisRepN'
p7250
I2
sg6383
g6738
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7251
I2
sg6385
g6745
sg55
g11
sS'block_loop.thisTrial'
p7252
Nsg70
Vy
sS'block_loop.thisTrialN'
p7253
I0
sg39
F0.96665637472051458
sg34
g753
(S'\x07\xdf\x07\x07\n,\x04\x05\xc4\x90'
tRp7254
sa(dp7255
S'trial_loop.thisTrialN'
p7256
I60
sg6371
g6490
sS'block_loop.thisIndex'
p7257
g6365
sg38
S'left'
p7258
sg59
g63
sS'trial_loop.thisN'
p7259
I60
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p7260
g60
(g99
S'<\x00\x00\x00'
tRp7261
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7262
I0
sg6380
g6498
sS'block_loop.thisRepN'
p7263
I2
sg6383
g6494
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7264
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p7265
Nsg70
Vy
sS'block_loop.thisTrialN'
p7266
I0
sg39
F1.7333128634791137
sg34
g753
(S'\x07\xdf\x07\x07\n,\n\x05\xdc\x00'
tRp7267
sa(dp7268
S'trial_loop.thisTrialN'
p7269
I61
sg6371
g6734
sS'block_loop.thisIndex'
p7270
g6365
sg38
S'left'
p7271
sg59
g63
sS'trial_loop.thisN'
p7272
I61
sg33
g6738
sg64
g65
sS'trial_loop.thisIndex'
p7273
g60
(g99
S'=\x00\x00\x00'
tRp7274
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7275
I0
sg6380
g6742
sS'block_loop.thisRepN'
p7276
I2
sg6383
g6738
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7277
I2
sg6385
g6745
sg55
g11
sS'block_loop.thisTrial'
p7278
Nsg70
Vy
sS'block_loop.thisTrialN'
p7279
I0
sg39
F2.1332869768102682
sg34
g753
(S'\x07\xdf\x07\x07\n,\x11\x02\x1e\xf8'
tRp7280
sa(dp7281
S'trial_loop.thisTrialN'
p7282
I62
sg6371
S'10-bounty_redo.png'
p7283
sS'block_loop.thisIndex'
p7284
g6365
sg38
S'left'
p7285
sg59
g63
sS'trial_loop.thisN'
p7286
I62
sg33
g6858
sg64
g65
sS'trial_loop.thisIndex'
p7287
g60
(g99
S'>\x00\x00\x00'
tRp7288
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7289
I0
sg6380
S'4-corn.png'
p7290
sS'block_loop.thisRepN'
p7291
I2
sg6383
g6851
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7292
I2
sg6385
g6858
sg55
g11
sS'block_loop.thisTrial'
p7293
Nsg70
Vy
sS'block_loop.thisTrialN'
p7294
I0
sg39
F0.64993583926479914
sg34
g753
(S'\x07\xdf\x07\x07\n,\x18\x04\xcex'
tRp7295
sa(dp7296
S'trial_loop.thisTrialN'
p7297
I63
sg6371
g6599
sS'block_loop.thisIndex'
p7298
g6365
sg38
S'right'
p7299
sg59
g63
sS'trial_loop.thisN'
p7300
I63
sg33
g6603
sg64
g65
sS'trial_loop.thisIndex'
p7301
g60
(g99
S'?\x00\x00\x00'
tRp7302
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7303
I0
sg6380
g6607
sS'block_loop.thisRepN'
p7304
I2
sg6383
g6603
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7305
I2
sg6385
g6610
sg55
g11
sS'block_loop.thisTrial'
p7306
Nsg70
Vy
sS'block_loop.thisTrialN'
p7307
I0
sg39
F0.83304581455558946
sg34
g753
(S'\x07\xdf\x07\x07\n,\x1d\x0f*\xd0'
tRp7308
sa(dp7309
S'trial_loop.thisTrialN'
p7310
I64
sg6371
g6674
sS'block_loop.thisIndex'
p7311
g6365
sg38
S'right'
p7312
sg59
g63
sS'trial_loop.thisN'
p7313
I64
sg33
g6678
sg64
g65
sS'trial_loop.thisIndex'
p7314
g60
(g99
S'@\x00\x00\x00'
tRp7315
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7316
I0
sg6380
g6682
sS'block_loop.thisRepN'
p7317
I2
sg6383
g6678
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7318
I2
sg6385
g6685
sg55
g11
sS'block_loop.thisTrial'
p7319
Nsg70
Vy
sS'block_loop.thisTrialN'
p7320
I0
sg39
F1.2332910536752024
sg34
g753
(S'\x07\xdf\x07\x07\n,#\r\x1bx'
tRp7321
sa(dp7322
S'trial_loop.thisTrialN'
p7323
I65
sg6371
S'19-caramello_redo.png'
p7324
sS'block_loop.thisIndex'
p7325
g6365
sg38
S'left'
p7326
sg59
g63
sS'trial_loop.thisN'
p7327
I65
sg33
S'19-caramello_redo.png'
p7328
sg64
g65
sS'trial_loop.thisIndex'
p7329
g60
(g99
S'A\x00\x00\x00'
tRp7330
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7331
I0
sg6380
S'30-spaghetti_hoops.png'
p7332
sS'block_loop.thisRepN'
p7333
I2
sg6383
g7328
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7334
I2
sg6385
S'30-spaghetti_hoops.png'
p7335
sg55
g11
sS'block_loop.thisTrial'
p7336
Nsg70
Vy
sS'block_loop.thisTrialN'
p7337
I0
sg39
F0.81701261575926765
sg34
g753
(S'\x07\xdf\x07\x07\n,*\x01\xff\xb8'
tRp7338
sa(dp7339
S'trial_loop.thisTrialN'
p7340
I66
sg6371
g7283
sS'block_loop.thisIndex'
p7341
g6365
sg38
S'left'
p7342
sg59
g63
sS'trial_loop.thisN'
p7343
I66
sg33
g6851
sg64
g65
sS'trial_loop.thisIndex'
p7344
g60
(g99
S'B\x00\x00\x00'
tRp7345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7346
I0
sg6380
g7290
sS'block_loop.thisRepN'
p7347
I2
sg6383
g6851
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7348
I2
sg6385
g6858
sg55
g11
sS'block_loop.thisTrial'
p7349
Nsg70
Vy
sS'block_loop.thisTrialN'
p7350
I0
sg39
F0.79998642945611209
sg34
g753
(S'\x07\xdf\x07\x07\n,/\x0e\xf8\x08'
tRp7351
sa(dp7352
S'trial_loop.thisTrialN'
p7353
I67
sg6371
g6392
sS'block_loop.thisIndex'
p7354
g6365
sg38
S'left'
p7355
sg59
g63
sS'trial_loop.thisN'
p7356
I67
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7357
g60
(g99
S'C\x00\x00\x00'
tRp7358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7359
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7360
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7361
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7362
Nsg70
Vy
sS'block_loop.thisTrialN'
p7363
I0
sg39
F0.65003733325193025
sg34
g753
(S'\x07\xdf\x07\x07\n,5\x0co\x98'
tRp7364
sa(dp7365
S'trial_loop.thisTrialN'
p7366
I68
sg6371
S'27-hartleys_raspberries_jelly.png'
p7367
sS'block_loop.thisIndex'
p7368
g6365
sg38
S'right'
p7369
sg59
g63
sS'trial_loop.thisN'
p7370
I68
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p7371
g60
(g99
S'D\x00\x00\x00'
tRp7372
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7373
I0
sg6380
S'51-mars.png'
p7374
sS'block_loop.thisRepN'
p7375
I2
sg6383
g6494
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7376
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p7377
Nsg70
Vy
sS'block_loop.thisTrialN'
p7378
I0
sg39
F1.3164214703110702
sg34
g753
(S'\x07\xdf\x07\x07\n,;\x07\x85\xc8'
tRp7379
sa(dp7380
S'trial_loop.thisTrialN'
p7381
I69
sg6371
g7123
sS'block_loop.thisIndex'
p7382
g6365
sg38
S'left'
p7383
sg59
g63
sS'trial_loop.thisN'
p7384
I69
sg33
g6787
sg64
g65
sS'trial_loop.thisIndex'
p7385
g60
(g99
S'E\x00\x00\x00'
tRp7386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7387
I0
sg6380
g7130
sS'block_loop.thisRepN'
p7388
I2
sg6383
g6787
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7389
I2
sg6385
g6794
sg55
g11
sS'block_loop.thisTrial'
p7390
Nsg70
Vy
sS'block_loop.thisTrialN'
p7391
I0
sg39
F1.5165174334451876
sg34
g753
(S'\x07\xdf\x07\x07\n-\x05\x0c\xdc\xf8'
tRp7392
sa(dp7393
S'trial_loop.thisTrialN'
p7394
I70
sg6371
S'30-spaghetti_hoops.png'
p7395
sS'block_loop.thisIndex'
p7396
g6365
sg38
S'right'
p7397
sg59
g63
sS'trial_loop.thisN'
p7398
I70
sg33
g7328
sg64
g65
sS'trial_loop.thisIndex'
p7399
g60
(g99
S'F\x00\x00\x00'
tRp7400
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7401
I0
sg6380
S'19-caramello_redo.png'
p7402
sS'block_loop.thisRepN'
p7403
I2
sg6383
g7328
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7404
I2
sg6385
g7335
sg55
g11
sS'block_loop.thisTrial'
p7405
Nsg70
Vy
sS'block_loop.thisTrialN'
p7406
I0
sg39
F0.84975525979734812
sg34
g753
(S'\x07\xdf\x07\x07\n-\x0c\x06\x06\xf8'
tRp7407
sa(dp7408
S'trial_loop.thisTrialN'
p7409
I71
sg6371
g6507
sS'block_loop.thisIndex'
p7410
g6365
sg38
S'left'
p7411
sg59
g63
sS'trial_loop.thisN'
p7412
I71
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7413
g60
(g99
S'G\x00\x00\x00'
tRp7414
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7415
I0
sg6380
g6514
sS'block_loop.thisRepN'
p7416
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7417
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7418
Nsg70
Vy
sS'block_loop.thisTrialN'
p7419
I0
sg39
F0.93327939327082277
sg34
g753
(S'\x07\xdf\x07\x07\n-\x12\x046 '
tRp7420
sa(dp7421
S'trial_loop.thisTrialN'
p7422
I72
sg6371
S'43-mrporky_pork_crackles_redo.png'
p7423
sS'block_loop.thisIndex'
p7424
g6365
sg38
S'right'
p7425
sg59
g63
sS'trial_loop.thisN'
p7426
I72
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7427
g60
(g99
S'H\x00\x00\x00'
tRp7428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7429
I0
sg6380
S'18-mms.png'
p7430
sS'block_loop.thisRepN'
p7431
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7432
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7433
Nsg70
Vy
sS'block_loop.thisTrialN'
p7434
I0
sg39
F0.83329441780279012
sg34
g753
(S'\x07\xdf\x07\x07\n-\x18\x03\xd4x'
tRp7435
sa(dp7436
S'trial_loop.thisTrialN'
p7437
I73
sg6371
g7229
sS'block_loop.thisIndex'
p7438
g6365
sg38
S'right'
p7439
sg59
g63
sS'trial_loop.thisN'
p7440
I73
sg33
g6755
sg64
g65
sS'trial_loop.thisIndex'
p7441
g60
(g99
S'I\x00\x00\x00'
tRp7442
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7443
I0
sg6380
g7236
sS'block_loop.thisRepN'
p7444
I2
sg6383
g6755
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7445
I2
sg6385
g6762
sg55
g11
sS'block_loop.thisTrial'
p7446
Nsg70
Vy
sS'block_loop.thisTrialN'
p7447
I0
sg39
F0.6833139610962462
sg34
g753
(S'\x07\xdf\x07\x07\n-\x1e\x01\xc5 '
tRp7448
sa(dp7449
S'trial_loop.thisTrialN'
p7450
I74
sg6371
g7423
sS'block_loop.thisIndex'
p7451
g6365
sg38
S'right'
p7452
sg59
g63
sS'trial_loop.thisN'
p7453
I74
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7454
g60
(g99
S'J\x00\x00\x00'
tRp7455
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7456
I0
sg6380
g7430
sS'block_loop.thisRepN'
p7457
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7458
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7459
Nsg70
Vy
sS'block_loop.thisTrialN'
p7460
I0
sg39
F0.76662598354414513
sg34
g753
(S'\x07\xdf\x07\x07\n-#\x0c\x9a\x90'
tRp7461
sa(dp7462
S'trial_loop.thisTrialN'
p7463
I75
sg6371
S'49-yorkie.png'
p7464
sS'block_loop.thisIndex'
p7465
g6365
sg38
S'left'
p7466
sg59
g63
sS'trial_loop.thisN'
p7467
I75
sg33
g6460
sg64
g65
sS'trial_loop.thisIndex'
p7468
g60
(g99
S'K\x00\x00\x00'
tRp7469
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7470
I0
sg6380
S'35-raisins.png'
p7471
sS'block_loop.thisRepN'
p7472
I2
sg6383
g6460
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7473
I2
sg6385
g6467
sg55
g11
sS'block_loop.thisTrial'
p7474
Nsg70
Vy
sS'block_loop.thisTrialN'
p7475
I0
sg39
F1.4167018046828161
sg34
g753
(S'\x07\xdf\x07\x07\n-)\t\x99\x08'
tRp7476
sa(dp7477
S'trial_loop.thisTrialN'
p7478
I76
sg6371
g6800
sS'block_loop.thisIndex'
p7479
g6365
sg38
S'left'
p7480
sg59
g63
sS'trial_loop.thisN'
p7481
I76
sg33
g6804
sg64
g65
sS'trial_loop.thisIndex'
p7482
g60
(g99
S'L\x00\x00\x00'
tRp7483
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7484
I0
sg6380
g6808
sS'block_loop.thisRepN'
p7485
I2
sg6383
g6804
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7486
I2
sg6385
g6811
sg55
g11
sS'block_loop.thisTrial'
p7487
Nsg70
Vy
sS'block_loop.thisTrialN'
p7488
I0
sg39
F1.3165762771495793
sg34
g753
(S'\x07\xdf\x07\x07\n-0\x01\x19@'
tRp7489
sa(dp7490
S'trial_loop.thisTrialN'
p7491
I77
sg6371
g6490
sS'block_loop.thisIndex'
p7492
g6365
sg38
S'left'
p7493
sg59
g63
sS'trial_loop.thisN'
p7494
I77
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p7495
g60
(g99
S'M\x00\x00\x00'
tRp7496
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7497
I0
sg6380
g6498
sS'block_loop.thisRepN'
p7498
I2
sg6383
g6494
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7499
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p7500
Nsg70
Vy
sS'block_loop.thisTrialN'
p7501
I0
sg39
F0.94977131067207665
sg34
g753
(S'\x07\xdf\x07\x07\n-6\x06l\x88'
tRp7502
sa(dp7503
S'trial_loop.thisTrialN'
p7504
I78
sg6371
g6539
sS'block_loop.thisIndex'
p7505
g6365
sg38
S'left'
p7506
sg59
g63
sS'trial_loop.thisN'
p7507
I78
sg33
g6550
sg64
g65
sS'trial_loop.thisIndex'
p7508
g60
(g99
S'N\x00\x00\x00'
tRp7509
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7510
I0
sg6380
g6547
sS'block_loop.thisRepN'
p7511
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7512
I2
sg6385
g6550
sg55
g11
sS'block_loop.thisTrial'
p7513
Nsg70
Vy
sS'block_loop.thisTrialN'
p7514
I0
sg39
F0.73329946399280743
sg34
g753
(S'\x07\xdf\x07\x07\n.\x00\x06Ex'
tRp7515
sa(dp7516
S'trial_loop.thisTrialN'
p7517
I79
sg6371
g6426
sS'block_loop.thisIndex'
p7518
g6365
sg38
S'right'
p7519
sg59
g63
sS'trial_loop.thisN'
p7520
I79
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7521
g60
(g99
S'O\x00\x00\x00'
tRp7522
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7523
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7524
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7525
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7526
Nsg70
Vy
sS'block_loop.thisTrialN'
p7527
I0
sg39
F1.1832565143595275
sg34
g753
(S'\x07\xdf\x07\x07\n.\x06\x02\xca\xd8'
tRp7528
sa(dp7529
S'trial_loop.thisTrialN'
p7530
I80
sg6371
g7395
sS'block_loop.thisIndex'
p7531
g6365
sg38
S'right'
p7532
sg59
g63
sS'trial_loop.thisN'
p7533
I80
sg33
g7328
sg64
g65
sS'trial_loop.thisIndex'
p7534
g60
(g99
S'P\x00\x00\x00'
tRp7535
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7536
I0
sg6380
g7402
sS'block_loop.thisRepN'
p7537
I2
sg6383
g7328
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7538
I2
sg6385
g7335
sg55
g11
sS'block_loop.thisTrial'
p7539
Nsg70
Vy
sS'block_loop.thisTrialN'
p7540
I0
sg39
F0.86655222934678022
sg34
g753
(S'\x07\xdf\x07\x07\n.\x0c\x05\xfb@'
tRp7541
sa(dp7542
S'trial_loop.thisTrialN'
p7543
I81
sg6371
g6768
sS'block_loop.thisIndex'
p7544
g6365
sg38
S'right'
p7545
sg59
g63
sS'trial_loop.thisN'
p7546
I81
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p7547
g60
(g99
S'Q\x00\x00\x00'
tRp7548
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7549
I0
sg6380
g6775
sS'block_loop.thisRepN'
p7550
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7551
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7552
Nsg70
Vy
sS'block_loop.thisTrialN'
p7553
I0
sg39
F0.66658056783671782
sg34
g753
(S'\x07\xdf\x07\x07\n.\x12\x04h\xe8'
tRp7554
sa(dp7555
S'trial_loop.thisTrialN'
p7556
I82
sg6371
S'21-nakd_banana_crunch.png'
p7557
sS'block_loop.thisIndex'
p7558
g6365
sg38
S'right'
p7559
sg59
g63
sS'trial_loop.thisN'
p7560
I82
sg33
g6804
sg64
g65
sS'trial_loop.thisIndex'
p7561
g60
(g99
S'R\x00\x00\x00'
tRp7562
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7563
I0
sg6380
S'1-treacle_cookies.png'
p7564
sS'block_loop.thisRepN'
p7565
I2
sg6383
g6804
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7566
I2
sg6385
g6811
sg55
g11
sS'block_loop.thisTrial'
p7567
Nsg70
Vy
sS'block_loop.thisTrialN'
p7568
I0
sg39
F1.3665800261542245
sg34
g753
(S'\x07\xdf\x07\x07\n.\x17\x0f>X'
tRp7569
sa(dp7570
S'trial_loop.thisTrialN'
p7571
I83
sg6371
g6599
sS'block_loop.thisIndex'
p7572
g6365
sg38
S'right'
p7573
sg59
g63
sS'trial_loop.thisN'
p7574
I83
sg33
g6610
sg64
g65
sS'trial_loop.thisIndex'
p7575
g60
(g99
S'S\x00\x00\x00'
tRp7576
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7577
I0
sg6380
g6607
sS'block_loop.thisRepN'
p7578
I2
sg6383
g6603
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7579
I2
sg6385
g6610
sg55
g11
sS'block_loop.thisTrial'
p7580
Nsg70
Vy
sS'block_loop.thisTrialN'
p7581
I0
sg39
F1.2332799349524066
sg34
g753
(S'\x07\xdf\x07\x07\n.\x1e\x06\x06\xf8'
tRp7582
sa(dp7583
S'trial_loop.thisTrialN'
p7584
I84
sg6371
g6556
sS'block_loop.thisIndex'
p7585
g6365
sg38
S'right'
p7586
sg59
g63
sS'trial_loop.thisN'
p7587
I84
sg33
g6567
sg64
g65
sS'trial_loop.thisIndex'
p7588
g60
(g99
S'T\x00\x00\x00'
tRp7589
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7590
I0
sg6380
g6564
sS'block_loop.thisRepN'
p7591
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7592
I2
sg6385
g6567
sg55
g11
sS'block_loop.thisTrial'
p7593
Nsg70
Vy
sS'block_loop.thisTrialN'
p7594
I0
sg39
F0.99989479977375595
sg34
g753
(S'\x07\xdf\x07\x07\n.$\n)\x90'
tRp7595
sa(dp7596
S'trial_loop.thisTrialN'
p7597
I85
sg6371
g6998
sS'block_loop.thisIndex'
p7598
g6365
sg38
S'left'
p7599
sg59
g63
sS'trial_loop.thisN'
p7600
I85
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p7601
g60
(g99
S'U\x00\x00\x00'
tRp7602
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7603
I0
sg6380
g7005
sS'block_loop.thisRepN'
p7604
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7605
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p7606
Nsg70
Vy
sS'block_loop.thisTrialN'
p7607
I0
sg39
F1.0669458321463026
sg34
g753
(S'\x07\xdf\x07\x07\n.*\n\x7f\x80'
tRp7608
sa(dp7609
S'trial_loop.thisTrialN'
p7610
I86
sg6371
g6706
sS'block_loop.thisIndex'
p7611
g6365
sg38
S'left'
p7612
sg59
g63
sS'trial_loop.thisN'
p7613
I86
sg33
g6685
sg64
g65
sS'trial_loop.thisIndex'
p7614
g60
(g99
S'V\x00\x00\x00'
tRp7615
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7616
I0
sg6380
g6713
sS'block_loop.thisRepN'
p7617
I2
sg6383
g6678
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7618
I2
sg6385
g6685
sg55
g11
sS'block_loop.thisTrial'
p7619
Nsg70
Vy
sS'block_loop.thisTrialN'
p7620
I0
sg39
F0.93323292270997626
sg34
g753
(S'\x07\xdf\x07\x07\n.0\x0c\x028'
tRp7621
sa(dp7622
S'trial_loop.thisTrialN'
p7623
I87
sg6371
g7056
sS'block_loop.thisIndex'
p7624
g6365
sg38
S'left'
p7625
sg59
g63
sS'trial_loop.thisN'
p7626
I87
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7627
g60
(g99
S'W\x00\x00\x00'
tRp7628
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7629
I0
sg6380
g7063
sS'block_loop.thisRepN'
p7630
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7631
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7632
Nsg70
Vy
sS'block_loop.thisTrialN'
p7633
I0
sg39
F0.68312693847110495
sg34
g753
(S'\x07\xdf\x07\x07\n.6\x0b\xa0\x90'
tRp7634
sa(dp7635
S'trial_loop.thisTrialN'
p7636
I88
sg6371
g6507
sS'block_loop.thisIndex'
p7637
g6365
sg38
S'left'
p7638
sg59
g63
sS'trial_loop.thisN'
p7639
I88
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7640
g60
(g99
S'X\x00\x00\x00'
tRp7641
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7642
I0
sg6380
g6514
sS'block_loop.thisRepN'
p7643
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7644
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7645
Nsg70
Vy
sS'block_loop.thisTrialN'
p7646
I0
sg39
F0.73334564945707825
sg34
g753
(S'\x07\xdf\x07\x07\n/\x00\x073\xc0'
tRp7647
sa(dp7648
S'trial_loop.thisTrialN'
p7649
I89
sg6371
g6392
sS'block_loop.thisIndex'
p7650
g6365
sg38
S'left'
p7651
sg59
g63
sS'trial_loop.thisN'
p7652
I89
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7653
g60
(g99
S'Y\x00\x00\x00'
tRp7654
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7655
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7656
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7657
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7658
Nsg70
Vy
sS'block_loop.thisTrialN'
p7659
I0
sg39
F0.65005329859741323
sg34
g753
(S'\x07\xdf\x07\x07\n/\x06\x03\xb9 '
tRp7660
sa(dp7661
S'trial_loop.thisTrialN'
p7662
I90
sg6371
g6783
sS'block_loop.thisIndex'
p7663
g6365
sg38
S'right'
p7664
sg59
g63
sS'trial_loop.thisN'
p7665
I90
sg33
g6787
sg64
g65
sS'trial_loop.thisIndex'
p7666
g60
(g99
S'Z\x00\x00\x00'
tRp7667
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7668
I0
sg6380
g6791
sS'block_loop.thisRepN'
p7669
I2
sg6383
g6787
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7670
I2
sg6385
g6794
sg55
g11
sS'block_loop.thisTrial'
p7671
Nsg70
Vy
sS'block_loop.thisTrialN'
p7672
I0
sg39
F1.0166732381167094
sg34
g753
(S'\x07\xdf\x07\x07\n/\x0b\x0e\x11\x90'
tRp7673
sa(dp7674
S'trial_loop.thisTrialN'
p7675
I91
sg6371
g6473
sS'block_loop.thisIndex'
p7676
g6365
sg38
S'right'
p7677
sg59
g63
sS'trial_loop.thisN'
p7678
I91
sg33
g6483
sg64
g65
sS'trial_loop.thisIndex'
p7679
g60
(g99
S'[\x00\x00\x00'
tRp7680
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7681
I0
sg6380
g6481
sS'block_loop.thisRepN'
p7682
I2
sg6383
g6483
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7683
I2
sg6385
g6477
sg55
g11
sS'block_loop.thisTrial'
p7684
Nsg70
Vy
sS'block_loop.thisTrialN'
p7685
I0
sg39
F0.94965271095861681
sg34
g753
(S'\x07\xdf\x07\x07\n/\x11\x0e\xe0\x98'
tRp7686
sa(dp7687
S'trial_loop.thisTrialN'
p7688
I92
sg6371
g7395
sS'block_loop.thisIndex'
p7689
g6365
sg38
S'right'
p7690
sg59
g63
sS'trial_loop.thisN'
p7691
I92
sg33
g7335
sg64
g65
sS'trial_loop.thisIndex'
p7692
g60
(g99
S'\\\x00\x00\x00'
tRp7693
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7694
I0
sg6380
g7402
sS'block_loop.thisRepN'
p7695
I2
sg6383
g7328
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7696
I2
sg6385
g7335
sg55
g11
sS'block_loop.thisTrial'
p7697
Nsg70
Vy
sS'block_loop.thisTrialN'
p7698
I0
sg39
F0.68335244898480596
sg34
g753
(S'\x07\xdf\x07\x07\n/\x17\x0e\xb9\x88'
tRp7699
sa(dp7700
S'trial_loop.thisTrialN'
p7701
I93
sg6371
g6473
sS'block_loop.thisIndex'
p7702
g6365
sg38
S'right'
p7703
sg59
g63
sS'trial_loop.thisN'
p7704
I93
sg33
g6483
sg64
g65
sS'trial_loop.thisIndex'
p7705
g60
(g99
S']\x00\x00\x00'
tRp7706
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7707
I0
sg6380
g6481
sS'block_loop.thisRepN'
p7708
I2
sg6383
g6483
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7709
I2
sg6385
g6477
sg55
g11
sS'block_loop.thisTrial'
p7710
Nsg70
Vy
sS'block_loop.thisTrialN'
p7711
I0
sg39
F0.59973166814779688
sg34
g753
(S'\x07\xdf\x07\x07\n/\x1d\nL\xb8'
tRp7712
sa(dp7713
S'trial_loop.thisTrialN'
p7714
I94
sg6371
S'48-twix.png'
p7715
sS'block_loop.thisIndex'
p7716
g6365
sg38
S'left'
p7717
sg59
g63
sS'trial_loop.thisN'
p7718
I94
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p7719
g60
(g99
S'^\x00\x00\x00'
tRp7720
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7721
I0
sg6380
S'50-polo.png'
p7722
sS'block_loop.thisRepN'
p7723
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7724
I2
sg6385
g6567
sg55
g11
sS'block_loop.thisTrial'
p7725
Nsg70
Vy
sS'block_loop.thisTrialN'
p7726
I0
sg39
F1.3332378263521605
sg34
g753
(S'\x07\xdf\x07\x07\n/#\x04\xabP'
tRp7727
sa(dp7728
S'trial_loop.thisTrialN'
p7729
I95
sg6371
g6706
sS'block_loop.thisIndex'
p7730
g6365
sg38
S'left'
p7731
sg59
g63
sS'trial_loop.thisN'
p7732
I95
sg33
g6678
sg64
g65
sS'trial_loop.thisIndex'
p7733
g60
(g99
S'_\x00\x00\x00'
tRp7734
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7735
I0
sg6380
g6713
sS'block_loop.thisRepN'
p7736
I2
sg6383
g6678
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7737
I2
sg6385
g6685
sg55
g11
sS'block_loop.thisTrial'
p7738
Nsg70
Vy
sS'block_loop.thisTrialN'
p7739
I0
sg39
F0.96667319535299612
sg34
g753
(S'\x07\xdf\x07\x07\n/)\n=\x18'
tRp7740
sa(dp7741
S'trial_loop.thisTrialN'
p7742
I96
sg6371
g6864
sS'block_loop.thisIndex'
p7743
g6365
sg38
S'left'
p7744
sg59
g63
sS'trial_loop.thisN'
p7745
I96
sg33
g6483
sg64
g65
sS'trial_loop.thisIndex'
p7746
g60
(g99
S'`\x00\x00\x00'
tRp7747
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7748
I0
sg6380
g6871
sS'block_loop.thisRepN'
p7749
I2
sg6383
g6483
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7750
I2
sg6385
g6477
sg55
g11
sS'block_loop.thisTrial'
p7751
Nsg70
Vy
sS'block_loop.thisTrialN'
p7752
I0
sg39
F0.81636687453010381
sg34
g753
(S'\x07\xdf\x07\x07\n//\nT\x88'
tRp7753
sa(dp7754
S'trial_loop.thisTrialN'
p7755
I97
sg6371
g6633
sS'block_loop.thisIndex'
p7756
g6365
sg38
S'left'
p7757
sg59
g63
sS'trial_loop.thisN'
p7758
I97
sg33
g6610
sg64
g65
sS'trial_loop.thisIndex'
p7759
g60
(g99
S'a\x00\x00\x00'
tRp7760
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7761
I0
sg6380
g6640
sS'block_loop.thisRepN'
p7762
I2
sg6383
g6603
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7763
I2
sg6385
g6610
sg55
g11
sS'block_loop.thisTrial'
p7764
Nsg70
Vy
sS'block_loop.thisTrialN'
p7765
I0
sg39
F0.85003550863984856
sg34
g753
(S'\x07\xdf\x07\x07\n/5\x08\n\x98'
tRp7766
sa(dp7767
S'trial_loop.thisTrialN'
p7768
I98
sg6371
g7283
sS'block_loop.thisIndex'
p7769
g6365
sg38
S'left'
p7770
sg59
g63
sS'trial_loop.thisN'
p7771
I98
sg33
g6851
sg64
g65
sS'trial_loop.thisIndex'
p7772
g60
(g99
S'b\x00\x00\x00'
tRp7773
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7774
I0
sg6380
g7290
sS'block_loop.thisRepN'
p7775
I2
sg6383
g6851
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7776
I2
sg6385
g6858
sg55
g11
sS'block_loop.thisTrial'
p7777
Nsg70
Vy
sS'block_loop.thisTrialN'
p7778
I0
sg39
F0.6832386958931238
sg34
g753
(S'\x07\xdf\x07\x07\n/;\x069\xc0'
tRp7779
sa(dp7780
S'trial_loop.thisTrialN'
p7781
I99
sg6371
g6522
sS'block_loop.thisIndex'
p7782
g6365
sg38
S'right'
p7783
sg59
g63
sS'trial_loop.thisN'
p7784
I99
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p7785
g60
(g99
S'c\x00\x00\x00'
tRp7786
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7787
I0
sg6380
g6530
sS'block_loop.thisRepN'
p7788
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7789
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p7790
Nsg70
Vy
sS'block_loop.thisTrialN'
p7791
I0
sg39
F0.71663021721178666
sg34
g753
(S'\x07\xdf\x07\x07\n0\x05\x01\xcc\xf0'
tRp7792
sa(dp7793
S'trial_loop.thisTrialN'
p7794
I100
sg6371
g7367
sS'block_loop.thisIndex'
p7795
g6365
sg38
S'right'
p7796
sg59
g63
sS'trial_loop.thisN'
p7797
I100
sg33
g6501
sg64
g65
sS'trial_loop.thisIndex'
p7798
g60
(g99
S'd\x00\x00\x00'
tRp7799
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7800
I0
sg6380
g7374
sS'block_loop.thisRepN'
p7801
I2
sg6383
g6494
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7802
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p7803
Nsg70
Vy
sS'block_loop.thisTrialN'
p7804
I0
sg39
F0.81659894223867013
sg34
g753
(S'\x07\xdf\x07\x07\n0\n\rV\x10'
tRp7805
sa(dp7806
S'trial_loop.thisTrialN'
p7807
I101
sg6371
g7715
sS'block_loop.thisIndex'
p7808
g6365
sg38
S'left'
p7809
sg59
g63
sS'trial_loop.thisN'
p7810
I101
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p7811
g60
(g99
S'e\x00\x00\x00'
tRp7812
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7813
I0
sg6380
g7722
sS'block_loop.thisRepN'
p7814
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7815
I2
sg6385
g6567
sg55
g11
sS'block_loop.thisTrial'
p7816
Nsg70
Vy
sS'block_loop.thisTrialN'
p7817
I0
sg39
F0.60000051317183534
sg34
g753
(S'\x07\xdf\x07\x07\n0\x10\x0b\x0c '
tRp7818
sa(dp7819
S'trial_loop.thisTrialN'
p7820
I102
sg6371
g6674
sS'block_loop.thisIndex'
p7821
g6365
sg38
S'right'
p7822
sg59
g63
sS'trial_loop.thisN'
p7823
I102
sg33
g6678
sg64
g65
sS'trial_loop.thisIndex'
p7824
g60
(g99
S'f\x00\x00\x00'
tRp7825
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7826
I0
sg6380
g6682
sS'block_loop.thisRepN'
p7827
I2
sg6383
g6678
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7828
I2
sg6385
g6685
sg55
g11
sS'block_loop.thisTrial'
p7829
Nsg70
Vy
sS'block_loop.thisTrialN'
p7830
I0
sg39
F0.86665600409651233
sg34
g753
(S'\x07\xdf\x07\x07\n0\x16\x05n\xa0'
tRp7831
sa(dp7832
S'trial_loop.thisTrialN'
p7833
I103
sg6371
g6392
sS'block_loop.thisIndex'
p7834
g6365
sg38
S'left'
p7835
sg59
g63
sS'trial_loop.thisN'
p7836
I103
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p7837
g60
(g99
S'g\x00\x00\x00'
tRp7838
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7839
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7840
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7841
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7842
Nsg70
Vy
sS'block_loop.thisTrialN'
p7843
I0
sg39
F0.59983031117917562
sg34
g753
(S'\x07\xdf\x07\x07\n0\x1c\x03\xdcH'
tRp7844
sa(dp7845
S'trial_loop.thisTrialN'
p7846
I104
sg6371
g6473
sS'block_loop.thisIndex'
p7847
g6365
sg38
S'right'
p7848
sg59
g63
sS'trial_loop.thisN'
p7849
I104
sg33
g6483
sg64
g65
sS'trial_loop.thisIndex'
p7850
g60
(g99
S'h\x00\x00\x00'
tRp7851
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7852
I0
sg6380
g6481
sS'block_loop.thisRepN'
p7853
I2
sg6383
g6483
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7854
I2
sg6385
g6477
sg55
g11
sS'block_loop.thisTrial'
p7855
Nsg70
Vy
sS'block_loop.thisTrialN'
p7856
I0
sg39
F0.64970947346591856
sg34
g753
(S'\x07\xdf\x07\x07\n0!\r\x81\x08'
tRp7857
sa(dp7858
S'trial_loop.thisTrialN'
p7859
I105
sg6371
g6674
sS'block_loop.thisIndex'
p7860
g6365
sg38
S'right'
p7861
sg59
g63
sS'trial_loop.thisN'
p7862
I105
sg33
g6678
sg64
g65
sS'trial_loop.thisIndex'
p7863
g60
(g99
S'i\x00\x00\x00'
tRp7864
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7865
I0
sg6380
g6682
sS'block_loop.thisRepN'
p7866
I2
sg6383
g6678
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7867
I2
sg6385
g6685
sg55
g11
sS'block_loop.thisTrial'
p7868
Nsg70
Vy
sS'block_loop.thisTrialN'
p7869
I0
sg39
F1.099832449394853
sg34
g753
(S"\x07\xdf\x07\x07\n0'\x08\xd5\xb8"
tRp7870
sa(dp7871
S'trial_loop.thisTrialN'
p7872
I106
sg6371
g6768
sS'block_loop.thisIndex'
p7873
g6365
sg38
S'right'
p7874
sg59
g63
sS'trial_loop.thisN'
p7875
I106
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7876
g60
(g99
S'j\x00\x00\x00'
tRp7877
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7878
I0
sg6380
g6775
sS'block_loop.thisRepN'
p7879
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7880
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7881
Nsg70
Vy
sS'block_loop.thisTrialN'
p7882
I0
sg39
F0.68324183194363286
sg34
g753
(S'\x07\xdf\x07\x07\n0-\n\xd1\x88'
tRp7883
sa(dp7884
S'trial_loop.thisTrialN'
p7885
I107
sg6371
g6691
sS'block_loop.thisIndex'
p7886
g6365
sg38
S'right'
p7887
sg59
g63
sS'trial_loop.thisN'
p7888
I107
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p7889
g60
(g99
S'k\x00\x00\x00'
tRp7890
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7891
I0
sg6380
g6698
sS'block_loop.thisRepN'
p7892
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7893
I2
sg6385
g6550
sg55
g11
sS'block_loop.thisTrial'
p7894
Nsg70
Vy
sS'block_loop.thisTrialN'
p7895
I0
sg39
F0.78319858296163147
sg34
g753
(S'\x07\xdf\x07\x07\n03\x06d\xb8'
tRp7896
sa(dp7897
S'trial_loop.thisTrialN'
p7898
I108
sg6371
g7395
sS'block_loop.thisIndex'
p7899
g6365
sg38
S'right'
p7900
sg59
g63
sS'trial_loop.thisN'
p7901
I108
sg33
g7328
sg64
g65
sS'trial_loop.thisIndex'
p7902
g60
(g99
S'l\x00\x00\x00'
tRp7903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7904
I0
sg6380
g7402
sS'block_loop.thisRepN'
p7905
I2
sg6383
g7328
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7906
I2
sg6385
g7335
sg55
g11
sS'block_loop.thisTrial'
p7907
Nsg70
Vy
sS'block_loop.thisTrialN'
p7908
I0
sg39
F0.64989706628239219
sg34
g753
(S'\x07\xdf\x07\x07\n09\x03\xa1\xb0'
tRp7909
sa(dp7910
S'trial_loop.thisTrialN'
p7911
I109
sg6371
g7013
sS'block_loop.thisIndex'
p7912
g6365
sg38
S'right'
p7913
sg59
g63
sS'trial_loop.thisN'
p7914
I109
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p7915
g60
(g99
S'm\x00\x00\x00'
tRp7916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7917
I0
sg6380
g7020
sS'block_loop.thisRepN'
p7918
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7919
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p7920
Nsg70
Vy
sS'block_loop.thisTrialN'
p7921
I0
sg39
F0.78334825808087771
sg34
g753
(S'\x07\xdf\x07\x07\n1\x02\x0e8\xa0'
tRp7922
sa(dp7923
S'trial_loop.thisTrialN'
p7924
I110
sg6371
g6539
sS'block_loop.thisIndex'
p7925
g6365
sg38
S'right'
p7926
sg59
g63
sS'trial_loop.thisN'
p7927
I110
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p7928
g60
(g99
S'n\x00\x00\x00'
tRp7929
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7930
I0
sg6380
g6547
sS'block_loop.thisRepN'
p7931
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7932
I2
sg6385
g6550
sg55
g11
sS'block_loop.thisTrial'
p7933
Nsg70
Vy
sS'block_loop.thisTrialN'
p7934
I0
sg39
F0.61662956149211823
sg34
g753
(S'\x07\xdf\x07\x07\n1\x08\x0b7\x18'
tRp7935
sa(dp7936
S'trial_loop.thisTrialN'
p7937
I111
sg6371
g7557
sS'block_loop.thisIndex'
p7938
g6365
sg38
S'right'
p7939
sg59
g63
sS'trial_loop.thisN'
p7940
I111
sg33
g6804
sg64
g65
sS'trial_loop.thisIndex'
p7941
g60
(g99
S'o\x00\x00\x00'
tRp7942
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7943
I0
sg6380
g7564
sS'block_loop.thisRepN'
p7944
I2
sg6383
g6804
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7945
I2
sg6385
g6811
sg55
g11
sS'block_loop.thisTrial'
p7946
Nsg70
Vy
sS'block_loop.thisTrialN'
p7947
I0
sg39
F0.94988506376284931
sg34
g753
(S'\x07\xdf\x07\x07\n1\x0e\x06\x12\xb0'
tRp7948
sa(dp7949
S'trial_loop.thisTrialN'
p7950
I112
sg6371
g6970
sS'block_loop.thisIndex'
p7951
g6365
sg38
S'left'
p7952
sg59
g63
sS'trial_loop.thisN'
p7953
I112
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p7954
g60
(g99
S'p\x00\x00\x00'
tRp7955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7956
I0
sg6380
g6977
sS'block_loop.thisRepN'
p7957
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7958
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p7959
Nsg70
Vy
sS'block_loop.thisTrialN'
p7960
I0
sg39
F0.83333233550001751
sg34
g753
(S'\x07\xdf\x07\x07\n1\x14\x05\xb1\x08'
tRp7961
sa(dp7962
S'trial_loop.thisTrialN'
p7963
I113
sg6371
g6490
sS'block_loop.thisIndex'
p7964
g6365
sg38
S'left'
p7965
sg59
g63
sS'trial_loop.thisN'
p7966
I113
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p7967
g60
(g99
S'q\x00\x00\x00'
tRp7968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7969
I0
sg6380
g6498
sS'block_loop.thisRepN'
p7970
I2
sg6383
g6494
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7971
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p7972
Nsg70
Vy
sS'block_loop.thisTrialN'
p7973
I0
sg39
F1.533315543376375
sg34
g753
(S'\x07\xdf\x07\x07\n1\x1a\x03\xa1\xb0'
tRp7974
sa(dp7975
S'trial_loop.thisTrialN'
p7976
I114
sg6371
g6409
sS'block_loop.thisIndex'
p7977
g6365
sg38
S'right'
p7978
sg59
g63
sS'trial_loop.thisN'
p7979
I114
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7980
g60
(g99
S'r\x00\x00\x00'
tRp7981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7982
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7983
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7984
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7985
Nsg70
Vy
sS'block_loop.thisTrialN'
p7986
I0
sg39
F0.81654192314545071
sg34
g753
(S'\x07\xdf\x07\x07\n1 \x0cLp'
tRp7987
sa(dp7988
S'trial_loop.thisTrialN'
p7989
I115
sg6371
g7557
sS'block_loop.thisIndex'
p7990
g6365
sg38
S'right'
p7991
sg59
g63
sS'trial_loop.thisN'
p7992
I115
sg33
g6804
sg64
g65
sS'trial_loop.thisIndex'
p7993
g60
(g99
S's\x00\x00\x00'
tRp7994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7995
I0
sg6380
g7564
sS'block_loop.thisRepN'
p7996
I2
sg6383
g6804
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7997
I2
sg6385
g6811
sg55
g11
sS'block_loop.thisTrial'
p7998
Nsg70
Vy
sS'block_loop.thisTrialN'
p7999
I0
sg39
F0.93324062028841581
sg34
g753
(S'\x07\xdf\x07\x07\n1&\n\x02\x80'
tRp8000
sa(dp8001
S'trial_loop.thisTrialN'
p8002
I116
sg6371
g6674
sS'block_loop.thisIndex'
p8003
g6365
sg38
S'right'
p8004
sg59
g63
sS'trial_loop.thisN'
p8005
I116
sg33
g6678
sg64
g65
sS'trial_loop.thisIndex'
p8006
g60
(g99
S't\x00\x00\x00'
tRp8007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8008
I0
sg6380
g6682
sS'block_loop.thisRepN'
p8009
I2
sg6383
g6678
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8010
I2
sg6385
g6685
sg55
g11
sS'block_loop.thisTrial'
p8011
Nsg70
Vy
sS'block_loop.thisTrialN'
p8012
I0
sg39
F1.4999288686813088
sg34
g753
(S'\x07\xdf\x07\x07\n1,\t\xa0\xd8'
tRp8013
sa(dp8014
S'trial_loop.thisTrialN'
p8015
I117
sg6371
g7464
sS'block_loop.thisIndex'
p8016
g6365
sg38
S'left'
p8017
sg59
g63
sS'trial_loop.thisN'
p8018
I117
sg33
g6460
sg64
g65
sS'trial_loop.thisIndex'
p8019
g60
(g99
S'u\x00\x00\x00'
tRp8020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8021
I0
sg6380
g7471
sS'block_loop.thisRepN'
p8022
I2
sg6383
g6460
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8023
I2
sg6385
g6467
sg55
g11
sS'block_loop.thisTrial'
p8024
Nsg70
Vy
sS'block_loop.thisTrialN'
p8025
I0
sg39
F1.2665314743971976
sg34
g753
(S'\x07\xdf\x07\x07\n13\x02M\xd8'
tRp8026
sa(dp8027
S'trial_loop.thisTrialN'
p8028
I118
sg6371
g6616
sS'block_loop.thisIndex'
p8029
g6365
sg38
S'right'
p8030
sg59
g63
sS'trial_loop.thisN'
p8031
I118
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p8032
g60
(g99
S'v\x00\x00\x00'
tRp8033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8034
I0
sg6380
g6624
sS'block_loop.thisRepN'
p8035
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8036
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p8037
Nsg70
Vy
sS'block_loop.thisTrialN'
p8038
I0
sg39
F0.88332639125837886
sg34
g753
(S'\x07\xdf\x07\x07\n19\x06\xedp'
tRp8039
sa(dp8040
S'trial_loop.thisTrialN'
p8041
I119
sg6371
g6706
sS'block_loop.thisIndex'
p8042
g6365
sg38
S'left'
p8043
sg59
g63
sS'trial_loop.thisN'
p8044
I119
sg33
g6685
sg64
g65
sS'trial_loop.thisIndex'
p8045
g60
(g99
S'w\x00\x00\x00'
tRp8046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8047
I0
sg6380
g6713
sS'block_loop.thisRepN'
p8048
I2
sg6383
g6678
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8049
I2
sg6385
g6685
sg55
g11
sS'block_loop.thisTrial'
p8050
Nsg70
Vy
sS'block_loop.thisTrialN'
p8051
I0
sg39
F1.8332858649382615
sg34
g753
(S'\x07\xdf\x07\x07\n2\x03\x05\x95\xb0'
tRp8052
sa(dp8053
S'trial_loop.thisTrialN'
p8054
I120
sg6371
g6998
sS'block_loop.thisIndex'
p8055
g6365
sg38
S'left'
p8056
sg59
g63
sS'trial_loop.thisN'
p8057
I120
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p8058
g60
(g99
S'x\x00\x00\x00'
tRp8059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8060
I0
sg6380
g7005
sS'block_loop.thisRepN'
p8061
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8062
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p8063
Nsg70
Vy
sS'block_loop.thisTrialN'
p8064
I0
sg39
F0.86665001709116041
sg34
g753
(S'\x07\xdf\x07\x07\n2\n\x03\xc0\xf0'
tRp8065
sa(dp8066
S'trial_loop.thisTrialN'
p8067
I121
sg6371
g6817
sS'block_loop.thisIndex'
p8068
g6365
sg38
S'left'
p8069
sg59
g63
sS'trial_loop.thisN'
p8070
I121
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p8071
g60
(g99
S'y\x00\x00\x00'
tRp8072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8073
I0
sg6380
g6825
sS'block_loop.thisRepN'
p8074
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8075
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p8076
Nsg70
Vy
sS'block_loop.thisTrialN'
p8077
I0
sg39
F1.2666420914374612
sg34
g753
(S'\x07\xdf\x07\x07\n2\x10\x02.\x98'
tRp8078
sa(dp8079
S'trial_loop.thisTrialN'
p8080
I122
sg6371
g7715
sS'block_loop.thisIndex'
p8081
g6365
sg38
S'left'
p8082
sg59
g63
sS'trial_loop.thisN'
p8083
I122
sg33
g6567
sg64
g65
sS'trial_loop.thisIndex'
p8084
g60
(g99
S'z\x00\x00\x00'
tRp8085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8086
I0
sg6380
g7722
sS'block_loop.thisRepN'
p8087
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8088
I2
sg6385
g6567
sg55
g11
sS'block_loop.thisTrial'
p8089
Nsg70
Vy
sS'block_loop.thisTrialN'
p8090
I0
sg39
F0.73327836692715209
sg34
g753
(S'\x07\xdf\x07\x07\n2\x16\x06\xcaH'
tRp8091
sa(dp8092
S'trial_loop.thisTrialN'
p8093
I123
sg6371
g7123
sS'block_loop.thisIndex'
p8094
g6365
sg38
S'left'
p8095
sg59
g63
sS'trial_loop.thisN'
p8096
I123
sg33
g6787
sg64
g65
sS'trial_loop.thisIndex'
p8097
g60
(g99
S'{\x00\x00\x00'
tRp8098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8099
I0
sg6380
g7130
sS'block_loop.thisRepN'
p8100
I2
sg6383
g6787
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8101
I2
sg6385
g6794
sg55
g11
sS'block_loop.thisTrial'
p8102
Nsg70
Vy
sS'block_loop.thisTrialN'
p8103
I0
sg39
F0.7832778395004425
sg34
g753
(S'\x07\xdf\x07\x07\n2\x1c\x03\x15\x10'
tRp8104
sa(dp8105
S'trial_loop.thisTrialN'
p8106
I124
sg6371
g6734
sS'block_loop.thisIndex'
p8107
g6365
sg38
S'right'
p8108
sg59
g63
sS'trial_loop.thisN'
p8109
I124
sg33
g6738
sg64
g65
sS'trial_loop.thisIndex'
p8110
g60
(g99
S'|\x00\x00\x00'
tRp8111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8112
I0
sg6380
g6742
sS'block_loop.thisRepN'
p8113
I2
sg6383
g6738
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8114
I2
sg6385
g6745
sg55
g11
sS'block_loop.thisTrial'
p8115
Nsg70
Vy
sS'block_loop.thisTrialN'
p8116
I0
sg39
F1.0999769927966554
sg34
g753
(S'\x07\xdf\x07\x07\n2"\x00N '
tRp8117
sa(dp8118
S'trial_loop.thisTrialN'
p8119
I125
sg6371
g6372
sS'block_loop.thisIndex'
p8120
g6365
sg38
S'left'
p8121
sg59
g63
sS'trial_loop.thisN'
p8122
I125
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8123
g60
(g99
S'}\x00\x00\x00'
tRp8124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8125
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8126
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8127
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8128
Nsg70
Vy
sS'block_loop.thisTrialN'
p8129
I0
sg39
F0.66664842055706686
sg34
g753
(S'\x07\xdf\x07\x07\n2(\x02M\xd8'
tRp8130
sa(dp8131
S'trial_loop.thisTrialN'
p8132
I126
sg6371
g7324
sS'block_loop.thisIndex'
p8133
g6365
sg38
S'left'
p8134
sg59
g63
sS'trial_loop.thisN'
p8135
I126
sg33
g7328
sg64
g65
sS'trial_loop.thisIndex'
p8136
g60
(g99
S'~\x00\x00\x00'
tRp8137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8138
I0
sg6380
g7332
sS'block_loop.thisRepN'
p8139
I2
sg6383
g7328
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8140
I2
sg6385
g7335
sg55
g11
sS'block_loop.thisTrial'
p8141
Nsg70
Vy
sS'block_loop.thisTrialN'
p8142
I0
sg39
F0.66659054617684887
sg34
g753
(S'\x07\xdf\x07\x07\n2-\r#H'
tRp8143
sa(dp8144
S'trial_loop.thisTrialN'
p8145
I127
sg6371
g6616
sS'block_loop.thisIndex'
p8146
g6365
sg38
S'right'
p8147
sg59
g63
sS'trial_loop.thisN'
p8148
I127
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p8149
g60
(g99
S'\x7f\x00\x00\x00'
tRp8150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8151
I0
sg6380
g6624
sS'block_loop.thisRepN'
p8152
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8153
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p8154
Nsg70
Vy
sS'block_loop.thisTrialN'
p8155
I0
sg39
F1.0333470464247512
sg34
g753
(S'\x07\xdf\x07\x07\n23\x08w\xf8'
tRp8156
sa(dp8157
S'trial_loop.thisTrialN'
p8158
I128
sg6371
g6800
sS'block_loop.thisIndex'
p8159
g6365
sg38
S'left'
p8160
sg59
g63
sS'trial_loop.thisN'
p8161
I128
sg33
g6804
sg64
g65
sS'trial_loop.thisIndex'
p8162
g60
(g99
S'\x80\x00\x00\x00'
tRp8163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8164
I0
sg6380
g6808
sS'block_loop.thisRepN'
p8165
I2
sg6383
g6804
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8166
I2
sg6385
g6811
sg55
g11
sS'block_loop.thisTrial'
p8167
Nsg70
Vy
sS'block_loop.thisTrialN'
p8168
I0
sg39
F1.283229800915251
sg34
g753
(S'\x07\xdf\x07\x07\n29\t\x81\x98'
tRp8169
sa(dp8170
S'trial_loop.thisTrialN'
p8171
I129
sg6371
g7464
sS'block_loop.thisIndex'
p8172
g6365
sg38
S'left'
p8173
sg59
g63
sS'trial_loop.thisN'
p8174
I129
sg33
g6467
sg64
g65
sS'trial_loop.thisIndex'
p8175
g60
(g99
S'\x81\x00\x00\x00'
tRp8176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8177
I0
sg6380
g7471
sS'block_loop.thisRepN'
p8178
I2
sg6383
g6460
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8179
I2
sg6385
g6467
sg55
g11
sS'block_loop.thisTrial'
p8180
Nsg70
Vy
sS'block_loop.thisTrialN'
p8181
I0
sg39
F0.61664951817419933
sg34
g753
(S'\x07\xdf\x07\x07\n3\x03\x0e[\xc8'
tRp8182
sa(dp8183
S'trial_loop.thisTrialN'
p8184
I130
sg6371
g7395
sS'block_loop.thisIndex'
p8185
g6365
sg38
S'right'
p8186
sg59
g63
sS'trial_loop.thisN'
p8187
I130
sg33
g7335
sg64
g65
sS'trial_loop.thisIndex'
p8188
g60
(g99
S'\x82\x00\x00\x00'
tRp8189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8190
I0
sg6380
g7402
sS'block_loop.thisRepN'
p8191
I2
sg6383
g7328
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8192
I2
sg6385
g7335
sg55
g11
sS'block_loop.thisTrial'
p8193
Nsg70
Vy
sS'block_loop.thisTrialN'
p8194
I0
sg39
F0.73359425270336942
sg34
g753
(S'\x07\xdf\x07\x07\n3\t\x08\xf8\xe0'
tRp8195
sa(dp8196
S'trial_loop.thisTrialN'
p8197
I131
sg6371
g7283
sS'block_loop.thisIndex'
p8198
g6365
sg38
S'left'
p8199
sg59
g63
sS'trial_loop.thisN'
p8200
I131
sg33
g6851
sg64
g65
sS'trial_loop.thisIndex'
p8201
g60
(g99
S'\x83\x00\x00\x00'
tRp8202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8203
I0
sg6380
g7290
sS'block_loop.thisRepN'
p8204
I2
sg6383
g6851
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8205
I2
sg6385
g6858
sg55
g11
sS'block_loop.thisTrial'
p8206
Nsg70
Vy
sS'block_loop.thisTrialN'
p8207
I0
sg39
F0.61658565679044841
sg34
g753
(S'\x07\xdf\x07\x07\n3\x0f\x05~@'
tRp8208
sa(dp8209
S'trial_loop.thisTrialN'
p8210
I132
sg6371
g6706
sS'block_loop.thisIndex'
p8211
g6365
sg38
S'left'
p8212
sg59
g63
sS'trial_loop.thisN'
p8213
I132
sg33
g6678
sg64
g65
sS'trial_loop.thisIndex'
p8214
g60
(g99
S'\x84\x00\x00\x00'
tRp8215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8216
I0
sg6380
g6713
sS'block_loop.thisRepN'
p8217
I2
sg6383
g6678
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8218
I2
sg6385
g6685
sg55
g11
sS'block_loop.thisTrial'
p8219
Nsg70
Vy
sS'block_loop.thisTrialN'
p8220
I0
sg39
F1.6999529877575696
sg34
g753
(S'\x07\xdf\x07\x07\n3\x15\x00\x1f@'
tRp8221
sa(dp8222
S'trial_loop.thisTrialN'
p8223
I133
sg6371
g6522
sS'block_loop.thisIndex'
p8224
g6365
sg38
S'right'
p8225
sg59
g63
sS'trial_loop.thisN'
p8226
I133
sg33
g6526
sg64
g65
sS'trial_loop.thisIndex'
p8227
g60
(g99
S'\x85\x00\x00\x00'
tRp8228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8229
I0
sg6380
g6530
sS'block_loop.thisRepN'
p8230
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8231
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p8232
Nsg70
Vy
sS'block_loop.thisTrialN'
p8233
I0
sg39
F0.69985120867659134
sg34
g753
(S'\x07\xdf\x07\x07\n3\x1b\x0be\xf8'
tRp8234
sa(dp8235
S'trial_loop.thisTrialN'
p8236
I134
sg6371
g7715
sS'block_loop.thisIndex'
p8237
g6365
sg38
S'left'
p8238
sg59
g63
sS'trial_loop.thisN'
p8239
I134
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p8240
g60
(g99
S'\x86\x00\x00\x00'
tRp8241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8242
I0
sg6380
g7722
sS'block_loop.thisRepN'
p8243
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8244
I2
sg6385
g6567
sg55
g11
sS'block_loop.thisTrial'
p8245
Nsg70
Vy
sS'block_loop.thisTrialN'
p8246
I0
sg39
F0.66665041622491117
sg34
g753
(S'\x07\xdf\x07\x07\n3!\x073\xc0'
tRp8247
sa(dp8248
S'trial_loop.thisTrialN'
p8249
I135
sg6371
g6522
sS'block_loop.thisIndex'
p8250
g6365
sg38
S'right'
p8251
sg59
g63
sS'trial_loop.thisN'
p8252
I135
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p8253
g60
(g99
S'\x87\x00\x00\x00'
tRp8254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8255
I0
sg6380
g6530
sS'block_loop.thisRepN'
p8256
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8257
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p8258
Nsg70
Vy
sS'block_loop.thisTrialN'
p8259
I0
sg39
F0.61660390289944189
sg34
g753
(S"\x07\xdf\x07\x07\n3'\x02\x88p"
tRp8260
sa(dp8261
S'trial_loop.thisTrialN'
p8262
I136
sg6371
g6847
sS'block_loop.thisIndex'
p8263
g6365
sg38
S'right'
p8264
sg59
g63
sS'trial_loop.thisN'
p8265
I136
sg33
g6858
sg64
g65
sS'trial_loop.thisIndex'
p8266
g60
(g99
S'\x88\x00\x00\x00'
tRp8267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8268
I0
sg6380
g6855
sS'block_loop.thisRepN'
p8269
I2
sg6383
g6851
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8270
I2
sg6385
g6858
sg55
g11
sS'block_loop.thisTrial'
p8271
Nsg70
Vy
sS'block_loop.thisTrialN'
p8272
I0
sg39
F0.86699840375058557
sg34
g753
(S'\x07\xdf\x07\x07\n3,\x0c\xa6H'
tRp8273
sa(dp8274
S'trial_loop.thisTrialN'
p8275
I137
sg6371
g6734
sS'block_loop.thisIndex'
p8276
g6365
sg38
S'right'
p8277
sg59
g63
sS'trial_loop.thisN'
p8278
I137
sg33
g6738
sg64
g65
sS'trial_loop.thisIndex'
p8279
g60
(g99
S'\x89\x00\x00\x00'
tRp8280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8281
I0
sg6380
g6742
sS'block_loop.thisRepN'
p8282
I2
sg6383
g6738
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8283
I2
sg6385
g6745
sg55
g11
sS'block_loop.thisTrial'
p8284
Nsg70
Vy
sS'block_loop.thisTrialN'
p8285
I0
sg39
F1.8832978817117692
sg34
g753
(S'\x07\xdf\x07\x07\n32\x0b\x13\xf0'
tRp8286
sa(dp8287
S'trial_loop.thisTrialN'
p8288
I138
sg6371
g7557
sS'block_loop.thisIndex'
p8289
g6365
sg38
S'right'
p8290
sg59
g63
sS'trial_loop.thisN'
p8291
I138
sg33
g6811
sg64
g65
sS'trial_loop.thisIndex'
p8292
g60
(g99
S'\x8a\x00\x00\x00'
tRp8293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8294
I0
sg6380
g7564
sS'block_loop.thisRepN'
p8295
I2
sg6383
g6804
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8296
I2
sg6385
g6811
sg55
g11
sS'block_loop.thisTrial'
p8297
Nsg70
Vy
sS'block_loop.thisTrialN'
p8298
I0
sg39
F2.2998078171467569
sg34
g753
(S'\x07\xdf\x07\x07\n39\t\xb4`'
tRp8299
sa(dp8300
S'trial_loop.thisTrialN'
p8301
I139
sg6371
g7464
sS'block_loop.thisIndex'
p8302
g6365
sg38
S'left'
p8303
sg59
g63
sS'trial_loop.thisN'
p8304
I139
sg33
g6460
sg64
g65
sS'trial_loop.thisIndex'
p8305
g60
(g99
S'\x8b\x00\x00\x00'
tRp8306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8307
I0
sg6380
g7471
sS'block_loop.thisRepN'
p8308
I2
sg6383
g6460
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8309
I2
sg6385
g6467
sg55
g11
sS'block_loop.thisTrial'
p8310
Nsg70
Vy
sS'block_loop.thisTrialN'
p8311
I0
sg39
F0.81657100288339279
sg34
g753
(S'\x07\xdf\x07\x07\n4\x04\x0e\xc5@'
tRp8312
sa(dp8313
S'trial_loop.thisTrialN'
p8314
I140
sg6371
g6970
sS'block_loop.thisIndex'
p8315
g6365
sg38
S'left'
p8316
sg59
g63
sS'trial_loop.thisN'
p8317
I140
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p8318
g60
(g99
S'\x8c\x00\x00\x00'
tRp8319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8320
I0
sg6380
g6977
sS'block_loop.thisRepN'
p8321
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8322
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p8323
Nsg70
Vy
sS'block_loop.thisTrialN'
p8324
I0
sg39
F0.71665245465737826
sg34
g753
(S'\x07\xdf\x07\x07\n4\n\x0c{P'
tRp8325
sa(dp8326
S'trial_loop.thisTrialN'
p8327
I141
sg6371
g6768
sS'block_loop.thisIndex'
p8328
g6365
sg38
S'right'
p8329
sg59
g63
sS'trial_loop.thisN'
p8330
I141
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8331
g60
(g99
S'\x8d\x00\x00\x00'
tRp8332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8333
I0
sg6380
g6775
sS'block_loop.thisRepN'
p8334
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8335
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8336
Nsg70
Vy
sS'block_loop.thisTrialN'
p8337
I0
sg39
F0.68374046391272714
sg34
g753
(S'\x07\xdf\x07\x07\n4\x10\x08\xc6\x18'
tRp8338
sa(dp8339
S'trial_loop.thisTrialN'
p8340
I142
sg6371
g7229
sS'block_loop.thisIndex'
p8341
g6365
sg38
S'right'
p8342
sg59
g63
sS'trial_loop.thisN'
p8343
I142
sg33
g6755
sg64
g65
sS'trial_loop.thisIndex'
p8344
g60
(g99
S'\x8e\x00\x00\x00'
tRp8345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8346
I0
sg6380
g7236
sS'block_loop.thisRepN'
p8347
I2
sg6383
g6755
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8348
I2
sg6385
g6762
sg55
g11
sS'block_loop.thisTrial'
p8349
Nsg70
Vy
sS'block_loop.thisTrialN'
p8350
I0
sg39
F0.69989682395134878
sg34
g753
(S'\x07\xdf\x07\x07\n4\x16\x04YH'
tRp8351
sa(dp8352
S'trial_loop.thisTrialN'
p8353
I143
sg6371
g7367
sS'block_loop.thisIndex'
p8354
g6365
sg38
S'right'
p8355
sg59
g63
sS'trial_loop.thisN'
p8356
I143
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p8357
g60
(g99
S'\x8f\x00\x00\x00'
tRp8358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8359
I0
sg6380
g7374
sS'block_loop.thisRepN'
p8360
I2
sg6383
g6494
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8361
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p8362
Nsg70
Vy
sS'block_loop.thisTrialN'
p8363
I0
sg39
F0.88329645623525721
sg34
g753
(S'\x07\xdf\x07\x07\n4\x1c\x00a\xa8'
tRp8364
sa(dp8365
S'trial_loop.thisTrialN'
p8366
I144
sg6371
g6426
sS'block_loop.thisIndex'
p8367
g6365
sg38
S'right'
p8368
sg59
g63
sS'trial_loop.thisN'
p8369
I144
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p8370
g60
(g99
S'\x90\x00\x00\x00'
tRp8371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8372
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8373
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8374
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8375
Nsg70
Vy
sS'block_loop.thisTrialN'
p8376
I0
sg39
F1.7166176730106599
sg34
g753
(S'\x07\xdf\x07\x07\n4!\x0eP\x10'
tRp8377
sa(dp8378
S'trial_loop.thisTrialN'
p8379
I145
sg6371
g7056
sS'block_loop.thisIndex'
p8380
g6365
sg38
S'left'
p8381
sg59
g63
sS'trial_loop.thisN'
p8382
I145
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8383
g60
(g99
S'\x91\x00\x00\x00'
tRp8384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8385
I0
sg6380
g7063
sS'block_loop.thisRepN'
p8386
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8387
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8388
Nsg70
Vy
sS'block_loop.thisTrialN'
p8389
I0
sg39
F1.6165292078885614
sg34
g753
(S'\x07\xdf\x07\x07\n4(\n\x93\x08'
tRp8390
sa(dp8391
S'trial_loop.thisTrialN'
p8392
I146
sg6371
g6372
sS'block_loop.thisIndex'
p8393
g6365
sg38
S'left'
p8394
sg59
g63
sS'trial_loop.thisN'
p8395
I146
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p8396
g60
(g99
S'\x92\x00\x00\x00'
tRp8397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8398
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8399
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8400
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8401
Nsg70
Vy
sS'block_loop.thisTrialN'
p8402
I0
sg39
F0.98335612671598938
sg34
g753
(S'\x07\xdf\x07\x07\n4/\x05(P'
tRp8403
sa(dp8404
S'trial_loop.thisTrialN'
p8405
I147
sg6371
g7464
sS'block_loop.thisIndex'
p8406
g6365
sg38
S'left'
p8407
sg59
g63
sS'trial_loop.thisN'
p8408
I147
sg33
g6467
sg64
g65
sS'trial_loop.thisIndex'
p8409
g60
(g99
S'\x93\x00\x00\x00'
tRp8410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8411
I0
sg6380
g7471
sS'block_loop.thisRepN'
p8412
I2
sg6383
g6460
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8413
I2
sg6385
g6467
sg55
g11
sS'block_loop.thisTrial'
p8414
Nsg70
Vy
sS'block_loop.thisTrialN'
p8415
I0
sg39
F0.69992761426146899
sg34
g753
(S'\x07\xdf\x07\x07\n45\x05~@'
tRp8416
sa(dp8417
S'trial_loop.thisTrialN'
p8418
I148
sg6371
g6556
sS'block_loop.thisIndex'
p8419
g6365
sg38
S'right'
p8420
sg59
g63
sS'trial_loop.thisN'
p8421
I148
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p8422
g60
(g99
S'\x94\x00\x00\x00'
tRp8423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8424
I0
sg6380
g6564
sS'block_loop.thisRepN'
p8425
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8426
I2
sg6385
g6567
sg55
g11
sS'block_loop.thisTrial'
p8427
Nsg70
Vy
sS'block_loop.thisTrialN'
p8428
I0
sg39
F0.9665674249345102
sg34
g753
(S'\x07\xdf\x07\x07\n4;\x01L\x08'
tRp8429
sa(dp8430
S'trial_loop.thisTrialN'
p8431
I149
sg6371
g6522
sS'block_loop.thisIndex'
p8432
g6365
sg38
S'right'
p8433
sg59
g63
sS'trial_loop.thisN'
p8434
I149
sg33
g6526
sg64
g65
sS'trial_loop.thisIndex'
p8435
g60
(g99
S'\x95\x00\x00\x00'
tRp8436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8437
I0
sg6380
g6530
sS'block_loop.thisRepN'
p8438
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8439
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p8440
Nsg70
Vy
sS'block_loop.thisTrialN'
p8441
I0
sg39
F0.68337212057122088
sg34
g753
(S'\x07\xdf\x07\x07\n5\x05\x01cx'
tRp8442
sa(dp8443
S'trial_loop.thisTrialN'
p8444
I150
sg6371
g6970
sS'block_loop.thisIndex'
p8445
g6365
sg38
S'right'
p8446
sg59
g63
sS'trial_loop.thisN'
p8447
I150
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p8448
g60
(g99
S'\x96\x00\x00\x00'
tRp8449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8450
I0
sg6380
g6977
sS'block_loop.thisRepN'
p8451
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8452
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p8453
Nsg70
Vy
sS'block_loop.thisTrialN'
p8454
I0
sg39
F0.81659580618907057
sg34
g753
(S'\x07\xdf\x07\x07\n5\n\x0c8\xe8'
tRp8455
sa(dp8456
S'trial_loop.thisTrialN'
p8457
I151
sg6371
g6633
sS'block_loop.thisIndex'
p8458
g6365
sg38
S'left'
p8459
sg59
g63
sS'trial_loop.thisN'
p8460
I151
sg33
g6603
sg64
g65
sS'trial_loop.thisIndex'
p8461
g60
(g99
S'\x97\x00\x00\x00'
tRp8462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8463
I0
sg6380
g6640
sS'block_loop.thisRepN'
p8464
I2
sg6383
g6603
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8465
I2
sg6385
g6610
sg55
g11
sS'block_loop.thisTrial'
p8466
Nsg70
Vy
sS'block_loop.thisTrialN'
p8467
I0
sg39
F0.73332027596188709
sg34
g753
(S'\x07\xdf\x07\x07\n5\x10\t\xee\xf8'
tRp8468
sa(dp8469
S'trial_loop.thisTrialN'
p8470
I152
sg6371
g6691
sS'block_loop.thisIndex'
p8471
g6365
sg38
S'right'
p8472
sg59
g63
sS'trial_loop.thisN'
p8473
I152
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p8474
g60
(g99
S'\x98\x00\x00\x00'
tRp8475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8476
I0
sg6380
g6698
sS'block_loop.thisRepN'
p8477
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8478
I2
sg6385
g6550
sg55
g11
sS'block_loop.thisTrial'
p8479
Nsg70
Vy
sS'block_loop.thisTrialN'
p8480
I0
sg39
F0.7337450682052804
sg34
g753
(S'\x07\xdf\x07\x07\n5\x16\x06tX'
tRp8481
sa(dp8482
S'trial_loop.thisTrialN'
p8483
I153
sg6371
g6847
sS'block_loop.thisIndex'
p8484
g6365
sg38
S'right'
p8485
sg59
g63
sS'trial_loop.thisN'
p8486
I153
sg33
g6851
sg64
g65
sS'trial_loop.thisIndex'
p8487
g60
(g99
S'\x99\x00\x00\x00'
tRp8488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8489
I0
sg6380
g6855
sS'block_loop.thisRepN'
p8490
I2
sg6383
g6851
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8491
I2
sg6385
g6858
sg55
g11
sS'block_loop.thisTrial'
p8492
Nsg70
Vy
sS'block_loop.thisTrialN'
p8493
I0
sg39
F1.1999160678951739
sg34
g753
(S'\x07\xdf\x07\x07\n5\x1c\x02\xf9\xb8'
tRp8494
sa(dp8495
S'trial_loop.thisTrialN'
p8496
I154
sg6371
g6817
sS'block_loop.thisIndex'
p8497
g6365
sg38
S'left'
p8498
sg59
g63
sS'trial_loop.thisN'
p8499
I154
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p8500
g60
(g99
S'\x9a\x00\x00\x00'
tRp8501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8502
I0
sg6380
g6825
sS'block_loop.thisRepN'
p8503
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8504
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p8505
Nsg70
Vy
sS'block_loop.thisTrialN'
p8506
I0
sg39
F0.69984864281741466
sg34
g753
(S'\x07\xdf\x07\x07\n5"\x06d\xb8'
tRp8507
sa(dp8508
S'trial_loop.thisTrialN'
p8509
I155
sg6371
g6768
sS'block_loop.thisIndex'
p8510
g6365
sg38
S'right'
p8511
sg59
g63
sS'trial_loop.thisN'
p8512
I155
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8513
g60
(g99
S'\x9b\x00\x00\x00'
tRp8514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8515
I0
sg6380
g6775
sS'block_loop.thisRepN'
p8516
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8517
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8518
Nsg70
Vy
sS'block_loop.thisTrialN'
p8519
I0
sg39
F0.94991271802336996
sg34
g753
(S'\x07\xdf\x07\x07\n5(\x02q\x00'
tRp8520
sa(dp8521
S'trial_loop.thisTrialN'
p8522
I156
sg6371
g7324
sS'block_loop.thisIndex'
p8523
g6365
sg38
S'left'
p8524
sg59
g63
sS'trial_loop.thisN'
p8525
I156
sg33
g7328
sg64
g65
sS'trial_loop.thisIndex'
p8526
g60
(g99
S'\x9c\x00\x00\x00'
tRp8527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8528
I0
sg6380
g7332
sS'block_loop.thisRepN'
p8529
I2
sg6383
g7328
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8530
I2
sg6385
g7335
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vy
sS'block_loop.thisTrialN'
p8532
I0
sg39
F0.76668186225469981
sg34
g753
(S'\x07\xdf\x07\x07\n5.\x02\x0fX'
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g6800
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'left'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g6804
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g6808
sS'block_loop.thisRepN'
p8542
I2
sg6383
g6804
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8543
I2
sg6385
g6811
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vy
sS'block_loop.thisTrialN'
p8545
I0
sg39
F1.3833627409312612
sg34
g753
(S'\x07\xdf\x07\x07\n53\x0eP\x10'
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g6490
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'left'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g6498
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6494
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8556
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vy
sS'block_loop.thisTrialN'
p8558
I0
sg39
F0.6664725166547214
sg34
g753
(S'\x07\xdf\x07\x07\n5:\x05SH'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g6817
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'left'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g6825
sS'block_loop.thisRepN'
p8568
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8569
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vy
sS'block_loop.thisTrialN'
p8571
I0
sg39
F0.60000336412667821
sg34
g753
(S'\x07\xdf\x07\x07\n6\x04\x00\xe6x'
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g7557
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'right'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g6804
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g7564
sS'block_loop.thisRepN'
p8581
I2
sg6383
g6804
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8582
I2
sg6385
g6811
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vy
sS'block_loop.thisTrialN'
p8584
I0
sg39
F0.88330016247527965
sg34
g753
(S'\x07\xdf\x07\x07\n6\t\n\x8b8'
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g6599
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'right'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g6603
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g6607
sS'block_loop.thisRepN'
p8594
I2
sg6383
g6603
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8595
I2
sg6385
g6610
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vy
sS'block_loop.thisTrialN'
p8597
I0
sg39
F0.78324305785463366
sg34
g753
(S'\x07\xdf\x07\x07\n6\x0f\t3x'
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g7324
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'left'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g7335
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g7332
sS'block_loop.thisRepN'
p8607
I2
sg6383
g7328
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8608
I2
sg6385
g7335
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vy
sS'block_loop.thisTrialN'
p8610
I0
sg39
F0.76657153031010239
sg34
g753
(S'\x07\xdf\x07\x07\n6\x15\x06pp'
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g6817
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'left'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g6825
sS'block_loop.thisRepN'
p8620
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8621
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vy
sS'block_loop.thisTrialN'
p8623
I0
sg39
F0.58369333763221221
sg34
g753
(S'\x07\xdf\x07\x07\n6\x1b\x03n\xe8'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g6751
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'left'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6755
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g6759
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6755
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8634
I2
sg6385
g6762
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vy
sS'block_loop.thisTrialN'
p8636
I0
sg39
F0.73328806017343595
sg34
g753
(S'\x07\xdf\x07\x07\n6 \x0c\xd5('
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g6409
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'right'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8647
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vy
sS'block_loop.thisTrialN'
p8649
I0
sg39
F0.99976166019132506
sg34
g753
(S'\x07\xdf\x07\x07\n6&\t\x1f\xf0'
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g7013
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'right'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6828
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g7020
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8660
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vy
sS'block_loop.thisTrialN'
p8662
I0
sg39
F0.69989596866435022
sg34
g753
(S'\x07\xdf\x07\x07\n6,\t\xb0x'
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g7324
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'left'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g7328
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g7332
sS'block_loop.thisRepN'
p8672
I2
sg6383
g7328
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8673
I2
sg6385
g7335
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vy
sS'block_loop.thisTrialN'
p8675
I0
sg39
F0.71655010538597708
sg34
g753
(S'\x07\xdf\x07\x07\n62\x05\xbc\xc0'
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g6507
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'left'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g6514
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8686
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vy
sS'block_loop.thisTrialN'
p8688
I0
sg39
F0.68334646197945403
sg34
g753
(S'\x07\xdf\x07\x07\n68\x01\xc5 '
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g7283
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'left'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g6851
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g7290
sS'block_loop.thisRepN'
p8698
I2
sg6383
g6851
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8699
I2
sg6385
g6858
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vy
sS'block_loop.thisTrialN'
p8701
I0
sg39
F0.78333400330848235
sg34
g753
(S'\x07\xdf\x07\x07\n7\x01\x0c\xd9\x10'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g7013
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'right'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g7020
sS'block_loop.thisRepN'
p8711
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8712
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vy
sS'block_loop.thisTrialN'
p8714
I0
sg39
F0.84989980319824099
sg34
g753
(S'\x07\xdf\x07\x07\n7\x07\n\x12 '
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g6616
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'right'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g6624
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8725
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vy
sS'block_loop.thisTrialN'
p8727
I0
sg39
F0.84990265415308386
sg34
g753
(S'\x07\xdf\x07\x07\n7\r\x08E0'
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g6751
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'left'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g6755
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g6759
sS'block_loop.thisRepN'
p8737
I2
sg6383
g6755
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8738
I2
sg6385
g6762
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vy
sS'block_loop.thisTrialN'
p8740
I0
sg39
F0.88330358362145489
sg34
g753
(S'\x07\xdf\x07\x07\n7\x13\x06tX'
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g6539
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'left'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g6547
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8751
I2
sg6385
g6550
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vy
sS'block_loop.thisTrialN'
p8753
I0
sg39
F0.69998919488170941
sg34
g753
(S'\x07\xdf\x07\x07\n7\x19\x05\x1c\x98'
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g6998
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'left'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g6526
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g7005
sS'block_loop.thisRepN'
p8763
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8764
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vy
sS'block_loop.thisTrialN'
p8766
I0
sg39
F0.58323433393343294
sg34
g753
(S'\x07\xdf\x07\x07\n7\x1f\x01(\xe0'
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g7423
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'right'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g7430
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8777
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vy
sS'block_loop.thisTrialN'
p8779
I0
sg39
F0.88335832195025432
sg34
g753
(S'\x07\xdf\x07\x07\n7$\n\x8f '
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g6864
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'left'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g6483
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g6871
sS'block_loop.thisRepN'
p8789
I2
sg6383
g6483
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8790
I2
sg6385
g6477
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vy
sS'block_loop.thisTrialN'
p8792
I0
sg39
F0.73297245949288481
sg34
g753
(S'\x07\xdf\x07\x07\n7*\t7`'
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g7423
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'right'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g7430
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8803
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vy
sS'block_loop.thisTrialN'
p8805
I0
sg39
F0.64989421532663982
sg34
g753
(S'\x07\xdf\x07\x07\n70\x05\xbc\xc0'
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g6847
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'right'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6851
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g6855
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6851
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8816
I2
sg6385
g6858
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vy
sS'block_loop.thisTrialN'
p8818
I0
sg39
F0.86667596077859343
sg34
g753
(S'\x07\xdf\x07\x07\n76\x00\xd6\xd8'
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g7715
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'left'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g7722
sS'block_loop.thisRepN'
p8828
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8829
I2
sg6385
g6567
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vy
sS'block_loop.thisTrialN'
p8831
I0
sg39
F0.69995811947592301
sg34
g753
(S'\x07\xdf\x07\x07\n7;\x0e\x86\xc0'
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g6998
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'left'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6526
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g7005
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8842
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vy
sS'block_loop.thisTrialN'
p8844
I0
sg39
F0.61671252427277068
sg34
g753
(S'\x07\xdf\x07\x07\n8\x05\n\x93\x08'
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g7028
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'left'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6745
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g7035
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6738
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8855
I2
sg6385
g6745
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vy
sS'block_loop.thisTrialN'
p8857
I0
sg39
F1.0003523779960233
sg34
g753
(S'\x07\xdf\x07\x07\n8\x0b\x050 '
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g7423
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'right'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g7430
sS'block_loop.thisRepN'
p8867
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8868
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vy
sS'block_loop.thisTrialN'
p8870
I0
sg39
F1.3665346959751332
sg34
g753
(S'\x07\xdf\x07\x07\n8\x11\x05\xc0\xa8'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g6864
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'left'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g6483
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g6871
sS'block_loop.thisRepN'
p8880
I2
sg6383
g6483
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8881
I2
sg6385
g6477
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vy
sS'block_loop.thisTrialN'
p8883
I0
sg39
F1.0995889778669152
sg34
g753
(S'\x07\xdf\x07\x07\n8\x17\x0b\xcb\x88'
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g6800
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'left'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6804
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g6808
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6804
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8894
I2
sg6385
g6811
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vy
sS'block_loop.thisTrialN'
p8896
I0
sg39
F0.81661690325290692
sg34
g753
(S'\x07\xdf\x07\x07\n8\x1d\r\xcb@'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g7367
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'right'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g7374
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6494
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8907
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vy
sS'block_loop.thisTrialN'
p8909
I0
sg39
F1.1332308130040474
sg34
g753
(S'\x07\xdf\x07\x07\n8#\x0b\x81P'
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g6456
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'right'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6467
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g6464
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6460
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8920
I2
sg6385
g6467
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vy
sS'block_loop.thisTrialN'
p8922
I0
sg39
F1.6832615035309573
sg34
g753
(S'\x07\xdf\x07\x07\n8)\r\xfa '
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g6751
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'left'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g6762
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g6759
sS'block_loop.thisRepN'
p8932
I2
sg6383
g6755
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8933
I2
sg6385
g6762
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vy
sS'block_loop.thisTrialN'
p8935
I0
sg39
F0.73325498909980524
sg34
g753
(S'\x07\xdf\x07\x07\n80\t\xc0\x18'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g7028
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'left'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g6738
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g7035
sS'block_loop.thisRepN'
p8945
I2
sg6383
g6738
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8946
I2
sg6385
g6745
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vy
sS'block_loop.thisTrialN'
p8948
I0
sg39
F1.0833194349288533
sg34
g753
(S'\x07\xdf\x07\x07\n86\x06\n\xe0'
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g7056
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'left'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g7063
sS'block_loop.thisRepN'
p8958
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8959
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vy
sS'block_loop.thisTrialN'
p8961
I0
sg39
F0.94978927168631344
sg34
g753
(S'\x07\xdf\x07\x07\n9\x00\x08\n\x98'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g7229
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'right'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g6762
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g7236
sS'block_loop.thisRepN'
p8971
I2
sg6383
g6755
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8972
I2
sg6385
g6762
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vy
sS'block_loop.thisTrialN'
p8974
I0
sg39
F1.4831675360655936
sg34
g753
(S'\x07\xdf\x07\x07\n9\x06\x07\xa5\x08'
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g7367
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'right'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g7374
sS'block_loop.thisRepN'
p8984
I2
sg6383
g6494
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8985
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vy
sS'block_loop.thisTrialN'
p8987
I0
sg39
F0.86654681253276067
sg34
g753
(S'\x07\xdf\x07\x07\n9\r\x00U\xf0'
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g6633
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'left'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6610
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g6640
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6603
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8998
I2
sg6385
g6610
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vy
sS'block_loop.thisTrialN'
p9000
I0
sg39
F0.99985232054950757
sg34
g753
(S'\x07\xdf\x07\x07\n9\x12\x0e\x05\xd8'
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g6847
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'right'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g6851
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g6855
sS'block_loop.thisRepN'
p9010
I2
sg6383
g6851
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9011
I2
sg6385
g6858
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vy
sS'block_loop.thisTrialN'
p9013
I0
sg39
F0.78330920000189508
sg34
g753
(S'\x07\xdf\x07\x07\n9\x18\x0e\x96`'
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g6556
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'right'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g6564
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9024
I2
sg6385
g6567
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vy
sS'block_loop.thisTrialN'
p9026
I0
sg39
F1.0166472944292764
sg34
g753
(S'\x07\xdf\x07\x07\n9\x1e\x0b\xd3X'
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g6456
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'right'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g6467
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g6464
sS'block_loop.thisRepN'
p9036
I2
sg6383
g6460
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9037
I2
sg6385
g6467
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vy
sS'block_loop.thisTrialN'
p9039
I0
sg39
F0.93328024855782132
sg34
g753
(S'\x07\xdf\x07\x07\n9$\x0cc\xe0'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g6473
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'right'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6483
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g6481
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6483
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9050
I2
sg6385
g6477
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vy
sS'block_loop.thisTrialN'
p9052
I0
sg39
F0.74972809019982378
sg34
g753
(S'\x07\xdf\x07\x07\n9*\x0c\x028'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g7229
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'right'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g6755
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g7236
sS'block_loop.thisRepN'
p9062
I2
sg6383
g6755
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9063
I2
sg6385
g6762
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vy
sS'block_loop.thisTrialN'
p9065
I0
sg39
F0.6837743902742659
sg34
g753
(S'\x07\xdf\x07\x07\n90\x08\xc6\x18'
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g6783
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'right'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g6787
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g6791
sS'block_loop.thisRepN'
p9075
I2
sg6383
g6787
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9076
I2
sg6385
g6794
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vy
sS'block_loop.thisTrialN'
p9078
I0
sg39
F2.6665942524177808
sg34
g753
(S'\x07\xdf\x07\x07\n96\x04U`'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g6691
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'right'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g6698
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9089
I2
sg6385
g6550
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vy
sS'block_loop.thisTrialN'
p9091
I0
sg39
F1.1999497091592275
sg34
g753
(S'\x07\xdf\x07\x07\n:\x01\x0f\x1f\x18'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vy
sa(dp9099
g64
g65
sg43
I42
sg56
g57
sg58
Vn
sg42
I558
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp9100
g64
g65
sg43
I42
sg55
g11
sg56
g57
sg45
F2.5699999999999998
sg42
I558
sg49
F0.01
sg58
Vn
sg59
g63
sg44
I00
sg48
I25
sg47
g553
sg51
F30.579999999999998
sg46
F1.2399999999999995
sg66
g67
sg68
g69
sg50
I0
sg70
Vy
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I82436432
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'33\xf3?\xd7\xa3\xb0?\xecQ\xb8>)\\\x0f?\x00\x00\x00?\n\xd7\xa3>\x8f\xc2\xf5=\xcd\xcc\xcc>fff?fff?\x85\xebQ?H\xe1z?ff\xa6?\xcd\xccL?\xcd\xcc\xcc>\xf6(\\?\x14\xaeG?\\\x8fB?\x1f\x85k?\xcd\xccL?=\nW?\x9a\x99\x99>\xcd\xccL>\n\xd7\xa3?\xecQ\xb8>\xd7\xa3p?q=\x8a?{\x14\xae?)\\\x8f?\n\xd7\xa3=333?\xe1z\xd4?\n\xd7\xa3>R\xb8\x9e?\xa4p\xbd?{\x14\xee?\xcd\xccL?\\\x8fB?\x00\x00\x00?=\nW?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S'1\x08\xf8@\x98n\x86@o\x12\tA\xdd$\x8a@\xfe\xd4\x9c@\xdb\xf9>@T\xe3\x85@D\x8b\x98@!\xb0\x82@\x87\x16A@\xfc\xa9\x19@\xdd$\x9a@D\x8b\x80@/\xddL@\x96C3@\xee|G@\xdd$\xd2@\xa8\xc6k@b\x10@@\xa8\xc6[@\x87\x16q@\x96C\x13@/\xdd,@B`5@\xcb\xa1\xb1@\x0e-2@1\x08\xa8@B`E@b\x10p@/\xdd<@1\x08\x98@!\xb0\xea@T\xe3\x9d@\x96C3@\x0e-2@D\x8b\x98@!\xb0z@\xcb\xa1\x89@\xfc\xa9\x19@\xc9v&@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xe8A\x00\x00\xa0A\x00\x00\x00\x00\x00\x00\xe0A\x00\x00\xc0@\x00\x00\x10A\x00\x00\x80A\x00\x00 A\x00\x00\x98A\x00\x00\xd0A\x00\x00\xc8A\x00\x000A\x00\x00\x1cB\x00\x00PA\x00\x00\xa0@\x00\x00pA\x00\x00\x00A\x00\x00\x88A\x00\x00\xb0A\x00\x00\x14B\x00\x00\xb8A\x00\x00\x08B\x00\x00\x04B\x00\x00\xf0A\x00\x00\xf8A\x00\x00\xd8A\x00\x00\x0cB\x00\x00\x10B\x00\x00\xe0@\x00\x00@@\x00\x00\x80?\x00\x00@A\x00\x00\x00B\x00\x00\xa8A\x00\x00\xc0A\x00\x00\x18B\x00\x00\x00@\x00\x00\x80@\x00\x00\x90A\x00\x00`A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'\x9a\x99\x99?33\xf3?\x9a\x99\x99?\x9a\x99\x99?33\xf3?\x00\x00\xc0?ff\xa6?\xcd\xcc\xcc?\xcd\xcc\xcc?ff\xa6?ff\xa6?ff\xa6?\x00\x00\xc0?\x9a\x99\x99?ff\xa6?33\xf3?ff\xa6?33\xf3?\x00\x00\xc0?\x9a\x99\x99?ff\xe6?33\xb3?\x00\x00\xc0?\x00\x00\xc0?33\xf3?\x00\x00\x00@\x00\x00\xc0?\x00\x00\xc0?ff\xa6?ff\xa6?33\xb3?ff\xa6?\xcd\xcc\x8c?ff\xe6?ff\xe6?33\xb3?33\xf3?ff\xe6?\x9a\x99\xd9?\xcd\xcc\x8c?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S'\x02\x00\x00\x00\x1e\x00\x00\x00$\x00\x00\x00\x1d\x00\x00\x00%\x00\x00\x00\x0e\x00\x00\x00\x04\x00\x00\x00\x1c\x00\x00\x00\x10\x00\x00\x00\x05\x00\x00\x00\x07\x00\x00\x00\x0b\x00\x00\x00\x1f\x00\x00\x00\r\x00\x00\x00\'\x00\x00\x00\x0f\x00\x00\x00\x06\x00\x00\x00\x11\x00\x00\x00&\x00\x00\x00\x08\x00\x00\x00\x01\x00\x00\x00!\x00\x00\x00\x12\x00\x00\x00\x14\x00\x00\x00"\x00\x00\x00\n\x00\x00\x00\t\x00\x00\x00\x19\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00 \x00\x00\x00\x16\x00\x00\x00\x15\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x13\x00\x00\x00#\x00\x00\x00\x0c\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g306
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g243
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g103
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g299
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g145
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g166
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g215
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g173
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g236
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g285
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g278
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g180
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g376
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g194
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g138
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g208
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g159
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g222
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g257
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g362
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g264
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g341
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g334
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g313
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g320
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g292
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g348
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g355
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g152
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g124
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g110
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g187
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g327
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g250
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g271
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g369
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g117
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g131
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g229
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g201
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I82436432
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xc0@\x00\x00\xc0@\xcd\xcc\x9c@\x9a\x999@\x00\x00\xc0@\xcd\xcc\x8c@33\x93@\x00\x00\xc0@\x00\x00\xc0@ff\xa6@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xb0@\xcd\xcc\x9c@\x9a\x99\x99@\x9a\x99\xa9@\x9a\x99\xa9@fff@\xcd\xccl@\x00\x00\xc0@ff\xa6@\x00\x00\xc0@\x00\x00\xb0@33\xb3@\xcd\xcc\x9c@33\x83@\x9a\x99y@\xcd\xcc\xac@\xcd\xcc\x9c@\x9a\x99\xb9@\xcd\xcc\xac@\x00\x00\xc0@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\xcd\xcc\xac@\x00\x00\xc0@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S"\xfcf\xe6?Ll\x86?@7s?\xeb\x98\x99@0\x01\x80?\xb7\xa9Z@\x1b3\x13@\x06%b?\x1eg\xa6?z\x04\xe0?\xc25s?=E\x84?29s?\xa3S5@\x81t\xf7?\xfe\x000@\xb9\xcal@8\x15\x91?\xd4\xbb\xd3@\xcf\xdeM@\x93Z\xd5?\x05\xc5\x8c?+\xc3{?C\xf0\x8e?\x03\x02\xe0?\xea\x13\xd1?og6@\x80\xe1\x95@\xd0\xdc]@7\xe1\xbd?\x0c\x02\xe0?\x8c\xe5]@t{\x97?v\xf0N@\x1f#\x02@'z\x97?|d\x86?,#\x82?D4\xb3?s\xa2\xea?"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'\x9a\x999@fff@\x9a\x99Y@33s@333@\x9a\x99Y@\x00\x00`@333@ffF@\x00\x00\x80@333@ff\x86@fff@ff\x86@\x00\x00`@\xcd\xccl@\xcd\xccL@\x00\x00\x80@\xcd\xccL@\x9a\x99\x89@\x00\x00`@ffF@\x9a\x99Y@33s@\x9a\x99Y@\x00\x00@@\x00\x00`@\xcd\xccL@33S@\x00\x00@@33S@\x00\x00\x80@33\x83@\xcd\xcc,@ffF@33S@\x00\x00`@fff@ffF@\xcd\xccl@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'@\x05]\r`k\x04\r\x00k\x04\r\xa0j\x04\r\x80q\xd8\x0c`q\xd8\x0c@u\xd8\x0c\xc0p\xd8\x0c@r\xd8\x0c`p\xd8\x0c@p\xd8\x0c\x00q\xd8\x0c p\xd8\x0c\xe0e\x04\r\x80p\xd8\x0c\xe07\x06\r@4\x06\r\x00;\x06\r\xe05\x06\r\xa05\x06\r\xe0;\x06\r\x00<\x06\r@<\x06\r`6\x06\r\x807\x06\r\xc06\x06\r\x80`\x04\r\xe0\n]\r@\x08]\r\x00\t]\r\xc0\t]\r\xa0\x07]\r\xe0\x07]\r\xa0\x08]\r \t]\r@\t]\r s\xd8\x0c\x00\x08]\r\x80\x06]\r\xc0\x05]\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'\xc9vV@\xa8\xc6\xfb?\x91\xed\xcc?\xfe\xd4\x84@\xe9&\xf1?\x1dZ\xa4?\xee|G@\xb6\xf3\xdd?b\x10P@D\x8b\xa0@\xe9&\xb1?\xbaI\x9c@\xe9&\x91?\xa8\xc6\x0b@T\xe3-@\x96CC@!\xb0\n@B`\xb5?\xaa\xf1\xbe@\xbaI$@\xb6\xf3\x9d?\xe9&!@^\xba\x99?b\x100@\xfc\xa9I@\xc9v&@\x0e-\x02@\xfc\xa9y@\xbaID@\xc9v\x06@\xa8\xc6\xdb?\xdb\xf9.@\x91\xed\xac?\xbaI\x04@\xc5 \xa0?\xc5 \xa0?\xf8S\x93?\xdb\xf9\x8e?\x83\xc0\x8a?u\x93\xa8?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I82436432
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S'\xa8\x1e\x92\r\xe0\xf6{\r\x80\xf6{\r\xf8\x1e\x92\r\x10\xf7{\r \x1f\x92\r@\xf7{\r\xb0\xf6{\r\xf8\x1e\x92\r\xb0\xf6{\r\xa8\x1e\x92\rH\x1f\x92\r\xd0\x1e\x92\r \x1f\x92\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S'\xc8\xbf\xc9\x04\x80\xbc\xc9\x04P\xb3\xc9\x04`\xb2\xc9\x04x\xb5\xc9\x040\xb8\xc9\x04\xf8\xb3\xc9\x04\xf0\xf5\x9d\x04x\xf5\x9d\x04\xa8\xfb\x9d\x04(\xfd\x9d\x04`\xf5\x9d\x04\x80\xf9\x9d\x04\xe0\xf0\x9d\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g767
sg83
g768
sg84
g772
sg85
g773
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g778
sg83
g779
sg84
g783
sg85
g784
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g767
sg83
g789
sg84
g772
sg85
g793
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g798
sg83
g799
sg84
g803
sg85
g804
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g809
sg83
g810
sg84
g814
sg85
g815
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g820
sg83
g821
sg84
g825
sg85
g826
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g778
sg83
g831
sg84
g783
sg85
g835
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g820
sg83
g840
sg84
g825
sg85
g844
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g744
sg83
g849
sg84
g749
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g809
sg83
g858
sg84
g814
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g756
sg83
g867
sg84
g761
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g798
sg83
g876
sg84
g803
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I82436432
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I82436432
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S'PV\x94\r\xe0=\x94\r\x08>\x94\rpW\x94\r\xb0V\x94\r\xc0\xe6[\rX>\x94\rp\xef\x93\r\x80>\x94\r\x80V\x94\r\x80>\x94\rp\xef\x93\rX>\x94\r\x80\xe1[\r\xa8>\x94\r\x80V\x94\r\x80\xe1[\r\xe0V\x94\r\xa8\xef\x93\r@\xe4[\rPV\x94\r@\xe4[\r\xe0=\x94\r\x80\xe0[\r\xa8>\x94\r\x80>\x94\r@\xe4[\r0X\x94\rPV\x94\r\xd0>\x94\r\xf8>\x94\r\x80\xe1[\r\xa8\xef\x93\r\x08>\x94\r\xb0V\x94\rX>\x94\rH\x90\x94\r\xe0\xe5[\r\xd0>\x94\r\x80\xe0[\r \x08]\rPV\x94\r\xa8\xef\x93\rpW\x94\r\xa8>\x94\r\x80\xe1[\r`X\x94\r\x00\x81\x94\r\xf8>\x94\rX>\x94\r\xd0>\x94\r\xb0V\x94\r\xa8\xef\x93\rPV\x94\r\xe0=\x94\r\x90\x80\x94\r\xb0V\x94\rX>\x94\r\x80>\x94\r@W\x94\r\xa8>\x94\r0>\x94\rPV\x94\r\x08>\x94\r0>\x94\r\x80\xe1[\r0>\x94\r\xf8>\x94\r\xb0V\x94\r\x00\x81\x94\r\xe0=\x94\r\x80V\x94\r \x80\x94\r\x08>\x94\rX>\x94\r0>\x94\r\xd0>\x94\r\x80\xe0[\r\xd0>\x94\rp\xef\x93\r\x80V\x94\r\xe0\xe5[\r\xc8\x80\x94\r\xe0V\x94\r\xa8>\x94\rpW\x94\r`X\x94\r\x00X\x94\r\xc0\xe6[\r\xe0\xe5[\r\xa8>\x94\rH?\x94\r \x80\x94\r\xb0V\x94\r\xc0\xe6[\r \x90\x94\r@W\x94\r\x00\x81\x94\rp\xef\x93\r\xa8\xef\x93\r\x80>\x94\r\xb0V\x94\rp\xef\x93\r@\xe4[\r0>\x94\rp\x90\x94\r\x80\xe1[\r@\xe4[\r\x10W\x94\r\xa8\xef\x93\r\xd0>\x94\r\xd0W\x94\r\xf8>\x94\r\x80\xe1[\r@W\x94\r\xc8\x80\x94\r\x98?\x94\r\x80\xe1[\r\x10W\x94\r\xd0>\x94\r\xe0=\x94\r\x10W\x94\r\xe0\xe5[\r \x08]\r\x80\xe0[\rp?\x94\rX>\x94\r@\xe4[\r0>\x94\r\xf8>\x94\r0X\x94\r\xf8>\x94\r \x80\x94\r@W\x94\r\x80\xe0[\r\xc8\x80\x94\r@\xe4[\r\xa8>\x94\r\xe0V\x94\rX>\x94\r\xe0V\x94\r\x00\x81\x94\r\x80\xe0[\r0X\x94\r\x08>\x94\rH\x90\x94\r\xa8\xef\x93\r\xe0=\x94\rp\xef\x93\r@W\x94\r@\xe4[\r\xb0V\x94\r\xc0?\x94\r\x08>\x94\r\xd0W\x94\r\xc0?\x94\r\xa8\xef\x93\rPV\x94\r\xe0=\x94\r\xb0V\x94\r\x10W\x94\rp\xef\x93\r\xd0>\x94\r\x10W\x94\r@W\x94\r\x80>\x94\r\xb0V\x94\r0>\x94\r\x00X\x94\r\xe0V\x94\r\x80\xe1[\r\x08>\x94\r\xe0\xe5[\r\xe0=\x94\r\x10W\x94\rpW\x94\r\x80\xe1[\r\x08>\x94\r@W\x94\r\x10W\x94\r@W\x94\r0X\x94\r\x80V\x94\r\xe0=\x94\r\xc8\x80\x94\r\xd0W\x94\rp\xef\x93\r\xe0V\x94\r\x00X\x94\r\x80\xe0[\rp\x90\x94\r\x80\xe0[\r\x08>\x94\r`X\x94\rX>\x94\r\xd0W\x94\r\x80V\x94\r\x80\xe0[\r\x90\x80\x94\r\xe0\xe5[\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S'\x00:|\r\x80\xbf\x06\r\x00\xc5Z\r\x00\xccZ\r@\xccZ\r\x805|\r`:|\r\xa0:|\r@:|\r\xc09|\r 6|\r <|\r\xe0;|\r`;|\r 0|\r\x80:|\r\x80;|\r`6|\r\x00;|\r\xe0:|\r\xc08|\r ;|\r\xc0;|\r\xa0<|\r`<|\r\xa09|\r`1|\r\xa0\xb1\x06\r\x00\xae]\r\x80\xa0]\r\x00\xac]\r\x80\xac]\r\x80\xab]\r@\xae]\r\x00\xaa]\r@\xaa]\r\x00\xaf]\r@\xac]\r\xc0\xa0]\r`\xa7]\r`\xa0]\r@\xad]\r@\xab]\r@\xaf]\r\xe0\xa0]\r\x80\xaa]\r\xc0\xaa]\r\x00\xa1]\r\xc0\xac]\r\xc0\xa9]\r\x80\xad]\r\xc0\xa5]\r\x00\xa6]\r\xc0\xa7]\r\xc0\xab]\r\x80\xa8]\r`\xa5]\r\xc0\xa8]\r\x00\xa9]\r\xc0\xad]\r\xa0\xa0]\r \xa0]\r\xc0\xae]\r\x00\xad]\r@\xa6]\r\xa0\xa6]\r@\xa9]\r\x00\xa8]\r\xe0\xa6]\r\x00\xab]\r \xa7]\r\xa0\xbf\x06\r@\xa8]\r`j\x04\r \x01]\r\x80\x03]\r\xc0\x02]\r \x0e]\r\xc0\x0e]\r\xe0\x0e]\r\x80\x0c]\r@\x0f]\r\x00\x0f]\r \x0f]\r\xa0\x0f]\r\x80\x0f]\r\xe0\x0f]\r\xc0\x0f]\r@\x01]\r\x00\x01]\r\xe0\x02]\r\x80\x01]\r`\x01]\r \x03]\r\xe0\x01]\r\xc0\x01]\r`\x0f]\r\x00\x02]\r \x02]\r@\x02]\r\xa0\x02]\r\x80\x02]\r\xe0\x08]\r@\x03]\r\x80\xa9]\r\x00\x03]\r\xa0\x03]\r\x00\x04]\r\xa0\x0e]\r\x00\x05]\r@\x0e]\r\xa0\x01]\r@\x04]\r b\xd9\x0c@h\xd9\x0c\x00h\xd9\x0c >\\\r\xa0\xc3Z\r\x80\x0e]\r`\x04]\r`\x00]\r`\x02]\r\xe0\x03]\r\xe0\x04]\r\xc0\x04]\r\xa0\x04]\r`\x03]\r\x80\x04]\r \x04]\r\xa0\xb0\x06\r\xa0\x01^\r@8|\r\xa0;|\r\x80<|\r\xe09|\r@=|\r\xa06|\r\xc0:|\r\x00>|\r\xe0<|\r@;|\r\xe0=|\r\xc0=|\r\xa0=|\r >|\r\x80>|\r`>|\r`=|\r\x00=|\r\xe0>|\r\xc0>|\r\xa0?|\r\xc0<|\r`?|\r\x00<|\r\xe0?|\r@?|\r ?|\r\x80?|\r@>|\r\xe05|\r@<|\r\x80=|\r =|\r\xc0?|\r :|\r\x80t\xd8\x0c\x80r\xd8\x0c@ \xc0\x1f@"\xc0\x1f\x80 \xc0\x1f\x80!\xc0\x1f !\xc0\x1f  \xc0\x1f\xe0!\xc0\x1f`"\xc0\x1f\xc0!\xc0\x1f\xe0 \xc0\x1f\xc0"\xc0\x1f\xe0"\xc0\x1f\xa0"\xc0\x1f #\xc0\x1f\x00#\xc0\x1f\x00!\xc0\x1f@#\xc0\x1f`#\xc0\x1f\x80#\xc0\x1f\xe0#\xc0\x1f\x00$\xc0\x1f\xc0 \xc0\x1f@$\xc0\x1f`$\xc0\x1f\x80$\xc0\x1f\xa0\xd8\xb0\x04\xe0\xdf\xb0\x04 \xd9\xb0\x04\xc0\xd8\xb0\x04\xc0\xdd\xb0\x04\x00\xd9\xb0\x04\x80\xd7\xb0\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'\xf9\xa7\xea?\x80\xba\xfb?\xc0\xdc\r@?b\xe6?\x15C\xe4?\x81\x1d\xc2?\xc5\xdb\r@3\x00\xc0?\x00\x10\x01@\xd1T\x05@\x08u\'@\xc8\xca<@\xf0\xba\x9b?\xac\xda\xdd?\xc4\x92i@\xe8v\x17@\x8d\xfd\xff?{\xa7:@J\xdc\r@\x92\xa8*@\x0b\xba\x9b@\x84\x97)@\xa7SU@Y\xc1\x1b@\x96>\x14@\t\x1e"@\xe1QE@`2#@{T\x05@+0c@y\x0e!@\n\xba\x9b?\xff{\x07@Y\xdaM@\xea\x96i@\xfb\xb8K@\xd2\xba\xbb?\xcc\xcb\x1c@\x01\xff\xdf?\xb70#@y\xdb\r@I=\xf3?\x91e\xc6?\x15O\xf5?\xd0\x9e\xaa?\xb3\xfc\x9f?oy\x97@\\\x87\x90@\x15\x85\xa8@\x90\xee\x0e@\xe0\x99\x99?\xaf\x97\xf9?a\xa7\x8a?\x00V\x95?\xa60C@8\xa7\x99?\xe2t\x97?y\x1e\x82?IAd@\xe6\xfb_@\x8c\xae\xbb?\x9b\x87\x80@n\x85\xa8?\x13\x97\x81@P\x81\xf7?%R\x95?\xa3!\xa2?\xcd\x97\x89@$\xca\x1c@o\x10\x01@\xfcd6@\xa4 r@\x05\xca\x8c?\xad\xa8\xaa?4\xa4\xf9?\x06\xcc\xcc?%\xa8\x1a@\xd53\xf3?\xe8\xcb\x8c?q\xdb\xb5@\x7f>\xe4?\xf0\xf8\x7f?\xb3\x96\x19@\x08\xfb\xff?\x07\xffP?~\xdc\r@\xfa\xc9L@\x00\x87Y?\x83#\x82@\x99\xae{?u\xffP?\xb5@T@\xf5bf?\x1b\x86\x88?)0C@\xf5!b?\xa6\xdc\x1d@\xae\xa6\x8a?U\x13\x91@\xbe\x95\xd9?\x9btg@\xed\xa8j?m\xca\xac?\x977c@\xe1\xaa{?\xe1\xa8\x9a@\xaa\xc9\x8c?CZu@\x9a\x87H@g\xb9\x9b?\xf0.s?\xd7c\x06@\xbd0\x03@\xc3B\x84?Ct\x17@\xf1\x0c\x91?\x12\xff\xbf?\xed\xee\x8e?|\xea\xce?\xd2RU?\xff\xba+@%/\xd3?}kF@\xf2\xcb\x1c@\x16\x86\x88?\x0f\xb9\x1b@4\xda\x9d?\x1b \xa2@,\xeb\x8e?\xc5\xb5\x9b?\x8cBT@z\xad{?2\xc1j?|R\xd5?\x9c!\xa2?UQ\x95?\x00\xc8\xac?\xfa\xac\x8a?)\xba\x9b?\xc1\x0c\x91?d\r\x91?\xf6A\x84@`]&?\xe0\xadj?\x0c2\xf3?\xff=D?\x01\x96Y?\x18 \xc2?\xb1 \x02@?"\x82?\xf5\x1eb@\xcf\x98Y?@\xacj?\x1a\xb7;?\x97v\x07@\x93b\xe6?\x90\x18b?W\x94\xa8?L\xabj?\x99\xa6\x8a?\x13\xdc\x8d@1\xfd?@\xa3\x80H?\xa6\xa9\xaa?g\x1e\xa2?\n#\xa2?\x8323?O\xde]?\xd9\xda.?\xc8\xdd\x9d?\xb2;D?\x86\xea\xae?\x02\xe2M@\xc1\x1db?\xe2!b?\xe7\xb8{@\xf0AD?\xa3\x907?\x01\x0e\xb1?z\x12Q?&\xean?\x96\x94Y?s\xf4]?\x9cDD?\xa2\x95\t@\x92\xfc\x9f?v\x10\x01@\x19\xbb{?(ew?\x96#b?=C\x84?M\x1c"?\x85\x1d\x82?\x1cVU?\x01\xdb\xbd?yA\x84?.\x10\xd1?D\xa5*?$Ls?\x0c23@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'(\xfa\x9d\x04\xf0\xfe\x9d\x04\xf02\xdd\x04\xb09\xdd\x04\xc80\xdd\x04@7\xdd\x04\xb06\xdd\x04\x800\xdd\x04\xc05\xdd\x04\xb87\xdd\x04`5\xdd\x04\x188\xdd\x04`8\xdd\x04\x908\xdd\x04(:\xdd\x04\xc8<\xdd\x0483\xdd\x048<\xdd\x04\x086\xdd\x040;\xdd\x04\x90>\xdd\x04X7\xdd\x04\x88=\xdd\x04\xf08\xdd\x04X4\xdd\x04\xa07\xdd\x04\x80?\xdd\x04\x986\xdd\x04\xf0;\xdd\x04@:\xdd\x04\x80<\xdd\x04\x00>\xdd\x04X:\xdd\x04x5\xdd\x04\xb00\xdd\x04\xf89\xdd\x04\x881\xdd\x04\x803\xdd\x04(7\xdd\x04\x98?\xdd\x04\x983\xdd\x04\xa85\xdd\x04\xb8:\xdd\x04(1\xdd\x04P3\xdd\x04\xe06\xdd\x04\xf05\xdd\x04x8\xdd\x04\x884\xdd\x04\xa0=\xdd\x04\xa0:\xdd\x04\xd07\xdd\x04@=\xdd\x04\xb0<\xdd\x04\xf8<\xdd\x04p:\xdd\x048?\xdd\x04\x809\xdd\x04\xa04\xdd\x0480\xdd\x04\xb03\xdd\x04\xb8=\xdd\x04h9\xdd\x04@1\xdd\x04\xc86\xdd\x04\x806\xdd\x04p7\xdd\x04\xa8>\xdd\x04\x083\xdd\x04\xd8>\xdd\x04\xd82\xdd\x04\x90;\xdd\x04\x989\xdd\x04\xe00\xdd\x04\x10=\xdd\x04\xe0<\xdd\x04`>\xdd\x04P6\xdd\x04\x08<\xdd\x04\xc89\xdd\x04\x107\xdd\x04P?\xdd\x04\xe09\xdd\x04\xb0?\xdd\x04\x002\xdd\x0486\xdd\x04\x887\xdd\x04\x08?\xdd\x04\xe81\xdd\x04\x18>\xdd\x04\xa01\xdd\x04\xe8=\xdd\x04\x88:\xdd\x04(=\xdd\x04h?\xdd\x04 9\xdd\x04\xd85\xdd\x04H8\xdd\x04X1\xdd\x04P0\xdd\x04\xe8:\xdd\x04\xd0:\xdd\x04x>\xdd\x04\xc0;\xdd\x04\x00;\xdd\x04P9\xdd\x04\xc8?\xdd\x04\x98<\xdd\x04\xa82\xdd\x04X=\xdd\x04\xd04\xdd\x04h0\xdd\x04\x089\xdd\x04H;\xdd\x04\x902\xdd\x04\xd8;\xdd\x04\xc0>\xdd\x04 ?\xdd\x04h6\xdd\x04x;\xdd\x04\x905\xdd\x0405\xdd\x04@4\xdd\x04p=\xdd\x04\xd0=\xdd\x04\x104\xdd\x04\x18;\xdd\x04\xe0?\xdd\x04`;\xdd\x04\xa0\xe1\n\rH\xee\n\r`\xeb\n\r\x18\xee\n\r\x10\xea\n\r\xb8\xea\n\r\xc0\xeb\n\r\x10\xed\n\rX\xed\n\r\x88\xe1\n\r@\xea\n\r@\xed\n\r\xb0\xec\n\rp\xed\n\rh\xec\n\rP\xef\n\r\xb0\xe6\n\r\x88\xe4\n\rX\xe7\n\r\xf8\xe9\n\r\x80\xe9\n\r\xb8\xed\n\r`\xe2\n\r\xd8\xe2\n\r\xa0\xea\n\r\xd0\xe7\n\r\xd0\xe4\n\rP\xe9\n\rx\xeb\n\r\xa8\xe5\n\r\x18\xe5\n\r\xe0\xef\n\r\x90\xe5\n\r\xe8\xe7\n\r \xe9\n\r\xf8\xe6\n\r\x90\xe2\n\r\xd88\xdd\x04`2\xdd\x04x2\xdd\x04\xc83\xdd\x04 <\xdd\x04P<\xdd\x04\xa88\xdd\x04 3\xdd\x04\xb84\xdd\x04\x182\xdd\x04p1\xdd\x04\xe03\xdd\x04\xf80\xdd\x04p4\xdd\x04\xe87\xdd\x04\xf86\xdd\x04\x10:\xdd\x04\xc02\xdd\x04\x008\xdd\x04H>\xdd\x04\xa8;\xdd\x04H2\xdd\x04\x101\xdd\x0408\xdd\x04\xf83\xdd\x040>\xdd\x04(4\xdd\x04 6\xdd\x04\xe84\xdd\x04\x185\xdd\x04\xc08\xdd\x04 0\xdd\x04H5\xdd\x04h3\xdd\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g960
sg895
g950
sg909
g954
sg904
g958
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g994
sg895
g984
sg909
g988
sg904
g992
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g1039
sg895
g1035
sg909
g1046
sg904
g1043
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g960
sg895
g950
sg909
g954
sg904
g958
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g1039
sg895
g1035
sg909
g1046
sg904
g1043
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g1022
sg895
g1078
sg909
g1029
sg904
g1085
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g1110
sg895
g1106
sg909
g1117
sg904
g1114
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g1127
sg895
g1123
sg909
g1134
sg904
g1131
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g960
sg895
g1140
sg909
g954
sg904
g1147
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g1110
sg895
g1106
sg909
g1117
sg904
g1114
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g1172
sg895
g1168
sg909
g1179
sg904
g1176
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g1189
sg895
g1185
sg909
g1196
sg904
g1193
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g1206
sg895
g1202
sg909
g1213
sg904
g1210
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g900
sg895
g1219
sg909
g910
sg904
g1226
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g1206
sg895
g1202
sg909
g1213
sg904
g1210
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g920
sg895
g1247
sg909
g927
sg904
g1254
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g1266
sg895
g1262
sg909
g1273
sg904
g1270
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g1127
sg895
g1279
sg909
g1134
sg904
g1286
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g1039
sg895
g1294
sg909
g1046
sg904
g1301
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g1206
sg895
g1309
sg909
g1213
sg904
g1316
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g1172
sg895
g1168
sg909
g1179
sg904
g1176
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g1354
sg895
g1350
sg909
g1361
sg904
g1358
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g1371
sg895
g1367
sg909
g1378
sg904
g1375
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g1110
sg895
g1384
sg909
g1117
sg904
g1391
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g1189
sg895
g1185
sg909
g1196
sg904
g1193
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g937
sg895
g1412
sg909
g944
sg904
g1419
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g971
sg895
g1427
sg909
g978
sg904
g1434
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g1005
sg895
g1442
sg909
g1012
sg904
g1449
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g1354
sg895
g1457
sg909
g1361
sg904
g1464
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g1476
sg895
g1472
sg909
g1483
sg904
g1480
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g1354
sg895
g1350
sg909
g1361
sg904
g1358
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g1266
sg895
g1262
sg909
g1273
sg904
g1270
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g1206
sg895
g1202
sg909
g1213
sg904
g1210
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g900
sg895
g1219
sg909
g910
sg904
g1226
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g1189
sg895
g1541
sg909
g1196
sg904
g1548
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g960
sg895
g950
sg909
g954
sg904
g958
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g1127
sg895
g1123
sg909
g1134
sg904
g1131
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g1110
sg895
g1106
sg909
g1117
sg904
g1114
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g1605
sg895
g1595
sg909
g1599
sg904
g1603
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g1476
sg895
g1472
sg909
g1483
sg904
g1480
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g1371
sg895
g1625
sg909
g1378
sg904
g1632
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g1005
sg895
g1442
sg909
g1012
sg904
g1449
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g1354
sg895
g1457
sg909
g1361
sg904
g1464
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g971
sg895
g1427
sg909
g978
sg904
g1434
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g1189
sg895
g1541
sg909
g1196
sg904
g1548
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g900
sg895
g1219
sg909
g910
sg904
g1226
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g920
sg895
g1247
sg909
g927
sg904
g1254
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1189
sg895
g1185
sg909
g1196
sg904
g1193
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g1039
sg895
g1294
sg909
g1046
sg904
g1301
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g1774
sg895
g1770
sg909
g1781
sg904
g1778
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g1127
sg895
g1123
sg909
g1134
sg904
g1131
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g994
sg895
g984
sg909
g988
sg904
g992
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g900
sg895
g1219
sg909
g910
sg904
g1226
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g937
sg895
g1412
sg909
g944
sg904
g1419
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g994
sg895
g984
sg909
g988
sg904
g992
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g1110
sg895
g1384
sg909
g1117
sg904
g1391
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g994
sg895
g1865
sg909
g988
sg904
g1872
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g1371
sg895
g1625
sg909
g1378
sg904
g1632
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g1476
sg895
g1906
sg909
g1483
sg904
g1913
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g920
sg895
g1247
sg909
g927
sg904
g1254
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g960
sg895
g1140
sg909
g954
sg904
g1147
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g1005
sg895
g1442
sg909
g1012
sg904
g1449
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g994
sg895
g984
sg909
g988
sg904
g992
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g1354
sg895
g1350
sg909
g1361
sg904
g1358
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g1266
sg895
g1262
sg909
g1273
sg904
g1270
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g1354
sg895
g1457
sg909
g1361
sg904
g1464
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g960
sg895
g1140
sg909
g954
sg904
g1147
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g1476
sg895
g1472
sg909
g1483
sg904
g1480
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g1371
sg895
g1367
sg909
g1378
sg904
g1375
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g1172
sg895
g1168
sg909
g1179
sg904
g1176
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g1127
sg895
g1123
sg909
g1134
sg904
g1131
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g960
sg895
g1140
sg909
g954
sg904
g1147
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g1605
sg895
g2129
sg909
g1599
sg904
g2136
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g1127
sg895
g1279
sg909
g1134
sg904
g1286
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g994
sg895
g1865
sg909
g988
sg904
g1872
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g1476
sg895
g1472
sg909
g1483
sg904
g1480
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g1127
sg895
g1123
sg909
g1134
sg904
g1131
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g900
sg895
g1219
sg909
g910
sg904
g1226
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g971
sg895
g1427
sg909
g978
sg904
g1434
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g994
sg895
g1865
sg909
g988
sg904
g1872
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g1266
sg895
g1262
sg909
g1273
sg904
g1270
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g1774
sg895
g1770
sg909
g1781
sg904
g1778
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g1476
sg895
g1472
sg909
g1483
sg904
g1480
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g1022
sg895
g1078
sg909
g1029
sg904
g1085
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g1189
sg895
g1541
sg909
g1196
sg904
g1548
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g1039
sg895
g1294
sg909
g1046
sg904
g1301
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g971
sg895
g1427
sg909
g978
sg904
g1434
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g1206
sg895
g1202
sg909
g1213
sg904
g1210
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g994
sg895
g984
sg909
g988
sg904
g992
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g1774
sg895
g2378
sg909
g1781
sg904
g2385
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g1110
sg895
g1106
sg909
g1117
sg904
g1114
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g1206
sg895
g1202
sg909
g1213
sg904
g1210
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g1605
sg895
g2129
sg909
g1599
sg904
g2136
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g1189
sg895
g1541
sg909
g1196
sg904
g1548
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g1354
sg895
g1350
sg909
g1361
sg904
g1358
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g1039
sg895
g1035
sg909
g1046
sg904
g1043
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g1371
sg895
g1367
sg909
g1378
sg904
g1375
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g1110
sg895
g1106
sg909
g1117
sg904
g1114
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g1774
sg895
g2378
sg909
g1781
sg904
g2385
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g1371
sg895
g1625
sg909
g1378
sg904
g1632
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g1005
sg895
g1442
sg909
g1012
sg904
g1449
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g1110
sg895
g1384
sg909
g1117
sg904
g1391
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g1605
sg895
g1595
sg909
g1599
sg904
g1603
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g1354
sg895
g1457
sg909
g1361
sg904
g1464
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g920
sg895
g1247
sg909
g927
sg904
g1254
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g1605
sg895
g2129
sg909
g1599
sg904
g2136
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g1476
sg895
g1906
sg909
g1483
sg904
g1913
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g1206
sg895
g1309
sg909
g1213
sg904
g1316
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g1266
sg895
g2627
sg909
g1273
sg904
g2634
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g1005
sg895
g1442
sg909
g1012
sg904
g1449
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g1206
sg895
g1309
sg909
g1213
sg904
g1316
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g994
sg895
g1865
sg909
g988
sg904
g1872
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g1371
sg895
g1367
sg909
g1378
sg904
g1375
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g1172
sg895
g2707
sg909
g1179
sg904
g2714
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g1371
sg895
g1625
sg909
g1378
sg904
g1632
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g1774
sg895
g1770
sg909
g1781
sg904
g1778
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1266
sg895
g2627
sg909
g1273
sg904
g2634
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g1371
sg895
g1625
sg909
g1378
sg904
g1632
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g1206
sg895
g1309
sg909
g1213
sg904
g1316
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g1127
sg895
g1279
sg909
g1134
sg904
g1286
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g1172
sg895
g2707
sg909
g1179
sg904
g2714
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g1172
sg895
g2707
sg909
g1179
sg904
g2714
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g1476
sg895
g1906
sg909
g1483
sg904
g1913
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g1266
sg895
g2627
sg909
g1273
sg904
g2634
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g1172
sg895
g2707
sg909
g1179
sg904
g2714
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g937
sg895
g1412
sg909
g944
sg904
g1419
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g1354
sg895
g1350
sg909
g1361
sg904
g1358
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g1189
sg895
g1185
sg909
g1196
sg904
g1193
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g1774
sg895
g1770
sg909
g1781
sg904
g1778
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g1206
sg895
g1309
sg909
g1213
sg904
g1316
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g1022
sg895
g1078
sg909
g1029
sg904
g1085
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g937
sg895
g1412
sg909
g944
sg904
g1419
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g1039
sg895
g1294
sg909
g1046
sg904
g1301
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g1189
sg895
g1541
sg909
g1196
sg904
g1548
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g971
sg895
g1427
sg909
g978
sg904
g1434
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g1605
sg895
g2129
sg909
g1599
sg904
g2136
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g1022
sg895
g1078
sg909
g1029
sg904
g1085
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g1354
sg895
g1457
sg909
g1361
sg904
g1464
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g1605
sg895
g1595
sg909
g1599
sg904
g1603
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g1774
sg895
g2378
sg909
g1781
sg904
g2385
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g1039
sg895
g1035
sg909
g1046
sg904
g1043
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g994
sg895
g1865
sg909
g988
sg904
g1872
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g1127
sg895
g1279
sg909
g1134
sg904
g1286
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g1172
sg895
g1168
sg909
g1179
sg904
g1176
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g1110
sg895
g1384
sg909
g1117
sg904
g1391
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g1476
sg895
g1906
sg909
g1483
sg904
g1913
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g920
sg895
g1247
sg909
g927
sg904
g1254
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g1605
sg895
g1595
sg909
g1599
sg904
g1603
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g960
sg895
g950
sg909
g954
sg904
g958
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g1110
sg895
g1384
sg909
g1117
sg904
g1391
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g1774
sg895
g1770
sg909
g1781
sg904
g1778
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g1605
sg895
g2129
sg909
g1599
sg904
g2136
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g1774
sg895
g2378
sg909
g1781
sg904
g2385
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g1172
sg895
g1168
sg909
g1179
sg904
g1176
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g960
sg895
g950
sg909
g954
sg904
g958
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g1371
sg895
g1367
sg909
g1378
sg904
g1375
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g1039
sg895
g1035
sg909
g1046
sg904
g1043
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g1022
sg895
g1078
sg909
g1029
sg904
g1085
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g1172
sg895
g2707
sg909
g1179
sg904
g2714
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g1127
sg895
g1279
sg909
g1134
sg904
g1286
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g1266
sg895
g1262
sg909
g1273
sg904
g1270
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g1774
sg895
g2378
sg909
g1781
sg904
g2385
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g1266
sg895
g2627
sg909
g1273
sg904
g2634
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g937
sg895
g1412
sg909
g944
sg904
g1419
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g1605
sg895
g1595
sg909
g1599
sg904
g1603
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g1039
sg895
g1294
sg909
g1046
sg904
g1301
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g960
sg895
g1140
sg909
g954
sg904
g1147
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g1266
sg895
g2627
sg909
g1273
sg904
g2634
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g1189
sg895
g1185
sg909
g1196
sg904
g1193
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g1476
sg895
g1906
sg909
g1483
sg904
g1913
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I82436432
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S'@\xc4\xc7\x1fp\xc4\xc7\x1f\xa0\xc4\xc7\x1f\xd0\xc4\xc7\x1f\xf0\x0c\x05\r\xd8\x0b\x05\r0\x04\x05\r\xa0\x02\x05\r\xf0\xc5\xc7\x1f0\x04\x05\r\x00\xc5\xc7\x1f\xd8\x8a\x05\r \xaa]\r\xd8\x0b\x05\r\x08\x04\x05\r\x80\x8b\x05\r\xa0@\xda\x0cx\x02\x05\r\xf0\x8b\x05\r\xa0\xc4\xc7\x1f\xc0D\xda\x0c\x00\xc5\xc7\x1fp\xc4\xc7\x1f \xaa]\r\xa0@\xda\x0c\xd0\xc4\xc7\x1f\xa0@\xda\x0c\xb8\x03\x05\r\xd0\xc4\xc7\x1f@\xc4\xc7\x1f\xa0\xc4\xc7\x1f\xb8\x03\x05\r\xa0@\xda\x0c\x08\x04\x05\r\xc0D\xda\x0cP\x02\x05\r\xd0\xc4\xc7\x1f\xf0\xc5\xc7\x1f0\xc5\xc7\x1f\xc0D\xda\x0c\x90\x03\x05\r0\xc5\xc7\x1f\xf0\x0c\x05\r\x80\x8b\x05\r@\xc4\xc7\x1f\xd0\xc4\xc7\x1f\xf0\x0c\x05\r\x08\x04\x05\r\xb8\x03\x05\rP\x02\x05\r \xaa]\r\x08\x04\x05\r(\x8c\x05\r\xe0\x03\x05\r\x90\x03\x05\r\xd8\x0b\x05\r\xd8\x8a\x05\r\xa0\xc4\xc7\x1f(\x02\x05\r\xd8\x0b\x05\r\xe0\x03\x05\r\xb8\x8b\x05\r\x00\xc5\xc7\x1f\xe0\x03\x05\r\xc0F\xda\x0c\xd0\xc4\xc7\x1fh\x03\x05\rP\x02\x05\r`D\xda\x0c\x08\x04\x05\rx\x02\x05\rP\xc6\xc7\x1f\xd8\x8a\x05\r\xc8\x02\x05\r\xd8\x8a\x05\r\xc0F\xda\x0c \xaa]\r0\xc5\xc7\x1f\xd8\x0b\x05\r\x10\x8b\x05\rh\x03\x05\rp\xc4\xc7\x1f\xf0\xc5\xc7\x1f\x90\x03\x05\r@\xc4\xc7\x1f\xa0\xc4\xc7\x1f0\x04\x05\r \xc6\xc7\x1f\x90\x03\x05\r\xc0F\xda\x0c\xd8\x0b\x05\r\xe0\x03\x05\r\x00\xc5\xc7\x1f \xaa]\r\xf0\x0c\x05\r\xc0F\xda\x0c\xd8\x8a\x05\r \xaa]\r\x10\x8b\x05\r\xa0@\xda\x0c@\xc4\xc7\x1f\x90\x03\x05\r\x00\xc5\xc7\x1f\xa0\x02\x05\r0\x04\x05\rh\x03\x05\r\x10\x8b\x05\r\xb8\x03\x05\r\xc0D\xda\x0c0\xc5\xc7\x1f\x10\x8b\x05\rp\xc4\xc7\x1fh\x03\x05\r\xa0\xc4\xc7\x1f\xd8\x8a\x05\r\x10\x8b\x05\r\xe0\x03\x05\r0\xc5\xc7\x1f\x08\x04\x05\r\x90\x03\x05\rh\x03\x05\r\xb8\x03\x05\r\xa0@\xda\x0c\xf0\x0c\x05\r\xd0\xc4\xc7\x1f\xf0\x0c\x05\r\xa0\x02\x05\r\xa0@\xda\x0c\xd0\xc4\xc7\x1f\xc0F\xda\x0c\x10\x8b\x05\r\xe0\x03\x05\r\xc0D\xda\x0c\xd0\xc4\xc7\x1fh\x03\x05\r0\xc5\xc7\x1fh\x03\x05\r\xd8\x0b\x05\r\xc0D\xda\x0c0\x04\x05\r \xaa]\r\xb8\x03\x05\r\xf0\x0c\x05\rx\x02\x05\rp\xc4\xc7\x1f\xd8\x8a\x05\r\xc0D\xda\x0c0\x04\x05\r\xf0\xc5\xc7\x1fH\x8b\x05\r\xf0\x8b\x05\r\xa0\xc4\xc7\x1f0\x04\x05\r \xaa]\r0\x04\x05\r\xf0\x0c\x05\r\xe0\x03\x05\r\x90\x03\x05\rp\xc4\xc7\x1f\xb8\x03\x05\r\xf0\x0c\x05\rp\xc4\xc7\x1f0\xc5\xc7\x1f\xc0D\xda\x0c\xf0\x0c\x05\r \xaa]\r@\xc4\xc7\x1f\xa0\xc4\xc7\x1f\xc0D\xda\x0c\x00\xc5\xc7\x1f\xa0\xc4\xc7\x1f@\xc4\xc7\x1fH\x8b\x05\r`\xc5\xc7\x1f(\x02\x05\r@\xc4\xc7\x1f\xd8\x0b\x05\r\x08\x04\x05\r\xc0F\xda\x0c\xd0\xc4\xc7\x1f\xc0F\xda\x0c\xa0@\xda\x0c0\x04\x05\r\x90\x03\x05\rp\xc4\xc7\x1f\x90\x03\x05\rp\xc4\xc7\x1f\x10\x8b\x05\r\xb8\x8b\x05\r\x08\x04\x05\r\xb8\x03\x05\r\xa0\xc4\xc7\x1f\xd8\x0b\x05\r\xb8\x03\x05\r\x10\x8b\x05\r\xa0E\xda\x0cp\xc4\xc7\x1f@\xc4\xc7\x1f0\xc5\xc7\x1fh\x03\x05\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S"`'\xc0\x1f\xa0'\xc0\x1f\xa0&\xc0\x1f\x00(\xc0\x1f@&\xc0\x1f &\xc0\x1f\x00&\xc0\x1f\x80'\xc0\x1f (\xc0\x1f\xc0%\xc0\x1f\x00)\xc0\x1f\xa0%\xc0\x1f\x00'\xc0\x1f\xc0&\xc0\x1f\xe0&\xc0\x1f\xe0'\xc0\x1f\x80%\xc0\x1f\xc0'\xc0\x1f\x80(\xc0\x1f@'\xc0\x1f\x80)\xc0\x1f\xe0(\xc0\x1f\xc0)\xc0\x1f`)\xc0\x1f )\xc0\x1f *\xc0\x1f\x80&\xc0\x1f\x00*\xc0\x1f\xc0(\xc0\x1f\xa0)\xc0\x1f\x00+\xc0\x1f\xa0*\xc0\x1f\xc0*\xc0\x1f\xa0(\xc0\x1f\xe0)\xc0\x1f@+\xc0\x1f`+\xc0\x1f\xa0+\xc0\x1f@)\xc0\x1f\x80*\xc0\x1f`(\xc0\x1f\xe0*\xc0\x1f@,\xc0\x1f\x00,\xc0\x1f '\xc0\x1f`%\xc0\x1f +\xc0\x1f\xa0,\xc0\x1f\xc0+\xc0\x1f`,\xc0\x1f\xc0,\xc0\x1f ,\xc0\x1f@(\xc0\x1f`*\xc0\x1f`&\xc0\x1f\x00-\xc0\x1f -\xc0\x1f\xc0-\xc0\x1f@.\xc0\x1f\xc0.\xc0\x1f@-\xc0\x1f\x80,\xc0\x1f\x80.\xc0\x1f\xe0.\xc0\x1f@/\xc0\x1f /\xc0\x1f\x80+\xc0\x1f@*\xc0\x1f`/\xc0\x1f\xe0+\xc0\x1f\xa0-\xc0\x1f\xe0/\xc0\x1f\x80/\xc0\x1f\x00.\xc0\x1f\xc0/\xc0\x1f\x80-\xc0\x1f`-\xc0\x1f\xa0.\xc0\x1f\xe0,\xc0\x1f\xe0-\xc0\x1f`.\xc0\x1f .\xc0\x1f\x00\xd8\xb0\x04\xe0%\xc0\x1f@r\xe4\x1f r\xe4\x1f\xc0p\xe4\x1f@q\xe4\x1f\x00r\xe4\x1f\xe0p\xe4\x1f`p\xe4\x1f\x00q\xe4\x1f p\xe4\x1f\x80r\xe4\x1f\xa0r\xe4\x1f\xa0p\xe4\x1f\x00s\xe4\x1f\xe0r\xe4\x1f@s\xe4\x1f s\xe4\x1f\xc0q\xe4\x1f`s\xe4\x1f\xc0s\xe4\x1f\xa0s\xe4\x1f\x80p\xe4\x1f t\xe4\x1f\x00t\xe4\x1f q\xe4\x1f\x80t\xe4\x1f`t\xe4\x1f\xe0q\xe4\x1f\xa0t\xe4\x1f\xc0t\xe4\x1f u\xe4\x1f\x00u\xe4\x1f`u\xe4\x1f\x80u\xe4\x1f@p\xe4\x1f\xe0s\xe4\x1f\xa0u\xe4\x1f\xc0u\xe4\x1f v\xe4\x1f@v\xe4\x1f`v\xe4\x1f\x80q\xe4\x1f\xe0t\xe4\x1f\x80v\xe4\x1f\xe0v\xe4\x1f\x00w\xe4\x1f@t\xe4\x1f@w\xe4\x1f`w\xe4\x1f\x80w\xe4\x1f\xc0r\xe4\x1f\xc0w\xe4\x1f\xa0w\xe4\x1f\xa0v\xe4\x1f x\xe4\x1f\x00x\xe4\x1f\xe0u\xe4\x1f@x\xe4\x1f\xa0x\xe4\x1f\x80x\xe4\x1f\xe0x\xe4\x1f\xc0x\xe4\x1f\x00v\xe4\x1f\x00y\xe4\x1f`y\xe4\x1f\x80y\xe4\x1f\xe0w\xe4\x1f\xc0y\xe4\x1f\xa0y\xe4\x1f w\xe4\x1f z\xe4\x1f@z\xe4\x1f`z\xe4\x1f`q\xe4\x1f@y\xe4\x1f\xc0z\xe4\x1f\xa0z\xe4\x1f\x00{\xe4\x1f\xe0z\xe4\x1f@{\xe4\x1f {\xe4\x1f\x80{\xe4\x1f\xa0{\xe4\x1f\xc0{\xe4\x1f\xe0{\xe4\x1f\x00|\xe4\x1f`x\xe4\x1f\x80z\xe4\x1f |\xe4\x1f@|\xe4\x1f`|\xe4\x1f\x80|\xe4\x1f\xe0|\xe4\x1f\xc0|\xe4\x1f\x00z\xe4\x1f\x00}\xe4\x1f }\xe4\x1f@}\xe4\x1f`}\xe4\x1f\xc0}\xe4\x1f\xe0}\xe4\x1f\xe0y\xe4\x1f ~\xe4\x1f\x00~\xe4\x1f y\xe4\x1f\x80~\xe4\x1f`~\xe4\x1f\xc0~\xe4\x1f\xa0~\xe4\x1f@u\xe4\x1f\xe0~\xe4\x1f\xa0}\xe4\x1f\xa0q\xe4\x1f \x7f\xe4\x1f\xa0|\xe4\x1f`{\xe4\x1f`r\xe4\x1f"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S'\x89\xe9\x8e?/\xb6{?,\x96Y?\xe6\x0fQ?\xbb\xee\x8e?\x06\xba*?\xfa*s?V\xba\xbb?/c\xa6?;\xc2L?\xfb\\\xf5?L\xc6\xcc?\x8e1\x03@&\xf3??\xcao\xd7?\'\x98Y?\x11gf?\xcd\xc7L?\xe9\xc9L?\xfeow?>T\x15@\x99-\xb3?\x0f.s?\xb4\x96\xd9?\x9fu7?\xf8\xa9j?.\x94\x19?5\x88\xa8?\xe2\xcaL?\xcd\xdc\x9d?\xef\xc8\xac?|yw?\xe1\xfa\x7f?\x1dA\x14@\\\x97Y@|\x97\x19?\x19\xdd\x1d?\x9c\x1f\x12@\x9a\xdd\x1d?%\xff\xbf?4\x9aj?\xafS\x15?\xaf\xb8;@6\x0f\x11?&NU?+\xf0.?Z\xff??\x08\x1d\x82?\xac\xa9j?\x86 "?N\xf4\x0e@\x80\x0c\xb1?\xce\xb4\xbb?\xaa\x7fH?k\xe5??\xd5\x0eQ?\xac2\x03@\x80Q\x95?\xff\x1c\x82?\xe7\x96Y?\x04"b?BTU?\xfd\xad\xea?\x94\xfb??\x16\xd9\xbd?\xf3\xda\x1d?"\xab*?T\x94\x19?\xd8\x1f\xa2?\x15\x8eY?\x14\xceL?\x12i\xa6?\x86\x96\x99?J(3?\x8b\x11Q?\xea\x8fY?\xa6\xa9*@b\x9d*?\x89t7?]\xcc\x8c?|sw?\x95\x98Y?q\xd2\x1c@\xbd\x0c"?\xa8\xf8\x7f?v\xd8]?{t\xb7?\xb7\x90Y?V\x9a*?4g&?\xdb\xff??\xab"b?y\xc8L?\x11\xe6L?I\x0f\x91?\xc0w7?\x9d5\x93?\xf9R5@\x12\xb7\xca?\xa3\xb9\x1b@c_f?\\\x1f3?\xdcB\xe4?\xf8\x99\x99?\xb7\xfc??\xc8\x1e\x82?\x1043?\xe8?\x84?k\xc2\xbb?o\xa9*?\xba\xc5L?m\x1f\x82?qRE@&\xf9??\x80\xeen?\xd5\xa4j?\xac\xfe\x0f@\xee\x19"?\x9f\xeb\x8e?5\x9a*?\xe9\xa4*?\x84\x0eQ?E\xde]?\xc9]&?~\xc1j?\xd5\xe9.?J!\xc2?\xa8\xccL?g\xef.?\xc5T\x15?\xa2\xf6]?3DD?}\xb6\xbb?\xe4\xeb.?\xb2\x0bQ?\x7f\xed.?\x0b43?HPU?\xf9\x96\x99?\xbd*3?\x96f&?\x9ekw?o$Q?\xe2\x98Y?\xcf\xceL?\xb1\rQ?\x0b=D?\x12 b?\x91,\xa2?"\x16b?\xd2\xa7j?\xc1QU?\xcd\x1ab?\xff\xd5\x9d?j\xee\x0e@\xa6\xaa*?\x92\xd8]?9N&?r\x1c\xb1?dww?Z73?\x1f\x00\x80?Qe&?\x93\x99Y?\x96\xddL?\xa1@D?\x0f\x88\x88?\x13Yf?c\xcdL?\xcb\xb9;?=\xc6\x9b?\xf5q7?\x92\xc5\x8c?\r\x1d"?\xdb\x08Q?\xd3\xe8.?M\xa3j?\xfaJ\x95?\x13$"?\x90\xab*?\xbe\xde\x1d?=_f?\x80\x1bQ?\xe5sH?..\x93?\xe2\x07\xd1?\x07\x00\xa0?\x81\xcd\x8c?\xbdi7?J@\x84?\x9f\x03\xd1?\x10\x89\xe8?\xc1\x1aQ?\x92\xd8]?a\xc6L?\xc9\xdd]?v\xeen?+U\x95?\xefMD?\x89\xe9.?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S'0\xee\n\r\x98\xe0\n\r\xd0\xfa\x9d\x04\xd8\xfb\x9d\x04\xb8\xf4\x9d\x04x\xf2\x9d\x04\x08\xfc\x9d\x04`\xf8\x9d\x04(\xf1\x9d\x04\xe8\xfd\x9d\x04\xe8\xfa\x9d\x04\x10\xfd\x9d\x04\xc8\xf9\x9d\x04\x10\xfa\x9d\x04p\xfd\x9d\x04x\xfe\x9d\x04h\xf9\x9d\x04\xb8\xf1\x9d\x04@\xfa\x9d\x04H\xfb\x9d\x040\xf8\x9d\x04\xd8\xfe\x9d\x04\xf0\xfb\x9d\x04\x08\xff\x9d\x04H\xfe\x9d\x04p\xf4\x9d\x04\xb8\xf7\x9d\x040\xf2\x9d\x04\xa0\xfa\x9d\x04P\xff\x9d\x04\xd0\xf1\x9d\x04\xa8\xfe\x9d\x04\xf8\xf6\x9d\x04h\xfc\x9d\x04 \xf3\x9d\x048\xfc\x9d\x04\x10\xf1\x9d\x04X\xfa\x9d\x04\x00\xfb\x9d\x04\x80\xfc\x9d\x04\x00\xf8\x9d\x04\xa8\xf2\x9d\x04\x90\xfb\x9d\x040\xfe\x9d\x04\x90\xf5\x9d\x04h\xf6\x9d\x04h\xf3\x9d\x048\xf3\x9d\x04\xc0\xf5\x9d\x04\xe0\xfc\x9d\x04\x88\xfd\x9d\x04\xc0\xf8\x9d\x04(\xf4\x9d\x04\xa0\xf4\x9d\x04\xb8\xfd\x9d\x04x\xf8\x9d\x04\x90\xf2\x9d\x04P\xfc\x9d\x04\x08\xf6\x9d\x04\xb0\xf6\x9d\x04\xb8\xfa\x9d\x04\xd0\xfd\x9d\x04\xf8\xf9\x9d\x04H\xf5\x9d\x04\x10\xf4\x9d\x04P\xf6\x9d\x04@\xf1\x9d\x04h\xf0\x9d\x048\xf6\x9d\x04\xb0\xf3\x9d\x04\x08\xf3\x9d\x04\x18\xf2\x9d\x04\x80\xf3\x9d\x04p\xf7\x9d\x04\xf0\xf8\x9d\x04\xc8\xf6\x9d\x04 \xfc\x9d\x04\xd8\xf5\x9d\x04\xc8\xfc\x9d\x04@\xf4\x9d\x04H\xf8\x9d\x04P\xf9\x9d\x04\x88\xf1\x9d\x04\x00\xf5\x9d\x04(\xf7\x9d\x04@w\x84\x03@\xf1`\x03\x08\xff`\x03\xf8\xb6\xc9\x04\xb8\xb4\xc9\x04\xf0\xb5\xc9\x04\x00\xee\n\r`\xee\n\rh\xe9\n\r\xc8\xe9\n\r \xec\n\rP\xe6\n\r\x08\xe9\n\rh\xe0\n\r\xc8\xe3\n\r0\xeb\n\r(\xe7\n\r\xe8\xe1\n\r\x88\xea\n\r\xf0\xee\n\rH\xeb\n\r\x98\xe9\n\r\xd0\xea\n\r\x80\xe6\n\r\x18\xeb\n\r\x08\xef\n\r\x00\xe2\n\r`\xe8\n\rx\xe8\n\r\xd8\xe8\n\rh\xe6\n\r\x00\xe5\n\r8\xe6\n\r8\xe3\n\r\x08\xe3\n\r\xa8\xee\n\r\xb0\xef\n\r\xa8\xeb\n\r\xa8\xe2\n\r\x80\xe0\n\r\xa8\x0e\xde\x048\x00\xde\x04 \x0f\xde\x04\xb0\x03\xde\x04x\x0b\xde\x04\x88\x07\xde\x04`\x0e\xde\x04\x90\x02\xde\x04\x08\x0f\xde\x04(\x04\xde\x04`\x08\xde\x04H\x0e\xde\x04\x80\x00\xde\x04\x18\x0e\xde\x04\x90\x0b\xde\x04\x08\x03\xde\x04\xa0\x07\xde\x04\xc8\x0c\xde\x04@\x04\xde\x04\x80\x06\xde\x04 \x0c\xde\x04@\n\xde\x04H\x08\xde\x04X\n\xde\x04\xe0\x0c\xde\x04\x18\x0b\xde\x04\x00\x0b\xde\x04\xa8\x08\xde\x04\x80\x0f\xde\x04\xc8\x0f\xde\x04\xc8\x03\xde\x04 \t\xde\x04@\x07\xde\x04\x98\x00\xde\x04\xf8\x06\xde\x04h\x06\xde\x04(\r\xde\x04\xe0\x0f\xde\x04P\x0f\xde\x04p\xf1\x9d\x04h\xff\x9d\x04\x98\xff\x9d\x04\xe0\xf6\x9d\x04\x88\xfa\x9d\x04@\xf7\x9d\x04`\xfe\x9d\x048\xf9\x9d\x04x\xfb\x9d\x04\xe8\xf4\x9d\x04\x98\xf3\x9d\x048\xff\x9d\x04\xc8\xf0\x9d\x04\x98\xf9\x9d\x04\x18\xf8\x9d\x04\x88\xf7\x9d\x04\xc0\xfb\x9d\x04\xc8\xff\x9d\x04\xe8\xf1\x9d\x04\x80\xf6\x9d\x048\xf0\x9d\x04\xc8\xf3\x9d\x04\xe0\xf3\x9d\x04\x98\xf6\x9d\x04\x08\xf9\x9d\x040\xfb\x9d\x04\xe0\xf9\x9d\x04\xd0\xf7\x9d\x04\xc0\xfe\x9d\x04\xe0\xff\x9d\x04\x18\xf5\x9d\x04`\xfb\x9d\x04\xb0\xff\x9d\x04X\xf7\x9d\x04\x80\xff\x9d\x04\x90\xfe\x9d\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3743
sg3633
g3739
sg3647
g3750
sg3642
g3747
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3766
sg3633
g3756
sg3647
g3760
sg3642
g3764
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3783
sg3633
g3773
sg3647
g3777
sg3642
g3781
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3743
sg3633
g3739
sg3647
g3750
sg3642
g3747
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3783
sg3633
g3773
sg3647
g3777
sg3642
g3781
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3766
sg3633
g3756
sg3647
g3760
sg3642
g3764
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3833
sg3633
g3829
sg3647
g3840
sg3642
g3837
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3726
sg3633
g3846
sg3647
g3733
sg3642
g3853
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3865
sg3633
g3861
sg3647
g3872
sg3642
g3869
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3888
sg3633
g3878
sg3647
g3882
sg3642
g3886
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3899
sg3633
g3895
sg3647
g3906
sg3642
g3903
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3922
sg3633
g3912
sg3647
g3916
sg3642
g3920
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3939
sg3633
g3929
sg3647
g3933
sg3642
g3937
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3963
sg3633
g3959
sg3647
g3970
sg3642
g3967
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3783
sg3633
g3773
sg3647
g3777
sg3642
g3781
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g3833
sg3633
g4002
sg3647
g3840
sg3642
g4009
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g3899
sg3633
g4017
sg3647
g3906
sg3642
g4024
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3899
sg3633
g4017
sg3647
g3906
sg3642
g4024
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g4062
sg3633
g4058
sg3647
g4069
sg3642
g4066
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g3675
sg3633
g4101
sg3647
g3682
sg3642
g4108
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g4062
sg3633
g4058
sg3647
g4069
sg3642
g4066
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g3899
sg3633
g3895
sg3647
g3906
sg3642
g3903
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g3865
sg3633
g4142
sg3647
g3872
sg3642
g4149
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g3963
sg3633
g3959
sg3647
g3970
sg3642
g3967
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g4180
sg3633
g4170
sg3647
g4174
sg3642
g4178
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g3692
sg3633
g4187
sg3647
g3699
sg3642
g4194
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g3783
sg3633
g4202
sg3647
g3777
sg3642
g4209
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g3888
sg3633
g3878
sg3647
g3882
sg3642
g3886
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g3963
sg3633
g4230
sg3647
g3970
sg3642
g4237
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g4249
sg3633
g4245
sg3647
g4256
sg3642
g4253
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g3888
sg3633
g3878
sg3647
g3882
sg3642
g3886
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g3709
sg3633
g4275
sg3647
g3716
sg3642
g4282
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g3888
sg3633
g3878
sg3647
g3882
sg3642
g3886
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g3638
sg3633
g4303
sg3647
g3648
sg3642
g4310
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g3709
sg3633
g4275
sg3647
g3716
sg3642
g4282
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g3865
sg3633
g3861
sg3647
g3872
sg3642
g3869
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g4062
sg3633
g4357
sg3647
g4069
sg3642
g4364
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g4180
sg3633
g4170
sg3647
g4174
sg3642
g4178
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g3833
sg3633
g3829
sg3647
g3840
sg3642
g3837
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g3865
sg3633
g4142
sg3647
g3872
sg3642
g4149
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g3963
sg3633
g3959
sg3647
g3970
sg3642
g3967
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g3922
sg3633
g4424
sg3647
g3916
sg3642
g4431
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g4249
sg3633
g4439
sg3647
g4256
sg3642
g4446
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g3726
sg3633
g3846
sg3647
g3733
sg3642
g3853
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g3766
sg3633
g3756
sg3647
g3760
sg3642
g3764
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g4503
sg3633
g4493
sg3647
g4497
sg3642
g4501
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g3726
sg3633
g3846
sg3647
g3733
sg3642
g3853
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g3922
sg3633
g4424
sg3647
g3916
sg3642
g4431
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g3899
sg3633
g3895
sg3647
g3906
sg3642
g3903
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g3783
sg3633
g4202
sg3647
g3777
sg3642
g4209
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g3922
sg3633
g4424
sg3647
g3916
sg3642
g4431
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g4180
sg3633
g4575
sg3647
g4174
sg3642
g4582
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g3692
sg3633
g4187
sg3647
g3699
sg3642
g4194
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g4503
sg3633
g4493
sg3647
g4497
sg3642
g4501
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g4180
sg3633
g4575
sg3647
g4174
sg3642
g4582
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g3833
sg3633
g4002
sg3647
g3840
sg3642
g4009
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g3865
sg3633
g4142
sg3647
g3872
sg3642
g4149
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g3922
sg3633
g3912
sg3647
g3916
sg3642
g3920
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g4249
sg3633
g4439
sg3647
g4256
sg3642
g4446
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g3766
sg3633
g4681
sg3647
g3760
sg3642
g4688
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g3726
sg3633
g3846
sg3647
g3733
sg3642
g3853
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g3766
sg3633
g4681
sg3647
g3760
sg3642
g4688
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g4180
sg3633
g4575
sg3647
g4174
sg3642
g4582
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g3833
sg3633
g4002
sg3647
g3840
sg3642
g4009
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g3888
sg3633
g3878
sg3647
g3882
sg3642
g3886
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g3939
sg3633
g3929
sg3647
g3933
sg3642
g3937
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g4503
sg3633
g4787
sg3647
g4497
sg3642
g4794
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g3658
sg3633
g4802
sg3647
g3665
sg3642
g4809
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g3783
sg3633
g3773
sg3647
g3777
sg3642
g3781
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g4249
sg3633
g4245
sg3647
g4256
sg3642
g4253
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g3638
sg3633
g4303
sg3647
g3648
sg3642
g4310
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g3675
sg3633
g4101
sg3647
g3682
sg3642
g4108
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g3743
sg3633
g3739
sg3647
g3750
sg3642
g3747
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g4062
sg3633
g4357
sg3647
g4069
sg3642
g4364
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g4249
sg3633
g4439
sg3647
g4256
sg3642
g4446
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g4180
sg3633
g4170
sg3647
g4174
sg3642
g4178
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g3922
sg3633
g4424
sg3647
g3916
sg3642
g4431
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g3783
sg3633
g4202
sg3647
g3777
sg3642
g4209
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g3833
sg3633
g3829
sg3647
g3840
sg3642
g3837
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g4180
sg3633
g4170
sg3647
g4174
sg3642
g4178
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g3766
sg3633
g3756
sg3647
g3760
sg3642
g3764
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g3833
sg3633
g4002
sg3647
g3840
sg3642
g4009
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g3939
sg3633
g5025
sg3647
g3933
sg3642
g5032
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g3899
sg3633
g3895
sg3647
g3906
sg3642
g3903
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g4249
sg3633
g4439
sg3647
g4256
sg3642
g4446
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g3783
sg3633
g4202
sg3647
g3777
sg3642
g4209
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g3766
sg3633
g4681
sg3647
g3760
sg3642
g4688
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g3743
sg3633
g3739
sg3647
g3750
sg3642
g3747
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g4503
sg3633
g4787
sg3647
g4497
sg3642
g4794
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g3939
sg3633
g5025
sg3647
g3933
sg3642
g5032
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g4062
sg3633
g4058
sg3647
g4069
sg3642
g4066
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g3963
sg3633
g3959
sg3647
g3970
sg3642
g3967
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g3888
sg3633
g5170
sg3647
g3882
sg3642
g5177
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g3939
sg3633
g3929
sg3647
g3933
sg3642
g3937
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g4503
sg3633
g4787
sg3647
g4497
sg3642
g4794
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g3675
sg3633
g4101
sg3647
g3682
sg3642
g4108
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g3766
sg3633
g4681
sg3647
g3760
sg3642
g4688
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g3939
sg3633
g3929
sg3647
g3933
sg3642
g3937
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g3922
sg3633
g3912
sg3647
g3916
sg3642
g3920
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g3888
sg3633
g5170
sg3647
g3882
sg3642
g5177
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g3865
sg3633
g3861
sg3647
g3872
sg3642
g3869
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g4249
sg3633
g4245
sg3647
g4256
sg3642
g4253
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g4503
sg3633
g4787
sg3647
g4497
sg3642
g4794
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g4062
sg3633
g4058
sg3647
g4069
sg3642
g4066
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g3899
sg3633
g3895
sg3647
g3906
sg3642
g3903
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g3692
sg3633
g4187
sg3647
g3699
sg3642
g4194
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g3709
sg3633
g4275
sg3647
g3716
sg3642
g4282
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g3766
sg3633
g3756
sg3647
g3760
sg3642
g3764
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g3899
sg3633
g4017
sg3647
g3906
sg3642
g4024
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g3692
sg3633
g4187
sg3647
g3699
sg3642
g4194
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g4180
sg3633
g4170
sg3647
g4174
sg3642
g4178
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g3939
sg3633
g5025
sg3647
g3933
sg3642
g5032
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g3922
sg3633
g3912
sg3647
g3916
sg3642
g3920
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g3963
sg3633
g4230
sg3647
g3970
sg3642
g4237
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g4503
sg3633
g4493
sg3647
g4497
sg3642
g4501
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g3888
sg3633
g5170
sg3647
g3882
sg3642
g5177
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g4503
sg3633
g4493
sg3647
g4497
sg3642
g4501
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g3963
sg3633
g3959
sg3647
g3970
sg3642
g3967
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g3743
sg3633
g3739
sg3647
g3750
sg3642
g3747
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g3833
sg3633
g3829
sg3647
g3840
sg3642
g3837
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g4062
sg3633
g4357
sg3647
g4069
sg3642
g4364
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g3709
sg3633
g4275
sg3647
g3716
sg3642
g4282
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g3922
sg3633
g4424
sg3647
g3916
sg3642
g4431
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g3658
sg3633
g4802
sg3647
g3665
sg3642
g4809
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g3766
sg3633
g4681
sg3647
g3760
sg3642
g4688
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g3963
sg3633
g4230
sg3647
g3970
sg3642
g4237
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g3743
sg3633
g5666
sg3647
g3750
sg3642
g5673
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g3783
sg3633
g4202
sg3647
g3777
sg3642
g4209
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g3865
sg3633
g4142
sg3647
g3872
sg3642
g4149
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g3939
sg3633
g5025
sg3647
g3933
sg3642
g5032
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g3675
sg3633
g4101
sg3647
g3682
sg3642
g4108
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g3743
sg3633
g5666
sg3647
g3750
sg3642
g5673
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g3833
sg3633
g4002
sg3647
g3840
sg3642
g4009
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g3743
sg3633
g5666
sg3647
g3750
sg3642
g5673
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g3922
sg3633
g3912
sg3647
g3916
sg3642
g3920
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g4249
sg3633
g4439
sg3647
g4256
sg3642
g4446
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g3658
sg3633
g4802
sg3647
g3665
sg3642
g4809
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g4062
sg3633
g4058
sg3647
g4069
sg3642
g4066
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g3709
sg3633
g4275
sg3647
g3716
sg3642
g4282
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g3658
sg3633
g4802
sg3647
g3665
sg3642
g4809
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g3888
sg3633
g5170
sg3647
g3882
sg3642
g5177
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g3963
sg3633
g4230
sg3647
g3970
sg3642
g4237
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g3833
sg3633
g3829
sg3647
g3840
sg3642
g3837
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g3963
sg3633
g4230
sg3647
g3970
sg3642
g4237
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g3783
sg3633
g3773
sg3647
g3777
sg3642
g3781
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g3865
sg3633
g3861
sg3647
g3872
sg3642
g3869
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g3638
sg3633
g4303
sg3647
g3648
sg3642
g4310
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g4503
sg3633
g4493
sg3647
g4497
sg3642
g4501
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g3638
sg3633
g4303
sg3647
g3648
sg3642
g4310
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g3865
sg3633
g4142
sg3647
g3872
sg3642
g4149
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g4180
sg3633
g4575
sg3647
g4174
sg3642
g4582
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g3692
sg3633
g4187
sg3647
g3699
sg3642
g4194
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g4180
sg3633
g4575
sg3647
g4174
sg3642
g4582
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g3899
sg3633
g4017
sg3647
g3906
sg3642
g4024
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g3743
sg3633
g5666
sg3647
g3750
sg3642
g5673
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g4249
sg3633
g4245
sg3647
g4256
sg3642
g4253
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g3658
sg3633
g4802
sg3647
g3665
sg3642
g4809
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g4249
sg3633
g4245
sg3647
g4256
sg3642
g4253
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g3939
sg3633
g5025
sg3647
g3933
sg3642
g5032
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g3899
sg3633
g4017
sg3647
g3906
sg3642
g4024
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g3865
sg3633
g3861
sg3647
g3872
sg3642
g3869
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g4062
sg3633
g4357
sg3647
g4069
sg3642
g4364
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g3675
sg3633
g4101
sg3647
g3682
sg3642
g4108
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g3726
sg3633
g3846
sg3647
g3733
sg3642
g3853
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g4062
sg3633
g4357
sg3647
g4069
sg3642
g4364
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g3939
sg3633
g3929
sg3647
g3933
sg3642
g3937
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g3743
sg3633
g5666
sg3647
g3750
sg3642
g5673
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g3638
sg3633
g4303
sg3647
g3648
sg3642
g4310
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g3888
sg3633
g5170
sg3647
g3882
sg3642
g5177
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g4503
sg3633
g4787
sg3647
g4497
sg3642
g4794
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I82436432
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S' \xf1\t  \xaf\t H\xaf\t \x90\x0b\t  \xf1\t p\xaf\t \xe0\x0c\t @\xf1\t \x90\x0b\t \x10\x11\n \xc0\xaf\t \x80\xf1\t  \xaf\t  \xf1\t \xe0\x01\n \xc0\x0b\t \xe0\x01\n \x90\x0b\t \xe0\x01\n \xf0\x0b\t \xc0\xaf\t `\x11\n \xe8\x10\n  \x10\n H\x10\n  \xaf\t \x18\x02\n  \x0c\t P\x0c\t H\xaf\t p\x10\n \x98\xaf\t \xb0\x11\n \x98\xaf\t p\xaf\t \x90\x0b\t \xe0\x01\n \xb0\x11\n \xc0\xaf\t \x10\r\t H\xaf\t `\xf1\t P\x0c\t  \x10\n \x90\x0b\t H\xaf\t \x88\x11\n 8\x11\n \xc0\x0b\t \x88\x02\n \xb0\x11\n  \x10\n \x18\x02\n  \x10\n \xa0\xf1\t \xb0\x11\n \x10\r\t P\x0c\t \x88\x11\n @\r\t @\xf1\t  \x10\n \xc0\xf1\t \xe0\x01\n \xf0\x0b\t \x80\x0c\t p\x10\n  \xaf\t @\xf1\t \x18\x02\n \x80\x0c\t \x90\x0b\t  \xf1\t H\x10\n  \xf1\t p\xaf\t  \x0c\t @\xf1\t 8\x11\n \x90\x0b\t \x80\x0c\t \xc0\x10\n  \x0c\t \xf8\x02\n \xa0\xf1\t `\xf1\t `\x11\n H\xaf\t \x90\x0b\t  \xaf\t \x18\x02\n \x98\xaf\t \xa0\r\t \x98\xaf\t \x80\xf1\t \xf0\x0b\t \x98\xaf\t \xf8\x02\n p\x10\n `\xf1\t \xc0\x02\n \x80\xf1\t \xf0\x0b\t \xc0\x10\n \x98\xaf\t \xf0\x0b\t  \xaf\t \xc0\xaf\t \x80\x0c\t P\x0c\t \xc0\xaf\t  \x0c\t \xc0\x0b\t @\xf1\t H\xaf\t  \x0c\t \xf0\x0b\t p\xaf\t \xc0\x0b\t `\x11\n `\xf1\t P\x0c\t \xa0\xf1\t \x18\x02\n  \x10\n  \xf1\t \x80\x0c\t \xc0\x0b\t  \x0c\t \xe8\x10\n \xa0\r\t p\x10\n \xf0\x0b\t \x10\x11\n \x80\xf1\t `\xf1\t \xc0\xf1\t  \x10\n p\r\t p\xaf\t \xc0\x0b\t  \xaf\t H\x10\n @\xf1\t \xb0\x0c\t H\xaf\t P\x02\n \xe8\x10\n \x80\xf1\t \x10\x11\n \xc0\x0b\t \xe0\x01\n \xc0\xaf\t p\x10\n P\x0c\t  \xaf\t \x80\x0c\t  \x0c\t @\xf1\t P\x0c\t  \x0c\t \xe0\x01\n \xa0\r\t P\x0c\t H\x10\n \x88\x02\n 0\x03\n \x80\x0c\t \x90\x0b\t p\x10\n P\x0c\t \xc0\x0b\t H\x10\n \xc0\xaf\t \x10\x11\n P\x02\n \x98\xaf\t P\x02\n p\x10\n \x80\xf1\t \x10\x11\n @\r\t P\x02\n \x98\xaf\t  \x0c\t @\xf1\t \xe8\x10\n \x88\x11\n  \x10\n H\xaf\t \x88\x11\n @\xf1\t \xf8\x02\n p\x10\n \x80\xf1\t \xe8\x10\n \x98\xaf\t H\x10\n \x18\x02\n \xc0\xaf\t '
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S'@\xf4\t \xc0\xf2\t \xe0\xf3\t \xe0\xf1\t \xa0\xf3\t `\xf3\t `\xf2\t \x00\xf5\t @\xf3\t `\xf4\t  \xf5\t \x00\xf3\t \xe0\xf4\t \x80\xf2\t  \xf3\t @\xf2\t \xc0\xf4\t \xa0\xf5\t \x80\xf3\t \x80\xf5\t \xe0\xf5\t \xe0\xf2\t @\xf5\t @\xf6\t  \xf6\t \x00\xf4\t `\xf6\t \x80\xf6\t \xa0\xf6\t \x00\xf7\t  \xf7\t @\xf7\t `\xf7\t \xc0\xf5\t \xa0\xf7\t \x80\xf7\t \xe0\xf7\t \xc0\xf7\t  \xf8\t \x00\xf8\t `\xd9\xb0\x04`\xf5\t \xa0\xf2\t \xc0\xf8\t \x00\xf9\t \xe0\xf8\t \xa0\xf8\t  \xf2\t \xe0\xf6\t \x80\xf8\t  \xfa\t \xc0\xf3\t \xa0\xf9\t @\xf8\t \x80\xfa\t \x00\xfa\t `\xf8\t \xa0\xfa\t `\xf9\t \xc0\xf6\t  \xf9\t \xa0\xf4\t \x80\xfb\t \xe0\xfa\t \xe0\xfb\t \xc0\xfa\t \x00\xfc\t \xa0\xfb\t \x00\xda\xb0\x04\x80\xf9\t \xc0\xfb\t `\xfb\t \x00\xf6\t `\xfc\t @\xfb\t `\xfa\t \x80\xfd\t  \xfd\t  \xf4\t `\xfd\t @\xfc\t \xa0\xfd\t \xe0\xf9\t @\xfe\t \x80\xfe\t \xc0\xfc\t \xc0\xfd\t \xe0\xfd\t  \xfb\t \x00\xfb\t @\xf9\t  \xfe\t \x00\xff\t \xa0\xfe\t \x80\xfc\t \x80\xf4\t `\xff\t  \xff\t @\xff\t \x00\xfe\t \xa0\xfc\t \xc0\xf9\t \xc0\xfe\t @\xfa\t `\xfe\t \x80\xff\t \xe0\xfe\t \xe0\xff\t  \xfc\t \xe0\xfc\t \xa0\xff\t \xa0/\xc0\x1f \x82/ \xa0\x80/ `\x81/ \x00\x81/ @\x80/ \xc0\x81/  \x81/ \xa0\x81/ @\x82/ \x80\x82/ `\x82/ \xe0\x82/ \xc0\x82/ \x00\x82/ \x00\x83/ `\x83/ @\x83/ \xc0\x80/ \xc0\x83/ \xe0\x83/ \xe0\x81/ \x00\xfd\t  \x84/ @\x84/ `\x84/ \xa0\x82/ \x80\x84/ \x80\x80/ \xe0\x84/ @\x81/ @\x85/ \xe0\x80/ \xa0\x84/  \x80/  \x85/ \xa0\x83/ \x00\x86/ \x80\x86/ @\x86/ \xa0\x85/ `\x80/ \xa0\x86/ \x80\x85/  \x86/ `\x87/ `\x86/ \xc0\x84/  \x87/ \x00\x88/ \x80\x83/ \x00\x85/ \xe0\x86/ \xc0\x85/ \xe0\x85/  \x83/ `\x88/ \xc0\x86/ \x80\x81/ \xa0\x87/ @\x89/ \x80\x88/ \x00\x89/ \xe0\x87/ @\x87/ @\x88/ \x80\x89/ \x00\x84/ \xa0\x88/ \xc0\x88/ \x80\x8a/ \xe0\x88/ `\x8a/ \xe0\x8a/ \xa0\x89/ @\x8a/  \x88/ \x80\x8b/  \x8b/ `\x85/  \x89/ \xa0\x8a/ @\x8b/ `\x89/ \x80\x87/ \x00\x87/ \x00\x8a/ `\x8c/ \xe0\x8b/ '
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'\xb4nw?6\xb7{?p=\x84?F\x1e\xa2?71s?}\xaf*?\x96\x15\xa2?I!b?\xb9af?b.3?N\xc6L?\x17\x18@?\x9c\xed.?\x8f\x1cb?\xff!b?\x8d\xcc\x8c?Y\xff\x7f?s\xc0j?\x8b1\x93?Hq\xf7?/r7?PD\x84?g\x04/?\xf2\xfd\x7f?\xf6\xe0]?\xafcf?\xee\x81\xa8?K\xf6\xee?\x8c,s?@\xa7\x8a?\xb1\xee.?P\xee??\xa2q\xe6?\x9a^7?\xb3\xce\x0c?\xed\xed.?U\xecn?r\x95Y?\x9d\xcbL?\r"\x82?k\x81\x19?\x97\x99Y?\x99\x84H??\x96Y?\tE\x84?\x05\xf3??\xbe\xa6*?^t7?\xaa\x7fH?\x9c\x99*?\x10nU?X\xbb;?_33?^\xb5;?\xfa\x1e\x82?\x19Y\x05@\x98\x93Y?\x81\x99\x19?\x84BD?\xcbvw?2\xdd\xdd?\xc6\x87\x08@2b&?~BU?{\xdc\x9d?\xbd\'Q?\xe9\xcbL?\xd9h&?\x80\x80\xa8?>\x1d\xc2?\x90\x89Y?f\xebn?\xc8RU?\xaa\xed.?\x9aAD?|V\xb5?\x92\x85\xa8?6$s?\x84\xb9;?\xf3t\x97?^\xd6]?\x06\xa5*?\x18\xec\xae?\x1e\xdc\x9d?\x1b\xf9\x7f?\xae\x91\x88?Z\xe8n?h\xe1.?\x8a\xbc;?\xe5i&?Y"\x82?q\x1cs?0\xf0.?\x04\x88\x19?\x89\xa7\xaa?\xe5ww?k\xfdP?\xed\x9bY?\xbb\xe8.?\x14u7?\xa1\x0cQ?\xa2\x99\x19?+\xdd]?{\x8e\x19?\\S&?O\xc7\x8c?\xf0\xe8.?\xb4\x7fH?\xa7_&?\x83\x89H?o\xdb\x1d?\xab+s?EUU?\xafC\xc4?\xe4\x08Q?\xdb\xe8n?\xab\xfd\xbf?\xb4\x1d\xa2?\xae!b?\x1c\xa9\xea?\xc7\xdc]?T!\xa2?"\xb8;?\xe6\x84H?\x0c\xcc\x8c?y\xa9*?\xae\xa5*?\xb7D\x84?\xe0@\xa4?\xbe\xdc\x1d?\xd5\xcc;?\x8f\xd8\x1d?\x0f\x98\xd9?s)3?\x9a\xa9*?\xc1\xd9\x1d?\x9b\xf3]?\xe8\x0f\xf1?\r0\x13@\xcc\nQ?\x89v7?\x9d\t/?p,3?\xb7\x1fb?!\xba\xdb?n\xea\xce?:\xbd{?u.3?\xf6pw?z\xf1.?l\x0cQ?\xe1\xba;?\xb7\xd6;?\xda\x96\x99?H)3?{-s?CED?\x08\x12\xb1?\xf1\x9d*?\xd2\x99\x19?\xf6\x1fb?\x9e\x82H?\x08>D?\xedl\x15?\xc4\xb8;?a\xf0\x7f?b,3?\xd4o7?\xcb\xef.?\x94\x88H?\t\x93Y?8\x93Y?/ b?~23?\xd8N\x15?\xc5#b?\x15\xa4;?x_&?z\xde]?u03?\xdf\xe0\x1d?\x8c\x0b\x80?\x9c\xea\xae?U\xbf\x8c?\xce\rQ?\xb5\r\x91?\x1du\xd7?\x99\xb6;?6\xaa\x8a?d%s?o\xd8\xbd?\x03\xd6]?R\xf6\x7f?\xf4\x86H?\x80!\x82?t\xebn?.\xee??\xd7\x0b/?{\xa9*@\xf4\x97\x99?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S'0\xb2\xc9\x04p\xb1\xc9\x04\x80\\\xde\x04HU\xde\x04HR\xde\x04hY\xde\x04\xc8\\\xde\x04\x00[\xde\x04\xf0^\xde\x04x[\xde\x04\xb0\\\xde\x04\x10W\xde\x04\x88Q\xde\x04(Z\xde\x04\x10]\xde\x04\x80S\xde\x04`X\xde\x04x^\xde\x04\xc8_\xde\x04 _\xde\x04HX\xde\x04\x90U\xde\x04(W\xde\x040X\xde\x04XW\xde\x04\x08Y\xde\x04\x80_\xde\x04(Q\xde\x04H^\xde\x040^\xde\x04 Y\xde\x04\xb0Y\xde\x04xU\xde\x04\xa8^\xde\x04\xc8Y\xde\x04\xa0]\xde\x04 \\\xde\x04\x90[\xde\x048_\xde\x04\xb0_\xde\x04h\\\xde\x04\x18[\xde\x04\x80V\xde\x04X\xea\n\r\xd0\xe1\n\rp\xe4\n\rX\xe1\n\r\xe0\xe6\n\r0\xe8\n\r\x80\xe3\n\r\x10\xe7\n\r\xc0\xee\n\r\xe8\xed\n\rx\xee\n\rX\xe4\n\r\xa8\xe8\n\r8\xe0\n\r\x88\xe7\n\r8\xe9\n\rH\xe8\n\r\x90\xe8\n\r\x18\xe2\n\r\x98\xe3\n\r\xb0\xe0\n\r \xe3\n\r\xa0\xed\n\rH\xe2\n\r \xe0\n\r`\xe5\n\r\xc8\xef\n\r(\xe1\n\rh\xe3\n\r\x08\xe6\n\r\xb8\xe4\n\r@\xe1\n\r\x10\xe1\n\r8\xec\n\r0\xe2\n\r(\xed\n\r\xf0\xe2\n\r\xd8R\xde\x04\x98\\\xde\x04pZ\xde\x04\xb0S\xde\x04\xe8W\xde\x04\x18U\xde\x04\xc0^\xde\x04\x18X\xde\x04X]\xde\x04@Z\xde\x04\xf8Y\xde\x04@]\xde\x04\xa8[\xde\x04\x00R\xde\x048Y\xde\x04\x10Z\xde\x04\x10Q\xde\x04\x88T\xde\x04\xd8X\xde\x04\xc0X\xde\x04\xd0Q\xde\x04(]\xde\x04\xa0Q\xde\x04\xf8V\xde\x04\xd0W\xde\x04\x00X\xde\x04\xc0U\xde\x04\xd8^\xde\x04`U\xde\x04\xf8\\\xde\x04\x88W\xde\x04XZ\xde\x04p]\xde\x04\x98Y\xde\x04pQ\xde\x04\x88]\xde\x040[\xde\x04\xf0X\xde\x04hS\xde\x04\xd8[\xde\x04H[\xde\x04\x90^\xde\x04\x08S\xde\x04h_\xde\x040R\xde\x04\xe0S\xde\x04\x80P\xde\x04\xb8Q\xde\x048P\xde\x04`R\xde\x04\xe0P\xde\x04XT\xde\x04\xe0Y\xde\x04PY\xde\x04PS\xde\x040U\xde\x04\xf8S\xde\x04@Q\xde\x04\x90X\xde\x04\x80Y\xde\x04\xd0T\xde\x04PP\xde\x04\xa0T\xde\x04\x98S\xde\x04\x08V\xde\x04`[\xde\x04\x98V\xde\x04@T\xde\x04\xf0[\xde\x04PV\xde\x04\x08\\\xde\x04\xb8Z\xde\x04\xe0_\xde\x04\xc0[\xde\x04P\\\xde\x04\xf0R\xde\x04hP\xde\x04\xb0P\xde\x04\xf8P\xde\x04\xa8R\xde\x048V\xde\x04@W\xde\x04(T\xde\x04\xc8S\xde\x04xR\xde\x04\xd0]\xde\x04\xe8T\xde\x04pT\xde\x04\xd0Z\xde\x04\xc0R\xde\x04\xe0V\xde\x04 S\xde\x04\x18^\xde\x04XQ\xde\x04\x88Z\xde\x04hV\xde\x04 P\xde\x04xX\xde\x04\x00U\xde\x04 V\xde\x04\x98_\xde\x04\x90R\xde\x04\xe8Q\xde\x04\xe8Z\xde\x04\xa8U\xde\x04\xb8]\xde\x04\xa0W\xde\x04\xd8U\xde\x04\xb0V\xde\x04\xb8T\xde\x04\xc8V\xde\x04\xc8P\xde\x04\xa8X\xde\x04\x18R\xde\x048\\\xde\x04\x08_\xde\x04\x00^\xde\x04`^\xde\x04P_\xde\x04\xa0Z\xde\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6460
sg6371
g6456
sg6385
g6467
sg6380
g6464
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6483
sg6371
g6473
sg6385
g6477
sg6380
g6481
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6494
sg6371
g6490
sg6385
g6501
sg6380
g6498
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6430
sg6371
g6507
sg6385
g6437
sg6380
g6514
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6532
sg6371
g6522
sg6385
g6526
sg6380
g6530
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6543
sg6371
g6539
sg6385
g6550
sg6380
g6547
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6560
sg6371
g6556
sg6385
g6567
sg6380
g6564
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6603
sg6371
g6599
sg6385
g6610
sg6380
g6607
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6620
sg6371
g6616
sg6385
g6627
sg6380
g6624
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6603
sg6371
g6633
sg6385
g6610
sg6380
g6640
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6603
sg6371
g6633
sg6385
g6610
sg6380
g6640
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6678
sg6371
g6674
sg6385
g6685
sg6380
g6682
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6543
sg6371
g6691
sg6385
g6550
sg6380
g6698
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6678
sg6371
g6706
sg6385
g6685
sg6380
g6713
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6460
sg6371
g6456
sg6385
g6467
sg6380
g6464
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6738
sg6371
g6734
sg6385
g6745
sg6380
g6742
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6755
sg6371
g6751
sg6385
g6762
sg6380
g6759
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6396
sg6371
g6768
sg6385
g6403
sg6380
g6775
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6787
sg6371
g6783
sg6385
g6794
sg6380
g6791
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6804
sg6371
g6800
sg6385
g6811
sg6380
g6808
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6821
sg6371
g6817
sg6385
g6828
sg6380
g6825
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6851
sg6371
g6847
sg6385
g6858
sg6380
g6855
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6483
sg6371
g6864
sg6385
g6477
sg6380
g6871
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6787
sg6371
g6783
sg6385
g6794
sg6380
g6791
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6483
sg6371
g6864
sg6385
g6477
sg6380
g6871
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6460
sg6371
g6456
sg6385
g6467
sg6380
g6464
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6430
sg6371
g6507
sg6385
g6437
sg6380
g6514
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6603
sg6371
g6599
sg6385
g6610
sg6380
g6607
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6787
sg6371
g6783
sg6385
g6794
sg6380
g6791
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6543
sg6371
g6691
sg6385
g6550
sg6380
g6698
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6620
sg6371
g6970
sg6385
g6627
sg6380
g6977
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g6532
sg6371
g6998
sg6385
g6526
sg6380
g7005
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g6821
sg6371
g7013
sg6385
g6828
sg6380
g7020
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g6738
sg6371
g7028
sg6385
g6745
sg6380
g7035
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g6413
sg6371
g7056
sg6385
g6420
sg6380
g7063
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6755
sg6371
g6751
sg6385
g6762
sg6380
g6759
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g6543
sg6371
g6539
sg6385
g6550
sg6380
g6547
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6620
sg6371
g6970
sg6385
g6627
sg6380
g6977
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6413
sg6371
g7056
sg6385
g6420
sg6380
g7063
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g6787
sg6371
g7123
sg6385
g6794
sg6380
g7130
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6738
sg6371
g7028
sg6385
g6745
sg6380
g7035
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6787
sg6371
g7123
sg6385
g6794
sg6380
g7130
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6738
sg6371
g7028
sg6385
g6745
sg6380
g7035
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6560
sg6371
g6556
sg6385
g6567
sg6380
g6564
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6787
sg6371
g7123
sg6385
g6794
sg6380
g7130
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g6620
sg6371
g6616
sg6385
g6627
sg6380
g6624
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g6821
sg6371
g7013
sg6385
g6828
sg6380
g7020
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g6755
sg6371
g7229
sg6385
g6762
sg6380
g7236
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g6738
sg6371
g6734
sg6385
g6745
sg6380
g6742
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g6494
sg6371
g6490
sg6385
g6501
sg6380
g6498
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g6738
sg6371
g6734
sg6385
g6745
sg6380
g6742
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6851
sg6371
g7283
sg6385
g6858
sg6380
g7290
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g6603
sg6371
g6599
sg6385
g6610
sg6380
g6607
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g6678
sg6371
g6674
sg6385
g6685
sg6380
g6682
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g7328
sg6371
g7324
sg6385
g7335
sg6380
g7332
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6851
sg6371
g7283
sg6385
g6858
sg6380
g7290
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g6494
sg6371
g7367
sg6385
g6501
sg6380
g7374
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g6787
sg6371
g7123
sg6385
g6794
sg6380
g7130
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g7328
sg6371
g7395
sg6385
g7335
sg6380
g7402
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g6430
sg6371
g6507
sg6385
g6437
sg6380
g6514
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g6376
sg6371
g7423
sg6385
g6386
sg6380
g7430
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g6755
sg6371
g7229
sg6385
g6762
sg6380
g7236
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g6376
sg6371
g7423
sg6385
g6386
sg6380
g7430
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6460
sg6371
g7464
sg6385
g6467
sg6380
g7471
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g6804
sg6371
g6800
sg6385
g6811
sg6380
g6808
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6494
sg6371
g6490
sg6385
g6501
sg6380
g6498
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6543
sg6371
g6539
sg6385
g6550
sg6380
g6547
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g7328
sg6371
g7395
sg6385
g7335
sg6380
g7402
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g6396
sg6371
g6768
sg6385
g6403
sg6380
g6775
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g6804
sg6371
g7557
sg6385
g6811
sg6380
g7564
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6603
sg6371
g6599
sg6385
g6610
sg6380
g6607
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6560
sg6371
g6556
sg6385
g6567
sg6380
g6564
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6532
sg6371
g6998
sg6385
g6526
sg6380
g7005
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g6678
sg6371
g6706
sg6385
g6685
sg6380
g6713
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g6413
sg6371
g7056
sg6385
g6420
sg6380
g7063
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6430
sg6371
g6507
sg6385
g6437
sg6380
g6514
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g6787
sg6371
g6783
sg6385
g6794
sg6380
g6791
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g6483
sg6371
g6473
sg6385
g6477
sg6380
g6481
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g7328
sg6371
g7395
sg6385
g7335
sg6380
g7402
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6483
sg6371
g6473
sg6385
g6477
sg6380
g6481
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g6560
sg6371
g7715
sg6385
g6567
sg6380
g7722
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g6678
sg6371
g6706
sg6385
g6685
sg6380
g6713
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g6483
sg6371
g6864
sg6385
g6477
sg6380
g6871
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6603
sg6371
g6633
sg6385
g6610
sg6380
g6640
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6851
sg6371
g7283
sg6385
g6858
sg6380
g7290
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6532
sg6371
g6522
sg6385
g6526
sg6380
g6530
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g6494
sg6371
g7367
sg6385
g6501
sg6380
g7374
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g6560
sg6371
g7715
sg6385
g6567
sg6380
g7722
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g6678
sg6371
g6674
sg6385
g6685
sg6380
g6682
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g6483
sg6371
g6473
sg6385
g6477
sg6380
g6481
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g6678
sg6371
g6674
sg6385
g6685
sg6380
g6682
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g6396
sg6371
g6768
sg6385
g6403
sg6380
g6775
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6543
sg6371
g6691
sg6385
g6550
sg6380
g6698
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g7328
sg6371
g7395
sg6385
g7335
sg6380
g7402
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g6821
sg6371
g7013
sg6385
g6828
sg6380
g7020
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g6543
sg6371
g6539
sg6385
g6550
sg6380
g6547
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g6804
sg6371
g7557
sg6385
g6811
sg6380
g7564
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g6620
sg6371
g6970
sg6385
g6627
sg6380
g6977
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g6494
sg6371
g6490
sg6385
g6501
sg6380
g6498
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6804
sg6371
g7557
sg6385
g6811
sg6380
g7564
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g6678
sg6371
g6674
sg6385
g6685
sg6380
g6682
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6460
sg6371
g7464
sg6385
g6467
sg6380
g7471
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6620
sg6371
g6616
sg6385
g6627
sg6380
g6624
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g6678
sg6371
g6706
sg6385
g6685
sg6380
g6713
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6532
sg6371
g6998
sg6385
g6526
sg6380
g7005
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g6821
sg6371
g6817
sg6385
g6828
sg6380
g6825
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g6560
sg6371
g7715
sg6385
g6567
sg6380
g7722
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g6787
sg6371
g7123
sg6385
g6794
sg6380
g7130
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g6738
sg6371
g6734
sg6385
g6745
sg6380
g6742
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g7328
sg6371
g7324
sg6385
g7335
sg6380
g7332
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g6620
sg6371
g6616
sg6385
g6627
sg6380
g6624
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g6804
sg6371
g6800
sg6385
g6811
sg6380
g6808
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g6460
sg6371
g7464
sg6385
g6467
sg6380
g7471
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g7328
sg6371
g7395
sg6385
g7335
sg6380
g7402
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g6851
sg6371
g7283
sg6385
g6858
sg6380
g7290
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g6678
sg6371
g6706
sg6385
g6685
sg6380
g6713
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g6532
sg6371
g6522
sg6385
g6526
sg6380
g6530
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g6560
sg6371
g7715
sg6385
g6567
sg6380
g7722
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6532
sg6371
g6522
sg6385
g6526
sg6380
g6530
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g6851
sg6371
g6847
sg6385
g6858
sg6380
g6855
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g6738
sg6371
g6734
sg6385
g6745
sg6380
g6742
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g6804
sg6371
g7557
sg6385
g6811
sg6380
g7564
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6460
sg6371
g7464
sg6385
g6467
sg6380
g7471
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g6620
sg6371
g6970
sg6385
g6627
sg6380
g6977
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g6396
sg6371
g6768
sg6385
g6403
sg6380
g6775
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g6755
sg6371
g7229
sg6385
g6762
sg6380
g7236
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6494
sg6371
g7367
sg6385
g6501
sg6380
g7374
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g6413
sg6371
g7056
sg6385
g6420
sg6380
g7063
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g6460
sg6371
g7464
sg6385
g6467
sg6380
g7471
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g6560
sg6371
g6556
sg6385
g6567
sg6380
g6564
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g6532
sg6371
g6522
sg6385
g6526
sg6380
g6530
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g6620
sg6371
g6970
sg6385
g6627
sg6380
g6977
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g6603
sg6371
g6633
sg6385
g6610
sg6380
g6640
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g6543
sg6371
g6691
sg6385
g6550
sg6380
g6698
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g6851
sg6371
g6847
sg6385
g6858
sg6380
g6855
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6821
sg6371
g6817
sg6385
g6828
sg6380
g6825
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6396
sg6371
g6768
sg6385
g6403
sg6380
g6775
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g7328
sg6371
g7324
sg6385
g7335
sg6380
g7332
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6804
sg6371
g6800
sg6385
g6811
sg6380
g6808
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6494
sg6371
g6490
sg6385
g6501
sg6380
g6498
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g6821
sg6371
g6817
sg6385
g6828
sg6380
g6825
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g6804
sg6371
g7557
sg6385
g6811
sg6380
g7564
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g6603
sg6371
g6599
sg6385
g6610
sg6380
g6607
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g7328
sg6371
g7324
sg6385
g7335
sg6380
g7332
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g6821
sg6371
g6817
sg6385
g6828
sg6380
g6825
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6755
sg6371
g6751
sg6385
g6762
sg6380
g6759
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6821
sg6371
g7013
sg6385
g6828
sg6380
g7020
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g7328
sg6371
g7324
sg6385
g7335
sg6380
g7332
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6430
sg6371
g6507
sg6385
g6437
sg6380
g6514
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g6851
sg6371
g7283
sg6385
g6858
sg6380
g7290
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g6821
sg6371
g7013
sg6385
g6828
sg6380
g7020
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6620
sg6371
g6616
sg6385
g6627
sg6380
g6624
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g6755
sg6371
g6751
sg6385
g6762
sg6380
g6759
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6543
sg6371
g6539
sg6385
g6550
sg6380
g6547
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g6532
sg6371
g6998
sg6385
g6526
sg6380
g7005
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6376
sg6371
g7423
sg6385
g6386
sg6380
g7430
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g6483
sg6371
g6864
sg6385
g6477
sg6380
g6871
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6376
sg6371
g7423
sg6385
g6386
sg6380
g7430
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6851
sg6371
g6847
sg6385
g6858
sg6380
g6855
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g6560
sg6371
g7715
sg6385
g6567
sg6380
g7722
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6532
sg6371
g6998
sg6385
g6526
sg6380
g7005
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6738
sg6371
g7028
sg6385
g6745
sg6380
g7035
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g6376
sg6371
g7423
sg6385
g6386
sg6380
g7430
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g6483
sg6371
g6864
sg6385
g6477
sg6380
g6871
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6804
sg6371
g6800
sg6385
g6811
sg6380
g6808
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6494
sg6371
g7367
sg6385
g6501
sg6380
g7374
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6460
sg6371
g6456
sg6385
g6467
sg6380
g6464
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g6755
sg6371
g6751
sg6385
g6762
sg6380
g6759
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g6738
sg6371
g7028
sg6385
g6745
sg6380
g7035
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g6413
sg6371
g7056
sg6385
g6420
sg6380
g7063
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g6755
sg6371
g7229
sg6385
g6762
sg6380
g7236
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g6494
sg6371
g7367
sg6385
g6501
sg6380
g7374
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6603
sg6371
g6633
sg6385
g6610
sg6380
g6640
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g6851
sg6371
g6847
sg6385
g6858
sg6380
g6855
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6560
sg6371
g6556
sg6385
g6567
sg6380
g6564
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g6460
sg6371
g6456
sg6385
g6467
sg6380
g6464
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6483
sg6371
g6473
sg6385
g6477
sg6380
g6481
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g6755
sg6371
g7229
sg6385
g6762
sg6380
g7236
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g6787
sg6371
g6783
sg6385
g6794
sg6380
g6791
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6543
sg6371
g6691
sg6385
g6550
sg6380
g6698
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.