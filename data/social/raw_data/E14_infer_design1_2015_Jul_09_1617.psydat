ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E14_infer_design1_2015_Jul_09_1617
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vleft
p57
sVcontacts
p58
Vn
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x85\xa0\xf6\\\x03\x00N@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_09_1617
p67
sVparticipant
p68
VE14
p69
sVglasses
p70
Vn
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F1.3500939970217587
sg14
S'space'
p89
sg59
g63
sg58
Vn
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp90
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F17.766345417523553
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P8\x00'
tbsg70
Vn
sa(dp96
g64
g65
sg20
F33.767000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F0.83999999999999986
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS'$\x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V48-twix.png
p103
sg21
F1.1000000000000001
sg70
Vn
sa(dp104
g64
g65
sg20
F3.734
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F0.67999999999999927
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'\x0e\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p110
sg21
F1.3999999999999999
sg70
Vn
sa(dp111
g64
g65
sg20
F4.0839999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F0.77999999999999914
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'\x1b\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p117
sg21
F1.7
sg70
Vn
sa(dp118
g64
g65
sg20
F2.4340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F0.29999999999999916
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'\x1d\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V40-sardines.png
p124
sg21
F1.3
sg70
Vn
sa(dp125
g64
g65
sg20
F3.4510000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F0.55999999999999961
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S'\x15\x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V29-beans.png
p131
sg21
F1.1000000000000001
sg70
Vn
sa(dp132
g64
g65
sg20
F3.7010000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F0.67999999999999927
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S'\x01\x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p138
sg21
F1.6000000000000001
sg70
Vn
sa(dp139
g64
g65
sg20
F18.466999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F0.99999999999999956
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'\x17\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p145
sg21
F1.6000000000000001
sg70
Vn
sa(dp146
g64
g65
sg20
F2.7509999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F0.059999999999998943
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\x02\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p152
sg21
F1.5
sg70
Vn
sa(dp153
g64
g65
sg20
F1.784
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F0.059999999999999387
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'!\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V44-crunch.png
p159
sg21
F1
sg70
Vn
sa(dp160
g64
g65
sg20
F3.4169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'&\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V50-polo.png
p166
sg21
F1.2
sg70
Vn
sa(dp167
g64
g65
sg20
F13.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F1.4399999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S'\x06\x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V7-olives.png
p173
sg21
F2
sg70
Vn
sa(dp174
g64
g65
sg20
F2.984
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F0.619999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S'\x11\x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p180
sg21
F1.7
sg70
Vn
sa(dp181
g64
g65
sg20
F3.101
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F0.7599999999999989
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\x04\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p187
sg21
F1.8999999999999999
sg70
Vn
sa(dp188
g64
g65
sg20
F5.0670000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F1
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'\x1c\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p194
sg21
F1.1000000000000001
sg70
Vn
sa(dp195
g64
g65
sg20
F3.0169999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F0.17999999999999872
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'\n\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p201
sg21
F1.8
sg70
Vn
sa(dp202
g64
g65
sg20
F3.0670000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F0.71999999999999975
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'\x12\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p208
sg21
F1.1000000000000001
sg70
Vn
sa(dp209
g64
g65
sg20
F4.4509999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F1.0199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'\x00\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p215
sg21
F1.8
sg70
Vn
sa(dp216
g64
g65
sg20
F9.5009999999999994
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F0.6599999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S'\x1f\x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p222
sg21
F1
sg70
Vn
sa(dp223
g64
g65
sg20
F1.8009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F0.21999999999999892
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'\r\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p229
sg21
F1.5
sg70
Vn
sa(dp230
g64
g65
sg20
F1.534
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F0.21999999999999892
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S'%\x00\x00\x00'
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p236
sg21
F1.3999999999999999
sg70
Vn
sa(dp237
g64
g65
sg20
F2.1840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F0.31999999999999873
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'\x07\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p243
sg21
F1.7
sg70
Vn
sa(dp244
g64
g65
sg20
F2.0670000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F0.13999999999999851
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'\x05\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p250
sg21
F1.8999999999999999
sg70
Vn
sa(dp251
g64
g65
sg20
F4.601
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F0.79999999999999938
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S'\x0f\x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p257
sg21
F1.5
sg70
Vn
sa(dp258
g64
g65
sg20
F2.0009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F0.25999999999999845
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S'\x0c\x00\x00\x00'
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V18-mms.png
p264
sg21
F1.8999999999999999
sg70
Vn
sa(dp265
g64
g65
sg20
F1.417
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F0.25999999999999934
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'\x10\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V22-daim.png
p271
sg21
F1.1000000000000001
sg70
Vn
sa(dp272
g64
g65
sg20
F1.9339999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F0.27999999999999914
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'\x18\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p278
sg21
F1.3
sg70
Vn
sa(dp279
g64
g65
sg20
F2.851
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F0.23999999999999869
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S' \x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p285
sg21
F1.7
sg70
Vn
sa(dp286
g64
g65
sg20
F1.5009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F0.1199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S"'\x00\x00\x00"
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V51-mars.png
p292
sg21
F1.1000000000000001
sg70
Vn
sa(dp293
g64
g65
sg20
F3.3340000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F0.41999999999999882
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'\x1e\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p299
sg21
F1.8
sg70
Vn
sa(dp300
g64
g65
sg20
F3.4670000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F1.0199999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'#\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p306
sg21
F1.3
sg70
Vn
sa(dp307
g64
g65
sg20
F2.3010000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F0.19999999999999871
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'\x16\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p313
sg21
F1.7
sg70
Vn
sa(dp314
g64
g65
sg20
F2.0840000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F0.1599999999999985
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'\x19\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p320
sg21
F1.8999999999999999
sg70
Vn
sa(dp321
g64
g65
sg20
F4.5010000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F0.39999999999999947
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S'\x0b\x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p327
sg21
F1.1000000000000001
sg70
Vn
sa(dp328
g64
g65
sg20
F6.984
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F0.69999999999999885
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'\t\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p334
sg21
F1.8999999999999999
sg70
Vn
sa(dp335
g64
g65
sg20
F1.9670000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F0.17999999999999872
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S'\x08\x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p341
sg21
F1.8
sg70
Vn
sa(dp342
g64
g65
sg20
F3.4340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F0.23999999999999869
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S'\x03\x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V4-corn.png
p348
sg21
F1.7
sg70
Vn
sa(dp349
g64
g65
sg20
F2.2010000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F0.23999999999999846
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'\x1a\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V35-raisins.png
p355
sg21
F1.8999999999999999
sg70
Vn
sa(dp356
g64
g65
sg20
F5.5170000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F0.2199999999999987
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'"\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p362
sg21
F1.7
sg70
Vn
sa(dp363
g64
g65
sg20
F1.7509999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F0.079999999999998947
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S'\x14\x00\x00\x00'
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p369
sg21
F1.6000000000000001
sg70
Vn
sa(dp370
g64
g65
sg20
F2.3010000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F0.53999999999999937
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'\x13\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p376
sg21
F1.3
sg70
Vn
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F6.583439532576449
sg58
Vn
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vn
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p381
sg26
F2.8999999999999999
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'30-spaghetti_hoops.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'right'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F8.416628035800386
sg27
F8.1669999999999998
sg70
Vn
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'40-sardines.png'
p390
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'5-pineapple.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'right'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F1.7333863046624174
sg27
F0.98399999999999999
sg70
Vn
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p399
sg26
F3.4000000000000004
sg28
F3
sg59
g63
sg58
Vn
sg81
S'18-mms.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'left'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F8.5666800092840276
sg27
F0.96699999999999997
sg70
Vn
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'50-polo.png'
p408
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'48-twix.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'right'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F1.2667283049922844
sg27
F1.0169999999999999
sg70
Vn
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p417
sg26
F4.2000000000000011
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'8-liquorice_catherine_wheels.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'left'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F3.1337637182332401
sg27
F0.66700000000000004
sg70
Vn
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p426
sg26
F2.9999999999999996
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'16-skips_prawn.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'right'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F9.499861442065594
sg27
F2.5840000000000001
sg70
Vn
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'48-twix.png'
p435
sg26
F5.9999999999999973
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'50-polo.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'left'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F0.8502131682507752
sg27
F0.91700000000000004
sg70
Vn
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'18-mms.png'
p444
sg26
F5.2000000000000002
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'43-mrporky_pork_crackles_redo.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'right'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F3.3001526988300611
sg27
F1.9510000000000001
sg70
Vn
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p453
sg26
F5.9999999999999964
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'1-treacle_cookies.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'left'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F1.066880148522614
sg27
F0.85099999999999998
sg70
Vn
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p462
sg26
F5.3999999999999995
sg28
F4
sg59
g63
sg58
Vn
sg81
S'36-fig_rolls.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'right'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F1.4667076068290044
sg27
F0.81699999999999995
sg70
Vn
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'25-kitkat.png'
p471
sg26
F5.6999999999999984
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'31-hobnobs.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'left'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F3.6500984445592621
sg27
F0.70099999999999996
sg70
Vn
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p480
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'38-maltesers.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'right'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F0.84977326105581596
sg27
F0.65100000000000002
sg70
Vn
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p489
sg26
F4.0000000000000009
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'19-caramello_redo.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'left'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F4.0501152083597844
sg27
F2.3170000000000002
sg70
Vn
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p498
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'45-chewy_nougat_redo.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'left'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F1.9001710021620966
sg27
F0.65100000000000002
sg70
Vn
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p507
sg26
F5.6999999999999993
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'33-ambrosia_rice.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'right'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F3.050100953427318
sg27
F0.86699999999999999
sg70
Vn
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'31-hobnobs.png'
p516
sg26
F4.9000000000000004
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'25-kitkat.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'right'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F1.3000474974323879
sg27
F1.3169999999999999
sg70
Vn
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'22-daim.png'
p525
sg26
F5.9999999999999973
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'7-olives.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'right'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F1.3667163878708379
sg27
F0.61699999999999999
sg70
Vn
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p534
sg26
F3.9000000000000008
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'23-crunchie_redo.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'left'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F1.1500260295033513
sg27
F2.5169999999999999
sg70
Vn
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'7-olives.png'
p543
sg26
F5.9999999999999982
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'22-daim.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'left'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F0.80006802453499404
sg27
F0.78400000000000003
sg70
Vn
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p552
sg26
F3.8999999999999999
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'44-crunch.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'left'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F2.3170735879502899
sg27
F1.034
sg70
Vn
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'35-raisins.png'
p561
sg26
F3.1999999999999997
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'49-yorkie.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'left'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F6.7505218730511842
sg27
F2.1339999999999999
sg70
Vn
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'51-mars.png'
p570
sg26
F2.6999999999999993
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'27-hartleys_raspberries_jelly.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'left'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F1.950069820657518
sg27
F1.5840000000000001
sg70
Vn
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p579
sg26
F4.9000000000000021
sg28
F3
sg59
g63
sg58
Vn
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'left'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F1.1001180878556625
sg27
F3.851
sg70
Vn
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'46-pistachios.png'
p588
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'29-beans.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'left'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F0.85005750439449912
sg27
F0.71699999999999997
sg70
Vn
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p597
sg26
F5.4999999999999991
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'51-mars.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'right'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F0.73351545433979481
sg27
F1.3839999999999999
sg70
Vn
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p606
sg26
F5.1000000000000005
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'41-peanuts_redo.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'right'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F1.0333870459180616
sg27
F0.76700000000000002
sg70
Vn
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'29-beans.png'
p615
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'46-pistachios.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'right'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F0.85008088248287095
sg27
F1.117
sg70
Vn
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p624
sg26
F5.5999999999999988
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'2-steamed_puddings.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'right'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F5.783165381726576
sg27
F1.3839999999999999
sg70
Vn
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p633
sg26
F5.4999999999999991
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'21-nakd_banana_crunch.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'right'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F4.1501873953311588
sg27
F0.81699999999999995
sg70
Vn
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p642
sg26
F5.4000000000000004
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'17-jacobs_mini_cheddars_redo.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'right'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F1.6000536555620783
sg27
F2.0670000000000002
sg70
Vn
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p651
sg26
F4.4000000000000004
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'3-ellas_strawberries_apples.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'left'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F0.85019178585207555
sg27
F1.917
sg70
Vn
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p660
sg26
F4.2000000000000002
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'4-corn.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'right'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F3.2667052120013977
sg27
F0.96699999999999997
sg70
Vn
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p669
sg26
F4.9000000000000012
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'20-fruit_pastilles.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'left'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F1.6669018730426615
sg27
F1.9510000000000001
sg70
Vn
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p678
sg26
F4.7000000000000011
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'42-mrkipling_lemon_slices.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'left'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F1.8500395431801735
sg27
F1.2010000000000001
sg70
Vn
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'44-crunch.png'
p687
sg26
F3.3999999999999999
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'26-walkers_smoky_bacon.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'right'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F1.1333742734968837
sg27
F0.55100000000000005
sg70
Vn
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'49-yorkie.png'
p696
sg26
F4.0000000000000009
sg28
F3
sg59
g63
sg58
Vn
sg81
S'35-raisins.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'right'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F1.1667068655733601
sg27
F2.117
sg70
Vn
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'5-pineapple.png'
p705
sg26
F5.0000000000000009
sg28
F4
sg59
g63
sg58
Vn
sg81
S'40-sardines.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'left'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F1.4000675113566103
sg27
F3.867
sg70
Vn
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'38-maltesers.png'
p714
sg26
F5.0000000000000018
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'6-sour_patch_kids.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'left'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F0.68318955809081672
sg27
F1.5509999999999999
sg70
Vn
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'4-corn.png'
p723
sg26
F5.3999999999999995
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'10-bounty_redo.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'left'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F0.8333974805282196
sg27
F1.0669999999999999
sg70
Vn
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p732
sg26
F5.0000000000000018
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'13-mccoys_steak_crisps.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'right'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F0.66687592906600912
sg27
F1.101
sg70
Vn
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vn
sg59
g63
sg30
F260.49427265350823
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp741
g64
g65
sg56
g57
sg58
Vn
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F1.4002371450442297
sg66
g67
sg68
g69
sg70
Vn
sa(dp743
g64
g65
sg82
S'11-snickers.png'
p744
sg83
S'54-frubes_yogurt.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'54-frubes_yogurt.png'
p749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\t\x10\x1e\x1d\x01@P'
tRp754
sa(dp755
g64
g65
sg82
S'53-cheestrings.png'
p756
sg83
S'53-cheestrings.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'47-picnic.png'
p761
sg33
g761
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\t\x10\x1e%\n\x96\xf0'
tRp765
sa(dp766
g64
g65
sg82
S'52-aero_mousse.png'
p767
sg83
S'14-discos_salt_vinegar.png'
p768
sg56
g57
sS'practice_loop.thisN'
p769
I2
sS'practice_loop.thisTrialN'
p770
I2
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p771
I0
sg84
S'14-discos_salt_vinegar.png'
p772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p773
sS'practice_loop.thisIndex'
p774
g60
(g99
S'\x02\x00\x00\x00'
tRp775
sg34
g753
(S'\x07\xdf\x07\t\x10\x1e,\n\xa6\x90'
tRp776
sa(dp777
g64
g65
sg82
g756
sg83
S'47-picnic.png'
p778
sg56
g57
sS'practice_loop.thisN'
p779
I3
sS'practice_loop.thisTrialN'
p780
I3
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p781
I0
sg84
g761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p782
sS'practice_loop.thisIndex'
p783
g60
(g99
S'\x03\x00\x00\x00'
tRp784
sg34
g753
(S'\x07\xdf\x07\t\x10\x1e4\x02\xd6\x90'
tRp785
sa(dp786
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p787
sg83
S'9-yu_mango_pieces.png'
p788
sg56
g57
sS'practice_loop.thisN'
p789
I4
sS'practice_loop.thisTrialN'
p790
I4
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p791
I0
sg84
S'9-yu_mango_pieces.png'
p792
sg33
g787
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p793
sS'practice_loop.thisIndex'
p794
g60
(g99
S'\x04\x00\x00\x00'
tRp795
sg34
g753
(S'\x07\xdf\x07\t\x10\x1e;\x08`\x88'
tRp796
sa(dp797
g64
g65
sg82
S'12-topic.png'
p798
sg83
S'12-topic.png'
p799
sg56
g57
sS'practice_loop.thisN'
p800
I5
sS'practice_loop.thisTrialN'
p801
I5
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p802
I0
sg84
S'39-mackerel.png'
p803
sg33
g798
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p804
sS'practice_loop.thisIndex'
p805
g60
(g99
S'\x05\x00\x00\x00'
tRp806
sg34
g753
(S'\x07\xdf\x07\t\x10\x1f\x06\x01O\xf0'
tRp807
sa(dp808
g64
g65
sg82
S'15-walnut_whip.png'
p809
sg83
S'28-maple_pecan.png'
p810
sg56
g57
sS'practice_loop.thisN'
p811
I6
sS'practice_loop.thisTrialN'
p812
I6
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p813
I0
sg84
S'28-maple_pecan.png'
p814
sg33
g809
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p815
sS'practice_loop.thisIndex'
p816
g60
(g99
S'\x06\x00\x00\x00'
tRp817
sg34
g753
(S'\x07\xdf\x07\t\x10\x1f\x0c\t\xbc0'
tRp818
sa(dp819
g64
g65
sg82
g744
sg83
S'11-snickers.png'
p820
sg56
g57
sS'practice_loop.thisN'
p821
I7
sS'practice_loop.thisTrialN'
p822
I7
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p823
I0
sg84
g749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p824
sS'practice_loop.thisIndex'
p825
g60
(g99
S'\x07\x00\x00\x00'
tRp826
sg34
g753
(S'\x07\xdf\x07\t\x10\x1f\x14\x08X\xb8'
tRp827
sa(dp828
g64
g65
sg82
S'32-hovis_crackers.png'
p829
sg83
S'32-hovis_crackers.png'
p830
sg56
g57
sS'practice_loop.thisN'
p831
I8
sS'practice_loop.thisTrialN'
p832
I8
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p833
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p834
sg33
g829
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p835
sS'practice_loop.thisIndex'
p836
g60
(g99
S'\x08\x00\x00\x00'
tRp837
sg34
g753
(S'\x07\xdf\x07\t\x10\x1f\x1b\x0f\x13`'
tRp838
sa(dp839
g64
g65
sg82
g798
sg83
S'39-mackerel.png'
p840
sg56
g57
sS'practice_loop.thisN'
p841
I9
sS'practice_loop.thisTrialN'
p842
I9
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p843
I0
sg84
g803
sg33
g798
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p844
sS'practice_loop.thisIndex'
p845
g60
(g99
S'\t\x00\x00\x00'
tRp846
sg34
g753
(S'\x07\xdf\x07\t\x10\x1f#\x01\x8ep'
tRp847
sa(dp848
g64
g65
sg82
g787
sg83
S'37-nakd_cashew_cookie.png'
p849
sg56
g57
sS'practice_loop.thisN'
p850
I10
sS'practice_loop.thisTrialN'
p851
I10
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p852
I0
sg84
g792
sg33
g787
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S'\x07\xdf\x07\t\x10\x1f)\t\xfa\xb0'
tRp856
sa(dp857
g64
g65
sg82
g829
sg83
S'24-food_doctor_apple_walnut_bar.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g834
sg33
g829
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S'\x07\xdf\x07\t\x10\x1f2\x03S\x90'
tRp865
sa(dp866
g64
g65
sg82
g809
sg83
S'15-walnut_whip.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g814
sg33
g809
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S'\x07\xdf\x07\t\x10\x1f8\x0f\x17H'
tRp874
sa(dp875
g64
g65
sg82
g767
sg83
S'52-aero_mousse.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S'\x07\xdf\x07\t\x10 \x04\x0ekh'
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F255.26041593609989
sg66
g67
sg68
g69
sg70
Vn
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vn
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'46-pistachios.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'left'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'46-pistachios.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'29-beans.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
S'29-beans.png'
p908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p909
I0
sS'img_wrong'
p910
g900
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vn
sS'block_loop.thisTrialN'
p912
I0
sg39
F1.699793417526962
sg34
g753
(S'\x07\xdf\x07\t\x10&\x0b\x03S\x90'
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'7-olives.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'left'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'22-daim.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'22-daim.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p926
I0
sg910
S'7-olives.png'
p927
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vn
sS'block_loop.thisTrialN'
p929
I0
sg39
F0.94988536183882388
sg34
g753
(S'\x07\xdf\x07\t\x10&\x11\x0e[\xc8'
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'40-sardines.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'right'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'5-pineapple.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'5-pineapple.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p943
I0
sg910
S'40-sardines.png'
p944
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vn
sS'block_loop.thisTrialN'
p946
I0
sg39
F1.6166515279292071
sg34
g753
(S'\x07\xdf\x07\t\x10&\x17\x0e8\xa0'
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
S'27-hartleys_raspberries_jelly.png'
p950
sS'block_loop.thisIndex'
p951
g889
sg38
S'right'
p952
sg59
g63
sS'trial_loop.thisN'
p953
I3
sg33
S'51-mars.png'
p954
sg64
g65
sS'trial_loop.thisIndex'
p955
g60
(g99
S'\x03\x00\x00\x00'
tRp956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p957
I0
sg904
S'51-mars.png'
p958
sS'block_loop.thisRepN'
p959
I0
sg907
S'27-hartleys_raspberries_jelly.png'
p960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p961
I0
sg910
g954
sg55
g11
sS'block_loop.thisTrial'
p962
Nsg70
Vn
sS'block_loop.thisTrialN'
p963
I0
sg39
F1.1498985904181609
sg34
g753
(S'\x07\xdf\x07\t\x10&\x1e\x08\xcd\xe8'
tRp964
sa(dp965
S'trial_loop.thisTrialN'
p966
I4
sg895
S'6-sour_patch_kids.png'
p967
sS'block_loop.thisIndex'
p968
g889
sg38
S'right'
p969
sg59
g63
sS'trial_loop.thisN'
p970
I4
sg33
S'38-maltesers.png'
p971
sg64
g65
sS'trial_loop.thisIndex'
p972
g60
(g99
S'\x04\x00\x00\x00'
tRp973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p974
I0
sg904
S'38-maltesers.png'
p975
sS'block_loop.thisRepN'
p976
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p977
I0
sg910
S'6-sour_patch_kids.png'
p978
sg55
g11
sS'block_loop.thisTrial'
p979
Nsg70
Vn
sS'block_loop.thisTrialN'
p980
I0
sg39
F0.83300204871557071
sg34
g753
(S'\x07\xdf\x07\t\x10&$\x0b\xbf\xd0'
tRp981
sa(dp982
S'trial_loop.thisTrialN'
p983
I5
sg895
S'17-jacobs_mini_cheddars_redo.png'
p984
sS'block_loop.thisIndex'
p985
g889
sg38
S'left'
p986
sg59
g63
sS'trial_loop.thisN'
p987
I5
sg33
S'17-jacobs_mini_cheddars_redo.png'
p988
sg64
g65
sS'trial_loop.thisIndex'
p989
g60
(g99
S'\x05\x00\x00\x00'
tRp990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p991
I0
sg904
S'8-liquorice_catherine_wheels.png'
p992
sS'block_loop.thisRepN'
p993
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p994
I0
sg910
S'8-liquorice_catherine_wheels.png'
p995
sg55
g11
sS'block_loop.thisTrial'
p996
Nsg70
Vn
sS'block_loop.thisTrialN'
p997
I0
sg39
F2.4836718309452408
sg34
g753
(S'\x07\xdf\x07\t\x10&*\t\xb4`'
tRp998
sa(dp999
S'trial_loop.thisTrialN'
p1000
I6
sg895
S'19-caramello_redo.png'
p1001
sS'block_loop.thisIndex'
p1002
g889
sg38
S'right'
p1003
sg59
g63
sS'trial_loop.thisN'
p1004
I6
sg33
S'19-caramello_redo.png'
p1005
sg64
g65
sS'trial_loop.thisIndex'
p1006
g60
(g99
S'\x06\x00\x00\x00'
tRp1007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1008
I0
sg904
S'30-spaghetti_hoops.png'
p1009
sS'block_loop.thisRepN'
p1010
I0
sg907
S'30-spaghetti_hoops.png'
p1011
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1012
I0
sg910
g1005
sg55
g11
sS'block_loop.thisTrial'
p1013
Nsg70
Vn
sS'block_loop.thisTrialN'
p1014
I0
sg39
F1.4666602804572904
sg34
g753
(S'\x07\xdf\x07\t\x10&2\x02"\xe0'
tRp1015
sa(dp1016
S'trial_loop.thisTrialN'
p1017
I7
sg895
S'36-fig_rolls.png'
p1018
sS'block_loop.thisIndex'
p1019
g889
sg38
S'left'
p1020
sg59
g63
sS'trial_loop.thisN'
p1021
I7
sg33
S'36-fig_rolls.png'
p1022
sg64
g65
sS'trial_loop.thisIndex'
p1023
g60
(g99
S'\x07\x00\x00\x00'
tRp1024
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1025
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p1026
sS'block_loop.thisRepN'
p1027
I0
sg907
S'34-hula_hoops_bbq_beef_redo.png'
p1028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1029
I0
sg910
g1022
sg55
g11
sS'block_loop.thisTrial'
p1030
Nsg70
Vn
sS'block_loop.thisTrialN'
p1031
I0
sg39
F4.7664591718785232
sg34
g753
(S'\x07\xdf\x07\t\x10&8\t\xd7\x88'
tRp1032
sa(dp1033
S'trial_loop.thisTrialN'
p1034
I8
sg895
g933
sS'block_loop.thisIndex'
p1035
g889
sg38
S'right'
p1036
sg59
g63
sS'trial_loop.thisN'
p1037
I8
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p1038
g60
(g99
S'\x08\x00\x00\x00'
tRp1039
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1040
I0
sg904
g941
sS'block_loop.thisRepN'
p1041
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1042
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p1043
Nsg70
Vn
sS'block_loop.thisTrialN'
p1044
I0
sg39
F1.4332233422792342
sg34
g753
(S"\x07\xdf\x07\t\x10'\x06\x06\xbe\x90"
tRp1045
sa(dp1046
S'trial_loop.thisTrialN'
p1047
I9
sg895
S'22-daim.png'
p1048
sS'block_loop.thisIndex'
p1049
g889
sg38
S'left'
p1050
sg59
g63
sS'trial_loop.thisN'
p1051
I9
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1052
g60
(g99
S'\t\x00\x00\x00'
tRp1053
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1054
I0
sg904
S'7-olives.png'
p1055
sS'block_loop.thisRepN'
p1056
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1057
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p1058
Nsg70
Vn
sS'block_loop.thisTrialN'
p1059
I0
sg39
F1.8999688672302
sg34
g753
(S"\x07\xdf\x07\t\x10'\x0c\r\xfa "
tRp1060
sa(dp1061
S'trial_loop.thisTrialN'
p1062
I10
sg895
S'10-bounty_redo.png'
p1063
sS'block_loop.thisIndex'
p1064
g889
sg38
S'right'
p1065
sg59
g63
sS'trial_loop.thisN'
p1066
I10
sg33
S'4-corn.png'
p1067
sg64
g65
sS'trial_loop.thisIndex'
p1068
g60
(g99
S'\n\x00\x00\x00'
tRp1069
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1070
I0
sg904
S'4-corn.png'
p1071
sS'block_loop.thisRepN'
p1072
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1073
I0
sg910
S'10-bounty_redo.png'
p1074
sg55
g11
sS'block_loop.thisTrial'
p1075
Nsg70
Vn
sS'block_loop.thisTrialN'
p1076
I0
sg39
F1.7836497643111215
sg34
g753
(S"\x07\xdf\x07\t\x10'\x13\x0c\xd9\x10"
tRp1077
sa(dp1078
S'trial_loop.thisTrialN'
p1079
I11
sg895
g984
sS'block_loop.thisIndex'
p1080
g889
sg38
S'left'
p1081
sg59
g63
sS'trial_loop.thisN'
p1082
I11
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1083
g60
(g99
S'\x0b\x00\x00\x00'
tRp1084
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1085
I0
sg904
g992
sS'block_loop.thisRepN'
p1086
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1087
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p1088
Nsg70
Vn
sS'block_loop.thisTrialN'
p1089
I0
sg39
F2.1665948218105768
sg34
g753
(S"\x07\xdf\x07\t\x10'\x1a\n\x0e8"
tRp1090
sa(dp1091
S'trial_loop.thisTrialN'
p1092
I12
sg895
S'38-maltesers.png'
p1093
sS'block_loop.thisIndex'
p1094
g889
sg38
S'left'
p1095
sg59
g63
sS'trial_loop.thisN'
p1096
I12
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1097
g60
(g99
S'\x0c\x00\x00\x00'
tRp1098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1099
I0
sg904
S'6-sour_patch_kids.png'
p1100
sS'block_loop.thisRepN'
p1101
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1102
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p1103
Nsg70
Vn
sS'block_loop.thisTrialN'
p1104
I0
sg39
F1.4996826852184313
sg34
g753
(S"\x07\xdf\x07\t\x10'!\r:\xb8"
tRp1105
sa(dp1106
S'trial_loop.thisTrialN'
p1107
I13
sg895
S'16-skips_prawn.png'
p1108
sS'block_loop.thisIndex'
p1109
g889
sg38
S'left'
p1110
sg59
g63
sS'trial_loop.thisN'
p1111
I13
sg33
S'16-skips_prawn.png'
p1112
sg64
g65
sS'trial_loop.thisIndex'
p1113
g60
(g99
S'\r\x00\x00\x00'
tRp1114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1115
I0
sg904
S'42-mrkipling_lemon_slices.png'
p1116
sS'block_loop.thisRepN'
p1117
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1118
I0
sg910
S'42-mrkipling_lemon_slices.png'
p1119
sg55
g11
sS'block_loop.thisTrial'
p1120
Nsg70
Vn
sS'block_loop.thisTrialN'
p1121
I0
sg39
F1.6164730561831675
sg34
g753
(S"\x07\xdf\x07\t\x10'(\x06&8"
tRp1122
sa(dp1123
S'trial_loop.thisTrialN'
p1124
I14
sg895
g1093
sS'block_loop.thisIndex'
p1125
g889
sg38
S'left'
p1126
sg59
g63
sS'trial_loop.thisN'
p1127
I14
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1128
g60
(g99
S'\x0e\x00\x00\x00'
tRp1129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1130
I0
sg904
g1100
sS'block_loop.thisRepN'
p1131
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1132
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p1133
Nsg70
Vn
sS'block_loop.thisTrialN'
p1134
I0
sg39
F0.86639166052191285
sg34
g753
(S"\x07\xdf\x07\t\x10'/\x00\xbfh"
tRp1135
sa(dp1136
S'trial_loop.thisTrialN'
p1137
I15
sg895
S'8-liquorice_catherine_wheels.png'
p1138
sS'block_loop.thisIndex'
p1139
g889
sg38
S'right'
p1140
sg59
g63
sS'trial_loop.thisN'
p1141
I15
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p1142
g60
(g99
S'\x0f\x00\x00\x00'
tRp1143
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1144
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p1145
sS'block_loop.thisRepN'
p1146
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1147
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p1148
Nsg70
Vn
sS'block_loop.thisTrialN'
p1149
I0
sg39
F1.200320850002754
sg34
g753
(S"\x07\xdf\x07\t\x10'4\x0ekh"
tRp1150
sa(dp1151
S'trial_loop.thisTrialN'
p1152
I16
sg895
S'44-crunch.png'
p1153
sS'block_loop.thisIndex'
p1154
g889
sg38
S'right'
p1155
sg59
g63
sS'trial_loop.thisN'
p1156
I16
sg33
S'26-walkers_smoky_bacon.png'
p1157
sg64
g65
sS'trial_loop.thisIndex'
p1158
g60
(g99
S'\x10\x00\x00\x00'
tRp1159
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1160
I0
sg904
S'26-walkers_smoky_bacon.png'
p1161
sS'block_loop.thisRepN'
p1162
I0
sg907
g1157
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1163
I0
sg910
S'44-crunch.png'
p1164
sg55
g11
sS'block_loop.thisTrial'
p1165
Nsg70
Vn
sS'block_loop.thisTrialN'
p1166
I0
sg39
F1.8166656118009996
sg34
g753
(S"\x07\xdf\x07\t\x10';\x02\xd2\xa8"
tRp1167
sa(dp1168
S'trial_loop.thisTrialN'
p1169
I17
sg895
S'1-treacle_cookies.png'
p1170
sS'block_loop.thisIndex'
p1171
g889
sg38
S'left'
p1172
sg59
g63
sS'trial_loop.thisN'
p1173
I17
sg33
S'21-nakd_banana_crunch.png'
p1174
sg64
g65
sS'trial_loop.thisIndex'
p1175
g60
(g99
S'\x11\x00\x00\x00'
tRp1176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1177
I0
sg904
S'21-nakd_banana_crunch.png'
p1178
sS'block_loop.thisRepN'
p1179
I0
sg907
S'1-treacle_cookies.png'
p1180
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1181
I0
sg910
g1174
sg55
g11
sS'block_loop.thisTrial'
p1182
Nsg70
Vn
sS'block_loop.thisTrialN'
p1183
I0
sg39
F2.9999483971478185
sg34
g753
(S'\x07\xdf\x07\t\x10(\x06\x00\x84\xd0'
tRp1184
sa(dp1185
S'trial_loop.thisTrialN'
p1186
I18
sg895
S'48-twix.png'
p1187
sS'block_loop.thisIndex'
p1188
g889
sg38
S'left'
p1189
sg59
g63
sS'trial_loop.thisN'
p1190
I18
sg33
S'48-twix.png'
p1191
sg64
g65
sS'trial_loop.thisIndex'
p1192
g60
(g99
S'\x12\x00\x00\x00'
tRp1193
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1194
I0
sg904
S'50-polo.png'
p1195
sS'block_loop.thisRepN'
p1196
I0
sg907
S'50-polo.png'
p1197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1198
I0
sg910
g1191
sg55
g11
sS'block_loop.thisTrial'
p1199
Nsg70
Vn
sS'block_loop.thisTrialN'
p1200
I0
sg39
F1.0832385380381311
sg34
g753
(S'\x07\xdf\x07\t\x10(\x0e\x01\t\xa0'
tRp1201
sa(dp1202
S'trial_loop.thisTrialN'
p1203
I19
sg895
S'13-mccoys_steak_crisps.png'
p1204
sS'block_loop.thisIndex'
p1205
g889
sg38
S'left'
p1206
sg59
g63
sS'trial_loop.thisN'
p1207
I19
sg33
S'3-ellas_strawberries_apples.png'
p1208
sg64
g65
sS'trial_loop.thisIndex'
p1209
g60
(g99
S'\x13\x00\x00\x00'
tRp1210
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1211
I0
sg904
S'3-ellas_strawberries_apples.png'
p1212
sS'block_loop.thisRepN'
p1213
I0
sg907
S'13-mccoys_steak_crisps.png'
p1214
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1215
I0
sg910
g1208
sg55
g11
sS'block_loop.thisTrial'
p1216
Nsg70
Vn
sS'block_loop.thisTrialN'
p1217
I0
sg39
F1.1000083248800365
sg34
g753
(S'\x07\xdf\x07\t\x10(\x14\x02\xca\xd8'
tRp1218
sa(dp1219
S'trial_loop.thisTrialN'
p1220
I20
sg895
S'41-peanuts_redo.png'
p1221
sS'block_loop.thisIndex'
p1222
g889
sg38
S'left'
p1223
sg59
g63
sS'trial_loop.thisN'
p1224
I20
sg33
S'41-peanuts_redo.png'
p1225
sg64
g65
sS'trial_loop.thisIndex'
p1226
g60
(g99
S'\x14\x00\x00\x00'
tRp1227
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1228
I0
sg904
S'45-chewy_nougat_redo.png'
p1229
sS'block_loop.thisRepN'
p1230
I0
sg907
g1225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1231
I0
sg910
S'45-chewy_nougat_redo.png'
p1232
sg55
g11
sS'block_loop.thisTrial'
p1233
Nsg70
Vn
sS'block_loop.thisTrialN'
p1234
I0
sg39
F1.4670149431585742
sg34
g753
(S'\x07\xdf\x07\t\x10(\x1a\x04\xca\x90'
tRp1235
sa(dp1236
S'trial_loop.thisTrialN'
p1237
I21
sg895
g1138
sS'block_loop.thisIndex'
p1238
g889
sg38
S'right'
p1239
sg59
g63
sS'trial_loop.thisN'
p1240
I21
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1241
g60
(g99
S'\x15\x00\x00\x00'
tRp1242
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1243
I0
sg904
g1145
sS'block_loop.thisRepN'
p1244
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1245
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p1246
Nsg70
Vn
sS'block_loop.thisTrialN'
p1247
I0
sg39
F1.4499064591400384
sg34
g753
(S'\x07\xdf\x07\t\x10( \x0c\x7f8'
tRp1248
sa(dp1249
S'trial_loop.thisTrialN'
p1250
I22
sg895
g967
sS'block_loop.thisIndex'
p1251
g889
sg38
S'right'
p1252
sg59
g63
sS'trial_loop.thisN'
p1253
I22
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p1254
g60
(g99
S'\x16\x00\x00\x00'
tRp1255
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1256
I0
sg904
g975
sS'block_loop.thisRepN'
p1257
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1258
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p1259
Nsg70
Vn
sS'block_loop.thisTrialN'
p1260
I0
sg39
F0.74970478036266286
sg34
g753
(S"\x07\xdf\x07\t\x10('\x04x\x88"
tRp1261
sa(dp1262
S'trial_loop.thisTrialN'
p1263
I23
sg895
S'29-beans.png'
p1264
sS'block_loop.thisIndex'
p1265
g889
sg38
S'right'
p1266
sg59
g63
sS'trial_loop.thisN'
p1267
I23
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p1268
g60
(g99
S'\x17\x00\x00\x00'
tRp1269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1270
I0
sg904
S'46-pistachios.png'
p1271
sS'block_loop.thisRepN'
p1272
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1273
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p1274
Nsg70
Vn
sS'block_loop.thisTrialN'
p1275
I0
sg39
F1.4332732345392287
sg34
g753
(S'\x07\xdf\x07\t\x10(-\x01<h'
tRp1276
sa(dp1277
S'trial_loop.thisTrialN'
p1278
I24
sg895
g1204
sS'block_loop.thisIndex'
p1279
g889
sg38
S'left'
p1280
sg59
g63
sS'trial_loop.thisN'
p1281
I24
sg33
g1214
sg64
g65
sS'trial_loop.thisIndex'
p1282
g60
(g99
S'\x18\x00\x00\x00'
tRp1283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1284
I0
sg904
g1212
sS'block_loop.thisRepN'
p1285
I0
sg907
g1214
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1286
I0
sg910
g1208
sg55
g11
sS'block_loop.thisTrial'
p1287
Nsg70
Vn
sS'block_loop.thisTrialN'
p1288
I0
sg39
F2.7666068529724726
sg34
g753
(S'\x07\xdf\x07\t\x10(3\x089x'
tRp1289
sa(dp1290
S'trial_loop.thisTrialN'
p1291
I25
sg895
S'35-raisins.png'
p1292
sS'block_loop.thisIndex'
p1293
g889
sg38
S'left'
p1294
sg59
g63
sS'trial_loop.thisN'
p1295
I25
sg33
S'35-raisins.png'
p1296
sg64
g65
sS'trial_loop.thisIndex'
p1297
g60
(g99
S'\x19\x00\x00\x00'
tRp1298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1299
I0
sg904
S'49-yorkie.png'
p1300
sS'block_loop.thisRepN'
p1301
I0
sg907
S'49-yorkie.png'
p1302
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1303
I0
sg910
g1296
sg55
g11
sS'block_loop.thisTrial'
p1304
Nsg70
Vn
sS'block_loop.thisTrialN'
p1305
I0
sg39
F1.8998955968818336
sg34
g753
(S'\x07\xdf\x07\t\x10(;\x05,8'
tRp1306
sa(dp1307
S'trial_loop.thisTrialN'
p1308
I26
sg895
g896
sS'block_loop.thisIndex'
p1309
g889
sg38
S'left'
p1310
sg59
g63
sS'trial_loop.thisN'
p1311
I26
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1312
g60
(g99
S'\x1a\x00\x00\x00'
tRp1313
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1314
I0
sg904
g905
sS'block_loop.thisRepN'
p1315
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1316
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p1317
Nsg70
Vn
sS'block_loop.thisTrialN'
p1318
I0
sg39
F1.4666474510195258
sg34
g753
(S'\x07\xdf\x07\t\x10)\x06\x04I\xa8'
tRp1319
sa(dp1320
S'trial_loop.thisTrialN'
p1321
I27
sg895
S'33-ambrosia_rice.png'
p1322
sS'block_loop.thisIndex'
p1323
g889
sg38
S'left'
p1324
sg59
g63
sS'trial_loop.thisN'
p1325
I27
sg33
S'33-ambrosia_rice.png'
p1326
sg64
g65
sS'trial_loop.thisIndex'
p1327
g60
(g99
S'\x1b\x00\x00\x00'
tRp1328
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1329
I0
sg904
S'23-crunchie_redo.png'
p1330
sS'block_loop.thisRepN'
p1331
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1332
I0
sg910
S'23-crunchie_redo.png'
p1333
sg55
g11
sS'block_loop.thisTrial'
p1334
Nsg70
Vn
sS'block_loop.thisTrialN'
p1335
I0
sg39
F3.6166099035290245
sg34
g753
(S'\x07\xdf\x07\t\x10)\x0c\x0b\xc3\xb8'
tRp1336
sa(dp1337
S'trial_loop.thisTrialN'
p1338
I28
sg895
S'50-polo.png'
p1339
sS'block_loop.thisIndex'
p1340
g889
sg38
S'right'
p1341
sg59
g63
sS'trial_loop.thisN'
p1342
I28
sg33
g1197
sg64
g65
sS'trial_loop.thisIndex'
p1343
g60
(g99
S'\x1c\x00\x00\x00'
tRp1344
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1345
I0
sg904
S'48-twix.png'
p1346
sS'block_loop.thisRepN'
p1347
I0
sg907
g1197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1348
I0
sg910
g1191
sg55
g11
sS'block_loop.thisTrial'
p1349
Nsg70
Vn
sS'block_loop.thisTrialN'
p1350
I0
sg39
F1.033294673958153
sg34
g753
(S'\x07\xdf\x07\t\x10)\x15\x06\x8b\xc8'
tRp1351
sa(dp1352
S'trial_loop.thisTrialN'
p1353
I29
sg895
S'30-spaghetti_hoops.png'
p1354
sS'block_loop.thisIndex'
p1355
g889
sg38
S'right'
p1356
sg59
g63
sS'trial_loop.thisN'
p1357
I29
sg33
g1011
sg64
g65
sS'trial_loop.thisIndex'
p1358
g60
(g99
S'\x1d\x00\x00\x00'
tRp1359
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1360
I0
sg904
S'19-caramello_redo.png'
p1361
sS'block_loop.thisRepN'
p1362
I0
sg907
g1011
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1363
I0
sg910
g1005
sg55
g11
sS'block_loop.thisTrial'
p1364
Nsg70
Vn
sS'block_loop.thisTrialN'
p1365
I0
sg39
F2.9332803620090999
sg34
g753
(S'\x07\xdf\x07\t\x10)\x1b\x07\x95h'
tRp1366
sa(dp1367
S'trial_loop.thisTrialN'
p1368
I30
sg895
S'18-mms.png'
p1369
sS'block_loop.thisIndex'
p1370
g889
sg38
S'right'
p1371
sg59
g63
sS'trial_loop.thisN'
p1372
I30
sg33
S'43-mrporky_pork_crackles_redo.png'
p1373
sg64
g65
sS'trial_loop.thisIndex'
p1374
g60
(g99
S'\x1e\x00\x00\x00'
tRp1375
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1376
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1377
sS'block_loop.thisRepN'
p1378
I0
sg907
S'18-mms.png'
p1379
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1380
I0
sg910
g1373
sg55
g11
sS'block_loop.thisTrial'
p1381
Nsg70
Vn
sS'block_loop.thisTrialN'
p1382
I0
sg39
F3.1170002035614743
sg34
g753
(S'\x07\xdf\x07\t\x10)#\x07(\x08'
tRp1383
sa(dp1384
S'trial_loop.thisTrialN'
p1385
I31
sg895
S'42-mrkipling_lemon_slices.png'
p1386
sS'block_loop.thisIndex'
p1387
g889
sg38
S'right'
p1388
sg59
g63
sS'trial_loop.thisN'
p1389
I31
sg33
g1119
sg64
g65
sS'trial_loop.thisIndex'
p1390
g60
(g99
S'\x1f\x00\x00\x00'
tRp1391
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1392
I0
sg904
S'16-skips_prawn.png'
p1393
sS'block_loop.thisRepN'
p1394
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1395
I0
sg910
g1119
sg55
g11
sS'block_loop.thisTrial'
p1396
Nsg70
Vn
sS'block_loop.thisTrialN'
p1397
I0
sg39
F1.4831860228659934
sg34
g753
(S'\x07\xdf\x07\t\x10)+\tV\xa0'
tRp1398
sa(dp1399
S'trial_loop.thisTrialN'
p1400
I32
sg895
g1187
sS'block_loop.thisIndex'
p1401
g889
sg38
S'left'
p1402
sg59
g63
sS'trial_loop.thisN'
p1403
I32
sg33
g1197
sg64
g65
sS'trial_loop.thisIndex'
p1404
g60
(g99
S' \x00\x00\x00'
tRp1405
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1406
I0
sg904
g1195
sS'block_loop.thisRepN'
p1407
I0
sg907
g1197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1408
I0
sg910
g1191
sg55
g11
sS'block_loop.thisTrial'
p1409
Nsg70
Vn
sS'block_loop.thisTrialN'
p1410
I0
sg39
F1.1499946686562907
sg34
g753
(S'\x07\xdf\x07\t\x10)2\x02\x07\x88'
tRp1411
sa(dp1412
S'trial_loop.thisTrialN'
p1413
I33
sg895
g1170
sS'block_loop.thisIndex'
p1414
g889
sg38
S'right'
p1415
sg59
g63
sS'trial_loop.thisN'
p1416
I33
sg33
g1180
sg64
g65
sS'trial_loop.thisIndex'
p1417
g60
(g99
S'!\x00\x00\x00'
tRp1418
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1419
I0
sg904
g1178
sS'block_loop.thisRepN'
p1420
I0
sg907
g1180
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1421
I0
sg910
g1174
sg55
g11
sS'block_loop.thisTrial'
p1422
Nsg70
Vn
sS'block_loop.thisTrialN'
p1423
I0
sg39
F1.4832111115465523
sg34
g753
(S'\x07\xdf\x07\t\x10)8\x04\xba\xf0'
tRp1424
sa(dp1425
S'trial_loop.thisTrialN'
p1426
I34
sg895
g1339
sS'block_loop.thisIndex'
p1427
g889
sg38
S'right'
p1428
sg59
g63
sS'trial_loop.thisN'
p1429
I34
sg33
g1197
sg64
g65
sS'trial_loop.thisIndex'
p1430
g60
(g99
S'"\x00\x00\x00'
tRp1431
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1432
I0
sg904
g1346
sS'block_loop.thisRepN'
p1433
I0
sg907
g1197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1434
I0
sg910
g1191
sg55
g11
sS'block_loop.thisTrial'
p1435
Nsg70
Vn
sS'block_loop.thisTrialN'
p1436
I0
sg39
F0.71668665208198945
sg34
g753
(S'\x07\xdf\x07\t\x10*\x02\x0c\xae\x18'
tRp1437
sa(dp1438
S'trial_loop.thisTrialN'
p1439
I35
sg895
g1264
sS'block_loop.thisIndex'
p1440
g889
sg38
S'right'
p1441
sg59
g63
sS'trial_loop.thisN'
p1442
I35
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p1443
g60
(g99
S'#\x00\x00\x00'
tRp1444
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1445
I0
sg904
g1271
sS'block_loop.thisRepN'
p1446
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1447
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p1448
Nsg70
Vn
sS'block_loop.thisTrialN'
p1449
I0
sg39
F0.81707586873744731
sg34
g753
(S'\x07\xdf\x07\t\x10*\x08\x08\xba`'
tRp1450
sa(dp1451
S'trial_loop.thisTrialN'
p1452
I36
sg895
g1221
sS'block_loop.thisIndex'
p1453
g889
sg38
S'left'
p1454
sg59
g63
sS'trial_loop.thisN'
p1455
I36
sg33
g1225
sg64
g65
sS'trial_loop.thisIndex'
p1456
g60
(g99
S'$\x00\x00\x00'
tRp1457
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1458
I0
sg904
g1229
sS'block_loop.thisRepN'
p1459
I0
sg907
g1225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1460
I0
sg910
g1232
sg55
g11
sS'block_loop.thisTrial'
p1461
Nsg70
Vn
sS'block_loop.thisTrialN'
p1462
I0
sg39
F1.5499535574344918
sg34
g753
(S'\x07\xdf\x07\t\x10*\x0e\x06pp'
tRp1463
sa(dp1464
S'trial_loop.thisTrialN'
p1465
I37
sg895
S'21-nakd_banana_crunch.png'
p1466
sS'block_loop.thisIndex'
p1467
g889
sg38
S'left'
p1468
sg59
g63
sS'trial_loop.thisN'
p1469
I37
sg33
g1180
sg64
g65
sS'trial_loop.thisIndex'
p1470
g60
(g99
S'%\x00\x00\x00'
tRp1471
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1472
I0
sg904
S'1-treacle_cookies.png'
p1473
sS'block_loop.thisRepN'
p1474
I0
sg907
g1180
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1475
I0
sg910
g1174
sg55
g11
sS'block_loop.thisTrial'
p1476
Nsg70
Vn
sS'block_loop.thisTrialN'
p1477
I0
sg39
F3.2332391937634384
sg34
g753
(S'\x07\xdf\x07\t\x10*\x15\x00\x13\x88'
tRp1478
sa(dp1479
S'trial_loop.thisTrialN'
p1480
I38
sg895
g950
sS'block_loop.thisIndex'
p1481
g889
sg38
S'right'
p1482
sg59
g63
sS'trial_loop.thisN'
p1483
I38
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p1484
g60
(g99
S'&\x00\x00\x00'
tRp1485
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1486
I0
sg904
g958
sS'block_loop.thisRepN'
p1487
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1488
I0
sg910
g954
sg55
g11
sS'block_loop.thisTrial'
p1489
Nsg70
Vn
sS'block_loop.thisTrialN'
p1490
I0
sg39
F2.333303397976124
sg34
g753
(S'\x07\xdf\x07\t\x10*\x1d\x04*h'
tRp1491
sa(dp1492
S'trial_loop.thisTrialN'
p1493
I39
sg895
g1466
sS'block_loop.thisIndex'
p1494
g889
sg38
S'right'
p1495
sg59
g63
sS'trial_loop.thisN'
p1496
I39
sg33
g1180
sg64
g65
sS'trial_loop.thisIndex'
p1497
g60
(g99
S"'\x00\x00\x00"
tRp1498
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1499
I0
sg904
g1473
sS'block_loop.thisRepN'
p1500
I0
sg907
g1180
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1501
I0
sg910
g1174
sg55
g11
sS'block_loop.thisTrial'
p1502
Nsg70
Vn
sS'block_loop.thisTrialN'
p1503
I0
sg39
F1.3166707435775606
sg34
g753
(S'\x07\xdf\x07\t\x10*$\t\xf2\xe0'
tRp1504
sa(dp1505
S'trial_loop.thisTrialN'
p1506
I40
sg895
g1264
sS'block_loop.thisIndex'
p1507
g889
sg38
S'left'
p1508
sg59
g63
sS'trial_loop.thisN'
p1509
I40
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p1510
g60
(g99
S'(\x00\x00\x00'
tRp1511
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1512
I0
sg904
g1271
sS'block_loop.thisRepN'
p1513
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1514
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p1515
Nsg70
Vn
sS'block_loop.thisTrialN'
p1516
I0
sg39
F0.79993659406318329
sg34
g753
(S'\x07\xdf\x07\t\x10*+\x00\x03\xe8'
tRp1517
sa(dp1518
S'trial_loop.thisTrialN'
p1519
I41
sg895
g1138
sS'block_loop.thisIndex'
p1520
g889
sg38
S'right'
p1521
sg59
g63
sS'trial_loop.thisN'
p1522
I41
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1523
g60
(g99
S')\x00\x00\x00'
tRp1524
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1525
I0
sg904
g1145
sS'block_loop.thisRepN'
p1526
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1527
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p1528
Nsg70
Vn
sS'block_loop.thisTrialN'
p1529
I0
sg39
F1.1499980898406648
sg34
g753
(S'\x07\xdf\x07\t\x10*0\x0c\x83 '
tRp1530
sa(dp1531
S'trial_loop.thisTrialN'
p1532
I42
sg895
S'3-ellas_strawberries_apples.png'
p1533
sS'block_loop.thisIndex'
p1534
g889
sg38
S'right'
p1535
sg59
g63
sS'trial_loop.thisN'
p1536
I42
sg33
g1214
sg64
g65
sS'trial_loop.thisIndex'
p1537
g60
(g99
S'*\x00\x00\x00'
tRp1538
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1539
I0
sg904
S'13-mccoys_steak_crisps.png'
p1540
sS'block_loop.thisRepN'
p1541
I0
sg907
g1214
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1542
I0
sg910
g1208
sg55
g11
sS'block_loop.thisTrial'
p1543
Nsg70
Vn
sS'block_loop.thisTrialN'
p1544
I0
sg39
F0.93331628443411319
sg34
g753
(S'\x07\xdf\x07\t\x10*7\x002\xc8'
tRp1545
sa(dp1546
S'trial_loop.thisTrialN'
p1547
I43
sg895
S'20-fruit_pastilles.png'
p1548
sS'block_loop.thisIndex'
p1549
g889
sg38
S'right'
p1550
sg59
g63
sS'trial_loop.thisN'
p1551
I43
sg33
S'2-steamed_puddings.png'
p1552
sg64
g65
sS'trial_loop.thisIndex'
p1553
g60
(g99
S'+\x00\x00\x00'
tRp1554
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1555
I0
sg904
S'2-steamed_puddings.png'
p1556
sS'block_loop.thisRepN'
p1557
I0
sg907
g1552
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1558
I0
sg910
S'20-fruit_pastilles.png'
p1559
sg55
g11
sS'block_loop.thisTrial'
p1560
Nsg70
Vn
sS'block_loop.thisTrialN'
p1561
I0
sg39
F2.5332365138383466
sg34
g753
(S'\x07\xdf\x07\t\x10+\x00\x0e\xd8\xc8'
tRp1562
sa(dp1563
S'trial_loop.thisTrialN'
p1564
I44
sg895
S'23-crunchie_redo.png'
p1565
sS'block_loop.thisIndex'
p1566
g889
sg38
S'right'
p1567
sg59
g63
sS'trial_loop.thisN'
p1568
I44
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p1569
g60
(g99
S',\x00\x00\x00'
tRp1570
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1571
I0
sg904
S'33-ambrosia_rice.png'
p1572
sS'block_loop.thisRepN'
p1573
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1574
I0
sg910
g1333
sg55
g11
sS'block_loop.thisTrial'
p1575
Nsg70
Vn
sS'block_loop.thisTrialN'
p1576
I0
sg39
F1.166659254100523
sg34
g753
(S'\x07\xdf\x07\t\x10+\x08\x089x'
tRp1577
sa(dp1578
S'trial_loop.thisTrialN'
p1579
I45
sg895
g1386
sS'block_loop.thisIndex'
p1580
g889
sg38
S'right'
p1581
sg59
g63
sS'trial_loop.thisN'
p1582
I45
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p1583
g60
(g99
S'-\x00\x00\x00'
tRp1584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1585
I0
sg904
g1393
sS'block_loop.thisRepN'
p1586
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1587
I0
sg910
g1119
sg55
g11
sS'block_loop.thisTrial'
p1588
Nsg70
Vn
sS'block_loop.thisTrialN'
p1589
I0
sg39
F1.650240138580557
sg34
g753
(S'\x07\xdf\x07\t\x10+\x0e\x0be\xf8'
tRp1590
sa(dp1591
S'trial_loop.thisTrialN'
p1592
I46
sg895
S'31-hobnobs.png'
p1593
sS'block_loop.thisIndex'
p1594
g889
sg38
S'left'
p1595
sg59
g63
sS'trial_loop.thisN'
p1596
I46
sg33
S'25-kitkat.png'
p1597
sg64
g65
sS'trial_loop.thisIndex'
p1598
g60
(g99
S'.\x00\x00\x00'
tRp1599
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1600
I0
sg904
S'25-kitkat.png'
p1601
sS'block_loop.thisRepN'
p1602
I0
sg907
g1597
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1603
I0
sg910
S'31-hobnobs.png'
p1604
sg55
g11
sS'block_loop.thisTrial'
p1605
Nsg70
Vn
sS'block_loop.thisTrialN'
p1606
I0
sg39
F2.6832226295337023
sg34
g753
(S'\x07\xdf\x07\t\x10+\x15\x06x@'
tRp1607
sa(dp1608
S'trial_loop.thisTrialN'
p1609
I47
sg895
S'43-mrporky_pork_crackles_redo.png'
p1610
sS'block_loop.thisIndex'
p1611
g889
sg38
S'left'
p1612
sg59
g63
sS'trial_loop.thisN'
p1613
I47
sg33
g1379
sg64
g65
sS'trial_loop.thisIndex'
p1614
g60
(g99
S'/\x00\x00\x00'
tRp1615
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1616
I0
sg904
S'18-mms.png'
p1617
sS'block_loop.thisRepN'
p1618
I0
sg907
g1379
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1619
I0
sg910
g1373
sg55
g11
sS'block_loop.thisTrial'
p1620
Nsg70
Vn
sS'block_loop.thisTrialN'
p1621
I0
sg39
F1.9832572975283256
sg34
g753
(S'\x07\xdf\x07\t\x10+\x1d\x02:P'
tRp1622
sa(dp1623
S'trial_loop.thisTrialN'
p1624
I48
sg895
g1322
sS'block_loop.thisIndex'
p1625
g889
sg38
S'left'
p1626
sg59
g63
sS'trial_loop.thisN'
p1627
I48
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p1628
g60
(g99
S'0\x00\x00\x00'
tRp1629
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1630
I0
sg904
g1330
sS'block_loop.thisRepN'
p1631
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1632
I0
sg910
g1333
sg55
g11
sS'block_loop.thisTrial'
p1633
Nsg70
Vn
sS'block_loop.thisTrialN'
p1634
I0
sg39
F1.2999328877813241
sg34
g753
(S'\x07\xdf\x07\t\x10+$\x02\x88p'
tRp1635
sa(dp1636
S'trial_loop.thisTrialN'
p1637
I49
sg895
S'49-yorkie.png'
p1638
sS'block_loop.thisIndex'
p1639
g889
sg38
S'right'
p1640
sg59
g63
sS'trial_loop.thisN'
p1641
I49
sg33
g1302
sg64
g65
sS'trial_loop.thisIndex'
p1642
g60
(g99
S'1\x00\x00\x00'
tRp1643
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1644
I0
sg904
S'35-raisins.png'
p1645
sS'block_loop.thisRepN'
p1646
I0
sg907
g1302
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1647
I0
sg910
g1296
sg55
g11
sS'block_loop.thisTrial'
p1648
Nsg70
Vn
sS'block_loop.thisTrialN'
p1649
I0
sg39
F2.033303226919088
sg34
g753
(S'\x07\xdf\x07\t\x10+*\x07\xa1 '
tRp1650
sa(dp1651
S'trial_loop.thisTrialN'
p1652
I50
sg895
g1386
sS'block_loop.thisIndex'
p1653
g889
sg38
S'right'
p1654
sg59
g63
sS'trial_loop.thisN'
p1655
I50
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p1656
g60
(g99
S'2\x00\x00\x00'
tRp1657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1658
I0
sg904
g1393
sS'block_loop.thisRepN'
p1659
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1660
I0
sg910
g1119
sg55
g11
sS'block_loop.thisTrial'
p1661
Nsg70
Vn
sS'block_loop.thisTrialN'
p1662
I0
sg39
F1.3335716757937917
sg34
g753
(S'\x07\xdf\x07\t\x10+1\x08\xa6\xd8'
tRp1663
sa(dp1664
S'trial_loop.thisTrialN'
p1665
I51
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p1666
sS'block_loop.thisIndex'
p1667
g889
sg38
S'right'
p1668
sg59
g63
sS'trial_loop.thisN'
p1669
I51
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1670
g60
(g99
S'3\x00\x00\x00'
tRp1671
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1672
I0
sg904
S'36-fig_rolls.png'
p1673
sS'block_loop.thisRepN'
p1674
I0
sg907
g1028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1675
I0
sg910
g1022
sg55
g11
sS'block_loop.thisTrial'
p1676
Nsg70
Vn
sS'block_loop.thisTrialN'
p1677
I0
sg39
F3.7832862635477795
sg34
g753
(S'\x07\xdf\x07\t\x10+7\x0e4\xb8'
tRp1678
sa(dp1679
S'trial_loop.thisTrialN'
p1680
I52
sg895
S'2-steamed_puddings.png'
p1681
sS'block_loop.thisIndex'
p1682
g889
sg38
S'left'
p1683
sg59
g63
sS'trial_loop.thisN'
p1684
I52
sg33
g1552
sg64
g65
sS'trial_loop.thisIndex'
p1685
g60
(g99
S'4\x00\x00\x00'
tRp1686
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1687
I0
sg904
S'20-fruit_pastilles.png'
p1688
sS'block_loop.thisRepN'
p1689
I0
sg907
g1552
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1690
I0
sg910
g1559
sg55
g11
sS'block_loop.thisTrial'
p1691
Nsg70
Vn
sS'block_loop.thisTrialN'
p1692
I0
sg39
F0.85010540096482146
sg34
g753
(S'\x07\xdf\x07\t\x10,\x04\x0b^('
tRp1693
sa(dp1694
S'trial_loop.thisTrialN'
p1695
I53
sg895
g1386
sS'block_loop.thisIndex'
p1696
g889
sg38
S'right'
p1697
sg59
g63
sS'trial_loop.thisN'
p1698
I53
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p1699
g60
(g99
S'5\x00\x00\x00'
tRp1700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1701
I0
sg904
g1393
sS'block_loop.thisRepN'
p1702
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1703
I0
sg910
g1119
sg55
g11
sS'block_loop.thisTrial'
p1704
Nsg70
Vn
sS'block_loop.thisTrialN'
p1705
I0
sg39
F0.64989345864159986
sg34
g753
(S'\x07\xdf\x07\t\x10,\n\t\x918'
tRp1706
sa(dp1707
S'trial_loop.thisTrialN'
p1708
I54
sg895
S'45-chewy_nougat_redo.png'
p1709
sS'block_loop.thisIndex'
p1710
g889
sg38
S'right'
p1711
sg59
g63
sS'trial_loop.thisN'
p1712
I54
sg33
g1232
sg64
g65
sS'trial_loop.thisIndex'
p1713
g60
(g99
S'6\x00\x00\x00'
tRp1714
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1715
I0
sg904
S'41-peanuts_redo.png'
p1716
sS'block_loop.thisRepN'
p1717
I0
sg907
g1225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1718
I0
sg910
g1232
sg55
g11
sS'block_loop.thisTrial'
p1719
Nsg70
Vn
sS'block_loop.thisTrialN'
p1720
I0
sg39
F1.999972915629769
sg34
g753
(S'\x07\xdf\x07\t\x10,\x10\x04\xa7h'
tRp1721
sa(dp1722
S'trial_loop.thisTrialN'
p1723
I55
sg895
g1292
sS'block_loop.thisIndex'
p1724
g889
sg38
S'right'
p1725
sg59
g63
sS'trial_loop.thisN'
p1726
I55
sg33
g1302
sg64
g65
sS'trial_loop.thisIndex'
p1727
g60
(g99
S'7\x00\x00\x00'
tRp1728
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1729
I0
sg904
g1300
sS'block_loop.thisRepN'
p1730
I0
sg907
g1302
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1731
I0
sg910
g1296
sg55
g11
sS'block_loop.thisTrial'
p1732
Nsg70
Vn
sS'block_loop.thisTrialN'
p1733
I0
sg39
F0.70032598177931504
sg34
g753
(S'\x07\xdf\x07\t\x10,\x17\x054\x08'
tRp1734
sa(dp1735
S'trial_loop.thisTrialN'
p1736
I56
sg895
g984
sS'block_loop.thisIndex'
p1737
g889
sg38
S'left'
p1738
sg59
g63
sS'trial_loop.thisN'
p1739
I56
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1740
g60
(g99
S'8\x00\x00\x00'
tRp1741
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1742
I0
sg904
g992
sS'block_loop.thisRepN'
p1743
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1744
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p1745
Nsg70
Vn
sS'block_loop.thisTrialN'
p1746
I0
sg39
F1.0666686053373269
sg34
g753
(S'\x07\xdf\x07\t\x10,\x1d\x01<h'
tRp1747
sa(dp1748
S'trial_loop.thisTrialN'
p1749
I57
sg895
g950
sS'block_loop.thisIndex'
p1750
g889
sg38
S'right'
p1751
sg59
g63
sS'trial_loop.thisN'
p1752
I57
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1753
g60
(g99
S'9\x00\x00\x00'
tRp1754
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1755
I0
sg904
g958
sS'block_loop.thisRepN'
p1756
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1757
I0
sg910
g954
sg55
g11
sS'block_loop.thisTrial'
p1758
Nsg70
Vn
sS'block_loop.thisTrialN'
p1759
I0
sg39
F1.4333482154797821
sg34
g753
(S'\x07\xdf\x07\t\x10,#\x02\xc3\x08'
tRp1760
sa(dp1761
S'trial_loop.thisTrialN'
p1762
I58
sg895
g1153
sS'block_loop.thisIndex'
p1763
g889
sg38
S'right'
p1764
sg59
g63
sS'trial_loop.thisN'
p1765
I58
sg33
g1164
sg64
g65
sS'trial_loop.thisIndex'
p1766
g60
(g99
S':\x00\x00\x00'
tRp1767
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1768
I0
sg904
g1161
sS'block_loop.thisRepN'
p1769
I0
sg907
g1157
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1770
I0
sg910
g1164
sg55
g11
sS'block_loop.thisTrial'
p1771
Nsg70
Vn
sS'block_loop.thisTrialN'
p1772
I0
sg39
F1.2665866109673516
sg34
g753
(S'\x07\xdf\x07\t\x10,)\t\xc0\x18'
tRp1773
sa(dp1774
S'trial_loop.thisTrialN'
p1775
I59
sg895
g1638
sS'block_loop.thisIndex'
p1776
g889
sg38
S'right'
p1777
sg59
g63
sS'trial_loop.thisN'
p1778
I59
sg33
g1302
sg64
g65
sS'trial_loop.thisIndex'
p1779
g60
(g99
S';\x00\x00\x00'
tRp1780
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1781
I0
sg904
g1645
sS'block_loop.thisRepN'
p1782
I0
sg907
g1302
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1783
I0
sg910
g1296
sg55
g11
sS'block_loop.thisTrial'
p1784
Nsg70
Vn
sS'block_loop.thisTrialN'
p1785
I0
sg39
F1.1166535236188793
sg34
g753
(S'\x07\xdf\x07\t\x10,/\x0e_\xb0'
tRp1786
sa(dp1787
S'trial_loop.thisTrialN'
p1788
I60
sg895
S'5-pineapple.png'
p1789
sS'block_loop.thisIndex'
p1790
g889
sg38
S'left'
p1791
sg59
g63
sS'trial_loop.thisN'
p1792
I60
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1793
g60
(g99
S'<\x00\x00\x00'
tRp1794
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1795
I0
sg904
S'40-sardines.png'
p1796
sS'block_loop.thisRepN'
p1797
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1798
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p1799
Nsg70
Vn
sS'block_loop.thisTrialN'
p1800
I0
sg39
F1.9336298929338227
sg34
g753
(S'\x07\xdf\x07\t\x10,6\x01W\xc0'
tRp1801
sa(dp1802
S'trial_loop.thisTrialN'
p1803
I61
sg895
g1170
sS'block_loop.thisIndex'
p1804
g889
sg38
S'left'
p1805
sg59
g63
sS'trial_loop.thisN'
p1806
I61
sg33
g1174
sg64
g65
sS'trial_loop.thisIndex'
p1807
g60
(g99
S'=\x00\x00\x00'
tRp1808
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1809
I0
sg904
g1178
sS'block_loop.thisRepN'
p1810
I0
sg907
g1180
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1811
I0
sg910
g1174
sg55
g11
sS'block_loop.thisTrial'
p1812
Nsg70
Vn
sS'block_loop.thisTrialN'
p1813
I0
sg39
F1.8332783092955651
sg34
g753
(S'\x07\xdf\x07\t\x10-\x01\x00\xf20'
tRp1814
sa(dp1815
S'trial_loop.thisTrialN'
p1816
I62
sg895
g1533
sS'block_loop.thisIndex'
p1817
g889
sg38
S'right'
p1818
sg59
g63
sS'trial_loop.thisN'
p1819
I62
sg33
g1214
sg64
g65
sS'trial_loop.thisIndex'
p1820
g60
(g99
S'>\x00\x00\x00'
tRp1821
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1822
I0
sg904
g1540
sS'block_loop.thisRepN'
p1823
I0
sg907
g1214
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1824
I0
sg910
g1208
sg55
g11
sS'block_loop.thisTrial'
p1825
Nsg70
Vn
sS'block_loop.thisTrialN'
p1826
I0
sg39
F1.0333231838230859
sg34
g753
(S'\x07\xdf\x07\t\x10-\x07\x0e!0'
tRp1827
sa(dp1828
S'trial_loop.thisTrialN'
p1829
I63
sg895
g1354
sS'block_loop.thisIndex'
p1830
g889
sg38
S'right'
p1831
sg59
g63
sS'trial_loop.thisN'
p1832
I63
sg33
g1011
sg64
g65
sS'trial_loop.thisIndex'
p1833
g60
(g99
S'?\x00\x00\x00'
tRp1834
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1835
I0
sg904
g1361
sS'block_loop.thisRepN'
p1836
I0
sg907
g1011
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1837
I0
sg910
g1005
sg55
g11
sS'block_loop.thisTrial'
p1838
Nsg70
Vn
sS'block_loop.thisTrialN'
p1839
I0
sg39
F5.3498479568988841
sg34
g753
(S'\x07\xdf\x07\t\x10-\r\x0f*\xd0'
tRp1840
sa(dp1841
S'trial_loop.thisTrialN'
p1842
I64
sg895
g1386
sS'block_loop.thisIndex'
p1843
g889
sg38
S'right'
p1844
sg59
g63
sS'trial_loop.thisN'
p1845
I64
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p1846
g60
(g99
S'@\x00\x00\x00'
tRp1847
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1848
I0
sg904
g1393
sS'block_loop.thisRepN'
p1849
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1850
I0
sg910
g1119
sg55
g11
sS'block_loop.thisTrial'
p1851
Nsg70
Vn
sS'block_loop.thisTrialN'
p1852
I0
sg39
F2.1669434974428441
sg34
g753
(S'\x07\xdf\x07\t\x10-\x18\x05\xdc\x00'
tRp1853
sa(dp1854
S'trial_loop.thisTrialN'
p1855
I65
sg895
g1681
sS'block_loop.thisIndex'
p1856
g889
sg38
S'left'
p1857
sg59
g63
sS'trial_loop.thisN'
p1858
I65
sg33
g1552
sg64
g65
sS'trial_loop.thisIndex'
p1859
g60
(g99
S'A\x00\x00\x00'
tRp1860
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1861
I0
sg904
g1688
sS'block_loop.thisRepN'
p1862
I0
sg907
g1552
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1863
I0
sg910
g1559
sg55
g11
sS'block_loop.thisTrial'
p1864
Nsg70
Vn
sS'block_loop.thisTrialN'
p1865
I0
sg39
F2.3665478945767973
sg34
g753
(S'\x07\xdf\x07\t\x10-\x1f\x08\xc6\x18'
tRp1866
sa(dp1867
S'trial_loop.thisTrialN'
p1868
I66
sg895
g1666
sS'block_loop.thisIndex'
p1869
g889
sg38
S'right'
p1870
sg59
g63
sS'trial_loop.thisN'
p1871
I66
sg33
g1028
sg64
g65
sS'trial_loop.thisIndex'
p1872
g60
(g99
S'B\x00\x00\x00'
tRp1873
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1874
I0
sg904
g1673
sS'block_loop.thisRepN'
p1875
I0
sg907
g1028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1876
I0
sg910
g1022
sg55
g11
sS'block_loop.thisTrial'
p1877
Nsg70
Vn
sS'block_loop.thisTrialN'
p1878
I0
sg39
F2.5832103132706834
sg34
g753
(S'\x07\xdf\x07\t\x10-&\x0e\xcd\x10'
tRp1879
sa(dp1880
S'trial_loop.thisTrialN'
p1881
I67
sg895
g1565
sS'block_loop.thisIndex'
p1882
g889
sg38
S'right'
p1883
sg59
g63
sS'trial_loop.thisN'
p1884
I67
sg33
g1333
sg64
g65
sS'trial_loop.thisIndex'
p1885
g60
(g99
S'C\x00\x00\x00'
tRp1886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1887
I0
sg904
g1572
sS'block_loop.thisRepN'
p1888
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1889
I0
sg910
g1333
sg55
g11
sS'block_loop.thisTrial'
p1890
Nsg70
Vn
sS'block_loop.thisTrialN'
p1891
I0
sg39
F1.8499782469734782
sg34
g753
(S'\x07\xdf\x07\t\x10-.\t\x1f\xf0'
tRp1892
sa(dp1893
S'trial_loop.thisTrialN'
p1894
I68
sg895
g916
sS'block_loop.thisIndex'
p1895
g889
sg38
S'right'
p1896
sg59
g63
sS'trial_loop.thisN'
p1897
I68
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1898
g60
(g99
S'D\x00\x00\x00'
tRp1899
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1900
I0
sg904
g924
sS'block_loop.thisRepN'
p1901
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1902
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p1903
Nsg70
Vn
sS'block_loop.thisTrialN'
p1904
I0
sg39
F3.9502745214776951
sg34
g753
(S'\x07\xdf\x07\t\x10-5\x07K0'
tRp1905
sa(dp1906
S'trial_loop.thisTrialN'
p1907
I69
sg895
S'26-walkers_smoky_bacon.png'
p1908
sS'block_loop.thisIndex'
p1909
g889
sg38
S'left'
p1910
sg59
g63
sS'trial_loop.thisN'
p1911
I69
sg33
g1157
sg64
g65
sS'trial_loop.thisIndex'
p1912
g60
(g99
S'E\x00\x00\x00'
tRp1913
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1914
I0
sg904
S'44-crunch.png'
p1915
sS'block_loop.thisRepN'
p1916
I0
sg907
g1157
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1917
I0
sg910
g1164
sg55
g11
sS'block_loop.thisTrial'
p1918
Nsg70
Vn
sS'block_loop.thisTrialN'
p1919
I0
sg39
F1.3499865148332901
sg34
g753
(S'\x07\xdf\x07\t\x10.\x02\x07\x10\x98'
tRp1920
sa(dp1921
S'trial_loop.thisTrialN'
p1922
I70
sg895
g933
sS'block_loop.thisIndex'
p1923
g889
sg38
S'right'
p1924
sg59
g63
sS'trial_loop.thisN'
p1925
I70
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1926
g60
(g99
S'F\x00\x00\x00'
tRp1927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1928
I0
sg904
g941
sS'block_loop.thisRepN'
p1929
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1930
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p1931
Nsg70
Vn
sS'block_loop.thisTrialN'
p1932
I0
sg39
F1.5999524455473875
sg34
g753
(S'\x07\xdf\x07\t\x10.\x08\x0c\xe0\xe0'
tRp1933
sa(dp1934
S'trial_loop.thisTrialN'
p1935
I71
sg895
S'25-kitkat.png'
p1936
sS'block_loop.thisIndex'
p1937
g889
sg38
S'left'
p1938
sg59
g63
sS'trial_loop.thisN'
p1939
I71
sg33
g1597
sg64
g65
sS'trial_loop.thisIndex'
p1940
g60
(g99
S'G\x00\x00\x00'
tRp1941
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1942
I0
sg904
S'31-hobnobs.png'
p1943
sS'block_loop.thisRepN'
p1944
I0
sg907
g1597
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1945
I0
sg910
g1604
sg55
g11
sS'block_loop.thisTrial'
p1946
Nsg70
Vn
sS'block_loop.thisTrialN'
p1947
I0
sg39
F2.1832793641624448
sg34
g753
(S'\x07\xdf\x07\t\x10.\x0f\x07;\x90'
tRp1948
sa(dp1949
S'trial_loop.thisTrialN'
p1950
I72
sg895
g1187
sS'block_loop.thisIndex'
p1951
g889
sg38
S'left'
p1952
sg59
g63
sS'trial_loop.thisN'
p1953
I72
sg33
g1197
sg64
g65
sS'trial_loop.thisIndex'
p1954
g60
(g99
S'H\x00\x00\x00'
tRp1955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1956
I0
sg904
g1195
sS'block_loop.thisRepN'
p1957
I0
sg907
g1197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1958
I0
sg910
g1191
sg55
g11
sS'block_loop.thisTrial'
p1959
Nsg70
Vn
sS'block_loop.thisTrialN'
p1960
I0
sg39
F1.2999873416192713
sg34
g753
(S'\x07\xdf\x07\t\x10.\x16\n\x9e\xc0'
tRp1961
sa(dp1962
S'trial_loop.thisTrialN'
p1963
I73
sg895
g950
sS'block_loop.thisIndex'
p1964
g889
sg38
S'right'
p1965
sg59
g63
sS'trial_loop.thisN'
p1966
I73
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p1967
g60
(g99
S'I\x00\x00\x00'
tRp1968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1969
I0
sg904
g958
sS'block_loop.thisRepN'
p1970
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1971
I0
sg910
g954
sg55
g11
sS'block_loop.thisTrial'
p1972
Nsg70
Vn
sS'block_loop.thisTrialN'
p1973
I0
sg39
F0.76648312016186537
sg34
g753
(S'\x07\xdf\x07\t\x10.\x1d\x00u0'
tRp1974
sa(dp1975
S'trial_loop.thisTrialN'
p1976
I74
sg895
g1936
sS'block_loop.thisIndex'
p1977
g889
sg38
S'left'
p1978
sg59
g63
sS'trial_loop.thisN'
p1979
I74
sg33
g1597
sg64
g65
sS'trial_loop.thisIndex'
p1980
g60
(g99
S'J\x00\x00\x00'
tRp1981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1982
I0
sg904
g1943
sS'block_loop.thisRepN'
p1983
I0
sg907
g1597
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1984
I0
sg910
g1604
sg55
g11
sS'block_loop.thisTrial'
p1985
Nsg70
Vn
sS'block_loop.thisTrialN'
p1986
I0
sg39
F1.5332510538682982
sg34
g753
(S'\x07\xdf\x07\t\x10."\x0c{P'
tRp1987
sa(dp1988
S'trial_loop.thisTrialN'
p1989
I75
sg895
g1018
sS'block_loop.thisIndex'
p1990
g889
sg38
S'left'
p1991
sg59
g63
sS'trial_loop.thisN'
p1992
I75
sg33
g1028
sg64
g65
sS'trial_loop.thisIndex'
p1993
g60
(g99
S'K\x00\x00\x00'
tRp1994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1995
I0
sg904
g1026
sS'block_loop.thisRepN'
p1996
I0
sg907
g1028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1997
I0
sg910
g1022
sg55
g11
sS'block_loop.thisTrial'
p1998
Nsg70
Vn
sS'block_loop.thisTrialN'
p1999
I0
sg39
F2.7666017211959115
sg34
g753
(S'\x07\xdf\x07\t\x10.)\x05\xdf\xe8'
tRp2000
sa(dp2001
S'trial_loop.thisTrialN'
p2002
I76
sg895
g1153
sS'block_loop.thisIndex'
p2003
g889
sg38
S'right'
p2004
sg59
g63
sS'trial_loop.thisN'
p2005
I76
sg33
g1157
sg64
g65
sS'trial_loop.thisIndex'
p2006
g60
(g99
S'L\x00\x00\x00'
tRp2007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2008
I0
sg904
g1161
sS'block_loop.thisRepN'
p2009
I0
sg907
g1157
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2010
I0
sg910
g1164
sg55
g11
sS'block_loop.thisTrial'
p2011
Nsg70
Vn
sS'block_loop.thisTrialN'
p2012
I0
sg39
F1.1499841200056835
sg34
g753
(S'\x07\xdf\x07\t\x10.1\x02\xd2\xa8'
tRp2013
sa(dp2014
S'trial_loop.thisTrialN'
p2015
I77
sg895
g1221
sS'block_loop.thisIndex'
p2016
g889
sg38
S'left'
p2017
sg59
g63
sS'trial_loop.thisN'
p2018
I77
sg33
g1225
sg64
g65
sS'trial_loop.thisIndex'
p2019
g60
(g99
S'M\x00\x00\x00'
tRp2020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2021
I0
sg904
g1229
sS'block_loop.thisRepN'
p2022
I0
sg907
g1225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2023
I0
sg910
g1232
sg55
g11
sS'block_loop.thisTrial'
p2024
Nsg70
Vn
sS'block_loop.thisTrialN'
p2025
I0
sg39
F1.2833144883152272
sg34
g753
(S'\x07\xdf\x07\t\x10.7\x05\xc8x'
tRp2026
sa(dp2027
S'trial_loop.thisTrialN'
p2028
I78
sg895
g1593
sS'block_loop.thisIndex'
p2029
g889
sg38
S'right'
p2030
sg59
g63
sS'trial_loop.thisN'
p2031
I78
sg33
g1597
sg64
g65
sS'trial_loop.thisIndex'
p2032
g60
(g99
S'N\x00\x00\x00'
tRp2033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2034
I0
sg904
g1601
sS'block_loop.thisRepN'
p2035
I0
sg907
g1597
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2036
I0
sg910
g1604
sg55
g11
sS'block_loop.thisTrial'
p2037
Nsg70
Vn
sS'block_loop.thisTrialN'
p2038
I0
sg39
F1.3333076744565915
sg34
g753
(S'\x07\xdf\x07\t\x10/\x01\n\xa2\xa8'
tRp2039
sa(dp2040
S'trial_loop.thisTrialN'
p2041
I79
sg895
g1369
sS'block_loop.thisIndex'
p2042
g889
sg38
S'right'
p2043
sg59
g63
sS'trial_loop.thisN'
p2044
I79
sg33
g1373
sg64
g65
sS'trial_loop.thisIndex'
p2045
g60
(g99
S'O\x00\x00\x00'
tRp2046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2047
I0
sg904
g1377
sS'block_loop.thisRepN'
p2048
I0
sg907
g1379
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2049
I0
sg910
g1373
sg55
g11
sS'block_loop.thisTrial'
p2050
Nsg70
Vn
sS'block_loop.thisTrialN'
p2051
I0
sg39
F1.3332589225901756
sg34
g753
(S'\x07\xdf\x07\t\x10/\x08\x00\xeeH'
tRp2052
sa(dp2053
S'trial_loop.thisTrialN'
p2054
I80
sg895
g1565
sS'block_loop.thisIndex'
p2055
g889
sg38
S'right'
p2056
sg59
g63
sS'trial_loop.thisN'
p2057
I80
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p2058
g60
(g99
S'P\x00\x00\x00'
tRp2059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2060
I0
sg904
g1572
sS'block_loop.thisRepN'
p2061
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2062
I0
sg910
g1333
sg55
g11
sS'block_loop.thisTrial'
p2063
Nsg70
Vn
sS'block_loop.thisTrialN'
p2064
I0
sg39
F0.84994517553059268
sg34
g753
(S'\x07\xdf\x07\t\x10/\x0e\x06\x80\x10'
tRp2065
sa(dp2066
S'trial_loop.thisTrialN'
p2067
I81
sg895
g1533
sS'block_loop.thisIndex'
p2068
g889
sg38
S'right'
p2069
sg59
g63
sS'trial_loop.thisN'
p2070
I81
sg33
g1214
sg64
g65
sS'trial_loop.thisIndex'
p2071
g60
(g99
S'Q\x00\x00\x00'
tRp2072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2073
I0
sg904
g1540
sS'block_loop.thisRepN'
p2074
I0
sg907
g1214
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2075
I0
sg910
g1208
sg55
g11
sS'block_loop.thisTrial'
p2076
Nsg70
Vn
sS'block_loop.thisTrialN'
p2077
I0
sg39
F0.71673540394840529
sg34
g753
(S'\x07\xdf\x07\t\x10/\x14\x04\xaf8'
tRp2078
sa(dp2079
S'trial_loop.thisTrialN'
p2080
I82
sg895
g1018
sS'block_loop.thisIndex'
p2081
g889
sg38
S'left'
p2082
sg59
g63
sS'trial_loop.thisN'
p2083
I82
sg33
g1028
sg64
g65
sS'trial_loop.thisIndex'
p2084
g60
(g99
S'R\x00\x00\x00'
tRp2085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2086
I0
sg904
g1026
sS'block_loop.thisRepN'
p2087
I0
sg907
g1028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2088
I0
sg910
g1022
sg55
g11
sS'block_loop.thisTrial'
p2089
Nsg70
Vn
sS'block_loop.thisTrialN'
p2090
I0
sg39
F1.1166751911150641
sg34
g753
(S'\x07\xdf\x07\t\x10/\x1a\x00\xfa\x00'
tRp2091
sa(dp2092
S'trial_loop.thisTrialN'
p2093
I83
sg895
g1593
sS'block_loop.thisIndex'
p2094
g889
sg38
S'right'
p2095
sg59
g63
sS'trial_loop.thisN'
p2096
I83
sg33
g1597
sg64
g65
sS'trial_loop.thisIndex'
p2097
g60
(g99
S'S\x00\x00\x00'
tRp2098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2099
I0
sg904
g1601
sS'block_loop.thisRepN'
p2100
I0
sg907
g1597
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2101
I0
sg910
g1604
sg55
g11
sS'block_loop.thisTrial'
p2102
Nsg70
Vn
sS'block_loop.thisTrialN'
p2103
I0
sg39
F0.90037028610822745
sg34
g753
(S'\x07\xdf\x07\t\x10/ \x034P'
tRp2104
sa(dp2105
S'trial_loop.thisTrialN'
p2106
I84
sg895
g1048
sS'block_loop.thisIndex'
p2107
g889
sg38
S'right'
p2108
sg59
g63
sS'trial_loop.thisN'
p2109
I84
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2110
g60
(g99
S'T\x00\x00\x00'
tRp2111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2112
I0
sg904
g1055
sS'block_loop.thisRepN'
p2113
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2114
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p2115
Nsg70
Vn
sS'block_loop.thisTrialN'
p2116
I0
sg39
F0.86666421482004807
sg34
g753
(S'\x07\xdf\x07\t\x10/&\x02\x1b\x10'
tRp2117
sa(dp2118
S'trial_loop.thisTrialN'
p2119
I85
sg895
g1204
sS'block_loop.thisIndex'
p2120
g889
sg38
S'left'
p2121
sg59
g63
sS'trial_loop.thisN'
p2122
I85
sg33
g1214
sg64
g65
sS'trial_loop.thisIndex'
p2123
g60
(g99
S'U\x00\x00\x00'
tRp2124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2125
I0
sg904
g1212
sS'block_loop.thisRepN'
p2126
I0
sg907
g1214
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2127
I0
sg910
g1208
sg55
g11
sS'block_loop.thisTrial'
p2128
Nsg70
Vn
sS'block_loop.thisTrialN'
p2129
I0
sg39
F1.0166335096946568
sg34
g753
(S'\x07\xdf\x07\t\x10/,\x00\x88\xb8'
tRp2130
sa(dp2131
S'trial_loop.thisTrialN'
p2132
I86
sg895
g1565
sS'block_loop.thisIndex'
p2133
g889
sg38
S'right'
p2134
sg59
g63
sS'trial_loop.thisN'
p2135
I86
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p2136
g60
(g99
S'V\x00\x00\x00'
tRp2137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2138
I0
sg904
g1572
sS'block_loop.thisRepN'
p2139
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2140
I0
sg910
g1333
sg55
g11
sS'block_loop.thisTrial'
p2141
Nsg70
Vn
sS'block_loop.thisTrialN'
p2142
I0
sg39
F0.93336674689635402
sg34
g753
(S'\x07\xdf\x07\t\x10/2\x01W\xc0'
tRp2143
sa(dp2144
S'trial_loop.thisTrialN'
p2145
I87
sg895
S'51-mars.png'
p2146
sS'block_loop.thisIndex'
p2147
g889
sg38
S'left'
p2148
sg59
g63
sS'trial_loop.thisN'
p2149
I87
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p2150
g60
(g99
S'W\x00\x00\x00'
tRp2151
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2152
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p2153
sS'block_loop.thisRepN'
p2154
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2155
I0
sg910
g954
sg55
g11
sS'block_loop.thisTrial'
p2156
Nsg70
Vn
sS'block_loop.thisTrialN'
p2157
I0
sg39
F1.1999918461806374
sg34
g753
(S'\x07\xdf\x07\t\x10/8\x00\xf6\x18'
tRp2158
sa(dp2159
S'trial_loop.thisTrialN'
p2160
I88
sg895
g1153
sS'block_loop.thisIndex'
p2161
g889
sg38
S'right'
p2162
sg59
g63
sS'trial_loop.thisN'
p2163
I88
sg33
g1157
sg64
g65
sS'trial_loop.thisIndex'
p2164
g60
(g99
S'X\x00\x00\x00'
tRp2165
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2166
I0
sg904
g1161
sS'block_loop.thisRepN'
p2167
I0
sg907
g1157
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2168
I0
sg910
g1164
sg55
g11
sS'block_loop.thisTrial'
p2169
Nsg70
Vn
sS'block_loop.thisTrialN'
p2170
I0
sg39
F0.91700864247832214
sg34
g753
(S'\x07\xdf\x07\t\x100\x02\x04a\x18'
tRp2171
sa(dp2172
S'trial_loop.thisTrialN'
p2173
I89
sg895
g916
sS'block_loop.thisIndex'
p2174
g889
sg38
S'right'
p2175
sg59
g63
sS'trial_loop.thisN'
p2176
I89
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p2177
g60
(g99
S'Y\x00\x00\x00'
tRp2178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2179
I0
sg904
g924
sS'block_loop.thisRepN'
p2180
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2181
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p2182
Nsg70
Vn
sS'block_loop.thisTrialN'
p2183
I0
sg39
F1.2498986474347475
sg34
g753
(S'\x07\xdf\x07\t\x100\x08\x03\xc0\xf0'
tRp2184
sa(dp2185
S'trial_loop.thisTrialN'
p2186
I90
sg895
g967
sS'block_loop.thisIndex'
p2187
g889
sg38
S'right'
p2188
sg59
g63
sS'trial_loop.thisN'
p2189
I90
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p2190
g60
(g99
S'Z\x00\x00\x00'
tRp2191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2192
I0
sg904
g975
sS'block_loop.thisRepN'
p2193
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2194
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p2195
Nsg70
Vn
sS'block_loop.thisTrialN'
p2196
I0
sg39
F1.4497040391070186
sg34
g753
(S'\x07\xdf\x07\t\x100\x0e\x07\xe3\x88'
tRp2197
sa(dp2198
S'trial_loop.thisTrialN'
p2199
I91
sg895
g1204
sS'block_loop.thisIndex'
p2200
g889
sg38
S'left'
p2201
sg59
g63
sS'trial_loop.thisN'
p2202
I91
sg33
g1214
sg64
g65
sS'trial_loop.thisIndex'
p2203
g60
(g99
S'[\x00\x00\x00'
tRp2204
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2205
I0
sg904
g1212
sS'block_loop.thisRepN'
p2206
I0
sg907
g1214
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2207
I0
sg910
g1208
sg55
g11
sS'block_loop.thisTrial'
p2208
Nsg70
Vn
sS'block_loop.thisTrialN'
p2209
I0
sg39
F1.3000118601012218
sg34
g753
(S'\x07\xdf\x07\t\x100\x15\x00\x1bX'
tRp2210
sa(dp2211
S'trial_loop.thisTrialN'
p2212
I92
sg895
g1322
sS'block_loop.thisIndex'
p2213
g889
sg38
S'left'
p2214
sg59
g63
sS'trial_loop.thisN'
p2215
I92
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p2216
g60
(g99
S'\\\x00\x00\x00'
tRp2217
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2218
I0
sg904
g1330
sS'block_loop.thisRepN'
p2219
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2220
I0
sg910
g1333
sg55
g11
sS'block_loop.thisTrial'
p2221
Nsg70
Vn
sS'block_loop.thisTrialN'
p2222
I0
sg39
F1.3833182516136731
sg34
g753
(S'\x07\xdf\x07\t\x100\x1b\x054\x08'
tRp2223
sa(dp2224
S'trial_loop.thisTrialN'
p2225
I93
sg895
g2146
sS'block_loop.thisIndex'
p2226
g889
sg38
S'right'
p2227
sg59
g63
sS'trial_loop.thisN'
p2228
I93
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p2229
g60
(g99
S']\x00\x00\x00'
tRp2230
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2231
I0
sg904
g2153
sS'block_loop.thisRepN'
p2232
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2233
I0
sg910
g954
sg55
g11
sS'block_loop.thisTrial'
p2234
Nsg70
Vn
sS'block_loop.thisTrialN'
p2235
I0
sg39
F2.2169261349336011
sg34
g753
(S'\x07\xdf\x07\t\x100!\x0by\x80'
tRp2236
sa(dp2237
S'trial_loop.thisTrialN'
p2238
I94
sg895
g1565
sS'block_loop.thisIndex'
p2239
g889
sg38
S'right'
p2240
sg59
g63
sS'trial_loop.thisN'
p2241
I94
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p2242
g60
(g99
S'^\x00\x00\x00'
tRp2243
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2244
I0
sg904
g1572
sS'block_loop.thisRepN'
p2245
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2246
I0
sg910
g1333
sg55
g11
sS'block_loop.thisTrial'
p2247
Nsg70
Vn
sS'block_loop.thisTrialN'
p2248
I0
sg39
F1.3833122645446565
sg34
g753
(S'\x07\xdf\x07\t\x100)\x00\x17p'
tRp2249
sa(dp2250
S'trial_loop.thisTrialN'
p2251
I95
sg895
g1204
sS'block_loop.thisIndex'
p2252
g889
sg38
S'left'
p2253
sg59
g63
sS'trial_loop.thisN'
p2254
I95
sg33
g1214
sg64
g65
sS'trial_loop.thisIndex'
p2255
g60
(g99
S'_\x00\x00\x00'
tRp2256
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2257
I0
sg904
g1212
sS'block_loop.thisRepN'
p2258
I0
sg907
g1214
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2259
I0
sg910
g1208
sg55
g11
sS'block_loop.thisTrial'
p2260
Nsg70
Vn
sS'block_loop.thisTrialN'
p2261
I0
sg39
F6.0330380851846712
sg34
g753
(S'\x07\xdf\x07\t\x100/\x06`\xd0'
tRp2262
sa(dp2263
S'trial_loop.thisTrialN'
p2264
I96
sg895
g1187
sS'block_loop.thisIndex'
p2265
g889
sg38
S'left'
p2266
sg59
g63
sS'trial_loop.thisN'
p2267
I96
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p2268
g60
(g99
S'`\x00\x00\x00'
tRp2269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2270
I0
sg904
g1195
sS'block_loop.thisRepN'
p2271
I0
sg907
g1197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2272
I0
sg910
g1191
sg55
g11
sS'block_loop.thisTrial'
p2273
Nsg70
Vn
sS'block_loop.thisTrialN'
p2274
I0
sg39
F1.0331658093746228
sg34
g753
(S'\x07\xdf\x07\t\x100:\x07\x89\xb0'
tRp2275
sa(dp2276
S'trial_loop.thisTrialN'
p2277
I97
sg895
g1001
sS'block_loop.thisIndex'
p2278
g889
sg38
S'left'
p2279
sg59
g63
sS'trial_loop.thisN'
p2280
I97
sg33
g1011
sg64
g65
sS'trial_loop.thisIndex'
p2281
g60
(g99
S'a\x00\x00\x00'
tRp2282
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2283
I0
sg904
g1009
sS'block_loop.thisRepN'
p2284
I0
sg907
g1011
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2285
I0
sg910
g1005
sg55
g11
sS'block_loop.thisTrial'
p2286
Nsg70
Vn
sS'block_loop.thisTrialN'
p2287
I0
sg39
F1.2333204468741314
sg34
g753
(S'\x07\xdf\x07\t\x101\x04\x08\x93P'
tRp2288
sa(dp2289
S'trial_loop.thisTrialN'
p2290
I98
sg895
g1138
sS'block_loop.thisIndex'
p2291
g889
sg38
S'right'
p2292
sg59
g63
sS'trial_loop.thisN'
p2293
I98
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p2294
g60
(g99
S'b\x00\x00\x00'
tRp2295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2296
I0
sg904
g1145
sS'block_loop.thisRepN'
p2297
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2298
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p2299
Nsg70
Vn
sS'block_loop.thisTrialN'
p2300
I0
sg39
F0.98309650189548847
sg34
g753
(S'\x07\xdf\x07\t\x101\n\x0c{P'
tRp2301
sa(dp2302
S'trial_loop.thisTrialN'
p2303
I99
sg895
g1339
sS'block_loop.thisIndex'
p2304
g889
sg38
S'right'
p2305
sg59
g63
sS'trial_loop.thisN'
p2306
I99
sg33
g1197
sg64
g65
sS'trial_loop.thisIndex'
p2307
g60
(g99
S'c\x00\x00\x00'
tRp2308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2309
I0
sg904
g1346
sS'block_loop.thisRepN'
p2310
I0
sg907
g1197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2311
I0
sg910
g1191
sg55
g11
sS'block_loop.thisTrial'
p2312
Nsg70
Vn
sS'block_loop.thisTrialN'
p2313
I0
sg39
F0.6666943212330807
sg34
g753
(S'\x07\xdf\x07\t\x101\x10\x0c\xd1@'
tRp2314
sa(dp2315
S'trial_loop.thisTrialN'
p2316
I100
sg895
g1093
sS'block_loop.thisIndex'
p2317
g889
sg38
S'left'
p2318
sg59
g63
sS'trial_loop.thisN'
p2319
I100
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2320
g60
(g99
S'd\x00\x00\x00'
tRp2321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2322
I0
sg904
g1100
sS'block_loop.thisRepN'
p2323
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2324
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p2325
Nsg70
Vn
sS'block_loop.thisTrialN'
p2326
I0
sg39
F1.2330823895172216
sg34
g753
(S'\x07\xdf\x07\t\x101\x16\x08%\xf0'
tRp2327
sa(dp2328
S'trial_loop.thisTrialN'
p2329
I101
sg895
g1001
sS'block_loop.thisIndex'
p2330
g889
sg38
S'right'
p2331
sg59
g63
sS'trial_loop.thisN'
p2332
I101
sg33
g1011
sg64
g65
sS'trial_loop.thisIndex'
p2333
g60
(g99
S'e\x00\x00\x00'
tRp2334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2335
I0
sg904
g1009
sS'block_loop.thisRepN'
p2336
I0
sg907
g1011
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2337
I0
sg910
g1005
sg55
g11
sS'block_loop.thisTrial'
p2338
Nsg70
Vn
sS'block_loop.thisTrialN'
p2339
I0
sg39
F2.8166094473708654
sg34
g753
(S'\x07\xdf\x07\t\x101\x1c\x0cH\x88'
tRp2340
sa(dp2341
S'trial_loop.thisTrialN'
p2342
I102
sg895
g1548
sS'block_loop.thisIndex'
p2343
g889
sg38
S'right'
p2344
sg59
g63
sS'trial_loop.thisN'
p2345
I102
sg33
g1552
sg64
g65
sS'trial_loop.thisIndex'
p2346
g60
(g99
S'f\x00\x00\x00'
tRp2347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2348
I0
sg904
g1556
sS'block_loop.thisRepN'
p2349
I0
sg907
g1552
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2350
I0
sg910
g1559
sg55
g11
sS'block_loop.thisTrial'
p2351
Nsg70
Vn
sS'block_loop.thisTrialN'
p2352
I0
sg39
F1.2332357725790644
sg34
g753
(S'\x07\xdf\x07\t\x101$\t\xf2\xe0'
tRp2353
sa(dp2354
S'trial_loop.thisTrialN'
p2355
I103
sg895
g933
sS'block_loop.thisIndex'
p2356
g889
sg38
S'right'
p2357
sg59
g63
sS'trial_loop.thisN'
p2358
I103
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2359
g60
(g99
S'g\x00\x00\x00'
tRp2360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2361
I0
sg904
g941
sS'block_loop.thisRepN'
p2362
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2363
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p2364
Nsg70
Vn
sS'block_loop.thisTrialN'
p2365
I0
sg39
F1.6833204183640191
sg34
g753
(S'\x07\xdf\x07\t\x101*\x0e\x15x'
tRp2366
sa(dp2367
S'trial_loop.thisTrialN'
p2368
I104
sg895
g1548
sS'block_loop.thisIndex'
p2369
g889
sg38
S'right'
p2370
sg59
g63
sS'trial_loop.thisN'
p2371
I104
sg33
g1552
sg64
g65
sS'trial_loop.thisIndex'
p2372
g60
(g99
S'h\x00\x00\x00'
tRp2373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2374
I0
sg904
g1556
sS'block_loop.thisRepN'
p2375
I0
sg907
g1552
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2376
I0
sg910
g1559
sg55
g11
sS'block_loop.thisTrial'
p2377
Nsg70
Vn
sS'block_loop.thisTrialN'
p2378
I0
sg39
F2.083204611299152
sg34
g753
(S'\x07\xdf\x07\t\x1011\t\xdbp'
tRp2379
sa(dp2380
S'trial_loop.thisTrialN'
p2381
I105
sg895
g2146
sS'block_loop.thisIndex'
p2382
g889
sg38
S'left'
p2383
sg59
g63
sS'trial_loop.thisN'
p2384
I105
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p2385
g60
(g99
S'i\x00\x00\x00'
tRp2386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2387
I0
sg904
g2153
sS'block_loop.thisRepN'
p2388
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2389
I0
sg910
g954
sg55
g11
sS'block_loop.thisTrial'
p2390
Nsg70
Vn
sS'block_loop.thisTrialN'
p2391
I0
sg39
F3.2666031466906134
sg34
g753
(S'\x07\xdf\x07\t\x1018\x0b\x98\xc0'
tRp2392
sa(dp2393
S'trial_loop.thisTrialN'
p2394
I106
sg895
g1638
sS'block_loop.thisIndex'
p2395
g889
sg38
S'left'
p2396
sg59
g63
sS'trial_loop.thisN'
p2397
I106
sg33
g1302
sg64
g65
sS'trial_loop.thisIndex'
p2398
g60
(g99
S'j\x00\x00\x00'
tRp2399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2400
I0
sg904
g1645
sS'block_loop.thisRepN'
p2401
I0
sg907
g1302
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2402
I0
sg910
g1296
sg55
g11
sS'block_loop.thisTrial'
p2403
Nsg70
Vn
sS'block_loop.thisTrialN'
p2404
I0
sg39
F2.2832968121983868
sg34
g753
(S'\x07\xdf\x07\t\x102\x05\x00\xe6x'
tRp2405
sa(dp2406
S'trial_loop.thisTrialN'
p2407
I107
sg895
g1001
sS'block_loop.thisIndex'
p2408
g889
sg38
S'right'
p2409
sg59
g63
sS'trial_loop.thisN'
p2410
I107
sg33
g1011
sg64
g65
sS'trial_loop.thisIndex'
p2411
g60
(g99
S'k\x00\x00\x00'
tRp2412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2413
I0
sg904
g1009
sS'block_loop.thisRepN'
p2414
I0
sg907
g1011
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2415
I0
sg910
g1005
sg55
g11
sS'block_loop.thisTrial'
p2416
Nsg70
Vn
sS'block_loop.thisTrialN'
p2417
I0
sg39
F2.0998529461212456
sg34
g753
(S'\x07\xdf\x07\t\x102\x0c\x05\xbc\xc0'
tRp2418
sa(dp2419
S'trial_loop.thisTrialN'
p2420
I108
sg895
g1221
sS'block_loop.thisIndex'
p2421
g889
sg38
S'left'
p2422
sg59
g63
sS'trial_loop.thisN'
p2423
I108
sg33
g1225
sg64
g65
sS'trial_loop.thisIndex'
p2424
g60
(g99
S'l\x00\x00\x00'
tRp2425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2426
I0
sg904
g1229
sS'block_loop.thisRepN'
p2427
I0
sg907
g1225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2428
I0
sg910
g1232
sg55
g11
sS'block_loop.thisTrial'
p2429
Nsg70
Vn
sS'block_loop.thisTrialN'
p2430
I0
sg39
F1.3003288897853054
sg34
g753
(S'\x07\xdf\x07\t\x102\x13\x07\xb4\xa8'
tRp2431
sa(dp2432
S'trial_loop.thisTrialN'
p2433
I109
sg895
g1063
sS'block_loop.thisIndex'
p2434
g889
sg38
S'right'
p2435
sg59
g63
sS'trial_loop.thisN'
p2436
I109
sg33
g1074
sg64
g65
sS'trial_loop.thisIndex'
p2437
g60
(g99
S'm\x00\x00\x00'
tRp2438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2439
I0
sg904
g1071
sS'block_loop.thisRepN'
p2440
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2441
I0
sg910
g1074
sg55
g11
sS'block_loop.thisTrial'
p2442
Nsg70
Vn
sS'block_loop.thisTrialN'
p2443
I0
sg39
F1.0334534738976799
sg34
g753
(S'\x07\xdf\x07\t\x102\x19\x0c\xc9p'
tRp2444
sa(dp2445
S'trial_loop.thisTrialN'
p2446
I110
sg895
g1292
sS'block_loop.thisIndex'
p2447
g889
sg38
S'right'
p2448
sg59
g63
sS'trial_loop.thisN'
p2449
I110
sg33
g1302
sg64
g65
sS'trial_loop.thisIndex'
p2450
g60
(g99
S'n\x00\x00\x00'
tRp2451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2452
I0
sg904
g1300
sS'block_loop.thisRepN'
p2453
I0
sg907
g1302
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2454
I0
sg910
g1296
sg55
g11
sS'block_loop.thisTrial'
p2455
Nsg70
Vn
sS'block_loop.thisTrialN'
p2456
I0
sg39
F1.1832685304143524
sg34
g753
(S'\x07\xdf\x07\t\x102\x1f\r\xd6\xf8'
tRp2457
sa(dp2458
S'trial_loop.thisTrialN'
p2459
I111
sg895
g967
sS'block_loop.thisIndex'
p2460
g889
sg38
S'right'
p2461
sg59
g63
sS'trial_loop.thisN'
p2462
I111
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p2463
g60
(g99
S'o\x00\x00\x00'
tRp2464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2465
I0
sg904
g975
sS'block_loop.thisRepN'
p2466
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2467
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p2468
Nsg70
Vn
sS'block_loop.thisTrialN'
p2469
I0
sg39
F0.6830586978176143
sg34
g753
(S'\x07\xdf\x07\t\x102&\x01\xc5 '
tRp2470
sa(dp2471
S'trial_loop.thisTrialN'
p2472
I112
sg895
g1339
sS'block_loop.thisIndex'
p2473
g889
sg38
S'right'
p2474
sg59
g63
sS'trial_loop.thisN'
p2475
I112
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p2476
g60
(g99
S'p\x00\x00\x00'
tRp2477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2478
I0
sg904
g1346
sS'block_loop.thisRepN'
p2479
I0
sg907
g1197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2480
I0
sg910
g1191
sg55
g11
sS'block_loop.thisTrial'
p2481
Nsg70
Vn
sS'block_loop.thisTrialN'
p2482
I0
sg39
F1.1500077831951785
sg34
g753
(S'\x07\xdf\x07\t\x102+\x0c\xd5('
tRp2483
sa(dp2484
S'trial_loop.thisTrialN'
p2485
I113
sg895
g1153
sS'block_loop.thisIndex'
p2486
g889
sg38
S'left'
p2487
sg59
g63
sS'trial_loop.thisN'
p2488
I113
sg33
g1157
sg64
g65
sS'trial_loop.thisIndex'
p2489
g60
(g99
S'q\x00\x00\x00'
tRp2490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2491
I0
sg904
g1161
sS'block_loop.thisRepN'
p2492
I0
sg907
g1157
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2493
I0
sg910
g1164
sg55
g11
sS'block_loop.thisTrial'
p2494
Nsg70
Vn
sS'block_loop.thisTrialN'
p2495
I0
sg39
F2.700342802600062
sg34
g753
(S'\x07\xdf\x07\t\x1022\x00J8'
tRp2496
sa(dp2497
S'trial_loop.thisTrialN'
p2498
I114
sg895
g933
sS'block_loop.thisIndex'
p2499
g889
sg38
S'right'
p2500
sg59
g63
sS'trial_loop.thisN'
p2501
I114
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2502
g60
(g99
S'r\x00\x00\x00'
tRp2503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2504
I0
sg904
g941
sS'block_loop.thisRepN'
p2505
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2506
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p2507
Nsg70
Vn
sS'block_loop.thisTrialN'
p2508
I0
sg39
F1.4665713296817557
sg34
g753
(S'\x07\xdf\x07\t\x1029\x0b\x89 '
tRp2509
sa(dp2510
S'trial_loop.thisTrialN'
p2511
I115
sg895
g916
sS'block_loop.thisIndex'
p2512
g889
sg38
S'right'
p2513
sg59
g63
sS'trial_loop.thisN'
p2514
I115
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2515
g60
(g99
S's\x00\x00\x00'
tRp2516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2517
I0
sg904
g924
sS'block_loop.thisRepN'
p2518
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2519
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p2520
Nsg70
Vn
sS'block_loop.thisTrialN'
p2521
I0
sg39
F0.90000650024740025
sg34
g753
(S'\x07\xdf\x07\t\x103\x04\x03\xfb\x88'
tRp2522
sa(dp2523
S'trial_loop.thisTrialN'
p2524
I116
sg895
g1936
sS'block_loop.thisIndex'
p2525
g889
sg38
S'left'
p2526
sg59
g63
sS'trial_loop.thisN'
p2527
I116
sg33
g1597
sg64
g65
sS'trial_loop.thisIndex'
p2528
g60
(g99
S't\x00\x00\x00'
tRp2529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2530
I0
sg904
g1943
sS'block_loop.thisRepN'
p2531
I0
sg907
g1597
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2532
I0
sg910
g1604
sg55
g11
sS'block_loop.thisTrial'
p2533
Nsg70
Vn
sS'block_loop.thisTrialN'
p2534
I0
sg39
F1.5664664704054303
sg34
g753
(S'\x07\xdf\x07\t\x103\n\x02\xe2H'
tRp2535
sa(dp2536
S'trial_loop.thisTrialN'
p2537
I117
sg895
g1548
sS'block_loop.thisIndex'
p2538
g889
sg38
S'right'
p2539
sg59
g63
sS'trial_loop.thisN'
p2540
I117
sg33
g1552
sg64
g65
sS'trial_loop.thisIndex'
p2541
g60
(g99
S'u\x00\x00\x00'
tRp2542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2543
I0
sg904
g1556
sS'block_loop.thisRepN'
p2544
I0
sg907
g1552
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2545
I0
sg910
g1559
sg55
g11
sS'block_loop.thisTrial'
p2546
Nsg70
Vn
sS'block_loop.thisTrialN'
p2547
I0
sg39
F1.4666417490443564
sg34
g753
(S'\x07\xdf\x07\t\x103\x10\x0c\x06 '
tRp2548
sa(dp2549
S'trial_loop.thisTrialN'
p2550
I118
sg895
g1666
sS'block_loop.thisIndex'
p2551
g889
sg38
S'right'
p2552
sg59
g63
sS'trial_loop.thisN'
p2553
I118
sg33
g1028
sg64
g65
sS'trial_loop.thisIndex'
p2554
g60
(g99
S'v\x00\x00\x00'
tRp2555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2556
I0
sg904
g1673
sS'block_loop.thisRepN'
p2557
I0
sg907
g1028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2558
I0
sg910
g1022
sg55
g11
sS'block_loop.thisTrial'
p2559
Nsg70
Vn
sS'block_loop.thisTrialN'
p2560
I0
sg39
F1.4003574566704629
sg34
g753
(S'\x07\xdf\x07\t\x103\x17\x04x\x88'
tRp2561
sa(dp2562
S'trial_loop.thisTrialN'
p2563
I119
sg895
g1048
sS'block_loop.thisIndex'
p2564
g889
sg38
S'left'
p2565
sg59
g63
sS'trial_loop.thisN'
p2566
I119
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2567
g60
(g99
S'w\x00\x00\x00'
tRp2568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2569
I0
sg904
g1055
sS'block_loop.thisRepN'
p2570
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2571
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p2572
Nsg70
Vn
sS'block_loop.thisTrialN'
p2573
I0
sg39
F1.8832264498523728
sg34
g753
(S'\x07\xdf\x07\t\x103\x1d\x0b\x00h'
tRp2574
sa(dp2575
S'trial_loop.thisTrialN'
p2576
I120
sg895
g1264
sS'block_loop.thisIndex'
p2577
g889
sg38
S'left'
p2578
sg59
g63
sS'trial_loop.thisN'
p2579
I120
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2580
g60
(g99
S'x\x00\x00\x00'
tRp2581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2582
I0
sg904
g1271
sS'block_loop.thisRepN'
p2583
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2584
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p2585
Nsg70
Vn
sS'block_loop.thisTrialN'
p2586
I0
sg39
F2.1331866785949387
sg34
g753
(S'\x07\xdf\x07\t\x103$\t\xdfX'
tRp2587
sa(dp2588
S'trial_loop.thisTrialN'
p2589
I121
sg895
g1001
sS'block_loop.thisIndex'
p2590
g889
sg38
S'right'
p2591
sg59
g63
sS'trial_loop.thisN'
p2592
I121
sg33
g1011
sg64
g65
sS'trial_loop.thisIndex'
p2593
g60
(g99
S'y\x00\x00\x00'
tRp2594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2595
I0
sg904
g1009
sS'block_loop.thisRepN'
p2596
I0
sg907
g1011
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2597
I0
sg910
g1005
sg55
g11
sS'block_loop.thisTrial'
p2598
Nsg70
Vn
sS'block_loop.thisTrialN'
p2599
I0
sg39
F1.2999796439580678
sg34
g753
(S'\x07\xdf\x07\t\x103+\x0cPX'
tRp2600
sa(dp2601
S'trial_loop.thisTrialN'
p2602
I122
sg895
g1789
sS'block_loop.thisIndex'
p2603
g889
sg38
S'left'
p2604
sg59
g63
sS'trial_loop.thisN'
p2605
I122
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2606
g60
(g99
S'z\x00\x00\x00'
tRp2607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2608
I0
sg904
g1796
sS'block_loop.thisRepN'
p2609
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2610
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p2611
Nsg70
Vn
sS'block_loop.thisTrialN'
p2612
I0
sg39
F1.1000011974138033
sg34
g753
(S'\x07\xdf\x07\t\x1032\x02&\xc8'
tRp2613
sa(dp2614
S'trial_loop.thisTrialN'
p2615
I123
sg895
g1466
sS'block_loop.thisIndex'
p2616
g889
sg38
S'right'
p2617
sg59
g63
sS'trial_loop.thisN'
p2618
I123
sg33
g1180
sg64
g65
sS'trial_loop.thisIndex'
p2619
g60
(g99
S'{\x00\x00\x00'
tRp2620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2621
I0
sg904
g1473
sS'block_loop.thisRepN'
p2622
I0
sg907
g1180
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2623
I0
sg910
g1174
sg55
g11
sS'block_loop.thisTrial'
p2624
Nsg70
Vn
sS'block_loop.thisTrialN'
p2625
I0
sg39
F2.066704242664855
sg34
g753
(S'\x07\xdf\x07\t\x1038\x04&\x80'
tRp2626
sa(dp2627
S'trial_loop.thisTrialN'
p2628
I124
sg895
g984
sS'block_loop.thisIndex'
p2629
g889
sg38
S'left'
p2630
sg59
g63
sS'trial_loop.thisN'
p2631
I124
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2632
g60
(g99
S'|\x00\x00\x00'
tRp2633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2634
I0
sg904
g992
sS'block_loop.thisRepN'
p2635
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2636
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p2637
Nsg70
Vn
sS'block_loop.thisTrialN'
p2638
I0
sg39
F1.6166669232552522
sg34
g753
(S'\x07\xdf\x07\t\x104\x03\x05\xa5P'
tRp2639
sa(dp2640
S'trial_loop.thisTrialN'
p2641
I125
sg895
g1354
sS'block_loop.thisIndex'
p2642
g889
sg38
S'left'
p2643
sg59
g63
sS'trial_loop.thisN'
p2644
I125
sg33
g1011
sg64
g65
sS'trial_loop.thisIndex'
p2645
g60
(g99
S'}\x00\x00\x00'
tRp2646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2647
I0
sg904
g1361
sS'block_loop.thisRepN'
p2648
I0
sg907
g1011
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2649
I0
sg910
g1005
sg55
g11
sS'block_loop.thisTrial'
p2650
Nsg70
Vn
sS'block_loop.thisTrialN'
p2651
I0
sg39
F1.4166471374082903
sg34
g753
(S'\x07\xdf\x07\t\x104\n\x00:\x98'
tRp2652
sa(dp2653
S'trial_loop.thisTrialN'
p2654
I126
sg895
g1638
sS'block_loop.thisIndex'
p2655
g889
sg38
S'left'
p2656
sg59
g63
sS'trial_loop.thisN'
p2657
I126
sg33
g1302
sg64
g65
sS'trial_loop.thisIndex'
p2658
g60
(g99
S'~\x00\x00\x00'
tRp2659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2660
I0
sg904
g1645
sS'block_loop.thisRepN'
p2661
I0
sg907
g1302
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2662
I0
sg910
g1296
sg55
g11
sS'block_loop.thisTrial'
p2663
Nsg70
Vn
sS'block_loop.thisTrialN'
p2664
I0
sg39
F1.7332933625039004
sg34
g753
(S'\x07\xdf\x07\t\x104\x10\x07;\x90'
tRp2665
sa(dp2666
S'trial_loop.thisTrialN'
p2667
I127
sg895
g1709
sS'block_loop.thisIndex'
p2668
g889
sg38
S'right'
p2669
sg59
g63
sS'trial_loop.thisN'
p2670
I127
sg33
g1225
sg64
g65
sS'trial_loop.thisIndex'
p2671
g60
(g99
S'\x7f\x00\x00\x00'
tRp2672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2673
I0
sg904
g1716
sS'block_loop.thisRepN'
p2674
I0
sg907
g1225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2675
I0
sg910
g1232
sg55
g11
sS'block_loop.thisTrial'
p2676
Nsg70
Vn
sS'block_loop.thisTrialN'
p2677
I0
sg39
F2.0332567558398296
sg34
g753
(S'\x07\xdf\x07\t\x104\x17\x03\xb9 '
tRp2678
sa(dp2679
S'trial_loop.thisTrialN'
p2680
I128
sg895
g916
sS'block_loop.thisIndex'
p2681
g889
sg38
S'right'
p2682
sg59
g63
sS'trial_loop.thisN'
p2683
I128
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2684
g60
(g99
S'\x80\x00\x00\x00'
tRp2685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2686
I0
sg904
g924
sS'block_loop.thisRepN'
p2687
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2688
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p2689
Nsg70
Vn
sS'block_loop.thisTrialN'
p2690
I0
sg39
F2.6002771728926746
sg34
g753
(S'\x07\xdf\x07\t\x104\x1e\x04\xbe\xd8'
tRp2691
sa(dp2692
S'trial_loop.thisTrialN'
p2693
I129
sg895
g1908
sS'block_loop.thisIndex'
p2694
g889
sg38
S'left'
p2695
sg59
g63
sS'trial_loop.thisN'
p2696
I129
sg33
g1164
sg64
g65
sS'trial_loop.thisIndex'
p2697
g60
(g99
S'\x81\x00\x00\x00'
tRp2698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2699
I0
sg904
g1915
sS'block_loop.thisRepN'
p2700
I0
sg907
g1157
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2701
I0
sg910
g1164
sg55
g11
sS'block_loop.thisTrial'
p2702
Nsg70
Vn
sS'block_loop.thisTrialN'
p2703
I0
sg39
F2.2999403003450425
sg34
g753
(S'\x07\xdf\x07\t\x104%\x0eW\xe0'
tRp2704
sa(dp2705
S'trial_loop.thisTrialN'
p2706
I130
sg895
g1593
sS'block_loop.thisIndex'
p2707
g889
sg38
S'right'
p2708
sg59
g63
sS'trial_loop.thisN'
p2709
I130
sg33
g1597
sg64
g65
sS'trial_loop.thisIndex'
p2710
g60
(g99
S'\x82\x00\x00\x00'
tRp2711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2712
I0
sg904
g1601
sS'block_loop.thisRepN'
p2713
I0
sg907
g1597
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2714
I0
sg910
g1604
sg55
g11
sS'block_loop.thisTrial'
p2715
Nsg70
Vn
sS'block_loop.thisTrialN'
p2716
I0
sg39
F1.0167053545519593
sg34
g753
(S'\x07\xdf\x07\t\x104-\x04&\x80'
tRp2717
sa(dp2718
S'trial_loop.thisTrialN'
p2719
I131
sg895
g1048
sS'block_loop.thisIndex'
p2720
g889
sg38
S'left'
p2721
sg59
g63
sS'trial_loop.thisN'
p2722
I131
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p2723
g60
(g99
S'\x83\x00\x00\x00'
tRp2724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2725
I0
sg904
g1055
sS'block_loop.thisRepN'
p2726
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2727
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p2728
Nsg70
Vn
sS'block_loop.thisTrialN'
p2729
I0
sg39
F1.1332950160795008
sg34
g753
(S'\x07\xdf\x07\t\x1043\x04\xf1\xa0'
tRp2730
sa(dp2731
S'trial_loop.thisTrialN'
p2732
I132
sg895
g1063
sS'block_loop.thisIndex'
p2733
g889
sg38
S'right'
p2734
sg59
g63
sS'trial_loop.thisN'
p2735
I132
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p2736
g60
(g99
S'\x84\x00\x00\x00'
tRp2737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2738
I0
sg904
g1071
sS'block_loop.thisRepN'
p2739
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2740
I0
sg910
g1074
sg55
g11
sS'block_loop.thisTrial'
p2741
Nsg70
Vn
sS'block_loop.thisTrialN'
p2742
I0
sg39
F1.099983806398086
sg34
g753
(S'\x07\xdf\x07\t\x1049\x07jp'
tRp2743
sa(dp2744
S'trial_loop.thisTrialN'
p2745
I133
sg895
g1322
sS'block_loop.thisIndex'
p2746
g889
sg38
S'left'
p2747
sg59
g63
sS'trial_loop.thisN'
p2748
I133
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p2749
g60
(g99
S'\x85\x00\x00\x00'
tRp2750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2751
I0
sg904
g1330
sS'block_loop.thisRepN'
p2752
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2753
I0
sg910
g1333
sg55
g11
sS'block_loop.thisTrial'
p2754
Nsg70
Vn
sS'block_loop.thisTrialN'
p2755
I0
sg39
F0.76678418432129547
sg34
g753
(S'\x07\xdf\x07\t\x105\x03\tj('
tRp2756
sa(dp2757
S'trial_loop.thisTrialN'
p2758
I134
sg895
g1936
sS'block_loop.thisIndex'
p2759
g889
sg38
S'left'
p2760
sg59
g63
sS'trial_loop.thisN'
p2761
I134
sg33
g1597
sg64
g65
sS'trial_loop.thisIndex'
p2762
g60
(g99
S'\x86\x00\x00\x00'
tRp2763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2764
I0
sg904
g1943
sS'block_loop.thisRepN'
p2765
I0
sg907
g1597
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2766
I0
sg910
g1604
sg55
g11
sS'block_loop.thisTrial'
p2767
Nsg70
Vn
sS'block_loop.thisTrialN'
p2768
I0
sg39
F0.83333162274357164
sg34
g753
(S'\x07\xdf\x07\t\x105\t\x06h\xa0'
tRp2769
sa(dp2770
S'trial_loop.thisTrialN'
p2771
I135
sg895
g1108
sS'block_loop.thisIndex'
p2772
g889
sg38
S'left'
p2773
sg59
g63
sS'trial_loop.thisN'
p2774
I135
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p2775
g60
(g99
S'\x87\x00\x00\x00'
tRp2776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2777
I0
sg904
g1116
sS'block_loop.thisRepN'
p2778
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2779
I0
sg910
g1119
sg55
g11
sS'block_loop.thisTrial'
p2780
Nsg70
Vn
sS'block_loop.thisTrialN'
p2781
I0
sg39
F0.88323614321052446
sg34
g753
(S'\x07\xdf\x07\t\x105\x0f\x04]0'
tRp2782
sa(dp2783
S'trial_loop.thisTrialN'
p2784
I136
sg895
g1138
sS'block_loop.thisIndex'
p2785
g889
sg38
S'right'
p2786
sg59
g63
sS'trial_loop.thisN'
p2787
I136
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2788
g60
(g99
S'\x88\x00\x00\x00'
tRp2789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2790
I0
sg904
g1145
sS'block_loop.thisRepN'
p2791
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2792
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p2793
Nsg70
Vn
sS'block_loop.thisTrialN'
p2794
I0
sg39
F1.4165707309766731
sg34
g753
(S'\x07\xdf\x07\t\x105\x15\x03\x05p'
tRp2795
sa(dp2796
S'trial_loop.thisTrialN'
p2797
I137
sg895
g1339
sS'block_loop.thisIndex'
p2798
g889
sg38
S'right'
p2799
sg59
g63
sS'trial_loop.thisN'
p2800
I137
sg33
g1197
sg64
g65
sS'trial_loop.thisIndex'
p2801
g60
(g99
S'\x89\x00\x00\x00'
tRp2802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2803
I0
sg904
g1346
sS'block_loop.thisRepN'
p2804
I0
sg907
g1197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2805
I0
sg910
g1191
sg55
g11
sS'block_loop.thisTrial'
p2806
Nsg70
Vn
sS'block_loop.thisTrialN'
p2807
I0
sg39
F0.81666561180099961
sg34
g753
(S'\x07\xdf\x07\t\x105\x1b\n\x06h'
tRp2808
sa(dp2809
S'trial_loop.thisTrialN'
p2810
I138
sg895
g1533
sS'block_loop.thisIndex'
p2811
g889
sg38
S'right'
p2812
sg59
g63
sS'trial_loop.thisN'
p2813
I138
sg33
g1208
sg64
g65
sS'trial_loop.thisIndex'
p2814
g60
(g99
S'\x8a\x00\x00\x00'
tRp2815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2816
I0
sg904
g1540
sS'block_loop.thisRepN'
p2817
I0
sg907
g1214
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2818
I0
sg910
g1208
sg55
g11
sS'block_loop.thisTrial'
p2819
Nsg70
Vn
sS'block_loop.thisTrialN'
p2820
I0
sg39
F0.84996370694352663
sg34
g753
(S'\x07\xdf\x07\t\x105!\x07\xbcx'
tRp2821
sa(dp2822
S'trial_loop.thisTrialN'
p2823
I139
sg895
g1908
sS'block_loop.thisIndex'
p2824
g889
sg38
S'left'
p2825
sg59
g63
sS'trial_loop.thisN'
p2826
I139
sg33
g1157
sg64
g65
sS'trial_loop.thisIndex'
p2827
g60
(g99
S'\x8b\x00\x00\x00'
tRp2828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2829
I0
sg904
g1915
sS'block_loop.thisRepN'
p2830
I0
sg907
g1157
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2831
I0
sg910
g1164
sg55
g11
sS'block_loop.thisTrial'
p2832
Nsg70
Vn
sS'block_loop.thisTrialN'
p2833
I0
sg39
F1.1333437679422786
sg34
g753
(S"\x07\xdf\x07\t\x105'\x05\xeb\xa0"
tRp2834
sa(dp2835
S'trial_loop.thisTrialN'
p2836
I140
sg895
g1354
sS'block_loop.thisIndex'
p2837
g889
sg38
S'left'
p2838
sg59
g63
sS'trial_loop.thisN'
p2839
I140
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2840
g60
(g99
S'\x8c\x00\x00\x00'
tRp2841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2842
I0
sg904
g1361
sS'block_loop.thisRepN'
p2843
I0
sg907
g1011
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2844
I0
sg910
g1005
sg55
g11
sS'block_loop.thisTrial'
p2845
Nsg70
Vn
sS'block_loop.thisTrialN'
p2846
I0
sg39
F1.2832218312578334
sg34
g753
(S'\x07\xdf\x07\t\x105-\x08dp'
tRp2847
sa(dp2848
S'trial_loop.thisTrialN'
p2849
I141
sg895
g1610
sS'block_loop.thisIndex'
p2850
g889
sg38
S'left'
p2851
sg59
g63
sS'trial_loop.thisN'
p2852
I141
sg33
g1379
sg64
g65
sS'trial_loop.thisIndex'
p2853
g60
(g99
S'\x8d\x00\x00\x00'
tRp2854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2855
I0
sg904
g1617
sS'block_loop.thisRepN'
p2856
I0
sg907
g1379
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2857
I0
sg910
g1373
sg55
g11
sS'block_loop.thisTrial'
p2858
Nsg70
Vn
sS'block_loop.thisTrialN'
p2859
I0
sg39
F1.9833405463286908
sg34
g753
(S'\x07\xdf\x07\t\x1053\r>\xa0'
tRp2860
sa(dp2861
S'trial_loop.thisTrialN'
p2862
I142
sg895
g1466
sS'block_loop.thisIndex'
p2863
g889
sg38
S'right'
p2864
sg59
g63
sS'trial_loop.thisN'
p2865
I142
sg33
g1180
sg64
g65
sS'trial_loop.thisIndex'
p2866
g60
(g99
S'\x8e\x00\x00\x00'
tRp2867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2868
I0
sg904
g1473
sS'block_loop.thisRepN'
p2869
I0
sg907
g1180
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2870
I0
sg910
g1174
sg55
g11
sS'block_loop.thisTrial'
p2871
Nsg70
Vn
sS'block_loop.thisTrialN'
p2872
I0
sg39
F2.916626325208199
sg34
g753
(S'\x07\xdf\x07\t\x105:\r\x8c\xc0'
tRp2873
sa(dp2874
S'trial_loop.thisTrialN'
p2875
I143
sg895
S'4-corn.png'
p2876
sS'block_loop.thisIndex'
p2877
g889
sg38
S'left'
p2878
sg59
g63
sS'trial_loop.thisN'
p2879
I143
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p2880
g60
(g99
S'\x8f\x00\x00\x00'
tRp2881
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2882
I0
sg904
S'10-bounty_redo.png'
p2883
sS'block_loop.thisRepN'
p2884
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2885
I0
sg910
g1074
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vn
sS'block_loop.thisTrialN'
p2887
I0
sg39
F1.2333503822301282
sg34
g753
(S'\x07\xdf\x07\t\x106\x06\x0c\xe0\xe0'
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g896
sS'block_loop.thisIndex'
p2891
g889
sg38
S'left'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g905
sS'block_loop.thisRepN'
p2897
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2898
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vn
sS'block_loop.thisTrialN'
p2900
I0
sg39
F0.93326610707663349
sg34
g753
(S'\x07\xdf\x07\t\x106\r\x01\x86\xa0'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g1593
sS'block_loop.thisIndex'
p2904
g889
sg38
S'right'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g1604
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g1601
sS'block_loop.thisRepN'
p2910
I0
sg907
g1597
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2911
I0
sg910
g1604
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vn
sS'block_loop.thisTrialN'
p2913
I0
sg39
F0.98328381169994827
sg34
g753
(S'\x07\xdf\x07\t\x106\x13\x01$\xf8'
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g2876
sS'block_loop.thisIndex'
p2917
g889
sg38
S'left'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g2883
sS'block_loop.thisRepN'
p2923
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2924
I0
sg910
g1074
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vn
sS'block_loop.thisTrialN'
p2926
I0
sg39
F1.083346590417932
sg34
g753
(S'\x07\xdf\x07\t\x106\x19\x01<h'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g1369
sS'block_loop.thisIndex'
p2930
g889
sg38
S'right'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g1379
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g1377
sS'block_loop.thisRepN'
p2936
I0
sg907
g1379
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2937
I0
sg910
g1373
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vn
sS'block_loop.thisTrialN'
p2939
I0
sg39
F0.98329635604022769
sg34
g753
(S'\x07\xdf\x07\t\x106\x1f\x0388'
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g1681
sS'block_loop.thisIndex'
p2943
g889
sg38
S'left'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g1559
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g1688
sS'block_loop.thisRepN'
p2949
I0
sg907
g1552
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2950
I0
sg910
g1559
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vn
sS'block_loop.thisTrialN'
p2952
I0
sg39
F1.6336750525588286
sg34
g753
(S'\x07\xdf\x07\t\x106%\x03O\xa8'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g1093
sS'block_loop.thisIndex'
p2956
g889
sg38
S'left'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g1100
sS'block_loop.thisRepN'
p2962
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2963
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vn
sS'block_loop.thisTrialN'
p2965
I0
sg39
F0.86637483970480389
sg34
g753
(S'\x07\xdf\x07\t\x106+\r\xa40'
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g2146
sS'block_loop.thisIndex'
p2969
g889
sg38
S'right'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g2153
sS'block_loop.thisRepN'
p2975
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2976
I0
sg910
g954
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vn
sS'block_loop.thisTrialN'
p2978
I0
sg39
F2.0999783895240398
sg34
g753
(S'\x07\xdf\x07\t\x1061\x0c\x11\xd8'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g1369
sS'block_loop.thisIndex'
p2982
g889
sg38
S'right'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g1373
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g1377
sS'block_loop.thisRepN'
p2988
I0
sg907
g1379
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2989
I0
sg910
g1373
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vn
sS'block_loop.thisTrialN'
p2991
I0
sg39
F1.7000166497600731
sg34
g753
(S'\x07\xdf\x07\t\x1068\x0e\t\xc0'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g1908
sS'block_loop.thisIndex'
p2995
g889
sg38
S'right'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g1157
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g1915
sS'block_loop.thisRepN'
p3001
I0
sg907
g1157
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3002
I0
sg910
g1164
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vn
sS'block_loop.thisTrialN'
p3004
I0
sg39
F1.5833152295708715
sg34
g753
(S'\x07\xdf\x07\t\x107\x03\n\x0e8'
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g1789
sS'block_loop.thisIndex'
p3008
g889
sg38
S'left'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g1796
sS'block_loop.thisRepN'
p3014
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3015
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vn
sS'block_loop.thisTrialN'
p3017
I0
sg39
F1.6499906772733084
sg34
g753
(S'\x07\xdf\x07\t\x107\n\x04.P'
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g1709
sS'block_loop.thisIndex'
p3021
g889
sg38
S'right'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g1225
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g1716
sS'block_loop.thisRepN'
p3027
I0
sg907
g1225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3028
I0
sg910
g1232
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vn
sS'block_loop.thisTrialN'
p3030
I0
sg39
F1.2165341243126022
sg34
g753
(S'\x07\xdf\x07\t\x107\x10\x0e\x82\xd8'
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g1789
sS'block_loop.thisIndex'
p3034
g889
sg38
S'left'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g1796
sS'block_loop.thisRepN'
p3040
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3041
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vn
sS'block_loop.thisTrialN'
p3043
I0
sg39
F1.699984433613281
sg34
g753
(S'\x07\xdf\x07\t\x107\x17\x03$\xb0'
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g1322
sS'block_loop.thisIndex'
p3047
g889
sg38
S'right'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g1330
sS'block_loop.thisRepN'
p3053
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3054
I0
sg910
g1333
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vn
sS'block_loop.thisTrialN'
p3056
I0
sg39
F1.083316084866965
sg34
g753
(S'\x07\xdf\x07\t\x107\x1d\x0e0\xd0'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g967
sS'block_loop.thisIndex'
p3060
g889
sg38
S'right'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g975
sS'block_loop.thisRepN'
p3066
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3067
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vn
sS'block_loop.thisTrialN'
p3069
I0
sg39
F0.7997373101170524
sg34
g753
(S'\x07\xdf\x07\t\x107$\x00\xeeH'
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g1108
sS'block_loop.thisIndex'
p3073
g889
sg38
S'left'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g1119
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g1116
sS'block_loop.thisRepN'
p3079
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3080
I0
sg910
g1119
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vn
sS'block_loop.thisTrialN'
p3082
I0
sg39
F0.93363530980786891
sg34
g753
(S'\x07\xdf\x07\t\x107)\r\xa8\x18'
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g1292
sS'block_loop.thisIndex'
p3086
g889
sg38
S'right'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g1302
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g1300
sS'block_loop.thisRepN'
p3092
I0
sg907
g1302
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3093
I0
sg910
g1296
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vn
sS'block_loop.thisTrialN'
p3095
I0
sg39
F1.7499491098933504
sg34
g753
(S'\x07\xdf\x07\t\x107/\r\x07\xf0'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g1610
sS'block_loop.thisIndex'
p3099
g889
sg38
S'left'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g1379
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g1617
sS'block_loop.thisRepN'
p3105
I0
sg907
g1379
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3106
I0
sg910
g1373
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vn
sS'block_loop.thisTrialN'
p3108
I0
sg39
F0.96670703663403401
sg34
g753
(S'\x07\xdf\x07\t\x1076\t\xc4\x00'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g1063
sS'block_loop.thisIndex'
p3112
g889
sg38
S'right'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g1071
sS'block_loop.thisRepN'
p3118
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3119
I0
sg910
g1074
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vn
sS'block_loop.thisTrialN'
p3121
I0
sg39
F1.7166176582104526
sg34
g753
(S'\x07\xdf\x07\t\x108\x00\t\xa0\xd8'
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g1681
sS'block_loop.thisIndex'
p3125
g889
sg38
S'left'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g1552
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g1688
sS'block_loop.thisRepN'
p3131
I0
sg907
g1552
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3132
I0
sg910
g1559
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vn
sS'block_loop.thisTrialN'
p3134
I0
sg39
F0.76668725078707212
sg34
g753
(S'\x07\xdf\x07\t\x108\x07\x05\xdf\xe8'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g1789
sS'block_loop.thisIndex'
p3138
g889
sg38
S'left'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g1796
sS'block_loop.thisRepN'
p3144
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3145
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vn
sS'block_loop.thisTrialN'
p3147
I0
sg39
F1.3836848884602659
sg34
g753
(S'\x07\xdf\x07\t\x108\r\x02\xe2H'
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g1018
sS'block_loop.thisIndex'
p3151
g889
sg38
S'left'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g1028
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g1026
sS'block_loop.thisRepN'
p3157
I0
sg907
g1028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3158
I0
sg910
g1022
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vn
sS'block_loop.thisTrialN'
p3160
I0
sg39
F2.5998617841833038
sg34
g753
(S"\x07\xdf\x07\t\x108\x13\t'\xc0"
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g1610
sS'block_loop.thisIndex'
p3164
g889
sg38
S'left'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g1379
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g1617
sS'block_loop.thisRepN'
p3170
I0
sg907
g1379
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3171
I0
sg910
g1373
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vn
sS'block_loop.thisTrialN'
p3173
I0
sg39
F0.88326408287321101
sg34
g753
(S'\x07\xdf\x07\t\x108\x1b\x03\xb9 '
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g1108
sS'block_loop.thisIndex'
p3177
g889
sg38
S'left'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g1116
sS'block_loop.thisRepN'
p3183
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3184
I0
sg910
g1119
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vn
sS'block_loop.thisTrialN'
p3186
I0
sg39
F1.4331694586362573
sg34
g753
(S'\x07\xdf\x07\t\x108!\x02eH'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g896
sS'block_loop.thisIndex'
p3190
g889
sg38
S'right'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g905
sS'block_loop.thisRepN'
p3196
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3197
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vn
sS'block_loop.thisTrialN'
p3199
I0
sg39
F1.8833518932551669
sg34
g753
(S"\x07\xdf\x07\t\x108'\tbX"
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g1638
sS'block_loop.thisIndex'
p3203
g889
sg38
S'left'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g1296
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1645
sS'block_loop.thisRepN'
p3209
I0
sg907
g1302
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3210
I0
sg910
g1296
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vn
sS'block_loop.thisTrialN'
p3212
I0
sg39
F1.8336167213783483
sg34
g753
(S'\x07\xdf\x07\t\x108.\x08E0'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g984
sS'block_loop.thisIndex'
p3216
g889
sg38
S'left'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g992
sS'block_loop.thisRepN'
p3222
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3223
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vn
sS'block_loop.thisTrialN'
p3225
I0
sg39
F1.8166313999645354
sg34
g753
(S'\x07\xdf\x07\t\x1085\x061\xf0'
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g1369
sS'block_loop.thisIndex'
p3229
g889
sg38
S'right'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g1379
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g1377
sS'block_loop.thisRepN'
p3235
I0
sg907
g1379
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3236
I0
sg910
g1373
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vn
sS'block_loop.thisTrialN'
p3238
I0
sg39
F1.5332775680399209
sg34
g753
(S'\x07\xdf\x07\t\x109\x00\x03\xe00'
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g1093
sS'block_loop.thisIndex'
p3242
g889
sg38
S'left'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g1100
sS'block_loop.thisRepN'
p3248
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3249
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vn
sS'block_loop.thisTrialN'
p3251
I0
sg39
F0.83304851979846717
sg34
g753
(S'\x07\xdf\x07\t\x109\x06\x0c\x8a\xf0'
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g1709
sS'block_loop.thisIndex'
p3255
g889
sg38
S'right'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g1225
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g1716
sS'block_loop.thisRepN'
p3261
I0
sg907
g1225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3262
I0
sg910
g1232
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vn
sS'block_loop.thisTrialN'
p3264
I0
sg39
F1.4833146023556765
sg34
g753
(S'\x07\xdf\x07\t\x109\x0c\n{\x98'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g2876
sS'block_loop.thisIndex'
p3268
g889
sg38
S'left'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g2883
sS'block_loop.thisRepN'
p3274
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3275
I0
sg910
g1074
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vn
sS'block_loop.thisTrialN'
p3277
I0
sg39
F1.0837001127292751
sg34
g753
(S'\x07\xdf\x07\t\x109\x13\x03,\x80'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g1548
sS'block_loop.thisIndex'
p3281
g889
sg38
S'right'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g1552
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g1556
sS'block_loop.thisRepN'
p3287
I0
sg907
g1552
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3288
I0
sg910
g1559
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vn
sS'block_loop.thisTrialN'
p3290
I0
sg39
F1.0499980328204401
sg34
g753
(S'\x07\xdf\x07\t\x109\x19\x04\xed\xb8'
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g2876
sS'block_loop.thisIndex'
p3294
g889
sg38
S'left'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g2883
sS'block_loop.thisRepN'
p3300
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3301
I0
sg910
g1074
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vn
sS'block_loop.thisTrialN'
p3303
I0
sg39
F0.749990734297171
sg34
g753
(S'\x07\xdf\x07\t\x109\x1f\x065\xd8'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g1681
sS'block_loop.thisIndex'
p3307
g889
sg38
S'left'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g1552
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g1688
sS'block_loop.thisRepN'
p3313
I0
sg907
g1552
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3314
I0
sg910
g1559
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vn
sS'block_loop.thisTrialN'
p3316
I0
sg39
F1.1332995776574535
sg34
g753
(S'\x07\xdf\x07\t\x109%\x02\xbb8'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g1170
sS'block_loop.thisIndex'
p3320
g889
sg38
S'right'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g1174
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g1178
sS'block_loop.thisRepN'
p3326
I0
sg907
g1180
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3327
I0
sg910
g1174
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vn
sS'block_loop.thisTrialN'
p3329
I0
sg39
F1.3499377629668743
sg34
g753
(S'\x07\xdf\x07\t\x109+\x05r\x88'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g896
sS'block_loop.thisIndex'
p3333
g889
sg38
S'right'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g905
sS'block_loop.thisRepN'
p3339
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3340
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vn
sS'block_loop.thisTrialN'
p3342
I0
sg39
F1.6837372325717297
sg34
g753
(S'\x07\xdf\x07\t\x1091\x0b>\xe8'
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g1063
sS'block_loop.thisIndex'
p3346
g889
sg38
S'right'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g1071
sS'block_loop.thisRepN'
p3352
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3353
I0
sg910
g1074
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vn
sS'block_loop.thisTrialN'
p3355
I0
sg39
F2.8999474848315003
sg34
g753
(S'\x07\xdf\x07\t\x1098\x07\x08\xc8'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g1936
sS'block_loop.thisIndex'
p3359
g889
sg38
S'left'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g1597
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g1943
sS'block_loop.thisRepN'
p3365
I0
sg907
g1597
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3366
I0
sg910
g1604
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vn
sS'block_loop.thisTrialN'
p3368
I0
sg39
F1.9999791877999087
sg34
g753
(S'\x07\xdf\x07\t\x10:\x04\x05\xe3\xd0'
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g1018
sS'block_loop.thisIndex'
p3372
g889
sg38
S'left'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g1028
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g1026
sS'block_loop.thisRepN'
p3378
I0
sg907
g1028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3379
I0
sg910
g1022
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vn
sS'block_loop.thisTrialN'
p3381
I0
sg39
F4.3331594231640338
sg34
g753
(S'\x07\xdf\x07\t\x10:\x0b\x06l\x88'
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g1709
sS'block_loop.thisIndex'
p3385
g889
sg38
S'right'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g1225
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g1716
sS'block_loop.thisRepN'
p3391
I0
sg907
g1225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3392
I0
sg910
g1232
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vn
sS'block_loop.thisTrialN'
p3394
I0
sg39
F1.2501538107135275
sg34
g753
(S'\x07\xdf\x07\t\x10:\x14\x0b\xea\xc8'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g2876
sS'block_loop.thisIndex'
p3398
g889
sg38
S'left'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g2883
sS'block_loop.thisRepN'
p3404
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3405
I0
sg910
g1074
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vn
sS'block_loop.thisTrialN'
p3407
I0
sg39
F2.1499744266511698
sg34
g753
(S'\x07\xdf\x07\t\x10:\x1b\x01\t\xa0'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g1533
sS'block_loop.thisIndex'
p3411
g889
sg38
S'right'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g1214
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g1540
sS'block_loop.thisRepN'
p3417
I0
sg907
g1214
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3418
I0
sg910
g1208
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vn
sS'block_loop.thisTrialN'
p3420
I0
sg39
F1.0166543218947481
sg34
g753
(S'\x07\xdf\x07\t\x10:"\x03\xf7\xa0'
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g1170
sS'block_loop.thisIndex'
p3424
g889
sg38
S'right'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g1174
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g1178
sS'block_loop.thisRepN'
p3430
I0
sg907
g1180
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3431
I0
sg910
g1174
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vn
sS'block_loop.thisTrialN'
p3433
I0
sg39
F1.2664346533965727
sg34
g753
(S'\x07\xdf\x07\t\x10:(\x04\x88('
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g1908
sS'block_loop.thisIndex'
p3437
g889
sg38
S'left'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g1157
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g1915
sS'block_loop.thisRepN'
p3443
I0
sg907
g1157
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3444
I0
sg910
g1164
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vn
sS'block_loop.thisTrialN'
p3446
I0
sg39
F1.4499349690013332
sg34
g753
(S'\x07\xdf\x07\t\x10:.\t#\xd8'
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g1264
sS'block_loop.thisIndex'
p3450
g889
sg38
S'left'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g1271
sS'block_loop.thisRepN'
p3456
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3457
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vn
sS'block_loop.thisTrialN'
p3459
I0
sg39
F1.9503614765599195
sg34
g753
(S'\x07\xdf\x07\t\x10:5\x01[\xa8'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g1466
sS'block_loop.thisIndex'
p3463
g889
sg38
S'left'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g1180
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g1473
sS'block_loop.thisRepN'
p3469
I0
sg907
g1180
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3470
I0
sg910
g1174
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vn
sS'block_loop.thisTrialN'
p3472
I0
sg39
F1.4165732968649536
sg34
g753
(S'\x07\xdf\x07\t\x10;\x00\x00\xf20'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g1354
sS'block_loop.thisIndex'
p3476
g889
sg38
S'left'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g1011
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g1361
sS'block_loop.thisRepN'
p3482
I0
sg907
g1011
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3483
I0
sg910
g1005
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vn
sS'block_loop.thisTrialN'
p3485
I0
sg39
F4.0998714775341796
sg34
g753
(S'\x07\xdf\x07\t\x10;\x06\x07\xf3('
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g950
sS'block_loop.thisIndex'
p3489
g889
sg38
S'left'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g958
sS'block_loop.thisRepN'
p3495
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3496
I0
sg910
g954
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vn
sS'block_loop.thisTrialN'
p3498
I0
sg39
F1.96648551499311
sg34
g753
(S'\x07\xdf\x07\t\x10;\x0f\t\xdfX'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g1666
sS'block_loop.thisIndex'
p3502
g889
sg38
S'right'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g1673
sS'block_loop.thisRepN'
p3508
I0
sg907
g1028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3509
I0
sg910
g1022
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vn
sS'block_loop.thisTrialN'
p3511
I0
sg39
F1.7833521213324275
sg34
g753
(S'\x07\xdf\x07\t\x10;\x16\t\xee\xf8'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g1610
sS'block_loop.thisIndex'
p3515
g889
sg38
S'left'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g1379
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g1617
sS'block_loop.thisRepN'
p3521
I0
sg907
g1379
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3522
I0
sg910
g1373
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vn
sS'block_loop.thisTrialN'
p3524
I0
sg39
F0.90029188398330007
sg34
g753
(S'\x07\xdf\x07\t\x10;\x1d\x07\xdb\xb8'
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g1108
sS'block_loop.thisIndex'
p3528
g889
sg38
S'left'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g1116
sS'block_loop.thisRepN'
p3534
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3535
I0
sg910
g1119
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vn
sS'block_loop.thisTrialN'
p3537
I0
sg39
F0.71648081086823368
sg34
g753
(S'\x07\xdf\x07\t\x10;#\x06\xc2x'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g1666
sS'block_loop.thisIndex'
p3541
g889
sg38
S'right'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g1028
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g1673
sS'block_loop.thisRepN'
p3547
I0
sg907
g1028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3548
I0
sg910
g1022
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vn
sS'block_loop.thisTrialN'
p3550
I0
sg39
F1.9832632846009801
sg34
g753
(S'\x07\xdf\x07\t\x10;)\x02\xce\xc0'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g2146
sS'block_loop.thisIndex'
p3554
g889
sg38
S'right'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g2153
sS'block_loop.thisRepN'
p3560
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3561
I0
sg910
g954
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vn
sS'block_loop.thisTrialN'
p3563
I0
sg39
F1.0666897026349034
sg34
g753
(S'\x07\xdf\x07\t\x10;0\x03\x1c\xe0'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g1292
sS'block_loop.thisIndex'
p3567
g889
sg38
S'left'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g1296
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1300
sS'block_loop.thisRepN'
p3573
I0
sg907
g1302
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3574
I0
sg910
g1296
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vn
sS'block_loop.thisTrialN'
p3576
I0
sg39
F2.6999516472715186
sg34
g753
(S'\x07\xdf\x07\t\x10;6\x04\x9f\x98'
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g1187
sS'block_loop.thisIndex'
p3580
g889
sg38
S'left'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g1195
sS'block_loop.thisRepN'
p3586
I0
sg907
g1197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3587
I0
sg910
g1191
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vn
sS'block_loop.thisTrialN'
p3589
I0
sg39
F2.5502842718487955
sg34
g753
(S'\x07\xdf\x07\t\x11\x00\x02\x00\xa0('
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g1048
sS'block_loop.thisIndex'
p3593
g889
sg38
S'left'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g1055
sS'block_loop.thisRepN'
p3599
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3600
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vn
sS'block_loop.thisTrialN'
p3602
I0
sg39
F1.8832632275771175
sg34
g753
(S'\x07\xdf\x07\t\x11\x00\t\t\x81\x98'
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g1221
sS'block_loop.thisIndex'
p3606
g889
sg38
S'left'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g1225
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g1229
sS'block_loop.thisRepN'
p3612
I0
sg907
g1225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3613
I0
sg910
g1232
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vn
sS'block_loop.thisTrialN'
p3615
I0
sg39
F2.7832862635477795
sg34
g753
(S'\x07\xdf\x07\t\x11\x00\x10\x08%\xf0'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F132.03060818951781
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vn
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vn
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'21-nakd_banana_crunch.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'left'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'1-treacle_cookies.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'1-treacle_cookies.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
S'21-nakd_banana_crunch.png'
p3648
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vn
sS'block_loop.thisTrialN'
p3650
I0
sg39
F3.1999499366793316
sg34
g753
(S'\x07\xdf\x07\t\x11\x04\x1c\x0c<\xd0'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'5-pineapple.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'left'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'5-pineapple.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'40-sardines.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3664
I1
sg3647
S'40-sardines.png'
p3665
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vn
sS'block_loop.thisTrialN'
p3667
I0
sg39
F1.6333144027848903
sg34
g753
(S'\x07\xdf\x07\t\x11\x04%\x00\x94p'
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'29-beans.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'left'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'29-beans.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'46-pistachios.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3681
I1
sg3647
S'46-pistachios.png'
p3682
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vn
sS'block_loop.thisTrialN'
p3684
I0
sg39
F1.1666558329161489
sg34
g753
(S'\x07\xdf\x07\t\x11\x04+\n\xae`'
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
S'50-polo.png'
p3688
sS'block_loop.thisIndex'
p3689
g3627
sg38
S'right'
p3690
sg59
g63
sS'trial_loop.thisN'
p3691
I3
sg33
S'50-polo.png'
p3692
sg64
g65
sS'trial_loop.thisIndex'
p3693
g60
(g99
S'\x03\x00\x00\x00'
tRp3694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3695
I0
sg3642
S'48-twix.png'
p3696
sS'block_loop.thisRepN'
p3697
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3698
I1
sg3647
S'48-twix.png'
p3699
sg55
g11
sS'block_loop.thisTrial'
p3700
Nsg70
Vn
sS'block_loop.thisTrialN'
p3701
I0
sg39
F0.83334787336207228
sg34
g753
(S'\x07\xdf\x07\t\x11\x041\r\xa0H'
tRp3702
sa(dp3703
S'trial_loop.thisTrialN'
p3704
I4
sg3633
S'30-spaghetti_hoops.png'
p3705
sS'block_loop.thisIndex'
p3706
g3627
sg38
S'right'
p3707
sg59
g63
sS'trial_loop.thisN'
p3708
I4
sg33
S'30-spaghetti_hoops.png'
p3709
sg64
g65
sS'trial_loop.thisIndex'
p3710
g60
(g99
S'\x04\x00\x00\x00'
tRp3711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3712
I0
sg3642
S'19-caramello_redo.png'
p3713
sS'block_loop.thisRepN'
p3714
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3715
I1
sg3647
S'19-caramello_redo.png'
p3716
sg55
g11
sS'block_loop.thisTrial'
p3717
Nsg70
Vn
sS'block_loop.thisTrialN'
p3718
I0
sg39
F0.58332264213458984
sg34
g753
(S'\x07\xdf\x07\t\x11\x047\x0b\x90\xf0'
tRp3719
sa(dp3720
S'trial_loop.thisTrialN'
p3721
I5
sg3633
S'4-corn.png'
p3722
sS'block_loop.thisIndex'
p3723
g3627
sg38
S'left'
p3724
sg59
g63
sS'trial_loop.thisN'
p3725
I5
sg33
S'10-bounty_redo.png'
p3726
sg64
g65
sS'trial_loop.thisIndex'
p3727
g60
(g99
S'\x05\x00\x00\x00'
tRp3728
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3729
I0
sg3642
S'10-bounty_redo.png'
p3730
sS'block_loop.thisRepN'
p3731
I1
sg3645
S'4-corn.png'
p3732
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3733
I1
sg3647
g3726
sg55
g11
sS'block_loop.thisTrial'
p3734
Nsg70
Vn
sS'block_loop.thisTrialN'
p3735
I0
sg39
F0.78329595690229326
sg34
g753
(S'\x07\xdf\x07\t\x11\x05\x01\x05\xb4\xf0'
tRp3736
sa(dp3737
S'trial_loop.thisTrialN'
p3738
I6
sg3633
S'26-walkers_smoky_bacon.png'
p3739
sS'block_loop.thisIndex'
p3740
g3627
sg38
S'left'
p3741
sg59
g63
sS'trial_loop.thisN'
p3742
I6
sg33
S'26-walkers_smoky_bacon.png'
p3743
sg64
g65
sS'trial_loop.thisIndex'
p3744
g60
(g99
S'\x06\x00\x00\x00'
tRp3745
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3746
I0
sg3642
S'44-crunch.png'
p3747
sS'block_loop.thisRepN'
p3748
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3749
I1
sg3647
S'44-crunch.png'
p3750
sg55
g11
sS'block_loop.thisTrial'
p3751
Nsg70
Vn
sS'block_loop.thisTrialN'
p3752
I0
sg39
F0.66658655395076494
sg34
g753
(S'\x07\xdf\x07\t\x11\x05\x07\x02\xf1\xe8'
tRp3753
sa(dp3754
S'trial_loop.thisTrialN'
p3755
I7
sg3633
S'51-mars.png'
p3756
sS'block_loop.thisIndex'
p3757
g3627
sg38
S'left'
p3758
sg59
g63
sS'trial_loop.thisN'
p3759
I7
sg33
S'27-hartleys_raspberries_jelly.png'
p3760
sg64
g65
sS'trial_loop.thisIndex'
p3761
g60
(g99
S'\x07\x00\x00\x00'
tRp3762
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3763
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p3764
sS'block_loop.thisRepN'
p3765
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3766
I1
sg3647
S'51-mars.png'
p3767
sg55
g11
sS'block_loop.thisTrial'
p3768
Nsg70
Vn
sS'block_loop.thisTrialN'
p3769
I0
sg39
F0.9499016124609625
sg34
g753
(S'\x07\xdf\x07\t\x11\x05\x0c\r\xc7X'
tRp3770
sa(dp3771
S'trial_loop.thisTrialN'
p3772
I8
sg3633
g3705
sS'block_loop.thisIndex'
p3773
g3627
sg38
S'left'
p3774
sg59
g63
sS'trial_loop.thisN'
p3775
I8
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p3776
g60
(g99
S'\x08\x00\x00\x00'
tRp3777
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3778
I0
sg3642
g3713
sS'block_loop.thisRepN'
p3779
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3780
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p3781
Nsg70
Vn
sS'block_loop.thisTrialN'
p3782
I0
sg39
F1.399897877668991
sg34
g753
(S'\x07\xdf\x07\t\x11\x05\x12\re\xb0'
tRp3783
sa(dp3784
S'trial_loop.thisTrialN'
p3785
I9
sg3633
g3634
sS'block_loop.thisIndex'
p3786
g3627
sg38
S'left'
p3787
sg59
g63
sS'trial_loop.thisN'
p3788
I9
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3789
g60
(g99
S'\t\x00\x00\x00'
tRp3790
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3791
I0
sg3642
g3643
sS'block_loop.thisRepN'
p3792
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3793
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3794
Nsg70
Vn
sS'block_loop.thisTrialN'
p3795
I0
sg39
F1.4331306852218404
sg34
g753
(S'\x07\xdf\x07\t\x11\x05\x19\x04\xe2\x00'
tRp3796
sa(dp3797
S'trial_loop.thisTrialN'
p3798
I10
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p3799
sS'block_loop.thisIndex'
p3800
g3627
sg38
S'left'
p3801
sg59
g63
sS'trial_loop.thisN'
p3802
I10
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3803
sg64
g65
sS'trial_loop.thisIndex'
p3804
g60
(g99
S'\n\x00\x00\x00'
tRp3805
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3806
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p3807
sS'block_loop.thisRepN'
p3808
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3809
I1
sg3647
S'8-liquorice_catherine_wheels.png'
p3810
sg55
g11
sS'block_loop.thisTrial'
p3811
Nsg70
Vn
sS'block_loop.thisTrialN'
p3812
I0
sg39
F1.6003837997850496
sg34
g753
(S'\x07\xdf\x07\t\x11\x05\x1f\x0b\xe2\xf8'
tRp3813
sa(dp3814
S'trial_loop.thisTrialN'
p3815
I11
sg3633
S'1-treacle_cookies.png'
p3816
sS'block_loop.thisIndex'
p3817
g3627
sg38
S'left'
p3818
sg59
g63
sS'trial_loop.thisN'
p3819
I11
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3820
g60
(g99
S'\x0b\x00\x00\x00'
tRp3821
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3822
I0
sg3642
S'21-nakd_banana_crunch.png'
p3823
sS'block_loop.thisRepN'
p3824
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3825
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3826
Nsg70
Vn
sS'block_loop.thisTrialN'
p3827
I0
sg39
F1.5332025870993675
sg34
g753
(S'\x07\xdf\x07\t\x11\x05&\x06=\xa8'
tRp3828
sa(dp3829
S'trial_loop.thisTrialN'
p3830
I12
sg3633
S'6-sour_patch_kids.png'
p3831
sS'block_loop.thisIndex'
p3832
g3627
sg38
S'right'
p3833
sg59
g63
sS'trial_loop.thisN'
p3834
I12
sg33
S'38-maltesers.png'
p3835
sg64
g65
sS'trial_loop.thisIndex'
p3836
g60
(g99
S'\x0c\x00\x00\x00'
tRp3837
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3838
I0
sg3642
S'38-maltesers.png'
p3839
sS'block_loop.thisRepN'
p3840
I1
sg3645
g3835
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3841
I1
sg3647
S'6-sour_patch_kids.png'
p3842
sg55
g11
sS'block_loop.thisTrial'
p3843
Nsg70
Vn
sS'block_loop.thisTrialN'
p3844
I0
sg39
F0.63299737310080673
sg34
g753
(S'\x07\xdf\x07\t\x11\x05,\x0e\xe8h'
tRp3845
sa(dp3846
S'trial_loop.thisTrialN'
p3847
I13
sg3633
S'20-fruit_pastilles.png'
p3848
sS'block_loop.thisIndex'
p3849
g3627
sg38
S'right'
p3850
sg59
g63
sS'trial_loop.thisN'
p3851
I13
sg33
S'2-steamed_puddings.png'
p3852
sg64
g65
sS'trial_loop.thisIndex'
p3853
g60
(g99
S'\r\x00\x00\x00'
tRp3854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3855
I0
sg3642
S'2-steamed_puddings.png'
p3856
sS'block_loop.thisRepN'
p3857
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3858
I1
sg3647
S'20-fruit_pastilles.png'
p3859
sg55
g11
sS'block_loop.thisTrial'
p3860
Nsg70
Vn
sS'block_loop.thisTrialN'
p3861
I0
sg39
F1.6498726464378706
sg34
g753
(S'\x07\xdf\x07\t\x11\x052\t\xfe\x98'
tRp3862
sa(dp3863
S'trial_loop.thisTrialN'
p3864
I14
sg3633
S'41-peanuts_redo.png'
p3865
sS'block_loop.thisIndex'
p3866
g3627
sg38
S'left'
p3867
sg59
g63
sS'trial_loop.thisN'
p3868
I14
sg33
S'41-peanuts_redo.png'
p3869
sg64
g65
sS'trial_loop.thisIndex'
p3870
g60
(g99
S'\x0e\x00\x00\x00'
tRp3871
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3872
I0
sg3642
S'45-chewy_nougat_redo.png'
p3873
sS'block_loop.thisRepN'
p3874
I1
sg3645
g3869
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3875
I1
sg3647
S'45-chewy_nougat_redo.png'
p3876
sg55
g11
sS'block_loop.thisTrial'
p3877
Nsg70
Vn
sS'block_loop.thisTrialN'
p3878
I0
sg39
F0.83318308635352878
sg34
g753
(S'\x07\xdf\x07\t\x11\x059\x05\x10\xe0'
tRp3879
sa(dp3880
S'trial_loop.thisTrialN'
p3881
I15
sg3633
S'25-kitkat.png'
p3882
sS'block_loop.thisIndex'
p3883
g3627
sg38
S'left'
p3884
sg59
g63
sS'trial_loop.thisN'
p3885
I15
sg33
S'25-kitkat.png'
p3886
sg64
g65
sS'trial_loop.thisIndex'
p3887
g60
(g99
S'\x0f\x00\x00\x00'
tRp3888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3889
I0
sg3642
S'31-hobnobs.png'
p3890
sS'block_loop.thisRepN'
p3891
I1
sg3645
g3886
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3892
I1
sg3647
S'31-hobnobs.png'
p3893
sg55
g11
sS'block_loop.thisTrial'
p3894
Nsg70
Vn
sS'block_loop.thisTrialN'
p3895
I0
sg39
F2.5335809129901463
sg34
g753
(S'\x07\xdf\x07\t\x11\x06\x03\x03\x01\x88'
tRp3896
sa(dp3897
S'trial_loop.thisTrialN'
p3898
I16
sg3633
S'16-skips_prawn.png'
p3899
sS'block_loop.thisIndex'
p3900
g3627
sg38
S'left'
p3901
sg59
g63
sS'trial_loop.thisN'
p3902
I16
sg33
S'16-skips_prawn.png'
p3903
sg64
g65
sS'trial_loop.thisIndex'
p3904
g60
(g99
S'\x10\x00\x00\x00'
tRp3905
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3906
I0
sg3642
S'42-mrkipling_lemon_slices.png'
p3907
sS'block_loop.thisRepN'
p3908
I1
sg3645
g3903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3909
I1
sg3647
S'42-mrkipling_lemon_slices.png'
p3910
sg55
g11
sS'block_loop.thisTrial'
p3911
Nsg70
Vn
sS'block_loop.thisTrialN'
p3912
I0
sg39
F0.94987994496477768
sg34
g753
(S'\x07\xdf\x07\t\x11\x06\n\x0b\xa4x'
tRp3913
sa(dp3914
S'trial_loop.thisTrialN'
p3915
I17
sg3633
S'35-raisins.png'
p3916
sS'block_loop.thisIndex'
p3917
g3627
sg38
S'right'
p3918
sg59
g63
sS'trial_loop.thisN'
p3919
I17
sg33
S'49-yorkie.png'
p3920
sg64
g65
sS'trial_loop.thisIndex'
p3921
g60
(g99
S'\x11\x00\x00\x00'
tRp3922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3923
I0
sg3642
S'49-yorkie.png'
p3924
sS'block_loop.thisRepN'
p3925
I1
sg3645
g3920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3926
I1
sg3647
S'35-raisins.png'
p3927
sg55
g11
sS'block_loop.thisTrial'
p3928
Nsg70
Vn
sS'block_loop.thisTrialN'
p3929
I0
sg39
F1.4333034549963486
sg34
g753
(S'\x07\xdf\x07\t\x11\x06\x10\x0b\x81P'
tRp3930
sa(dp3931
S'trial_loop.thisTrialN'
p3932
I18
sg3633
S'46-pistachios.png'
p3933
sS'block_loop.thisIndex'
p3934
g3627
sg38
S'left'
p3935
sg59
g63
sS'trial_loop.thisN'
p3936
I18
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p3937
g60
(g99
S'\x12\x00\x00\x00'
tRp3938
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3939
I0
sg3642
S'29-beans.png'
p3940
sS'block_loop.thisRepN'
p3941
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3942
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p3943
Nsg70
Vn
sS'block_loop.thisTrialN'
p3944
I0
sg39
F1.3832344326183375
sg34
g753
(S'\x07\xdf\x07\t\x11\x06\x17\x03< '
tRp3945
sa(dp3946
S'trial_loop.thisTrialN'
p3947
I19
sg3633
S'3-ellas_strawberries_apples.png'
p3948
sS'block_loop.thisIndex'
p3949
g3627
sg38
S'right'
p3950
sg59
g63
sS'trial_loop.thisN'
p3951
I19
sg33
S'13-mccoys_steak_crisps.png'
p3952
sg64
g65
sS'trial_loop.thisIndex'
p3953
g60
(g99
S'\x13\x00\x00\x00'
tRp3954
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3955
I0
sg3642
S'13-mccoys_steak_crisps.png'
p3956
sS'block_loop.thisRepN'
p3957
I1
sg3645
g3952
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3958
I1
sg3647
S'3-ellas_strawberries_apples.png'
p3959
sg55
g11
sS'block_loop.thisTrial'
p3960
Nsg70
Vn
sS'block_loop.thisTrialN'
p3961
I0
sg39
F0.90000250886805588
sg34
g753
(S'\x07\xdf\x07\t\x11\x06\x1d\t\xc0\x18'
tRp3962
sa(dp3963
S'trial_loop.thisTrialN'
p3964
I20
sg3633
S'8-liquorice_catherine_wheels.png'
p3965
sS'block_loop.thisIndex'
p3966
g3627
sg38
S'right'
p3967
sg59
g63
sS'trial_loop.thisN'
p3968
I20
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p3969
g60
(g99
S'\x14\x00\x00\x00'
tRp3970
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3971
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p3972
sS'block_loop.thisRepN'
p3973
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3974
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p3975
Nsg70
Vn
sS'block_loop.thisTrialN'
p3976
I0
sg39
F0.9001333691412583
sg34
g753
(S'\x07\xdf\x07\t\x11\x06#\x08\xa6\xd8'
tRp3977
sa(dp3978
S'trial_loop.thisTrialN'
p3979
I21
sg3633
S'18-mms.png'
p3980
sS'block_loop.thisIndex'
p3981
g3627
sg38
S'right'
p3982
sg59
g63
sS'trial_loop.thisN'
p3983
I21
sg33
S'18-mms.png'
p3984
sg64
g65
sS'trial_loop.thisIndex'
p3985
g60
(g99
S'\x15\x00\x00\x00'
tRp3986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3987
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p3988
sS'block_loop.thisRepN'
p3989
I1
sg3645
g3984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3990
I1
sg3647
S'43-mrporky_pork_crackles_redo.png'
p3991
sg55
g11
sS'block_loop.thisTrial'
p3992
Nsg70
Vn
sS'block_loop.thisTrialN'
p3993
I0
sg39
F1.0333810588454071
sg34
g753
(S'\x07\xdf\x07\t\x11\x06)\x07\x8d\x98'
tRp3994
sa(dp3995
S'trial_loop.thisTrialN'
p3996
I22
sg3633
S'33-ambrosia_rice.png'
p3997
sS'block_loop.thisIndex'
p3998
g3627
sg38
S'left'
p3999
sg59
g63
sS'trial_loop.thisN'
p4000
I22
sg33
S'33-ambrosia_rice.png'
p4001
sg64
g65
sS'trial_loop.thisIndex'
p4002
g60
(g99
S'\x16\x00\x00\x00'
tRp4003
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4004
I0
sg3642
S'23-crunchie_redo.png'
p4005
sS'block_loop.thisRepN'
p4006
I1
sg3645
g4001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4007
I1
sg3647
S'23-crunchie_redo.png'
p4008
sg55
g11
sS'block_loop.thisTrial'
p4009
Nsg70
Vn
sS'block_loop.thisTrialN'
p4010
I0
sg39
F1.04989796319569
sg34
g753
(S'\x07\xdf\x07\t\x11\x06/\x08\x9b '
tRp4011
sa(dp4012
S'trial_loop.thisTrialN'
p4013
I23
sg3633
g3816
sS'block_loop.thisIndex'
p4014
g3627
sg38
S'left'
p4015
sg59
g63
sS'trial_loop.thisN'
p4016
I23
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4017
g60
(g99
S'\x17\x00\x00\x00'
tRp4018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4019
I0
sg3642
g3823
sS'block_loop.thisRepN'
p4020
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4021
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4022
Nsg70
Vn
sS'block_loop.thisTrialN'
p4023
I0
sg39
F0.84999620818780386
sg34
g753
(S'\x07\xdf\x07\t\x11\x065\t\xe3@'
tRp4024
sa(dp4025
S'trial_loop.thisTrialN'
p4026
I24
sg3633
S'40-sardines.png'
p4027
sS'block_loop.thisIndex'
p4028
g3627
sg38
S'right'
p4029
sg59
g63
sS'trial_loop.thisN'
p4030
I24
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p4031
g60
(g99
S'\x18\x00\x00\x00'
tRp4032
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4033
I0
sg3642
S'5-pineapple.png'
p4034
sS'block_loop.thisRepN'
p4035
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4036
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4037
Nsg70
Vn
sS'block_loop.thisTrialN'
p4038
I0
sg39
F1.2332711248127453
sg34
g753
(S'\x07\xdf\x07\t\x11\x06;\x08\x12h'
tRp4039
sa(dp4040
S'trial_loop.thisTrialN'
p4041
I25
sg3633
g3831
sS'block_loop.thisIndex'
p4042
g3627
sg38
S'right'
p4043
sg59
g63
sS'trial_loop.thisN'
p4044
I25
sg33
g3835
sg64
g65
sS'trial_loop.thisIndex'
p4045
g60
(g99
S'\x19\x00\x00\x00'
tRp4046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4047
I0
sg3642
g3839
sS'block_loop.thisRepN'
p4048
I1
sg3645
g3835
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4049
I1
sg3647
g3842
sg55
g11
sS'block_loop.thisTrial'
p4050
Nsg70
Vn
sS'block_loop.thisTrialN'
p4051
I0
sg39
F0.61639921563619282
sg34
g753
(S'\x07\xdf\x07\t\x11\x07\x05\x0c5\x00'
tRp4052
sa(dp4053
S'trial_loop.thisTrialN'
p4054
I26
sg3633
S'27-hartleys_raspberries_jelly.png'
p4055
sS'block_loop.thisIndex'
p4056
g3627
sg38
S'left'
p4057
sg59
g63
sS'trial_loop.thisN'
p4058
I26
sg33
g3767
sg64
g65
sS'trial_loop.thisIndex'
p4059
g60
(g99
S'\x1a\x00\x00\x00'
tRp4060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4061
I0
sg3642
S'51-mars.png'
p4062
sS'block_loop.thisRepN'
p4063
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4064
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p4065
Nsg70
Vn
sS'block_loop.thisTrialN'
p4066
I0
sg39
F1.0332416456112696
sg34
g753
(S'\x07\xdf\x07\t\x11\x07\x0b\x06\xd2\x18'
tRp4067
sa(dp4068
S'trial_loop.thisTrialN'
p4069
I27
sg3633
g3816
sS'block_loop.thisIndex'
p4070
g3627
sg38
S'left'
p4071
sg59
g63
sS'trial_loop.thisN'
p4072
I27
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4073
g60
(g99
S'\x1b\x00\x00\x00'
tRp4074
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4075
I0
sg3642
g3823
sS'block_loop.thisRepN'
p4076
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4077
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4078
Nsg70
Vn
sS'block_loop.thisTrialN'
p4079
I0
sg39
F0.666666096469271
sg34
g753
(S'\x07\xdf\x07\t\x11\x07\x11\x07\xdf\xa0'
tRp4080
sa(dp4081
S'trial_loop.thisTrialN'
p4082
I28
sg3633
S'48-twix.png'
p4083
sS'block_loop.thisIndex'
p4084
g3627
sg38
S'left'
p4085
sg59
g63
sS'trial_loop.thisN'
p4086
I28
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4087
g60
(g99
S'\x1c\x00\x00\x00'
tRp4088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4089
I0
sg3642
S'50-polo.png'
p4090
sS'block_loop.thisRepN'
p4091
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4092
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4093
Nsg70
Vn
sS'block_loop.thisTrialN'
p4094
I0
sg39
F0.69992228211049223
sg34
g753
(S'\x07\xdf\x07\t\x11\x07\x17\x034P'
tRp4095
sa(dp4096
S'trial_loop.thisTrialN'
p4097
I29
sg3633
g3722
sS'block_loop.thisIndex'
p4098
g3627
sg38
S'left'
p4099
sg59
g63
sS'trial_loop.thisN'
p4100
I29
sg33
g3732
sg64
g65
sS'trial_loop.thisIndex'
p4101
g60
(g99
S'\x1d\x00\x00\x00'
tRp4102
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4103
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4104
I1
sg3645
g3732
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4105
I1
sg3647
g3726
sg55
g11
sS'block_loop.thisTrial'
p4106
Nsg70
Vn
sS'block_loop.thisTrialN'
p4107
I0
sg39
F0.91666623901983257
sg34
g753
(S'\x07\xdf\x07\t\x11\x07\x1c\x0e\x82\xd8'
tRp4108
sa(dp4109
S'trial_loop.thisTrialN'
p4110
I30
sg3633
g4083
sS'block_loop.thisIndex'
p4111
g3627
sg38
S'left'
p4112
sg59
g63
sS'trial_loop.thisN'
p4113
I30
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4114
g60
(g99
S'\x1e\x00\x00\x00'
tRp4115
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4116
I0
sg3642
g4090
sS'block_loop.thisRepN'
p4117
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4118
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4119
Nsg70
Vn
sS'block_loop.thisTrialN'
p4120
I0
sg39
F0.90000022807726054
sg34
g753
(S'\x07\xdf\x07\t\x11\x07"\r\xa40'
tRp4121
sa(dp4122
S'trial_loop.thisTrialN'
p4123
I31
sg3633
g4027
sS'block_loop.thisIndex'
p4124
g3627
sg38
S'right'
p4125
sg59
g63
sS'trial_loop.thisN'
p4126
I31
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4127
g60
(g99
S'\x1f\x00\x00\x00'
tRp4128
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4129
I0
sg3642
g4034
sS'block_loop.thisRepN'
p4130
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4131
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4132
Nsg70
Vn
sS'block_loop.thisTrialN'
p4133
I0
sg39
F1.0169094851735281
sg34
g753
(S'\x07\xdf\x07\t\x11\x07(\x0c\xc9p'
tRp4134
sa(dp4135
S'trial_loop.thisTrialN'
p4136
I32
sg3633
g3916
sS'block_loop.thisIndex'
p4137
g3627
sg38
S'right'
p4138
sg59
g63
sS'trial_loop.thisN'
p4139
I32
sg33
g3920
sg64
g65
sS'trial_loop.thisIndex'
p4140
g60
(g99
S' \x00\x00\x00'
tRp4141
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4142
I0
sg3642
g3924
sS'block_loop.thisRepN'
p4143
I1
sg3645
g3920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4144
I1
sg3647
g3927
sg55
g11
sS'block_loop.thisTrial'
p4145
Nsg70
Vn
sS'block_loop.thisTrialN'
p4146
I0
sg39
F1.6665070114322589
sg34
g753
(S'\x07\xdf\x07\t\x11\x07.\rY\xf8'
tRp4147
sa(dp4148
S'trial_loop.thisTrialN'
p4149
I33
sg3633
g3899
sS'block_loop.thisIndex'
p4150
g3627
sg38
S'left'
p4151
sg59
g63
sS'trial_loop.thisN'
p4152
I33
sg33
g3903
sg64
g65
sS'trial_loop.thisIndex'
p4153
g60
(g99
S'!\x00\x00\x00'
tRp4154
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4155
I0
sg3642
g3907
sS'block_loop.thisRepN'
p4156
I1
sg3645
g3903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4157
I1
sg3647
g3910
sg55
g11
sS'block_loop.thisTrial'
p4158
Nsg70
Vn
sS'block_loop.thisTrialN'
p4159
I0
sg39
F0.73322550902958028
sg34
g753
(S'\x07\xdf\x07\t\x11\x075\x08\xe5X'
tRp4160
sa(dp4161
S'trial_loop.thisTrialN'
p4162
I34
sg3633
g3848
sS'block_loop.thisIndex'
p4163
g3627
sg38
S'right'
p4164
sg59
g63
sS'trial_loop.thisN'
p4165
I34
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p4166
g60
(g99
S'"\x00\x00\x00'
tRp4167
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4168
I0
sg3642
g3856
sS'block_loop.thisRepN'
p4169
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4170
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p4171
Nsg70
Vn
sS'block_loop.thisTrialN'
p4172
I0
sg39
F1.7665521140370402
sg34
g753
(S'\x07\xdf\x07\t\x11\x07;\x050 '
tRp4173
sa(dp4174
S'trial_loop.thisTrialN'
p4175
I35
sg3633
g3965
sS'block_loop.thisIndex'
p4176
g3627
sg38
S'right'
p4177
sg59
g63
sS'trial_loop.thisN'
p4178
I35
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p4179
g60
(g99
S'#\x00\x00\x00'
tRp4180
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4181
I0
sg3642
g3972
sS'block_loop.thisRepN'
p4182
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4183
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p4184
Nsg70
Vn
sS'block_loop.thisTrialN'
p4185
I0
sg39
F0.81656725277207443
sg34
g753
(S'\x07\xdf\x07\t\x11\x08\x06\x02&\xc8'
tRp4186
sa(dp4187
S'trial_loop.thisTrialN'
p4188
I36
sg3633
g3705
sS'block_loop.thisIndex'
p4189
g3627
sg38
S'left'
p4190
sg59
g63
sS'trial_loop.thisN'
p4191
I36
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4192
g60
(g99
S'$\x00\x00\x00'
tRp4193
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4194
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4195
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4196
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4197
Nsg70
Vn
sS'block_loop.thisTrialN'
p4198
I0
sg39
F2.1670062191406032
sg34
g753
(S'\x07\xdf\x07\t\x11\x08\x0b\x0f\x1f\x18'
tRp4199
sa(dp4200
S'trial_loop.thisTrialN'
p4201
I37
sg3633
g3739
sS'block_loop.thisIndex'
p4202
g3627
sg38
S'right'
p4203
sg59
g63
sS'trial_loop.thisN'
p4204
I37
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p4205
g60
(g99
S'%\x00\x00\x00'
tRp4206
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4207
I0
sg3642
g3747
sS'block_loop.thisRepN'
p4208
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4209
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p4210
Nsg70
Vn
sS'block_loop.thisTrialN'
p4211
I0
sg39
F0.61658338935740176
sg34
g753
(S'\x07\xdf\x07\t\x11\x08\x13\x03\x05p'
tRp4212
sa(dp4213
S'trial_loop.thisTrialN'
p4214
I38
sg3633
g3980
sS'block_loop.thisIndex'
p4215
g3627
sg38
S'left'
p4216
sg59
g63
sS'trial_loop.thisN'
p4217
I38
sg33
g3984
sg64
g65
sS'trial_loop.thisIndex'
p4218
g60
(g99
S'&\x00\x00\x00'
tRp4219
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4220
I0
sg3642
g3988
sS'block_loop.thisRepN'
p4221
I1
sg3645
g3984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4222
I1
sg3647
g3991
sg55
g11
sS'block_loop.thisTrial'
p4223
Nsg70
Vn
sS'block_loop.thisTrialN'
p4224
I0
sg39
F0.73321467528148787
sg34
g753
(S'\x07\xdf\x07\t\x11\x08\x19\x00\x07\xd0'
tRp4225
sa(dp4226
S'trial_loop.thisTrialN'
p4227
I39
sg3633
S'36-fig_rolls.png'
p4228
sS'block_loop.thisIndex'
p4229
g3627
sg38
S'left'
p4230
sg59
g63
sS'trial_loop.thisN'
p4231
I39
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p4232
sg64
g65
sS'trial_loop.thisIndex'
p4233
g60
(g99
S"'\x00\x00\x00"
tRp4234
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4235
I0
sg3642
S'34-hula_hoops_bbq_beef_redo.png'
p4236
sS'block_loop.thisRepN'
p4237
I1
sg3645
g4232
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4238
I1
sg3647
S'36-fig_rolls.png'
p4239
sg55
g11
sS'block_loop.thisTrial'
p4240
Nsg70
Vn
sS'block_loop.thisTrialN'
p4241
I0
sg39
F0.78328740394499619
sg34
g753
(S'\x07\xdf\x07\t\x11\x08\x1e\x0b\x90\xf0'
tRp4242
sa(dp4243
S'trial_loop.thisTrialN'
p4244
I40
sg3633
S'22-daim.png'
p4245
sS'block_loop.thisIndex'
p4246
g3627
sg38
S'left'
p4247
sg59
g63
sS'trial_loop.thisN'
p4248
I40
sg33
S'22-daim.png'
p4249
sg64
g65
sS'trial_loop.thisIndex'
p4250
g60
(g99
S'(\x00\x00\x00'
tRp4251
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4252
I0
sg3642
S'7-olives.png'
p4253
sS'block_loop.thisRepN'
p4254
I1
sg3645
g4249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4255
I1
sg3647
S'7-olives.png'
p4256
sg55
g11
sS'block_loop.thisTrial'
p4257
Nsg70
Vn
sS'block_loop.thisTrialN'
p4258
I0
sg39
F1.2333295700300368
sg34
g753
(S'\x07\xdf\x07\t\x11\x08$\x08\xcd\xe8'
tRp4259
sa(dp4260
S'trial_loop.thisTrialN'
p4261
I41
sg3633
g3756
sS'block_loop.thisIndex'
p4262
g3627
sg38
S'right'
p4263
sg59
g63
sS'trial_loop.thisN'
p4264
I41
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p4265
g60
(g99
S')\x00\x00\x00'
tRp4266
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4267
I0
sg3642
g3764
sS'block_loop.thisRepN'
p4268
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4269
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p4270
Nsg70
Vn
sS'block_loop.thisTrialN'
p4271
I0
sg39
F1.2499000729258114
sg34
g753
(S'\x07\xdf\x07\t\x11\x08*\x0c\xf0\x80'
tRp4272
sa(dp4273
S'trial_loop.thisTrialN'
p4274
I42
sg3633
S'44-crunch.png'
p4275
sS'block_loop.thisIndex'
p4276
g3627
sg38
S'right'
p4277
sg59
g63
sS'trial_loop.thisN'
p4278
I42
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p4279
g60
(g99
S'*\x00\x00\x00'
tRp4280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4281
I0
sg3642
S'26-walkers_smoky_bacon.png'
p4282
sS'block_loop.thisRepN'
p4283
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4284
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p4285
Nsg70
Vn
sS'block_loop.thisTrialN'
p4286
I0
sg39
F1.2169153011891467
sg34
g753
(S'\x07\xdf\x07\t\x11\x081\x02\x0fX'
tRp4287
sa(dp4288
S'trial_loop.thisTrialN'
p4289
I43
sg3633
g3831
sS'block_loop.thisIndex'
p4290
g3627
sg38
S'right'
p4291
sg59
g63
sS'trial_loop.thisN'
p4292
I43
sg33
g3835
sg64
g65
sS'trial_loop.thisIndex'
p4293
g60
(g99
S'+\x00\x00\x00'
tRp4294
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4295
I0
sg3642
g3839
sS'block_loop.thisRepN'
p4296
I1
sg3645
g3835
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4297
I1
sg3647
g3842
sg55
g11
sS'block_loop.thisTrial'
p4298
Nsg70
Vn
sS'block_loop.thisTrialN'
p4299
I0
sg39
F0.64970728923071874
sg34
g753
(S'\x07\xdf\x07\t\x11\x087\x05\xb8\xd8'
tRp4300
sa(dp4301
S'trial_loop.thisTrialN'
p4302
I44
sg3633
g3933
sS'block_loop.thisIndex'
p4303
g3627
sg38
S'left'
p4304
sg59
g63
sS'trial_loop.thisN'
p4305
I44
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4306
g60
(g99
S',\x00\x00\x00'
tRp4307
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4308
I0
sg3642
g3940
sS'block_loop.thisRepN'
p4309
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4310
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4311
Nsg70
Vn
sS'block_loop.thisTrialN'
p4312
I0
sg39
F2.0999678408734326
sg34
g753
(S'\x07\xdf\x07\t\x11\t\x01\x01\r\x88'
tRp4313
sa(dp4314
S'trial_loop.thisTrialN'
p4315
I45
sg3633
g3654
sS'block_loop.thisIndex'
p4316
g3627
sg38
S'left'
p4317
sg59
g63
sS'trial_loop.thisN'
p4318
I45
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p4319
g60
(g99
S'-\x00\x00\x00'
tRp4320
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4321
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4322
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4323
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4324
Nsg70
Vn
sS'block_loop.thisTrialN'
p4325
I0
sg39
F0.96661323918306152
sg34
g753
(S'\x07\xdf\x07\t\x11\t\x08\x03\x05p'
tRp4326
sa(dp4327
S'trial_loop.thisTrialN'
p4328
I46
sg3633
g4228
sS'block_loop.thisIndex'
p4329
g3627
sg38
S'left'
p4330
sg59
g63
sS'trial_loop.thisN'
p4331
I46
sg33
g4232
sg64
g65
sS'trial_loop.thisIndex'
p4332
g60
(g99
S'.\x00\x00\x00'
tRp4333
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4334
I0
sg3642
g4236
sS'block_loop.thisRepN'
p4335
I1
sg3645
g4232
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4336
I1
sg3647
g4239
sg55
g11
sS'block_loop.thisTrial'
p4337
Nsg70
Vn
sS'block_loop.thisTrialN'
p4338
I0
sg39
F0.81656354649021523
sg34
g753
(S'\x07\xdf\x07\t\x11\t\x0e\x02\xde`'
tRp4339
sa(dp4340
S'trial_loop.thisTrialN'
p4341
I47
sg3633
g3997
sS'block_loop.thisIndex'
p4342
g3627
sg38
S'left'
p4343
sg59
g63
sS'trial_loop.thisN'
p4344
I47
sg33
g4008
sg64
g65
sS'trial_loop.thisIndex'
p4345
g60
(g99
S'/\x00\x00\x00'
tRp4346
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4347
I0
sg3642
g4005
sS'block_loop.thisRepN'
p4348
I1
sg3645
g4001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4349
I1
sg3647
g4008
sg55
g11
sS'block_loop.thisTrial'
p4350
Nsg70
Vn
sS'block_loop.thisTrialN'
p4351
I0
sg39
F0.73331902138306759
sg34
g753
(S'\x07\xdf\x07\t\x11\t\x14\x00\xd2\xf0'
tRp4352
sa(dp4353
S'trial_loop.thisTrialN'
p4354
I48
sg3633
g3882
sS'block_loop.thisIndex'
p4355
g3627
sg38
S'left'
p4356
sg59
g63
sS'trial_loop.thisN'
p4357
I48
sg33
g3886
sg64
g65
sS'trial_loop.thisIndex'
p4358
g60
(g99
S'0\x00\x00\x00'
tRp4359
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4360
I0
sg3642
g3890
sS'block_loop.thisRepN'
p4361
I1
sg3645
g3886
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4362
I1
sg3647
g3893
sg55
g11
sS'block_loop.thisTrial'
p4363
Nsg70
Vn
sS'block_loop.thisTrialN'
p4364
I0
sg39
F1.3999095667131769
sg34
g753
(S'\x07\xdf\x07\t\x11\t\x19\x0c\\\x10'
tRp4365
sa(dp4366
S'trial_loop.thisTrialN'
p4367
I49
sg3633
g3688
sS'block_loop.thisIndex'
p4368
g3627
sg38
S'right'
p4369
sg59
g63
sS'trial_loop.thisN'
p4370
I49
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4371
g60
(g99
S'1\x00\x00\x00'
tRp4372
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4373
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4374
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4375
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4376
Nsg70
Vn
sS'block_loop.thisTrialN'
p4377
I0
sg39
F0.89998055627074791
sg34
g753
(S'\x07\xdf\x07\t\x11\t \x03\xdcH'
tRp4378
sa(dp4379
S'trial_loop.thisTrialN'
p4380
I50
sg3633
g3816
sS'block_loop.thisIndex'
p4381
g3627
sg38
S'left'
p4382
sg59
g63
sS'trial_loop.thisN'
p4383
I50
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p4384
g60
(g99
S'2\x00\x00\x00'
tRp4385
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4386
I0
sg3642
g3823
sS'block_loop.thisRepN'
p4387
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4388
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4389
Nsg70
Vn
sS'block_loop.thisTrialN'
p4390
I0
sg39
F2.1666087916455581
sg34
g753
(S'\x07\xdf\x07\t\x11\t&\x02\xc3\x08'
tRp4391
sa(dp4392
S'trial_loop.thisTrialN'
p4393
I51
sg3633
S'38-maltesers.png'
p4394
sS'block_loop.thisIndex'
p4395
g3627
sg38
S'left'
p4396
sg59
g63
sS'trial_loop.thisN'
p4397
I51
sg33
g3842
sg64
g65
sS'trial_loop.thisIndex'
p4398
g60
(g99
S'3\x00\x00\x00'
tRp4399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4400
I0
sg3642
S'6-sour_patch_kids.png'
p4401
sS'block_loop.thisRepN'
p4402
I1
sg3645
g3835
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4403
I1
sg3647
g3842
sg55
g11
sS'block_loop.thisTrial'
p4404
Nsg70
Vn
sS'block_loop.thisTrialN'
p4405
I0
sg39
F0.73303762902651215
sg34
g753
(S'\x07\xdf\x07\t\x11\t-\x05\xb1\x08'
tRp4406
sa(dp4407
S'trial_loop.thisTrialN'
p4408
I52
sg3633
g3882
sS'block_loop.thisIndex'
p4409
g3627
sg38
S'left'
p4410
sg59
g63
sS'trial_loop.thisN'
p4411
I52
sg33
g3886
sg64
g65
sS'trial_loop.thisIndex'
p4412
g60
(g99
S'4\x00\x00\x00'
tRp4413
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4414
I0
sg3642
g3890
sS'block_loop.thisRepN'
p4415
I1
sg3645
g3886
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4416
I1
sg3647
g3893
sg55
g11
sS'block_loop.thisTrial'
p4417
Nsg70
Vn
sS'block_loop.thisTrialN'
p4418
I0
sg39
F0.7837612378752965
sg34
g753
(S'\x07\xdf\x07\t\x11\t3\x026h'
tRp4419
sa(dp4420
S'trial_loop.thisTrialN'
p4421
I53
sg3633
g3756
sS'block_loop.thisIndex'
p4422
g3627
sg38
S'right'
p4423
sg59
g63
sS'trial_loop.thisN'
p4424
I53
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p4425
g60
(g99
S'5\x00\x00\x00'
tRp4426
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4427
I0
sg3642
g3764
sS'block_loop.thisRepN'
p4428
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4429
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p4430
Nsg70
Vn
sS'block_loop.thisTrialN'
p4431
I0
sg39
F1.4166901873031748
sg34
g753
(S'\x07\xdf\x07\t\x11\t8\x0e\xb5\xa0'
tRp4432
sa(dp4433
S'trial_loop.thisTrialN'
p4434
I54
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p4435
sS'block_loop.thisIndex'
p4436
g3627
sg38
S'right'
p4437
sg59
g63
sS'trial_loop.thisN'
p4438
I54
sg33
g4232
sg64
g65
sS'trial_loop.thisIndex'
p4439
g60
(g99
S'6\x00\x00\x00'
tRp4440
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4441
I0
sg3642
S'36-fig_rolls.png'
p4442
sS'block_loop.thisRepN'
p4443
I1
sg3645
g4232
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4444
I1
sg3647
g4239
sg55
g11
sS'block_loop.thisTrial'
p4445
Nsg70
Vn
sS'block_loop.thisTrialN'
p4446
I0
sg39
F1.4166519840873661
sg34
g753
(S'\x07\xdf\x07\t\x11\n\x03\x065\xd8'
tRp4447
sa(dp4448
S'trial_loop.thisTrialN'
p4449
I55
sg3633
S'2-steamed_puddings.png'
p4450
sS'block_loop.thisIndex'
p4451
g3627
sg38
S'left'
p4452
sg59
g63
sS'trial_loop.thisN'
p4453
I55
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p4454
g60
(g99
S'7\x00\x00\x00'
tRp4455
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4456
I0
sg3642
S'20-fruit_pastilles.png'
p4457
sS'block_loop.thisRepN'
p4458
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4459
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p4460
Nsg70
Vn
sS'block_loop.thisTrialN'
p4461
I0
sg39
F1.0832385380381311
sg34
g753
(S'\x07\xdf\x07\t\x11\n\t\r2\xe8'
tRp4462
sa(dp4463
S'trial_loop.thisTrialN'
p4464
I56
sg3633
g3882
sS'block_loop.thisIndex'
p4465
g3627
sg38
S'left'
p4466
sg59
g63
sS'trial_loop.thisN'
p4467
I56
sg33
g3886
sg64
g65
sS'trial_loop.thisIndex'
p4468
g60
(g99
S'8\x00\x00\x00'
tRp4469
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4470
I0
sg3642
g3890
sS'block_loop.thisRepN'
p4471
I1
sg3645
g3886
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4472
I1
sg3647
g3893
sg55
g11
sS'block_loop.thisTrial'
p4473
Nsg70
Vn
sS'block_loop.thisTrialN'
p4474
I0
sg39
F1.0333112096777768
sg34
g753
(S'\x07\xdf\x07\t\x11\n\x0f\x0e\xf4 '
tRp4475
sa(dp4476
S'trial_loop.thisTrialN'
p4477
I57
sg3633
g3965
sS'block_loop.thisIndex'
p4478
g3627
sg38
S'right'
p4479
sg59
g63
sS'trial_loop.thisN'
p4480
I57
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p4481
g60
(g99
S'9\x00\x00\x00'
tRp4482
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4483
I0
sg3642
g3972
sS'block_loop.thisRepN'
p4484
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4485
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p4486
Nsg70
Vn
sS'block_loop.thisTrialN'
p4487
I0
sg39
F1.0170055634152959
sg34
g753
(S'\x07\xdf\x07\t\x11\n\x16\x00\xbfh'
tRp4488
sa(dp4489
S'trial_loop.thisTrialN'
p4490
I58
sg3633
S'49-yorkie.png'
p4491
sS'block_loop.thisIndex'
p4492
g3627
sg38
S'left'
p4493
sg59
g63
sS'trial_loop.thisN'
p4494
I58
sg33
g3927
sg64
g65
sS'trial_loop.thisIndex'
p4495
g60
(g99
S':\x00\x00\x00'
tRp4496
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4497
I0
sg3642
S'35-raisins.png'
p4498
sS'block_loop.thisRepN'
p4499
I1
sg3645
g3920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4500
I1
sg3647
g3927
sg55
g11
sS'block_loop.thisTrial'
p4501
Nsg70
Vn
sS'block_loop.thisTrialN'
p4502
I0
sg39
F1.5499703782516008
sg34
g753
(S'\x07\xdf\x07\t\x11\n\x1c\x01\x8a\x88'
tRp4503
sa(dp4504
S'trial_loop.thisTrialN'
p4505
I59
sg3633
S'43-mrporky_pork_crackles_redo.png'
p4506
sS'block_loop.thisIndex'
p4507
g3627
sg38
S'left'
p4508
sg59
g63
sS'trial_loop.thisN'
p4509
I59
sg33
g3991
sg64
g65
sS'trial_loop.thisIndex'
p4510
g60
(g99
S';\x00\x00\x00'
tRp4511
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4512
I0
sg3642
S'18-mms.png'
p4513
sS'block_loop.thisRepN'
p4514
I1
sg3645
g3984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4515
I1
sg3647
g3991
sg55
g11
sS'block_loop.thisTrial'
p4516
Nsg70
Vn
sS'block_loop.thisTrialN'
p4517
I0
sg39
F0.9666135242805467
sg34
g753
(S'\x07\xdf\x07\t\x11\n"\ns\xc8'
tRp4518
sa(dp4519
S'trial_loop.thisTrialN'
p4520
I60
sg3633
g4027
sS'block_loop.thisIndex'
p4521
g3627
sg38
S'right'
p4522
sg59
g63
sS'trial_loop.thisN'
p4523
I60
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4524
g60
(g99
S'<\x00\x00\x00'
tRp4525
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4526
I0
sg3642
g4034
sS'block_loop.thisRepN'
p4527
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4528
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4529
Nsg70
Vn
sS'block_loop.thisTrialN'
p4530
I0
sg39
F0.81657666102910298
sg34
g753
(S'\x07\xdf\x07\t\x11\n(\nL\xb8'
tRp4531
sa(dp4532
S'trial_loop.thisTrialN'
p4533
I61
sg3633
g4435
sS'block_loop.thisIndex'
p4534
g3627
sg38
S'right'
p4535
sg59
g63
sS'trial_loop.thisN'
p4536
I61
sg33
g4232
sg64
g65
sS'trial_loop.thisIndex'
p4537
g60
(g99
S'=\x00\x00\x00'
tRp4538
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4539
I0
sg3642
g4442
sS'block_loop.thisRepN'
p4540
I1
sg3645
g4232
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4541
I1
sg3647
g4239
sg55
g11
sS'block_loop.thisTrial'
p4542
Nsg70
Vn
sS'block_loop.thisTrialN'
p4543
I0
sg39
F1.4331939771182078
sg34
g753
(S'\x07\xdf\x07\t\x11\n.\x08\x02\xc8'
tRp4544
sa(dp4545
S'trial_loop.thisTrialN'
p4546
I62
sg3633
g3722
sS'block_loop.thisIndex'
p4547
g3627
sg38
S'left'
p4548
sg59
g63
sS'trial_loop.thisN'
p4549
I62
sg33
g3732
sg64
g65
sS'trial_loop.thisIndex'
p4550
g60
(g99
S'>\x00\x00\x00'
tRp4551
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4552
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4553
I1
sg3645
g3732
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4554
I1
sg3647
g3726
sg55
g11
sS'block_loop.thisTrial'
p4555
Nsg70
Vn
sS'block_loop.thisTrialN'
p4556
I0
sg39
F0.96667824167161598
sg34
g753
(S'\x07\xdf\x07\t\x11\n4\x0f>X'
tRp4557
sa(dp4558
S'trial_loop.thisTrialN'
p4559
I63
sg3633
g4506
sS'block_loop.thisIndex'
p4560
g3627
sg38
S'left'
p4561
sg59
g63
sS'trial_loop.thisN'
p4562
I63
sg33
g3984
sg64
g65
sS'trial_loop.thisIndex'
p4563
g60
(g99
S'?\x00\x00\x00'
tRp4564
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4565
I0
sg3642
g4513
sS'block_loop.thisRepN'
p4566
I1
sg3645
g3984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4567
I1
sg3647
g3991
sg55
g11
sS'block_loop.thisTrial'
p4568
Nsg70
Vn
sS'block_loop.thisTrialN'
p4569
I0
sg39
F1.0999473137744644
sg34
g753
(S'\x07\xdf\x07\t\x11\n:\x0f\x17H'
tRp4570
sa(dp4571
S'trial_loop.thisTrialN'
p4572
I64
sg3633
S'19-caramello_redo.png'
p4573
sS'block_loop.thisIndex'
p4574
g3627
sg38
S'right'
p4575
sg59
g63
sS'trial_loop.thisN'
p4576
I64
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p4577
g60
(g99
S'@\x00\x00\x00'
tRp4578
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4579
I0
sg3642
S'30-spaghetti_hoops.png'
p4580
sS'block_loop.thisRepN'
p4581
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4582
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4583
Nsg70
Vn
sS'block_loop.thisTrialN'
p4584
I0
sg39
F3.7998761531525815
sg34
g753
(S'\x07\xdf\x07\t\x11\x0b\x05\x02\x13@'
tRp4585
sa(dp4586
S'trial_loop.thisTrialN'
p4587
I65
sg3633
g4055
sS'block_loop.thisIndex'
p4588
g3627
sg38
S'left'
p4589
sg59
g63
sS'trial_loop.thisN'
p4590
I65
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p4591
g60
(g99
S'A\x00\x00\x00'
tRp4592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4593
I0
sg3642
g4062
sS'block_loop.thisRepN'
p4594
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4595
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p4596
Nsg70
Vn
sS'block_loop.thisTrialN'
p4597
I0
sg39
F0.84993291629143641
sg34
g753
(S'\x07\xdf\x07\t\x11\x0b\r\x0e\xb9\x88'
tRp4598
sa(dp4599
S'trial_loop.thisTrialN'
p4600
I66
sg3633
S'31-hobnobs.png'
p4601
sS'block_loop.thisIndex'
p4602
g3627
sg38
S'right'
p4603
sg59
g63
sS'trial_loop.thisN'
p4604
I66
sg33
g3886
sg64
g65
sS'trial_loop.thisIndex'
p4605
g60
(g99
S'B\x00\x00\x00'
tRp4606
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4607
I0
sg3642
S'25-kitkat.png'
p4608
sS'block_loop.thisRepN'
p4609
I1
sg3645
g3886
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4610
I1
sg3647
g3893
sg55
g11
sS'block_loop.thisTrial'
p4611
Nsg70
Vn
sS'block_loop.thisTrialN'
p4612
I0
sg39
F1.1666056555586692
sg34
g753
(S'\x07\xdf\x07\t\x11\x0b\x13\x0c\xec\x98'
tRp4613
sa(dp4614
S'trial_loop.thisTrialN'
p4615
I67
sg3633
g4491
sS'block_loop.thisIndex'
p4616
g3627
sg38
S'left'
p4617
sg59
g63
sS'trial_loop.thisN'
p4618
I67
sg33
g3920
sg64
g65
sS'trial_loop.thisIndex'
p4619
g60
(g99
S'C\x00\x00\x00'
tRp4620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4621
I0
sg3642
g4498
sS'block_loop.thisRepN'
p4622
I1
sg3645
g3920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4623
I1
sg3647
g3927
sg55
g11
sS'block_loop.thisTrial'
p4624
Nsg70
Vn
sS'block_loop.thisTrialN'
p4625
I0
sg39
F1.7664617377704417
sg34
g753
(S'\x07\xdf\x07\t\x11\x0b\x1a\x00\x9c@'
tRp4626
sa(dp4627
S'trial_loop.thisTrialN'
p4628
I68
sg3633
g3831
sS'block_loop.thisIndex'
p4629
g3627
sg38
S'right'
p4630
sg59
g63
sS'trial_loop.thisN'
p4631
I68
sg33
g3835
sg64
g65
sS'trial_loop.thisIndex'
p4632
g60
(g99
S'D\x00\x00\x00'
tRp4633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4634
I0
sg3642
g3839
sS'block_loop.thisRepN'
p4635
I1
sg3645
g3835
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4636
I1
sg3647
g3842
sg55
g11
sS'block_loop.thisTrial'
p4637
Nsg70
Vn
sS'block_loop.thisTrialN'
p4638
I0
sg39
F0.61629059305414557
sg34
g753
(S'\x07\xdf\x07\t\x11\x0b \x0c\xd9\x10'
tRp4639
sa(dp4640
S'trial_loop.thisTrialN'
p4641
I69
sg3633
g4275
sS'block_loop.thisIndex'
p4642
g3627
sg38
S'left'
p4643
sg59
g63
sS'trial_loop.thisN'
p4644
I69
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p4645
g60
(g99
S'E\x00\x00\x00'
tRp4646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4647
I0
sg3642
g4282
sS'block_loop.thisRepN'
p4648
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4649
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p4650
Nsg70
Vn
sS'block_loop.thisTrialN'
p4651
I0
sg39
F1.1333144027848903
sg34
g753
(S'\x07\xdf\x07\t\x11\x0b&\x07v('
tRp4652
sa(dp4653
S'trial_loop.thisTrialN'
p4654
I70
sg3633
g3654
sS'block_loop.thisIndex'
p4655
g3627
sg38
S'left'
p4656
sg59
g63
sS'trial_loop.thisN'
p4657
I70
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4658
g60
(g99
S'F\x00\x00\x00'
tRp4659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4660
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4661
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4662
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4663
Nsg70
Vn
sS'block_loop.thisTrialN'
p4664
I0
sg39
F1.3499283547134837
sg34
g753
(S'\x07\xdf\x07\t\x11\x0b,\n)\x90'
tRp4665
sa(dp4666
S'trial_loop.thisTrialN'
p4667
I71
sg3633
S'42-mrkipling_lemon_slices.png'
p4668
sS'block_loop.thisIndex'
p4669
g3627
sg38
S'right'
p4670
sg59
g63
sS'trial_loop.thisN'
p4671
I71
sg33
g3903
sg64
g65
sS'trial_loop.thisIndex'
p4672
g60
(g99
S'G\x00\x00\x00'
tRp4673
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4674
I0
sg3642
S'16-skips_prawn.png'
p4675
sS'block_loop.thisRepN'
p4676
I1
sg3645
g3903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4677
I1
sg3647
g3910
sg55
g11
sS'block_loop.thisTrial'
p4678
Nsg70
Vn
sS'block_loop.thisTrialN'
p4679
I0
sg39
F1.3165698186603549
sg34
g753
(S'\x07\xdf\x07\t\x11\x0b3\x00\xb7\x98'
tRp4680
sa(dp4681
S'trial_loop.thisTrialN'
p4682
I72
sg3633
g4228
sS'block_loop.thisIndex'
p4683
g3627
sg38
S'left'
p4684
sg59
g63
sS'trial_loop.thisN'
p4685
I72
sg33
g4232
sg64
g65
sS'trial_loop.thisIndex'
p4686
g60
(g99
S'H\x00\x00\x00'
tRp4687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4688
I0
sg3642
g4236
sS'block_loop.thisRepN'
p4689
I1
sg3645
g4232
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4690
I1
sg3647
g4239
sg55
g11
sS'block_loop.thisTrial'
p4691
Nsg70
Vn
sS'block_loop.thisTrialN'
p4692
I0
sg39
F0.73365600797114894
sg34
g753
(S'\x07\xdf\x07\t\x11\x0b9\x06\n\xe0'
tRp4693
sa(dp4694
S'trial_loop.thisTrialN'
p4695
I73
sg3633
g4506
sS'block_loop.thisIndex'
p4696
g3627
sg38
S'left'
p4697
sg59
g63
sS'trial_loop.thisN'
p4698
I73
sg33
g3984
sg64
g65
sS'trial_loop.thisIndex'
p4699
g60
(g99
S'I\x00\x00\x00'
tRp4700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4701
I0
sg3642
g4513
sS'block_loop.thisRepN'
p4702
I1
sg3645
g3984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4703
I1
sg3647
g3991
sg55
g11
sS'block_loop.thisTrial'
p4704
Nsg70
Vn
sS'block_loop.thisTrialN'
p4705
I0
sg39
F0.80001727697890601
sg34
g753
(S'\x07\xdf\x07\t\x11\x0c\x03\x02\x90@'
tRp4706
sa(dp4707
S'trial_loop.thisTrialN'
p4708
I74
sg3633
S'10-bounty_redo.png'
p4709
sS'block_loop.thisIndex'
p4710
g3627
sg38
S'right'
p4711
sg59
g63
sS'trial_loop.thisN'
p4712
I74
sg33
g3732
sg64
g65
sS'trial_loop.thisIndex'
p4713
g60
(g99
S'J\x00\x00\x00'
tRp4714
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4715
I0
sg3642
S'4-corn.png'
p4716
sS'block_loop.thisRepN'
p4717
I1
sg3645
g3732
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4718
I1
sg3647
g3726
sg55
g11
sS'block_loop.thisTrial'
p4719
Nsg70
Vn
sS'block_loop.thisTrialN'
p4720
I0
sg39
F0.93322476777393604
sg34
g753
(S'\x07\xdf\x07\t\x11\x0c\x08\x0f\x0fx'
tRp4721
sa(dp4722
S'trial_loop.thisTrialN'
p4723
I75
sg3633
g4055
sS'block_loop.thisIndex'
p4724
g3627
sg38
S'left'
p4725
sg59
g63
sS'trial_loop.thisN'
p4726
I75
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p4727
g60
(g99
S'K\x00\x00\x00'
tRp4728
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4729
I0
sg3642
g4062
sS'block_loop.thisRepN'
p4730
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4731
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p4732
Nsg70
Vn
sS'block_loop.thisTrialN'
p4733
I0
sg39
F0.79998192474522511
sg34
g753
(S'\x07\xdf\x07\t\x11\x0c\x0e\x0e\xad\xd0'
tRp4734
sa(dp4735
S'trial_loop.thisTrialN'
p4736
I76
sg3633
g4245
sS'block_loop.thisIndex'
p4737
g3627
sg38
S'left'
p4738
sg59
g63
sS'trial_loop.thisN'
p4739
I76
sg33
g4249
sg64
g65
sS'trial_loop.thisIndex'
p4740
g60
(g99
S'L\x00\x00\x00'
tRp4741
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4742
I0
sg3642
g4253
sS'block_loop.thisRepN'
p4743
I1
sg3645
g4249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4744
I1
sg3647
g4256
sg55
g11
sS'block_loop.thisTrial'
p4745
Nsg70
Vn
sS'block_loop.thisTrialN'
p4746
I0
sg39
F0.96666712282603839
sg34
g753
(S'\x07\xdf\x07\t\x11\x0c\x14\x0c%`'
tRp4747
sa(dp4748
S'trial_loop.thisTrialN'
p4749
I77
sg3633
g4055
sS'block_loop.thisIndex'
p4750
g3627
sg38
S'left'
p4751
sg59
g63
sS'trial_loop.thisN'
p4752
I77
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p4753
g60
(g99
S'M\x00\x00\x00'
tRp4754
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4755
I0
sg3642
g4062
sS'block_loop.thisRepN'
p4756
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4757
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p4758
Nsg70
Vn
sS'block_loop.thisTrialN'
p4759
I0
sg39
F0.74998816840525251
sg34
g753
(S'\x07\xdf\x07\t\x11\x0c\x1a\x0c<\xd0'
tRp4760
sa(dp4761
S'trial_loop.thisTrialN'
p4762
I78
sg3633
S'13-mccoys_steak_crisps.png'
p4763
sS'block_loop.thisIndex'
p4764
g3627
sg38
S'left'
p4765
sg59
g63
sS'trial_loop.thisN'
p4766
I78
sg33
g3952
sg64
g65
sS'trial_loop.thisIndex'
p4767
g60
(g99
S'N\x00\x00\x00'
tRp4768
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4769
I0
sg3642
S'3-ellas_strawberries_apples.png'
p4770
sS'block_loop.thisRepN'
p4771
I1
sg3645
g3952
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4772
I1
sg3647
g3959
sg55
g11
sS'block_loop.thisTrial'
p4773
Nsg70
Vn
sS'block_loop.thisTrialN'
p4774
I0
sg39
F1.5333916074923764
sg34
g753
(S'\x07\xdf\x07\t\x11\x0c \x08\xc20'
tRp4775
sa(dp4776
S'trial_loop.thisTrialN'
p4777
I79
sg3633
g3980
sS'block_loop.thisIndex'
p4778
g3627
sg38
S'right'
p4779
sg59
g63
sS'trial_loop.thisN'
p4780
I79
sg33
g3991
sg64
g65
sS'trial_loop.thisIndex'
p4781
g60
(g99
S'O\x00\x00\x00'
tRp4782
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4783
I0
sg3642
g3988
sS'block_loop.thisRepN'
p4784
I1
sg3645
g3984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4785
I1
sg3647
g3991
sg55
g11
sS'block_loop.thisTrial'
p4786
Nsg70
Vn
sS'block_loop.thisTrialN'
p4787
I0
sg39
F1.033323468920571
sg34
g753
(S"\x07\xdf\x07\t\x11\x0c'\x02*\xb0"
tRp4788
sa(dp4789
S'trial_loop.thisTrialN'
p4790
I80
sg3633
S'7-olives.png'
p4791
sS'block_loop.thisIndex'
p4792
g3627
sg38
S'right'
p4793
sg59
g63
sS'trial_loop.thisN'
p4794
I80
sg33
g4256
sg64
g65
sS'trial_loop.thisIndex'
p4795
g60
(g99
S'P\x00\x00\x00'
tRp4796
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4797
I0
sg3642
S'22-daim.png'
p4798
sS'block_loop.thisRepN'
p4799
I1
sg3645
g4249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4800
I1
sg3647
g4256
sg55
g11
sS'block_loop.thisTrial'
p4801
Nsg70
Vn
sS'block_loop.thisTrialN'
p4802
I0
sg39
F1.7333039111545077
sg34
g753
(S'\x07\xdf\x07\t\x11\x0c-\x034P'
tRp4803
sa(dp4804
S'trial_loop.thisTrialN'
p4805
I81
sg3633
S'45-chewy_nougat_redo.png'
p4806
sS'block_loop.thisIndex'
p4807
g3627
sg38
S'right'
p4808
sg59
g63
sS'trial_loop.thisN'
p4809
I81
sg33
g3869
sg64
g65
sS'trial_loop.thisIndex'
p4810
g60
(g99
S'Q\x00\x00\x00'
tRp4811
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4812
I0
sg3642
S'41-peanuts_redo.png'
p4813
sS'block_loop.thisRepN'
p4814
I1
sg3645
g3869
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4815
I1
sg3647
g3876
sg55
g11
sS'block_loop.thisTrial'
p4816
Nsg70
Vn
sS'block_loop.thisTrialN'
p4817
I0
sg39
F1.3999936708096357
sg34
g753
(S'\x07\xdf\x07\t\x11\x0c3\x0e\xf4 '
tRp4818
sa(dp4819
S'trial_loop.thisTrialN'
p4820
I82
sg3633
g4275
sS'block_loop.thisIndex'
p4821
g3627
sg38
S'left'
p4822
sg59
g63
sS'trial_loop.thisN'
p4823
I82
sg33
g3750
sg64
g65
sS'trial_loop.thisIndex'
p4824
g60
(g99
S'R\x00\x00\x00'
tRp4825
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4826
I0
sg3642
g4282
sS'block_loop.thisRepN'
p4827
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4828
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p4829
Nsg70
Vn
sS'block_loop.thisTrialN'
p4830
I0
sg39
F0.93328805967030348
sg34
g753
(S'\x07\xdf\x07\t\x11\x0c:\x069\xc0'
tRp4831
sa(dp4832
S'trial_loop.thisTrialN'
p4833
I83
sg3633
g3882
sS'block_loop.thisIndex'
p4834
g3627
sg38
S'left'
p4835
sg59
g63
sS'trial_loop.thisN'
p4836
I83
sg33
g3886
sg64
g65
sS'trial_loop.thisIndex'
p4837
g60
(g99
S'S\x00\x00\x00'
tRp4838
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4839
I0
sg3642
g3890
sS'block_loop.thisRepN'
p4840
I1
sg3645
g3886
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4841
I1
sg3647
g3893
sg55
g11
sS'block_loop.thisTrial'
p4842
Nsg70
Vn
sS'block_loop.thisTrialN'
p4843
I0
sg39
F1.1003755319215998
sg34
g753
(S'\x07\xdf\x07\t\x11\r\x04\x05\xd40'
tRp4844
sa(dp4845
S'trial_loop.thisTrialN'
p4846
I84
sg3633
g3916
sS'block_loop.thisIndex'
p4847
g3627
sg38
S'right'
p4848
sg59
g63
sS'trial_loop.thisN'
p4849
I84
sg33
g3920
sg64
g65
sS'trial_loop.thisIndex'
p4850
g60
(g99
S'T\x00\x00\x00'
tRp4851
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4852
I0
sg3642
g3924
sS'block_loop.thisRepN'
p4853
I1
sg3645
g3920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4854
I1
sg3647
g3927
sg55
g11
sS'block_loop.thisTrial'
p4855
Nsg70
Vn
sS'block_loop.thisTrialN'
p4856
I0
sg39
F1.2333167405922723
sg34
g753
(S'\x07\xdf\x07\t\x11\r\n\x07\xd3\xe8'
tRp4857
sa(dp4858
S'trial_loop.thisTrialN'
p4859
I85
sg3633
g3980
sS'block_loop.thisIndex'
p4860
g3627
sg38
S'right'
p4861
sg59
g63
sS'trial_loop.thisN'
p4862
I85
sg33
g3984
sg64
g65
sS'trial_loop.thisIndex'
p4863
g60
(g99
S'U\x00\x00\x00'
tRp4864
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4865
I0
sg3642
g3988
sS'block_loop.thisRepN'
p4866
I1
sg3645
g3984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4867
I1
sg3647
g3991
sg55
g11
sS'block_loop.thisTrial'
p4868
Nsg70
Vn
sS'block_loop.thisTrialN'
p4869
I0
sg39
F1.2167234298030962
sg34
g753
(S'\x07\xdf\x07\t\x11\r\x10\x0b\xfah'
tRp4870
sa(dp4871
S'trial_loop.thisTrialN'
p4872
I86
sg3633
g4435
sS'block_loop.thisIndex'
p4873
g3627
sg38
S'right'
p4874
sg59
g63
sS'trial_loop.thisN'
p4875
I86
sg33
g4232
sg64
g65
sS'trial_loop.thisIndex'
p4876
g60
(g99
S'V\x00\x00\x00'
tRp4877
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4878
I0
sg3642
g4442
sS'block_loop.thisRepN'
p4879
I1
sg3645
g4232
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4880
I1
sg3647
g4239
sg55
g11
sS'block_loop.thisTrial'
p4881
Nsg70
Vn
sS'block_loop.thisTrialN'
p4882
I0
sg39
F1.1666216210833227
sg34
g753
(S'\x07\xdf\x07\t\x11\r\x17\x00a\xa8'
tRp4883
sa(dp4884
S'trial_loop.thisTrialN'
p4885
I87
sg3633
g3799
sS'block_loop.thisIndex'
p4886
g3627
sg38
S'left'
p4887
sg59
g63
sS'trial_loop.thisN'
p4888
I87
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p4889
g60
(g99
S'W\x00\x00\x00'
tRp4890
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4891
I0
sg3642
g3807
sS'block_loop.thisRepN'
p4892
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4893
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p4894
Nsg70
Vn
sS'block_loop.thisTrialN'
p4895
I0
sg39
F1.0665856416344468
sg34
g753
(S'\x07\xdf\x07\t\x11\r\x1d\x03\x8e('
tRp4896
sa(dp4897
S'trial_loop.thisTrialN'
p4898
I88
sg3633
g3948
sS'block_loop.thisIndex'
p4899
g3627
sg38
S'right'
p4900
sg59
g63
sS'trial_loop.thisN'
p4901
I88
sg33
g3959
sg64
g65
sS'trial_loop.thisIndex'
p4902
g60
(g99
S'X\x00\x00\x00'
tRp4903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4904
I0
sg3642
g3956
sS'block_loop.thisRepN'
p4905
I1
sg3645
g3952
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4906
I1
sg3647
g3959
sg55
g11
sS'block_loop.thisTrial'
p4907
Nsg70
Vn
sS'block_loop.thisTrialN'
p4908
I0
sg39
F0.75019971159417764
sg34
g753
(S'\x07\xdf\x07\t\x11\r#\x05\x14\xc8'
tRp4909
sa(dp4910
S'trial_loop.thisTrialN'
p4911
I89
sg3633
g3899
sS'block_loop.thisIndex'
p4912
g3627
sg38
S'left'
p4913
sg59
g63
sS'trial_loop.thisN'
p4914
I89
sg33
g3903
sg64
g65
sS'trial_loop.thisIndex'
p4915
g60
(g99
S'Y\x00\x00\x00'
tRp4916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4917
I0
sg3642
g3907
sS'block_loop.thisRepN'
p4918
I1
sg3645
g3903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4919
I1
sg3647
g3910
sg55
g11
sS'block_loop.thisTrial'
p4920
Nsg70
Vn
sS'block_loop.thisTrialN'
p4921
I0
sg39
F0.88327662721349043
sg34
g753
(S'\x07\xdf\x07\t\x11\r)\x01\x9a('
tRp4922
sa(dp4923
S'trial_loop.thisTrialN'
p4924
I90
sg3633
g4394
sS'block_loop.thisIndex'
p4925
g3627
sg38
S'left'
p4926
sg59
g63
sS'trial_loop.thisN'
p4927
I90
sg33
g3835
sg64
g65
sS'trial_loop.thisIndex'
p4928
g60
(g99
S'Z\x00\x00\x00'
tRp4929
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4930
I0
sg3642
g4401
sS'block_loop.thisRepN'
p4931
I1
sg3645
g3835
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4932
I1
sg3647
g3842
sg55
g11
sS'block_loop.thisTrial'
p4933
Nsg70
Vn
sS'block_loop.thisTrialN'
p4934
I0
sg39
F1.149746632843744
sg34
g753
(S'\x07\xdf\x07\t\x11\r/\x00\x80\xe8'
tRp4935
sa(dp4936
S'trial_loop.thisTrialN'
p4937
I91
sg3633
g3634
sS'block_loop.thisIndex'
p4938
g3627
sg38
S'right'
p4939
sg59
g63
sS'trial_loop.thisN'
p4940
I91
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4941
g60
(g99
S'[\x00\x00\x00'
tRp4942
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4943
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4944
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4945
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4946
Nsg70
Vn
sS'block_loop.thisTrialN'
p4947
I0
sg39
F1.3999737139056379
sg34
g753
(S'\x07\xdf\x07\t\x11\r5\x0388'
tRp4948
sa(dp4949
S'trial_loop.thisTrialN'
p4950
I92
sg3633
g3705
sS'block_loop.thisIndex'
p4951
g3627
sg38
S'right'
p4952
sg59
g63
sS'trial_loop.thisN'
p4953
I92
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4954
g60
(g99
S'\\\x00\x00\x00'
tRp4955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4956
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4957
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4958
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4959
Nsg70
Vn
sS'block_loop.thisTrialN'
p4960
I0
sg39
F2.1999214268180367
sg34
g753
(S'\x07\xdf\x07\t\x11\r;\t\xbc0'
tRp4961
sa(dp4962
S'trial_loop.thisTrialN'
p4963
I93
sg3633
g3688
sS'block_loop.thisIndex'
p4964
g3627
sg38
S'right'
p4965
sg59
g63
sS'trial_loop.thisN'
p4966
I93
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4967
g60
(g99
S']\x00\x00\x00'
tRp4968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4969
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4970
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4971
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4972
Nsg70
Vn
sS'block_loop.thisTrialN'
p4973
I0
sg39
F0.68373466668344918
sg34
g753
(S'\x07\xdf\x07\t\x11\x0e\x06\r]\xe0'
tRp4974
sa(dp4975
S'trial_loop.thisTrialN'
p4976
I94
sg3633
g4450
sS'block_loop.thisIndex'
p4977
g3627
sg38
S'left'
p4978
sg59
g63
sS'trial_loop.thisN'
p4979
I94
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p4980
g60
(g99
S'^\x00\x00\x00'
tRp4981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4982
I0
sg3642
g4457
sS'block_loop.thisRepN'
p4983
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4984
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p4985
Nsg70
Vn
sS'block_loop.thisTrialN'
p4986
I0
sg39
F2.0165448440202454
sg34
g753
(S'\x07\xdf\x07\t\x11\x0e\x0c\x08\xf1\x10'
tRp4987
sa(dp4988
S'trial_loop.thisTrialN'
p4989
I95
sg3633
g3739
sS'block_loop.thisIndex'
p4990
g3627
sg38
S'left'
p4991
sg59
g63
sS'trial_loop.thisN'
p4992
I95
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p4993
g60
(g99
S'_\x00\x00\x00'
tRp4994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4995
I0
sg3642
g3747
sS'block_loop.thisRepN'
p4996
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4997
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p4998
Nsg70
Vn
sS'block_loop.thisTrialN'
p4999
I0
sg39
F0.84997739167738473
sg34
g753
(S'\x07\xdf\x07\t\x11\x0e\x13\t\xb8H'
tRp5000
sa(dp5001
S'trial_loop.thisTrialN'
p5002
I96
sg3633
g3848
sS'block_loop.thisIndex'
p5003
g3627
sg38
S'right'
p5004
sg59
g63
sS'trial_loop.thisN'
p5005
I96
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p5006
g60
(g99
S'`\x00\x00\x00'
tRp5007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5008
I0
sg3642
g3856
sS'block_loop.thisRepN'
p5009
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5010
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p5011
Nsg70
Vn
sS'block_loop.thisTrialN'
p5012
I0
sg39
F1.0333209030322905
sg34
g753
(S'\x07\xdf\x07\t\x11\x0e\x19\x08%\xf0'
tRp5013
sa(dp5014
S'trial_loop.thisTrialN'
p5015
I97
sg3633
g3799
sS'block_loop.thisIndex'
p5016
g3627
sg38
S'left'
p5017
sg59
g63
sS'trial_loop.thisN'
p5018
I97
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p5019
g60
(g99
S'a\x00\x00\x00'
tRp5020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5021
I0
sg3642
g3807
sS'block_loop.thisRepN'
p5022
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5023
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p5024
Nsg70
Vn
sS'block_loop.thisTrialN'
p5025
I0
sg39
F1.0332960994492169
sg34
g753
(S'\x07\xdf\x07\t\x11\x0e\x1f\x08\xf4\xf8'
tRp5026
sa(dp5027
S'trial_loop.thisTrialN'
p5028
I98
sg3633
g4275
sS'block_loop.thisIndex'
p5029
g3627
sg38
S'left'
p5030
sg59
g63
sS'trial_loop.thisN'
p5031
I98
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p5032
g60
(g99
S'b\x00\x00\x00'
tRp5033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5034
I0
sg3642
g4282
sS'block_loop.thisRepN'
p5035
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5036
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p5037
Nsg70
Vn
sS'block_loop.thisTrialN'
p5038
I0
sg39
F0.81703566982832854
sg34
g753
(S'\x07\xdf\x07\t\x11\x0e%\t\xfe\x98'
tRp5039
sa(dp5040
S'trial_loop.thisTrialN'
p5041
I99
sg3633
g4573
sS'block_loop.thisIndex'
p5042
g3627
sg38
S'left'
p5043
sg59
g63
sS'trial_loop.thisN'
p5044
I99
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5045
g60
(g99
S'c\x00\x00\x00'
tRp5046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5047
I0
sg3642
g4580
sS'block_loop.thisRepN'
p5048
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5049
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5050
Nsg70
Vn
sS'block_loop.thisTrialN'
p5051
I0
sg39
F1.4332233422792342
sg34
g753
(S'\x07\xdf\x07\t\x11\x0e+\x07\xb4\xa8'
tRp5052
sa(dp5053
S'trial_loop.thisTrialN'
p5054
I100
sg3633
g4394
sS'block_loop.thisIndex'
p5055
g3627
sg38
S'left'
p5056
sg59
g63
sS'trial_loop.thisN'
p5057
I100
sg33
g3835
sg64
g65
sS'trial_loop.thisIndex'
p5058
g60
(g99
S'd\x00\x00\x00'
tRp5059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5060
I0
sg3642
g4401
sS'block_loop.thisRepN'
p5061
I1
sg3645
g3835
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5062
I1
sg3647
g3842
sg55
g11
sS'block_loop.thisTrial'
p5063
Nsg70
Vn
sS'block_loop.thisTrialN'
p5064
I0
sg39
F0.6328739253913227
sg34
g753
(S'\x07\xdf\x07\t\x11\x0e1\x0e\xf08'
tRp5065
sa(dp5066
S'trial_loop.thisTrialN'
p5067
I101
sg3633
g3933
sS'block_loop.thisIndex'
p5068
g3627
sg38
S'left'
p5069
sg59
g63
sS'trial_loop.thisN'
p5070
I101
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5071
g60
(g99
S'e\x00\x00\x00'
tRp5072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5073
I0
sg3642
g3940
sS'block_loop.thisRepN'
p5074
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5075
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5076
Nsg70
Vn
sS'block_loop.thisTrialN'
p5077
I0
sg39
F0.75000926570646698
sg34
g753
(S'\x07\xdf\x07\t\x11\x0e7\t\xcb\xd0'
tRp5078
sa(dp5079
S'trial_loop.thisTrialN'
p5080
I102
sg3633
g3848
sS'block_loop.thisIndex'
p5081
g3627
sg38
S'right'
p5082
sg59
g63
sS'trial_loop.thisN'
p5083
I102
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p5084
g60
(g99
S'f\x00\x00\x00'
tRp5085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5086
I0
sg3642
g3856
sS'block_loop.thisRepN'
p5087
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5088
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p5089
Nsg70
Vn
sS'block_loop.thisTrialN'
p5090
I0
sg39
F1.1166421196758165
sg34
g753
(S'\x07\xdf\x07\t\x11\x0f\x01\x06\x8b\xc8'
tRp5091
sa(dp5092
S'trial_loop.thisTrialN'
p5093
I103
sg3633
g4573
sS'block_loop.thisIndex'
p5094
g3627
sg38
S'left'
p5095
sg59
g63
sS'trial_loop.thisN'
p5096
I103
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p5097
g60
(g99
S'g\x00\x00\x00'
tRp5098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5099
I0
sg3642
g4580
sS'block_loop.thisRepN'
p5100
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5101
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5102
Nsg70
Vn
sS'block_loop.thisTrialN'
p5103
I0
sg39
F1.3669963547290536
sg34
g753
(S'\x07\xdf\x07\t\x11\x0f\x07\x08\xca\x00'
tRp5104
sa(dp5105
S'trial_loop.thisTrialN'
p5106
I104
sg3633
g4806
sS'block_loop.thisIndex'
p5107
g3627
sg38
S'right'
p5108
sg59
g63
sS'trial_loop.thisN'
p5109
I104
sg33
g3869
sg64
g65
sS'trial_loop.thisIndex'
p5110
g60
(g99
S'h\x00\x00\x00'
tRp5111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5112
I0
sg3642
g4813
sS'block_loop.thisRepN'
p5113
I1
sg3645
g3869
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5114
I1
sg3647
g3876
sg55
g11
sS'block_loop.thisTrial'
p5115
Nsg70
Vn
sS'block_loop.thisTrialN'
p5116
I0
sg39
F1.1166643573669717
sg34
g753
(S'\x07\xdf\x07\t\x11\x0f\r\x0e\xd4\xe0'
tRp5117
sa(dp5118
S'trial_loop.thisTrialN'
p5119
I105
sg3633
g4791
sS'block_loop.thisIndex'
p5120
g3627
sg38
S'right'
p5121
sg59
g63
sS'trial_loop.thisN'
p5122
I105
sg33
g4249
sg64
g65
sS'trial_loop.thisIndex'
p5123
g60
(g99
S'i\x00\x00\x00'
tRp5124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5125
I0
sg3642
g4798
sS'block_loop.thisRepN'
p5126
I1
sg3645
g4249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5127
I1
sg3647
g4256
sg55
g11
sS'block_loop.thisTrial'
p5128
Nsg70
Vn
sS'block_loop.thisTrialN'
p5129
I0
sg39
F1.1833446517484845
sg34
g753
(S'\x07\xdf\x07\t\x11\x0f\x14\x02\x0bp'
tRp5130
sa(dp5131
S'trial_loop.thisTrialN'
p5132
I106
sg3633
g3671
sS'block_loop.thisIndex'
p5133
g3627
sg38
S'left'
p5134
sg59
g63
sS'trial_loop.thisN'
p5135
I106
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5136
g60
(g99
S'j\x00\x00\x00'
tRp5137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5138
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5139
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5140
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5141
Nsg70
Vn
sS'block_loop.thisTrialN'
p5142
I0
sg39
F0.96666370164166437
sg34
g753
(S'\x07\xdf\x07\t\x11\x0f\x1a\x05;\xd8'
tRp5143
sa(dp5144
S'trial_loop.thisTrialN'
p5145
I107
sg3633
g4763
sS'block_loop.thisIndex'
p5146
g3627
sg38
S'left'
p5147
sg59
g63
sS'trial_loop.thisN'
p5148
I107
sg33
g3952
sg64
g65
sS'trial_loop.thisIndex'
p5149
g60
(g99
S'k\x00\x00\x00'
tRp5150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5151
I0
sg3642
g4770
sS'block_loop.thisRepN'
p5152
I1
sg3645
g3952
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5153
I1
sg3647
g3959
sg55
g11
sS'block_loop.thisTrial'
p5154
Nsg70
Vn
sS'block_loop.thisTrialN'
p5155
I0
sg39
F2.3333019724814221
sg34
g753
(S'\x07\xdf\x07\t\x11\x0f \x05SH'
tRp5156
sa(dp5157
S'trial_loop.thisTrialN'
p5158
I108
sg3633
g3756
sS'block_loop.thisIndex'
p5159
g3627
sg38
S'right'
p5160
sg59
g63
sS'trial_loop.thisN'
p5161
I108
sg33
g3767
sg64
g65
sS'trial_loop.thisIndex'
p5162
g60
(g99
S'l\x00\x00\x00'
tRp5163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5164
I0
sg3642
g3764
sS'block_loop.thisRepN'
p5165
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5166
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p5167
Nsg70
Vn
sS'block_loop.thisTrialN'
p5168
I0
sg39
F1.4670072454973706
sg34
g753
(S"\x07\xdf\x07\t\x11\x0f'\n\xdd@"
tRp5169
sa(dp5170
S'trial_loop.thisTrialN'
p5171
I109
sg3633
g4228
sS'block_loop.thisIndex'
p5172
g3627
sg38
S'left'
p5173
sg59
g63
sS'trial_loop.thisN'
p5174
I109
sg33
g4232
sg64
g65
sS'trial_loop.thisIndex'
p5175
g60
(g99
S'm\x00\x00\x00'
tRp5176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5177
I0
sg3642
g4236
sS'block_loop.thisRepN'
p5178
I1
sg3645
g4232
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5179
I1
sg3647
g4239
sg55
g11
sS'block_loop.thisTrial'
p5180
Nsg70
Vn
sS'block_loop.thisTrialN'
p5181
I0
sg39
F1.3832905970484717
sg34
g753
(S'\x07\xdf\x07\t\x11\x0f.\x03O\xa8'
tRp5182
sa(dp5183
S'trial_loop.thisTrialN'
p5184
I110
sg3633
g4083
sS'block_loop.thisIndex'
p5185
g3627
sg38
S'left'
p5186
sg59
g63
sS'trial_loop.thisN'
p5187
I110
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5188
g60
(g99
S'n\x00\x00\x00'
tRp5189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5190
I0
sg3642
g4090
sS'block_loop.thisRepN'
p5191
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5192
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5193
Nsg70
Vn
sS'block_loop.thisTrialN'
p5194
I0
sg39
F1.0665919138045865
sg34
g753
(S'\x07\xdf\x07\t\x11\x0f4\t\x99\x08'
tRp5195
sa(dp5196
S'trial_loop.thisTrialN'
p5197
I111
sg3633
g4228
sS'block_loop.thisIndex'
p5198
g3627
sg38
S'right'
p5199
sg59
g63
sS'trial_loop.thisN'
p5200
I111
sg33
g4232
sg64
g65
sS'trial_loop.thisIndex'
p5201
g60
(g99
S'o\x00\x00\x00'
tRp5202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5203
I0
sg3642
g4236
sS'block_loop.thisRepN'
p5204
I1
sg3645
g4232
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5205
I1
sg3647
g4239
sg55
g11
sS'block_loop.thisTrial'
p5206
Nsg70
Vn
sS'block_loop.thisTrialN'
p5207
I0
sg39
F1.1003900719515514
sg34
g753
(S'\x07\xdf\x07\t\x11\x0f:\x0b\x1b\xc0'
tRp5208
sa(dp5209
S'trial_loop.thisTrialN'
p5210
I112
sg3633
g4245
sS'block_loop.thisIndex'
p5211
g3627
sg38
S'left'
p5212
sg59
g63
sS'trial_loop.thisN'
p5213
I112
sg33
g4249
sg64
g65
sS'trial_loop.thisIndex'
p5214
g60
(g99
S'p\x00\x00\x00'
tRp5215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5216
I0
sg3642
g4253
sS'block_loop.thisRepN'
p5217
I1
sg3645
g4249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5218
I1
sg3647
g4256
sg55
g11
sS'block_loop.thisTrial'
p5219
Nsg70
Vn
sS'block_loop.thisTrialN'
p5220
I0
sg39
F0.81682270114833955
sg34
g753
(S'\x07\xdf\x07\t\x11\x10\x04\r\x1bx'
tRp5221
sa(dp5222
S'trial_loop.thisTrialN'
p5223
I113
sg3633
g3865
sS'block_loop.thisIndex'
p5224
g3627
sg38
S'left'
p5225
sg59
g63
sS'trial_loop.thisN'
p5226
I113
sg33
g3876
sg64
g65
sS'trial_loop.thisIndex'
p5227
g60
(g99
S'q\x00\x00\x00'
tRp5228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5229
I0
sg3642
g3873
sS'block_loop.thisRepN'
p5230
I1
sg3645
g3869
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5231
I1
sg3647
g3876
sg55
g11
sS'block_loop.thisTrial'
p5232
Nsg70
Vn
sS'block_loop.thisTrialN'
p5233
I0
sg39
F1.3837062708589656
sg34
g753
(S'\x07\xdf\x07\t\x11\x10\n\n\xd1\x88'
tRp5234
sa(dp5235
S'trial_loop.thisTrialN'
p5236
I114
sg3633
g4491
sS'block_loop.thisIndex'
p5237
g3627
sg38
S'left'
p5238
sg59
g63
sS'trial_loop.thisN'
p5239
I114
sg33
g3927
sg64
g65
sS'trial_loop.thisIndex'
p5240
g60
(g99
S'r\x00\x00\x00'
tRp5241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5242
I0
sg3642
g4498
sS'block_loop.thisRepN'
p5243
I1
sg3645
g3920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5244
I1
sg3647
g3927
sg55
g11
sS'block_loop.thisTrial'
p5245
Nsg70
Vn
sS'block_loop.thisTrialN'
p5246
I0
sg39
F2.2666116996479104
sg34
g753
(S'\x07\xdf\x07\t\x11\x10\x11\x01\xd8\xa8'
tRp5247
sa(dp5248
S'trial_loop.thisTrialN'
p5249
I115
sg3633
g4245
sS'block_loop.thisIndex'
p5250
g3627
sg38
S'left'
p5251
sg59
g63
sS'trial_loop.thisN'
p5252
I115
sg33
g4249
sg64
g65
sS'trial_loop.thisIndex'
p5253
g60
(g99
S's\x00\x00\x00'
tRp5254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5255
I0
sg3642
g4253
sS'block_loop.thisRepN'
p5256
I1
sg3645
g4249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5257
I1
sg3647
g4256
sg55
g11
sS'block_loop.thisTrial'
p5258
Nsg70
Vn
sS'block_loop.thisTrialN'
p5259
I0
sg39
F1.066545442725328
sg34
g753
(S'\x07\xdf\x07\t\x11\x10\x18\x06pp'
tRp5260
sa(dp5261
S'trial_loop.thisTrialN'
p5262
I116
sg3633
g4435
sS'block_loop.thisIndex'
p5263
g3627
sg38
S'left'
p5264
sg59
g63
sS'trial_loop.thisN'
p5265
I116
sg33
g4232
sg64
g65
sS'trial_loop.thisIndex'
p5266
g60
(g99
S't\x00\x00\x00'
tRp5267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5268
I0
sg3642
g4442
sS'block_loop.thisRepN'
p5269
I1
sg3645
g4232
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5270
I1
sg3647
g4239
sg55
g11
sS'block_loop.thisTrial'
p5271
Nsg70
Vn
sS'block_loop.thisTrialN'
p5272
I0
sg39
F1.0166893890273059
sg34
g753
(S'\x07\xdf\x07\t\x11\x10\x1e\x07\xf3('
tRp5273
sa(dp5274
S'trial_loop.thisTrialN'
p5275
I117
sg3633
S'23-crunchie_redo.png'
p5276
sS'block_loop.thisIndex'
p5277
g3627
sg38
S'right'
p5278
sg59
g63
sS'trial_loop.thisN'
p5279
I117
sg33
g4008
sg64
g65
sS'trial_loop.thisIndex'
p5280
g60
(g99
S'u\x00\x00\x00'
tRp5281
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5282
I0
sg3642
S'33-ambrosia_rice.png'
p5283
sS'block_loop.thisRepN'
p5284
I1
sg3645
g4001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5285
I1
sg3647
g4008
sg55
g11
sS'block_loop.thisTrial'
p5286
Nsg70
Vn
sS'block_loop.thisTrialN'
p5287
I0
sg39
F1.1166458259576757
sg34
g753
(S'\x07\xdf\x07\t\x11\x10$\x08\xc20'
tRp5288
sa(dp5289
S'trial_loop.thisTrialN'
p5290
I118
sg3633
g4394
sS'block_loop.thisIndex'
p5291
g3627
sg38
S'left'
p5292
sg59
g63
sS'trial_loop.thisN'
p5293
I118
sg33
g3842
sg64
g65
sS'trial_loop.thisIndex'
p5294
g60
(g99
S'v\x00\x00\x00'
tRp5295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5296
I0
sg3642
g4401
sS'block_loop.thisRepN'
p5297
I1
sg3645
g3835
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5298
I1
sg3647
g3842
sg55
g11
sS'block_loop.thisTrial'
p5299
Nsg70
Vn
sS'block_loop.thisTrialN'
p5300
I0
sg39
F0.91632725674207904
sg34
g753
(S'\x07\xdf\x07\t\x11\x10*\n\xfc\x80'
tRp5301
sa(dp5302
S'trial_loop.thisTrialN'
p5303
I119
sg3633
g4601
sS'block_loop.thisIndex'
p5304
g3627
sg38
S'right'
p5305
sg59
g63
sS'trial_loop.thisN'
p5306
I119
sg33
g3886
sg64
g65
sS'trial_loop.thisIndex'
p5307
g60
(g99
S'w\x00\x00\x00'
tRp5308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5309
I0
sg3642
g4608
sS'block_loop.thisRepN'
p5310
I1
sg3645
g3886
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5311
I1
sg3647
g3893
sg55
g11
sS'block_loop.thisTrial'
p5312
Nsg70
Vn
sS'block_loop.thisTrialN'
p5313
I0
sg39
F1.1000208692203159
sg34
g753
(S'\x07\xdf\x07\t\x11\x100\n`@'
tRp5314
sa(dp5315
S'trial_loop.thisTrialN'
p5316
I120
sg3633
g5276
sS'block_loop.thisIndex'
p5317
g3627
sg38
S'right'
p5318
sg59
g63
sS'trial_loop.thisN'
p5319
I120
sg33
g4001
sg64
g65
sS'trial_loop.thisIndex'
p5320
g60
(g99
S'x\x00\x00\x00'
tRp5321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5322
I0
sg3642
g5283
sS'block_loop.thisRepN'
p5323
I1
sg3645
g4001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5324
I1
sg3647
g4008
sg55
g11
sS'block_loop.thisTrial'
p5325
Nsg70
Vn
sS'block_loop.thisTrialN'
p5326
I0
sg39
F0.98334254201836302
sg34
g753
(S'\x07\xdf\x07\t\x11\x106\x0c\\\x10'
tRp5327
sa(dp5328
S'trial_loop.thisTrialN'
p5329
I121
sg3633
g4435
sS'block_loop.thisIndex'
p5330
g3627
sg38
S'left'
p5331
sg59
g63
sS'trial_loop.thisN'
p5332
I121
sg33
g4232
sg64
g65
sS'trial_loop.thisIndex'
p5333
g60
(g99
S'y\x00\x00\x00'
tRp5334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5335
I0
sg3642
g4442
sS'block_loop.thisRepN'
p5336
I1
sg3645
g4232
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5337
I1
sg3647
g4239
sg55
g11
sS'block_loop.thisTrial'
p5338
Nsg70
Vn
sS'block_loop.thisTrialN'
p5339
I0
sg39
F1.1332927352850675
sg34
g753
(S'\x07\xdf\x07\t\x11\x11\x00\x0c\xb2\x00'
tRp5340
sa(dp5341
S'trial_loop.thisTrialN'
p5342
I122
sg3633
g4573
sS'block_loop.thisIndex'
p5343
g3627
sg38
S'right'
p5344
sg59
g63
sS'trial_loop.thisN'
p5345
I122
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5346
g60
(g99
S'z\x00\x00\x00'
tRp5347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5348
I0
sg3642
g4580
sS'block_loop.thisRepN'
p5349
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5350
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5351
Nsg70
Vn
sS'block_loop.thisTrialN'
p5352
I0
sg39
F2.5499678123633203
sg34
g753
(S'\x07\xdf\x07\t\x11\x11\x06\x0f*\xd0'
tRp5353
sa(dp5354
S'trial_loop.thisTrialN'
p5355
I123
sg3633
g3865
sS'block_loop.thisIndex'
p5356
g3627
sg38
S'left'
p5357
sg59
g63
sS'trial_loop.thisN'
p5358
I123
sg33
g3876
sg64
g65
sS'trial_loop.thisIndex'
p5359
g60
(g99
S'{\x00\x00\x00'
tRp5360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5361
I0
sg3642
g3873
sS'block_loop.thisRepN'
p5362
I1
sg3645
g3869
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5363
I1
sg3647
g3876
sg55
g11
sS'block_loop.thisTrial'
p5364
Nsg70
Vn
sS'block_loop.thisTrialN'
p5365
I0
sg39
F0.90036458413305809
sg34
g753
(S'\x07\xdf\x07\t\x11\x11\x0e\x08\xca\x00'
tRp5366
sa(dp5367
S'trial_loop.thisTrialN'
p5368
I124
sg3633
g4506
sS'block_loop.thisIndex'
p5369
g3627
sg38
S'left'
p5370
sg59
g63
sS'trial_loop.thisN'
p5371
I124
sg33
g3984
sg64
g65
sS'trial_loop.thisIndex'
p5372
g60
(g99
S'|\x00\x00\x00'
tRp5373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5374
I0
sg3642
g4513
sS'block_loop.thisRepN'
p5375
I1
sg3645
g3984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5376
I1
sg3647
g3991
sg55
g11
sS'block_loop.thisTrial'
p5377
Nsg70
Vn
sS'block_loop.thisTrialN'
p5378
I0
sg39
F1.3833322214486543
sg34
g753
(S'\x07\xdf\x07\t\x11\x11\x14\x07\xb0\xc0'
tRp5379
sa(dp5380
S'trial_loop.thisTrialN'
p5381
I125
sg3633
g4709
sS'block_loop.thisIndex'
p5382
g3627
sg38
S'right'
p5383
sg59
g63
sS'trial_loop.thisN'
p5384
I125
sg33
g3732
sg64
g65
sS'trial_loop.thisIndex'
p5385
g60
(g99
S'}\x00\x00\x00'
tRp5386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5387
I0
sg3642
g4716
sS'block_loop.thisRepN'
p5388
I1
sg3645
g3732
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5389
I1
sg3647
g3726
sg55
g11
sS'block_loop.thisTrial'
p5390
Nsg70
Vn
sS'block_loop.thisTrialN'
p5391
I0
sg39
F1.5165531118800573
sg34
g753
(S'\x07\xdf\x07\t\x11\x11\x1a\x0e4\xb8'
tRp5392
sa(dp5393
S'trial_loop.thisTrialN'
p5394
I126
sg3633
g4763
sS'block_loop.thisIndex'
p5395
g3627
sg38
S'left'
p5396
sg59
g63
sS'trial_loop.thisN'
p5397
I126
sg33
g3959
sg64
g65
sS'trial_loop.thisIndex'
p5398
g60
(g99
S'~\x00\x00\x00'
tRp5399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5400
I0
sg3642
g4770
sS'block_loop.thisRepN'
p5401
I1
sg3645
g3952
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5402
I1
sg3647
g3959
sg55
g11
sS'block_loop.thisTrial'
p5403
Nsg70
Vn
sS'block_loop.thisTrialN'
p5404
I0
sg39
F1.0999983464280376
sg34
g753
(S'\x07\xdf\x07\t\x11\x11!\x07 8'
tRp5405
sa(dp5406
S'trial_loop.thisTrialN'
p5407
I127
sg3633
g4450
sS'block_loop.thisIndex'
p5408
g3627
sg38
S'left'
p5409
sg59
g63
sS'trial_loop.thisN'
p5410
I127
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p5411
g60
(g99
S'\x7f\x00\x00\x00'
tRp5412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5413
I0
sg3642
g4457
sS'block_loop.thisRepN'
p5414
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5415
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p5416
Nsg70
Vn
sS'block_loop.thisTrialN'
p5417
I0
sg39
F2.5832336913590552
sg34
g753
(S"\x07\xdf\x07\t\x11\x11'\t^p"
tRp5418
sa(dp5419
S'trial_loop.thisTrialN'
p5420
I128
sg3633
g3997
sS'block_loop.thisIndex'
p5421
g3627
sg38
S'left'
p5422
sg59
g63
sS'trial_loop.thisN'
p5423
I128
sg33
g4001
sg64
g65
sS'trial_loop.thisIndex'
p5424
g60
(g99
S'\x80\x00\x00\x00'
tRp5425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5426
I0
sg3642
g4005
sS'block_loop.thisRepN'
p5427
I1
sg3645
g4001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5428
I1
sg3647
g4008
sg55
g11
sS'block_loop.thisTrial'
p5429
Nsg70
Vn
sS'block_loop.thisTrialN'
p5430
I0
sg39
F1.3170122917435947
sg34
g753
(S'\x07\xdf\x07\t\x11\x11/\x03v\xb8'
tRp5431
sa(dp5432
S'trial_loop.thisTrialN'
p5433
I129
sg3633
g4668
sS'block_loop.thisIndex'
p5434
g3627
sg38
S'right'
p5435
sg59
g63
sS'trial_loop.thisN'
p5436
I129
sg33
g3903
sg64
g65
sS'trial_loop.thisIndex'
p5437
g60
(g99
S'\x81\x00\x00\x00'
tRp5438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5439
I0
sg3642
g4675
sS'block_loop.thisRepN'
p5440
I1
sg3645
g3903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5441
I1
sg3647
g3910
sg55
g11
sS'block_loop.thisTrial'
p5442
Nsg70
Vn
sS'block_loop.thisTrialN'
p5443
I0
sg39
F1.1998629815971071
sg34
g753
(S'\x07\xdf\x07\t\x11\x115\x08\xca\x00'
tRp5444
sa(dp5445
S'trial_loop.thisTrialN'
p5446
I130
sg3633
g3688
sS'block_loop.thisIndex'
p5447
g3627
sg38
S'right'
p5448
sg59
g63
sS'trial_loop.thisN'
p5449
I130
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5450
g60
(g99
S'\x82\x00\x00\x00'
tRp5451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5452
I0
sg3642
g3696
sS'block_loop.thisRepN'
p5453
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5454
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5455
Nsg70
Vn
sS'block_loop.thisTrialN'
p5456
I0
sg39
F1.0332721511658747
sg34
g753
(S'\x07\xdf\x07\t\x11\x11;\x0cs\x80'
tRp5457
sa(dp5458
S'trial_loop.thisTrialN'
p5459
I131
sg3633
g3899
sS'block_loop.thisIndex'
p5460
g3627
sg38
S'left'
p5461
sg59
g63
sS'trial_loop.thisN'
p5462
I131
sg33
g3903
sg64
g65
sS'trial_loop.thisIndex'
p5463
g60
(g99
S'\x83\x00\x00\x00'
tRp5464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5465
I0
sg3642
g3907
sS'block_loop.thisRepN'
p5466
I1
sg3645
g3903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5467
I1
sg3647
g3910
sg55
g11
sS'block_loop.thisTrial'
p5468
Nsg70
Vn
sS'block_loop.thisTrialN'
p5469
I0
sg39
F1.3330562174596707
sg34
g753
(S'\x07\xdf\x07\t\x11\x12\x05\rB\x88'
tRp5470
sa(dp5471
S'trial_loop.thisTrialN'
p5472
I132
sg3633
g3705
sS'block_loop.thisIndex'
p5473
g3627
sg38
S'left'
p5474
sg59
g63
sS'trial_loop.thisN'
p5475
I132
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5476
g60
(g99
S'\x84\x00\x00\x00'
tRp5477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5478
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5479
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5480
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5481
Nsg70
Vn
sS'block_loop.thisTrialN'
p5482
I0
sg39
F1.6499196877157374
sg34
g753
(S'\x07\xdf\x07\t\x11\x12\x0c\x03\x8e('
tRp5483
sa(dp5484
S'trial_loop.thisTrialN'
p5485
I133
sg3633
g3671
sS'block_loop.thisIndex'
p5486
g3627
sg38
S'left'
p5487
sg59
g63
sS'trial_loop.thisN'
p5488
I133
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p5489
g60
(g99
S'\x85\x00\x00\x00'
tRp5490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5491
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5492
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5493
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5494
Nsg70
Vn
sS'block_loop.thisTrialN'
p5495
I0
sg39
F1.0839113708170771
sg34
g753
(S'\x07\xdf\x07\t\x11\x12\x12\x0e!0'
tRp5496
sa(dp5497
S'trial_loop.thisTrialN'
p5498
I134
sg3633
g3997
sS'block_loop.thisIndex'
p5499
g3627
sg38
S'left'
p5500
sg59
g63
sS'trial_loop.thisN'
p5501
I134
sg33
g4001
sg64
g65
sS'trial_loop.thisIndex'
p5502
g60
(g99
S'\x86\x00\x00\x00'
tRp5503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5504
I0
sg3642
g4005
sS'block_loop.thisRepN'
p5505
I1
sg3645
g4001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5506
I1
sg3647
g4008
sg55
g11
sS'block_loop.thisTrial'
p5507
Nsg70
Vn
sS'block_loop.thisTrialN'
p5508
I0
sg39
F2.1332551022678672
sg34
g753
(S'\x07\xdf\x07\t\x11\x12\x19\x00\xa0('
tRp5509
sa(dp5510
S'trial_loop.thisTrialN'
p5511
I135
sg3633
g4601
sS'block_loop.thisIndex'
p5512
g3627
sg38
S'right'
p5513
sg59
g63
sS'trial_loop.thisN'
p5514
I135
sg33
g3886
sg64
g65
sS'trial_loop.thisIndex'
p5515
g60
(g99
S'\x87\x00\x00\x00'
tRp5516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5517
I0
sg3642
g4608
sS'block_loop.thisRepN'
p5518
I1
sg3645
g3886
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5519
I1
sg3647
g3893
sg55
g11
sS'block_loop.thisTrial'
p5520
Nsg70
Vn
sS'block_loop.thisTrialN'
p5521
I0
sg39
F1.2164913595188409
sg34
g753
(S'\x07\xdf\x07\t\x11\x12 \x03\x11('
tRp5522
sa(dp5523
S'trial_loop.thisTrialN'
p5524
I136
sg3633
g3997
sS'block_loop.thisIndex'
p5525
g3627
sg38
S'left'
p5526
sg59
g63
sS'trial_loop.thisN'
p5527
I136
sg33
g4001
sg64
g65
sS'trial_loop.thisIndex'
p5528
g60
(g99
S'\x88\x00\x00\x00'
tRp5529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5530
I0
sg3642
g4005
sS'block_loop.thisRepN'
p5531
I1
sg3645
g4001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5532
I1
sg3647
g4008
sg55
g11
sS'block_loop.thisTrial'
p5533
Nsg70
Vn
sS'block_loop.thisTrialN'
p5534
I0
sg39
F0.86660719509018236
sg34
g753
(S'\x07\xdf\x07\t\x11\x12&\x06\xf9('
tRp5535
sa(dp5536
S'trial_loop.thisTrialN'
p5537
I137
sg3633
g4668
sS'block_loop.thisIndex'
p5538
g3627
sg38
S'right'
p5539
sg59
g63
sS'trial_loop.thisN'
p5540
I137
sg33
g3903
sg64
g65
sS'trial_loop.thisIndex'
p5541
g60
(g99
S'\x89\x00\x00\x00'
tRp5542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5543
I0
sg3642
g4675
sS'block_loop.thisRepN'
p5544
I1
sg3645
g3903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5545
I1
sg3647
g3910
sg55
g11
sS'block_loop.thisTrial'
p5546
Nsg70
Vn
sS'block_loop.thisTrialN'
p5547
I0
sg39
F1.0332020169043972
sg34
g753
(S'\x07\xdf\x07\t\x11\x12,\x05f\xd0'
tRp5548
sa(dp5549
S'trial_loop.thisTrialN'
p5550
I138
sg3633
g3916
sS'block_loop.thisIndex'
p5551
g3627
sg38
S'right'
p5552
sg59
g63
sS'trial_loop.thisN'
p5553
I138
sg33
g3920
sg64
g65
sS'trial_loop.thisIndex'
p5554
g60
(g99
S'\x8a\x00\x00\x00'
tRp5555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5556
I0
sg3642
g3924
sS'block_loop.thisRepN'
p5557
I1
sg3645
g3920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5558
I1
sg3647
g3927
sg55
g11
sS'block_loop.thisTrial'
p5559
Nsg70
Vn
sS'block_loop.thisTrialN'
p5560
I0
sg39
F1.7836568917737168
sg34
g753
(S'\x07\xdf\x07\t\x11\x122\x06pp'
tRp5561
sa(dp5562
S'trial_loop.thisTrialN'
p5563
I139
sg3633
g3739
sS'block_loop.thisIndex'
p5564
g3627
sg38
S'left'
p5565
sg59
g63
sS'trial_loop.thisN'
p5566
I139
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p5567
g60
(g99
S'\x8b\x00\x00\x00'
tRp5568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5569
I0
sg3642
g3747
sS'block_loop.thisRepN'
p5570
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5571
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p5572
Nsg70
Vn
sS'block_loop.thisTrialN'
p5573
I0
sg39
F0.96655678965180414
sg34
g753
(S'\x07\xdf\x07\t\x11\x129\x03\xa9\x80'
tRp5574
sa(dp5575
S'trial_loop.thisTrialN'
p5576
I140
sg3633
g3899
sS'block_loop.thisIndex'
p5577
g3627
sg38
S'left'
p5578
sg59
g63
sS'trial_loop.thisN'
p5579
I140
sg33
g3903
sg64
g65
sS'trial_loop.thisIndex'
p5580
g60
(g99
S'\x8c\x00\x00\x00'
tRp5581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5582
I0
sg3642
g3907
sS'block_loop.thisRepN'
p5583
I1
sg3645
g3903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5584
I1
sg3647
g3910
sg55
g11
sS'block_loop.thisTrial'
p5585
Nsg70
Vn
sS'block_loop.thisTrialN'
p5586
I0
sg39
F0.83310953090403927
sg34
g753
(S'\x07\xdf\x07\t\x11\x13\x03\x03\xc0\xf0'
tRp5587
sa(dp5588
S'trial_loop.thisTrialN'
p5589
I141
sg3633
g3739
sS'block_loop.thisIndex'
p5590
g3627
sg38
S'left'
p5591
sg59
g63
sS'trial_loop.thisN'
p5592
I141
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p5593
g60
(g99
S'\x8d\x00\x00\x00'
tRp5594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5595
I0
sg3642
g3747
sS'block_loop.thisRepN'
p5596
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5597
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p5598
Nsg70
Vn
sS'block_loop.thisTrialN'
p5599
I0
sg39
F0.93333994761997019
sg34
g753
(S'\x07\xdf\x07\t\x11\x13\t\x01\xb1\x98'
tRp5600
sa(dp5601
S'trial_loop.thisTrialN'
p5602
I142
sg3633
g3933
sS'block_loop.thisIndex'
p5603
g3627
sg38
S'right'
p5604
sg59
g63
sS'trial_loop.thisN'
p5605
I142
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5606
g60
(g99
S'\x8e\x00\x00\x00'
tRp5607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5608
I0
sg3642
g3940
sS'block_loop.thisRepN'
p5609
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5610
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vn
sS'block_loop.thisTrialN'
p5612
I0
sg39
F0.83328942814478069
sg34
g753
(S'\x07\xdf\x07\t\x11\x13\x0f\x01\x11p'
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g4027
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'right'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g4034
sS'block_loop.thisRepN'
p5622
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5623
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vn
sS'block_loop.thisTrialN'
p5625
I0
sg39
F1.1499003010067099
sg34
g753
(S'\x07\xdf\x07\t\x11\x13\x14\x0eH@'
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g4394
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'left'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g3835
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g4401
sS'block_loop.thisRepN'
p5635
I1
sg3645
g3835
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5636
I1
sg3647
g3842
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vn
sS'block_loop.thisTrialN'
p5638
I0
sg39
F0.79975584152634838
sg34
g753
(S'\x07\xdf\x07\t\x11\x13\x1b\x01\xf7\xe8'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g3654
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'left'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5648
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5649
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vn
sS'block_loop.thisTrialN'
p5651
I0
sg39
F0.84999535289171035
sg34
g753
(S'\x07\xdf\x07\t\x11\x13 \x0e\xb5\xa0'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g3965
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'right'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g3972
sS'block_loop.thisRepN'
p5661
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5662
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vn
sS'block_loop.thisTrialN'
p5664
I0
sg39
F1.149990107078338
sg34
g753
(S'\x07\xdf\x07\t\x11\x13&\x0c\xe4\xc8'
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g4806
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'right'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g3869
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g4813
sS'block_loop.thisRepN'
p5674
I1
sg3645
g3869
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5675
I1
sg3647
g3876
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vn
sS'block_loop.thisTrialN'
p5677
I0
sg39
F1.2666350777399202
sg34
g753
(S'\x07\xdf\x07\t\x11\x13-\x00U\xf0'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g3634
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'right'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5687
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5688
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vn
sS'block_loop.thisTrialN'
p5690
I0
sg39
F1.117006475731614
sg34
g753
(S'\x07\xdf\x07\t\x11\x133\x04\xf5\x88'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g3865
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'left'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g3869
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g3873
sS'block_loop.thisRepN'
p5700
I1
sg3645
g3869
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5701
I1
sg3647
g3876
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vn
sS'block_loop.thisTrialN'
p5703
I0
sg39
F0.80000131145425257
sg34
g753
(S'\x07\xdf\x07\t\x11\x139\x07/\xd8'
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g3722
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'left'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g3732
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g3730
sS'block_loop.thisRepN'
p5713
I1
sg3645
g3732
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5714
I1
sg3647
g3726
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vn
sS'block_loop.thisTrialN'
p5716
I0
sg39
F2.7332996346740401
sg34
g753
(S'\x07\xdf\x07\t\x11\x14\x03\x04\xabP'
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g3948
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'left'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g3952
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g3956
sS'block_loop.thisRepN'
p5726
I1
sg3645
g3952
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5727
I1
sg3647
g3959
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vn
sS'block_loop.thisTrialN'
p5729
I0
sg39
F1.5666509292204864
sg34
g753
(S'\x07\xdf\x07\t\x11\x14\x0b\x01!\x10'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g4601
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'right'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g3886
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g4608
sS'block_loop.thisRepN'
p5739
I1
sg3645
g3886
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5740
I1
sg3647
g3893
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vn
sS'block_loop.thisTrialN'
p5742
I0
sg39
F0.9500070989561209
sg34
g753
(S'\x07\xdf\x07\t\x11\x14\x11\nD\xe8'
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g4709
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'right'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g3732
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g4716
sS'block_loop.thisRepN'
p5752
I1
sg3645
g3732
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5753
I1
sg3647
g3726
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vn
sS'block_loop.thisTrialN'
p5755
I0
sg39
F1.2999642486320226
sg34
g753
(S'\x07\xdf\x07\t\x11\x14\x17\n!\xc0'
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g4055
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'left'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g4062
sS'block_loop.thisRepN'
p5765
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5766
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vn
sS'block_loop.thisTrialN'
p5768
I0
sg39
F0.84988131343925488
sg34
g753
(S'\x07\xdf\x07\t\x11\x14\x1d\x0f6\x88'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g3671
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'left'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5778
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5779
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vn
sS'block_loop.thisTrialN'
p5781
I0
sg39
F0.98334054632869083
sg34
g753
(S'\x07\xdf\x07\t\x11\x14#\re\xb0'
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g4083
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'left'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g4090
sS'block_loop.thisRepN'
p5791
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5792
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vn
sS'block_loop.thisTrialN'
p5794
I0
sg39
F1.2165934248259873
sg34
g753
(S'\x07\xdf\x07\t\x11\x14)\r} '
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g3816
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'left'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g3823
sS'block_loop.thisRepN'
p5804
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5805
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vn
sS'block_loop.thisTrialN'
p5807
I0
sg39
F0.71667410774171003
sg34
g753
(S'\x07\xdf\x07\t\x11\x140\x02"\xe0'
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g4791
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'right'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g4249
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g4798
sS'block_loop.thisRepN'
p5817
I1
sg3645
g4249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5818
I1
sg3647
g4256
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vn
sS'block_loop.thisTrialN'
p5820
I0
sg39
F1.0332328075564874
sg34
g753
(S'\x07\xdf\x07\t\x11\x145\r\xaf\xe8'
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g3948
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'right'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g3952
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g3956
sS'block_loop.thisRepN'
p5830
I1
sg3645
g3952
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5831
I1
sg3647
g3959
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vn
sS'block_loop.thisTrialN'
p5833
I0
sg39
F0.95034665142884478
sg34
g753
(S'\x07\xdf\x07\t\x11\x14;\x0e\xb9\x88'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g5276
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'right'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g4001
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g5283
sS'block_loop.thisRepN'
p5843
I1
sg3645
g4001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5844
I1
sg3647
g4008
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vn
sS'block_loop.thisTrialN'
p5846
I0
sg39
F1.0166657258378109
sg34
g753
(S'\x07\xdf\x07\t\x11\x15\x05\x0eW\xe0'
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g4027
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'right'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g4034
sS'block_loop.thisRepN'
p5856
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5857
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vn
sS'block_loop.thisTrialN'
p5859
I0
sg39
F0.91665369467591518
sg34
g753
(S'\x07\xdf\x07\t\x11\x15\x0b\x0f&\xe8'
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g4668
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'right'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g3903
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g4675
sS'block_loop.thisRepN'
p5869
I1
sg3645
g3903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5870
I1
sg3647
g3910
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vn
sS'block_loop.thisTrialN'
p5872
I0
sg39
F1.0832430996160838
sg34
g753
(S'\x07\xdf\x07\t\x11\x15\x11\x0eH@'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g3722
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'left'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g3730
sS'block_loop.thisRepN'
p5882
I1
sg3645
g3732
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5883
I1
sg3647
g3726
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vn
sS'block_loop.thisTrialN'
p5885
I0
sg39
F1.3336552096916421
sg34
g753
(S'\x07\xdf\x07\t\x11\x15\x18\x00\xc78'
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g4763
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'left'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g3952
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g4770
sS'block_loop.thisRepN'
p5895
I1
sg3645
g3952
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5896
I1
sg3647
g3959
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vn
sS'block_loop.thisTrialN'
p5898
I0
sg39
F1.6999770210495626
sg34
g753
(S'\x07\xdf\x07\t\x11\x15\x1e\x06Y\x00'
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g3756
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'right'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g3767
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g3764
sS'block_loop.thisRepN'
p5908
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5909
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vn
sS'block_loop.thisTrialN'
p5911
I0
sg39
F1.1999781614467793
sg34
g753
(S'\x07\xdf\x07\t\x11\x15%\x02]x'
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g4450
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'left'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g4457
sS'block_loop.thisRepN'
p5921
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5922
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vn
sS'block_loop.thisTrialN'
p5924
I0
sg39
F1.4832179539153003
sg34
g753
(S'\x07\xdf\x07\t\x11\x15+\x06\x06\xf8'
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g4806
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'right'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g3869
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g4813
sS'block_loop.thisRepN'
p5934
I1
sg3645
g3869
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5935
I1
sg3647
g3876
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vn
sS'block_loop.thisTrialN'
p5937
I0
sg39
F1.1499404999158287
sg34
g753
(S'\x07\xdf\x07\t\x11\x151\r\xbf\x88'
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g3948
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'right'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g3959
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g3956
sS'block_loop.thisRepN'
p5947
I1
sg3645
g3952
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5948
I1
sg3647
g3959
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vn
sS'block_loop.thisTrialN'
p5950
I0
sg39
F0.81702227019559359
sg34
g753
(S'\x07\xdf\x07\t\x11\x158\x01o0'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g3654
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'left'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5960
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5961
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vn
sS'block_loop.thisTrialN'
p5963
I0
sg39
F1.0999458882797626
sg34
g753
(S'\x07\xdf\x07\t\x11\x16\x01\x0eg\x80'
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g3831
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'right'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g3835
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g3839
sS'block_loop.thisRepN'
p5973
I1
sg3645
g3835
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5974
I1
sg3647
g3842
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vn
sS'block_loop.thisTrialN'
p5976
I0
sg39
F0.61638980738280225
sg34
g753
(S'\x07\xdf\x07\t\x11\x16\x08\x01$\xf8'
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g4083
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'left'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g4090
sS'block_loop.thisRepN'
p5986
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5987
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vn
sS'block_loop.thisTrialN'
p5989
I0
sg39
F0.8166447996009083
sg34
g753
(S'\x07\xdf\x07\t\x11\x16\r\x0b\x04P'
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g4506
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'left'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g3984
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g4513
sS'block_loop.thisRepN'
p5999
I1
sg3645
g3984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6000
I1
sg3647
g3991
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vn
sS'block_loop.thisTrialN'
p6002
I0
sg39
F0.95000396287287003
sg34
g753
(S'\x07\xdf\x07\t\x11\x16\x13\x08\xba`'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g4668
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'right'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g3903
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g4675
sS'block_loop.thisRepN'
p6012
I1
sg3645
g3903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6013
I1
sg3647
g3910
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vn
sS'block_loop.thisTrialN'
p6015
I0
sg39
F1.0664684660951025
sg34
g753
(S'\x07\xdf\x07\t\x11\x16\x19\x08\x93P'
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g4491
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'left'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g3920
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g4498
sS'block_loop.thisRepN'
p6025
I1
sg3645
g3920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6026
I1
sg3647
g3927
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vn
sS'block_loop.thisTrialN'
p6028
I0
sg39
F1.216697770927567
sg34
g753
(S'\x07\xdf\x07\t\x11\x16\x1f\n\x19\xf0'
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g4573
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'right'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g4580
sS'block_loop.thisRepN'
p6038
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6039
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vn
sS'block_loop.thisTrialN'
p6041
I0
sg39
F3.3998878992169921
sg34
g753
(S'\x07\xdf\x07\t\x11\x16%\r\xc3p'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g4491
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'right'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g3927
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g4498
sS'block_loop.thisRepN'
p6051
I1
sg3645
g3920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6052
I1
sg3647
g3927
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vn
sS'block_loop.thisTrialN'
p6054
I0
sg39
F1.8500592149866861
sg34
g753
(S'\x07\xdf\x07\t\x11\x16.\x057\xf0'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g4275
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'left'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g4282
sS'block_loop.thisRepN'
p6064
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6065
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vn
sS'block_loop.thisTrialN'
p6067
I0
sg39
F1.1999929865705781
sg34
g753
(S'\x07\xdf\x07\t\x11\x165\x03_H'
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g3916
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'right'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g3920
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g3924
sS'block_loop.thisRepN'
p6077
I1
sg3645
g3920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6078
I1
sg3647
g3927
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vn
sS'block_loop.thisTrialN'
p6080
I0
sg39
F1.3832903119473485
sg34
g753
(S'\x07\xdf\x07\t\x11\x16;\x07\x08\xc8'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g3965
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'right'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g3972
sS'block_loop.thisRepN'
p6090
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6091
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vn
sS'block_loop.thisTrialN'
p6093
I0
sg39
F1.6336779035445943
sg34
g753
(S'\x07\xdf\x07\t\x11\x17\x05\rR('
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g4791
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'right'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g4256
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g4798
sS'block_loop.thisRepN'
p6103
I1
sg3645
g4249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6104
I1
sg3647
g4256
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vn
sS'block_loop.thisTrialN'
p6106
I0
sg39
F0.93334907077587559
sg34
g753
(S'\x07\xdf\x07\t\x11\x17\x0c\x08%\xf0'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g4806
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'right'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g3869
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g4813
sS'block_loop.thisRepN'
p6116
I1
sg3645
g3869
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6117
I1
sg3647
g3876
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vn
sS'block_loop.thisTrialN'
p6119
I0
sg39
F1.0333243242166645
sg34
g753
(S'\x07\xdf\x07\t\x11\x17\x12\x07\xc4H'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g3634
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'right'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g3643
sS'block_loop.thisRepN'
p6129
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6130
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vn
sS'block_loop.thisTrialN'
p6132
I0
sg39
F1.2167396804252348
sg34
g753
(S'\x07\xdf\x07\t\x11\x17\x18\x08\xcd\xe8'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g3671
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'left'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g3679
sS'block_loop.thisRepN'
p6142
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6143
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vn
sS'block_loop.thisTrialN'
p6145
I0
sg39
F1.2666724256596353
sg34
g753
(S'\x07\xdf\x07\t\x11\x17\x1e\x0cwh'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g4450
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'left'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g4457
sS'block_loop.thisRepN'
p6155
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6156
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vn
sS'block_loop.thisTrialN'
p6158
I0
sg39
F1.2503391248283151
sg34
g753
(S'\x07\xdf\x07\t\x11\x17%\x01\xd4\xc0'
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g3799
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'left'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g3807
sS'block_loop.thisRepN'
p6168
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6169
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vn
sS'block_loop.thisTrialN'
p6171
I0
sg39
F1.5833260633189639
sg34
g753
(S'\x07\xdf\x07\t\x11\x17+\x061\xf0'
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g4709
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'right'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g3732
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g4716
sS'block_loop.thisRepN'
p6181
I1
sg3645
g3732
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6182
I1
sg3647
g3726
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vn
sS'block_loop.thisTrialN'
p6184
I0
sg39
F1.1166600808865041
sg34
g753
(S'\x07\xdf\x07\t\x11\x172\x00R\x08'
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g3980
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'right'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g3991
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g3988
sS'block_loop.thisRepN'
p6194
I1
sg3645
g3984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6195
I1
sg3647
g3991
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vn
sS'block_loop.thisTrialN'
p6197
I0
sg39
F1.4499537855117524
sg34
g753
(S'\x07\xdf\x07\t\x11\x178\x02\x8cX'
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g3688
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'right'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g3696
sS'block_loop.thisRepN'
p6207
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6208
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vn
sS'block_loop.thisTrialN'
p6210
I0
sg39
F0.94989790617546532
sg34
g753
(S'\x07\xdf\x07\t\x11\x18\x02\n\x06h'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g3933
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'right'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g3940
sS'block_loop.thisRepN'
p6220
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6221
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vn
sS'block_loop.thisTrialN'
p6223
I0
sg39
F1.3003471360971162
sg34
g753
(S'\x07\xdf\x07\t\x11\x18\x08\t\xa4\xc0'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g4791
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'right'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g4256
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g4798
sS'block_loop.thisRepN'
p6233
I1
sg3645
g4249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6234
I1
sg3647
g4256
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vn
sS'block_loop.thisTrialN'
p6236
I0
sg39
F0.91666509862261591
sg34
g753
(S'\x07\xdf\x07\t\x11\x18\x0e\x0e\xb9\x88'
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g3865
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'left'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g3869
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g3873
sS'block_loop.thisRepN'
p6246
I1
sg3645
g3869
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6247
I1
sg3647
g3876
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vn
sS'block_loop.thisTrialN'
p6249
I0
sg39
F0.91666709431592608
sg34
g753
(S'\x07\xdf\x07\t\x11\x18\x14\x0e\x19`'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g5276
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'right'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g4001
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g5283
sS'block_loop.thisRepN'
p6259
I1
sg3645
g4001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6260
I1
sg3647
g4008
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vn
sS'block_loop.thisTrialN'
p6262
I0
sg39
F0.63334462323837215
sg34
g753
(S'\x07\xdf\x07\t\x11\x18\x1a\r>\xa0'
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g3799
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'left'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g3807
sS'block_loop.thisRepN'
p6272
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6273
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vn
sS'block_loop.thisTrialN'
p6275
I0
sg39
F0.80001499618811067
sg34
g753
(S'\x07\xdf\x07\t\x11\x18 \x08\x1a8'
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g4601
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'right'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g3886
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g4608
sS'block_loop.thisRepN'
p6285
I1
sg3645
g3886
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6286
I1
sg3647
g3893
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vn
sS'block_loop.thisTrialN'
p6288
I0
sg39
F0.6833925483188068
sg34
g753
(S'\x07\xdf\x07\t\x11\x18&\x05\x91\xc8'
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g5276
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'right'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g4001
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g5283
sS'block_loop.thisRepN'
p6298
I1
sg3645
g4001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6299
I1
sg3647
g4008
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vn
sS'block_loop.thisTrialN'
p6301
I0
sg39
F0.63309715762079577
sg34
g753
(S'\x07\xdf\x07\t\x11\x18,\x01cx'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g4245
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'left'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g4256
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g4253
sS'block_loop.thisRepN'
p6311
I1
sg3645
g4249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6312
I1
sg3647
g4256
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vn
sS'block_loop.thisTrialN'
p6314
I0
sg39
F1.0998843069755821
sg34
g753
(S'\x07\xdf\x07\t\x11\x181\x0b}h'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g4709
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'right'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g3732
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g4716
sS'block_loop.thisRepN'
p6324
I1
sg3645
g3732
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6325
I1
sg3647
g3726
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vn
sS'block_loop.thisTrialN'
p6327
I0
sg39
F0.833310240344872
sg34
g753
(S'\x07\xdf\x07\t\x11\x187\r} '
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g4763
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'left'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g3952
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g4770
sS'block_loop.thisRepN'
p6337
I1
sg3645
g3952
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6338
I1
sg3647
g3959
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vn
sS'block_loop.thisTrialN'
p6340
I0
sg39
F1.63332751732014
sg34
g753
(S'\x07\xdf\x07\t\x11\x19\x01\x0bq\xb0'
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g3848
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'right'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g3856
sS'block_loop.thisRepN'
p6350
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6351
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vn
sS'block_loop.thisTrialN'
p6353
I0
sg39
F0.91676032156829024
sg34
g753
(S'\x07\xdf\x07\t\x11\x19\x08\x06\x83\xf8'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F38.299690268842824
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vn
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vn
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'48-twix.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'left'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'50-polo.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'50-polo.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6384
I2
sS'img_wrong'
p6385
S'48-twix.png'
p6386
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vn
sS'block_loop.thisTrialN'
p6388
I0
sg39
F1.749821670804522
sg34
g753
(S'\x07\xdf\x07\t\x11\x1b\x1a\n\xc1\xe8'
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'18-mms.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'right'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'18-mms.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6402
I2
sg6385
S'43-mrporky_pork_crackles_redo.png'
p6403
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vn
sS'block_loop.thisTrialN'
p6405
I0
sg39
F0.68334265605881228
sg34
g753
(S'\x07\xdf\x07\t\x11\x1b!\x07C`'
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'5-pineapple.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'left'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
S'5-pineapple.png'
p6413
sg64
g65
sS'trial_loop.thisIndex'
p6414
g60
(g99
S'\x02\x00\x00\x00'
tRp6415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6416
I0
sg6380
S'40-sardines.png'
p6417
sS'block_loop.thisRepN'
p6418
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6419
I2
sg6385
S'40-sardines.png'
p6420
sg55
g11
sS'block_loop.thisTrial'
p6421
Nsg70
Vn
sS'block_loop.thisTrialN'
p6422
I0
sg39
F0.93325783921318362
sg34
g753
(S"\x07\xdf\x07\t\x11\x1b'\x02\xd2\xa8"
tRp6423
sa(dp6424
S'trial_loop.thisTrialN'
p6425
I3
sg6371
S'46-pistachios.png'
p6426
sS'block_loop.thisIndex'
p6427
g6365
sg38
S'right'
p6428
sg59
g63
sS'trial_loop.thisN'
p6429
I3
sg33
S'29-beans.png'
p6430
sg64
g65
sS'trial_loop.thisIndex'
p6431
g60
(g99
S'\x03\x00\x00\x00'
tRp6432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6433
I0
sg6380
S'29-beans.png'
p6434
sS'block_loop.thisRepN'
p6435
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6436
I2
sg6385
S'46-pistachios.png'
p6437
sg55
g11
sS'block_loop.thisTrial'
p6438
Nsg70
Vn
sS'block_loop.thisTrialN'
p6439
I0
sg39
F1.149998374934512
sg34
g753
(S'\x07\xdf\x07\t\x11\x1b-\x02q\x00'
tRp6440
sa(dp6441
S'trial_loop.thisTrialN'
p6442
I4
sg6371
S'21-nakd_banana_crunch.png'
p6443
sS'block_loop.thisIndex'
p6444
g6365
sg38
S'right'
p6445
sg59
g63
sS'trial_loop.thisN'
p6446
I4
sg33
S'1-treacle_cookies.png'
p6447
sg64
g65
sS'trial_loop.thisIndex'
p6448
g60
(g99
S'\x04\x00\x00\x00'
tRp6449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6450
I0
sg6380
S'1-treacle_cookies.png'
p6451
sS'block_loop.thisRepN'
p6452
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6453
I2
sg6385
S'21-nakd_banana_crunch.png'
p6454
sg55
g11
sS'block_loop.thisTrial'
p6455
Nsg70
Vn
sS'block_loop.thisTrialN'
p6456
I0
sg39
F0.8499668430267775
sg34
g753
(S'\x07\xdf\x07\t\x11\x1b3\x05(P'
tRp6457
sa(dp6458
S'trial_loop.thisTrialN'
p6459
I5
sg6371
S'50-polo.png'
p6460
sS'block_loop.thisIndex'
p6461
g6365
sg38
S'right'
p6462
sg59
g63
sS'trial_loop.thisN'
p6463
I5
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6464
g60
(g99
S'\x05\x00\x00\x00'
tRp6465
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6466
I0
sg6380
S'48-twix.png'
p6467
sS'block_loop.thisRepN'
p6468
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6469
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6470
Nsg70
Vn
sS'block_loop.thisTrialN'
p6471
I0
sg39
F0.71660682446236024
sg34
g753
(S'\x07\xdf\x07\t\x11\x1b9\x03Wx'
tRp6472
sa(dp6473
S'trial_loop.thisTrialN'
p6474
I6
sg6371
S'49-yorkie.png'
p6475
sS'block_loop.thisIndex'
p6476
g6365
sg38
S'right'
p6477
sg59
g63
sS'trial_loop.thisN'
p6478
I6
sg33
S'49-yorkie.png'
p6479
sg64
g65
sS'trial_loop.thisIndex'
p6480
g60
(g99
S'\x06\x00\x00\x00'
tRp6481
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6482
I0
sg6380
S'35-raisins.png'
p6483
sS'block_loop.thisRepN'
p6484
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6485
I2
sg6385
S'35-raisins.png'
p6486
sg55
g11
sS'block_loop.thisTrial'
p6487
Nsg70
Vn
sS'block_loop.thisTrialN'
p6488
I0
sg39
F0.91661178517824737
sg34
g753
(S'\x07\xdf\x07\t\x11\x1c\x02\x0e\xe0\x98'
tRp6489
sa(dp6490
S'trial_loop.thisTrialN'
p6491
I7
sg6371
S'41-peanuts_redo.png'
p6492
sS'block_loop.thisIndex'
p6493
g6365
sg38
S'left'
p6494
sg59
g63
sS'trial_loop.thisN'
p6495
I7
sg33
S'41-peanuts_redo.png'
p6496
sg64
g65
sS'trial_loop.thisIndex'
p6497
g60
(g99
S'\x07\x00\x00\x00'
tRp6498
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6499
I0
sg6380
S'45-chewy_nougat_redo.png'
p6500
sS'block_loop.thisRepN'
p6501
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6502
I2
sg6385
S'45-chewy_nougat_redo.png'
p6503
sg55
g11
sS'block_loop.thisTrial'
p6504
Nsg70
Vn
sS'block_loop.thisTrialN'
p6505
I0
sg39
F0.68326197314672754
sg34
g753
(S'\x07\xdf\x07\t\x11\x1c\x08\x0e\x05\xd8'
tRp6506
sa(dp6507
S'trial_loop.thisTrialN'
p6508
I8
sg6371
S'30-spaghetti_hoops.png'
p6509
sS'block_loop.thisIndex'
p6510
g6365
sg38
S'left'
p6511
sg59
g63
sS'trial_loop.thisN'
p6512
I8
sg33
S'19-caramello_redo.png'
p6513
sg64
g65
sS'trial_loop.thisIndex'
p6514
g60
(g99
S'\x08\x00\x00\x00'
tRp6515
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6516
I0
sg6380
S'19-caramello_redo.png'
p6517
sS'block_loop.thisRepN'
p6518
I2
sg6383
S'30-spaghetti_hoops.png'
p6519
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6520
I2
sg6385
g6513
sg55
g11
sS'block_loop.thisTrial'
p6521
Nsg70
Vn
sS'block_loop.thisTrialN'
p6522
I0
sg39
F3.6332653658173513
sg34
g753
(S'\x07\xdf\x07\t\x11\x1c\x0e\t\x95 '
tRp6523
sa(dp6524
S'trial_loop.thisTrialN'
p6525
I9
sg6371
S'7-olives.png'
p6526
sS'block_loop.thisIndex'
p6527
g6365
sg38
S'left'
p6528
sg59
g63
sS'trial_loop.thisN'
p6529
I9
sg33
S'22-daim.png'
p6530
sg64
g65
sS'trial_loop.thisIndex'
p6531
g60
(g99
S'\t\x00\x00\x00'
tRp6532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6533
I0
sg6380
S'22-daim.png'
p6534
sS'block_loop.thisRepN'
p6535
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6536
I2
sg6385
S'7-olives.png'
p6537
sg55
g11
sS'block_loop.thisTrial'
p6538
Nsg70
Vn
sS'block_loop.thisTrialN'
p6539
I0
sg39
F0.64999495375377592
sg34
g753
(S'\x07\xdf\x07\t\x11\x1c\x17\x04\x9b\xb0'
tRp6540
sa(dp6541
S'trial_loop.thisTrialN'
p6542
I10
sg6371
S'8-liquorice_catherine_wheels.png'
p6543
sS'block_loop.thisIndex'
p6544
g6365
sg38
S'right'
p6545
sg59
g63
sS'trial_loop.thisN'
p6546
I10
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6547
sg64
g65
sS'trial_loop.thisIndex'
p6548
g60
(g99
S'\n\x00\x00\x00'
tRp6549
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6550
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p6551
sS'block_loop.thisRepN'
p6552
I2
sg6383
g6547
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6553
I2
sg6385
S'8-liquorice_catherine_wheels.png'
p6554
sg55
g11
sS'block_loop.thisTrial'
p6555
Nsg70
Vn
sS'block_loop.thisTrialN'
p6556
I0
sg39
F0.96644731177730137
sg34
g753
(S'\x07\xdf\x07\t\x11\x1c\x1c\x0e\xf8\x08'
tRp6557
sa(dp6558
S'trial_loop.thisTrialN'
p6559
I11
sg6371
S'38-maltesers.png'
p6560
sS'block_loop.thisIndex'
p6561
g6365
sg38
S'left'
p6562
sg59
g63
sS'trial_loop.thisN'
p6563
I11
sg33
S'38-maltesers.png'
p6564
sg64
g65
sS'trial_loop.thisIndex'
p6565
g60
(g99
S'\x0b\x00\x00\x00'
tRp6566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6567
I0
sg6380
S'6-sour_patch_kids.png'
p6568
sS'block_loop.thisRepN'
p6569
I2
sg6383
g6564
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6570
I2
sg6385
S'6-sour_patch_kids.png'
p6571
sg55
g11
sS'block_loop.thisTrial'
p6572
Nsg70
Vn
sS'block_loop.thisTrialN'
p6573
I0
sg39
F1.2996152878986322
sg34
g753
(S'\x07\xdf\x07\t\x11\x1c"\x0f\x0fx'
tRp6574
sa(dp6575
S'trial_loop.thisTrialN'
p6576
I12
sg6371
S'45-chewy_nougat_redo.png'
p6577
sS'block_loop.thisIndex'
p6578
g6365
sg38
S'right'
p6579
sg59
g63
sS'trial_loop.thisN'
p6580
I12
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p6581
g60
(g99
S'\x0c\x00\x00\x00'
tRp6582
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6583
I0
sg6380
S'41-peanuts_redo.png'
p6584
sS'block_loop.thisRepN'
p6585
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6586
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p6587
Nsg70
Vn
sS'block_loop.thisTrialN'
p6588
I0
sg39
F1.016652326205076
sg34
g753
(S'\x07\xdf\x07\t\x11\x1c)\x04\xe2\x00'
tRp6589
sa(dp6590
S'trial_loop.thisTrialN'
p6591
I13
sg6371
S'13-mccoys_steak_crisps.png'
p6592
sS'block_loop.thisIndex'
p6593
g6365
sg38
S'left'
p6594
sg59
g63
sS'trial_loop.thisN'
p6595
I13
sg33
S'13-mccoys_steak_crisps.png'
p6596
sg64
g65
sS'trial_loop.thisIndex'
p6597
g60
(g99
S'\r\x00\x00\x00'
tRp6598
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6599
I0
sg6380
S'3-ellas_strawberries_apples.png'
p6600
sS'block_loop.thisRepN'
p6601
I2
sg6383
g6596
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6602
I2
sg6385
S'3-ellas_strawberries_apples.png'
p6603
sg55
g11
sS'block_loop.thisTrial'
p6604
Nsg70
Vn
sS'block_loop.thisTrialN'
p6605
I0
sg39
F0.91664343113006908
sg34
g753
(S'\x07\xdf\x07\t\x11\x1c/\x05\xb1\x08'
tRp6606
sa(dp6607
S'trial_loop.thisTrialN'
p6608
I14
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p6609
sS'block_loop.thisIndex'
p6610
g6365
sg38
S'right'
p6611
sg59
g63
sS'trial_loop.thisN'
p6612
I14
sg33
S'36-fig_rolls.png'
p6613
sg64
g65
sS'trial_loop.thisIndex'
p6614
g60
(g99
S'\x0e\x00\x00\x00'
tRp6615
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6616
I0
sg6380
S'36-fig_rolls.png'
p6617
sS'block_loop.thisRepN'
p6618
I2
sg6383
S'34-hula_hoops_bbq_beef_redo.png'
p6619
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6620
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p6621
Nsg70
Vn
sS'block_loop.thisTrialN'
p6622
I0
sg39
F0.83336925576077192
sg34
g753
(S'\x07\xdf\x07\t\x11\x1c5\x04\xd6H'
tRp6623
sa(dp6624
S'trial_loop.thisTrialN'
p6625
I15
sg6371
g6492
sS'block_loop.thisIndex'
p6626
g6365
sg38
S'left'
p6627
sg59
g63
sS'trial_loop.thisN'
p6628
I15
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p6629
g60
(g99
S'\x0f\x00\x00\x00'
tRp6630
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6631
I0
sg6380
g6500
sS'block_loop.thisRepN'
p6632
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6633
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p6634
Nsg70
Vn
sS'block_loop.thisTrialN'
p6635
I0
sg39
F0.94999569500942016
sg34
g753
(S'\x07\xdf\x07\t\x11\x1c;\x02\xc6\xf0'
tRp6636
sa(dp6637
S'trial_loop.thisTrialN'
p6638
I16
sg6371
g6475
sS'block_loop.thisIndex'
p6639
g6365
sg38
S'right'
p6640
sg59
g63
sS'trial_loop.thisN'
p6641
I16
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p6642
g60
(g99
S'\x10\x00\x00\x00'
tRp6643
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6644
I0
sg6380
g6483
sS'block_loop.thisRepN'
p6645
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6646
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p6647
Nsg70
Vn
sS'block_loop.thisTrialN'
p6648
I0
sg39
F1.016610131606285
sg34
g753
(S'\x07\xdf\x07\t\x11\x1d\x05\x02\xa3\xc8'
tRp6649
sa(dp6650
S'trial_loop.thisTrialN'
p6651
I17
sg6371
g6372
sS'block_loop.thisIndex'
p6652
g6365
sg38
S'left'
p6653
sg59
g63
sS'trial_loop.thisN'
p6654
I17
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6655
g60
(g99
S'\x11\x00\x00\x00'
tRp6656
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6657
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6658
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6659
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6660
Nsg70
Vn
sS'block_loop.thisTrialN'
p6661
I0
sg39
F1.6998638368932006
sg34
g753
(S'\x07\xdf\x07\t\x11\x1d\x0b\x03n\xe8'
tRp6662
sa(dp6663
S'trial_loop.thisTrialN'
p6664
I18
sg6371
S'19-caramello_redo.png'
p6665
sS'block_loop.thisIndex'
p6666
g6365
sg38
S'right'
p6667
sg59
g63
sS'trial_loop.thisN'
p6668
I18
sg33
g6519
sg64
g65
sS'trial_loop.thisIndex'
p6669
g60
(g99
S'\x12\x00\x00\x00'
tRp6670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6671
I0
sg6380
S'30-spaghetti_hoops.png'
p6672
sS'block_loop.thisRepN'
p6673
I2
sg6383
g6519
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6674
I2
sg6385
g6513
sg55
g11
sS'block_loop.thisTrial'
p6675
Nsg70
Vn
sS'block_loop.thisTrialN'
p6676
I0
sg39
F1.1665355212935538
sg34
g753
(S'\x07\xdf\x07\t\x11\x1d\x11\x0e{\x08'
tRp6677
sa(dp6678
S'trial_loop.thisTrialN'
p6679
I19
sg6371
S'20-fruit_pastilles.png'
p6680
sS'block_loop.thisIndex'
p6681
g6365
sg38
S'right'
p6682
sg59
g63
sS'trial_loop.thisN'
p6683
I19
sg33
S'2-steamed_puddings.png'
p6684
sg64
g65
sS'trial_loop.thisIndex'
p6685
g60
(g99
S'\x13\x00\x00\x00'
tRp6686
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6687
I0
sg6380
S'2-steamed_puddings.png'
p6688
sS'block_loop.thisRepN'
p6689
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6690
I2
sg6385
S'20-fruit_pastilles.png'
p6691
sg55
g11
sS'block_loop.thisTrial'
p6692
Nsg70
Vn
sS'block_loop.thisTrialN'
p6693
I0
sg39
F1.166637301506853
sg34
g753
(S'\x07\xdf\x07\t\x11\x1d\x18\x02i0'
tRp6694
sa(dp6695
S'trial_loop.thisTrialN'
p6696
I20
sg6371
S'3-ellas_strawberries_apples.png'
p6697
sS'block_loop.thisIndex'
p6698
g6365
sg38
S'right'
p6699
sg59
g63
sS'trial_loop.thisN'
p6700
I20
sg33
g6596
sg64
g65
sS'trial_loop.thisIndex'
p6701
g60
(g99
S'\x14\x00\x00\x00'
tRp6702
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6703
I0
sg6380
S'13-mccoys_steak_crisps.png'
p6704
sS'block_loop.thisRepN'
p6705
I2
sg6383
g6596
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6706
I2
sg6385
g6603
sg55
g11
sS'block_loop.thisTrial'
p6707
Nsg70
Vn
sS'block_loop.thisTrialN'
p6708
I0
sg39
F0.66704242666673963
sg34
g753
(S'\x07\xdf\x07\t\x11\x1d\x1e\x05[\x18'
tRp6709
sa(dp6710
S'trial_loop.thisTrialN'
p6711
I21
sg6371
g6443
sS'block_loop.thisIndex'
p6712
g6365
sg38
S'right'
p6713
sg59
g63
sS'trial_loop.thisN'
p6714
I21
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p6715
g60
(g99
S'\x15\x00\x00\x00'
tRp6716
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6717
I0
sg6380
g6451
sS'block_loop.thisRepN'
p6718
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6719
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p6720
Nsg70
Vn
sS'block_loop.thisTrialN'
p6721
I0
sg39
F1.4164660997776082
sg34
g753
(S'\x07\xdf\x07\t\x11\x1d$\x00\xaf\xc8'
tRp6722
sa(dp6723
S'trial_loop.thisTrialN'
p6724
I22
sg6371
g6460
sS'block_loop.thisIndex'
p6725
g6365
sg38
S'right'
p6726
sg59
g63
sS'trial_loop.thisN'
p6727
I22
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6728
g60
(g99
S'\x16\x00\x00\x00'
tRp6729
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6730
I0
sg6380
g6467
sS'block_loop.thisRepN'
p6731
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6732
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6733
Nsg70
Vn
sS'block_loop.thisTrialN'
p6734
I0
sg39
F0.68325570097658783
sg34
g753
(S'\x07\xdf\x07\t\x11\x1d*\x07\xac\xd8'
tRp6735
sa(dp6736
S'trial_loop.thisTrialN'
p6737
I23
sg6371
S'2-steamed_puddings.png'
p6738
sS'block_loop.thisIndex'
p6739
g6365
sg38
S'left'
p6740
sg59
g63
sS'trial_loop.thisN'
p6741
I23
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p6742
g60
(g99
S'\x17\x00\x00\x00'
tRp6743
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6744
I0
sg6380
S'20-fruit_pastilles.png'
p6745
sS'block_loop.thisRepN'
p6746
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6747
I2
sg6385
g6691
sg55
g11
sS'block_loop.thisTrial'
p6748
Nsg70
Vn
sS'block_loop.thisTrialN'
p6749
I0
sg39
F0.66647023370751413
sg34
g753
(S'\x07\xdf\x07\t\x11\x1d0\x03@\x08'
tRp6750
sa(dp6751
S'trial_loop.thisTrialN'
p6752
I24
sg6371
S'10-bounty_redo.png'
p6753
sS'block_loop.thisIndex'
p6754
g6365
sg38
S'right'
p6755
sg59
g63
sS'trial_loop.thisN'
p6756
I24
sg33
S'4-corn.png'
p6757
sg64
g65
sS'trial_loop.thisIndex'
p6758
g60
(g99
S'\x18\x00\x00\x00'
tRp6759
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6760
I0
sg6380
S'4-corn.png'
p6761
sS'block_loop.thisRepN'
p6762
I2
sg6383
g6757
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6763
I2
sg6385
S'10-bounty_redo.png'
p6764
sg55
g11
sS'block_loop.thisTrial'
p6765
Nsg70
Vn
sS'block_loop.thisTrialN'
p6766
I0
sg39
F0.76653671871099505
sg34
g753
(S'\x07\xdf\x07\t\x11\x1d5\x0e\x15x'
tRp6767
sa(dp6768
S'trial_loop.thisTrialN'
p6769
I25
sg6371
g6475
sS'block_loop.thisIndex'
p6770
g6365
sg38
S'left'
p6771
sg59
g63
sS'trial_loop.thisN'
p6772
I25
sg33
g6486
sg64
g65
sS'trial_loop.thisIndex'
p6773
g60
(g99
S'\x19\x00\x00\x00'
tRp6774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6775
I0
sg6380
g6483
sS'block_loop.thisRepN'
p6776
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6777
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p6778
Nsg70
Vn
sS'block_loop.thisTrialN'
p6779
I0
sg39
F1.1831465081995702
sg34
g753
(S'\x07\xdf\x07\t\x11\x1d;\x0b\x13\xf0'
tRp6780
sa(dp6781
S'trial_loop.thisTrialN'
p6782
I26
sg6371
S'36-fig_rolls.png'
p6783
sS'block_loop.thisIndex'
p6784
g6365
sg38
S'left'
p6785
sg59
g63
sS'trial_loop.thisN'
p6786
I26
sg33
g6619
sg64
g65
sS'trial_loop.thisIndex'
p6787
g60
(g99
S'\x1a\x00\x00\x00'
tRp6788
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6789
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p6790
sS'block_loop.thisRepN'
p6791
I2
sg6383
g6619
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6792
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p6793
Nsg70
Vn
sS'block_loop.thisTrialN'
p6794
I0
sg39
F1.0166027190425666
sg34
g753
(S'\x07\xdf\x07\t\x11\x1e\x05\x0eDX'
tRp6795
sa(dp6796
S'trial_loop.thisTrialN'
p6797
I27
sg6371
g6509
sS'block_loop.thisIndex'
p6798
g6365
sg38
S'left'
p6799
sg59
g63
sS'trial_loop.thisN'
p6800
I27
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p6801
g60
(g99
S'\x1b\x00\x00\x00'
tRp6802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6803
I0
sg6380
g6517
sS'block_loop.thisRepN'
p6804
I2
sg6383
g6519
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6805
I2
sg6385
g6513
sg55
g11
sS'block_loop.thisTrial'
p6806
Nsg70
Vn
sS'block_loop.thisTrialN'
p6807
I0
sg39
F0.81657409514082246
sg34
g753
(S'\x07\xdf\x07\t\x11\x1e\x0b\x0f\x0fx'
tRp6808
sa(dp6809
S'trial_loop.thisTrialN'
p6810
I28
sg6371
S'16-skips_prawn.png'
p6811
sS'block_loop.thisIndex'
p6812
g6365
sg38
S'left'
p6813
sg59
g63
sS'trial_loop.thisN'
p6814
I28
sg33
S'42-mrkipling_lemon_slices.png'
p6815
sg64
g65
sS'trial_loop.thisIndex'
p6816
g60
(g99
S'\x1c\x00\x00\x00'
tRp6817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6818
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p6819
sS'block_loop.thisRepN'
p6820
I2
sg6383
S'16-skips_prawn.png'
p6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6822
I2
sg6385
g6815
sg55
g11
sS'block_loop.thisTrial'
p6823
Nsg70
Vn
sS'block_loop.thisTrialN'
p6824
I0
sg39
F0.79985248996672453
sg34
g753
(S'\x07\xdf\x07\t\x11\x1e\x11\x0c\xc5\x88'
tRp6825
sa(dp6826
S'trial_loop.thisTrialN'
p6827
I29
sg6371
g6577
sS'block_loop.thisIndex'
p6828
g6365
sg38
S'right'
p6829
sg59
g63
sS'trial_loop.thisN'
p6830
I29
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p6831
g60
(g99
S'\x1d\x00\x00\x00'
tRp6832
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6833
I0
sg6380
g6584
sS'block_loop.thisRepN'
p6834
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6835
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p6836
Nsg70
Vn
sS'block_loop.thisTrialN'
p6837
I0
sg39
F1.0166882486337272
sg34
g753
(S'\x07\xdf\x07\t\x11\x1e\x17\nA\x00'
tRp6838
sa(dp6839
S'trial_loop.thisTrialN'
p6840
I30
sg6371
g6543
sS'block_loop.thisIndex'
p6841
g6365
sg38
S'right'
p6842
sg59
g63
sS'trial_loop.thisN'
p6843
I30
sg33
g6547
sg64
g65
sS'trial_loop.thisIndex'
p6844
g60
(g99
S'\x1e\x00\x00\x00'
tRp6845
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6846
I0
sg6380
g6551
sS'block_loop.thisRepN'
p6847
I2
sg6383
g6547
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6848
I2
sg6385
g6554
sg55
g11
sS'block_loop.thisTrial'
p6849
Nsg70
Vn
sS'block_loop.thisTrialN'
p6850
I0
sg39
F0.99999401292734547
sg34
g753
(S'\x07\xdf\x07\t\x11\x1e\x1d\x0b\x10\x08'
tRp6851
sa(dp6852
S'trial_loop.thisTrialN'
p6853
I31
sg6371
g6592
sS'block_loop.thisIndex'
p6854
g6365
sg38
S'left'
p6855
sg59
g63
sS'trial_loop.thisN'
p6856
I31
sg33
g6596
sg64
g65
sS'trial_loop.thisIndex'
p6857
g60
(g99
S'\x1f\x00\x00\x00'
tRp6858
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6859
I0
sg6380
g6600
sS'block_loop.thisRepN'
p6860
I2
sg6383
g6596
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6861
I2
sg6385
g6603
sg55
g11
sS'block_loop.thisTrial'
p6862
Nsg70
Vn
sS'block_loop.thisTrialN'
p6863
I0
sg39
F0.65046451120724669
sg34
g753
(S'\x07\xdf\x07\t\x11\x1e#\x0bb\x10'
tRp6864
sa(dp6865
S'trial_loop.thisTrialN'
p6866
I32
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p6867
sS'block_loop.thisIndex'
p6868
g6365
sg38
S'left'
p6869
sg59
g63
sS'trial_loop.thisN'
p6870
I32
sg33
g6547
sg64
g65
sS'trial_loop.thisIndex'
p6871
g60
(g99
S' \x00\x00\x00'
tRp6872
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6873
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p6874
sS'block_loop.thisRepN'
p6875
I2
sg6383
g6547
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6876
I2
sg6385
g6554
sg55
g11
sS'block_loop.thisTrial'
p6877
Nsg70
Vn
sS'block_loop.thisTrialN'
p6878
I0
sg39
F0.98333684004683164
sg34
g753
(S'\x07\xdf\x07\t\x11\x1e)\x06\xb6\xc0'
tRp6879
sa(dp6880
S'trial_loop.thisTrialN'
p6881
I33
sg6371
g6372
sS'block_loop.thisIndex'
p6882
g6365
sg38
S'left'
p6883
sg59
g63
sS'trial_loop.thisN'
p6884
I33
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6885
g60
(g99
S'!\x00\x00\x00'
tRp6886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6887
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6888
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6889
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6890
Nsg70
Vn
sS'block_loop.thisTrialN'
p6891
I0
sg39
F0.96665457848575898
sg34
g753
(S'\x07\xdf\x07\t\x11\x1e/\x06\xce0'
tRp6892
sa(dp6893
S'trial_loop.thisTrialN'
p6894
I34
sg6371
S'26-walkers_smoky_bacon.png'
p6895
sS'block_loop.thisIndex'
p6896
g6365
sg38
S'left'
p6897
sg59
g63
sS'trial_loop.thisN'
p6898
I34
sg33
S'26-walkers_smoky_bacon.png'
p6899
sg64
g65
sS'trial_loop.thisIndex'
p6900
g60
(g99
S'"\x00\x00\x00'
tRp6901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6902
I0
sg6380
S'44-crunch.png'
p6903
sS'block_loop.thisRepN'
p6904
I2
sg6383
g6899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6905
I2
sg6385
S'44-crunch.png'
p6906
sg55
g11
sS'block_loop.thisTrial'
p6907
Nsg70
Vn
sS'block_loop.thisTrialN'
p6908
I0
sg39
F0.81665705884006456
sg34
g753
(S'\x07\xdf\x07\t\x11\x1e5\x06\xe5\xa0'
tRp6909
sa(dp6910
S'trial_loop.thisTrialN'
p6911
I35
sg6371
g6509
sS'block_loop.thisIndex'
p6912
g6365
sg38
S'left'
p6913
sg59
g63
sS'trial_loop.thisN'
p6914
I35
sg33
g6519
sg64
g65
sS'trial_loop.thisIndex'
p6915
g60
(g99
S'#\x00\x00\x00'
tRp6916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6917
I0
sg6380
g6517
sS'block_loop.thisRepN'
p6918
I2
sg6383
g6519
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6919
I2
sg6385
g6513
sg55
g11
sS'block_loop.thisTrial'
p6920
Nsg70
Vn
sS'block_loop.thisTrialN'
p6921
I0
sg39
F0.93333396055095363
sg34
g753
(S'\x07\xdf\x07\t\x11\x1e;\x04\x9b\xb0'
tRp6922
sa(dp6923
S'trial_loop.thisTrialN'
p6924
I36
sg6371
S'22-daim.png'
p6925
sS'block_loop.thisIndex'
p6926
g6365
sg38
S'left'
p6927
sg59
g63
sS'trial_loop.thisN'
p6928
I36
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p6929
g60
(g99
S'$\x00\x00\x00'
tRp6930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6931
I0
sg6380
S'7-olives.png'
p6932
sS'block_loop.thisRepN'
p6933
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6934
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p6935
Nsg70
Vn
sS'block_loop.thisTrialN'
p6936
I0
sg39
F1.2503679197907331
sg34
g753
(S'\x07\xdf\x07\t\x11\x1f\x05\x03\xffp'
tRp6937
sa(dp6938
S'trial_loop.thisTrialN'
p6939
I37
sg6371
S'40-sardines.png'
p6940
sS'block_loop.thisIndex'
p6941
g6365
sg38
S'right'
p6942
sg59
g63
sS'trial_loop.thisN'
p6943
I37
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p6944
g60
(g99
S'%\x00\x00\x00'
tRp6945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6946
I0
sg6380
S'5-pineapple.png'
p6947
sS'block_loop.thisRepN'
p6948
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6949
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6950
Nsg70
Vn
sS'block_loop.thisTrialN'
p6951
I0
sg39
F1.9165313873636478
sg34
g753
(S'\x07\xdf\x07\t\x11\x1f\x0b\x08\\\xa0'
tRp6952
sa(dp6953
S'trial_loop.thisTrialN'
p6954
I38
sg6371
S'29-beans.png'
p6955
sS'block_loop.thisIndex'
p6956
g6365
sg38
S'left'
p6957
sg59
g63
sS'trial_loop.thisN'
p6958
I38
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6959
g60
(g99
S'&\x00\x00\x00'
tRp6960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6961
I0
sg6380
S'46-pistachios.png'
p6962
sS'block_loop.thisRepN'
p6963
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6964
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6965
Nsg70
Vn
sS'block_loop.thisTrialN'
p6966
I0
sg39
F1.5666053134409594
sg34
g753
(S'\x07\xdf\x07\t\x11\x1f\x12\x07\xb8\x90'
tRp6967
sa(dp6968
S'trial_loop.thisTrialN'
p6969
I39
sg6371
g6738
sS'block_loop.thisIndex'
p6970
g6365
sg38
S'left'
p6971
sg59
g63
sS'trial_loop.thisN'
p6972
I39
sg33
g6691
sg64
g65
sS'trial_loop.thisIndex'
p6973
g60
(g99
S"'\x00\x00\x00"
tRp6974
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6975
I0
sg6380
g6745
sS'block_loop.thisRepN'
p6976
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6977
I2
sg6385
g6691
sg55
g11
sS'block_loop.thisTrial'
p6978
Nsg70
Vn
sS'block_loop.thisTrialN'
p6979
I0
sg39
F1.1333352149813436
sg34
g753
(S'\x07\xdf\x07\t\x11\x1f\x19\x01\x9a('
tRp6980
sa(dp6981
S'trial_loop.thisTrialN'
p6982
I40
sg6371
g6409
sS'block_loop.thisIndex'
p6983
g6365
sg38
S'left'
p6984
sg59
g63
sS'trial_loop.thisN'
p6985
I40
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p6986
g60
(g99
S'(\x00\x00\x00'
tRp6987
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6988
I0
sg6380
g6417
sS'block_loop.thisRepN'
p6989
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6990
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6991
Nsg70
Vn
sS'block_loop.thisTrialN'
p6992
I0
sg39
F1.4000390014916775
sg34
g753
(S'\x07\xdf\x07\t\x11\x1f\x1f\x04\x12\xf8'
tRp6993
sa(dp6994
S'trial_loop.thisTrialN'
p6995
I41
sg6371
g6665
sS'block_loop.thisIndex'
p6996
g6365
sg38
S'right'
p6997
sg59
g63
sS'trial_loop.thisN'
p6998
I41
sg33
g6519
sg64
g65
sS'trial_loop.thisIndex'
p6999
g60
(g99
S')\x00\x00\x00'
tRp7000
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7001
I0
sg6380
g6672
sS'block_loop.thisRepN'
p7002
I2
sg6383
g6519
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7003
I2
sg6385
g6513
sg55
g11
sS'block_loop.thisTrial'
p7004
Nsg70
Vn
sS'block_loop.thisTrialN'
p7005
I0
sg39
F2.4667383974810946
sg34
g753
(S'\x07\xdf\x07\t\x11\x1f%\n\x96\xf0'
tRp7006
sa(dp7007
S'trial_loop.thisTrialN'
p7008
I42
sg6371
g6940
sS'block_loop.thisIndex'
p7009
g6365
sg38
S'right'
p7010
sg59
g63
sS'trial_loop.thisN'
p7011
I42
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7012
g60
(g99
S'*\x00\x00\x00'
tRp7013
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7014
I0
sg6380
g6947
sS'block_loop.thisRepN'
p7015
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7016
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7017
Nsg70
Vn
sS'block_loop.thisTrialN'
p7018
I0
sg39
F1.0167190392858174
sg34
g753
(S'\x07\xdf\x07\t\x11\x1f-\x03\x05p'
tRp7019
sa(dp7020
S'trial_loop.thisTrialN'
p7021
I43
sg6371
S'4-corn.png'
p7022
sS'block_loop.thisIndex'
p7023
g6365
sg38
S'left'
p7024
sg59
g63
sS'trial_loop.thisN'
p7025
I43
sg33
g6764
sg64
g65
sS'trial_loop.thisIndex'
p7026
g60
(g99
S'+\x00\x00\x00'
tRp7027
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7028
I0
sg6380
S'10-bounty_redo.png'
p7029
sS'block_loop.thisRepN'
p7030
I2
sg6383
g6757
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7031
I2
sg6385
g6764
sg55
g11
sS'block_loop.thisTrial'
p7032
Nsg70
Vn
sS'block_loop.thisTrialN'
p7033
I0
sg39
F1.0999940699475701
sg34
g753
(S'\x07\xdf\x07\t\x11\x1f3\x03\xd0\x90'
tRp7034
sa(dp7035
S'trial_loop.thisTrialN'
p7036
I44
sg6371
g6609
sS'block_loop.thisIndex'
p7037
g6365
sg38
S'left'
p7038
sg59
g63
sS'trial_loop.thisN'
p7039
I44
sg33
g6619
sg64
g65
sS'trial_loop.thisIndex'
p7040
g60
(g99
S',\x00\x00\x00'
tRp7041
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7042
I0
sg6380
g6617
sS'block_loop.thisRepN'
p7043
I2
sg6383
g6619
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7044
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p7045
Nsg70
Vn
sS'block_loop.thisTrialN'
p7046
I0
sg39
F1.3832253094587941
sg34
g753
(S'\x07\xdf\x07\t\x11\x1f9\x05\xd0H'
tRp7047
sa(dp7048
S'trial_loop.thisTrialN'
p7049
I45
sg6371
g6560
sS'block_loop.thisIndex'
p7050
g6365
sg38
S'left'
p7051
sg59
g63
sS'trial_loop.thisN'
p7052
I45
sg33
g6571
sg64
g65
sS'trial_loop.thisIndex'
p7053
g60
(g99
S'-\x00\x00\x00'
tRp7054
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7055
I0
sg6380
g6568
sS'block_loop.thisRepN'
p7056
I2
sg6383
g6564
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7057
I2
sg6385
g6571
sg55
g11
sS'block_loop.thisTrial'
p7058
Nsg70
Vn
sS'block_loop.thisTrialN'
p7059
I0
sg39
F0.73303990981730749
sg34
g753
(S'\x07\xdf\x07\t\x11 \x03\x0cT@'
tRp7060
sa(dp7061
S'trial_loop.thisTrialN'
p7062
I46
sg6371
g6577
sS'block_loop.thisIndex'
p7063
g6365
sg38
S'right'
p7064
sg59
g63
sS'trial_loop.thisN'
p7065
I46
sg33
g6503
sg64
g65
sS'trial_loop.thisIndex'
p7066
g60
(g99
S'.\x00\x00\x00'
tRp7067
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7068
I0
sg6380
g6584
sS'block_loop.thisRepN'
p7069
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7070
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p7071
Nsg70
Vn
sS'block_loop.thisTrialN'
p7072
I0
sg39
F0.71703304692346137
sg34
g753
(S'\x07\xdf\x07\t\x11 \t\x08\x9f\x08'
tRp7073
sa(dp7074
S'trial_loop.thisTrialN'
p7075
I47
sg6371
g6811
sS'block_loop.thisIndex'
p7076
g6365
sg38
S'left'
p7077
sg59
g63
sS'trial_loop.thisN'
p7078
I47
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p7079
g60
(g99
S'/\x00\x00\x00'
tRp7080
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7081
I0
sg6380
g6819
sS'block_loop.thisRepN'
p7082
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7083
I2
sg6385
g6815
sg55
g11
sS'block_loop.thisTrial'
p7084
Nsg70
Vn
sS'block_loop.thisTrialN'
p7085
I0
sg39
F0.7165626341738971
sg34
g753
(S'\x07\xdf\x07\t\x11 \x0f\x04\xe5\xe8'
tRp7086
sa(dp7087
S'trial_loop.thisTrialN'
p7088
I48
sg6371
S'1-treacle_cookies.png'
p7089
sS'block_loop.thisIndex'
p7090
g6365
sg38
S'left'
p7091
sg59
g63
sS'trial_loop.thisN'
p7092
I48
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7093
g60
(g99
S'0\x00\x00\x00'
tRp7094
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7095
I0
sg6380
S'21-nakd_banana_crunch.png'
p7096
sS'block_loop.thisRepN'
p7097
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7098
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7099
Nsg70
Vn
sS'block_loop.thisTrialN'
p7100
I0
sg39
F0.9333325350562518
sg34
g753
(S'\x07\xdf\x07\t\x11 \x15\x00\xf20'
tRp7101
sa(dp7102
S'trial_loop.thisTrialN'
p7103
I49
sg6371
S'33-ambrosia_rice.png'
p7104
sS'block_loop.thisIndex'
p7105
g6365
sg38
S'left'
p7106
sg59
g63
sS'trial_loop.thisN'
p7107
I49
sg33
S'23-crunchie_redo.png'
p7108
sg64
g65
sS'trial_loop.thisIndex'
p7109
g60
(g99
S'1\x00\x00\x00'
tRp7110
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7111
I0
sg6380
S'23-crunchie_redo.png'
p7112
sS'block_loop.thisRepN'
p7113
I2
sg6383
S'33-ambrosia_rice.png'
p7114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7115
I2
sg6385
g7108
sg55
g11
sS'block_loop.thisTrial'
p7116
Nsg70
Vn
sS'block_loop.thisTrialN'
p7117
I0
sg39
F1.2332856648426969
sg34
g753
(S'\x07\xdf\x07\t\x11 \x1b\x00\x90\x88'
tRp7118
sa(dp7119
S'trial_loop.thisTrialN'
p7120
I50
sg6371
g6526
sS'block_loop.thisIndex'
p7121
g6365
sg38
S'right'
p7122
sg59
g63
sS'trial_loop.thisN'
p7123
I50
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p7124
g60
(g99
S'2\x00\x00\x00'
tRp7125
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7126
I0
sg6380
g6534
sS'block_loop.thisRepN'
p7127
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7128
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p7129
Nsg70
Vn
sS'block_loop.thisTrialN'
p7130
I0
sg39
F1.0832194364302268
sg34
g753
(S'\x07\xdf\x07\t\x11 !\x04x\x88'
tRp7131
sa(dp7132
S'trial_loop.thisTrialN'
p7133
I51
sg6371
g6409
sS'block_loop.thisIndex'
p7134
g6365
sg38
S'left'
p7135
sg59
g63
sS'trial_loop.thisN'
p7136
I51
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p7137
g60
(g99
S'3\x00\x00\x00'
tRp7138
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7139
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7140
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7141
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7142
Nsg70
Vn
sS'block_loop.thisTrialN'
p7143
I0
sg39
F0.79998278004131862
sg34
g753
(S"\x07\xdf\x07\t\x11 '\x06tX"
tRp7144
sa(dp7145
S'trial_loop.thisTrialN'
p7146
I52
sg6371
g6665
sS'block_loop.thisIndex'
p7147
g6365
sg38
S'right'
p7148
sg59
g63
sS'trial_loop.thisN'
p7149
I52
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p7150
g60
(g99
S'4\x00\x00\x00'
tRp7151
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7152
I0
sg6380
g6672
sS'block_loop.thisRepN'
p7153
I2
sg6383
g6519
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7154
I2
sg6385
g6513
sg55
g11
sS'block_loop.thisTrial'
p7155
Nsg70
Vn
sS'block_loop.thisTrialN'
p7156
I0
sg39
F1.5166976568907558
sg34
g753
(S'\x07\xdf\x07\t\x11 -\x03\xb1P'
tRp7157
sa(dp7158
S'trial_loop.thisTrialN'
p7159
I53
sg6371
g6372
sS'block_loop.thisIndex'
p7160
g6365
sg38
S'left'
p7161
sg59
g63
sS'trial_loop.thisN'
p7162
I53
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p7163
g60
(g99
S'5\x00\x00\x00'
tRp7164
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7165
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7166
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7167
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7168
Nsg70
Vn
sS'block_loop.thisTrialN'
p7169
I0
sg39
F0.783234660695598
sg34
g753
(S'\x07\xdf\x07\t\x11 3\x0c\x1d\x90'
tRp7170
sa(dp7171
S'trial_loop.thisTrialN'
p7172
I54
sg6371
S'43-mrporky_pork_crackles_redo.png'
p7173
sS'block_loop.thisIndex'
p7174
g6365
sg38
S'left'
p7175
sg59
g63
sS'trial_loop.thisN'
p7176
I54
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p7177
g60
(g99
S'6\x00\x00\x00'
tRp7178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7179
I0
sg6380
S'18-mms.png'
p7180
sS'block_loop.thisRepN'
p7181
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7182
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7183
Nsg70
Vn
sS'block_loop.thisTrialN'
p7184
I0
sg39
F0.81662740858519101
sg34
g753
(S'\x07\xdf\x07\t\x11 9\tZ\x88'
tRp7185
sa(dp7186
S'trial_loop.thisTrialN'
p7187
I55
sg6371
g6783
sS'block_loop.thisIndex'
p7188
g6365
sg38
S'right'
p7189
sg59
g63
sS'trial_loop.thisN'
p7190
I55
sg33
g6613
sg64
g65
sS'trial_loop.thisIndex'
p7191
g60
(g99
S'7\x00\x00\x00'
tRp7192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7193
I0
sg6380
g6790
sS'block_loop.thisRepN'
p7194
I2
sg6383
g6619
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7195
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p7196
Nsg70
Vn
sS'block_loop.thisTrialN'
p7197
I0
sg39
F1.0832929918760783
sg34
g753
(S'\x07\xdf\x07\t\x11!\x03\x07\x10\x98'
tRp7198
sa(dp7199
S'trial_loop.thisTrialN'
p7200
I56
sg6371
S'31-hobnobs.png'
p7201
sS'block_loop.thisIndex'
p7202
g6365
sg38
S'right'
p7203
sg59
g63
sS'trial_loop.thisN'
p7204
I56
sg33
S'31-hobnobs.png'
p7205
sg64
g65
sS'trial_loop.thisIndex'
p7206
g60
(g99
S'8\x00\x00\x00'
tRp7207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7208
I0
sg6380
S'25-kitkat.png'
p7209
sS'block_loop.thisRepN'
p7210
I2
sg6383
S'25-kitkat.png'
p7211
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7212
I2
sg6385
g7205
sg55
g11
sS'block_loop.thisTrial'
p7213
Nsg70
Vn
sS'block_loop.thisTrialN'
p7214
I0
sg39
F1.2503171722346451
sg34
g753
(S'\x07\xdf\x07\t\x11!\t\x08\xd1\xd0'
tRp7215
sa(dp7216
S'trial_loop.thisTrialN'
p7217
I57
sg6371
g6492
sS'block_loop.thisIndex'
p7218
g6365
sg38
S'left'
p7219
sg59
g63
sS'trial_loop.thisN'
p7220
I57
sg33
g6503
sg64
g65
sS'trial_loop.thisIndex'
p7221
g60
(g99
S'9\x00\x00\x00'
tRp7222
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7223
I0
sg6380
g6500
sS'block_loop.thisRepN'
p7224
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7225
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p7226
Nsg70
Vn
sS'block_loop.thisTrialN'
p7227
I0
sg39
F0.8666468238006928
sg34
g753
(S'\x07\xdf\x07\t\x11!\x0f\r2\xe8'
tRp7228
sa(dp7229
S'trial_loop.thisTrialN'
p7230
I58
sg6371
g6409
sS'block_loop.thisIndex'
p7231
g6365
sg38
S'left'
p7232
sg59
g63
sS'trial_loop.thisN'
p7233
I58
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p7234
g60
(g99
S':\x00\x00\x00'
tRp7235
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7236
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7237
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7238
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7239
Nsg70
Vn
sS'block_loop.thisTrialN'
p7240
I0
sg39
F0.81660032421495998
sg34
g753
(S'\x07\xdf\x07\t\x11!\x15\x0b\xa0\x90'
tRp7241
sa(dp7242
S'trial_loop.thisTrialN'
p7243
I59
sg6371
g6609
sS'block_loop.thisIndex'
p7244
g6365
sg38
S'left'
p7245
sg59
g63
sS'trial_loop.thisN'
p7246
I59
sg33
g6619
sg64
g65
sS'trial_loop.thisIndex'
p7247
g60
(g99
S';\x00\x00\x00'
tRp7248
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7249
I0
sg6380
g6617
sS'block_loop.thisRepN'
p7250
I2
sg6383
g6619
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7251
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p7252
Nsg70
Vn
sS'block_loop.thisTrialN'
p7253
I0
sg39
F1.7832862635477795
sg34
g753
(S'\x07\xdf\x07\t\x11!\x1b\tV\xa0'
tRp7254
sa(dp7255
S'trial_loop.thisTrialN'
p7256
I60
sg6371
g6543
sS'block_loop.thisIndex'
p7257
g6365
sg38
S'right'
p7258
sg59
g63
sS'trial_loop.thisN'
p7259
I60
sg33
g6547
sg64
g65
sS'trial_loop.thisIndex'
p7260
g60
(g99
S'<\x00\x00\x00'
tRp7261
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7262
I0
sg6380
g6551
sS'block_loop.thisRepN'
p7263
I2
sg6383
g6547
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7264
I2
sg6385
g6554
sg55
g11
sS'block_loop.thisTrial'
p7265
Nsg70
Vn
sS'block_loop.thisTrialN'
p7266
I0
sg39
F2.3833042817823298
sg34
g753
(S'\x07\xdf\x07\t\x11!"\x06\x8b\xc8'
tRp7267
sa(dp7268
S'trial_loop.thisTrialN'
p7269
I61
sg6371
S'51-mars.png'
p7270
sS'block_loop.thisIndex'
p7271
g6365
sg38
S'right'
p7272
sg59
g63
sS'trial_loop.thisN'
p7273
I61
sg33
S'27-hartleys_raspberries_jelly.png'
p7274
sg64
g65
sS'trial_loop.thisIndex'
p7275
g60
(g99
S'=\x00\x00\x00'
tRp7276
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7277
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p7278
sS'block_loop.thisRepN'
p7279
I2
sg6383
g7274
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7280
I2
sg6385
S'51-mars.png'
p7281
sg55
g11
sS'block_loop.thisTrial'
p7282
Nsg70
Vn
sS'block_loop.thisTrialN'
p7283
I0
sg39
F2.999903636660747
sg34
g753
(S'\x07\xdf\x07\t\x11!)\r\x0b\xd8'
tRp7284
sa(dp7285
S'trial_loop.thisTrialN'
p7286
I62
sg6371
g6609
sS'block_loop.thisIndex'
p7287
g6365
sg38
S'left'
p7288
sg59
g63
sS'trial_loop.thisN'
p7289
I62
sg33
g6613
sg64
g65
sS'trial_loop.thisIndex'
p7290
g60
(g99
S'>\x00\x00\x00'
tRp7291
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7292
I0
sg6380
g6617
sS'block_loop.thisRepN'
p7293
I2
sg6383
g6619
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7294
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p7295
Nsg70
Vn
sS'block_loop.thisTrialN'
p7296
I0
sg39
F1.4005096993423649
sg34
g753
(S'\x07\xdf\x07\t\x11!1\r\x90\xa8'
tRp7297
sa(dp7298
S'trial_loop.thisTrialN'
p7299
I63
sg6371
g7104
sS'block_loop.thisIndex'
p7300
g6365
sg38
S'left'
p7301
sg59
g63
sS'trial_loop.thisN'
p7302
I63
sg33
g7114
sg64
g65
sS'trial_loop.thisIndex'
p7303
g60
(g99
S'?\x00\x00\x00'
tRp7304
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7305
I0
sg6380
g7112
sS'block_loop.thisRepN'
p7306
I2
sg6383
g7114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7307
I2
sg6385
g7108
sg55
g11
sS'block_loop.thisTrial'
p7308
Nsg70
Vn
sS'block_loop.thisTrialN'
p7309
I0
sg39
F0.89999452610572916
sg34
g753
(S'\x07\xdf\x07\t\x11!8\x04\xd2`'
tRp7310
sa(dp7311
S'trial_loop.thisTrialN'
p7312
I64
sg6371
g6680
sS'block_loop.thisIndex'
p7313
g6365
sg38
S'right'
p7314
sg59
g63
sS'trial_loop.thisN'
p7315
I64
sg33
g6691
sg64
g65
sS'trial_loop.thisIndex'
p7316
g60
(g99
S'@\x00\x00\x00'
tRp7317
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7318
I0
sg6380
g6688
sS'block_loop.thisRepN'
p7319
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7320
I2
sg6385
g6691
sg55
g11
sS'block_loop.thisTrial'
p7321
Nsg70
Vn
sS'block_loop.thisTrialN'
p7322
I0
sg39
F1.1332271626015427
sg34
g753
(S'\x07\xdf\x07\t\x11"\x02\x03\xb9 '
tRp7323
sa(dp7324
S'trial_loop.thisTrialN'
p7325
I65
sg6371
g6955
sS'block_loop.thisIndex'
p7326
g6365
sg38
S'left'
p7327
sg59
g63
sS'trial_loop.thisN'
p7328
I65
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7329
g60
(g99
S'A\x00\x00\x00'
tRp7330
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7331
I0
sg6380
g6962
sS'block_loop.thisRepN'
p7332
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7333
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7334
Nsg70
Vn
sS'block_loop.thisTrialN'
p7335
I0
sg39
F1.1999738849663117
sg34
g753
(S'\x07\xdf\x07\t\x11"\x08\x06pp'
tRp7336
sa(dp7337
S'trial_loop.thisTrialN'
p7338
I66
sg6371
g7173
sS'block_loop.thisIndex'
p7339
g6365
sg38
S'left'
p7340
sg59
g63
sS'trial_loop.thisN'
p7341
I66
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7342
g60
(g99
S'B\x00\x00\x00'
tRp7343
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7344
I0
sg6380
g7180
sS'block_loop.thisRepN'
p7345
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7346
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7347
Nsg70
Vn
sS'block_loop.thisTrialN'
p7348
I0
sg39
F1.2171057470732194
sg34
g753
(S'\x07\xdf\x07\t\x11"\x0e\t\xdbp'
tRp7349
sa(dp7350
S'trial_loop.thisTrialN'
p7351
I67
sg6371
g6560
sS'block_loop.thisIndex'
p7352
g6365
sg38
S'left'
p7353
sg59
g63
sS'trial_loop.thisN'
p7354
I67
sg33
g6564
sg64
g65
sS'trial_loop.thisIndex'
p7355
g60
(g99
S'C\x00\x00\x00'
tRp7356
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7357
I0
sg6380
g6568
sS'block_loop.thisRepN'
p7358
I2
sg6383
g6564
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7359
I2
sg6385
g6571
sg55
g11
sS'block_loop.thisTrial'
p7360
Nsg70
Vn
sS'block_loop.thisTrialN'
p7361
I0
sg39
F1.2662185486333328
sg34
g753
(S'\x07\xdf\x07\t\x11"\x14\r\xc3p'
tRp7362
sa(dp7363
S'trial_loop.thisTrialN'
p7364
I68
sg6371
S'27-hartleys_raspberries_jelly.png'
p7365
sS'block_loop.thisIndex'
p7366
g6365
sg38
S'left'
p7367
sg59
g63
sS'trial_loop.thisN'
p7368
I68
sg33
g7281
sg64
g65
sS'trial_loop.thisIndex'
p7369
g60
(g99
S'D\x00\x00\x00'
tRp7370
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7371
I0
sg6380
S'51-mars.png'
p7372
sS'block_loop.thisRepN'
p7373
I2
sg6383
g7274
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7374
I2
sg6385
g7281
sg55
g11
sS'block_loop.thisTrial'
p7375
Nsg70
Vn
sS'block_loop.thisTrialN'
p7376
I0
sg39
F0.83331024034123402
sg34
g753
(S'\x07\xdf\x07\t\x11"\x1b\x03\x1c\xe0'
tRp7377
sa(dp7378
S'trial_loop.thisTrialN'
p7379
I69
sg6371
g6925
sS'block_loop.thisIndex'
p7380
g6365
sg38
S'left'
p7381
sg59
g63
sS'trial_loop.thisN'
p7382
I69
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p7383
g60
(g99
S'E\x00\x00\x00'
tRp7384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7385
I0
sg6380
g6932
sS'block_loop.thisRepN'
p7386
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7387
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p7388
Nsg70
Vn
sS'block_loop.thisTrialN'
p7389
I0
sg39
F0.78335098093884881
sg34
g753
(S'\x07\xdf\x07\t\x11"!\x01\x11p'
tRp7390
sa(dp7391
S'trial_loop.thisTrialN'
p7392
I70
sg6371
g7089
sS'block_loop.thisIndex'
p7393
g6365
sg38
S'left'
p7394
sg59
g63
sS'trial_loop.thisN'
p7395
I70
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7396
g60
(g99
S'F\x00\x00\x00'
tRp7397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7398
I0
sg6380
g7096
sS'block_loop.thisRepN'
p7399
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7400
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7401
Nsg70
Vn
sS'block_loop.thisTrialN'
p7402
I0
sg39
F0.84999962937217788
sg34
g753
(S'\x07\xdf\x07\t\x11"&\r\x8c\xc0'
tRp7403
sa(dp7404
S'trial_loop.thisTrialN'
p7405
I71
sg6371
g7270
sS'block_loop.thisIndex'
p7406
g6365
sg38
S'right'
p7407
sg59
g63
sS'trial_loop.thisN'
p7408
I71
sg33
g7274
sg64
g65
sS'trial_loop.thisIndex'
p7409
g60
(g99
S'G\x00\x00\x00'
tRp7410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7411
I0
sg6380
g7278
sS'block_loop.thisRepN'
p7412
I2
sg6383
g7274
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7413
I2
sg6385
g7281
sg55
g11
sS'block_loop.thisTrial'
p7414
Nsg70
Vn
sS'block_loop.thisTrialN'
p7415
I0
sg39
F2.8503950611775508
sg34
g753
(S'\x07\xdf\x07\t\x11",\x0b\xbf\xd0'
tRp7416
sa(dp7417
S'trial_loop.thisTrialN'
p7418
I72
sg6371
g6955
sS'block_loop.thisIndex'
p7419
g6365
sg38
S'left'
p7420
sg59
g63
sS'trial_loop.thisN'
p7421
I72
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7422
g60
(g99
S'H\x00\x00\x00'
tRp7423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7424
I0
sg6380
g6962
sS'block_loop.thisRepN'
p7425
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7426
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7427
Nsg70
Vn
sS'block_loop.thisTrialN'
p7428
I0
sg39
F1.6333343596888881
sg34
g753
(S'\x07\xdf\x07\t\x11"4\t\xe3@'
tRp7429
sa(dp7430
S'trial_loop.thisTrialN'
p7431
I73
sg6371
g6895
sS'block_loop.thisIndex'
p7432
g6365
sg38
S'right'
p7433
sg59
g63
sS'trial_loop.thisN'
p7434
I73
sg33
g6906
sg64
g65
sS'trial_loop.thisIndex'
p7435
g60
(g99
S'I\x00\x00\x00'
tRp7436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7437
I0
sg6380
g6903
sS'block_loop.thisRepN'
p7438
I2
sg6383
g6899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7439
I2
sg6385
g6906
sg55
g11
sS'block_loop.thisTrial'
p7440
Nsg70
Vn
sS'block_loop.thisTrialN'
p7441
I0
sg39
F1.7333615010793437
sg34
g753
(S'\x07\xdf\x07\t\x11";\x04\xb7\x08'
tRp7442
sa(dp7443
S'trial_loop.thisTrialN'
p7444
I74
sg6371
S'35-raisins.png'
p7445
sS'block_loop.thisIndex'
p7446
g6365
sg38
S'left'
p7447
sg59
g63
sS'trial_loop.thisN'
p7448
I74
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p7449
g60
(g99
S'J\x00\x00\x00'
tRp7450
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7451
I0
sg6380
S'49-yorkie.png'
p7452
sS'block_loop.thisRepN'
p7453
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7454
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p7455
Nsg70
Vn
sS'block_loop.thisTrialN'
p7456
I0
sg39
F1.1999884249962633
sg34
g753
(S'\x07\xdf\x07\t\x11#\x06\x014\x98'
tRp7457
sa(dp7458
S'trial_loop.thisTrialN'
p7459
I75
sg6371
g6783
sS'block_loop.thisIndex'
p7460
g6365
sg38
S'right'
p7461
sg59
g63
sS'trial_loop.thisN'
p7462
I75
sg33
g6619
sg64
g65
sS'trial_loop.thisIndex'
p7463
g60
(g99
S'K\x00\x00\x00'
tRp7464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7465
I0
sg6380
g6790
sS'block_loop.thisRepN'
p7466
I2
sg6383
g6619
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7467
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p7468
Nsg70
Vn
sS'block_loop.thisTrialN'
p7469
I0
sg39
F1.0333334473725699
sg34
g753
(S'\x07\xdf\x07\t\x11#\x0c\x04\xde\x18'
tRp7470
sa(dp7471
S'trial_loop.thisTrialN'
p7472
I76
sg6371
g6526
sS'block_loop.thisIndex'
p7473
g6365
sg38
S'left'
p7474
sg59
g63
sS'trial_loop.thisN'
p7475
I76
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p7476
g60
(g99
S'L\x00\x00\x00'
tRp7477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7478
I0
sg6380
g6534
sS'block_loop.thisRepN'
p7479
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7480
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p7481
Nsg70
Vn
sS'block_loop.thisTrialN'
p7482
I0
sg39
F2.1333044243328914
sg34
g753
(S'\x07\xdf\x07\t\x11#\x12\x05\xeb\xa0'
tRp7483
sa(dp7484
S'trial_loop.thisTrialN'
p7485
I77
sg6371
g6753
sS'block_loop.thisIndex'
p7486
g6365
sg38
S'right'
p7487
sg59
g63
sS'trial_loop.thisN'
p7488
I77
sg33
g6764
sg64
g65
sS'trial_loop.thisIndex'
p7489
g60
(g99
S'M\x00\x00\x00'
tRp7490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7491
I0
sg6380
g6761
sS'block_loop.thisRepN'
p7492
I2
sg6383
g6757
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7493
I2
sg6385
g6764
sg55
g11
sS'block_loop.thisTrial'
p7494
Nsg70
Vn
sS'block_loop.thisTrialN'
p7495
I0
sg39
F2.1999562088494713
sg34
g753
(S'\x07\xdf\x07\t\x11#\x19\x08\\\xa0'
tRp7496
sa(dp7497
S'trial_loop.thisTrialN'
p7498
I78
sg6371
g6409
sS'block_loop.thisIndex'
p7499
g6365
sg38
S'left'
p7500
sg59
g63
sS'trial_loop.thisN'
p7501
I78
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7502
g60
(g99
S'N\x00\x00\x00'
tRp7503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7504
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7505
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7506
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7507
Nsg70
Vn
sS'block_loop.thisTrialN'
p7508
I0
sg39
F0.99998916625190759
sg34
g753
(S'\x07\xdf\x07\t\x11# \x0b\xfeP'
tRp7509
sa(dp7510
S'trial_loop.thisTrialN'
p7511
I79
sg6371
g6895
sS'block_loop.thisIndex'
p7512
g6365
sg38
S'right'
p7513
sg59
g63
sS'trial_loop.thisN'
p7514
I79
sg33
g6906
sg64
g65
sS'trial_loop.thisIndex'
p7515
g60
(g99
S'O\x00\x00\x00'
tRp7516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7517
I0
sg6380
g6903
sS'block_loop.thisRepN'
p7518
I2
sg6383
g6899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7519
I2
sg6385
g6906
sg55
g11
sS'block_loop.thisTrial'
p7520
Nsg70
Vn
sS'block_loop.thisTrialN'
p7521
I0
sg39
F1.2666102741568466
sg34
g753
(S'\x07\xdf\x07\t\x11#&\x0cT@'
tRp7522
sa(dp7523
S'trial_loop.thisTrialN'
p7524
I80
sg6371
g6955
sS'block_loop.thisIndex'
p7525
g6365
sg38
S'left'
p7526
sg59
g63
sS'trial_loop.thisN'
p7527
I80
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7528
g60
(g99
S'P\x00\x00\x00'
tRp7529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7530
I0
sg6380
g6962
sS'block_loop.thisRepN'
p7531
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7532
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7533
Nsg70
Vn
sS'block_loop.thisTrialN'
p7534
I0
sg39
F0.86666421481641009
sg34
g753
(S'\x07\xdf\x07\t\x11#-\x01\xad\xb0'
tRp7535
sa(dp7536
S'trial_loop.thisTrialN'
p7537
I81
sg6371
g7365
sS'block_loop.thisIndex'
p7538
g6365
sg38
S'left'
p7539
sg59
g63
sS'trial_loop.thisN'
p7540
I81
sg33
g7274
sg64
g65
sS'trial_loop.thisIndex'
p7541
g60
(g99
S'Q\x00\x00\x00'
tRp7542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7543
I0
sg6380
g7372
sS'block_loop.thisRepN'
p7544
I2
sg6383
g7274
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7545
I2
sg6385
g7281
sg55
g11
sS'block_loop.thisTrial'
p7546
Nsg70
Vn
sS'block_loop.thisTrialN'
p7547
I0
sg39
F0.93374763867177535
sg34
g753
(S'\x07\xdf\x07\t\x11#3\x00\x1bX'
tRp7548
sa(dp7549
S'trial_loop.thisTrialN'
p7550
I82
sg6371
g6697
sS'block_loop.thisIndex'
p7551
g6365
sg38
S'right'
p7552
sg59
g63
sS'trial_loop.thisN'
p7553
I82
sg33
g6596
sg64
g65
sS'trial_loop.thisIndex'
p7554
g60
(g99
S'R\x00\x00\x00'
tRp7555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7556
I0
sg6380
g6704
sS'block_loop.thisRepN'
p7557
I2
sg6383
g6596
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7558
I2
sg6385
g6603
sg55
g11
sS'block_loop.thisTrial'
p7559
Nsg70
Vn
sS'block_loop.thisTrialN'
p7560
I0
sg39
F0.91658812199239037
sg34
g753
(S'\x07\xdf\x07\t\x11#8\x0e\xfb\xf0'
tRp7561
sa(dp7562
S'trial_loop.thisTrialN'
p7563
I83
sg6371
g7445
sS'block_loop.thisIndex'
p7564
g6365
sg38
S'right'
p7565
sg59
g63
sS'trial_loop.thisN'
p7566
I83
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p7567
g60
(g99
S'S\x00\x00\x00'
tRp7568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7569
I0
sg6380
g7452
sS'block_loop.thisRepN'
p7570
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7571
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p7572
Nsg70
Vn
sS'block_loop.thisTrialN'
p7573
I0
sg39
F1.1499020115988969
sg34
g753
(S'\x07\xdf\x07\t\x11$\x02\x0e!0'
tRp7574
sa(dp7575
S'trial_loop.thisTrialN'
p7576
I84
sg6371
S'6-sour_patch_kids.png'
p7577
sS'block_loop.thisIndex'
p7578
g6365
sg38
S'right'
p7579
sg59
g63
sS'trial_loop.thisN'
p7580
I84
sg33
g6564
sg64
g65
sS'trial_loop.thisIndex'
p7581
g60
(g99
S'T\x00\x00\x00'
tRp7582
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7583
I0
sg6380
S'38-maltesers.png'
p7584
sS'block_loop.thisRepN'
p7585
I2
sg6383
g6564
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7586
I2
sg6385
g6571
sg55
g11
sS'block_loop.thisTrial'
p7587
Nsg70
Vn
sS'block_loop.thisTrialN'
p7588
I0
sg39
F0.69974979743710719
sg34
g753
(S'\x07\xdf\x07\t\x11$\t\x01\xd0\xd8'
tRp7589
sa(dp7590
S'trial_loop.thisTrialN'
p7591
I85
sg6371
g6392
sS'block_loop.thisIndex'
p7592
g6365
sg38
S'right'
p7593
sg59
g63
sS'trial_loop.thisN'
p7594
I85
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7595
g60
(g99
S'U\x00\x00\x00'
tRp7596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7597
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7598
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7599
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7600
Nsg70
Vn
sS'block_loop.thisTrialN'
p7601
I0
sg39
F1.0665408811473753
sg34
g753
(S'\x07\xdf\x07\t\x11$\x0e\x0c\xe0\xe0'
tRp7602
sa(dp7603
S'trial_loop.thisTrialN'
p7604
I86
sg6371
g7445
sS'block_loop.thisIndex'
p7605
g6365
sg38
S'right'
p7606
sg59
g63
sS'trial_loop.thisN'
p7607
I86
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p7608
g60
(g99
S'V\x00\x00\x00'
tRp7609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7610
I0
sg6380
g7452
sS'block_loop.thisRepN'
p7611
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7612
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p7613
Nsg70
Vn
sS'block_loop.thisTrialN'
p7614
I0
sg39
F0.78333444521558704
sg34
g753
(S'\x07\xdf\x07\t\x11$\x14\x0eg\x80'
tRp7615
sa(dp7616
S'trial_loop.thisTrialN'
p7617
I87
sg6371
g6392
sS'block_loop.thisIndex'
p7618
g6365
sg38
S'right'
p7619
sg59
g63
sS'trial_loop.thisN'
p7620
I87
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7621
g60
(g99
S'W\x00\x00\x00'
tRp7622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7623
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7624
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7625
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7626
Nsg70
Vn
sS'block_loop.thisTrialN'
p7627
I0
sg39
F0.68337202121620066
sg34
g753
(S'\x07\xdf\x07\t\x11$\x1a\x0b\xa4x'
tRp7628
sa(dp7629
S'trial_loop.thisTrialN'
p7630
I88
sg6371
g6925
sS'block_loop.thisIndex'
p7631
g6365
sg38
S'left'
p7632
sg59
g63
sS'trial_loop.thisN'
p7633
I88
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p7634
g60
(g99
S'X\x00\x00\x00'
tRp7635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7636
I0
sg6380
g6932
sS'block_loop.thisRepN'
p7637
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7638
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p7639
Nsg70
Vn
sS'block_loop.thisTrialN'
p7640
I0
sg39
F0.79999617967769154
sg34
g753
(S'\x07\xdf\x07\t\x11$ \x07r@'
tRp7641
sa(dp7642
S'trial_loop.thisTrialN'
p7643
I89
sg6371
g7022
sS'block_loop.thisIndex'
p7644
g6365
sg38
S'left'
p7645
sg59
g63
sS'trial_loop.thisN'
p7646
I89
sg33
g6764
sg64
g65
sS'trial_loop.thisIndex'
p7647
g60
(g99
S'Y\x00\x00\x00'
tRp7648
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7649
I0
sg6380
g7029
sS'block_loop.thisRepN'
p7650
I2
sg6383
g6757
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7651
I2
sg6385
g6764
sg55
g11
sS'block_loop.thisTrial'
p7652
Nsg70
Vn
sS'block_loop.thisTrialN'
p7653
I0
sg39
F1.0666879920427164
sg34
g753
(S'\x07\xdf\x07\t\x11$&\x04\xaf8'
tRp7654
sa(dp7655
S'trial_loop.thisTrialN'
p7656
I90
sg6371
g6592
sS'block_loop.thisIndex'
p7657
g6365
sg38
S'left'
p7658
sg59
g63
sS'trial_loop.thisN'
p7659
I90
sg33
g6603
sg64
g65
sS'trial_loop.thisIndex'
p7660
g60
(g99
S'Z\x00\x00\x00'
tRp7661
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7662
I0
sg6380
g6600
sS'block_loop.thisRepN'
p7663
I2
sg6383
g6596
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7664
I2
sg6385
g6603
sg55
g11
sS'block_loop.thisTrial'
p7665
Nsg70
Vn
sS'block_loop.thisTrialN'
p7666
I0
sg39
F1.2665612371893076
sg34
g753
(S'\x07\xdf\x07\t\x11$,\x06pp'
tRp7667
sa(dp7668
S'trial_loop.thisTrialN'
p7669
I91
sg6371
g7201
sS'block_loop.thisIndex'
p7670
g6365
sg38
S'right'
p7671
sg59
g63
sS'trial_loop.thisN'
p7672
I91
sg33
g7211
sg64
g65
sS'trial_loop.thisIndex'
p7673
g60
(g99
S'[\x00\x00\x00'
tRp7674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7675
I0
sg6380
g7209
sS'block_loop.thisRepN'
p7676
I2
sg6383
g7211
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7677
I2
sg6385
g7205
sg55
g11
sS'block_loop.thisTrial'
p7678
Nsg70
Vn
sS'block_loop.thisTrialN'
p7679
I0
sg39
F0.99999173214018811
sg34
g753
(S'\x07\xdf\x07\t\x11$2\n\xd1\x88'
tRp7680
sa(dp7681
S'trial_loop.thisTrialN'
p7682
I92
sg6371
g6783
sS'block_loop.thisIndex'
p7683
g6365
sg38
S'right'
p7684
sg59
g63
sS'trial_loop.thisN'
p7685
I92
sg33
g6619
sg64
g65
sS'trial_loop.thisIndex'
p7686
g60
(g99
S'\\\x00\x00\x00'
tRp7687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7688
I0
sg6380
g6790
sS'block_loop.thisRepN'
p7689
I2
sg6383
g6619
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7690
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p7691
Nsg70
Vn
sS'block_loop.thisTrialN'
p7692
I0
sg39
F1.1499715756654041
sg34
g753
(S'\x07\xdf\x07\t\x11$8\x0bb\x10'
tRp7693
sa(dp7694
S'trial_loop.thisTrialN'
p7695
I93
sg6371
g6526
sS'block_loop.thisIndex'
p7696
g6365
sg38
S'right'
p7697
sg59
g63
sS'trial_loop.thisN'
p7698
I93
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p7699
g60
(g99
S']\x00\x00\x00'
tRp7700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7701
I0
sg6380
g6534
sS'block_loop.thisRepN'
p7702
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7703
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p7704
Nsg70
Vn
sS'block_loop.thisTrialN'
p7705
I0
sg39
F0.88321048433135729
sg34
g753
(S'\x07\xdf\x07\t\x11%\x02\x0e\x15x'
tRp7706
sa(dp7707
S'trial_loop.thisTrialN'
p7708
I94
sg6371
g7201
sS'block_loop.thisIndex'
p7709
g6365
sg38
S'right'
p7710
sg59
g63
sS'trial_loop.thisN'
p7711
I94
sg33
g7211
sg64
g65
sS'trial_loop.thisIndex'
p7712
g60
(g99
S'^\x00\x00\x00'
tRp7713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7714
I0
sg6380
g7209
sS'block_loop.thisRepN'
p7715
I2
sg6383
g7211
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7716
I2
sg6385
g7205
sg55
g11
sS'block_loop.thisTrial'
p7717
Nsg70
Vn
sS'block_loop.thisTrialN'
p7718
I0
sg39
F1.1333363553785603
sg34
g753
(S'\x07\xdf\x07\t\x11%\x08\x0c\xfc8'
tRp7719
sa(dp7720
S'trial_loop.thisTrialN'
p7721
I95
sg6371
g6492
sS'block_loop.thisIndex'
p7722
g6365
sg38
S'left'
p7723
sg59
g63
sS'trial_loop.thisN'
p7724
I95
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p7725
g60
(g99
S'_\x00\x00\x00'
tRp7726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7727
I0
sg6380
g6500
sS'block_loop.thisRepN'
p7728
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7729
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p7730
Nsg70
Vn
sS'block_loop.thisTrialN'
p7731
I0
sg39
F0.74997933034683228
sg34
g753
(S'\x07\xdf\x07\t\x11%\x0f\x002\xc8'
tRp7732
sa(dp7733
S'trial_loop.thisTrialN'
p7734
I96
sg6371
g6940
sS'block_loop.thisIndex'
p7735
g6365
sg38
S'right'
p7736
sg59
g63
sS'trial_loop.thisN'
p7737
I96
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7738
g60
(g99
S'`\x00\x00\x00'
tRp7739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7740
I0
sg6380
g6947
sS'block_loop.thisRepN'
p7741
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7742
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7743
Nsg70
Vn
sS'block_loop.thisTrialN'
p7744
I0
sg39
F1.0833123785851058
sg34
g753
(S'\x07\xdf\x07\t\x11%\x14\x0c8\xe8'
tRp7745
sa(dp7746
S'trial_loop.thisTrialN'
p7747
I97
sg6371
S'42-mrkipling_lemon_slices.png'
p7748
sS'block_loop.thisIndex'
p7749
g6365
sg38
S'right'
p7750
sg59
g63
sS'trial_loop.thisN'
p7751
I97
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p7752
g60
(g99
S'a\x00\x00\x00'
tRp7753
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7754
I0
sg6380
S'16-skips_prawn.png'
p7755
sS'block_loop.thisRepN'
p7756
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7757
I2
sg6385
g6815
sg55
g11
sS'block_loop.thisTrial'
p7758
Nsg70
Vn
sS'block_loop.thisTrialN'
p7759
I0
sg39
F1.050283416552702
sg34
g753
(S'\x07\xdf\x07\t\x11%\x1a\r\xfa '
tRp7760
sa(dp7761
S'trial_loop.thisTrialN'
p7762
I98
sg6371
g6940
sS'block_loop.thisIndex'
p7763
g6365
sg38
S'right'
p7764
sg59
g63
sS'trial_loop.thisN'
p7765
I98
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7766
g60
(g99
S'b\x00\x00\x00'
tRp7767
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7768
I0
sg6380
g6947
sS'block_loop.thisRepN'
p7769
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7770
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7771
Nsg70
Vn
sS'block_loop.thisTrialN'
p7772
I0
sg39
F1.4665493770880857
sg34
g753
(S'\x07\xdf\x07\t\x11%!\x00\x00\x00'
tRp7773
sa(dp7774
S'trial_loop.thisTrialN'
p7775
I99
sg6371
S'25-kitkat.png'
p7776
sS'block_loop.thisIndex'
p7777
g6365
sg38
S'left'
p7778
sg59
g63
sS'trial_loop.thisN'
p7779
I99
sg33
g7205
sg64
g65
sS'trial_loop.thisIndex'
p7780
g60
(g99
S'c\x00\x00\x00'
tRp7781
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7782
I0
sg6380
S'31-hobnobs.png'
p7783
sS'block_loop.thisRepN'
p7784
I2
sg6383
g7211
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7785
I2
sg6385
g7205
sg55
g11
sS'block_loop.thisTrial'
p7786
Nsg70
Vn
sS'block_loop.thisTrialN'
p7787
I0
sg39
F1.2000240623237914
sg34
g753
(S"\x07\xdf\x07\t\x11%'\x07\xb4\xa8"
tRp7788
sa(dp7789
S'trial_loop.thisTrialN'
p7790
I100
sg6371
S'23-crunchie_redo.png'
p7791
sS'block_loop.thisIndex'
p7792
g6365
sg38
S'right'
p7793
sg59
g63
sS'trial_loop.thisN'
p7794
I100
sg33
g7114
sg64
g65
sS'trial_loop.thisIndex'
p7795
g60
(g99
S'd\x00\x00\x00'
tRp7796
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7797
I0
sg6380
S'33-ambrosia_rice.png'
p7798
sS'block_loop.thisRepN'
p7799
I2
sg6383
g7114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7800
I2
sg6385
g7108
sg55
g11
sS'block_loop.thisTrial'
p7801
Nsg70
Vn
sS'block_loop.thisTrialN'
p7802
I0
sg39
F0.91658498590550153
sg34
g753
(S'\x07\xdf\x07\t\x11%-\x0b#\x90'
tRp7803
sa(dp7804
S'trial_loop.thisTrialN'
p7805
I101
sg6371
g7201
sS'block_loop.thisIndex'
p7806
g6365
sg38
S'right'
p7807
sg59
g63
sS'trial_loop.thisN'
p7808
I101
sg33
g7211
sg64
g65
sS'trial_loop.thisIndex'
p7809
g60
(g99
S'e\x00\x00\x00'
tRp7810
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7811
I0
sg6380
g7209
sS'block_loop.thisRepN'
p7812
I2
sg6383
g7211
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7813
I2
sg6385
g7205
sg55
g11
sS'block_loop.thisTrial'
p7814
Nsg70
Vn
sS'block_loop.thisTrialN'
p7815
I0
sg39
F0.86658039582107449
sg34
g753
(S'\x07\xdf\x07\t\x11%3\nD\xe8'
tRp7816
sa(dp7817
S'trial_loop.thisTrialN'
p7818
I102
sg6371
S'44-crunch.png'
p7819
sS'block_loop.thisIndex'
p7820
g6365
sg38
S'left'
p7821
sg59
g63
sS'trial_loop.thisN'
p7822
I102
sg33
g6899
sg64
g65
sS'trial_loop.thisIndex'
p7823
g60
(g99
S'f\x00\x00\x00'
tRp7824
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7825
I0
sg6380
S'26-walkers_smoky_bacon.png'
p7826
sS'block_loop.thisRepN'
p7827
I2
sg6383
g6899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7828
I2
sg6385
g6906
sg55
g11
sS'block_loop.thisTrial'
p7829
Nsg70
Vn
sS'block_loop.thisTrialN'
p7830
I0
sg39
F0.88364041307431762
sg34
g753
(S'\x07\xdf\x07\t\x11%9\x08\xf1\x10'
tRp7831
sa(dp7832
S'trial_loop.thisTrialN'
p7833
I103
sg6371
g7270
sS'block_loop.thisIndex'
p7834
g6365
sg38
S'right'
p7835
sg59
g63
sS'trial_loop.thisN'
p7836
I103
sg33
g7274
sg64
g65
sS'trial_loop.thisIndex'
p7837
g60
(g99
S'g\x00\x00\x00'
tRp7838
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7839
I0
sg6380
g7278
sS'block_loop.thisRepN'
p7840
I2
sg6383
g7274
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7841
I2
sg6385
g7281
sg55
g11
sS'block_loop.thisTrial'
p7842
Nsg70
Vn
sS'block_loop.thisTrialN'
p7843
I0
sg39
F1.0997223709491664
sg34
g753
(S'\x07\xdf\x07\t\x11&\x03\x07\x99P'
tRp7844
sa(dp7845
S'trial_loop.thisTrialN'
p7846
I104
sg6371
g6867
sS'block_loop.thisIndex'
p7847
g6365
sg38
S'left'
p7848
sg59
g63
sS'trial_loop.thisN'
p7849
I104
sg33
g6554
sg64
g65
sS'trial_loop.thisIndex'
p7850
g60
(g99
S'h\x00\x00\x00'
tRp7851
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7852
I0
sg6380
g6874
sS'block_loop.thisRepN'
p7853
I2
sg6383
g6547
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7854
I2
sg6385
g6554
sg55
g11
sS'block_loop.thisTrial'
p7855
Nsg70
Vn
sS'block_loop.thisTrialN'
p7856
I0
sg39
F1.616539769263909
sg34
g753
(S'\x07\xdf\x07\t\x11&\t\t\x99\x08'
tRp7857
sa(dp7858
S'trial_loop.thisTrialN'
p7859
I105
sg6371
g7173
sS'block_loop.thisIndex'
p7860
g6365
sg38
S'left'
p7861
sg59
g63
sS'trial_loop.thisN'
p7862
I105
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7863
g60
(g99
S'i\x00\x00\x00'
tRp7864
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7865
I0
sg6380
g7180
sS'block_loop.thisRepN'
p7866
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7867
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7868
Nsg70
Vn
sS'block_loop.thisTrialN'
p7869
I0
sg39
F0.86665566185911302
sg34
g753
(S'\x07\xdf\x07\t\x11&\x10\x0428'
tRp7870
sa(dp7871
S'trial_loop.thisTrialN'
p7872
I106
sg6371
g6509
sS'block_loop.thisIndex'
p7873
g6365
sg38
S'left'
p7874
sg59
g63
sS'trial_loop.thisN'
p7875
I106
sg33
g6519
sg64
g65
sS'trial_loop.thisIndex'
p7876
g60
(g99
S'j\x00\x00\x00'
tRp7877
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7878
I0
sg6380
g6517
sS'block_loop.thisRepN'
p7879
I2
sg6383
g6519
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7880
I2
sg6385
g6513
sg55
g11
sS'block_loop.thisTrial'
p7881
Nsg70
Vn
sS'block_loop.thisTrialN'
p7882
I0
sg39
F2.0499772206203488
sg34
g753
(S'\x07\xdf\x07\t\x11&\x16\x02\xdax'
tRp7883
sa(dp7884
S'trial_loop.thisTrialN'
p7885
I107
sg6371
g7819
sS'block_loop.thisIndex'
p7886
g6365
sg38
S'left'
p7887
sg59
g63
sS'trial_loop.thisN'
p7888
I107
sg33
g6906
sg64
g65
sS'trial_loop.thisIndex'
p7889
g60
(g99
S'k\x00\x00\x00'
tRp7890
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7891
I0
sg6380
g7826
sS'block_loop.thisRepN'
p7892
I2
sg6383
g6899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7893
I2
sg6385
g6906
sg55
g11
sS'block_loop.thisTrial'
p7894
Nsg70
Vn
sS'block_loop.thisTrialN'
p7895
I0
sg39
F0.78373557899976731
sg34
g753
(S'\x07\xdf\x07\t\x11&\x1d\x04\x1e\xb0'
tRp7896
sa(dp7897
S'trial_loop.thisTrialN'
p7898
I108
sg6371
g7445
sS'block_loop.thisIndex'
p7899
g6365
sg38
S'right'
p7900
sg59
g63
sS'trial_loop.thisN'
p7901
I108
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p7902
g60
(g99
S'l\x00\x00\x00'
tRp7903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7904
I0
sg6380
g7452
sS'block_loop.thisRepN'
p7905
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7906
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p7907
Nsg70
Vn
sS'block_loop.thisTrialN'
p7908
I0
sg39
F1.0165633754331793
sg34
g753
(S'\x07\xdf\x07\t\x11&#\x01\x1d('
tRp7909
sa(dp7910
S'trial_loop.thisTrialN'
p7911
I109
sg6371
g7791
sS'block_loop.thisIndex'
p7912
g6365
sg38
S'right'
p7913
sg59
g63
sS'trial_loop.thisN'
p7914
I109
sg33
g7114
sg64
g65
sS'trial_loop.thisIndex'
p7915
g60
(g99
S'm\x00\x00\x00'
tRp7916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7917
I0
sg6380
g7798
sS'block_loop.thisRepN'
p7918
I2
sg6383
g7114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7919
I2
sg6385
g7108
sg55
g11
sS'block_loop.thisTrial'
p7920
Nsg70
Vn
sS'block_loop.thisTrialN'
p7921
I0
sg39
F0.79990722890215693
sg34
g753
(S'\x07\xdf\x07\t\x11&)\x01\xec0'
tRp7922
sa(dp7923
S'trial_loop.thisTrialN'
p7924
I110
sg6371
g7748
sS'block_loop.thisIndex'
p7925
g6365
sg38
S'right'
p7926
sg59
g63
sS'trial_loop.thisN'
p7927
I110
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p7928
g60
(g99
S'n\x00\x00\x00'
tRp7929
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7930
I0
sg6380
g7755
sS'block_loop.thisRepN'
p7931
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7932
I2
sg6385
g6815
sg55
g11
sS'block_loop.thisTrial'
p7933
Nsg70
Vn
sS'block_loop.thisTrialN'
p7934
I0
sg39
F1.0832083175810112
sg34
g753
(S'\x07\xdf\x07\t\x11&.\x0e\xa6\x00'
tRp7935
sa(dp7936
S'trial_loop.thisTrialN'
p7937
I111
sg6371
g7791
sS'block_loop.thisIndex'
p7938
g6365
sg38
S'right'
p7939
sg59
g63
sS'trial_loop.thisN'
p7940
I111
sg33
g7114
sg64
g65
sS'trial_loop.thisIndex'
p7941
g60
(g99
S'o\x00\x00\x00'
tRp7942
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7943
I0
sg6380
g7798
sS'block_loop.thisRepN'
p7944
I2
sg6383
g7114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7945
I2
sg6385
g7108
sg55
g11
sS'block_loop.thisTrial'
p7946
Nsg70
Vn
sS'block_loop.thisTrialN'
p7947
I0
sg39
F0.88335616973199649
sg34
g753
(S'\x07\xdf\x07\t\x11&5\x01$\xf8'
tRp7948
sa(dp7949
S'trial_loop.thisTrialN'
p7950
I112
sg6371
g6509
sS'block_loop.thisIndex'
p7951
g6365
sg38
S'left'
p7952
sg59
g63
sS'trial_loop.thisN'
p7953
I112
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p7954
g60
(g99
S'p\x00\x00\x00'
tRp7955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7956
I0
sg6380
g6517
sS'block_loop.thisRepN'
p7957
I2
sg6383
g6519
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7958
I2
sg6385
g6513
sg55
g11
sS'block_loop.thisTrial'
p7959
Nsg70
Vn
sS'block_loop.thisTrialN'
p7960
I0
sg39
F1.3166867091022141
sg34
g753
(S'\x07\xdf\x07\t\x11&;\x00\x0b\xb8'
tRp7961
sa(dp7962
S'trial_loop.thisTrialN'
p7963
I113
sg6371
g6697
sS'block_loop.thisIndex'
p7964
g6365
sg38
S'right'
p7965
sg59
g63
sS'trial_loop.thisN'
p7966
I113
sg33
g6603
sg64
g65
sS'trial_loop.thisIndex'
p7967
g60
(g99
S'q\x00\x00\x00'
tRp7968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7969
I0
sg6380
g6704
sS'block_loop.thisRepN'
p7970
I2
sg6383
g6596
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7971
I2
sg6385
g6603
sg55
g11
sS'block_loop.thisTrial'
p7972
Nsg70
Vn
sS'block_loop.thisTrialN'
p7973
I0
sg39
F0.96668736482752138
sg34
g753
(S"\x07\xdf\x07\t\x11'\x05\x05_\x00"
tRp7974
sa(dp7975
S'trial_loop.thisTrialN'
p7976
I114
sg6371
g6753
sS'block_loop.thisIndex'
p7977
g6365
sg38
S'right'
p7978
sg59
g63
sS'trial_loop.thisN'
p7979
I114
sg33
g6757
sg64
g65
sS'trial_loop.thisIndex'
p7980
g60
(g99
S'r\x00\x00\x00'
tRp7981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7982
I0
sg6380
g6761
sS'block_loop.thisRepN'
p7983
I2
sg6383
g6757
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7984
I2
sg6385
g6764
sg55
g11
sS'block_loop.thisTrial'
p7985
Nsg70
Vn
sS'block_loop.thisTrialN'
p7986
I0
sg39
F1.0998318488236691
sg34
g753
(S"\x07\xdf\x07\t\x11'\x0b\x05;\xd8"
tRp7987
sa(dp7988
S'trial_loop.thisTrialN'
p7989
I115
sg6371
g6392
sS'block_loop.thisIndex'
p7990
g6365
sg38
S'right'
p7991
sg59
g63
sS'trial_loop.thisN'
p7992
I115
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7993
g60
(g99
S's\x00\x00\x00'
tRp7994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7995
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7996
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7997
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7998
Nsg70
Vn
sS'block_loop.thisTrialN'
p7999
I0
sg39
F1.4666853691378492
sg34
g753
(S"\x07\xdf\x07\t\x11'\x11\x07;\x90"
tRp8000
sa(dp8001
S'trial_loop.thisTrialN'
p8002
I116
sg6371
g6753
sS'block_loop.thisIndex'
p8003
g6365
sg38
S'right'
p8004
sg59
g63
sS'trial_loop.thisN'
p8005
I116
sg33
g6757
sg64
g65
sS'trial_loop.thisIndex'
p8006
g60
(g99
S't\x00\x00\x00'
tRp8007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8008
I0
sg6380
g6761
sS'block_loop.thisRepN'
p8009
I2
sg6383
g6757
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8010
I2
sg6385
g6764
sg55
g11
sS'block_loop.thisTrial'
p8011
Nsg70
Vn
sS'block_loop.thisTrialN'
p8012
I0
sg39
F1.1833380944808596
sg34
g753
(S"\x07\xdf\x07\t\x11'\x17\x0e\xf08"
tRp8013
sa(dp8014
S'trial_loop.thisTrialN'
p8015
I117
sg6371
g7748
sS'block_loop.thisIndex'
p8016
g6365
sg38
S'right'
p8017
sg59
g63
sS'trial_loop.thisN'
p8018
I117
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p8019
g60
(g99
S'u\x00\x00\x00'
tRp8020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8021
I0
sg6380
g7755
sS'block_loop.thisRepN'
p8022
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8023
I2
sg6385
g6815
sg55
g11
sS'block_loop.thisTrial'
p8024
Nsg70
Vn
sS'block_loop.thisTrialN'
p8025
I0
sg39
F1.2665389994981524
sg34
g753
(S"\x07\xdf\x07\t\x11'\x1e\x03\x18\xf8"
tRp8026
sa(dp8027
S'trial_loop.thisTrialN'
p8028
I118
sg6371
g7089
sS'block_loop.thisIndex'
p8029
g6365
sg38
S'left'
p8030
sg59
g63
sS'trial_loop.thisN'
p8031
I118
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p8032
g60
(g99
S'v\x00\x00\x00'
tRp8033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8034
I0
sg6380
g7096
sS'block_loop.thisRepN'
p8035
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8036
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8037
Nsg70
Vn
sS'block_loop.thisTrialN'
p8038
I0
sg39
F1.8333011171853286
sg34
g753
(S"\x07\xdf\x07\t\x11'$\x07z\x10"
tRp8039
sa(dp8040
S'trial_loop.thisTrialN'
p8041
I119
sg6371
g7173
sS'block_loop.thisIndex'
p8042
g6365
sg38
S'left'
p8043
sg59
g63
sS'trial_loop.thisN'
p8044
I119
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8045
g60
(g99
S'w\x00\x00\x00'
tRp8046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8047
I0
sg6380
g7180
sS'block_loop.thisRepN'
p8048
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8049
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8050
Nsg70
Vn
sS'block_loop.thisTrialN'
p8051
I0
sg39
F0.86660519940051017
sg34
g753
(S"\x07\xdf\x07\t\x11'+\x05\xa5P"
tRp8052
sa(dp8053
S'trial_loop.thisTrialN'
p8054
I120
sg6371
g6443
sS'block_loop.thisIndex'
p8055
g6365
sg38
S'right'
p8056
sg59
g63
sS'trial_loop.thisN'
p8057
I120
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8058
g60
(g99
S'x\x00\x00\x00'
tRp8059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8060
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8061
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8062
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8063
Nsg70
Vn
sS'block_loop.thisTrialN'
p8064
I0
sg39
F0.98321111155019025
sg34
g753
(S"\x07\xdf\x07\t\x11'1\x04\x12\xf8"
tRp8065
sa(dp8066
S'trial_loop.thisTrialN'
p8067
I121
sg6371
g6753
sS'block_loop.thisIndex'
p8068
g6365
sg38
S'right'
p8069
sg59
g63
sS'trial_loop.thisN'
p8070
I121
sg33
g6757
sg64
g65
sS'trial_loop.thisIndex'
p8071
g60
(g99
S'y\x00\x00\x00'
tRp8072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8073
I0
sg6380
g6761
sS'block_loop.thisRepN'
p8074
I2
sg6383
g6757
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8075
I2
sg6385
g6764
sg55
g11
sS'block_loop.thisTrial'
p8076
Nsg70
Vn
sS'block_loop.thisTrialN'
p8077
I0
sg39
F0.73335693950139103
sg34
g753
(S"\x07\xdf\x07\t\x11'7\x04*h"
tRp8078
sa(dp8079
S'trial_loop.thisTrialN'
p8080
I122
sg6371
g7365
sS'block_loop.thisIndex'
p8081
g6365
sg38
S'left'
p8082
sg59
g63
sS'trial_loop.thisN'
p8083
I122
sg33
g7274
sg64
g65
sS'trial_loop.thisIndex'
p8084
g60
(g99
S'z\x00\x00\x00'
tRp8085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8086
I0
sg6380
g7372
sS'block_loop.thisRepN'
p8087
I2
sg6383
g7274
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8088
I2
sg6385
g7281
sg55
g11
sS'block_loop.thisTrial'
p8089
Nsg70
Vn
sS'block_loop.thisTrialN'
p8090
I0
sg39
F0.7000197858469619
sg34
g753
(S'\x07\xdf\x07\t\x11(\x01\x00\xaf\xc8'
tRp8091
sa(dp8092
S'trial_loop.thisTrialN'
p8093
I123
sg6371
g6895
sS'block_loop.thisIndex'
p8094
g6365
sg38
S'left'
p8095
sg59
g63
sS'trial_loop.thisN'
p8096
I123
sg33
g6899
sg64
g65
sS'trial_loop.thisIndex'
p8097
g60
(g99
S'{\x00\x00\x00'
tRp8098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8099
I0
sg6380
g6903
sS'block_loop.thisRepN'
p8100
I2
sg6383
g6899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8101
I2
sg6385
g6906
sg55
g11
sS'block_loop.thisTrial'
p8102
Nsg70
Vn
sS'block_loop.thisTrialN'
p8103
I0
sg39
F0.81666418630993576
sg34
g753
(S'\x07\xdf\x07\t\x11(\x06\x0b\xfah'
tRp8104
sa(dp8105
S'trial_loop.thisTrialN'
p8106
I124
sg6371
g6867
sS'block_loop.thisIndex'
p8107
g6365
sg38
S'right'
p8108
sg59
g63
sS'trial_loop.thisN'
p8109
I124
sg33
g6547
sg64
g65
sS'trial_loop.thisIndex'
p8110
g60
(g99
S'|\x00\x00\x00'
tRp8111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8112
I0
sg6380
g6874
sS'block_loop.thisRepN'
p8113
I2
sg6383
g6547
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8114
I2
sg6385
g6554
sg55
g11
sS'block_loop.thisTrial'
p8115
Nsg70
Vn
sS'block_loop.thisTrialN'
p8116
I0
sg39
F0.6833178524793766
sg34
g753
(S'\x07\xdf\x07\t\x11(\x0c\t\xb0x'
tRp8117
sa(dp8118
S'trial_loop.thisTrialN'
p8119
I125
sg6371
g6460
sS'block_loop.thisIndex'
p8120
g6365
sg38
S'right'
p8121
sg59
g63
sS'trial_loop.thisN'
p8122
I125
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8123
g60
(g99
S'}\x00\x00\x00'
tRp8124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8125
I0
sg6380
g6467
sS'block_loop.thisRepN'
p8126
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8127
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8128
Nsg70
Vn
sS'block_loop.thisTrialN'
p8129
I0
sg39
F1.0663946255481278
sg34
g753
(S'\x07\xdf\x07\t\x11(\x12\x05C\xa8'
tRp8130
sa(dp8131
S'trial_loop.thisTrialN'
p8132
I126
sg6371
g6697
sS'block_loop.thisIndex'
p8133
g6365
sg38
S'right'
p8134
sg59
g63
sS'trial_loop.thisN'
p8135
I126
sg33
g6596
sg64
g65
sS'trial_loop.thisIndex'
p8136
g60
(g99
S'~\x00\x00\x00'
tRp8137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8138
I0
sg6380
g6704
sS'block_loop.thisRepN'
p8139
I2
sg6383
g6596
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8140
I2
sg6385
g6603
sg55
g11
sS'block_loop.thisTrial'
p8141
Nsg70
Vn
sS'block_loop.thisTrialN'
p8142
I0
sg39
F0.75003520967948134
sg34
g753
(S'\x07\xdf\x07\t\x11(\x18\x06\xcaH'
tRp8143
sa(dp8144
S'trial_loop.thisTrialN'
p8145
I127
sg6371
g7270
sS'block_loop.thisIndex'
p8146
g6365
sg38
S'right'
p8147
sg59
g63
sS'trial_loop.thisN'
p8148
I127
sg33
g7274
sg64
g65
sS'trial_loop.thisIndex'
p8149
g60
(g99
S'\x7f\x00\x00\x00'
tRp8150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8151
I0
sg6380
g7278
sS'block_loop.thisRepN'
p8152
I2
sg6383
g7274
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8153
I2
sg6385
g7281
sg55
g11
sS'block_loop.thisTrial'
p8154
Nsg70
Vn
sS'block_loop.thisTrialN'
p8155
I0
sg39
F1.2499254467074934
sg34
g753
(S'\x07\xdf\x07\t\x11(\x1e\x03\x8a@'
tRp8156
sa(dp8157
S'trial_loop.thisTrialN'
p8158
I128
sg6371
g6665
sS'block_loop.thisIndex'
p8159
g6365
sg38
S'right'
p8160
sg59
g63
sS'trial_loop.thisN'
p8161
I128
sg33
g6519
sg64
g65
sS'trial_loop.thisIndex'
p8162
g60
(g99
S'\x80\x00\x00\x00'
tRp8163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8164
I0
sg6380
g6672
sS'block_loop.thisRepN'
p8165
I2
sg6383
g6519
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8166
I2
sg6385
g6513
sg55
g11
sS'block_loop.thisTrial'
p8167
Nsg70
Vn
sS'block_loop.thisTrialN'
p8168
I0
sg39
F1.91636945134087
sg34
g753
(S'\x07\xdf\x07\t\x11($\x07\xebX'
tRp8169
sa(dp8170
S'trial_loop.thisTrialN'
p8171
I129
sg6371
g7748
sS'block_loop.thisIndex'
p8172
g6365
sg38
S'right'
p8173
sg59
g63
sS'trial_loop.thisN'
p8174
I129
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p8175
g60
(g99
S'\x81\x00\x00\x00'
tRp8176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8177
I0
sg6380
g7755
sS'block_loop.thisRepN'
p8178
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8179
I2
sg6385
g6815
sg55
g11
sS'block_loop.thisTrial'
p8180
Nsg70
Vn
sS'block_loop.thisTrialN'
p8181
I0
sg39
F1.1998857894868706
sg34
g753
(S'\x07\xdf\x07\t\x11(+\x07\x08\xc8'
tRp8182
sa(dp8183
S'trial_loop.thisTrialN'
p8184
I130
sg6371
g6867
sS'block_loop.thisIndex'
p8185
g6365
sg38
S'left'
p8186
sg59
g63
sS'trial_loop.thisN'
p8187
I130
sg33
g6554
sg64
g65
sS'trial_loop.thisIndex'
p8188
g60
(g99
S'\x82\x00\x00\x00'
tRp8189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8190
I0
sg6380
g6874
sS'block_loop.thisRepN'
p8191
I2
sg6383
g6547
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8192
I2
sg6385
g6554
sg55
g11
sS'block_loop.thisTrial'
p8193
Nsg70
Vn
sS'block_loop.thisTrialN'
p8194
I0
sg39
F0.79996253803983564
sg34
g753
(S'\x07\xdf\x07\t\x11(1\n\xb2H'
tRp8195
sa(dp8196
S'trial_loop.thisTrialN'
p8197
I131
sg6371
g7577
sS'block_loop.thisIndex'
p8198
g6365
sg38
S'right'
p8199
sg59
g63
sS'trial_loop.thisN'
p8200
I131
sg33
g6564
sg64
g65
sS'trial_loop.thisIndex'
p8201
g60
(g99
S'\x83\x00\x00\x00'
tRp8202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8203
I0
sg6380
g7584
sS'block_loop.thisRepN'
p8204
I2
sg6383
g6564
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8205
I2
sg6385
g6571
sg55
g11
sS'block_loop.thisTrial'
p8206
Nsg70
Vn
sS'block_loop.thisTrialN'
p8207
I0
sg39
F0.69972014717859565
sg34
g753
(S'\x07\xdf\x07\t\x11(7\x08)\xd8'
tRp8208
sa(dp8209
S'trial_loop.thisTrialN'
p8210
I132
sg6371
g6680
sS'block_loop.thisIndex'
p8211
g6365
sg38
S'right'
p8212
sg59
g63
sS'trial_loop.thisN'
p8213
I132
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p8214
g60
(g99
S'\x84\x00\x00\x00'
tRp8215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8216
I0
sg6380
g6688
sS'block_loop.thisRepN'
p8217
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8218
I2
sg6385
g6691
sg55
g11
sS'block_loop.thisTrial'
p8219
Nsg70
Vn
sS'block_loop.thisTrialN'
p8220
I0
sg39
F0.6666851980771753
sg34
g753
(S'\x07\xdf\x07\t\x11)\x01\x03\xfb\x88'
tRp8221
sa(dp8222
S'trial_loop.thisTrialN'
p8223
I133
sg6371
g7748
sS'block_loop.thisIndex'
p8224
g6365
sg38
S'right'
p8225
sg59
g63
sS'trial_loop.thisN'
p8226
I133
sg33
g6815
sg64
g65
sS'trial_loop.thisIndex'
p8227
g60
(g99
S'\x85\x00\x00\x00'
tRp8228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8229
I0
sg6380
g7755
sS'block_loop.thisRepN'
p8230
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8231
I2
sg6385
g6815
sg55
g11
sS'block_loop.thisTrial'
p8232
Nsg70
Vn
sS'block_loop.thisTrialN'
p8233
I0
sg39
F2.2001683222370048
sg34
g753
(S'\x07\xdf\x07\t\x11)\x06\x0e\x92x'
tRp8234
sa(dp8235
S'trial_loop.thisTrialN'
p8236
I134
sg6371
g6560
sS'block_loop.thisIndex'
p8237
g6365
sg38
S'left'
p8238
sg59
g63
sS'trial_loop.thisN'
p8239
I134
sg33
g6564
sg64
g65
sS'trial_loop.thisIndex'
p8240
g60
(g99
S'\x86\x00\x00\x00'
tRp8241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8242
I0
sg6380
g6568
sS'block_loop.thisRepN'
p8243
I2
sg6383
g6564
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8244
I2
sg6385
g6571
sg55
g11
sS'block_loop.thisTrial'
p8245
Nsg70
Vn
sS'block_loop.thisTrialN'
p8246
I0
sg39
F0.71635907374729868
sg34
g753
(S'\x07\xdf\x07\t\x11)\x0e\x02\xf1\xe8'
tRp8247
sa(dp8248
S'trial_loop.thisTrialN'
p8249
I135
sg6371
g6426
sS'block_loop.thisIndex'
p8250
g6365
sg38
S'right'
p8251
sg59
g63
sS'trial_loop.thisN'
p8252
I135
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p8253
g60
(g99
S'\x87\x00\x00\x00'
tRp8254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8255
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8256
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8257
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8258
Nsg70
Vn
sS'block_loop.thisTrialN'
p8259
I0
sg39
F0.88318254466503276
sg34
g753
(S'\x07\xdf\x07\t\x11)\x13\x0e{\x08'
tRp8260
sa(dp8261
S'trial_loop.thisTrialN'
p8262
I136
sg6371
g7776
sS'block_loop.thisIndex'
p8263
g6365
sg38
S'right'
p8264
sg59
g63
sS'trial_loop.thisN'
p8265
I136
sg33
g7211
sg64
g65
sS'trial_loop.thisIndex'
p8266
g60
(g99
S'\x88\x00\x00\x00'
tRp8267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8268
I0
sg6380
g7783
sS'block_loop.thisRepN'
p8269
I2
sg6383
g7211
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8270
I2
sg6385
g7205
sg55
g11
sS'block_loop.thisTrial'
p8271
Nsg70
Vn
sS'block_loop.thisTrialN'
p8272
I0
sg39
F1.1499901070747001
sg34
g753
(S"\x07\xdf\x07\t\x11)\x19\r'0"
tRp8273
sa(dp8274
S'trial_loop.thisTrialN'
p8275
I137
sg6371
g7577
sS'block_loop.thisIndex'
p8276
g6365
sg38
S'right'
p8277
sg59
g63
sS'trial_loop.thisN'
p8278
I137
sg33
g6564
sg64
g65
sS'trial_loop.thisIndex'
p8279
g60
(g99
S'\x89\x00\x00\x00'
tRp8280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8281
I0
sg6380
g7584
sS'block_loop.thisRepN'
p8282
I2
sg6383
g6564
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8283
I2
sg6385
g6571
sg55
g11
sS'block_loop.thisTrial'
p8284
Nsg70
Vn
sS'block_loop.thisTrialN'
p8285
I0
sg39
F0.64972496534755919
sg34
g753
(S'\x07\xdf\x07\t\x11) \x00\x98X'
tRp8286
sa(dp8287
S'trial_loop.thisTrialN'
p8288
I138
sg6371
g6460
sS'block_loop.thisIndex'
p8289
g6365
sg38
S'right'
p8290
sg59
g63
sS'trial_loop.thisN'
p8291
I138
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8292
g60
(g99
S'\x8a\x00\x00\x00'
tRp8293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8294
I0
sg6380
g6467
sS'block_loop.thisRepN'
p8295
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8296
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8297
Nsg70
Vn
sS'block_loop.thisTrialN'
p8298
I0
sg39
F0.84991980175254866
sg34
g753
(S'\x07\xdf\x07\t\x11)%\x0b/H'
tRp8299
sa(dp8300
S'trial_loop.thisTrialN'
p8301
I139
sg6371
g6543
sS'block_loop.thisIndex'
p8302
g6365
sg38
S'right'
p8303
sg59
g63
sS'trial_loop.thisN'
p8304
I139
sg33
g6547
sg64
g65
sS'trial_loop.thisIndex'
p8305
g60
(g99
S'\x8b\x00\x00\x00'
tRp8306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8307
I0
sg6380
g6551
sS'block_loop.thisRepN'
p8308
I2
sg6383
g6547
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8309
I2
sg6385
g6554
sg55
g11
sS'block_loop.thisTrial'
p8310
Nsg70
Vn
sS'block_loop.thisTrialN'
p8311
I0
sg39
F0.98367981370392954
sg34
g753
(S'\x07\xdf\x07\t\x11)+\tbX'
tRp8312
sa(dp8313
S'trial_loop.thisTrialN'
p8314
I140
sg6371
g7022
sS'block_loop.thisIndex'
p8315
g6365
sg38
S'left'
p8316
sg59
g63
sS'trial_loop.thisN'
p8317
I140
sg33
g6764
sg64
g65
sS'trial_loop.thisIndex'
p8318
g60
(g99
S'\x8c\x00\x00\x00'
tRp8319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8320
I0
sg6380
g7029
sS'block_loop.thisRepN'
p8321
I2
sg6383
g6757
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8322
I2
sg6385
g6764
sg55
g11
sS'block_loop.thisTrial'
p8323
Nsg70
Vn
sS'block_loop.thisTrialN'
p8324
I0
sg39
F0.98328210110776126
sg34
g753
(S'\x07\xdf\x07\t\x11)1\ty\xc8'
tRp8325
sa(dp8326
S'trial_loop.thisTrialN'
p8327
I141
sg6371
g7791
sS'block_loop.thisIndex'
p8328
g6365
sg38
S'right'
p8329
sg59
g63
sS'trial_loop.thisN'
p8330
I141
sg33
g7114
sg64
g65
sS'trial_loop.thisIndex'
p8331
g60
(g99
S'\x8d\x00\x00\x00'
tRp8332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8333
I0
sg6380
g7798
sS'block_loop.thisRepN'
p8334
I2
sg6383
g7114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8335
I2
sg6385
g7108
sg55
g11
sS'block_loop.thisTrial'
p8336
Nsg70
Vn
sS'block_loop.thisTrialN'
p8337
I0
sg39
F1.2830992388444429
sg34
g753
(S'\x07\xdf\x07\t\x11)7\t\xcb\xd0'
tRp8338
sa(dp8339
S'trial_loop.thisTrialN'
p8340
I142
sg6371
g6577
sS'block_loop.thisIndex'
p8341
g6365
sg38
S'right'
p8342
sg59
g63
sS'trial_loop.thisN'
p8343
I142
sg33
g6503
sg64
g65
sS'trial_loop.thisIndex'
p8344
g60
(g99
S'\x8e\x00\x00\x00'
tRp8345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8346
I0
sg6380
g6584
sS'block_loop.thisRepN'
p8347
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8348
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p8349
Nsg70
Vn
sS'block_loop.thisTrialN'
p8350
I0
sg39
F1.0499937563399726
sg34
g753
(S'\x07\xdf\x07\t\x11*\x01\x0e\xa6\x00'
tRp8351
sa(dp8352
S'trial_loop.thisTrialN'
p8353
I143
sg6371
g7173
sS'block_loop.thisIndex'
p8354
g6365
sg38
S'left'
p8355
sg59
g63
sS'trial_loop.thisN'
p8356
I143
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8357
g60
(g99
S'\x8f\x00\x00\x00'
tRp8358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8359
I0
sg6380
g7180
sS'block_loop.thisRepN'
p8360
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8361
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8362
Nsg70
Vn
sS'block_loop.thisTrialN'
p8363
I0
sg39
F0.86667162738376646
sg34
g753
(S'\x07\xdf\x07\t\x11*\x08\x00\xab\xe0'
tRp8364
sa(dp8365
S'trial_loop.thisTrialN'
p8366
I144
sg6371
g6560
sS'block_loop.thisIndex'
p8367
g6365
sg38
S'left'
p8368
sg59
g63
sS'trial_loop.thisN'
p8369
I144
sg33
g6571
sg64
g65
sS'trial_loop.thisIndex'
p8370
g60
(g99
S'\x90\x00\x00\x00'
tRp8371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8372
I0
sg6380
g6568
sS'block_loop.thisRepN'
p8373
I2
sg6383
g6564
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8374
I2
sg6385
g6571
sg55
g11
sS'block_loop.thisTrial'
p8375
Nsg70
Vn
sS'block_loop.thisTrialN'
p8376
I0
sg39
F0.69975977589274407
sg34
g753
(S'\x07\xdf\x07\t\x11*\r\x0e[\xc8'
tRp8377
sa(dp8378
S'trial_loop.thisTrialN'
p8379
I145
sg6371
g7819
sS'block_loop.thisIndex'
p8380
g6365
sg38
S'left'
p8381
sg59
g63
sS'trial_loop.thisN'
p8382
I145
sg33
g6899
sg64
g65
sS'trial_loop.thisIndex'
p8383
g60
(g99
S'\x91\x00\x00\x00'
tRp8384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8385
I0
sg6380
g7826
sS'block_loop.thisRepN'
p8386
I2
sg6383
g6899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8387
I2
sg6385
g6906
sg55
g11
sS'block_loop.thisTrial'
p8388
Nsg70
Vn
sS'block_loop.thisTrialN'
p8389
I0
sg39
F1.0499333154293709
sg34
g753
(S'\x07\xdf\x07\t\x11*\x13\nh\x10'
tRp8390
sa(dp8391
S'trial_loop.thisTrialN'
p8392
I146
sg6371
g7791
sS'block_loop.thisIndex'
p8393
g6365
sg38
S'right'
p8394
sg59
g63
sS'trial_loop.thisN'
p8395
I146
sg33
g7114
sg64
g65
sS'trial_loop.thisIndex'
p8396
g60
(g99
S'\x92\x00\x00\x00'
tRp8397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8398
I0
sg6380
g7798
sS'block_loop.thisRepN'
p8399
I2
sg6383
g7114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8400
I2
sg6385
g7108
sg55
g11
sS'block_loop.thisTrial'
p8401
Nsg70
Vn
sS'block_loop.thisTrialN'
p8402
I0
sg39
F0.98321966450748732
sg34
g753
(S'\x07\xdf\x07\t\x11*\x19\x0b\xb00'
tRp8403
sa(dp8404
S'trial_loop.thisTrialN'
p8405
I147
sg6371
g7819
sS'block_loop.thisIndex'
p8406
g6365
sg38
S'left'
p8407
sg59
g63
sS'trial_loop.thisN'
p8408
I147
sg33
g6899
sg64
g65
sS'trial_loop.thisIndex'
p8409
g60
(g99
S'\x93\x00\x00\x00'
tRp8410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8411
I0
sg6380
g7826
sS'block_loop.thisRepN'
p8412
I2
sg6383
g6899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8413
I2
sg6385
g6906
sg55
g11
sS'block_loop.thisTrial'
p8414
Nsg70
Vn
sS'block_loop.thisTrialN'
p8415
I0
sg39
F0.64998526040290017
sg34
g753
(S'\x07\xdf\x07\t\x11*\x1f\x0b\xc7\xa0'
tRp8416
sa(dp8417
S'trial_loop.thisTrialN'
p8418
I148
sg6371
g6475
sS'block_loop.thisIndex'
p8419
g6365
sg38
S'left'
p8420
sg59
g63
sS'trial_loop.thisN'
p8421
I148
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p8422
g60
(g99
S'\x94\x00\x00\x00'
tRp8423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8424
I0
sg6380
g6483
sS'block_loop.thisRepN'
p8425
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8426
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p8427
Nsg70
Vn
sS'block_loop.thisTrialN'
p8428
I0
sg39
F1.1665483507313184
sg34
g753
(S'\x07\xdf\x07\t\x11*%\x07\x1cP'
tRp8429
sa(dp8430
S'trial_loop.thisTrialN'
p8431
I149
sg6371
g6426
sS'block_loop.thisIndex'
p8432
g6365
sg38
S'right'
p8433
sg59
g63
sS'trial_loop.thisN'
p8434
I149
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8435
g60
(g99
S'\x95\x00\x00\x00'
tRp8436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8437
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8438
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8439
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8440
Nsg70
Vn
sS'block_loop.thisTrialN'
p8441
I0
sg39
F0.78332703265186865
sg34
g753
(S'\x07\xdf\x07\t\x11*+\n\x0e8'
tRp8442
sa(dp8443
S'trial_loop.thisTrialN'
p8444
I150
sg6371
g6592
sS'block_loop.thisIndex'
p8445
g6365
sg38
S'left'
p8446
sg59
g63
sS'trial_loop.thisN'
p8447
I150
sg33
g6596
sg64
g65
sS'trial_loop.thisIndex'
p8448
g60
(g99
S'\x96\x00\x00\x00'
tRp8449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8450
I0
sg6380
g6600
sS'block_loop.thisRepN'
p8451
I2
sg6383
g6596
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8452
I2
sg6385
g6603
sg55
g11
sS'block_loop.thisTrial'
p8453
Nsg70
Vn
sS'block_loop.thisTrialN'
p8454
I0
sg39
F1.1170515213161707
sg34
g753
(S'\x07\xdf\x07\t\x11*1\x07K0'
tRp8455
sa(dp8456
S'trial_loop.thisTrialN'
p8457
I151
sg6371
g7577
sS'block_loop.thisIndex'
p8458
g6365
sg38
S'right'
p8459
sg59
g63
sS'trial_loop.thisN'
p8460
I151
sg33
g6564
sg64
g65
sS'trial_loop.thisIndex'
p8461
g60
(g99
S'\x97\x00\x00\x00'
tRp8462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8463
I0
sg6380
g7584
sS'block_loop.thisRepN'
p8464
I2
sg6383
g6564
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8465
I2
sg6385
g6571
sg55
g11
sS'block_loop.thisTrial'
p8466
Nsg70
Vn
sS'block_loop.thisTrialN'
p8467
I0
sg39
F0.71641381269000703
sg34
g753
(S'\x07\xdf\x07\t\x11*7\t\x85\x80'
tRp8468
sa(dp8469
S'trial_loop.thisTrialN'
p8470
I152
sg6371
g7104
sS'block_loop.thisIndex'
p8471
g6365
sg38
S'left'
p8472
sg59
g63
sS'trial_loop.thisN'
p8473
I152
sg33
g7114
sg64
g65
sS'trial_loop.thisIndex'
p8474
g60
(g99
S'\x98\x00\x00\x00'
tRp8475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8476
I0
sg6380
g7112
sS'block_loop.thisRepN'
p8477
I2
sg6383
g7114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8478
I2
sg6385
g7108
sg55
g11
sS'block_loop.thisTrial'
p8479
Nsg70
Vn
sS'block_loop.thisTrialN'
p8480
I0
sg39
F0.86664368771380396
sg34
g753
(S'\x07\xdf\x07\t\x11+\x01\x05\xd0H'
tRp8481
sa(dp8482
S'trial_loop.thisTrialN'
p8483
I153
sg6371
g7022
sS'block_loop.thisIndex'
p8484
g6365
sg38
S'left'
p8485
sg59
g63
sS'trial_loop.thisN'
p8486
I153
sg33
g6757
sg64
g65
sS'trial_loop.thisIndex'
p8487
g60
(g99
S'\x99\x00\x00\x00'
tRp8488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8489
I0
sg6380
g7029
sS'block_loop.thisRepN'
p8490
I2
sg6383
g6757
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8491
I2
sg6385
g6764
sg55
g11
sS'block_loop.thisTrial'
p8492
Nsg70
Vn
sS'block_loop.thisTrialN'
p8493
I0
sg39
F0.8333048234708258
sg34
g753
(S'\x07\xdf\x07\t\x11+\x07\x04=\xf0'
tRp8494
sa(dp8495
S'trial_loop.thisTrialN'
p8496
I154
sg6371
g6372
sS'block_loop.thisIndex'
p8497
g6365
sg38
S'left'
p8498
sg59
g63
sS'trial_loop.thisN'
p8499
I154
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8500
g60
(g99
S'\x9a\x00\x00\x00'
tRp8501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8502
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8503
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8504
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8505
Nsg70
Vn
sS'block_loop.thisTrialN'
p8506
I0
sg39
F0.64999980042921379
sg34
g753
(S'\x07\xdf\x07\t\x11+\r\x02.\x98'
tRp8507
sa(dp8508
S'trial_loop.thisTrialN'
p8509
I155
sg6371
g6526
sS'block_loop.thisIndex'
p8510
g6365
sg38
S'right'
p8511
sg59
g63
sS'trial_loop.thisN'
p8512
I155
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p8513
g60
(g99
S'\x9b\x00\x00\x00'
tRp8514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8515
I0
sg6380
g6534
sS'block_loop.thisRepN'
p8516
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8517
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p8518
Nsg70
Vn
sS'block_loop.thisTrialN'
p8519
I0
sg39
F0.91660266202234197
sg34
g753
(S'\x07\xdf\x07\t\x11+\x12\x0c\x8a\xf0'
tRp8520
sa(dp8521
S'trial_loop.thisTrialN'
p8522
I156
sg6371
g7104
sS'block_loop.thisIndex'
p8523
g6365
sg38
S'left'
p8524
sg59
g63
sS'trial_loop.thisN'
p8525
I156
sg33
g7114
sg64
g65
sS'trial_loop.thisIndex'
p8526
g60
(g99
S'\x9c\x00\x00\x00'
tRp8527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8528
I0
sg6380
g7112
sS'block_loop.thisRepN'
p8529
I2
sg6383
g7114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8530
I2
sg6385
g7108
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vn
sS'block_loop.thisTrialN'
p8532
I0
sg39
F0.69995307276258245
sg34
g753
(S'\x07\xdf\x07\t\x11+\x18\x0b\xea\xc8'
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g6895
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'right'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g6899
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g6903
sS'block_loop.thisRepN'
p8542
I2
sg6383
g6899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8543
I2
sg6385
g6906
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vn
sS'block_loop.thisTrialN'
p8545
I0
sg39
F1.1832234848297958
sg34
g753
(S'\x07\xdf\x07\t\x11+\x1e\x07\xb8\x90'
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g6940
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'right'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g6947
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8556
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vn
sS'block_loop.thisTrialN'
p8558
I0
sg39
F1.1500656582174997
sg34
g753
(S'\x07\xdf\x07\t\x11+$\x0b#\x90'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g6665
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'right'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g6519
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g6672
sS'block_loop.thisRepN'
p8568
I2
sg6383
g6519
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8569
I2
sg6385
g6513
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vn
sS'block_loop.thisTrialN'
p8571
I0
sg39
F1.7666564601349819
sg34
g753
(S'\x07\xdf\x07\t\x11+*\r\xda\xe0'
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g6609
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'left'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g6619
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g6617
sS'block_loop.thisRepN'
p8581
I2
sg6383
g6619
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8582
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vn
sS'block_loop.thisTrialN'
p8584
I0
sg39
F1.5000074125637184
sg34
g753
(S'\x07\xdf\x07\t\x11+1\n\xd5p'
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g7365
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'right'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g7274
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g7372
sS'block_loop.thisRepN'
p8594
I2
sg6383
g7274
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8595
I2
sg6385
g7281
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vn
sS'block_loop.thisTrialN'
p8597
I0
sg39
F1.6836702343898651
sg34
g753
(S'\x07\xdf\x07\t\x11+8\x03\xc0\xf0'
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g6925
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'left'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g6932
sS'block_loop.thisRepN'
p8607
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8608
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vn
sS'block_loop.thisTrialN'
p8610
I0
sg39
F0.70003118979002465
sg34
g753
(S'\x07\xdf\x07\t\x11,\x02\x0e\x8e\x90'
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g7445
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'left'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g7452
sS'block_loop.thisRepN'
p8620
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8621
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vn
sS'block_loop.thisTrialN'
p8623
I0
sg39
F1.0166719980115886
sg34
g753
(S'\x07\xdf\x07\t\x11,\x08\n\x9a\xd8'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g6443
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'right'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8634
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vn
sS'block_loop.thisTrialN'
p8636
I0
sg39
F1.2500015680416254
sg34
g753
(S'\x07\xdf\x07\t\x11,\x0e\x0bi\xe0'
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g6811
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'left'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g6819
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8647
I2
sg6385
g6815
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vn
sS'block_loop.thisTrialN'
p8649
I0
sg39
F0.66645426818286069
sg34
g753
(S'\x07\xdf\x07\t\x11,\x15\x00J8'
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g6543
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'right'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6547
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g6551
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6547
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8660
I2
sg6385
g6554
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vn
sS'block_loop.thisTrialN'
p8662
I0
sg39
F1.0165673668125237
sg34
g753
(S'\x07\xdf\x07\t\x11,\x1a\x0b\x1f\xa8'
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g7270
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'right'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g7274
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g7278
sS'block_loop.thisRepN'
p8672
I2
sg6383
g7274
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8673
I2
sg6385
g7281
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vn
sS'block_loop.thisTrialN'
p8675
I0
sg39
F0.93337330416034092
sg34
g753
(S'\x07\xdf\x07\t\x11, \x0b\xea\xc8'
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g6443
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'right'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8686
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vn
sS'block_loop.thisTrialN'
p8688
I0
sg39
F0.99997519642056432
sg34
g753
(S'\x07\xdf\x07\t\x11,&\x0bN\x88'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g6955
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'left'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g6962
sS'block_loop.thisRepN'
p8698
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8699
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vn
sS'block_loop.thisTrialN'
p8701
I0
sg39
F3.1666230465743865
sg34
g753
(S'\x07\xdf\x07\t\x11,,\x0b\xdf\x10'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g6738
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'left'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g6745
sS'block_loop.thisRepN'
p8711
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8712
I2
sg6385
g6691
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vn
sS'block_loop.thisTrialN'
p8714
I0
sg39
F0.79997707806978724
sg34
g753
(S'\x07\xdf\x07\t\x11,4\x0e\xff\xd8'
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g6592
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'left'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6603
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g6600
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6596
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8725
I2
sg6385
g6603
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vn
sS'block_loop.thisTrialN'
p8727
I0
sg39
F0.68326938571044593
sg34
g753
(S'\x07\xdf\x07\t\x11,:\x0c<\xd0'
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g7776
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'left'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g7211
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g7783
sS'block_loop.thisRepN'
p8737
I2
sg6383
g7211
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8738
I2
sg6385
g7205
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vn
sS'block_loop.thisTrialN'
p8740
I0
sg39
F0.84978894147934625
sg34
g753
(S'\x07\xdf\x07\t\x11-\x04\x08\n\x98'
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g7577
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'right'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6564
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g7584
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6564
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8751
I2
sg6385
g6571
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vn
sS'block_loop.thisTrialN'
p8753
I0
sg39
F0.59962828839707072
sg34
g753
(S'\x07\xdf\x07\t\x11-\n\x06=\xa8'
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g6697
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'right'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g6603
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g6704
sS'block_loop.thisRepN'
p8763
I2
sg6383
g6596
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8764
I2
sg6385
g6603
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vn
sS'block_loop.thisTrialN'
p8766
I0
sg39
F0.68333524349509389
sg34
g753
(S'\x07\xdf\x07\t\x11-\x10\x00\x9c@'
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g7819
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'left'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6899
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g7826
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8777
I2
sg6385
g6906
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vn
sS'block_loop.thisTrialN'
p8779
I0
sg39
F0.71657460831556818
sg34
g753
(S'\x07\xdf\x07\t\x11-\x15\x0b\xacH'
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g6426
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'right'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8789
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8790
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vn
sS'block_loop.thisTrialN'
p8792
I0
sg39
F2.0499344558229495
sg34
g753
(S'\x07\xdf\x07\t\x11-\x1b\x07\xb8\x90'
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g6475
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'left'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g6483
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8803
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vn
sS'block_loop.thisTrialN'
p8805
I0
sg39
F0.80034742119823932
sg34
g753
(S'\x07\xdf\x07\t\x11-"\x08\xfc\xc8'
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g6680
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'right'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g6688
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8816
I2
sg6385
g6691
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vn
sS'block_loop.thisTrialN'
p8818
I0
sg39
F0.9665770316569251
sg34
g753
(S'\x07\xdf\x07\t\x11-(\x06tX'
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g6925
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'left'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g6932
sS'block_loop.thisRepN'
p8828
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8829
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vn
sS'block_loop.thisTrialN'
p8831
I0
sg39
F0.98324589358162484
sg34
g753
(S'\x07\xdf\x07\t\x11-.\x06\x8b\xc8'
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g7089
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'left'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g7096
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8842
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vn
sS'block_loop.thisTrialN'
p8844
I0
sg39
F1.1498592468014976
sg34
g753
(S'\x07\xdf\x07\t\x11-4\x06\xa38'
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g6811
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'left'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g6819
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8855
I2
sg6385
g6815
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vn
sS'block_loop.thisTrialN'
p8857
I0
sg39
F2.1831459380009619
sg34
g753
(S'\x07\xdf\x07\t\x11-:\t\x95 '
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g7365
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'left'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g7274
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g7372
sS'block_loop.thisRepN'
p8867
I2
sg6383
g7274
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8868
I2
sg6385
g7281
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vn
sS'block_loop.thisTrialN'
p8870
I0
sg39
F1.2003382410221093
sg34
g753
(S'\x07\xdf\x07\t\x11.\x05\x0c\xc1\xa0'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g6738
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'left'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g6745
sS'block_loop.thisRepN'
p8880
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8881
I2
sg6385
g6691
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vn
sS'block_loop.thisTrialN'
p8883
I0
sg39
F0.73321153919459903
sg34
g753
(S'\x07\xdf\x07\t\x11.\x0c\x01(\xe0'
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g6867
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'left'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6547
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g6874
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6547
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8894
I2
sg6385
g6554
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vn
sS'block_loop.thisTrialN'
p8896
I0
sg39
F0.84997967246818007
sg34
g753
(S'\x07\xdf\x07\t\x11.\x11\x0c\xf0\x80'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g6811
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'left'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g6819
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8907
I2
sg6385
g6815
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vn
sS'block_loop.thisTrialN'
p8909
I0
sg39
F0.53323480324615957
sg34
g753
(S'\x07\xdf\x07\t\x11.\x17\x0b\x1f\xa8'
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g6460
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'right'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g6467
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8920
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vn
sS'block_loop.thisTrialN'
p8922
I0
sg39
F1.2333047664469632
sg34
g753
(S'\x07\xdf\x07\t\x11.\x1d\x04\x8c\x10'
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g7776
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'left'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g7211
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g7783
sS'block_loop.thisRepN'
p8932
I2
sg6383
g7211
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8933
I2
sg6385
g7205
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vn
sS'block_loop.thisTrialN'
p8935
I0
sg39
F0.98333427415855112
sg34
g753
(S'\x07\xdf\x07\t\x11.#\x08t\x10'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g6426
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'right'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8945
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8946
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vn
sS'block_loop.thisTrialN'
p8948
I0
sg39
F0.80027187005907763
sg34
g753
(S'\x07\xdf\x07\t\x11.)\x08\xc6\x18'
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g6577
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'right'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g6584
sS'block_loop.thisRepN'
p8958
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8959
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vn
sS'block_loop.thisTrialN'
p8961
I0
sg39
F0.93334907077587559
sg34
g753
(S'\x07\xdf\x07\t\x11./\x06A\x90'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g7776
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'left'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g7205
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g7783
sS'block_loop.thisRepN'
p8971
I2
sg6383
g7211
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8972
I2
sg6385
g7205
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vn
sS'block_loop.thisTrialN'
p8974
I0
sg39
F0.58335884966072626
sg34
g753
(S'\x07\xdf\x07\t\x11.5\x05\xa1h'
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g7022
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'left'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g6764
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g7029
sS'block_loop.thisRepN'
p8984
I2
sg6383
g6757
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8985
I2
sg6385
g6764
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vn
sS'block_loop.thisTrialN'
p8987
I0
sg39
F1.0333194775412267
sg34
g753
(S'\x07\xdf\x07\t\x11.:\x0f\x07\xa8'
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g6783
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'right'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6619
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g6790
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6619
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8998
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vn
sS'block_loop.thisTrialN'
p9000
I0
sg39
F1.0830951334246492
sg34
g753
(S'\x07\xdf\x07\t\x11/\x05\x00\xcf\x08'
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g6392
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'right'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g6400
sS'block_loop.thisRepN'
p9010
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9011
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vn
sS'block_loop.thisTrialN'
p9013
I0
sg39
F0.93333367544983048
sg34
g753
(S'\x07\xdf\x07\t\x11/\x0b\x02\x90@'
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g7089
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'left'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g7096
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9024
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vn
sS'block_loop.thisTrialN'
p9026
I0
sg39
F0.81702825726824813
sg34
g753
(S'\x07\xdf\x07\t\x11/\x11\x02.\x98'
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g6738
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'left'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g6745
sS'block_loop.thisRepN'
p9036
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9037
I2
sg6385
g6691
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vn
sS'block_loop.thisTrialN'
p9039
I0
sg39
F0.96662150704287342
sg34
g753
(S'\x07\xdf\x07\t\x11/\x16\x0f&\xe8'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g7104
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'left'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g7114
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g7112
sS'block_loop.thisRepN'
p9049
I2
sg6383
g7114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9050
I2
sg6385
g7108
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vn
sS'block_loop.thisTrialN'
p9052
I0
sg39
F0.74989323056070134
sg34
g753
(S'\x07\xdf\x07\t\x11/\x1c\x0f>X'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g7201
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'right'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g7211
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g7209
sS'block_loop.thisRepN'
p9062
I2
sg6383
g7211
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9063
I2
sg6385
g7205
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vn
sS'block_loop.thisTrialN'
p9065
I0
sg39
F1.1499008712016803
sg34
g753
(S'\x07\xdf\x07\t\x11/"\x0b\xc3\xb8'
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g6680
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'right'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g6688
sS'block_loop.thisRepN'
p9075
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9076
I2
sg6385
g6691
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vn
sS'block_loop.thisTrialN'
p9078
I0
sg39
F1.3499967783864122
sg34
g753
(S'\x07\xdf\x07\t\x11/(\x0e\xb9\x88'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g6492
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'left'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g6500
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9089
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vn
sS'block_loop.thisTrialN'
p9091
I0
sg39
F0.75037818334021722
sg34
g753
(S'\x07\xdf\x07\t\x11//\x05C\xa8'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vn
sa(dp9099
g64
g65
sg43
I141
sg56
g57
sg58
Vn
sg42
I459
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp9100
g64
g65
sg43
I141
sg55
g11
sg56
g57
sg45
F2.4300000000000002
sg42
I459
sg49
F0.01
sg58
Vn
sg59
g63
sg44
I00
sg48
I25
sg47
g651
sg51
F29.59
sg46
F0.69999999999999885
sg66
g67
sg68
g69
sg50
I0
sg70
Vn
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I213463376
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'\\\x8f\x82?{\x14.?\x8f\xc2u=\x8f\xc2u>\\\x8fB?)\\\x0f>\xecQ\xb8?\n\xd7\xa3>\xecQ8>333?\xecQ8>\xcd\xcc\xcc>\xb8\x1e\x85>\xaeGa>{\x14.?\xcd\xccL?\xb8\x1e\x85>R\xb8\x1e?\xecQ8?q=\n?\n\xd7\xa3=)\\\x0f?\xcd\xccL>\x00\x00\x80?)\\\x8f>\n\xd7#>\x8f\xc2u>\x14\xaeG?\x00\x00\x80?\x9a\x99\x99>=\n\xd7>\xc3\xf5(?\x8f\xc2u>\x8f\xc2u=\xaeGa>\\\x8f\x82?=\nW?\xaeGa>\x00\x00\x00\x00\x8f\xc2\xf5='
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S'\x98n\x8e@/\xddl@b\x100@\xa8\xc6[@\xc9vF@\xbaI\x04@w\xbeWA\xa8\xc6\x0b@\xa8\xc6\xfb?\xee|\xdf@\x87\x16A@1\x08\x90@b\x10\x00@+\x87\xe6?\xdb\xf9n@d;\x93@B`\xb5?\xdb\xf9>@\xbaID@\x96C\x13@\xc5 \xe0?/\xdd\\@\x96C\x13@j\xbc\x93AP\x8d\xf7?B`\x05@/\xdd\x0c@!\xb0\x82@\xdd$\xa2@\xa8\xc6\x1b@B`U@\x19\x04\x18A\xc9v6@\x1dZ\xe4?D\x8b\xb0@T\xe3]@h\x11\x07B\x1dZ\xc4?!\xb0Z@\xc5 \xc0?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80A\x00\x00\xa0@\x00\x00\xe0@\x00\x00\x0cB\x00\x00@A\x00\x00\xa8A\x00\x00 A\x00\x00\xa0A\x00\x00\x08B\x00\x00\x04B\x00\x00`A\x00\x00\x00B\x00\x00\xb8A\x00\x00\x90A\x00\x00\x80?\x00\x00\xb0A\x00\x00\xc0A\x00\x000A\x00\x00pA\x00\x00\x1cB\x00\x00\x18B\x00\x00\x80@\x00\x00\xf0A\x00\x00\xc0@\x00\x00\xc8A\x00\x00\xf8A\x00\x00\x10B\x00\x00\x00@\x00\x00PA\x00\x00@@\x00\x00\xe0A\x00\x00\x88A\x00\x00\xd0A\x00\x00\x00A\x00\x00\x14B\x00\x00\xe8A\x00\x00\x00\x00\x00\x00\x98A\x00\x00\x10A\x00\x00\xd8A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'ff\xe6?\xcd\xcc\xcc?\x00\x00\xc0?\x9a\x99\xd9?33\xf3?33\xf3?\x00\x00\x00@\x9a\x99\xd9?ff\xe6?33\xf3?ff\xe6?\xcd\xcc\x8c?33\xf3?\x00\x00\xc0?33\xb3?\x00\x00\xc0?\xcd\xcc\x8c?\x9a\x99\xd9?\xcd\xcc\x8c?ff\xa6?\xcd\xcc\xcc?\xcd\xcc\x8c?\x9a\x99\xd9?\xcd\xcc\xcc?ff\xa6?33\xf3?33\xf3?\x9a\x99\xd9?\xcd\xcc\x8c?ff\xa6?ff\xe6?\x00\x00\x80?\x9a\x99\xd9?\x00\x00\x80?\x9a\x99\xd9?ff\xa6?\xcd\xcc\x8c?33\xb3?\x9a\x99\x99?\xcd\xcc\x8c?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S'$\x00\x00\x00\x0e\x00\x00\x00\x1b\x00\x00\x00\x1d\x00\x00\x00\x15\x00\x00\x00\x01\x00\x00\x00\x17\x00\x00\x00\x02\x00\x00\x00!\x00\x00\x00&\x00\x00\x00\x06\x00\x00\x00\x11\x00\x00\x00\x04\x00\x00\x00\x1c\x00\x00\x00\n\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\r\x00\x00\x00%\x00\x00\x00\x07\x00\x00\x00\x05\x00\x00\x00\x0f\x00\x00\x00\x0c\x00\x00\x00\x10\x00\x00\x00\x18\x00\x00\x00 \x00\x00\x00\'\x00\x00\x00\x1e\x00\x00\x00#\x00\x00\x00\x16\x00\x00\x00\x19\x00\x00\x00\x0b\x00\x00\x00\t\x00\x00\x00\x08\x00\x00\x00\x03\x00\x00\x00\x1a\x00\x00\x00"\x00\x00\x00\x14\x00\x00\x00\x13\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g215
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g138
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g152
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g348
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g187
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g250
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g173
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g243
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g341
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g334
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g201
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g327
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g264
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g229
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g110
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g257
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g271
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g180
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g208
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g376
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g369
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g131
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g313
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g145
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g278
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g320
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g355
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g117
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g194
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g124
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g299
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g222
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g285
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g159
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g362
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g306
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g103
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g236
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g166
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g292
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I213463376
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'\x9a\x999@\x00\x00\xc0@\x9a\x99Y@\x00\x00\xc0@ff\x86@\x00\x00@@\x00\x00\xc0@ff\xa6@\x00\x00\xc0@\xcd\xcc\xac@ff\xb6@\x00\x00\xc0@\x00\x00\x80@\x00\x00\xc0@ff\xb6@\xcd\xcc\x9c@\x00\x00\xc0@\x9a\x99y@\x00\x00\xc0@\x9a\x99y@\xcd\xccL@\xcd\xcc,@\xcd\xcc\x9c@\x00\x00\xc0@\x00\x00\xb0@33\xa3@\x00\x00\xc0@33\xb3@\x00\x00\xb0@\xcd\xcc\xac@\xcd\xcc\x8c@ff\x86@\xcd\xcc\x9c@ff\x96@\x9a\x99Y@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xa0@\xcd\xcc\xac@\x00\x00\xa0@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S"\x82\xaa\x06A\x9a\xdf\xdd?\x1f\x11\tA'$\xa2?\x96\x8fH@o\xff\x17A\x92\xa7Y?\xb45S@\x87\x8f\x88?\x13\xbd\xbb?7\x9bi@\xbe\x8aY?\x8b\x9a\x81@\xce8\xf3?\xdb4C@\xf5g\xa6?\x90\xf0\xae?\x0e4\x93?B\xd1L?\xefJ\x14@F\x04\xd8@\xe3\x9b\xf9?\xab\xd0\x8c?^\x9dY?\xab\xc7;?\x07F\x84?\xe7\x9eY?\xb1\x0f\xb9@V\xce\x84@\x8f\xce\xcc?+\xa6Y?\xb3\x11Q@\n]\xd5?\x19\xce\xec?h\x12\x91?\xa7V\x95?j5\xb3?\x83\xe5.?\x8aYU?b\xb8*?"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'\x9a\x999@333@\x00\x00@@ffF@\x00\x00`@33S@33\x83@\x00\x00`@\x9a\x99\x89@\x00\x00\x80@33\x83@\x9a\x999@333@ff\x86@\xcd\xccL@\x9a\x99Y@\x00\x00`@333@\xcd\xccL@33\x83@\x00\x00`@fff@\x00\x00@@\xcd\xccl@\xcd\xccl@\xcd\xccl@33S@\x9a\x99Y@33s@ffF@\xcd\xccl@ff\x86@\xcd\xccl@fff@\x9a\x99Y@\x00\x00@@\x00\x00\x80@ffF@\xcd\xccl@\x9a\x999@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'@M\x1c\x05\x80\x16\xe4\x0c\x00\x1c\xe4\x0c\xe0\r\xa9\x04``\xa9\x04 `\xa9\x04\xc0D\xab\x04\xc0`\xa9\x04 c\xa9\x04@e\xa9\x04\x80a\xa9\x04\xa0\xd2\xab\x04`\x1d\xe4\x0c\xa0\x15\xe4\x0c`\x16\xe4\x0c@\x14\xe4\x0c`\xd5\xab\x04\xe0\x17\xe4\x0c\x00\x1d\xe4\x0c\xe0\x15\xe4\x0c\xc0\x16\xe4\x0c\x80\x17\xe4\x0c\xe0\x1b\xe4\x0c\xa0J\xe2\x0c\x00\x1b\xe4\x0c\x00H\xe2\x0c\xa0I\xe2\x0c\x80\xd3\xab\x04\xe0E\xe2\x0c\x80@\xe2\x0c\x00K\xe2\x0c\x00l\xaa\x04`J\xe2\x0c@h\xaa\x04`K\xe2\x0c\xc0\x0e\xa9\x04`M\x1c\x05\x80H\x1c\x05\x80G\x1c\x05\x00J\x1c\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'\x08\xac\x02Am\xe7{?P\x8dw?\x0e-\x82?\x83\xc0*?B`%@\x83\xc0j?^\xba\xf9?#\xdbY?\xe9&Q?\xbct3?\xf0\xa7&?\xbaI\x14@\xf0\xa7&?\xb6\xf3]?u\x93\xa8?\xb6\xf3\x1d?\x87\x16!@9\xb4H?\x1dZ\x84?u\x93\x08@\x83\xc0\xca?\xc9vv@P\x8d7?\xe9&\xb1?\x1dZD?\xdb\xf9\x8e?\xe9&\xb1?\xe9&Q?\xbaI\x04@B`\xf5?P\x8dw?^\xba\xf9?^\xba\x99?V\x0e\r?\xee|\x07@\xee|w@+\x87\xc6?u\x93\x88?\x91\xed\x8c?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I213463376
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S'(\xe7w\r\x18\xe8w\rx\xe7w\rP\xe7w\rP\xa6\\\r\xa0\xe7w\r\xc8\xe7w\r(\xe7w\r\x80\xa6\\\r\xa0\xe7w\rP\xa6\\\r\x80\xa6\\\r\xc8\xe7w\rx\xe7w\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S'\x88W\xdf\x04\xc0X\xdf\x04\xa0]\xdf\x04\x88T\xdf\x04\xc0U\xdf\x04\x00U\xdf\x04(T\xdf\x04\x90\xfe\xff\x04\xb0\xf9\xff\x04\xb0\xf0\xff\x04h\xff\xff\x04`\xf2\xff\x04\xf8\xf3\xff\x04\xe0\xf6\xff\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g767
sg83
g768
sg84
g772
sg85
g773
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g756
sg83
g778
sg84
g761
sg85
g782
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g787
sg83
g788
sg84
g792
sg85
g793
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g798
sg83
g799
sg84
g803
sg85
g804
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g809
sg83
g810
sg84
g814
sg85
g815
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g744
sg83
g820
sg84
g749
sg85
g824
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g829
sg83
g830
sg84
g834
sg85
g835
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g798
sg83
g840
sg84
g803
sg85
g844
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g787
sg83
g849
sg84
g792
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g829
sg83
g858
sg84
g834
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g809
sg83
g867
sg84
g814
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g767
sg83
g876
sg84
g772
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I213463376
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I213463376
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S'\xa0\xe7y\r@\xc4B\r\x88\xe6y\r`\xc1B\r\xb0\xe6y\rp\x7fy\rp\xf7y\r\x18\xe8y\r\xf0\xe7y\r@\xc4B\r@\xc5B\rp\x7fy\r\xb0\xe6y\r\xd8\xe6y\r\xb0\xe6y\r \x00z\rP\xf6y\r\xa0\xf7y\r\xa0\xc1B\r\x90\x00z\r\x00\xe7y\rp\x7fy\r@\xf7y\r`\xe6y\r\xb0\xf6y\r\x90\xe8y\r\xa0\xe7y\r\xe0\xf6y\r\xc0\xc6B\r \xf6y\r\xc8\x00z\rX\x00z\r\xc0\xc6B\r\x80\xf6y\r\xc0\xc6B\r`\xe6y\r\x00\xe7y\r\x80\xf6y\r8\x7fy\r\x80\xf6y\r`\xe6y\rp\x7fy\r\xb0\xf6y\r\x10\xf7y\r\xe0\xf6y\r\xd8\xe6y\rP\xe7y\r\xc0\xc3B\r\xe0\xf6y\r(\xe7y\r\xd8\xe6y\r\x18\xe8y\r\x10\xf7y\r\xd8\xe6y\r\xd0\xf7y\r(\xe7y\rp\x7fy\r`\xc1B\rh\xe8y\r(\xe7y\r\x88\xe6y\r\xa0\xf7y\r\xb0\xf6y\r \xf6y\r\xd8\xe6y\r\x10\xf7y\r\xa8\x7fy\r\x00\xf8y\r@\xc4B\rP\xf6y\r\x88\xe6y\rP\xe7y\r\xc0\xc6B\r8\x7fy\rP\xe7y\r\xa8\x7fy\rP\xf6y\r\x00\xe7y\rP\xe7y\r\xc8\x00z\r\xe0\xf6y\r\xb0\xf6y\r\xa8\x7fy\rP\xe7y\r@\xc4B\r\xb0\xf6y\r\xe0\xf6y\r8\x7fy\rP\xf6y\r\xc8\xe7y\r@\xf7y\r\xb0\xf6y\r\xe0\xf6y\r8\x7fy\r\xe0\xf6y\r\xb0\xf6y\r\xa0\xc1B\r \xf6y\r \x00z\r\xc0\xc6B\r\xb0\xe6y\r \xf6y\r\x10\xf7y\r\x88\xe6y\r\x10\xf7y\r8\x7fy\r(\xe7y\r \xf6y\r\x00\xe7y\r@\xe8y\r(\xe7y\r@\xf7y\r\xa0\xc1B\rP\xf6y\r\x88\xe6y\r@\xc4B\rP\xe7y\r\x10\xf7y\r\xa8\x7fy\r@\xc4B\r\xa0\xe7y\r \xf6y\r\x88\xe6y\r\x80\xf6y\rp\x7fy\r \xf6y\r(\xe7y\r\x00\xe7y\r@\xc4B\rh\xe8y\rP\xe7y\r\xc8\xe7y\r@\xc5B\r\xe0\xf6y\rP\xe7y\r\xd8\xe6y\rp\x7fy\r\xc0\xc6B\r\x90\x00z\rP\xf6y\rp\xf7y\r\xc0\xc3B\r\x80\xf6y\r@\xc5B\r`\xe6y\r\xb8\xe8y\r@\xc5B\r\xc0\xc3B\r0\xf8y\r\xb0\xe6y\r`\xc1B\r\xc8\x00z\rP\xf6y\r\xf0\xe7y\r\x00\xe7y\r\x88\xe6y\r\xe0\xf6y\r@\xf7y\rX\x00z\r(\xe7y\r\xc0\xc3B\r@\xc5B\r\x10\xf7y\r\xf0\xe7y\r\xa8\x7fy\r\xc0\xc3B\r\xd8\xe6y\r`\xe6y\r\x90\xe8y\r \x00z\r\xc0\xc3B\r@\xf7y\r\x00\xe7y\r@\xc5B\r\x10\xf7y\r@\xc5B\r\x10\xf7y\r\xa0\xf7y\r`\xe6y\r@\xc5B\rP\xe7y\r\xa8\x7fy\r\x00\xe7y\r@\xc5B\r\xb0\xf6y\r\xa0\xf7y\rP\xf6y\r`\xe6y\r\x80\xf6y\r \xf6y\r8\x7fy\r\x18\xe8y\r\xc0\xc3B\r\xd8\xe6y\r\xa8\x7fy\r`\xc1B\r\x90\xe8y\r\xa0\xc1B\r@\xc4B\r\x00\xe7y\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S'\xe0O\x1c\x05@\xacA\r\xc0\xe9\\\r\xc0\xeb\\\r@\xe5\\\r`\xe8\\\r`\xe9\\\r`\xeb\\\r`\xe6\\\r\xa0\xeb\\\r@\xea\\\r`\xea\\\r\xc0\xea\\\r\x00\xe1\\\r\xa0\xa3A\r I\x1c\x05\xa0\xec\\\r \xe8\\\r \xeb\\\r\xe0\xe7\\\r\xa0\xe7\\\r\x00\xec\\\r \xe9\\\r\x00\xe6\\\r\xe0\xea\\\r\xc0\xec\\\r\xa0\xd1D\r\xe0\x1eC\r\xc0\x1fC\r\x80\xa5A\r\x00\x1fC\r M\x1c\x05`\x1dC\r\x00|D\r\x80{D\r\x80zD\r@\x7fD\r\xc0{D\r\xc0|D\r@~D\r\x00{D\r wD\r`wD\r\xa0vD\r\x00zD\r\x00vD\r@vD\r`uD\r\x00~D\r\x00\x7fD\r\xc0yD\r\x80yD\r@zD\r\x80~D\r@xD\r\x80vD\r\xc0zD\r@{D\r\xc0wD\r\x00yD\r\xc0xD\r\x80xD\r\xe0vD\r\xc0}D\r\xa0pD\r\xe0pD\r@}D\r@yD\r\x00qD\r\x80}D\r\x80|D\r\xc0pD\r\xc0~D\r\x00}D\r@pD\r\x00xD\r\xc0uD\r qD\r\xa0\x1fC\r\x80pD\r\x80\x1fC\r\xe0I\xe2\x0c\xc0\xeeC\r\x00\xe3C\r\xc0\xe1C\r`\xeeC\r@\xefC\r \xefC\r`\xefC\r \xe2C\r\xe0\xe1C\r \xe3C\r\xe0\xefC\r\x00\xe2C\r\xc0\xefC\r\xa0\xefC\r \xeeC\r\x80\xe1C\r\xe0\xc5B\r\xe0\xeeC\r\xc0\xe2C\r \xe1C\r`\xe0C\r\x80\xe3C\r\x00\xefC\r\x80\xebC\r`\xe1C\r\xa0\xe3C\r`\xe2C\r\xa0\xeeC\r\x80\xefC\r\xa0\xe1C\r\x80\xe2C\r@\xe1C\r pD\r\xc0`\xaa\x04 k\xaa\x04@|D\r\xc0\xe3C\r`\xe3C\r\x00\xe4C\r\x80\xecC\r@\xe3C\r@\xeeC\r\xe0\xe3C\r@\xe2C\r`k\xaa\x04\xa0\xe2C\r\xe0\xe2C\r@\xa0A\r\x00\xea\\\r\x00\xee\\\r\xa0\xe9\\\r\xe0\xe9\\\r\xc0\xe7\\\r\xe0\xeb\\\r@\xec\\\r\xe0\xe5\\\r@\xeb\\\r\x80\xee\\\r\xe0\xec\\\r \xe6\\\r\xa0\xea\\\r@\xe0\\\r\x80\xea\\\r\x80\xe7\\\r\x00\xed\\\r@\xed\\\r\x00\xef\\\r\x80\xef\\\r\x00\xeb\\\r\xa0\xef\\\r\xc0\xed\\\r \xea\\\r \xee\\\r@\xef\\\r\x80\xeb\\\r`\xed\\\r\xc0\xee\\\r\xa0\xee\\\r\x80\xed\\\r`\xec\\\r\xe0\xef\\\r\xc0\xef\\\r\x00\xe1C\r`\xee\\\r \xec\\\r\x80d\xa9\x04@"\xc0\x1e "\xc0\x1e\xc0 \xc0\x1e@!\xc0\x1e\x00"\xc0\x1e\xe0 \xc0\x1e` \xc0\x1e\xc0!\xc0\x1e !\xc0\x1e`!\xc0\x1e\xc0"\xc0\x1e\x80 \xc0\x1e@ \xc0\x1e\x80#\xc0\x1e\xa0!\xc0\x1e\xe0"\xc0\x1e`#\xc0\x1e\x00#\xc0\x1e\xc0#\xc0\x1e\xe0#\xc0\x1e\x00$\xc0\x1e $\xc0\x1e #\xc0\x1e\xa0 \xc0\x1e \xe5\\\r \xe0\\\r\xc0\xe1\\\r\xe0\xe0\\\r\xa0\xe1\\\r@\xe8\\\r\xe0\xed\\\r \xef\\\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'\xd5\x92\xd9?\xb0+s?p\xee\xce?\xe1/\x93?\x9f?U?{\xf4\x1e@\x86\xbb\xbb?\xd5\x86\x98@\xdds\xb7?.2\xf3?\xa3N\xe4?}\xa9\n@\x9a\xf5\xbf?\x97\xe8\xce?\xd8\xcb]?\x1d\xa4\x99?\x80\x88\xe8?(\xff?@\x8f\xa7\x8a?\x13\xcd\x8c?%\xc7\xbb?\x89\x96\xb9?\xa7\xec??\x7fu\xb7?\x16\x101@\xc7/\xf3?\x1b\xbb\xbb?\x89vg@\x00C\x84?\xde\xba;@\xee|G@\n\xd9\xbd?\x063\x93?\xdd\xd9\xbd?\xc7x7?\xe2+Q?\xe1d\xc6?d\xedN@\xd8T\x15@\xab\x88\xa8?\xa5\xc8L?#3\x93?\xd1\xedn?\x8c "@\x17U\x95?\x12;\xd3?\xeb\xb9+@`\xdb\xfd?3d\xa6?\xa4!\x02@z\xb2\xaa?]!r@\x82\xa0Y?k_&?\x1d\xff\xff?\x90H3?\x99\x88\x88?\xf4w\xb7?\x83\x1f\xa2?\x81\xee\x8e?/\x81\xf7?\xdd\xa8\xea?\xefC\x84?\xf41\xab@4\xaf\n@\x85u\x17@QS%@\x16\xcc\xec?L\xd1|@\\\xcc\xac?>\xcb\xcc?\xd9\xba\x0b@\xfce\xa6?=8D?\x92A\xc4?\x01\x101@\xae2\x93?\xa6C\xa4?\xd3\xa9\xaa?:\xa8\xaa?\x02\x96Y?\xf9{7?6\xef\x8e?\xab~f?\xb5\xdd]?\x0c!\x82? \xf1n?U\x99\x99?\x14\xc1j?\xae\xfc\x9f?\xe7\x8f\xb9?\xcaf\xa6?\x93\x10\xb1?\x1e\xe2\r@`\x10\xb1?\xa6\x0e\xc1@\xc7>\x84?r\xdd\x9d?6\xac{?{\xac*?\xa5\xd5\x9d?TC4@\xab\xda\x9d?\x0bw\xd7?9S\x05@\x07\x10Q@\x89!\x12@\xfec\x06@-q\xa6?4H\x84?Xu\x97?\xef\xdc.?t3\x93?k\xd2,@\x9c\xb8\xbb?\xd3ff?\xf9\x81\xc8?\xeb\xba\xbb?\xea>\xb3?\x90\r\xf1?!\x86\x08@\xbce\xa6?\xd7\xcc\x8c?\xe2D\x04@\xf1\xee\xce?\xb2T\xb5?\x8f\xdc\xdd?\xe1 \x02@\xf1j&@92\x13@g#\x82?\xd0\x0f\x91?E\xcc\x8c?\xf8KD?9UU?\xc4\x1bb?1R\xb5?\xff\x10Q?9\x97Y?i\x11\x91?\x9d@\xa4?\x1a\xde\xfd?\x01\xaa:@m\xde\x9d?\x87\xean?}\xb8{?\x1a\xab\x8a?O\xb9{?D\x1c\xd1?\xbe\xca]?\x0cf\x06@%\x9a\xd9?\x13\xaa\xca?\xe52\xd3?d\xb7\x9b?\x17\x99\xd9?\x1a\xaa\x8a?\x96\xbbL?\xb9\x02o?U\xfe\xdf?\x1dzw?!\xba\xdb?\x9eED?\x96\x1c\xb1?#d&@\x98\x1db?\x19r\xb7?\xad\x11\xf1?\xf4\xb3\xea?a\x87\xe8?pB\xc4?\xabBU?A\xdd\xbd?\xaf\xb6\x8a?Vf\x86?e\xff??\xf6\x0f\x91?\xc3\xca\xac?\xb4\x84\xd7?\xbd\x989@Q\xff\xff?>\xa9\x8a@\n\x05\xa0?.\x99\t@\xbb!\x82?\x88\x1a\xa2?x\x97\xb9?r\xa5\xf9?FR\xb5?&2\x83@\xcc\xb5\xfb?\xe2D\xe4?\x87yf?Ik7?\x92\xdb\xfd?J\x89\x88?\x02\xcc,@\xdc7#@\xc5\x0e\xf1?]!2@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'\x08\xf3\xff\x048\xfc\xff\x04\x80V\xde\x04x[\xde\x04\xd8[\xde\x04\x08S\xde\x04\xe0Y\xde\x04@Q\xde\x04\x10W\xde\x04(W\xde\x04pZ\xde\x04@Z\xde\x04\x08V\xde\x04\xb0P\xde\x04\xc8Y\xde\x04\xe0V\xde\x04 _\xde\x04\xf8Y\xde\x04\xf0^\xde\x04\x08Y\xde\x04`[\xde\x04\xb0V\xde\x04XT\xde\x04\xb8]\xde\x04\xe0\\\xde\x04hP\xde\x04\xd8X\xde\x04\x88Z\xde\x04\x90R\xde\x04\xa8R\xde\x04`X\xde\x048P\xde\x04\x80S\xde\x04\x00U\xde\x04\x08\\\xde\x04@]\xde\x04\x80_\xde\x04\xc0R\xde\x04@W\xde\x04\xc0[\xde\x04\x00[\xde\x04\xb8Z\xde\x04\x90[\xde\x04P_\xde\x04\x08_\xde\x04\xe0S\xde\x04`^\xde\x04\xa8^\xde\x04\xf0R\xde\x04\x88Q\xde\x04\xf0X\xde\x040[\xde\x04\xc8_\xde\x048V\xde\x04\x10Z\xde\x04\x00R\xde\x04 Y\xde\x04\x00^\xde\x04PS\xde\x04\x98P\xde\x04(Z\xde\x04\xa0Q\xde\x04\xd8^\xde\x04\xe8]\xde\x04\xd0Q\xde\x04\x90^\xde\x04\xc8P\xde\x04\xe8T\xde\x04\x88]\xde\x04\x98\\\xde\x04XQ\xde\x04\xb8W\xde\x04\xb0_\xde\x04\xd0]\xde\x04\xc8\\\xde\x04\xd0Z\xde\x04\xe8Z\xde\x04\xc8V\xde\x04XZ\xde\x04\xc0^\xde\x04\xb0\\\xde\x04XW\xde\x04p]\xde\x04\xb0Y\xde\x04\xf8S\xde\x048_\xde\x04hV\xde\x04\x80Y\xde\x04X]\xde\x04\xb0S\xde\x04\xa0W\xde\x04\x80\\\xde\x04pT\xde\x04\xf8\\\xde\x04(Q\xde\x040X\xde\x04\x00X\xde\x04(]\xde\x04x^\xde\x04@T\xde\x04hY\xde\x040^\xde\x04\xc0NV\x02X\x07\xd2\x03 \x0c\xd2\x03pg\xdf\x04\x00h\xdf\x04xh\xdf\x04`n\xdf\x04\xc0n\xdf\x04\x18n\xdf\x048l\xdf\x04Hn\xdf\x04\xa8e\xdf\x04HR\xdf\x04\x18U\xdf\x04\xe0S\xdf\x04\x80Y\xdf\x04\xb8Z\xdf\x04\xb8T\xdf\x04PP\xdf\x04\x10T\xdf\x04@T\xdf\x04@Q\xdf\x048V\xdf\x04\xe0V\xdf\x04\xb8W\xdf\x04pZ\xdf\x04`[\xdf\x04\xa8R\xdf\x04\xd0Q\xdf\x04\x08_\xdf\x04\x80P\xdf\x04\xd0T\xdf\x04 V\xdf\x04\x08\xd6\xe6\x04`\xdb\xe6\x04h\xd9\xe6\x04 \xdc\xe6\x04\xe0_\xde\x04`R\xde\x04\xf8V\xde\x04HR\xde\x04\xb8T\xde\x04\xf0U\xde\x04\xc8S\xde\x04\x88W\xde\x04\xa0Z\xde\x04\xf8P\xde\x04\x90X\xde\x04\x18U\xde\x04xX\xde\x04\xd8R\xde\x04\xb8Q\xde\x04xR\xde\x040R\xde\x04\x18X\xde\x040U\xde\x04PP\xde\x048S\xde\x04\x18^\xde\x04hS\xde\x04HX\xde\x04\x80P\xde\x04\xd0W\xde\x04\x98V\xde\x04\x10Q\xde\x048\\\xde\x04\x88T\xde\x04 \\\xde\x04xU\xde\x04\xd0T\xde\x04pQ\xde\x04\xf0[\xde\x04 P\xde\x048Y\xde\x04\x98Y\xde\x04HU\xde\x04\x18[\xde\x04(T\xde\x04\x18R\xde\x04\xc0X\xde\x04\x10T\xde\x04\xc0U\xde\x04\xa0]\xde\x04`U\xde\x04\xa0T\xde\x04H[\xde\x04\x98S\xde\x04\xe8Q\xde\x04\xa8X\xde\x04\x90U\xde\x04 P\xdf\x04xU\xdf\x04\xe8T\xdf\x04\xa0Z\xdf\x04\xf0U\xdf\x04\x10W\xdf\x04\x88Q\xdf\x040R\xdf\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g920
sg895
g916
sg910
g927
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g960
sg895
g950
sg910
g954
sg904
g958
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g988
sg895
g984
sg910
g995
sg904
g992
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g1011
sg895
g1001
sg910
g1005
sg904
g1009
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g1028
sg895
g1018
sg910
g1022
sg904
g1026
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g920
sg895
g1048
sg910
g927
sg904
g1055
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g1067
sg895
g1063
sg910
g1074
sg904
g1071
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g988
sg895
g984
sg910
g995
sg904
g992
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g971
sg895
g1093
sg910
g978
sg904
g1100
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g1112
sg895
g1108
sg910
g1119
sg904
g1116
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g971
sg895
g1093
sg910
g978
sg904
g1100
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g988
sg895
g1138
sg910
g995
sg904
g1145
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g1157
sg895
g1153
sg910
g1164
sg904
g1161
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g1180
sg895
g1170
sg910
g1174
sg904
g1178
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g1197
sg895
g1187
sg910
g1191
sg904
g1195
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g1214
sg895
g1204
sg910
g1208
sg904
g1212
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g1225
sg895
g1221
sg910
g1232
sg904
g1229
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g988
sg895
g1138
sg910
g995
sg904
g1145
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g908
sg895
g1264
sg910
g900
sg904
g1271
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g1214
sg895
g1204
sg910
g1208
sg904
g1212
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g1302
sg895
g1292
sg910
g1296
sg904
g1300
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g1326
sg895
g1322
sg910
g1333
sg904
g1330
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g1197
sg895
g1339
sg910
g1191
sg904
g1346
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g1011
sg895
g1354
sg910
g1005
sg904
g1361
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g1379
sg895
g1369
sg910
g1373
sg904
g1377
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g1112
sg895
g1386
sg910
g1119
sg904
g1393
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g1197
sg895
g1187
sg910
g1191
sg904
g1195
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g1180
sg895
g1170
sg910
g1174
sg904
g1178
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g1197
sg895
g1339
sg910
g1191
sg904
g1346
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g908
sg895
g1264
sg910
g900
sg904
g1271
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g1225
sg895
g1221
sg910
g1232
sg904
g1229
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g1180
sg895
g1466
sg910
g1174
sg904
g1473
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g960
sg895
g950
sg910
g954
sg904
g958
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g1180
sg895
g1466
sg910
g1174
sg904
g1473
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g908
sg895
g1264
sg910
g900
sg904
g1271
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g988
sg895
g1138
sg910
g995
sg904
g1145
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g1214
sg895
g1533
sg910
g1208
sg904
g1540
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g1552
sg895
g1548
sg910
g1559
sg904
g1556
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g1326
sg895
g1565
sg910
g1333
sg904
g1572
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g1112
sg895
g1386
sg910
g1119
sg904
g1393
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g1597
sg895
g1593
sg910
g1604
sg904
g1601
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g1379
sg895
g1610
sg910
g1373
sg904
g1617
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g1326
sg895
g1322
sg910
g1333
sg904
g1330
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g1302
sg895
g1638
sg910
g1296
sg904
g1645
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g1112
sg895
g1386
sg910
g1119
sg904
g1393
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g1028
sg895
g1666
sg910
g1022
sg904
g1673
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g1552
sg895
g1681
sg910
g1559
sg904
g1688
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g1112
sg895
g1386
sg910
g1119
sg904
g1393
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g1225
sg895
g1709
sg910
g1232
sg904
g1716
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1302
sg895
g1292
sg910
g1296
sg904
g1300
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g988
sg895
g984
sg910
g995
sg904
g992
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g960
sg895
g950
sg910
g954
sg904
g958
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g1157
sg895
g1153
sg910
g1164
sg904
g1161
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g1302
sg895
g1638
sg910
g1296
sg904
g1645
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g937
sg895
g1789
sg910
g944
sg904
g1796
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g1180
sg895
g1170
sg910
g1174
sg904
g1178
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g1214
sg895
g1533
sg910
g1208
sg904
g1540
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g1011
sg895
g1354
sg910
g1005
sg904
g1361
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g1112
sg895
g1386
sg910
g1119
sg904
g1393
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g1552
sg895
g1681
sg910
g1559
sg904
g1688
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g1028
sg895
g1666
sg910
g1022
sg904
g1673
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g1326
sg895
g1565
sg910
g1333
sg904
g1572
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g920
sg895
g916
sg910
g927
sg904
g924
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g1157
sg895
g1908
sg910
g1164
sg904
g1915
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g1597
sg895
g1936
sg910
g1604
sg904
g1943
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g1197
sg895
g1187
sg910
g1191
sg904
g1195
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g960
sg895
g950
sg910
g954
sg904
g958
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g1597
sg895
g1936
sg910
g1604
sg904
g1943
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g1028
sg895
g1018
sg910
g1022
sg904
g1026
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g1157
sg895
g1153
sg910
g1164
sg904
g1161
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g1225
sg895
g1221
sg910
g1232
sg904
g1229
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g1597
sg895
g1593
sg910
g1604
sg904
g1601
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g1379
sg895
g1369
sg910
g1373
sg904
g1377
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g1326
sg895
g1565
sg910
g1333
sg904
g1572
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g1214
sg895
g1533
sg910
g1208
sg904
g1540
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g1028
sg895
g1018
sg910
g1022
sg904
g1026
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g1597
sg895
g1593
sg910
g1604
sg904
g1601
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g920
sg895
g1048
sg910
g927
sg904
g1055
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g1214
sg895
g1204
sg910
g1208
sg904
g1212
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g1326
sg895
g1565
sg910
g1333
sg904
g1572
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g960
sg895
g2146
sg910
g954
sg904
g2153
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g1157
sg895
g1153
sg910
g1164
sg904
g1161
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g920
sg895
g916
sg910
g927
sg904
g924
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g1214
sg895
g1204
sg910
g1208
sg904
g1212
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g1326
sg895
g1322
sg910
g1333
sg904
g1330
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g960
sg895
g2146
sg910
g954
sg904
g2153
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g1326
sg895
g1565
sg910
g1333
sg904
g1572
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g1214
sg895
g1204
sg910
g1208
sg904
g1212
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g1197
sg895
g1187
sg910
g1191
sg904
g1195
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g1011
sg895
g1001
sg910
g1005
sg904
g1009
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g988
sg895
g1138
sg910
g995
sg904
g1145
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g1197
sg895
g1339
sg910
g1191
sg904
g1346
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g971
sg895
g1093
sg910
g978
sg904
g1100
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g1011
sg895
g1001
sg910
g1005
sg904
g1009
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g1552
sg895
g1548
sg910
g1559
sg904
g1556
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g1552
sg895
g1548
sg910
g1559
sg904
g1556
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g960
sg895
g2146
sg910
g954
sg904
g2153
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g1302
sg895
g1638
sg910
g1296
sg904
g1645
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g1011
sg895
g1001
sg910
g1005
sg904
g1009
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g1225
sg895
g1221
sg910
g1232
sg904
g1229
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g1067
sg895
g1063
sg910
g1074
sg904
g1071
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g1302
sg895
g1292
sg910
g1296
sg904
g1300
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g1197
sg895
g1339
sg910
g1191
sg904
g1346
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g1157
sg895
g1153
sg910
g1164
sg904
g1161
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g920
sg895
g916
sg910
g927
sg904
g924
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g1597
sg895
g1936
sg910
g1604
sg904
g1943
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g1552
sg895
g1548
sg910
g1559
sg904
g1556
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g1028
sg895
g1666
sg910
g1022
sg904
g1673
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g920
sg895
g1048
sg910
g927
sg904
g1055
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g908
sg895
g1264
sg910
g900
sg904
g1271
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g1011
sg895
g1001
sg910
g1005
sg904
g1009
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g937
sg895
g1789
sg910
g944
sg904
g1796
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g1180
sg895
g1466
sg910
g1174
sg904
g1473
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g988
sg895
g984
sg910
g995
sg904
g992
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g1011
sg895
g1354
sg910
g1005
sg904
g1361
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g1302
sg895
g1638
sg910
g1296
sg904
g1645
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g1225
sg895
g1709
sg910
g1232
sg904
g1716
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g920
sg895
g916
sg910
g927
sg904
g924
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g1157
sg895
g1908
sg910
g1164
sg904
g1915
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g1597
sg895
g1593
sg910
g1604
sg904
g1601
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g920
sg895
g1048
sg910
g927
sg904
g1055
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g1067
sg895
g1063
sg910
g1074
sg904
g1071
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g1326
sg895
g1322
sg910
g1333
sg904
g1330
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1597
sg895
g1936
sg910
g1604
sg904
g1943
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g1112
sg895
g1108
sg910
g1119
sg904
g1116
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g988
sg895
g1138
sg910
g995
sg904
g1145
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g1197
sg895
g1339
sg910
g1191
sg904
g1346
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g1214
sg895
g1533
sg910
g1208
sg904
g1540
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g1157
sg895
g1908
sg910
g1164
sg904
g1915
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g1011
sg895
g1354
sg910
g1005
sg904
g1361
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g1379
sg895
g1610
sg910
g1373
sg904
g1617
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g1180
sg895
g1466
sg910
g1174
sg904
g1473
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g1067
sg895
g2876
sg910
g1074
sg904
g2883
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g1597
sg895
g1593
sg910
g1604
sg904
g1601
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g1067
sg895
g2876
sg910
g1074
sg904
g2883
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g1379
sg895
g1369
sg910
g1373
sg904
g1377
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g1552
sg895
g1681
sg910
g1559
sg904
g1688
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g971
sg895
g1093
sg910
g978
sg904
g1100
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g960
sg895
g2146
sg910
g954
sg904
g2153
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g1379
sg895
g1369
sg910
g1373
sg904
g1377
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g1157
sg895
g1908
sg910
g1164
sg904
g1915
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g937
sg895
g1789
sg910
g944
sg904
g1796
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g1225
sg895
g1709
sg910
g1232
sg904
g1716
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g937
sg895
g1789
sg910
g944
sg904
g1796
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g1326
sg895
g1322
sg910
g1333
sg904
g1330
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g1112
sg895
g1108
sg910
g1119
sg904
g1116
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g1302
sg895
g1292
sg910
g1296
sg904
g1300
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g1379
sg895
g1610
sg910
g1373
sg904
g1617
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g1067
sg895
g1063
sg910
g1074
sg904
g1071
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g1552
sg895
g1681
sg910
g1559
sg904
g1688
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g937
sg895
g1789
sg910
g944
sg904
g1796
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g1028
sg895
g1018
sg910
g1022
sg904
g1026
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g1379
sg895
g1610
sg910
g1373
sg904
g1617
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g1112
sg895
g1108
sg910
g1119
sg904
g1116
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g1302
sg895
g1638
sg910
g1296
sg904
g1645
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g988
sg895
g984
sg910
g995
sg904
g992
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g1379
sg895
g1369
sg910
g1373
sg904
g1377
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g971
sg895
g1093
sg910
g978
sg904
g1100
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g1225
sg895
g1709
sg910
g1232
sg904
g1716
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g1067
sg895
g2876
sg910
g1074
sg904
g2883
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g1552
sg895
g1548
sg910
g1559
sg904
g1556
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g1067
sg895
g2876
sg910
g1074
sg904
g2883
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g1552
sg895
g1681
sg910
g1559
sg904
g1688
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g1180
sg895
g1170
sg910
g1174
sg904
g1178
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g1067
sg895
g1063
sg910
g1074
sg904
g1071
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g1597
sg895
g1936
sg910
g1604
sg904
g1943
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g1028
sg895
g1018
sg910
g1022
sg904
g1026
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g1225
sg895
g1709
sg910
g1232
sg904
g1716
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g1067
sg895
g2876
sg910
g1074
sg904
g2883
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g1214
sg895
g1533
sg910
g1208
sg904
g1540
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g1180
sg895
g1170
sg910
g1174
sg904
g1178
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g1157
sg895
g1908
sg910
g1164
sg904
g1915
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g908
sg895
g1264
sg910
g900
sg904
g1271
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g1180
sg895
g1466
sg910
g1174
sg904
g1473
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g1011
sg895
g1354
sg910
g1005
sg904
g1361
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g960
sg895
g950
sg910
g954
sg904
g958
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g1028
sg895
g1666
sg910
g1022
sg904
g1673
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g1379
sg895
g1610
sg910
g1373
sg904
g1617
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g1112
sg895
g1108
sg910
g1119
sg904
g1116
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g1028
sg895
g1666
sg910
g1022
sg904
g1673
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g960
sg895
g2146
sg910
g954
sg904
g2153
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g1302
sg895
g1292
sg910
g1296
sg904
g1300
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g1197
sg895
g1187
sg910
g1191
sg904
g1195
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g920
sg895
g1048
sg910
g927
sg904
g1055
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g1225
sg895
g1221
sg910
g1232
sg904
g1229
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I213463376
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S"\x104\xc8\x1e\xa0,\xe3\x0c('\xe3\x0c\x00\xe8C\r@4\xc8\x1e\xf0,\xe3\x0cp4\xc8\x1e\xf0{\xe3\x0c`5\xc8\x1e\x104\xc8\x1e(|\xe3\x0c\x104\xc8\x1eX.\xe3\x0c\xa04\xc8\x1eH/\xe3\x0c\xc0/\xe3\x0c\x98/\xe3\x0c\x08)\xe3\x0c('\xe3\x0c\xd04\xc8\x1e(|\xe3\x0c\x00\xe7C\r\x005\xc8\x1e\x104\xc8\x1eh(\xe3\x0cX.\xe3\x0c\xe0\xe4C\r\x104\xc8\x1e\x00\xe8C\r@\xe6C\r\x00\xe8C\r\xa0,\xe3\x0c\x08)\xe3\x0c\x98/\xe3\x0c\xa04\xc8\x1e(|\xe3\x0c@4\xc8\x1ep4\xc8\x1e\x00\xe7C\r`|\xe3\x0c\xc0\xe8C\r\xf0{\xe3\x0cp4\xc8\x1eX.\xe3\x0c('\xe3\x0ch(\xe3\x0c`|\xe3\x0c 6\xc8\x1e\xc0/\xe3\x0c\x00\xe8C\r05\xc8\x1e\x905\xc8\x1e\xc0/\xe3\x0c\xf0{\xe3\x0c`|\xe3\x0c\xa04\xc8\x1e\xc0/\xe3\x0c(|\xe3\x0c@(\xe3\x0c@}\xe3\x0c\xa0,\xe3\x0c`|\xe3\x0c@\xe6C\r\x00\xe7C\r`5\xc8\x1e\xf0{\xe3\x0c\xc0/\xe3\x0c\x08)\xe3\x0cX.\xe3\x0cp4\xc8\x1e\xa0,\xe3\x0c\x98/\xe3\x0c`|\xe3\x0c\x00\xe7C\r@\xe6C\r\xf0{\xe3\x0c\xc0\xe8C\r\xf0{\xe3\x0c\xd04\xc8\x1e@}\xe3\x0cH*\xe3\x0cH/\xe3\x0c@-\xe3\x0c\xc0/\xe3\x0c\x08)\xe3\x0c\x00\xe7C\r`|\xe3\x0c(|\xe3\x0c\x08}\xe3\x0c\x98/\xe3\x0cX.\xe3\x0c\x104\xc8\x1e@4\xc8\x1e\x00\xe8C\r\xa04\xc8\x1ep4\xc8\x1e\xa04\xc8\x1e(|\xe3\x0cp4\xc8\x1e@4\xc8\x1eX.\xe3\x0c('\xe3\x0c\xa04\xc8\x1e`5\xc8\x1eH/\xe3\x0c\xc0\xe8C\r('\xe3\x0c\xd04\xc8\x1e\xe0\xe4C\r`|\xe3\x0c\x00\xe8C\r`|\xe3\x0c\xc0\xe8C\r\xf05\xc8\x1e@(\xe3\x0c\xc0\xe8C\r`|\xe3\x0c 6\xc8\x1e\x905\xc8\x1e\xc0/\xe3\x0c\x005\xc8\x1e`|\xe3\x0c@4\xc8\x1e\xf05\xc8\x1e\x00\xe7C\r@\xe6C\r\x08}\xe3\x0c\xa04\xc8\x1e\x005\xc8\x1e\x98/\xe3\x0c\x00\xe8C\r\x98/\xe3\x0c@4\xc8\x1ex,\xe3\x0c\x005\xc8\x1e\xc0/\xe3\x0c\x005\xc8\x1e\x98/\xe3\x0c\x08)\xe3\x0cp4\xc8\x1e\x98/\xe3\x0cp4\xc8\x1e('\xe3\x0c\xa0,\xe3\x0cX.\xe3\x0c\xa0,\xe3\x0c(|\xe3\x0cH/\xe3\x0c\x104\xc8\x1eH/\xe3\x0c@\xe6C\r\xd04\xc8\x1e\xc0/\xe3\x0c@\xe6C\r\xf0{\xe3\x0cx,\xe3\x0c\x00\xe8C\r\x104\xc8\x1e\xc0\xe8C\r\xd04\xc8\x1e\x005\xc8\x1e\xa0,\xe3\x0c\x98/\xe3\x0c\xf0,\xe3\x0c\xd04\xc8\x1e\xe0\xe4C\r\xa04\xc8\x1eH/\xe3\x0c\x08}\xe3\x0c\xa0,\xe3\x0cX.\xe3\x0c\x00\xe8C\r\x00\xe7C\r\x98/\xe3\x0c\x08)\xe3\x0c@4\xc8\x1e@(\xe3\x0cp4\xc8\x1e\x08)\xe3\x0c(|\xe3\x0cH*\xe3\x0cH/\xe3\x0c\x104\xc8\x1e('\xe3\x0c\xa04\xc8\x1e(|\xe3\x0c@\xe6C\r@}\xe3\x0c\x00\xe8C\r('\xe3\x0cH*\xe3\x0cH/\xe3\x0c\x005\xc8\x1e(|\xe3\x0c\xc0/\xe3\x0c\x005\xc8\x1eH*\xe3\x0c@\xe6C\r\xd04\xc8\x1e\xa04\xc8\x1e"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S"\x00'\xc0\x1e`'\xc0\x1e\xc0&\xc0\x1e\xc0%\xc0\x1e\xa0&\xc0\x1e\xe0'\xc0\x1e`&\xc0\x1e\x80(\xc0\x1e\xc0'\xc0\x1e\xe0(\xc0\x1e\xa0'\xc0\x1e\x00(\xc0\x1e@(\xc0\x1e\xe0%\xc0\x1e\xa0%\xc0\x1e@'\xc0\x1e@&\xc0\x1e\x80%\xc0\x1e\x80'\xc0\x1e`)\xc0\x1e`(\xc0\x1e\x00*\xc0\x1e`%\xc0\x1e *\xc0\x1e\xe0&\xc0\x1e '\xc0\x1e\xa0*\xc0\x1e\x00)\xc0\x1e\xa0)\xc0\x1e\xe0)\xc0\x1e &\xc0\x1e (\xc0\x1e@+\xc0\x1e\xa0(\xc0\x1e +\xc0\x1e\xc0*\xc0\x1e`+\xc0\x1e\x80&\xc0\x1e )\xc0\x1e\x80)\xc0\x1e\xa0+\xc0\x1e`*\xc0\x1e\x00+\xc0\x1e\xc0+\xc0\x1e\xe0,\xc0\x1e\x80,\xc0\x1e@*\xc0\x1e\x80*\xc0\x1e@)\xc0\x1e`-\xc0\x1e\xc0)\xc0\x1e@-\xc0\x1e\x00-\xc0\x1e\x00.\xc0\x1e`,\xc0\x1e\xc0,\xc0\x1e\xa0,\xc0\x1e\xc0-\xc0\x1e@,\xc0\x1e\x80+\xc0\x1e@.\xc0\x1e\xe0.\xc0\x1e\x00&\xc0\x1e ,\xc0\x1e -\xc0\x1e`/\xc0\x1e\x80.\xc0\x1e\xa0-\xc0\x1e\xe0*\xc0\x1e\xc0(\xc0\x1e\xc0/\xc0\x1e`.\xc0\x1e\xe0/\xc0\x1e\xa0.\xc0\x1e .\xc0\x1e\x80/\xc0\x1e\xa0/\xc0\x1e@/\xc0\x1e\x80-\xc0\x1e\x00,\xc0\x1e\xe0+\xc0\x1e\xe0-\xc0\x1e@\xe1\\\r\xc0\xe8\\\r@\xd2\xe6\x1e \xd2\xe6\x1e\xc0\xd0\xe6\x1e@\xd1\xe6\x1e\x00\xd2\xe6\x1e\xe0\xd0\xe6\x1e \xd0\xe6\x1e\xc0\xd2\xe6\x1e@\xd0\xe6\x1e\xc0\xd1\xe6\x1e\xa0\xd2\xe6\x1e\xe0\xd2\xe6\x1e`\xd2\xe6\x1e \xd3\xe6\x1e@\xd3\xe6\x1e \xd1\xe6\x1e\x00\xe8\\\r\xa0\xd0\xe6\x1e\x80\xd1\xe6\x1e`\xd3\xe6\x1e\xc0\xd3\xe6\x1e\x00\xd4\xe6\x1e\x80\xd0\xe6\x1e\x80\xd2\xe6\x1e\xa0\xd3\xe6\x1e\xc0\xd4\xe6\x1e`\xd4\xe6\x1e\xa0\xd1\xe6\x1e \xd5\xe6\x1e@\xd5\xe6\x1e\x00\xd5\xe6\x1e\x80\xd5\xe6\x1e\xe0\xd3\xe6\x1e\xa0\xd5\xe6\x1e\x00\xd3\xe6\x1e\xe0\xd4\xe6\x1e`\xd6\xe6\x1e`\xd1\xe6\x1e\x00\xd1\xe6\x1e\xc0\xd6\xe6\x1e@\xd4\xe6\x1e\x80\xd6\xe6\x1e\xe0\xd5\xe6\x1e`\xd7\xe6\x1e\xe0\xd1\xe6\x1e`\xd0\xe6\x1e \xd6\xe6\x1e \xd7\xe6\x1e\x00\xd8\xe6\x1e\x80\xd3\xe6\x1e\xe0\xd7\xe6\x1e\x00\xd6\xe6\x1e@\xd8\xe6\x1e\xe0\xd6\xe6\x1e\xa0\xd4\xe6\x1e\xc0\xd8\xe6\x1e\xa0\xd8\xe6\x1e \xd9\xe6\x1e\xc0\xd7\xe6\x1e\xa0\xd7\xe6\x1e@\xd6\xe6\x1e\xa0\xd6\xe6\x1e\xc0\xd9\xe6\x1e\x00\xd9\xe6\x1e@\xd9\xe6\x1e\xe0\xd8\xe6\x1e\x80\xd4\xe6\x1e \xd4\xe6\x1e \xda\xe6\x1e`\xd8\xe6\x1e\xc0\xd5\xe6\x1e`\xd5\xe6\x1e\xe0\xd9\xe6\x1e\x80\xd8\xe6\x1e\x00\xd7\xe6\x1e\xa0\xd9\xe6\x1e\x00\xdb\xe6\x1e\x80\xda\xe6\x1e@\xda\xe6\x1e@\xdb\xe6\x1e \xdb\xe6\x1e\xc0\xdb\xe6\x1e`\xdb\xe6\x1e\xe0\xdb\xe6\x1e \xdc\xe6\x1e\xa0\xda\xe6\x1e\xa0\xdb\xe6\x1e\xe0\xdc\xe6\x1e`\xdc\xe6\x1e\x80\xdc\xe6\x1e\x00\xda\xe6\x1e\xc0\xdc\xe6\x1e`\xd9\xe6\x1e\xa0\xdd\xe6\x1e\x00\xdd\xe6\x1e`\xda\xe6\x1e@\xdd\xe6\x1e`\xdd\xe6\x1e\x80\xdb\xe6\x1e\x00\xdc\xe6\x1e \xde\xe6\x1e\xa0\xdc\xe6\x1e \xdd\xe6\x1e\xc0\xda\xe6\x1e\x80\xdd\xe6\x1e@\xd7\xe6\x1e\xc0\xde\xe6\x1e`\xdf\xe6\x1e@\xdc\xe6\x1e\x00\xdf\xe6\x1e \xdf\xe6\x1e\xc0.\xc0\x1e@\xde\xe6\x1e\xe0\xda\xe6\x1e@\xdf\xe6\x1e \xd8\xe6\x1e"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S'\xfb\xcbL@r\x10\xd1?\xfaT\x95?IVU?\xa2T\x15?\x15\x86H?k\xa5*?\xc1,s?\xdb/\xb3?\xd4p\xb7?`\xd9\xcc?\xfb?\xc4?\x1e\x0c"?\x07/\xd3?}KU?1&"@U+s?}v\xb7?\xd3\r\xb1?\x90ff?$of?\xd5E\x84?\x0ec\x86?Z\x99Y?\xd4\xdb\x9d?W\xcc\x1d?CA\x84?\xa1\xaa*?\x1b.3?\xa3\xaaj?jff?\x17*\x82?\x1aP\xd5?\xab\xb4;?a\x1e\xe2?\x8d\nQ?;\xb0\n@i\xd8\x1d?\xf5\xb3;?\x86\x85H?\xbe\xdd\x9d?\xba\xfc\x9f?\xe1\xc3\x9b?8S&?\xe0e\x06@\xf7sw?O\nQ?\xcc\xba;?=0\xb3? ef?\xb8\xa9\n@[\xa8;?\x94\xa4H?\x1bV\xb5?\xdaT\xb5?\x8f\xa7\x8a?\x8bC\x84?=-\x82?ne\xc6?\xfcsw?+\x0bQ?\xe6r\xb7?:xw?\x13\xcb\x8c?,1s@4\x95Y?VS\x95?k\x1b\xe2?8\xc5\x1d?r\x10\x91?t\xca\xac?\\\x85\xa8?\xe1\xd0;?\xef\xcdL?\xd2\xe7n?\x9e\xcbL?\x7fww?9\xff??-F\xc4?\xf2C\x84?\xe7\xdc\xdd?\xfe2\xb3?\xf7\xebn?\x1b\xd9\x8c?S\xdd\x9d?\x98\xbd\x9b?\xdbS\x95?\xe1\x85\x88?\x17\r@?k\x1eb?\xe6*\x93?W2\xb3?\x83\xcb\x0c@<\t/?\x12\x0f\x01@\x1e\x98Y?\xdcC\x84?\x0cC\x84?@)Q?\xdds\xb7?\x07\x04"?\x9b\x00@?!\xee\x8e?\xbd\xf9\xae?\xdc\xee\x8e?\xd6w\x97?Fww?\xd2T\x15@\xe5\xc6\xbb?\xab\x0f\xb1?\x15\x86\x88?\x95\xd9\x8c?K\x1bQ?I\x1d\xb1?+\x10\x11@\x90\x84\x88?\xe1"\x82?@\xee\x8e?l\x94j?|\xcd\x8c?V\xbc{?\xbd\x0f\x91?\xac2#@K~f?\x08\x11\xb1?j\x1e\xc2?\xbf\xcc\x8c?\xb3S%@\xdc\x93\xa8?\x1c\x95\x99?CB\x84?\x96\xa1\xaa?\x910\xd3?\x9c\xbd\x8a?@\x87\x08@\xfd\xb5\x9b?\xf8\xd9]?\xf7?\x84?\xdeN\xe4?Dpw?\xabFU?^\xefn?uRU?\xef/\x93?\xcd\xbcL?L\x99Y?\xe02\x93?\x19!\xa2?\x11\xfa\x8e?\xe3\xccL?b\xee.@\x05\x88\xc8?\xaa3s?:e\xa6?\xd2\x91Y?5\xbc{?U\xb9\x9b?\xf4w7?\xf9@\x84?\xebIs?\x1a"\x82?\xd1\xa9j?\xb6\xa7\x8a?7\xb5\xaa?\xd9\x98\xd9?\xe2\x98\x99?\x16\xda\xbd?@1\x93?_(Q?\x07\xcb\x8c?\xb9\xcb\x1d?\xa2\x0fQ?v3s?\n\x82\x88?\xc1\xbc\x9b?\xc3\x97Y@\xbe\xce\xec?_\x99\x99?\xa8\x0f\xb1?\\\x1c\xd1?\xf7\xefn?\xf9C\x84? \xbe\x9b?R"\xa2?\x1d\x0b\xa0?n\xaa\xca?\xb8\xee\x8e?\x16\x98\xb9?\x82,s?\xc6q\xa6?\x90\xaaj?\xb2\xaaj?\xe0""?\xc8\xcdL?\xd0\xf2.?\xa8\x12"?\x02\xc9\x8c?\xd2SU?\xe0\x10\xd1?\xce\xb0j?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S'\x08i\xdf\x048`\xdf\x04\xc8\xf0\xff\x04H\xfe\xff\x04@\xfa\xff\x04\x18\xf5\xff\x04\xb8\xfa\xff\x04@\xf4\xff\x04\x08\xf6\xff\x04\x80\xf0\xff\x04x\xfb\xff\x04\xe0\xff\xff\x04\x00\xfe\xff\x048\xf6\xff\x04\xc0\xfe\xff\x04\x10\xfa\xff\x04h\xf6\xff\x04\x18\xf2\xff\x04\xe0\xfc\xff\x04H\xf8\xff\x04P\xf9\xff\x04\xb8\xf4\xff\x04\x10\xf7\xff\x04\xa8\xf2\xff\x04\xd0\xfd\xff\x04\x18\xfe\xff\x04\xa0\xf1\xff\x040\xf8\xff\x04\xa8\xfb\xff\x04P\xf6\xff\x04x\xfe\xff\x04\xd0\xf7\xff\x04(\xfa\xff\x04\xf8\xfc\xff\x04\x18\xfb\xff\x04h\xfc\xff\x04\xd0\xf4\xff\x048\xf3\xff\x04p\xf4\xff\x04\x10\xfd\xff\x04\xc8\xfc\xff\x04`\xfe\xff\x040\xfe\xff\x04\x90\xf8\xff\x04\xb0\xf6\xff\x04\x80\xfc\xff\x04X\xf4\xff\x04`\xf8\xff\x04\xb8\xf7\xff\x04\xa0\xf7\xff\x04\xc0\xf8\xff\x04\xf8\xf0\xff\x04(\xfd\xff\x04\xb0\xfc\xff\x04\xf0\xf8\xff\x04\xd0\xf1\xff\x04\xb8\xf1\xff\x04\x00\xf5\xff\x04\x18\xdb\xe6\x04\x88\xd7\xe6\x04\x18\xd2\xe6\x04\xe8\xda\xe6\x04H\xd8\xe6\x04\x08\xd9\xe6\x04X\xdd\xe6\x04\x80\xdc\xe6\x04\x90\xd5\xe6\x048\xdc\xe6\x04\xf0\xd5\xe6\x04@\xd4\xe6\x04\xe0\xd9\xe6\x04\xc0\xdb\xe6\x04X\xd1\xe6\x040\xdb\xe6\x04x\xd8\xe6\x04\xb0\xdf\xe6\x04\x10\xdd\xe6\x04\xd0\xda\xe6\x04\xc8\xd9\xe6\x04\xa0\xd1\xe6\x04\x10\xd1\xe6\x04\xb8\xd7\xe6\x04\xf0\xd8\xe6\x04\x10\xd4\xe6\x04\xf8\xd3\xe6\x04\x90\xd8\xe6\x04\xa0\xd7\xe6\x04(\xd4\xe6\x04\xd8\xdb\xe6\x04\xa8\xdb\xe6\x04\x18\xde\xe6\x04\x98\xd9\xe6\x04\x90\xd2\xe6\x04\x98\xd3\xe6\x04\xf0\xd2\xe6\x04\xc0\xde\xe6\x04X\xd7\xe6\x04X\xda\xe6\x04p\xd4\xe6\x04\xa0\xda\xe6\x04h\xd6\xe6\x04\xb0\xd6\xe6\x04\xa0\xd4\xe6\x04\x00\xd5\xe6\x04H\xd5\xe6\x04\x00\xd8\xe6\x04\xf0\xdb\xe6\x040\xd8\xe6\x04P\xd3\xe6\x04\xb0\xdc\xe6\x04\xc8\xdf\xe6\x04\xf8\xdc\xe6\x04\xb8\xd4\xe6\x04P\xdc\xe6\x04\xe0\xdc\xe6\x04(\xdd\xe6\x04\xc8\xdc\xe6\x04h\xd0\xe6\x04 \xdf\xe6\x04\xa0\xdd\xe6\x04\xe0\xd3\xe6\x04H\xdb\xe6\x04\x80\xd6\xe6\x04h\xd3\xe6\x04\xd8\xd5\xe6\x04h\xdc\xe6\x04H\xde\xe6\x04\xa8\xd2\xe6\x04`\xd8\xe6\x04\x90\xde\xe6\x04x\xdb\xe6\x04\x00\xd2\xe6\x04p\xda\xe6\x04@\xda\xe6\x04\x80\xdf\xe6\x04\x18\xd8\xe6\x04H\xf5\xff\x04\x98\xf9\xff\x04\xf0\xfb\xff\x04\xa0\xfa\xff\x04X\xf7\xff\x04\x80\xff\xff\x04(\xf1\xff\x04(\xf4\xff\x04@\xf7\xff\x04P\xfc\xff\x04\xd8\xfb\xff\x04\xd0\xfa\xff\x04\x98\xf6\xff\x04\xb8\xfd\xff\x04 \xf9\xff\x04\x88\xf7\xff\x04\x08\xfc\xff\x04\xf0\xf2\xff\x04\xe8\xfd\xff\x04\x88\xf1\xff\x04\x98\xff\xff\x04\xa8\xfe\xff\x04\x90\xf5\xff\x04H\xfb\xff\x04\xc8\xff\xff\x04\xc0\xf5\xff\x04\xa8\xf8\xff\x04X\xfd\xff\x04\x18\xf8\xff\x04@\xfd\xff\x04x\xf5\xff\x04\xb0\xff\xff\x04\x88\xfd\xff\x04\xa0\xf4\xff\x04h\xf0\xff\x04X\xfa\xff\x04\xf8\xf6\xff\x04\xf8\xf9\xff\x04\xc8\xf3\xff\x04\x80\xf3\xff\x04 \xfc\xff\x04\xd8\xf5\xff\x04\xd8\xfe\xff\x04\xf0\xf5\xff\x04\x00\xfb\xff\x04`\xfb\xff\x04p\xf7\xff\x04\x00\xf8\xff\x04 \xf6\xff\x04h\xf3\xff\x04\xd8\xf8\xff\x04x\xf8\xff\x04(\xf7\xff\x04h\xf9\xff\x04\x10\xf1\xff\x04\x88\xf4\xff\x04\xc0\xfb\xff\x04\xa8\xf5\xff\x04\x80\xf9\xff\x04\xc8\xf9\xff\x04\xa0\xfd\xff\x048\xf9\xff\x04\x98\xf3\xff\x048\xf0\xff\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3732
sg3633
g3722
sg3647
g3726
sg3642
g3730
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3743
sg3633
g3739
sg3647
g3750
sg3642
g3747
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3760
sg3633
g3756
sg3647
g3767
sg3642
g3764
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3803
sg3633
g3799
sg3647
g3810
sg3642
g3807
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3638
sg3633
g3816
sg3647
g3648
sg3642
g3823
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3835
sg3633
g3831
sg3647
g3842
sg3642
g3839
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3852
sg3633
g3848
sg3647
g3859
sg3642
g3856
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3869
sg3633
g3865
sg3647
g3876
sg3642
g3873
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3886
sg3633
g3882
sg3647
g3893
sg3642
g3890
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3903
sg3633
g3899
sg3647
g3910
sg3642
g3907
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3920
sg3633
g3916
sg3647
g3927
sg3642
g3924
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3675
sg3633
g3933
sg3647
g3682
sg3642
g3940
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3952
sg3633
g3948
sg3647
g3959
sg3642
g3956
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3803
sg3633
g3965
sg3647
g3810
sg3642
g3972
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3984
sg3633
g3980
sg3647
g3991
sg3642
g3988
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g4001
sg3633
g3997
sg3647
g4008
sg3642
g4005
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g3638
sg3633
g3816
sg3647
g3648
sg3642
g3823
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g3658
sg3633
g4027
sg3647
g3665
sg3642
g4034
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g3835
sg3633
g3831
sg3647
g3842
sg3642
g3839
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3760
sg3633
g4055
sg3647
g3767
sg3642
g4062
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g3638
sg3633
g3816
sg3647
g3648
sg3642
g3823
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g3692
sg3633
g4083
sg3647
g3699
sg3642
g4090
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g3732
sg3633
g3722
sg3647
g3726
sg3642
g3730
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g3692
sg3633
g4083
sg3647
g3699
sg3642
g4090
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g3658
sg3633
g4027
sg3647
g3665
sg3642
g4034
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g3920
sg3633
g3916
sg3647
g3927
sg3642
g3924
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g3903
sg3633
g3899
sg3647
g3910
sg3642
g3907
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g3852
sg3633
g3848
sg3647
g3859
sg3642
g3856
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g3803
sg3633
g3965
sg3647
g3810
sg3642
g3972
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g3743
sg3633
g3739
sg3647
g3750
sg3642
g3747
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g3984
sg3633
g3980
sg3647
g3991
sg3642
g3988
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g4232
sg3633
g4228
sg3647
g4239
sg3642
g4236
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g4249
sg3633
g4245
sg3647
g4256
sg3642
g4253
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g3760
sg3633
g3756
sg3647
g3767
sg3642
g3764
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g3743
sg3633
g4275
sg3647
g3750
sg3642
g4282
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g3835
sg3633
g3831
sg3647
g3842
sg3642
g3839
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g3675
sg3633
g3933
sg3647
g3682
sg3642
g3940
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g4232
sg3633
g4228
sg3647
g4239
sg3642
g4236
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g4001
sg3633
g3997
sg3647
g4008
sg3642
g4005
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g3886
sg3633
g3882
sg3647
g3893
sg3642
g3890
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g3638
sg3633
g3816
sg3647
g3648
sg3642
g3823
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g3835
sg3633
g4394
sg3647
g3842
sg3642
g4401
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g3886
sg3633
g3882
sg3647
g3893
sg3642
g3890
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g3760
sg3633
g3756
sg3647
g3767
sg3642
g3764
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g4232
sg3633
g4435
sg3647
g4239
sg3642
g4442
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g3852
sg3633
g4450
sg3647
g3859
sg3642
g4457
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g3886
sg3633
g3882
sg3647
g3893
sg3642
g3890
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g3803
sg3633
g3965
sg3647
g3810
sg3642
g3972
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g3920
sg3633
g4491
sg3647
g3927
sg3642
g4498
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g3984
sg3633
g4506
sg3647
g3991
sg3642
g4513
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g3658
sg3633
g4027
sg3647
g3665
sg3642
g4034
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g4232
sg3633
g4435
sg3647
g4239
sg3642
g4442
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g3732
sg3633
g3722
sg3647
g3726
sg3642
g3730
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g3984
sg3633
g4506
sg3647
g3991
sg3642
g4513
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g3709
sg3633
g4573
sg3647
g3716
sg3642
g4580
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g3760
sg3633
g4055
sg3647
g3767
sg3642
g4062
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g3886
sg3633
g4601
sg3647
g3893
sg3642
g4608
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g3920
sg3633
g4491
sg3647
g3927
sg3642
g4498
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g3835
sg3633
g3831
sg3647
g3842
sg3642
g3839
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g3743
sg3633
g4275
sg3647
g3750
sg3642
g4282
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g3903
sg3633
g4668
sg3647
g3910
sg3642
g4675
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g4232
sg3633
g4228
sg3647
g4239
sg3642
g4236
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g3984
sg3633
g4506
sg3647
g3991
sg3642
g4513
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g3732
sg3633
g4709
sg3647
g3726
sg3642
g4716
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g3760
sg3633
g4055
sg3647
g3767
sg3642
g4062
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g4249
sg3633
g4245
sg3647
g4256
sg3642
g4253
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g3760
sg3633
g4055
sg3647
g3767
sg3642
g4062
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g3952
sg3633
g4763
sg3647
g3959
sg3642
g4770
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g3984
sg3633
g3980
sg3647
g3991
sg3642
g3988
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g4249
sg3633
g4791
sg3647
g4256
sg3642
g4798
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g3869
sg3633
g4806
sg3647
g3876
sg3642
g4813
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g3743
sg3633
g4275
sg3647
g3750
sg3642
g4282
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g3886
sg3633
g3882
sg3647
g3893
sg3642
g3890
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g3920
sg3633
g3916
sg3647
g3927
sg3642
g3924
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g3984
sg3633
g3980
sg3647
g3991
sg3642
g3988
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g4232
sg3633
g4435
sg3647
g4239
sg3642
g4442
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g3803
sg3633
g3799
sg3647
g3810
sg3642
g3807
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g3952
sg3633
g3948
sg3647
g3959
sg3642
g3956
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g3903
sg3633
g3899
sg3647
g3910
sg3642
g3907
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g3835
sg3633
g4394
sg3647
g3842
sg3642
g4401
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g3852
sg3633
g4450
sg3647
g3859
sg3642
g4457
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g3743
sg3633
g3739
sg3647
g3750
sg3642
g3747
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g3852
sg3633
g3848
sg3647
g3859
sg3642
g3856
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g3803
sg3633
g3799
sg3647
g3810
sg3642
g3807
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g3743
sg3633
g4275
sg3647
g3750
sg3642
g4282
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g3709
sg3633
g4573
sg3647
g3716
sg3642
g4580
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g3835
sg3633
g4394
sg3647
g3842
sg3642
g4401
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g3675
sg3633
g3933
sg3647
g3682
sg3642
g3940
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g3852
sg3633
g3848
sg3647
g3859
sg3642
g3856
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g3709
sg3633
g4573
sg3647
g3716
sg3642
g4580
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g3869
sg3633
g4806
sg3647
g3876
sg3642
g4813
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g4249
sg3633
g4791
sg3647
g4256
sg3642
g4798
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g3952
sg3633
g4763
sg3647
g3959
sg3642
g4770
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g3760
sg3633
g3756
sg3647
g3767
sg3642
g3764
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g4232
sg3633
g4228
sg3647
g4239
sg3642
g4236
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g3692
sg3633
g4083
sg3647
g3699
sg3642
g4090
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g4232
sg3633
g4228
sg3647
g4239
sg3642
g4236
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g4249
sg3633
g4245
sg3647
g4256
sg3642
g4253
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g3869
sg3633
g3865
sg3647
g3876
sg3642
g3873
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g3920
sg3633
g4491
sg3647
g3927
sg3642
g4498
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g4249
sg3633
g4245
sg3647
g4256
sg3642
g4253
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g4232
sg3633
g4435
sg3647
g4239
sg3642
g4442
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g4001
sg3633
g5276
sg3647
g4008
sg3642
g5283
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g3835
sg3633
g4394
sg3647
g3842
sg3642
g4401
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g3886
sg3633
g4601
sg3647
g3893
sg3642
g4608
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g4001
sg3633
g5276
sg3647
g4008
sg3642
g5283
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g4232
sg3633
g4435
sg3647
g4239
sg3642
g4442
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g3709
sg3633
g4573
sg3647
g3716
sg3642
g4580
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g3869
sg3633
g3865
sg3647
g3876
sg3642
g3873
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g3984
sg3633
g4506
sg3647
g3991
sg3642
g4513
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g3732
sg3633
g4709
sg3647
g3726
sg3642
g4716
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g3952
sg3633
g4763
sg3647
g3959
sg3642
g4770
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g3852
sg3633
g4450
sg3647
g3859
sg3642
g4457
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g4001
sg3633
g3997
sg3647
g4008
sg3642
g4005
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g3903
sg3633
g4668
sg3647
g3910
sg3642
g4675
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g3903
sg3633
g3899
sg3647
g3910
sg3642
g3907
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g4001
sg3633
g3997
sg3647
g4008
sg3642
g4005
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g3886
sg3633
g4601
sg3647
g3893
sg3642
g4608
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g4001
sg3633
g3997
sg3647
g4008
sg3642
g4005
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g3903
sg3633
g4668
sg3647
g3910
sg3642
g4675
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g3920
sg3633
g3916
sg3647
g3927
sg3642
g3924
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g3743
sg3633
g3739
sg3647
g3750
sg3642
g3747
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g3903
sg3633
g3899
sg3647
g3910
sg3642
g3907
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g3743
sg3633
g3739
sg3647
g3750
sg3642
g3747
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g3675
sg3633
g3933
sg3647
g3682
sg3642
g3940
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g3658
sg3633
g4027
sg3647
g3665
sg3642
g4034
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g3835
sg3633
g4394
sg3647
g3842
sg3642
g4401
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g3803
sg3633
g3965
sg3647
g3810
sg3642
g3972
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g3869
sg3633
g4806
sg3647
g3876
sg3642
g4813
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g3869
sg3633
g3865
sg3647
g3876
sg3642
g3873
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g3732
sg3633
g3722
sg3647
g3726
sg3642
g3730
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g3952
sg3633
g3948
sg3647
g3959
sg3642
g3956
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g3886
sg3633
g4601
sg3647
g3893
sg3642
g4608
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g3732
sg3633
g4709
sg3647
g3726
sg3642
g4716
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g3760
sg3633
g4055
sg3647
g3767
sg3642
g4062
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g3692
sg3633
g4083
sg3647
g3699
sg3642
g4090
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g3638
sg3633
g3816
sg3647
g3648
sg3642
g3823
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g4249
sg3633
g4791
sg3647
g4256
sg3642
g4798
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g3952
sg3633
g3948
sg3647
g3959
sg3642
g3956
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g4001
sg3633
g5276
sg3647
g4008
sg3642
g5283
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g3658
sg3633
g4027
sg3647
g3665
sg3642
g4034
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g3903
sg3633
g4668
sg3647
g3910
sg3642
g4675
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g3732
sg3633
g3722
sg3647
g3726
sg3642
g3730
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g3952
sg3633
g4763
sg3647
g3959
sg3642
g4770
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g3760
sg3633
g3756
sg3647
g3767
sg3642
g3764
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g3852
sg3633
g4450
sg3647
g3859
sg3642
g4457
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g3869
sg3633
g4806
sg3647
g3876
sg3642
g4813
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g3952
sg3633
g3948
sg3647
g3959
sg3642
g3956
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g3835
sg3633
g3831
sg3647
g3842
sg3642
g3839
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g3692
sg3633
g4083
sg3647
g3699
sg3642
g4090
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g3984
sg3633
g4506
sg3647
g3991
sg3642
g4513
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g3903
sg3633
g4668
sg3647
g3910
sg3642
g4675
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g3920
sg3633
g4491
sg3647
g3927
sg3642
g4498
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g3709
sg3633
g4573
sg3647
g3716
sg3642
g4580
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g3920
sg3633
g4491
sg3647
g3927
sg3642
g4498
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g3743
sg3633
g4275
sg3647
g3750
sg3642
g4282
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g3920
sg3633
g3916
sg3647
g3927
sg3642
g3924
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g3803
sg3633
g3965
sg3647
g3810
sg3642
g3972
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g4249
sg3633
g4791
sg3647
g4256
sg3642
g4798
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g3869
sg3633
g4806
sg3647
g3876
sg3642
g4813
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g3852
sg3633
g4450
sg3647
g3859
sg3642
g4457
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g3803
sg3633
g3799
sg3647
g3810
sg3642
g3807
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g3732
sg3633
g4709
sg3647
g3726
sg3642
g4716
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g3984
sg3633
g3980
sg3647
g3991
sg3642
g3988
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g3675
sg3633
g3933
sg3647
g3682
sg3642
g3940
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g4249
sg3633
g4791
sg3647
g4256
sg3642
g4798
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g3869
sg3633
g3865
sg3647
g3876
sg3642
g3873
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g4001
sg3633
g5276
sg3647
g4008
sg3642
g5283
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g3803
sg3633
g3799
sg3647
g3810
sg3642
g3807
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g3886
sg3633
g4601
sg3647
g3893
sg3642
g4608
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g4001
sg3633
g5276
sg3647
g4008
sg3642
g5283
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g4249
sg3633
g4245
sg3647
g4256
sg3642
g4253
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g3732
sg3633
g4709
sg3647
g3726
sg3642
g4716
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g3952
sg3633
g4763
sg3647
g3959
sg3642
g4770
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g3852
sg3633
g3848
sg3647
g3859
sg3642
g3856
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I213463376
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S' \x01\x08\x1f@\x01\x08\x1fX\xa9\x07\x1f\x80\xa9\x07\x1f`\x1b\x07\x1f \x01\x08\x1f\xa8\xa9\x07\x1f\xd0\xa9\x07\x1f\xe0\x1c\x07\x1f`\x01\x08\x1f\xc8\x10\x08\x1f\xf8\xa9\x07\x1f\xd0\xa9\x07\x1f\xc0\x1b\x07\x1f8\xab\x07\x1f\xd0\xa9\x07\x1f\xa8\xa9\x07\x1f \x01\x08\x1f\x90\x1b\x07\x1f\xf0\x1b\x07\x1f\xc0\x1b\x07\x1f`\x1b\x07\x1f \x01\x08\x1f\xf0\x1b\x07\x1f\x80\x01\x08\x1f\xe8\xaa\x07\x1f\x00\x11\x08\x1f\xe0\x1c\x07\x1f\x18\x12\x08\x1f\xd0\xa9\x07\x1f\xc8\x10\x08\x1f\xc0\x1b\x07\x1f\xc8\x10\x08\x1f \x01\x08\x1f \x1c\x07\x1f\x90\x1b\x07\x1f`\x01\x08\x1f\x98\xaa\x07\x1f\x80\xa9\x07\x1f@\x1d\x07\x1fX\xa9\x07\x1f\x90\x1b\x07\x1fX\xa9\x07\x1f`\xab\x07\x1f\x00\x11\x08\x1f\x10\x1d\x07\x1f\xb0\x1c\x07\x1f \xaa\x07\x1f`\x1b\x07\x1fp\x1d\x07\x1f`\x01\x08\x1f\x98\xaa\x07\x1f\xe0\x1c\x07\x1f\xa0\x01\x08\x1fp\x11\x08\x1f8\xab\x07\x1f\xb0\xab\x07\x1f\xb0\x1c\x07\x1f\x98\xaa\x07\x1f\x00\x11\x08\x1f\xc8\x10\x08\x1f8\x11\x08\x1f8\xab\x07\x1fP\x1c\x07\x1f@\x1d\x07\x1f\x80\xa9\x07\x1f@\x01\x08\x1f\xf8\xa9\x07\x1f\xc0\x01\x08\x1f`\x01\x08\x1f`\x1b\x07\x1f8\x11\x08\x1f\x80\xa9\x07\x1f\x88\xab\x07\x1f\xa8\xa9\x07\x1f\x00\x11\x08\x1f`\x01\x08\x1f`\xab\x07\x1fX\xa9\x07\x1f\x88\xab\x07\x1f\x80\xa9\x07\x1f8\x11\x08\x1f\xc0\x1b\x07\x1f\xa8\xa9\x07\x1f\xf8\xa9\x07\x1f@\x01\x08\x1f\xa8\xa9\x07\x1f@\x01\x08\x1f`\x01\x08\x1f`\xab\x07\x1f\xe0\x11\x08\x1fH\xaa\x07\x1f\x00\x11\x08\x1f`\x01\x08\x1fH\xaa\x07\x1f\xd0\xa9\x07\x1fX\xa9\x07\x1f \xaa\x07\x1fX\xa9\x07\x1f\xb0\xab\x07\x1fP\x1c\x07\x1fH\xaa\x07\x1f \x1c\x07\x1f8\x11\x08\x1f\xa8\x11\x08\x1f@\x01\x08\x1f\x90\x1b\x07\x1f\x88\xab\x07\x1f\xa8\xa9\x07\x1fP\x1c\x07\x1f \xaa\x07\x1fP\x1c\x07\x1f\xe0\x1c\x07\x1f\xe0\x11\x08\x1f\x80\x01\x08\x1f@\x01\x08\x1f\x80\x01\x08\x1f \xaa\x07\x1f\x80\x1c\x07\x1f@\x01\x08\x1f`\x1b\x07\x1f\x80\x01\x08\x1f8\x11\x08\x1f \x1c\x07\x1f\xc8\x10\x08\x1f \x01\x08\x1f\xc0\x1b\x07\x1f8\x11\x08\x1f\x90\x1b\x07\x1f \xaa\x07\x1f\xa8\x11\x08\x1f\xf8\xa9\x07\x1f\xf0\x1b\x07\x1f\x18\x12\x08\x1f\xf8\xa9\x07\x1f\xc0\xaa\x07\x1fH\xaa\x07\x1f\xf8\xa9\x07\x1f \x01\x08\x1f\xc8\x10\x08\x1f`\xab\x07\x1fP\x1c\x07\x1f\xb0\x1c\x07\x1f@\x01\x08\x1f\x10\x1d\x07\x1f \x1c\x07\x1fP\x1c\x07\x1f \x1c\x07\x1f\xa8\xa9\x07\x1f\x80\xa9\x07\x1f\xc0\x1b\x07\x1f\xf8\xa9\x07\x1fP\x1c\x07\x1f\x80\x01\x08\x1f \x01\x08\x1f`\x01\x08\x1fP\x1c\x07\x1f \x1c\x07\x1fX\xa9\x07\x1f\x90\x1b\x07\x1f\x00\x11\x08\x1f8\x11\x08\x1f`\x01\x08\x1f\xa8\xa9\x07\x1f`\x1b\x07\x1f \xaa\x07\x1f\xc8\x10\x08\x1f8\x11\x08\x1f`\x1b\x07\x1f\x80\xa9\x07\x1f\xf0\x1b\x07\x1f\xe0\x11\x08\x1fH\xaa\x07\x1f\xf8\xa9\x07\x1f\xe0\x11\x08\x1f \x1c\x07\x1f\x80\xa9\x07\x1f\xa8\xa9\x07\x1f\xf0\x1b\x07\x1f`\x01\x08\x1f`\x1b\x07\x1f \xaa\x07\x1f8\x11\x08\x1f\xf0\x1b\x07\x1f\xc8\x10\x08\x1f \xaa\x07\x1f \x01\x08\x1fH\xaa\x07\x1f\x80\xa9\x07\x1f\xd0\xa9\x07\x1f\xb0\xab\x07\x1f`\xab\x07\x1f\x00\x11\x08\x1f@\x01\x08\x1f\x80\x1c\x07\x1f\xf0\x1b\x07\x1fP\x1c\x07\x1fH\xaa\x07\x1f\xf0\x1b\x07\x1f\xd0\xa9\x07\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S'@\x04\x08\x1f\xc0\x02\x08\x1f\xe0\x01\x08\x1f\xc0\x03\x08\x1f`\x03\x08\x1f\x00\x03\x08\x1f\xe0\x02\x08\x1f\x80\x02\x08\x1f`\x04\x08\x1f\xc0\x04\x08\x1f@\x03\x08\x1f \x04\x08\x1f\xe0\x04\x08\x1f\xa0\x04\x08\x1f\x80\x05\x08\x1f\x80\x04\x08\x1f\x80\x03\x08\x1f\xe0\x03\x08\x1f\x00\x06\x08\x1f\xe0\x05\x08\x1f@\x05\x08\x1f\xc0\x05\x08\x1f \x06\x08\x1f\xa0\x02\x08\x1f \x02\x08\x1f@\x06\x08\x1f`\x06\x08\x1f\xc0\x06\x08\x1f\xa0\x06\x08\x1f \x05\x08\x1f\xe0\x06\x08\x1f@\x07\x08\x1f`\x07\x08\x1f\x80\x07\x08\x1f\xa0\x07\x08\x1f\xc0\x07\x08\x1f\xe0\x07\x08\x1f\x00\x08\x08\x1f\x00\x04\x08\x1f\x80\x06\x08\x1f \x08\x08\x1f\x80\x08\x08\x1f`\x08\x08\x1f\xa0\x05\x08\x1f\xa0\x08\x08\x1f\x00\x05\x08\x1f@\t\x08\x1f \x03\x08\x1f\xa0\t\x08\x1f@\x08\x08\x1f\xe0\x08\x08\x1f\x00\x07\x08\x1f\x80\t\x08\x1f\xc0\t\x08\x1f \x07\x08\x1f@\n\x08\x1f \n\x08\x1f\x00\t\x08\x1f`\n\x08\x1f\x80\n\x08\x1f\xa0\n\x08\x1f\x00\x0b\x08\x1f\xe0\n\x08\x1f@\x0b\x08\x1f \x0b\x08\x1f`\x02\x08\x1f\xa0\x0b\x08\x1f\x80\x0b\x08\x1f\x00\n\x08\x1f\x00\x0c\x08\x1f\xe0\x0b\x08\x1f@\x0c\x08\x1f \x0c\x08\x1f`\t\x08\x1f`\x0c\x08\x1f\x80\x0c\x08\x1f\xa0\x0c\x08\x1f\xc0\x0c\x08\x1f \r\x08\x1f\x00\r\x08\x1f \t\x08\x1f\x80\r\x08\x1f`\r\x08\x1f@\x02\x08\x1f\xa0\r\x08\x1f\xc0\r\x08\x1f \x0e\x08\x1f\x00\x0e\x08\x1f`\x05\x08\x1f@\x0e\x08\x1f`\x0e\x08\x1f\xc0\x0e\x08\x1f\xa0\x0e\x08\x1f\x00\x0f\x08\x1f\xe0\x0e\x08\x1f\xa0\x0f\x08\x1f\xe0\x0c\x08\x1f\xe0\r\x08\x1f@\r\x08\x1f\xe0\t\x08\x1f\x80\x0f\x08\x1f\xc0\x08\x08\x1f@\x0f\x08\x1f\x00/\xc0\x1e\xe0\x0f\x08\x1f\xc0\n\x08\x1f`\x0f\x08\x1f\xc0\x0f\x08\x1f\xa0\x03\x08\x1f\x80\xd7\xe6\x1e\x80\x0e\x08\x1f /\xc0\x1e \x023\x1f\xa0\x003\x1f`\x013\x1f\x00\x013\x1f`\x003\x1f\xc0\x013\x1f@\x023\x1f\xa0\x013\x1f\xc0\x003\x1f\x80\x023\x1f`\x023\x1f\xe0\x013\x1f\xc0\x023\x1f`\x0b\x08\x1f\x00\x033\x1f \x013\x1f\xa0\xdf\xe6\x1e@\x033\x1f\xa0\x033\x1f`\x033\x1f\xc0\x033\x1f\xa0\x023\x1f@\x043\x1f@\x003\x1f\x00\x023\x1f \x043\x1f\x80\x013\x1f\xa0\x043\x1f`\x053\x1f\xe0\x033\x1f@\x053\x1f\xa0\x053\x1f\xe0\x053\x1f`\x043\x1f\x80\x053\x1f\x00\x063\x1f \x003\x1f\x80\x033\x1f\xe0\x003\x1f\xc0\x063\x1f`\x063\x1f\xe0\x023\x1f@\x073\x1f\x00\x053\x1f \x063\x1f@\x063\x1f\xa0\x073\x1f\xe0\x063\x1f\x00\x083\x1f`\x073\x1f\x80\x063\x1f \x073\x1f\xc0\x073\x1f\xc0\x053\x1f\x00\x073\x1f\x80\x043\x1f\xc0\x043\x1f\xe0\x043\x1f@\t3\x1f \x083\x1f\x80\x003\x1f \x033\x1f\x80\x083\x1f\x80\x073\x1f\xe0\t3\x1f\x00\n3\x1f`\n3\x1f \x053\x1f\x80\t3\x1f\xe0\x083\x1f@\x013\x1f@\x083\x1f@\n3\x1f \n3\x1f\xa0\x083\x1f\x80\x0b3\x1f`\t3\x1f\xe0\x073\x1f\xa0\x0b3\x1f`\x0b3\x1f\x00\x0c3\x1f\xc0\t3\x1f`\x0c3\x1f \x0c3\x1f \x0b3\x1f\x80\x0c3\x1f\xa0\n3\x1f\xc0\x0b3\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'(\xfa\xdf?\x8b\xef.?\xfc\xe9n?&3\x93?m\x97Y?\x8bs7?\x12\xa7j?B\xea.?k\x87h@\x12f&?\x17iw?\xcbY\xa6?\xaa!\x82?%\xa9j?\xb0WU?\xeb2s?H \x82?#\x95\xd9?\tQ\x95?_T\x95?K\xc3*?\xc3N\xb5?\xd8\xe9.?\xcb\x9d*?\xc0;D?Xq\x97?\n \x82?\x00\x0bQ?"\xc3L?\xd7"\x82?\x9c\xff\x7f?\xd8\x84&?\xf7\xbb{?\xadvw?p\x10Q?\xf9\xeen?\x0e\x0c\xa0?\xe7P\xf5?\x86\x86\xc8?!\x11\x91?z4\xb3?\x0b\xdf\x1d@\xd9#\x82?\x9b\xcc\x8c?\x87\r\xb1?\x81\xa8;?z\x8f7?\xa6p7?\xe2\xeen?N\xdc\x9d?\xef\xa6\x8a?\xac\xcbL?&#\xc2?\x11\x82H?~\x0eQ?X\xa9\x8a?e\n\xa0?\x91\xdc]?\xb8\x0cQ?\xb9B\xe4?\x0f\x88\x18@l\xfe?@\xe7C\xb3?\x0bff?\x96\r\x91?\xbf\x98\x99?\x1f\xca\x9b?s\x13\xa2?\xd2SU?\xb1\x89H?\x93\x99Y?\xdfl6@\x1a\x11\xd1?\xca\xde\xdd?9\x99\x99?ED\x84?\x0f\x88\x08@\x15\xcc\x0c@J\xff\x7f?I \xa2?\xb5\xdd]?\x16\no?\x85\xa5j?\xfd/\x93?\xcd"3?i\x84\x88?\x9b\x88H?x\xf1.?\x8d\xccL?;\x89\x88?\xae\x1e\xa2?u\xff\x7f?E2\x93?\x15\x1ab?*\x11\x91?\xa5\xfe??\xfb\xa9\x8a?\xb0o\x86?\xe4\xb7\xbb?c\x9a\x99?P\xa5j?6\xd8]?B6b?\xb4\xc3\x8c?\xc6\xea\xce?%\xdd]?\xd42\x03@\xe5\xa2H?\xc0\x1e\x82?\xb8\xc6L?\x92\xa6\x8a?\xa1#b?1\x89\xa8?\xd3xw?J\xc7\x8c?Y\xbc\xbb?\x9fw\x97?\xf3\x1d\xa2?\x9c\xa9\xea?\xd7\xd9]?\xb9\xb3{?H\xbd;?\x7f43?\xe7\x10Q?\xeb\xed.?\x9e\x7f\x88?O\x02@?\x8f\xfd\x9f?\x98K\xf5?\xdc\x95\x99?X\xcaL?\xdc 3?\xe2\xab*?\x8f\xcf\x0c@Oc7?@\x18b?\xe02\x93?`T&?X\x94Y?q\xd2{?`\xb8{?\x99<\xa4?2f\x86?1\xde]?u#3?7d\x86?I\xb4{?oe&?uQ\x95?\x1f\x88H?\x8b\xfb\x8e?\xe5f7?\\\xdc]?wSU?cf&?y\xa6j? 03?\xdes\x97?Z5\x93?\xcd!\xe2?>\x00\xc0?\x82\x82\xd7?>53?O"\x82?\r\x00\xa0?\xbf\x9c*?\xe1\x1e\x82?\x8e\xf1n?`\xfe\x7f?\xf4\xa9J@L\xcbL?\xbe\xea.?\xc5\x8bY?=\x81\x19?\x0f\xef.?oq7? 2\x03@\x92\xe3L?\x98qw?\x01\xb6{?\x96.\x93?\xaa\xb8\x0b@\xaf\xa4\x99?\xc0\xb3;?E\x98Y?\x13\x82\x08?\xee\xdc\x9d?\xcc\xbb{?\x9e\xdeL?\xf7\xefn?\x01W\x15?\xd0C\x84?\xdd\xa2\x8a?\xf5\xeen?\xc4(Q?\x82tw?\x01\xf9??\xf4/\x93?\xb2\xcc\xac?\xc9\x18@?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S'\xe8\xd4\xe6\x04\xf8\xd6\xe6\x04\xe0i\xdf\x04\xe8j\xdf\x04\xf0k\xdf\x04\x88j\xdf\x04@a\xdf\x04Pf\xdf\x04\x18k\xdf\x04\xf0n\xdf\x04xn\xdf\x04\x10m\xdf\x04\x00e\xdf\x04\x88g\xdf\x04Xm\xdf\x04(g\xdf\x04\x80l\xdf\x04\xc8f\xdf\x04\x08o\xdf\x04\xc8o\xdf\x04\xb0\\\xe6\x04H[\xe6\x04pT\xe6\x04\x90U\xe6\x04hV\xe6\x04\xf0U\xe6\x04`U\xe6\x04\x80\\\xe6\x04\x90X\xe6\x04h_\xe6\x04\xa0Q\xe6\x04\x80Y\xe6\x04\x10W\xe6\x04\xa0W\xe6\x04HR\xe6\x04\x80V\xe6\x040R\xe6\x04\xa8X\xe6\x04PP\xe6\x04\xc8V\xe6\x04XW\xe6\x04\x00X\xe6\x040X\xe6\x04XZ\xe6\x04pZ\xe6\x04\x88Z\xe6\x04@T\xe6\x04\xc8P\xe6\x04\xf0[\xe6\x04\x08S\xe6\x04xR\xe6\x04\xe8Q\xe6\x04(Q\xe6\x04\xb0P\xe6\x04(T\xe6\x04@Q\xe6\x04\xd0Q\xe6\x04 _\xe6\x04\xa0T\xe6\x04\x90[\xe6\x04\xd0W\xe6\x04\xd0T\xe6\x04\xa8R\xe6\x04\x10]\xe6\x04\xe0V\xe6\x04\xf8P\xe6\x040[\xe6\x04\xa0]\xe6\x04\xd8[\xe6\x04\x80S\xe6\x04\xc0R\xe6\x04PS\xe6\x04\xe8]\xe6\x04x^\xe6\x04 V\xe6\x04\xf8V\xe6\x04HU\xe6\x04`[\xe6\x04X]\xe6\x04x[\xe6\x04\x08_\xe6\x04h\\\xe6\x04\xf8Y\xe6\x04\xb8W\xe6\x04\xc8S\xe6\x040^\xe6\x04\x88]\xe6\x04hY\xe6\x04HX\xe6\x04p]\xe6\x04\x10Q\xe6\x04\x98\\\xe6\x04\x88T\xe6\x04\x00U\xe6\x04\xe8W\xe6\x04\xd8X\xe6\x04\xe0_\xe6\x04\xa8[\xe6\x04\x18R\xe6\x04\xd8^\xe6\x04\xe0P\xe6\x04\x18X\xe6\x04xX\xe6\x04`^\xe6\x04\xe0Y\xe6\x04\xf8\\\xe6\x04\xd8U\xe6\x048Y\xe6\x04\x98Y\xe6\x04\xc0X\xe6\x04PV\xe6\x04pQ\xe6\x04\xc8_\xe6\x04\xa8U\xe6\x04(]\xe6\x04\x10T\xe6\x04\x80_\xe6\x04\xb0S\xe6\x04\x18[\xe6\x04\xa0Z\xe6\x048\\\xe6\x04\x18U\xe6\x04\xc0U\xe6\x04@Z\xe6\x04\xf0X\xe6\x04\x08Y\xe6\x04H^\xe6\x04\x98S\xe6\x04XQ\xe6\x04\xc0[\xe6\x04 P\xe6\x04\x90R\xe6\x04\xc0^\xe6\x04hS\xe6\x04P_\xe6\x04\xe0\\\xe6\x04\x88W\xe6\x04\x08V\xe6\x04`X\xe6\x04\x10Z\xe6\x04 \\\xe6\x04\xe8Z\xe6\x04\xb8Q\xe6\x04P\\\xe6\x04xU\xe6\x04\xb8]\xe6\x04\xa8^\xe6\x04 S\xe6\x04\x98P\xe6\x04(Z\xe6\x048V\xe6\x04\xe0S\xe6\x04\x08\\\xe6\x04\xf0^\xe6\x04\xe8T\xe6\x04\x18^\xe6\x04PY\xe6\x04@W\xe6\x04\x00R\xe6\x048S\xe6\x04\xf0R\xe6\x04\x90^\xe6\x04\x00^\xe6\x04\x98_\xe6\x04\xc8\\\xe6\x040U\xe6\x04@]\xe6\x04\xb0V\xe6\x04\x00[\xe6\x04\x88Q\xe6\x04\xb0_\xe6\x04pW\xe6\x04\xd0Z\xe6\x04\xb0Y\xe6\x04\xf8S\xe6\x04\xd8R\xe6\x04h_\xde\x04H^\xde\x04 V\xde\x04\xa8[\xde\x04\xd8U\xde\x04\xa8U\xde\x04\x98_\xde\x04 S\xde\x04PV\xde\x04\x80f\xdf\x04\xc8i\xdf\x048f\xdf\x04xb\xdf\x04@d\xdf\x048o\xdf\x04\x08l\xdf\x04\xd8k\xdf\x04\x90n\xdf\x04\xe8g\xdf\x04Xj\xdf\x04\xa8n\xdf\x04 o\xdf\x04\xa0j\xdf\x048i\xdf\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6376
sg6371
g6460
sg6385
g6386
sg6380
g6467
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6479
sg6371
g6475
sg6385
g6486
sg6380
g6483
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6496
sg6371
g6492
sg6385
g6503
sg6380
g6500
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6519
sg6371
g6509
sg6385
g6513
sg6380
g6517
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6530
sg6371
g6526
sg6385
g6537
sg6380
g6534
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6547
sg6371
g6543
sg6385
g6554
sg6380
g6551
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6564
sg6371
g6560
sg6385
g6571
sg6380
g6568
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6496
sg6371
g6577
sg6385
g6503
sg6380
g6584
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6596
sg6371
g6592
sg6385
g6603
sg6380
g6600
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6619
sg6371
g6609
sg6385
g6613
sg6380
g6617
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6496
sg6371
g6492
sg6385
g6503
sg6380
g6500
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6479
sg6371
g6475
sg6385
g6486
sg6380
g6483
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6519
sg6371
g6665
sg6385
g6513
sg6380
g6672
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6684
sg6371
g6680
sg6385
g6691
sg6380
g6688
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6596
sg6371
g6697
sg6385
g6603
sg6380
g6704
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6376
sg6371
g6460
sg6385
g6386
sg6380
g6467
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6684
sg6371
g6738
sg6385
g6691
sg6380
g6745
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6757
sg6371
g6753
sg6385
g6764
sg6380
g6761
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6479
sg6371
g6475
sg6385
g6486
sg6380
g6483
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6619
sg6371
g6783
sg6385
g6613
sg6380
g6790
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6519
sg6371
g6509
sg6385
g6513
sg6380
g6517
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6821
sg6371
g6811
sg6385
g6815
sg6380
g6819
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6496
sg6371
g6577
sg6385
g6503
sg6380
g6584
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6547
sg6371
g6543
sg6385
g6554
sg6380
g6551
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6596
sg6371
g6592
sg6385
g6603
sg6380
g6600
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6547
sg6371
g6867
sg6385
g6554
sg6380
g6874
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6899
sg6371
g6895
sg6385
g6906
sg6380
g6903
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6519
sg6371
g6509
sg6385
g6513
sg6380
g6517
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6530
sg6371
g6925
sg6385
g6537
sg6380
g6932
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6413
sg6371
g6940
sg6385
g6420
sg6380
g6947
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6430
sg6371
g6955
sg6385
g6437
sg6380
g6962
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6684
sg6371
g6738
sg6385
g6691
sg6380
g6745
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g6519
sg6371
g6665
sg6385
g6513
sg6380
g6672
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g6413
sg6371
g6940
sg6385
g6420
sg6380
g6947
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g6757
sg6371
g7022
sg6385
g6764
sg6380
g7029
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g6619
sg6371
g6609
sg6385
g6613
sg6380
g6617
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g6564
sg6371
g6560
sg6385
g6571
sg6380
g6568
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6496
sg6371
g6577
sg6385
g6503
sg6380
g6584
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g6821
sg6371
g6811
sg6385
g6815
sg6380
g6819
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6447
sg6371
g7089
sg6385
g6454
sg6380
g7096
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g7114
sg6371
g7104
sg6385
g7108
sg6380
g7112
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g6530
sg6371
g6526
sg6385
g6537
sg6380
g6534
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6519
sg6371
g6665
sg6385
g6513
sg6380
g6672
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6396
sg6371
g7173
sg6385
g6403
sg6380
g7180
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6619
sg6371
g6783
sg6385
g6613
sg6380
g6790
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g7211
sg6371
g7201
sg6385
g7205
sg6380
g7209
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g6496
sg6371
g6492
sg6385
g6503
sg6380
g6500
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g6619
sg6371
g6609
sg6385
g6613
sg6380
g6617
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g6547
sg6371
g6543
sg6385
g6554
sg6380
g6551
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g7274
sg6371
g7270
sg6385
g7281
sg6380
g7278
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6619
sg6371
g6609
sg6385
g6613
sg6380
g6617
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g7114
sg6371
g7104
sg6385
g7108
sg6380
g7112
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g6684
sg6371
g6680
sg6385
g6691
sg6380
g6688
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g6430
sg6371
g6955
sg6385
g6437
sg6380
g6962
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6396
sg6371
g7173
sg6385
g6403
sg6380
g7180
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6564
sg6371
g6560
sg6385
g6571
sg6380
g6568
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g7274
sg6371
g7365
sg6385
g7281
sg6380
g7372
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g6530
sg6371
g6925
sg6385
g6537
sg6380
g6932
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g6447
sg6371
g7089
sg6385
g6454
sg6380
g7096
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g7274
sg6371
g7270
sg6385
g7281
sg6380
g7278
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g6430
sg6371
g6955
sg6385
g6437
sg6380
g6962
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g6899
sg6371
g6895
sg6385
g6906
sg6380
g6903
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g6479
sg6371
g7445
sg6385
g6486
sg6380
g7452
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6619
sg6371
g6783
sg6385
g6613
sg6380
g6790
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g6530
sg6371
g6526
sg6385
g6537
sg6380
g6534
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6757
sg6371
g6753
sg6385
g6764
sg6380
g6761
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6899
sg6371
g6895
sg6385
g6906
sg6380
g6903
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g6430
sg6371
g6955
sg6385
g6437
sg6380
g6962
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g7274
sg6371
g7365
sg6385
g7281
sg6380
g7372
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g6596
sg6371
g6697
sg6385
g6603
sg6380
g6704
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6479
sg6371
g7445
sg6385
g6486
sg6380
g7452
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6564
sg6371
g7577
sg6385
g6571
sg6380
g7584
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g6479
sg6371
g7445
sg6385
g6486
sg6380
g7452
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6530
sg6371
g6925
sg6385
g6537
sg6380
g6932
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g6757
sg6371
g7022
sg6385
g6764
sg6380
g7029
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g6596
sg6371
g6592
sg6385
g6603
sg6380
g6600
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g7211
sg6371
g7201
sg6385
g7205
sg6380
g7209
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g6619
sg6371
g6783
sg6385
g6613
sg6380
g6790
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6530
sg6371
g6526
sg6385
g6537
sg6380
g6534
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g7211
sg6371
g7201
sg6385
g7205
sg6380
g7209
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g6496
sg6371
g6492
sg6385
g6503
sg6380
g6500
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g6413
sg6371
g6940
sg6385
g6420
sg6380
g6947
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6821
sg6371
g7748
sg6385
g6815
sg6380
g7755
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6413
sg6371
g6940
sg6385
g6420
sg6380
g6947
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g7211
sg6371
g7776
sg6385
g7205
sg6380
g7783
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g7114
sg6371
g7791
sg6385
g7108
sg6380
g7798
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g7211
sg6371
g7201
sg6385
g7205
sg6380
g7209
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g6899
sg6371
g7819
sg6385
g6906
sg6380
g7826
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g7274
sg6371
g7270
sg6385
g7281
sg6380
g7278
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g6547
sg6371
g6867
sg6385
g6554
sg6380
g6874
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g6396
sg6371
g7173
sg6385
g6403
sg6380
g7180
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g6519
sg6371
g6509
sg6385
g6513
sg6380
g6517
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6899
sg6371
g7819
sg6385
g6906
sg6380
g7826
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6479
sg6371
g7445
sg6385
g6486
sg6380
g7452
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g7114
sg6371
g7791
sg6385
g7108
sg6380
g7798
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g6821
sg6371
g7748
sg6385
g6815
sg6380
g7755
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g7114
sg6371
g7791
sg6385
g7108
sg6380
g7798
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g6519
sg6371
g6509
sg6385
g6513
sg6380
g6517
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g6596
sg6371
g6697
sg6385
g6603
sg6380
g6704
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6757
sg6371
g6753
sg6385
g6764
sg6380
g6761
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g6757
sg6371
g6753
sg6385
g6764
sg6380
g6761
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6821
sg6371
g7748
sg6385
g6815
sg6380
g7755
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6447
sg6371
g7089
sg6385
g6454
sg6380
g7096
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g6396
sg6371
g7173
sg6385
g6403
sg6380
g7180
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g6757
sg6371
g6753
sg6385
g6764
sg6380
g6761
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g7274
sg6371
g7365
sg6385
g7281
sg6380
g7372
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g6899
sg6371
g6895
sg6385
g6906
sg6380
g6903
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g6547
sg6371
g6867
sg6385
g6554
sg6380
g6874
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6376
sg6371
g6460
sg6385
g6386
sg6380
g6467
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g6596
sg6371
g6697
sg6385
g6603
sg6380
g6704
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g7274
sg6371
g7270
sg6385
g7281
sg6380
g7278
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g6519
sg6371
g6665
sg6385
g6513
sg6380
g6672
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g6821
sg6371
g7748
sg6385
g6815
sg6380
g7755
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6547
sg6371
g6867
sg6385
g6554
sg6380
g6874
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g6564
sg6371
g7577
sg6385
g6571
sg6380
g7584
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g6684
sg6371
g6680
sg6385
g6691
sg6380
g6688
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g6821
sg6371
g7748
sg6385
g6815
sg6380
g7755
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g6564
sg6371
g6560
sg6385
g6571
sg6380
g6568
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g7211
sg6371
g7776
sg6385
g7205
sg6380
g7783
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g6564
sg6371
g7577
sg6385
g6571
sg6380
g7584
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g6376
sg6371
g6460
sg6385
g6386
sg6380
g6467
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6547
sg6371
g6543
sg6385
g6554
sg6380
g6551
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g6757
sg6371
g7022
sg6385
g6764
sg6380
g7029
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g7114
sg6371
g7791
sg6385
g7108
sg6380
g7798
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g6496
sg6371
g6577
sg6385
g6503
sg6380
g6584
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6396
sg6371
g7173
sg6385
g6403
sg6380
g7180
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g6564
sg6371
g6560
sg6385
g6571
sg6380
g6568
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g6899
sg6371
g7819
sg6385
g6906
sg6380
g7826
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g7114
sg6371
g7791
sg6385
g7108
sg6380
g7798
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g6899
sg6371
g7819
sg6385
g6906
sg6380
g7826
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g6479
sg6371
g6475
sg6385
g6486
sg6380
g6483
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g6596
sg6371
g6592
sg6385
g6603
sg6380
g6600
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g6564
sg6371
g7577
sg6385
g6571
sg6380
g7584
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g7114
sg6371
g7104
sg6385
g7108
sg6380
g7112
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g6757
sg6371
g7022
sg6385
g6764
sg6380
g7029
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6530
sg6371
g6526
sg6385
g6537
sg6380
g6534
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g7114
sg6371
g7104
sg6385
g7108
sg6380
g7112
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6899
sg6371
g6895
sg6385
g6906
sg6380
g6903
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6413
sg6371
g6940
sg6385
g6420
sg6380
g6947
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g6519
sg6371
g6665
sg6385
g6513
sg6380
g6672
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g6619
sg6371
g6609
sg6385
g6613
sg6380
g6617
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g7274
sg6371
g7365
sg6385
g7281
sg6380
g7372
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g6530
sg6371
g6925
sg6385
g6537
sg6380
g6932
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g6479
sg6371
g7445
sg6385
g6486
sg6380
g7452
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6821
sg6371
g6811
sg6385
g6815
sg6380
g6819
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6547
sg6371
g6543
sg6385
g6554
sg6380
g6551
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g7274
sg6371
g7270
sg6385
g7281
sg6380
g7278
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g6430
sg6371
g6955
sg6385
g6437
sg6380
g6962
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g6684
sg6371
g6738
sg6385
g6691
sg6380
g6745
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6596
sg6371
g6592
sg6385
g6603
sg6380
g6600
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g7211
sg6371
g7776
sg6385
g7205
sg6380
g7783
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6564
sg6371
g7577
sg6385
g6571
sg6380
g7584
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g6596
sg6371
g6697
sg6385
g6603
sg6380
g6704
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6899
sg6371
g7819
sg6385
g6906
sg6380
g7826
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6479
sg6371
g6475
sg6385
g6486
sg6380
g6483
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6684
sg6371
g6680
sg6385
g6691
sg6380
g6688
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g6530
sg6371
g6925
sg6385
g6537
sg6380
g6932
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6447
sg6371
g7089
sg6385
g6454
sg6380
g7096
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6821
sg6371
g6811
sg6385
g6815
sg6380
g6819
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g7274
sg6371
g7365
sg6385
g7281
sg6380
g7372
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g6684
sg6371
g6738
sg6385
g6691
sg6380
g6745
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6547
sg6371
g6867
sg6385
g6554
sg6380
g6874
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6821
sg6371
g6811
sg6385
g6815
sg6380
g6819
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6376
sg6371
g6460
sg6385
g6386
sg6380
g6467
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g7211
sg6371
g7776
sg6385
g7205
sg6380
g7783
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g6496
sg6371
g6577
sg6385
g6503
sg6380
g6584
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g7211
sg6371
g7776
sg6385
g7205
sg6380
g7783
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g6757
sg6371
g7022
sg6385
g6764
sg6380
g7029
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6619
sg6371
g6783
sg6385
g6613
sg6380
g6790
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6447
sg6371
g7089
sg6385
g6454
sg6380
g7096
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g6684
sg6371
g6738
sg6385
g6691
sg6380
g6745
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g7114
sg6371
g7104
sg6385
g7108
sg6380
g7112
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g7211
sg6371
g7201
sg6385
g7205
sg6380
g7209
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g6684
sg6371
g6680
sg6385
g6691
sg6380
g6688
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6496
sg6371
g6492
sg6385
g6503
sg6380
g6500
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.