ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E15_infer_design1_2015_Jul_09_1818
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vleft
p57
sVcontacts
p58
Vn
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xe3z\xcb\xba\xf4\x04N@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_09_1818
p67
sVparticipant
p68
VE15
p69
sVglasses
p70
Vn
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F0.90028931809865753
sg14
S'space'
p89
sg59
g63
sg58
Vn
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp90
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F5.2672240915162547
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P5\x00'
tbsg70
Vn
sa(dp96
g64
g65
sg20
F18.199999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F0.45999999999999908
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x15\x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V29-beans.png
p103
sg21
F1.6000000000000001
sg70
Vn
sa(dp104
g64
g65
sg20
F4.2009999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F0.37999999999999856
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'\x16\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p110
sg21
F1.8999999999999999
sg70
Vn
sa(dp111
g64
g65
sg20
F6.601
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F0.49999999999999911
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'\x0b\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p117
sg21
F1.3999999999999999
sg70
Vn
sa(dp118
g64
g65
sg20
F5.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F0.85999999999999965
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'#\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p124
sg21
F1.2
sg70
Vn
sa(dp125
g64
g65
sg20
F3.5510000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S'\x13\x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p131
sg21
F1.8
sg70
Vn
sa(dp132
g64
g65
sg20
F5.1509999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F0.63999999999999901
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S'\x1c\x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p138
sg21
F1.8
sg70
Vn
sa(dp139
g64
g65
sg20
F4.2169999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F0.3999999999999988
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'\x0c\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V18-mms.png
p145
sg21
F1.7
sg70
Vn
sa(dp146
g64
g65
sg20
F2.9169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\x19\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p152
sg21
F1.6000000000000001
sg70
Vn
sa(dp153
g64
g65
sg20
F4.6840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F0.41999999999999882
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'\x08\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p159
sg21
F1.8
sg70
Vn
sa(dp160
g64
g65
sg20
F5.0839999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F0.89999999999999947
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'\x00\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p166
sg21
F1.5
sg70
Vn
sa(dp167
g64
g65
sg20
F2.617
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F0.63999999999999901
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S'\x10\x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V22-daim.png
p173
sg21
F1.7
sg70
Vn
sa(dp174
g64
g65
sg20
F2.8839999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F0.45999999999999863
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S'\x1a\x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V35-raisins.png
p180
sg21
F1.8999999999999999
sg70
Vn
sa(dp181
g64
g65
sg20
F3.2839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\x06\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V7-olives.png
p187
sg21
F1.3999999999999999
sg70
Vn
sa(dp188
g64
g65
sg20
F6.2839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F0.77999999999999936
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'!\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V44-crunch.png
p194
sg21
F1.6000000000000001
sg70
Vn
sa(dp195
g64
g65
sg20
F3.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F0.31999999999999873
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'\x0f\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p201
sg21
F1.8
sg70
Vn
sa(dp202
g64
g65
sg20
F5.9340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F0.47999999999999865
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'$\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V48-twix.png
p208
sg21
F1.8999999999999999
sg70
Vn
sa(dp209
g64
g65
sg20
F3.2509999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F0.85999999999999899
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'\x11\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p215
sg21
F2
sg70
Vn
sa(dp216
g64
g65
sg20
F2.9670000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F0.45999999999999885
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S"'\x00\x00\x00"
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V51-mars.png
p222
sg21
F1.8
sg70
Vn
sa(dp223
g64
g65
sg20
F4.867
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F0.55999999999999872
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'&\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V50-polo.png
p229
sg21
F2
sg70
Vn
sa(dp230
g64
g65
sg20
F8.2170000000000005
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F0.85999999999999988
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S'\x01\x00\x00\x00'
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p236
sg21
F1.1000000000000001
sg70
Vn
sa(dp237
g64
g65
sg20
F3.601
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F1.02
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'\x14\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p243
sg21
F1.1000000000000001
sg70
Vn
sa(dp244
g64
g65
sg20
F3.1840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'\t\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p250
sg21
F1.7
sg70
Vn
sa(dp251
g64
g65
sg20
F3.1509999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F0.73999999999999932
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S'%\x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p257
sg21
F1.6000000000000001
sg70
Vn
sa(dp258
g64
g65
sg20
F3.3170000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F0.19999999999999915
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S'\x03\x00\x00\x00'
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V4-corn.png
p264
sg21
F1.2
sg70
Vn
sa(dp265
g64
g65
sg20
F6.9169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F0.47999999999999909
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'\x17\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p271
sg21
F1.5
sg70
Vn
sa(dp272
g64
g65
sg20
F4.1840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F0.29999999999999893
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'\x05\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p278
sg21
F1.3999999999999999
sg70
Vn
sa(dp279
g64
g65
sg20
F2.351
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F0.51999999999999935
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'\x18\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p285
sg21
F1.3
sg70
Vn
sa(dp286
g64
g65
sg20
F3.101
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'\x1d\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V40-sardines.png
p292
sg21
F1.8999999999999999
sg70
Vn
sa(dp293
g64
g65
sg20
F2.5339999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F0.49999999999999956
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'\x12\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p299
sg21
F1.1000000000000001
sg70
Vn
sa(dp300
g64
g65
sg20
F3.5510000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F0.87999999999999945
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'\x1f\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p306
sg21
F1.3999999999999999
sg70
Vn
sa(dp307
g64
g65
sg20
F6.4509999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F0.45999999999999885
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'\x1e\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p313
sg21
F1.7
sg70
Vn
sa(dp314
g64
g65
sg20
F2.5009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F0.53999999999999959
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'\x1b\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p320
sg21
F1
sg70
Vn
sa(dp321
g64
g65
sg20
F2.851
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F0.59999999999999942
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S'"\x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p327
sg21
F1.3
sg70
Vn
sa(dp328
g64
g65
sg20
F5.7670000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F0.81999999999999962
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'\x04\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p334
sg21
F1.2
sg70
Vn
sa(dp335
g64
g65
sg20
F2.6669999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S' \x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p341
sg21
F1.6000000000000001
sg70
Vn
sa(dp342
g64
g65
sg20
F2.6179999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S'\n\x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p348
sg21
F1.5
sg70
Vn
sa(dp349
g64
g65
sg20
F4.6509999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F0.19999999999999893
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'\x02\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p355
sg21
F1.3999999999999999
sg70
Vn
sa(dp356
g64
g65
sg20
F3.984
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F0.1599999999999985
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'\x07\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p362
sg21
F1.8999999999999999
sg70
Vn
sa(dp363
g64
g65
sg20
F8.9009999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F0.53999999999999893
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S'\x0e\x00\x00\x00'
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p369
sg21
F1.8
sg70
Vn
sa(dp370
g64
g65
sg20
F3.6840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F0.91999999999999948
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'\r\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p376
sg21
F1.3999999999999999
sg70
Vn
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F3.3668694858351955
sg58
Vn
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vn
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p381
sg26
F4.3000000000000007
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'4-corn.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'left'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F5.5334241087402916
sg27
F3.9670000000000001
sg70
Vn
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p390
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'1-treacle_cookies.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'right'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F1.6000394006296119
sg27
F1.667
sg70
Vn
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p399
sg26
F5.9999999999999982
sg28
F2.7000000000000002
sg59
g63
sg58
Vn
sg81
S'42-mrkipling_lemon_slices.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'right'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F2.5165975872660056
sg27
F1.8839999999999999
sg70
Vn
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p408
sg26
F5.9999999999999982
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'13-mccoys_steak_crisps.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'left'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F2.1000282817840343
sg27
F1.4339999999999999
sg70
Vn
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'18-mms.png'
p417
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'43-mrporky_pork_crackles_redo.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'left'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F1.800037518980389
sg27
F1.401
sg70
Vn
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p426
sg26
F5.9999999999999973
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'17-jacobs_mini_cheddars_redo.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'right'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F1.9833719071793894
sg27
F2.0510000000000002
sg70
Vn
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p435
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'36-fig_rolls.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'right'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F3.8171477135947498
sg27
F1.3839999999999999
sg70
Vn
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p444
sg26
F5.9999999999999982
sg28
F3
sg59
g63
sg58
Vn
sg81
S'18-mms.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'right'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F1.5002161047668778
sg27
F1.2010000000000001
sg70
Vn
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'48-twix.png'
p453
sg26
F5.1000000000000005
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'50-polo.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'left'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F1.6335039933765074
sg27
F2.4009999999999998
sg70
Vn
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'5-pineapple.png'
p462
sg26
F5.9999999999999964
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'40-sardines.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'left'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F2.0334574652806623
sg27
F1.0509999999999999
sg70
Vn
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p471
sg26
F5.4999999999999991
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'8-liquorice_catherine_wheels.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'left'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F1.8501994835132791
sg27
F5.5339999999999998
sg70
Vn
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'31-hobnobs.png'
p480
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'25-kitkat.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'right'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F1.9167224034499668
sg27
F1.167
sg70
Vn
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p489
sg26
F4.6000000000000014
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'2-steamed_puddings.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'right'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F3.1000051887967857
sg27
F1.917
sg70
Vn
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p498
sg26
F4.0999999999999996
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'51-mars.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'left'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F4.0667518541376921
sg27
F1.917
sg70
Vn
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p507
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'44-crunch.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'right'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F1.6500722154851246
sg27
F1.1839999999999999
sg70
Vn
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'29-beans.png'
p516
sg26
F5.3999999999999995
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'46-pistachios.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'right'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F1.6501737105973007
sg27
F2.0339999999999998
sg70
Vn
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p525
sg26
F5.9999999999999973
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'30-spaghetti_hoops.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'left'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F1.6502062118415779
sg27
F1.0509999999999999
sg70
Vn
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p534
sg26
F5.9999999999999973
sg28
F4
sg59
g63
sg58
Vn
sg81
S'23-crunchie_redo.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'right'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F1.3333712514504441
sg27
F0.93400000000000005
sg70
Vn
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'35-raisins.png'
p543
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'49-yorkie.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'right'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F1.4500472978616017
sg27
F0.83399999999999996
sg70
Vn
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'7-olives.png'
p552
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'22-daim.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'right'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F1.7166957752378948
sg27
F1.0509999999999999
sg70
Vn
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p561
sg26
F5.9999999999999973
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'33-ambrosia_rice.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'left'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F1.2167097450692381
sg27
F0.91700000000000004
sg70
Vn
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'25-kitkat.png'
p570
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'31-hobnobs.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'left'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F1.2667827588338696
sg27
F1.167
sg70
Vn
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p579
sg26
F4.2000000000000011
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'45-chewy_nougat_redo.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'right'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F2.4500338982288667
sg27
F3.7669999999999999
sg70
Vn
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p588
sg26
F4.4000000000000012
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'20-fruit_pastilles.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'left'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F2.3334764528481173
sg27
F1.284
sg70
Vn
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'22-daim.png'
p597
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'7-olives.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'left'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F1.0333861906219681
sg27
F0.96699999999999997
sg70
Vn
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'46-pistachios.png'
p606
sg26
F5.3999999999999995
sg28
F4
sg59
g63
sg58
Vn
sg81
S'29-beans.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'left'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F1.6333745585980068
sg27
F2.8839999999999999
sg70
Vn
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p615
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'19-caramello_redo.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'right'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F0.9666953475898481
sg27
F0.95099999999999996
sg70
Vn
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'38-maltesers.png'
p624
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'6-sour_patch_kids.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'left'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F0.86649572152236942
sg27
F1.034
sg70
Vn
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p633
sg26
F5.9999999999999982
sg28
F3
sg59
g63
sg58
Vn
sg81
S'3-ellas_strawberries_apples.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'right'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F1.0833984783712367
sg27
F1.1839999999999999
sg70
Vn
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p642
sg26
F5.9999999999999973
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'38-maltesers.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'right'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F1.5331555458251387
sg27
F1.0669999999999999
sg70
Vn
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'4-corn.png'
p651
sg26
F5.3999999999999995
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'10-bounty_redo.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'right'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F1.7334113933393382
sg27
F1.7669999999999999
sg70
Vn
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'44-crunch.png'
p660
sg26
F5.9999999999999973
sg28
F4
sg59
g63
sg58
Vn
sg81
S'26-walkers_smoky_bacon.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'left'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F1.3834436950128293
sg27
F2.851
sg70
Vn
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p669
sg26
F5.9999999999999973
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'left'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F1.9501353933446808
sg27
F1.7170000000000001
sg70
Vn
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'49-yorkie.png'
p678
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'35-raisins.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'left'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F1.2335160245384031
sg27
F2.5009999999999999
sg70
Vn
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p687
sg26
F4.5
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'41-peanuts_redo.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'left'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F5.0332065784823499
sg27
F2.4169999999999998
sg70
Vn
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'40-sardines.png'
p696
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'5-pineapple.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'right'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F2.0999105360497197
sg27
F1.1839999999999999
sg70
Vn
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'50-polo.png'
p705
sg26
F5.1000000000000005
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'48-twix.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'right'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F1.950181294221693
sg27
F1.784
sg70
Vn
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'51-mars.png'
p714
sg26
F3.8999999999999995
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'27-hartleys_raspberries_jelly.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'right'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F5.9499934142222628
sg27
F1.5840000000000001
sg70
Vn
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p723
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'21-nakd_banana_crunch.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'left'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F1.5668365284363972
sg27
F1.1839999999999999
sg70
Vn
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p732
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'16-skips_prawn.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'left'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F1.2667305857794418
sg27
F1.0509999999999999
sg70
Vn
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vn
sg59
g63
sg30
F306.87644851489313
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp741
g64
g65
sg56
g57
sg58
Vn
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F1.2499787601518619
sg66
g67
sg68
g69
sg70
Vn
sa(dp743
g64
g65
sg82
S'52-aero_mousse.png'
p744
sg83
S'52-aero_mousse.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'14-discos_salt_vinegar.png'
p749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\t\x12 "\x0b\x89 '
tRp754
sa(dp755
g64
g65
sg82
S'12-topic.png'
p756
sg83
S'39-mackerel.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'39-mackerel.png'
p761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\t\x12 )\t7`'
tRp765
sa(dp766
g64
g65
sg82
S'32-hovis_crackers.png'
p767
sg83
S'32-hovis_crackers.png'
p768
sg56
g57
sS'practice_loop.thisN'
p769
I2
sS'practice_loop.thisTrialN'
p770
I2
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p771
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p772
sg33
g772
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p773
sS'practice_loop.thisIndex'
p774
g60
(g99
S'\x02\x00\x00\x00'
tRp775
sg34
g753
(S'\x07\xdf\x07\t\x12 0\x01\xad\xb0'
tRp776
sa(dp777
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p778
sg83
S'9-yu_mango_pieces.png'
p779
sg56
g57
sS'practice_loop.thisN'
p780
I3
sS'practice_loop.thisTrialN'
p781
I3
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p782
I0
sg84
S'9-yu_mango_pieces.png'
p783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p784
sS'practice_loop.thisIndex'
p785
g60
(g99
S'\x03\x00\x00\x00'
tRp786
sg34
g753
(S'\x07\xdf\x07\t\x12 8\x08%\xf0'
tRp787
sa(dp788
g64
g65
sg82
g744
sg83
S'14-discos_salt_vinegar.png'
p789
sg56
g57
sS'practice_loop.thisN'
p790
I4
sS'practice_loop.thisTrialN'
p791
I4
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p792
I0
sg84
g749
sg33
g749
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p793
sS'practice_loop.thisIndex'
p794
g60
(g99
S'\x04\x00\x00\x00'
tRp795
sg34
g753
(S'\x07\xdf\x07\t\x12!\x07\x01\xb1\x98'
tRp796
sa(dp797
g64
g65
sg82
S'53-cheestrings.png'
p798
sg83
S'47-picnic.png'
p799
sg56
g57
sS'practice_loop.thisN'
p800
I5
sS'practice_loop.thisTrialN'
p801
I5
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p802
I0
sg84
S'47-picnic.png'
p803
sg33
g798
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p804
sS'practice_loop.thisIndex'
p805
g60
(g99
S'\x05\x00\x00\x00'
tRp806
sg34
g753
(S'\x07\xdf\x07\t\x12!\r\x03r\xd0'
tRp807
sa(dp808
g64
g65
sg82
S'15-walnut_whip.png'
p809
sg83
S'28-maple_pecan.png'
p810
sg56
g57
sS'practice_loop.thisN'
p811
I6
sS'practice_loop.thisTrialN'
p812
I6
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p813
I0
sg84
S'28-maple_pecan.png'
p814
sg33
g809
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p815
sS'practice_loop.thisIndex'
p816
g60
(g99
S'\x06\x00\x00\x00'
tRp817
sg34
g753
(S'\x07\xdf\x07\t\x12!\x13\x05\xeb\xa0'
tRp818
sa(dp819
g64
g65
sg82
g778
sg83
S'37-nakd_cashew_cookie.png'
p820
sg56
g57
sS'practice_loop.thisN'
p821
I7
sS'practice_loop.thisTrialN'
p822
I7
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p823
I0
sg84
g783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p824
sS'practice_loop.thisIndex'
p825
g60
(g99
S'\x07\x00\x00\x00'
tRp826
sg34
g753
(S'\x07\xdf\x07\t\x12!\x1a\x0c-0'
tRp827
sa(dp828
g64
g65
sg82
g756
sg83
S'12-topic.png'
p829
sg56
g57
sS'practice_loop.thisN'
p830
I8
sS'practice_loop.thisTrialN'
p831
I8
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p832
I0
sg84
g761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p833
sS'practice_loop.thisIndex'
p834
g60
(g99
S'\x08\x00\x00\x00'
tRp835
sg34
g753
(S'\x07\xdf\x07\t\x12!#\x07\xac\xd8'
tRp836
sa(dp837
g64
g65
sg82
S'11-snickers.png'
p838
sg83
S'11-snickers.png'
p839
sg56
g57
sS'practice_loop.thisN'
p840
I9
sS'practice_loop.thisTrialN'
p841
I9
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p842
I0
sg84
S'54-frubes_yogurt.png'
p843
sg33
g838
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p844
sS'practice_loop.thisIndex'
p845
g60
(g99
S'\t\x00\x00\x00'
tRp846
sg34
g753
(S'\x07\xdf\x07\t\x12!)\n\x9e\xc0'
tRp847
sa(dp848
g64
g65
sg82
g767
sg83
S'24-food_doctor_apple_walnut_bar.png'
p849
sg56
g57
sS'practice_loop.thisN'
p850
I10
sS'practice_loop.thisTrialN'
p851
I10
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p852
I0
sg84
g772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S'\x07\xdf\x07\t\x12!2\x0e\xecP'
tRp856
sa(dp857
g64
g65
sg82
g798
sg83
S'53-cheestrings.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g803
sg33
g798
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S'\x07\xdf\x07\t\x12!;\x08E0'
tRp865
sa(dp866
g64
g65
sg82
g809
sg83
S'15-walnut_whip.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g814
sg33
g809
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S'\x07\xdf\x07\t\x12"\x06\x06\xe9\x88'
tRp874
sa(dp875
g64
g65
sg82
g838
sg83
S'54-frubes_yogurt.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g843
sg33
g838
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S'\x07\xdf\x07\t\x12"\x0c\n\x19\xf0'
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F5.5501237613207195
sg66
g67
sg68
g69
sg70
Vn
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vn
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'40-sardines.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'right'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'40-sardines.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'5-pineapple.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
S'5-pineapple.png'
p908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p909
I0
sS'img_wrong'
p910
g900
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vn
sS'block_loop.thisTrialN'
p912
I0
sg39
F1.349845961209212
sg34
g753
(S'\x07\xdf\x07\t\x12)\x14\x05_\x00'
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'right'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'36-fig_rolls.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'36-fig_rolls.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p926
I0
sg910
S'34-hula_hoops_bbq_beef_redo.png'
p927
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vn
sS'block_loop.thisTrialN'
p929
I0
sg39
F1.766546697159356
sg34
g753
(S'\x07\xdf\x07\t\x12)\x1a\x0b/H'
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'43-mrporky_pork_crackles_redo.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'right'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'18-mms.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'18-mms.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p943
I0
sg910
S'43-mrporky_pork_crackles_redo.png'
p944
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vn
sS'block_loop.thisTrialN'
p946
I0
sg39
F1.3666496747864585
sg34
g753
(S'\x07\xdf\x07\t\x12)!\x08%\xf0'
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
S'26-walkers_smoky_bacon.png'
p950
sS'block_loop.thisIndex'
p951
g889
sg38
S'right'
p952
sg59
g63
sS'trial_loop.thisN'
p953
I3
sg33
S'44-crunch.png'
p954
sg64
g65
sS'trial_loop.thisIndex'
p955
g60
(g99
S'\x03\x00\x00\x00'
tRp956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p957
I0
sg904
S'44-crunch.png'
p958
sS'block_loop.thisRepN'
p959
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p960
I0
sg910
S'26-walkers_smoky_bacon.png'
p961
sg55
g11
sS'block_loop.thisTrial'
p962
Nsg70
Vn
sS'block_loop.thisTrialN'
p963
I0
sg39
F1.5333106394828064
sg34
g753
(S"\x07\xdf\x07\t\x12)'\x0e0\xd0"
tRp964
sa(dp965
S'trial_loop.thisTrialN'
p966
I4
sg895
S'25-kitkat.png'
p967
sS'block_loop.thisIndex'
p968
g889
sg38
S'left'
p969
sg59
g63
sS'trial_loop.thisN'
p970
I4
sg33
S'31-hobnobs.png'
p971
sg64
g65
sS'trial_loop.thisIndex'
p972
g60
(g99
S'\x04\x00\x00\x00'
tRp973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p974
I0
sg904
S'31-hobnobs.png'
p975
sS'block_loop.thisRepN'
p976
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p977
I0
sg910
S'25-kitkat.png'
p978
sg55
g11
sS'block_loop.thisTrial'
p979
Nsg70
Vn
sS'block_loop.thisTrialN'
p980
I0
sg39
F1.4499965503091516
sg34
g753
(S'\x07\xdf\x07\t\x12).\x07\x99P'
tRp981
sa(dp982
S'trial_loop.thisTrialN'
p983
I5
sg895
g916
sS'block_loop.thisIndex'
p984
g889
sg38
S'right'
p985
sg59
g63
sS'trial_loop.thisN'
p986
I5
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p987
g60
(g99
S'\x05\x00\x00\x00'
tRp988
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p989
I0
sg904
g924
sS'block_loop.thisRepN'
p990
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p991
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p992
Nsg70
Vn
sS'block_loop.thisTrialN'
p993
I0
sg39
F1.533683548499539
sg34
g753
(S'\x07\xdf\x07\t\x12)4\x0e\xd4\xe0'
tRp994
sa(dp995
S'trial_loop.thisTrialN'
p996
I6
sg895
S'17-jacobs_mini_cheddars_redo.png'
p997
sS'block_loop.thisIndex'
p998
g889
sg38
S'right'
p999
sg59
g63
sS'trial_loop.thisN'
p1000
I6
sg33
S'17-jacobs_mini_cheddars_redo.png'
p1001
sg64
g65
sS'trial_loop.thisIndex'
p1002
g60
(g99
S'\x06\x00\x00\x00'
tRp1003
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1004
I0
sg904
S'8-liquorice_catherine_wheels.png'
p1005
sS'block_loop.thisRepN'
p1006
I0
sg907
S'8-liquorice_catherine_wheels.png'
p1007
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1008
I0
sg910
g1001
sg55
g11
sS'block_loop.thisTrial'
p1009
Nsg70
Vn
sS'block_loop.thisTrialN'
p1010
I0
sg39
F2.5999504498577153
sg34
g753
(S'\x07\xdf\x07\t\x12);\x089x'
tRp1011
sa(dp1012
S'trial_loop.thisTrialN'
p1013
I7
sg895
S'1-treacle_cookies.png'
p1014
sS'block_loop.thisIndex'
p1015
g889
sg38
S'left'
p1016
sg59
g63
sS'trial_loop.thisN'
p1017
I7
sg33
S'21-nakd_banana_crunch.png'
p1018
sg64
g65
sS'trial_loop.thisIndex'
p1019
g60
(g99
S'\x07\x00\x00\x00'
tRp1020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1021
I0
sg904
S'21-nakd_banana_crunch.png'
p1022
sS'block_loop.thisRepN'
p1023
I0
sg907
S'1-treacle_cookies.png'
p1024
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1025
I0
sg910
g1018
sg55
g11
sS'block_loop.thisTrial'
p1026
Nsg70
Vn
sS'block_loop.thisTrialN'
p1027
I0
sg39
F1.8666713422826433
sg34
g753
(S'\x07\xdf\x07\t\x12*\x07\x02\xca\xd8'
tRp1028
sa(dp1029
S'trial_loop.thisTrialN'
p1030
I8
sg895
S'18-mms.png'
p1031
sS'block_loop.thisIndex'
p1032
g889
sg38
S'left'
p1033
sg59
g63
sS'trial_loop.thisN'
p1034
I8
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1035
g60
(g99
S'\x08\x00\x00\x00'
tRp1036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1037
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1038
sS'block_loop.thisRepN'
p1039
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1040
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p1041
Nsg70
Vn
sS'block_loop.thisTrialN'
p1042
I0
sg39
F1.3163833641519886
sg34
g753
(S'\x07\xdf\x07\t\x12*\x0e\x014\x98'
tRp1043
sa(dp1044
S'trial_loop.thisTrialN'
p1045
I9
sg895
S'6-sour_patch_kids.png'
p1046
sS'block_loop.thisIndex'
p1047
g889
sg38
S'right'
p1048
sg59
g63
sS'trial_loop.thisN'
p1049
I9
sg33
S'38-maltesers.png'
p1050
sg64
g65
sS'trial_loop.thisIndex'
p1051
g60
(g99
S'\t\x00\x00\x00'
tRp1052
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1053
I0
sg904
S'38-maltesers.png'
p1054
sS'block_loop.thisRepN'
p1055
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1056
I0
sg910
S'6-sour_patch_kids.png'
p1057
sg55
g11
sS'block_loop.thisTrial'
p1058
Nsg70
Vn
sS'block_loop.thisTrialN'
p1059
I0
sg39
F1.2830282492832339
sg34
g753
(S'\x07\xdf\x07\t\x12*\x14\x06\x87\xe0'
tRp1060
sa(dp1061
S'trial_loop.thisTrialN'
p1062
I10
sg895
S'22-daim.png'
p1063
sS'block_loop.thisIndex'
p1064
g889
sg38
S'left'
p1065
sg59
g63
sS'trial_loop.thisN'
p1066
I10
sg33
S'7-olives.png'
p1067
sg64
g65
sS'trial_loop.thisIndex'
p1068
g60
(g99
S'\n\x00\x00\x00'
tRp1069
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1070
I0
sg904
S'7-olives.png'
p1071
sS'block_loop.thisRepN'
p1072
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1073
I0
sg910
S'22-daim.png'
p1074
sg55
g11
sS'block_loop.thisTrial'
p1075
Nsg70
Vn
sS'block_loop.thisTrialN'
p1076
I0
sg39
F1.4337091503548436
sg34
g753
(S'\x07\xdf\x07\t\x12*\x1a\x0bb\x10'
tRp1077
sa(dp1078
S'trial_loop.thisTrialN'
p1079
I11
sg895
S'44-crunch.png'
p1080
sS'block_loop.thisIndex'
p1081
g889
sg38
S'left'
p1082
sg59
g63
sS'trial_loop.thisN'
p1083
I11
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1084
g60
(g99
S'\x0b\x00\x00\x00'
tRp1085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1086
I0
sg904
S'26-walkers_smoky_bacon.png'
p1087
sS'block_loop.thisRepN'
p1088
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1089
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p1090
Nsg70
Vn
sS'block_loop.thisTrialN'
p1091
I0
sg39
F1.7665598116982437
sg34
g753
(S'\x07\xdf\x07\t\x12*!\x03[`'
tRp1092
sa(dp1093
S'trial_loop.thisTrialN'
p1094
I12
sg895
S'2-steamed_puddings.png'
p1095
sS'block_loop.thisIndex'
p1096
g889
sg38
S'right'
p1097
sg59
g63
sS'trial_loop.thisN'
p1098
I12
sg33
S'20-fruit_pastilles.png'
p1099
sg64
g65
sS'trial_loop.thisIndex'
p1100
g60
(g99
S'\x0c\x00\x00\x00'
tRp1101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1102
I0
sg904
S'20-fruit_pastilles.png'
p1103
sS'block_loop.thisRepN'
p1104
I0
sg907
S'2-steamed_puddings.png'
p1105
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1106
I0
sg910
g1099
sg55
g11
sS'block_loop.thisTrial'
p1107
Nsg70
Vn
sS'block_loop.thisTrialN'
p1108
I0
sg39
F1.4333114377586753
sg34
g753
(S'\x07\xdf\x07\t\x12*(\x00\x17p'
tRp1109
sa(dp1110
S'trial_loop.thisTrialN'
p1111
I13
sg895
S'27-hartleys_raspberries_jelly.png'
p1112
sS'block_loop.thisIndex'
p1113
g889
sg38
S'right'
p1114
sg59
g63
sS'trial_loop.thisN'
p1115
I13
sg33
S'51-mars.png'
p1116
sg64
g65
sS'trial_loop.thisIndex'
p1117
g60
(g99
S'\r\x00\x00\x00'
tRp1118
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1119
I0
sg904
S'51-mars.png'
p1120
sS'block_loop.thisRepN'
p1121
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1122
I0
sg910
S'27-hartleys_raspberries_jelly.png'
p1123
sg55
g11
sS'block_loop.thisTrial'
p1124
Nsg70
Vn
sS'block_loop.thisTrialN'
p1125
I0
sg39
F1.3833208175055915
sg34
g753
(S'\x07\xdf\x07\t\x12*.\x07S\x00'
tRp1126
sa(dp1127
S'trial_loop.thisTrialN'
p1128
I14
sg895
g967
sS'block_loop.thisIndex'
p1129
g889
sg38
S'right'
p1130
sg59
g63
sS'trial_loop.thisN'
p1131
I14
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1132
g60
(g99
S'\x0e\x00\x00\x00'
tRp1133
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1134
I0
sg904
g975
sS'block_loop.thisRepN'
p1135
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1136
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p1137
Nsg70
Vn
sS'block_loop.thisTrialN'
p1138
I0
sg39
F2.1498811993988056
sg34
g753
(S'\x07\xdf\x07\t\x12*4\r\x9c`'
tRp1139
sa(dp1140
S'trial_loop.thisTrialN'
p1141
I15
sg895
g1014
sS'block_loop.thisIndex'
p1142
g889
sg38
S'right'
p1143
sg59
g63
sS'trial_loop.thisN'
p1144
I15
sg33
g1024
sg64
g65
sS'trial_loop.thisIndex'
p1145
g60
(g99
S'\x0f\x00\x00\x00'
tRp1146
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1147
I0
sg904
g1022
sS'block_loop.thisRepN'
p1148
I0
sg907
g1024
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1149
I0
sg910
g1018
sg55
g11
sS'block_loop.thisTrial'
p1150
Nsg70
Vn
sS'block_loop.thisTrialN'
p1151
I0
sg39
F1.4333339605509536
sg34
g753
(S'\x07\xdf\x07\t\x12+\x00\x01D8'
tRp1152
sa(dp1153
S'trial_loop.thisTrialN'
p1154
I16
sg895
S'13-mccoys_steak_crisps.png'
p1155
sS'block_loop.thisIndex'
p1156
g889
sg38
S'right'
p1157
sg59
g63
sS'trial_loop.thisN'
p1158
I16
sg33
S'13-mccoys_steak_crisps.png'
p1159
sg64
g65
sS'trial_loop.thisIndex'
p1160
g60
(g99
S'\x10\x00\x00\x00'
tRp1161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1162
I0
sg904
S'3-ellas_strawberries_apples.png'
p1163
sS'block_loop.thisRepN'
p1164
I0
sg907
g1159
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1165
I0
sg910
S'3-ellas_strawberries_apples.png'
p1166
sg55
g11
sS'block_loop.thisTrial'
p1167
Nsg70
Vn
sS'block_loop.thisTrialN'
p1168
I0
sg39
F1.5999051191720355
sg34
g753
(S'\x07\xdf\x07\t\x12+\x06\x08E0'
tRp1169
sa(dp1170
S'trial_loop.thisTrialN'
p1171
I17
sg895
S'7-olives.png'
p1172
sS'block_loop.thisIndex'
p1173
g889
sg38
S'left'
p1174
sg59
g63
sS'trial_loop.thisN'
p1175
I17
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p1176
g60
(g99
S'\x11\x00\x00\x00'
tRp1177
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1178
I0
sg904
S'22-daim.png'
p1179
sS'block_loop.thisRepN'
p1180
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1181
I0
sg910
g1074
sg55
g11
sS'block_loop.thisTrial'
p1182
Nsg70
Vn
sS'block_loop.thisTrialN'
p1183
I0
sg39
F2.366532214149629
sg34
g753
(S'\x07\xdf\x07\t\x12+\r\x02\x9f\xe0'
tRp1184
sa(dp1185
S'trial_loop.thisTrialN'
p1186
I18
sg895
S'33-ambrosia_rice.png'
p1187
sS'block_loop.thisIndex'
p1188
g889
sg38
S'right'
p1189
sg59
g63
sS'trial_loop.thisN'
p1190
I18
sg33
S'23-crunchie_redo.png'
p1191
sg64
g65
sS'trial_loop.thisIndex'
p1192
g60
(g99
S'\x12\x00\x00\x00'
tRp1193
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1194
I0
sg904
S'23-crunchie_redo.png'
p1195
sS'block_loop.thisRepN'
p1196
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1197
I0
sg910
S'33-ambrosia_rice.png'
p1198
sg55
g11
sS'block_loop.thisTrial'
p1199
Nsg70
Vn
sS'block_loop.thisTrialN'
p1200
I0
sg39
F1.3998901800041494
sg34
g753
(S'\x07\xdf\x07\t\x12+\x14\x08\xe1p'
tRp1201
sa(dp1202
S'trial_loop.thisTrialN'
p1203
I19
sg895
S'48-twix.png'
p1204
sS'block_loop.thisIndex'
p1205
g889
sg38
S'left'
p1206
sg59
g63
sS'trial_loop.thisN'
p1207
I19
sg33
S'48-twix.png'
p1208
sg64
g65
sS'trial_loop.thisIndex'
p1209
g60
(g99
S'\x13\x00\x00\x00'
tRp1210
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1211
I0
sg904
S'50-polo.png'
p1212
sS'block_loop.thisRepN'
p1213
I0
sg907
g1208
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1214
I0
sg910
S'50-polo.png'
p1215
sg55
g11
sS'block_loop.thisTrial'
p1216
Nsg70
Vn
sS'block_loop.thisTrialN'
p1217
I0
sg39
F2.2496902403327113
sg34
g753
(S'\x07\xdf\x07\t\x12+\x1b\x00#('
tRp1218
sa(dp1219
S'trial_loop.thisTrialN'
p1220
I20
sg895
S'35-raisins.png'
p1221
sS'block_loop.thisIndex'
p1222
g889
sg38
S'right'
p1223
sg59
g63
sS'trial_loop.thisN'
p1224
I20
sg33
S'35-raisins.png'
p1225
sg64
g65
sS'trial_loop.thisIndex'
p1226
g60
(g99
S'\x14\x00\x00\x00'
tRp1227
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1228
I0
sg904
S'49-yorkie.png'
p1229
sS'block_loop.thisRepN'
p1230
I0
sg907
g1225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1231
I0
sg910
S'49-yorkie.png'
p1232
sg55
g11
sS'block_loop.thisTrial'
p1233
Nsg70
Vn
sS'block_loop.thisTrialN'
p1234
I0
sg39
F1.4170160550456785
sg34
g753
(S'\x07\xdf\x07\t\x12+"\x04|p'
tRp1235
sa(dp1236
S'trial_loop.thisTrialN'
p1237
I21
sg895
g1187
sS'block_loop.thisIndex'
p1238
g889
sg38
S'right'
p1239
sg59
g63
sS'trial_loop.thisN'
p1240
I21
sg33
g1198
sg64
g65
sS'trial_loop.thisIndex'
p1241
g60
(g99
S'\x15\x00\x00\x00'
tRp1242
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1243
I0
sg904
g1195
sS'block_loop.thisRepN'
p1244
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1245
I0
sg910
g1198
sg55
g11
sS'block_loop.thisTrial'
p1246
Nsg70
Vn
sS'block_loop.thisTrialN'
p1247
I0
sg39
F1.6165657132369233
sg34
g753
(S'\x07\xdf\x07\t\x12+(\x0by\x80'
tRp1248
sa(dp1249
S'trial_loop.thisTrialN'
p1250
I22
sg895
g1172
sS'block_loop.thisIndex'
p1251
g889
sg38
S'left'
p1252
sg59
g63
sS'trial_loop.thisN'
p1253
I22
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p1254
g60
(g99
S'\x16\x00\x00\x00'
tRp1255
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1256
I0
sg904
g1179
sS'block_loop.thisRepN'
p1257
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1258
I0
sg910
g1074
sg55
g11
sS'block_loop.thisTrial'
p1259
Nsg70
Vn
sS'block_loop.thisTrialN'
p1260
I0
sg39
F1.5166531815011695
sg34
g753
(S'\x07\xdf\x07\t\x12+/\x06\x12\xb0'
tRp1261
sa(dp1262
S'trial_loop.thisTrialN'
p1263
I23
sg895
S'38-maltesers.png'
p1264
sS'block_loop.thisIndex'
p1265
g889
sg38
S'left'
p1266
sg59
g63
sS'trial_loop.thisN'
p1267
I23
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p1268
g60
(g99
S'\x17\x00\x00\x00'
tRp1269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1270
I0
sg904
S'6-sour_patch_kids.png'
p1271
sS'block_loop.thisRepN'
p1272
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1273
I0
sg910
g1057
sg55
g11
sS'block_loop.thisTrial'
p1274
Nsg70
Vn
sS'block_loop.thisTrialN'
p1275
I0
sg39
F1.2163872985147464
sg34
g753
(S'\x07\xdf\x07\t\x12+5\x0e~\xf0'
tRp1276
sa(dp1277
S'trial_loop.thisTrialN'
p1278
I24
sg895
S'19-caramello_redo.png'
p1279
sS'block_loop.thisIndex'
p1280
g889
sg38
S'left'
p1281
sg59
g63
sS'trial_loop.thisN'
p1282
I24
sg33
S'19-caramello_redo.png'
p1283
sg64
g65
sS'trial_loop.thisIndex'
p1284
g60
(g99
S'\x18\x00\x00\x00'
tRp1285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1286
I0
sg904
S'30-spaghetti_hoops.png'
p1287
sS'block_loop.thisRepN'
p1288
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1289
I0
sg910
S'30-spaghetti_hoops.png'
p1290
sg55
g11
sS'block_loop.thisTrial'
p1291
Nsg70
Vn
sS'block_loop.thisTrialN'
p1292
I0
sg39
F1.4333031698952254
sg34
g753
(S'\x07\xdf\x07\t\x12,\x00\x02\xe60'
tRp1293
sa(dp1294
S'trial_loop.thisTrialN'
p1295
I25
sg895
g1204
sS'block_loop.thisIndex'
p1296
g889
sg38
S'left'
p1297
sg59
g63
sS'trial_loop.thisN'
p1298
I25
sg33
g1208
sg64
g65
sS'trial_loop.thisIndex'
p1299
g60
(g99
S'\x19\x00\x00\x00'
tRp1300
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1301
I0
sg904
g1212
sS'block_loop.thisRepN'
p1302
I0
sg907
g1208
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1303
I0
sg910
g1215
sg55
g11
sS'block_loop.thisTrial'
p1304
Nsg70
Vn
sS'block_loop.thisTrialN'
p1305
I0
sg39
F1.6332990074552072
sg34
g753
(S'\x07\xdf\x07\t\x12,\x06\n!\xc0'
tRp1306
sa(dp1307
S'trial_loop.thisTrialN'
p1308
I26
sg895
g1112
sS'block_loop.thisIndex'
p1309
g889
sg38
S'right'
p1310
sg59
g63
sS'trial_loop.thisN'
p1311
I26
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p1312
g60
(g99
S'\x1a\x00\x00\x00'
tRp1313
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1314
I0
sg904
g1120
sS'block_loop.thisRepN'
p1315
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1316
I0
sg910
g1123
sg55
g11
sS'block_loop.thisTrial'
p1317
Nsg70
Vn
sS'block_loop.thisTrialN'
p1318
I0
sg39
F2.1832300420974207
sg34
g753
(S'\x07\xdf\x07\t\x12,\r\x04\xf5\x88'
tRp1319
sa(dp1320
S'trial_loop.thisTrialN'
p1321
I27
sg895
g1155
sS'block_loop.thisIndex'
p1322
g889
sg38
S'left'
p1323
sg59
g63
sS'trial_loop.thisN'
p1324
I27
sg33
g1159
sg64
g65
sS'trial_loop.thisIndex'
p1325
g60
(g99
S'\x1b\x00\x00\x00'
tRp1326
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1327
I0
sg904
g1163
sS'block_loop.thisRepN'
p1328
I0
sg907
g1159
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1329
I0
sg910
g1166
sg55
g11
sS'block_loop.thisTrial'
p1330
Nsg70
Vn
sS'block_loop.thisTrialN'
p1331
I0
sg39
F1.5166249567337218
sg34
g753
(S'\x07\xdf\x07\t\x12,\x14\x08\\\xa0'
tRp1332
sa(dp1333
S'trial_loop.thisTrialN'
p1334
I28
sg895
S'21-nakd_banana_crunch.png'
p1335
sS'block_loop.thisIndex'
p1336
g889
sg38
S'right'
p1337
sg59
g63
sS'trial_loop.thisN'
p1338
I28
sg33
g1024
sg64
g65
sS'trial_loop.thisIndex'
p1339
g60
(g99
S'\x1c\x00\x00\x00'
tRp1340
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1341
I0
sg904
S'1-treacle_cookies.png'
p1342
sS'block_loop.thisRepN'
p1343
I0
sg907
g1024
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1344
I0
sg910
g1018
sg55
g11
sS'block_loop.thisTrial'
p1345
Nsg70
Vn
sS'block_loop.thisTrialN'
p1346
I0
sg39
F1.299898961042345
sg34
g753
(S'\x07\xdf\x07\t\x12,\x1b\x01\x86\xa0'
tRp1347
sa(dp1348
S'trial_loop.thisTrialN'
p1349
I29
sg895
g933
sS'block_loop.thisIndex'
p1350
g889
sg38
S'right'
p1351
sg59
g63
sS'trial_loop.thisN'
p1352
I29
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1353
g60
(g99
S'\x1d\x00\x00\x00'
tRp1354
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1355
I0
sg904
g941
sS'block_loop.thisRepN'
p1356
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1357
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p1358
Nsg70
Vn
sS'block_loop.thisTrialN'
p1359
I0
sg39
F1.8999548973952187
sg34
g753
(S'\x07\xdf\x07\t\x12,!\x06\x9fP'
tRp1360
sa(dp1361
S'trial_loop.thisTrialN'
p1362
I30
sg895
S'29-beans.png'
p1363
sS'block_loop.thisIndex'
p1364
g889
sg38
S'right'
p1365
sg59
g63
sS'trial_loop.thisN'
p1366
I30
sg33
S'46-pistachios.png'
p1367
sg64
g65
sS'trial_loop.thisIndex'
p1368
g60
(g99
S'\x1e\x00\x00\x00'
tRp1369
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1370
I0
sg904
S'46-pistachios.png'
p1371
sS'block_loop.thisRepN'
p1372
I0
sg907
g1367
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1373
I0
sg910
S'29-beans.png'
p1374
sg55
g11
sS'block_loop.thisTrial'
p1375
Nsg70
Vn
sS'block_loop.thisTrialN'
p1376
I0
sg39
F2.5669901965957251
sg34
g753
(S'\x07\xdf\x07\t\x12,(\x05~@'
tRp1377
sa(dp1378
S'trial_loop.thisTrialN'
p1379
I31
sg895
S'51-mars.png'
p1380
sS'block_loop.thisIndex'
p1381
g889
sg38
S'left'
p1382
sg59
g63
sS'trial_loop.thisN'
p1383
I31
sg33
g1123
sg64
g65
sS'trial_loop.thisIndex'
p1384
g60
(g99
S'\x1f\x00\x00\x00'
tRp1385
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1386
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p1387
sS'block_loop.thisRepN'
p1388
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1389
I0
sg910
g1123
sg55
g11
sS'block_loop.thisTrial'
p1390
Nsg70
Vn
sS'block_loop.thisTrialN'
p1391
I0
sg39
F1.4165747223560174
sg34
g753
(S'\x07\xdf\x07\t\x12,/\x0e\x9aH'
tRp1392
sa(dp1393
S'trial_loop.thisTrialN'
p1394
I32
sg895
g1221
sS'block_loop.thisIndex'
p1395
g889
sg38
S'left'
p1396
sg59
g63
sS'trial_loop.thisN'
p1397
I32
sg33
g1225
sg64
g65
sS'trial_loop.thisIndex'
p1398
g60
(g99
S' \x00\x00\x00'
tRp1399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1400
I0
sg904
g1229
sS'block_loop.thisRepN'
p1401
I0
sg907
g1225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1402
I0
sg910
g1232
sg55
g11
sS'block_loop.thisTrial'
p1403
Nsg70
Vn
sS'block_loop.thisTrialN'
p1404
I0
sg39
F1.0500014540048141
sg34
g753
(S'\x07\xdf\x07\t\x12,6\x06Y\x00'
tRp1405
sa(dp1406
S'trial_loop.thisTrialN'
p1407
I33
sg895
S'31-hobnobs.png'
p1408
sS'block_loop.thisIndex'
p1409
g889
sg38
S'left'
p1410
sg59
g63
sS'trial_loop.thisN'
p1411
I33
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p1412
g60
(g99
S'!\x00\x00\x00'
tRp1413
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1414
I0
sg904
S'25-kitkat.png'
p1415
sS'block_loop.thisRepN'
p1416
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1417
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p1418
Nsg70
Vn
sS'block_loop.thisTrialN'
p1419
I0
sg39
F1.1832343185778882
sg34
g753
(S'\x07\xdf\x07\t\x12-\x00\x07\xa1 '
tRp1420
sa(dp1421
S'trial_loop.thisTrialN'
p1422
I34
sg895
g933
sS'block_loop.thisIndex'
p1423
g889
sg38
S'right'
p1424
sg59
g63
sS'trial_loop.thisN'
p1425
I34
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1426
g60
(g99
S'"\x00\x00\x00'
tRp1427
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1428
I0
sg904
g941
sS'block_loop.thisRepN'
p1429
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1430
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p1431
Nsg70
Vn
sS'block_loop.thisTrialN'
p1432
I0
sg39
F1.499994868223439
sg34
g753
(S'\x07\xdf\x07\t\x12-\x06\n\xd1\x88'
tRp1433
sa(dp1434
S'trial_loop.thisTrialN'
p1435
I35
sg895
g1363
sS'block_loop.thisIndex'
p1436
g889
sg38
S'right'
p1437
sg59
g63
sS'trial_loop.thisN'
p1438
I35
sg33
g1374
sg64
g65
sS'trial_loop.thisIndex'
p1439
g60
(g99
S'#\x00\x00\x00'
tRp1440
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1441
I0
sg904
g1371
sS'block_loop.thisRepN'
p1442
I0
sg907
g1367
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1443
I0
sg910
g1374
sg55
g11
sS'block_loop.thisTrial'
p1444
Nsg70
Vn
sS'block_loop.thisTrialN'
p1445
I0
sg39
F1.7337013386531908
sg34
g753
(S'\x07\xdf\x07\t\x12-\r\x03\xbd\x08'
tRp1446
sa(dp1447
S'trial_loop.thisTrialN'
p1448
I36
sg895
g1279
sS'block_loop.thisIndex'
p1449
g889
sg38
S'left'
p1450
sg59
g63
sS'trial_loop.thisN'
p1451
I36
sg33
g1290
sg64
g65
sS'trial_loop.thisIndex'
p1452
g60
(g99
S'$\x00\x00\x00'
tRp1453
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1454
I0
sg904
g1287
sS'block_loop.thisRepN'
p1455
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1456
I0
sg910
g1290
sg55
g11
sS'block_loop.thisTrial'
p1457
Nsg70
Vn
sS'block_loop.thisTrialN'
p1458
I0
sg39
F1.8166413784201723
sg34
g753
(S'\x07\xdf\x07\t\x12-\x14\x00:\x98'
tRp1459
sa(dp1460
S'trial_loop.thisTrialN'
p1461
I37
sg895
S'49-yorkie.png'
p1462
sS'block_loop.thisIndex'
p1463
g889
sg38
S'right'
p1464
sg59
g63
sS'trial_loop.thisN'
p1465
I37
sg33
g1225
sg64
g65
sS'trial_loop.thisIndex'
p1466
g60
(g99
S'%\x00\x00\x00'
tRp1467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1468
I0
sg904
S'35-raisins.png'
p1469
sS'block_loop.thisRepN'
p1470
I0
sg907
g1225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1471
I0
sg910
g1232
sg55
g11
sS'block_loop.thisTrial'
p1472
Nsg70
Vn
sS'block_loop.thisTrialN'
p1473
I0
sg39
F1.3332261362484132
sg34
g753
(S'\x07\xdf\x07\t\x12-\x1a\r/\x00'
tRp1474
sa(dp1475
S'trial_loop.thisTrialN'
p1476
I38
sg895
S'4-corn.png'
p1477
sS'block_loop.thisIndex'
p1478
g889
sg38
S'right'
p1479
sg59
g63
sS'trial_loop.thisN'
p1480
I38
sg33
S'10-bounty_redo.png'
p1481
sg64
g65
sS'trial_loop.thisIndex'
p1482
g60
(g99
S'&\x00\x00\x00'
tRp1483
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1484
I0
sg904
S'10-bounty_redo.png'
p1485
sS'block_loop.thisRepN'
p1486
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1487
I0
sg910
S'4-corn.png'
p1488
sg55
g11
sS'block_loop.thisTrial'
p1489
Nsg70
Vn
sS'block_loop.thisTrialN'
p1490
I0
sg39
F1.3832763421160053
sg34
g753
(S'\x07\xdf\x07\t\x12-!\x03~\x88'
tRp1491
sa(dp1492
S'trial_loop.thisTrialN'
p1493
I39
sg895
g1204
sS'block_loop.thisIndex'
p1494
g889
sg38
S'left'
p1495
sg59
g63
sS'trial_loop.thisN'
p1496
I39
sg33
g1208
sg64
g65
sS'trial_loop.thisIndex'
p1497
g60
(g99
S"'\x00\x00\x00"
tRp1498
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1499
I0
sg904
g1212
sS'block_loop.thisRepN'
p1500
I0
sg907
g1208
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1501
I0
sg910
g1215
sg55
g11
sS'block_loop.thisTrial'
p1502
Nsg70
Vn
sS'block_loop.thisTrialN'
p1503
I0
sg39
F1.2333347018065979
sg34
g753
(S"\x07\xdf\x07\t\x12-'\t\xc4\x00"
tRp1504
sa(dp1505
S'trial_loop.thisTrialN'
p1506
I40
sg895
g1380
sS'block_loop.thisIndex'
p1507
g889
sg38
S'left'
p1508
sg59
g63
sS'trial_loop.thisN'
p1509
I40
sg33
g1123
sg64
g65
sS'trial_loop.thisIndex'
p1510
g60
(g99
S'(\x00\x00\x00'
tRp1511
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1512
I0
sg904
g1387
sS'block_loop.thisRepN'
p1513
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1514
I0
sg910
g1123
sg55
g11
sS'block_loop.thisTrial'
p1515
Nsg70
Vn
sS'block_loop.thisTrialN'
p1516
I0
sg39
F1.5333049375076371
sg34
g753
(S'\x07\xdf\x07\t\x12--\r\xe6\x98'
tRp1517
sa(dp1518
S'trial_loop.thisTrialN'
p1519
I41
sg895
g1279
sS'block_loop.thisIndex'
p1520
g889
sg38
S'left'
p1521
sg59
g63
sS'trial_loop.thisN'
p1522
I41
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p1523
g60
(g99
S')\x00\x00\x00'
tRp1524
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1525
I0
sg904
g1287
sS'block_loop.thisRepN'
p1526
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1527
I0
sg910
g1290
sg55
g11
sS'block_loop.thisTrial'
p1528
Nsg70
Vn
sS'block_loop.thisTrialN'
p1529
I0
sg39
F1.4832245111829252
sg34
g753
(S'\x07\xdf\x07\t\x12-4\x07O\x18'
tRp1530
sa(dp1531
S'trial_loop.thisTrialN'
p1532
I42
sg895
g1187
sS'block_loop.thisIndex'
p1533
g889
sg38
S'right'
p1534
sg59
g63
sS'trial_loop.thisN'
p1535
I42
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p1536
g60
(g99
S'*\x00\x00\x00'
tRp1537
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1538
I0
sg904
g1195
sS'block_loop.thisRepN'
p1539
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1540
I0
sg910
g1198
sg55
g11
sS'block_loop.thisTrial'
p1541
Nsg70
Vn
sS'block_loop.thisTrialN'
p1542
I0
sg39
F2.366653951266926
sg34
g753
(S'\x07\xdf\x07\t\x12-;\x00\x00\x00'
tRp1543
sa(dp1544
S'trial_loop.thisTrialN'
p1545
I43
sg895
S'5-pineapple.png'
p1546
sS'block_loop.thisIndex'
p1547
g889
sg38
S'right'
p1548
sg59
g63
sS'trial_loop.thisN'
p1549
I43
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1550
g60
(g99
S'+\x00\x00\x00'
tRp1551
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1552
I0
sg904
S'40-sardines.png'
p1553
sS'block_loop.thisRepN'
p1554
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1555
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p1556
Nsg70
Vn
sS'block_loop.thisTrialN'
p1557
I0
sg39
F1.9166562605678337
sg34
g753
(S'\x07\xdf\x07\t\x12.\x06\x06\x03\x10'
tRp1558
sa(dp1559
S'trial_loop.thisTrialN'
p1560
I44
sg895
g1462
sS'block_loop.thisIndex'
p1561
g889
sg38
S'right'
p1562
sg59
g63
sS'trial_loop.thisN'
p1563
I44
sg33
g1225
sg64
g65
sS'trial_loop.thisIndex'
p1564
g60
(g99
S',\x00\x00\x00'
tRp1565
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1566
I0
sg904
g1469
sS'block_loop.thisRepN'
p1567
I0
sg907
g1225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1568
I0
sg910
g1232
sg55
g11
sS'block_loop.thisTrial'
p1569
Nsg70
Vn
sS'block_loop.thisTrialN'
p1570
I0
sg39
F1.2499952958751237
sg34
g753
(S'\x07\xdf\x07\t\x12.\r\x05 \x80'
tRp1571
sa(dp1572
S'trial_loop.thisTrialN'
p1573
I45
sg895
g1546
sS'block_loop.thisIndex'
p1574
g889
sg38
S'right'
p1575
sg59
g63
sS'trial_loop.thisN'
p1576
I45
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p1577
g60
(g99
S'-\x00\x00\x00'
tRp1578
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1579
I0
sg904
g1553
sS'block_loop.thisRepN'
p1580
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1581
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p1582
Nsg70
Vn
sS'block_loop.thisTrialN'
p1583
I0
sg39
F1.5837100911776361
sg34
g753
(S'\x07\xdf\x07\t\x12.\x13\t\x81\x98'
tRp1584
sa(dp1585
S'trial_loop.thisTrialN'
p1586
I46
sg895
g1221
sS'block_loop.thisIndex'
p1587
g889
sg38
S'left'
p1588
sg59
g63
sS'trial_loop.thisN'
p1589
I46
sg33
g1225
sg64
g65
sS'trial_loop.thisIndex'
p1590
g60
(g99
S'.\x00\x00\x00'
tRp1591
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1592
I0
sg904
g1229
sS'block_loop.thisRepN'
p1593
I0
sg907
g1225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1594
I0
sg910
g1232
sg55
g11
sS'block_loop.thisTrial'
p1595
Nsg70
Vn
sS'block_loop.thisTrialN'
p1596
I0
sg39
F1.0164413532147591
sg34
g753
(S'\x07\xdf\x07\t\x12.\x1a\x03\xa1\xb0'
tRp1597
sa(dp1598
S'trial_loop.thisTrialN'
p1599
I47
sg895
g1112
sS'block_loop.thisIndex'
p1600
g889
sg38
S'right'
p1601
sg59
g63
sS'trial_loop.thisN'
p1602
I47
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p1603
g60
(g99
S'/\x00\x00\x00'
tRp1604
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1605
I0
sg904
g1120
sS'block_loop.thisRepN'
p1606
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1607
I0
sg910
g1123
sg55
g11
sS'block_loop.thisTrial'
p1608
Nsg70
Vn
sS'block_loop.thisTrialN'
p1609
I0
sg39
F1.4499922738286841
sg34
g753
(S'\x07\xdf\x07\t\x12. \x04l\xd0'
tRp1610
sa(dp1611
S'trial_loop.thisTrialN'
p1612
I48
sg895
S'20-fruit_pastilles.png'
p1613
sS'block_loop.thisIndex'
p1614
g889
sg38
S'left'
p1615
sg59
g63
sS'trial_loop.thisN'
p1616
I48
sg33
g1099
sg64
g65
sS'trial_loop.thisIndex'
p1617
g60
(g99
S'0\x00\x00\x00'
tRp1618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1619
I0
sg904
S'2-steamed_puddings.png'
p1620
sS'block_loop.thisRepN'
p1621
I0
sg907
g1105
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1622
I0
sg910
g1099
sg55
g11
sS'block_loop.thisTrial'
p1623
Nsg70
Vn
sS'block_loop.thisTrialN'
p1624
I0
sg39
F4.1164987150623347
sg34
g753
(S'\x07\xdf\x07\t\x12.&\x0b\xe6\xe0'
tRp1625
sa(dp1626
S'trial_loop.thisTrialN'
p1627
I49
sg895
S'10-bounty_redo.png'
p1628
sS'block_loop.thisIndex'
p1629
g889
sg38
S'left'
p1630
sg59
g63
sS'trial_loop.thisN'
p1631
I49
sg33
g1481
sg64
g65
sS'trial_loop.thisIndex'
p1632
g60
(g99
S'1\x00\x00\x00'
tRp1633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1634
I0
sg904
S'4-corn.png'
p1635
sS'block_loop.thisRepN'
p1636
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1637
I0
sg910
g1488
sg55
g11
sS'block_loop.thisTrial'
p1638
Nsg70
Vn
sS'block_loop.thisTrialN'
p1639
I0
sg39
F3.1498392898974998
sg34
g753
(S'\x07\xdf\x07\t\x12./\x0e\x11\x90'
tRp1640
sa(dp1641
S'trial_loop.thisTrialN'
p1642
I50
sg895
S'41-peanuts_redo.png'
p1643
sS'block_loop.thisIndex'
p1644
g889
sg38
S'left'
p1645
sg59
g63
sS'trial_loop.thisN'
p1646
I50
sg33
S'41-peanuts_redo.png'
p1647
sg64
g65
sS'trial_loop.thisIndex'
p1648
g60
(g99
S'2\x00\x00\x00'
tRp1649
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1650
I0
sg904
S'45-chewy_nougat_redo.png'
p1651
sS'block_loop.thisRepN'
p1652
I0
sg907
g1647
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1653
I0
sg910
S'45-chewy_nougat_redo.png'
p1654
sg55
g11
sS'block_loop.thisTrial'
p1655
Nsg70
Vn
sS'block_loop.thisTrialN'
p1656
I0
sg39
F3.1832862065311929
sg34
g753
(S'\x07\xdf\x07\t\x12.8\x01\xb5\x80'
tRp1657
sa(dp1658
S'trial_loop.thisTrialN'
p1659
I51
sg895
g1477
sS'block_loop.thisIndex'
p1660
g889
sg38
S'right'
p1661
sg59
g63
sS'trial_loop.thisN'
p1662
I51
sg33
g1488
sg64
g65
sS'trial_loop.thisIndex'
p1663
g60
(g99
S'3\x00\x00\x00'
tRp1664
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1665
I0
sg904
g1485
sS'block_loop.thisRepN'
p1666
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1667
I0
sg910
g1488
sg55
g11
sS'block_loop.thisTrial'
p1668
Nsg70
Vn
sS'block_loop.thisTrialN'
p1669
I0
sg39
F1.3333398906033835
sg34
g753
(S'\x07\xdf\x07\t\x12/\x04\x05\x14\xc8'
tRp1670
sa(dp1671
S'trial_loop.thisTrialN'
p1672
I52
sg895
S'8-liquorice_catherine_wheels.png'
p1673
sS'block_loop.thisIndex'
p1674
g889
sg38
S'right'
p1675
sg59
g63
sS'trial_loop.thisN'
p1676
I52
sg33
g1007
sg64
g65
sS'trial_loop.thisIndex'
p1677
g60
(g99
S'4\x00\x00\x00'
tRp1678
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1679
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p1680
sS'block_loop.thisRepN'
p1681
I0
sg907
g1007
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1682
I0
sg910
g1001
sg55
g11
sS'block_loop.thisTrial'
p1683
Nsg70
Vn
sS'block_loop.thisTrialN'
p1684
I0
sg39
F2.9498933446011506
sg34
g753
(S'\x07\xdf\x07\t\x12/\n\n\xa6\x90'
tRp1685
sa(dp1686
S'trial_loop.thisTrialN'
p1687
I53
sg895
S'46-pistachios.png'
p1688
sS'block_loop.thisIndex'
p1689
g889
sg38
S'left'
p1690
sg59
g63
sS'trial_loop.thisN'
p1691
I53
sg33
g1367
sg64
g65
sS'trial_loop.thisIndex'
p1692
g60
(g99
S'5\x00\x00\x00'
tRp1693
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1694
I0
sg904
S'29-beans.png'
p1695
sS'block_loop.thisRepN'
p1696
I0
sg907
g1367
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1697
I0
sg910
g1374
sg55
g11
sS'block_loop.thisTrial'
p1698
Nsg70
Vn
sS'block_loop.thisTrialN'
p1699
I0
sg39
F3.2166535806391039
sg34
g753
(S'\x07\xdf\x07\t\x12/\x12\n5H'
tRp1700
sa(dp1701
S'trial_loop.thisTrialN'
p1702
I54
sg895
S'36-fig_rolls.png'
p1703
sS'block_loop.thisIndex'
p1704
g889
sg38
S'left'
p1705
sg59
g63
sS'trial_loop.thisN'
p1706
I54
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1707
g60
(g99
S'6\x00\x00\x00'
tRp1708
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1709
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p1710
sS'block_loop.thisRepN'
p1711
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1712
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p1713
Nsg70
Vn
sS'block_loop.thisTrialN'
p1714
I0
sg39
F1.6165816787652147
sg34
g753
(S'\x07\xdf\x07\t\x12/\x1a\x0e\x11\x90'
tRp1715
sa(dp1716
S'trial_loop.thisTrialN'
p1717
I55
sg895
g997
sS'block_loop.thisIndex'
p1718
g889
sg38
S'right'
p1719
sg59
g63
sS'trial_loop.thisN'
p1720
I55
sg33
g1007
sg64
g65
sS'trial_loop.thisIndex'
p1721
g60
(g99
S'7\x00\x00\x00'
tRp1722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1723
I0
sg904
g1005
sS'block_loop.thisRepN'
p1724
I0
sg907
g1007
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1725
I0
sg910
g1001
sg55
g11
sS'block_loop.thisTrial'
p1726
Nsg70
Vn
sS'block_loop.thisTrialN'
p1727
I0
sg39
F2.9832937901519472
sg34
g753
(S'\x07\xdf\x07\t\x12/!\x08\xe5X'
tRp1728
sa(dp1729
S'trial_loop.thisTrialN'
p1730
I56
sg895
S'42-mrkipling_lemon_slices.png'
p1731
sS'block_loop.thisIndex'
p1732
g889
sg38
S'left'
p1733
sg59
g63
sS'trial_loop.thisN'
p1734
I56
sg33
S'42-mrkipling_lemon_slices.png'
p1735
sg64
g65
sS'trial_loop.thisIndex'
p1736
g60
(g99
S'8\x00\x00\x00'
tRp1737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1738
I0
sg904
S'16-skips_prawn.png'
p1739
sS'block_loop.thisRepN'
p1740
I0
sg907
g1735
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1741
I0
sg910
S'16-skips_prawn.png'
p1742
sg55
g11
sS'block_loop.thisTrial'
p1743
Nsg70
Vn
sS'block_loop.thisTrialN'
p1744
I0
sg39
F1.583126779372833
sg34
g753
(S'\x07\xdf\x07\t\x12/)\x08\xf1\x10'
tRp1745
sa(dp1746
S'trial_loop.thisTrialN'
p1747
I57
sg895
g1462
sS'block_loop.thisIndex'
p1748
g889
sg38
S'right'
p1749
sg59
g63
sS'trial_loop.thisN'
p1750
I57
sg33
g1232
sg64
g65
sS'trial_loop.thisIndex'
p1751
g60
(g99
S'9\x00\x00\x00'
tRp1752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1753
I0
sg904
g1469
sS'block_loop.thisRepN'
p1754
I0
sg907
g1225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1755
I0
sg910
g1232
sg55
g11
sS'block_loop.thisTrial'
p1756
Nsg70
Vn
sS'block_loop.thisTrialN'
p1757
I0
sg39
F1.1000097503747384
sg34
g753
(S'\x07\xdf\x07\t\x12/0\x03K\xc0'
tRp1758
sa(dp1759
S'trial_loop.thisTrialN'
p1760
I58
sg895
g1731
sS'block_loop.thisIndex'
p1761
g889
sg38
S'left'
p1762
sg59
g63
sS'trial_loop.thisN'
p1763
I58
sg33
g1735
sg64
g65
sS'trial_loop.thisIndex'
p1764
g60
(g99
S':\x00\x00\x00'
tRp1765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1766
I0
sg904
g1739
sS'block_loop.thisRepN'
p1767
I0
sg907
g1735
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1768
I0
sg910
g1742
sg55
g11
sS'block_loop.thisTrial'
p1769
Nsg70
Vn
sS'block_loop.thisTrialN'
p1770
I0
sg39
F1.2498823968126089
sg34
g753
(S'\x07\xdf\x07\t\x12/6\x05G\x90'
tRp1771
sa(dp1772
S'trial_loop.thisTrialN'
p1773
I59
sg895
g933
sS'block_loop.thisIndex'
p1774
g889
sg38
S'right'
p1775
sg59
g63
sS'trial_loop.thisN'
p1776
I59
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1777
g60
(g99
S';\x00\x00\x00'
tRp1778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1779
I0
sg904
g941
sS'block_loop.thisRepN'
p1780
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1781
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p1782
Nsg70
Vn
sS'block_loop.thisTrialN'
p1783
I0
sg39
F1.3833142602343287
sg34
g753
(S'\x07\xdf\x07\t\x120\x00\tn\x10'
tRp1784
sa(dp1785
S'trial_loop.thisTrialN'
p1786
I60
sg895
g1155
sS'block_loop.thisIndex'
p1787
g889
sg38
S'left'
p1788
sg59
g63
sS'trial_loop.thisN'
p1789
I60
sg33
g1159
sg64
g65
sS'trial_loop.thisIndex'
p1790
g60
(g99
S'<\x00\x00\x00'
tRp1791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1792
I0
sg904
g1163
sS'block_loop.thisRepN'
p1793
I0
sg907
g1159
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1794
I0
sg910
g1166
sg55
g11
sS'block_loop.thisTrial'
p1795
Nsg70
Vn
sS'block_loop.thisTrialN'
p1796
I0
sg39
F1.3665758342394838
sg34
g753
(S'\x07\xdf\x07\t\x120\x07\x00\xaf\xc8'
tRp1797
sa(dp1798
S'trial_loop.thisTrialN'
p1799
I61
sg895
g896
sS'block_loop.thisIndex'
p1800
g889
sg38
S'left'
p1801
sg59
g63
sS'trial_loop.thisN'
p1802
I61
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p1803
g60
(g99
S'=\x00\x00\x00'
tRp1804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1805
I0
sg904
g905
sS'block_loop.thisRepN'
p1806
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1807
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p1808
Nsg70
Vn
sS'block_loop.thisTrialN'
p1809
I0
sg39
F1.1332858929199574
sg34
g753
(S'\x07\xdf\x07\t\x120\r\x06\xba\xa8'
tRp1810
sa(dp1811
S'trial_loop.thisTrialN'
p1812
I62
sg895
S'45-chewy_nougat_redo.png'
p1813
sS'block_loop.thisIndex'
p1814
g889
sg38
S'right'
p1815
sg59
g63
sS'trial_loop.thisN'
p1816
I62
sg33
g1654
sg64
g65
sS'trial_loop.thisIndex'
p1817
g60
(g99
S'>\x00\x00\x00'
tRp1818
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1819
I0
sg904
S'41-peanuts_redo.png'
p1820
sS'block_loop.thisRepN'
p1821
I0
sg907
g1647
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1822
I0
sg910
g1654
sg55
g11
sS'block_loop.thisTrial'
p1823
Nsg70
Vn
sS'block_loop.thisTrialN'
p1824
I0
sg39
F2.3165213518914243
sg34
g753
(S'\x07\xdf\x07\t\x120\x13\t3x'
tRp1825
sa(dp1826
S'trial_loop.thisTrialN'
p1827
I63
sg895
g1335
sS'block_loop.thisIndex'
p1828
g889
sg38
S'right'
p1829
sg59
g63
sS'trial_loop.thisN'
p1830
I63
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p1831
g60
(g99
S'?\x00\x00\x00'
tRp1832
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1833
I0
sg904
g1342
sS'block_loop.thisRepN'
p1834
I0
sg907
g1024
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1835
I0
sg910
g1018
sg55
g11
sS'block_loop.thisTrial'
p1836
Nsg70
Vn
sS'block_loop.thisTrialN'
p1837
I0
sg39
F3.1832893426144437
sg34
g753
(S'\x07\xdf\x07\t\x120\x1a\x0e\xbdp'
tRp1838
sa(dp1839
S'trial_loop.thisTrialN'
p1840
I64
sg895
g1628
sS'block_loop.thisIndex'
p1841
g889
sg38
S'left'
p1842
sg59
g63
sS'trial_loop.thisN'
p1843
I64
sg33
g1481
sg64
g65
sS'trial_loop.thisIndex'
p1844
g60
(g99
S'@\x00\x00\x00'
tRp1845
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1846
I0
sg904
g1635
sS'block_loop.thisRepN'
p1847
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1848
I0
sg910
g1488
sg55
g11
sS'block_loop.thisTrial'
p1849
Nsg70
Vn
sS'block_loop.thisTrialN'
p1850
I0
sg39
F1.1832400205494196
sg34
g753
(S'\x07\xdf\x07\t\x120#\x02\x9f\xe0'
tRp1851
sa(dp1852
S'trial_loop.thisTrialN'
p1853
I65
sg895
g1221
sS'block_loop.thisIndex'
p1854
g889
sg38
S'left'
p1855
sg59
g63
sS'trial_loop.thisN'
p1856
I65
sg33
g1225
sg64
g65
sS'trial_loop.thisIndex'
p1857
g60
(g99
S'A\x00\x00\x00'
tRp1858
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1859
I0
sg904
g1229
sS'block_loop.thisRepN'
p1860
I0
sg907
g1225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1861
I0
sg910
g1232
sg55
g11
sS'block_loop.thisTrial'
p1862
Nsg70
Vn
sS'block_loop.thisTrialN'
p1863
I0
sg39
F1.0999972060344589
sg34
g753
(S'\x07\xdf\x07\t\x120)\x06\n\xe0'
tRp1864
sa(dp1865
S'trial_loop.thisTrialN'
p1866
I66
sg895
g967
sS'block_loop.thisIndex'
p1867
g889
sg38
S'right'
p1868
sg59
g63
sS'trial_loop.thisN'
p1869
I66
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1870
g60
(g99
S'B\x00\x00\x00'
tRp1871
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1872
I0
sg904
g975
sS'block_loop.thisRepN'
p1873
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1874
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p1875
Nsg70
Vn
sS'block_loop.thisTrialN'
p1876
I0
sg39
F1.6331946613572654
sg34
g753
(S'\x07\xdf\x07\t\x120/\x08\n\x98'
tRp1877
sa(dp1878
S'trial_loop.thisTrialN'
p1879
I67
sg895
g1380
sS'block_loop.thisIndex'
p1880
g889
sg38
S'left'
p1881
sg59
g63
sS'trial_loop.thisN'
p1882
I67
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p1883
g60
(g99
S'C\x00\x00\x00'
tRp1884
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1885
I0
sg904
g1387
sS'block_loop.thisRepN'
p1886
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1887
I0
sg910
g1123
sg55
g11
sS'block_loop.thisTrial'
p1888
Nsg70
Vn
sS'block_loop.thisTrialN'
p1889
I0
sg39
F1.6333078455172654
sg34
g753
(S'\x07\xdf\x07\t\x1206\x02\xde`'
tRp1890
sa(dp1891
S'trial_loop.thisTrialN'
p1892
I68
sg895
g950
sS'block_loop.thisIndex'
p1893
g889
sg38
S'right'
p1894
sg59
g63
sS'trial_loop.thisN'
p1895
I68
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1896
g60
(g99
S'D\x00\x00\x00'
tRp1897
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1898
I0
sg904
g958
sS'block_loop.thisRepN'
p1899
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1900
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p1901
Nsg70
Vn
sS'block_loop.thisTrialN'
p1902
I0
sg39
F1.9666408937519009
sg34
g753
(S'\x07\xdf\x07\t\x121\x00\r2\xe8'
tRp1903
sa(dp1904
S'trial_loop.thisTrialN'
p1905
I69
sg895
g933
sS'block_loop.thisIndex'
p1906
g889
sg38
S'right'
p1907
sg59
g63
sS'trial_loop.thisN'
p1908
I69
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1909
g60
(g99
S'E\x00\x00\x00'
tRp1910
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1911
I0
sg904
g941
sS'block_loop.thisRepN'
p1912
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1913
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p1914
Nsg70
Vn
sS'block_loop.thisTrialN'
p1915
I0
sg39
F1.283349555444147
sg34
g753
(S'\x07\xdf\x07\t\x121\x07\r\x07\xf0'
tRp1916
sa(dp1917
S'trial_loop.thisTrialN'
p1918
I70
sg895
g1731
sS'block_loop.thisIndex'
p1919
g889
sg38
S'left'
p1920
sg59
g63
sS'trial_loop.thisN'
p1921
I70
sg33
g1735
sg64
g65
sS'trial_loop.thisIndex'
p1922
g60
(g99
S'F\x00\x00\x00'
tRp1923
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1924
I0
sg904
g1739
sS'block_loop.thisRepN'
p1925
I0
sg907
g1735
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1926
I0
sg910
g1742
sg55
g11
sS'block_loop.thisTrial'
p1927
Nsg70
Vn
sS'block_loop.thisTrialN'
p1928
I0
sg39
F1.2665050727591733
sg34
g753
(S'\x07\xdf\x07\t\x121\x0e\x02\x9f\xe0'
tRp1929
sa(dp1930
S'trial_loop.thisTrialN'
p1931
I71
sg895
g1703
sS'block_loop.thisIndex'
p1932
g889
sg38
S'left'
p1933
sg59
g63
sS'trial_loop.thisN'
p1934
I71
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p1935
g60
(g99
S'G\x00\x00\x00'
tRp1936
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1937
I0
sg904
g1710
sS'block_loop.thisRepN'
p1938
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1939
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p1940
Nsg70
Vn
sS'block_loop.thisTrialN'
p1941
I0
sg39
F1.2331890164059587
sg34
g753
(S'\x07\xdf\x07\t\x121\x14\x07;\x90'
tRp1942
sa(dp1943
S'trial_loop.thisTrialN'
p1944
I72
sg895
g997
sS'block_loop.thisIndex'
p1945
g889
sg38
S'right'
p1946
sg59
g63
sS'trial_loop.thisN'
p1947
I72
sg33
g1007
sg64
g65
sS'trial_loop.thisIndex'
p1948
g60
(g99
S'H\x00\x00\x00'
tRp1949
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1950
I0
sg904
g1005
sS'block_loop.thisRepN'
p1951
I0
sg907
g1007
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1952
I0
sg910
g1001
sg55
g11
sS'block_loop.thisTrial'
p1953
Nsg70
Vn
sS'block_loop.thisTrialN'
p1954
I0
sg39
F1.5666403805698792
sg34
g753
(S'\x07\xdf\x07\t\x121\x1a\x0b^('
tRp1955
sa(dp1956
S'trial_loop.thisTrialN'
p1957
I73
sg895
g896
sS'block_loop.thisIndex'
p1958
g889
sg38
S'left'
p1959
sg59
g63
sS'trial_loop.thisN'
p1960
I73
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p1961
g60
(g99
S'I\x00\x00\x00'
tRp1962
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1963
I0
sg904
g905
sS'block_loop.thisRepN'
p1964
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1965
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p1966
Nsg70
Vn
sS'block_loop.thisTrialN'
p1967
I0
sg39
F0.96652656919832225
sg34
g753
(S'\x07\xdf\x07\t\x121!\x05?\xc0'
tRp1968
sa(dp1969
S'trial_loop.thisTrialN'
p1970
I74
sg895
S'3-ellas_strawberries_apples.png'
p1971
sS'block_loop.thisIndex'
p1972
g889
sg38
S'right'
p1973
sg59
g63
sS'trial_loop.thisN'
p1974
I74
sg33
g1159
sg64
g65
sS'trial_loop.thisIndex'
p1975
g60
(g99
S'J\x00\x00\x00'
tRp1976
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1977
I0
sg904
S'13-mccoys_steak_crisps.png'
p1978
sS'block_loop.thisRepN'
p1979
I0
sg907
g1159
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1980
I0
sg910
g1166
sg55
g11
sS'block_loop.thisTrial'
p1981
Nsg70
Vn
sS'block_loop.thisTrialN'
p1982
I0
sg39
F1.2165888632480346
sg34
g753
(S"\x07\xdf\x07\t\x121'\x05\x1c\x98"
tRp1983
sa(dp1984
S'trial_loop.thisTrialN'
p1985
I75
sg895
g1546
sS'block_loop.thisIndex'
p1986
g889
sg38
S'right'
p1987
sg59
g63
sS'trial_loop.thisN'
p1988
I75
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p1989
g60
(g99
S'K\x00\x00\x00'
tRp1990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1991
I0
sg904
g1553
sS'block_loop.thisRepN'
p1992
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1993
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p1994
Nsg70
Vn
sS'block_loop.thisTrialN'
p1995
I0
sg39
F1.5332832700114523
sg34
g753
(S'\x07\xdf\x07\t\x121-\t\x00\xb0'
tRp1996
sa(dp1997
S'trial_loop.thisTrialN'
p1998
I76
sg895
g1014
sS'block_loop.thisIndex'
p1999
g889
sg38
S'left'
p2000
sg59
g63
sS'trial_loop.thisN'
p2001
I76
sg33
g1024
sg64
g65
sS'trial_loop.thisIndex'
p2002
g60
(g99
S'L\x00\x00\x00'
tRp2003
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2004
I0
sg904
g1022
sS'block_loop.thisRepN'
p2005
I0
sg907
g1024
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2006
I0
sg910
g1018
sg55
g11
sS'block_loop.thisTrial'
p2007
Nsg70
Vn
sS'block_loop.thisTrialN'
p2008
I0
sg39
F2.2332106838985055
sg34
g753
(S'\x07\xdf\x07\t\x1214\x02i0'
tRp2009
sa(dp2010
S'trial_loop.thisTrialN'
p2011
I77
sg895
g1408
sS'block_loop.thisIndex'
p2012
g889
sg38
S'left'
p2013
sg59
g63
sS'trial_loop.thisN'
p2014
I77
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2015
g60
(g99
S'M\x00\x00\x00'
tRp2016
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2017
I0
sg904
g1415
sS'block_loop.thisRepN'
p2018
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2019
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p2020
Nsg70
Vn
sS'block_loop.thisTrialN'
p2021
I0
sg39
F1.1165982144848385
sg34
g753
(S'\x07\xdf\x07\t\x121;\x06\x83\xf8'
tRp2022
sa(dp2023
S'trial_loop.thisTrialN'
p2024
I78
sg895
g1031
sS'block_loop.thisIndex'
p2025
g889
sg38
S'left'
p2026
sg59
g63
sS'trial_loop.thisN'
p2027
I78
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2028
g60
(g99
S'N\x00\x00\x00'
tRp2029
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2030
I0
sg904
g1038
sS'block_loop.thisRepN'
p2031
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2032
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p2033
Nsg70
Vn
sS'block_loop.thisTrialN'
p2034
I0
sg39
F1.333256071600772
sg34
g753
(S'\x07\xdf\x07\t\x122\x05\x08\xc20'
tRp2035
sa(dp2036
S'trial_loop.thisTrialN'
p2037
I79
sg895
g967
sS'block_loop.thisIndex'
p2038
g889
sg38
S'right'
p2039
sg59
g63
sS'trial_loop.thisN'
p2040
I79
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2041
g60
(g99
S'O\x00\x00\x00'
tRp2042
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2043
I0
sg904
g975
sS'block_loop.thisRepN'
p2044
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2045
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p2046
Nsg70
Vn
sS'block_loop.thisTrialN'
p2047
I0
sg39
F1.1331430585050839
sg34
g753
(S'\x07\xdf\x07\t\x122\x0b\x0eS\xf8'
tRp2048
sa(dp2049
S'trial_loop.thisTrialN'
p2050
I80
sg895
S'16-skips_prawn.png'
p2051
sS'block_loop.thisIndex'
p2052
g889
sg38
S'right'
p2053
sg59
g63
sS'trial_loop.thisN'
p2054
I80
sg33
g1742
sg64
g65
sS'trial_loop.thisIndex'
p2055
g60
(g99
S'P\x00\x00\x00'
tRp2056
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2057
I0
sg904
S'42-mrkipling_lemon_slices.png'
p2058
sS'block_loop.thisRepN'
p2059
I0
sg907
g1735
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2060
I0
sg910
g1742
sg55
g11
sS'block_loop.thisTrial'
p2061
Nsg70
Vn
sS'block_loop.thisTrialN'
p2062
I0
sg39
F1.3832281604445598
sg34
g753
(S'\x07\xdf\x07\t\x122\x12\x01\x8a\x88'
tRp2063
sa(dp2064
S'trial_loop.thisTrialN'
p2065
I81
sg895
g1014
sS'block_loop.thisIndex'
p2066
g889
sg38
S'left'
p2067
sg59
g63
sS'trial_loop.thisN'
p2068
I81
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p2069
g60
(g99
S'Q\x00\x00\x00'
tRp2070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2071
I0
sg904
g1022
sS'block_loop.thisRepN'
p2072
I0
sg907
g1024
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2073
I0
sg910
g1018
sg55
g11
sS'block_loop.thisTrial'
p2074
Nsg70
Vn
sS'block_loop.thisTrialN'
p2075
I0
sg39
F1.3332905685383594
sg34
g753
(S'\x07\xdf\x07\t\x122\x18\x08\x0e\x80'
tRp2076
sa(dp2077
S'trial_loop.thisTrialN'
p2078
I82
sg895
S'23-crunchie_redo.png'
p2079
sS'block_loop.thisIndex'
p2080
g889
sg38
S'left'
p2081
sg59
g63
sS'trial_loop.thisN'
p2082
I82
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p2083
g60
(g99
S'R\x00\x00\x00'
tRp2084
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2085
I0
sg904
S'33-ambrosia_rice.png'
p2086
sS'block_loop.thisRepN'
p2087
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2088
I0
sg910
g1198
sg55
g11
sS'block_loop.thisTrial'
p2089
Nsg70
Vn
sS'block_loop.thisTrialN'
p2090
I0
sg39
F1.9999692093479098
sg34
g753
(S'\x07\xdf\x07\t\x122\x1e\r\xa0H'
tRp2091
sa(dp2092
S'trial_loop.thisTrialN'
p2093
I83
sg895
g950
sS'block_loop.thisIndex'
p2094
g889
sg38
S'right'
p2095
sg59
g63
sS'trial_loop.thisN'
p2096
I83
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2097
g60
(g99
S'S\x00\x00\x00'
tRp2098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2099
I0
sg904
g958
sS'block_loop.thisRepN'
p2100
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2101
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p2102
Nsg70
Vn
sS'block_loop.thisTrialN'
p2103
I0
sg39
F1.4670979068650922
sg34
g753
(S'\x07\xdf\x07\t\x122%\x0e)\x00'
tRp2104
sa(dp2105
S'trial_loop.thisTrialN'
p2106
I84
sg895
g1095
sS'block_loop.thisIndex'
p2107
g889
sg38
S'right'
p2108
sg59
g63
sS'trial_loop.thisN'
p2109
I84
sg33
g1105
sg64
g65
sS'trial_loop.thisIndex'
p2110
g60
(g99
S'T\x00\x00\x00'
tRp2111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2112
I0
sg904
g1103
sS'block_loop.thisRepN'
p2113
I0
sg907
g1105
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2114
I0
sg910
g1099
sg55
g11
sS'block_loop.thisTrial'
p2115
Nsg70
Vn
sS'block_loop.thisTrialN'
p2116
I0
sg39
F3.4165502038740669
sg34
g753
(S'\x07\xdf\x07\t\x122,\x06`\xd0'
tRp2117
sa(dp2118
S'trial_loop.thisTrialN'
p2119
I85
sg895
g1172
sS'block_loop.thisIndex'
p2120
g889
sg38
S'left'
p2121
sg59
g63
sS'trial_loop.thisN'
p2122
I85
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p2123
g60
(g99
S'U\x00\x00\x00'
tRp2124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2125
I0
sg904
g1179
sS'block_loop.thisRepN'
p2126
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2127
I0
sg910
g1074
sg55
g11
sS'block_loop.thisTrial'
p2128
Nsg70
Vn
sS'block_loop.thisTrialN'
p2129
I0
sg39
F1.4499195736752881
sg34
g753
(S'\x07\xdf\x07\t\x1224\rR('
tRp2130
sa(dp2131
S'trial_loop.thisTrialN'
p2132
I86
sg895
S'30-spaghetti_hoops.png'
p2133
sS'block_loop.thisIndex'
p2134
g889
sg38
S'right'
p2135
sg59
g63
sS'trial_loop.thisN'
p2136
I86
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p2137
g60
(g99
S'V\x00\x00\x00'
tRp2138
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2139
I0
sg904
S'19-caramello_redo.png'
p2140
sS'block_loop.thisRepN'
p2141
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2142
I0
sg910
g1290
sg55
g11
sS'block_loop.thisTrial'
p2143
Nsg70
Vn
sS'block_loop.thisTrialN'
p2144
I0
sg39
F1.7998966802515497
sg34
g753
(S'\x07\xdf\x07\t\x122;\x05\x89\xf8'
tRp2145
sa(dp2146
S'trial_loop.thisTrialN'
p2147
I87
sg895
g1264
sS'block_loop.thisIndex'
p2148
g889
sg38
S'left'
p2149
sg59
g63
sS'trial_loop.thisN'
p2150
I87
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p2151
g60
(g99
S'W\x00\x00\x00'
tRp2152
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2153
I0
sg904
g1271
sS'block_loop.thisRepN'
p2154
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2155
I0
sg910
g1057
sg55
g11
sS'block_loop.thisTrial'
p2156
Nsg70
Vn
sS'block_loop.thisTrialN'
p2157
I0
sg39
F1.2330436160991667
sg34
g753
(S'\x07\xdf\x07\t\x123\x06\x02\xfd\xa0'
tRp2158
sa(dp2159
S'trial_loop.thisTrialN'
p2160
I88
sg895
g1408
sS'block_loop.thisIndex'
p2161
g889
sg38
S'left'
p2162
sg59
g63
sS'trial_loop.thisN'
p2163
I88
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2164
g60
(g99
S'X\x00\x00\x00'
tRp2165
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2166
I0
sg904
g1415
sS'block_loop.thisRepN'
p2167
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2168
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p2169
Nsg70
Vn
sS'block_loop.thisTrialN'
p2170
I0
sg39
F1.16664585446415
sg34
g753
(S'\x07\xdf\x07\t\x123\x0c\x06\xe1\xb8'
tRp2171
sa(dp2172
S'trial_loop.thisTrialN'
p2173
I89
sg895
g1080
sS'block_loop.thisIndex'
p2174
g889
sg38
S'left'
p2175
sg59
g63
sS'trial_loop.thisN'
p2176
I89
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2177
g60
(g99
S'Y\x00\x00\x00'
tRp2178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2179
I0
sg904
g1087
sS'block_loop.thisRepN'
p2180
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2181
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p2182
Nsg70
Vn
sS'block_loop.thisTrialN'
p2183
I0
sg39
F1.2999055183099699
sg34
g753
(S'\x07\xdf\x07\t\x123\x12\n\x12 '
tRp2184
sa(dp2185
S'trial_loop.thisTrialN'
p2186
I90
sg895
g1688
sS'block_loop.thisIndex'
p2187
g889
sg38
S'left'
p2188
sg59
g63
sS'trial_loop.thisN'
p2189
I90
sg33
g1367
sg64
g65
sS'trial_loop.thisIndex'
p2190
g60
(g99
S'Z\x00\x00\x00'
tRp2191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2192
I0
sg904
g1695
sS'block_loop.thisRepN'
p2193
I0
sg907
g1367
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2194
I0
sg910
g1374
sg55
g11
sS'block_loop.thisTrial'
p2195
Nsg70
Vn
sS'block_loop.thisTrialN'
p2196
I0
sg39
F1.8166445145034231
sg34
g753
(S'\x07\xdf\x07\t\x123\x18\x0f*\xd0'
tRp2197
sa(dp2198
S'trial_loop.thisTrialN'
p2199
I91
sg895
g1155
sS'block_loop.thisIndex'
p2200
g889
sg38
S'left'
p2201
sg59
g63
sS'trial_loop.thisN'
p2202
I91
sg33
g1159
sg64
g65
sS'trial_loop.thisIndex'
p2203
g60
(g99
S'[\x00\x00\x00'
tRp2204
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2205
I0
sg904
g1163
sS'block_loop.thisRepN'
p2206
I0
sg907
g1159
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2207
I0
sg910
g1166
sg55
g11
sS'block_loop.thisTrial'
p2208
Nsg70
Vn
sS'block_loop.thisTrialN'
p2209
I0
sg39
F0.86666877639800077
sg34
g753
(S'\x07\xdf\x07\t\x123\x1f\x0c\xd9\x10'
tRp2210
sa(dp2211
S'trial_loop.thisTrialN'
p2212
I92
sg895
g2079
sS'block_loop.thisIndex'
p2213
g889
sg38
S'left'
p2214
sg59
g63
sS'trial_loop.thisN'
p2215
I92
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p2216
g60
(g99
S'\\\x00\x00\x00'
tRp2217
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2218
I0
sg904
g2086
sS'block_loop.thisRepN'
p2219
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2220
I0
sg910
g1198
sg55
g11
sS'block_loop.thisTrial'
p2221
Nsg70
Vn
sS'block_loop.thisTrialN'
p2222
I0
sg39
F1.4832515955531562
sg34
g753
(S'\x07\xdf\x07\t\x123%\x0bF\xb8'
tRp2223
sa(dp2224
S'trial_loop.thisTrialN'
p2225
I93
sg895
g916
sS'block_loop.thisIndex'
p2226
g889
sg38
S'right'
p2227
sg59
g63
sS'trial_loop.thisN'
p2228
I93
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p2229
g60
(g99
S']\x00\x00\x00'
tRp2230
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2231
I0
sg904
g924
sS'block_loop.thisRepN'
p2232
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2233
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p2234
Nsg70
Vn
sS'block_loop.thisTrialN'
p2235
I0
sg39
F1.9666397533546842
sg34
g753
(S'\x07\xdf\x07\t\x123,\x03\xf7\xa0'
tRp2236
sa(dp2237
S'trial_loop.thisTrialN'
p2238
I94
sg895
g1673
sS'block_loop.thisIndex'
p2239
g889
sg38
S'left'
p2240
sg59
g63
sS'trial_loop.thisN'
p2241
I94
sg33
g1007
sg64
g65
sS'trial_loop.thisIndex'
p2242
g60
(g99
S'^\x00\x00\x00'
tRp2243
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2244
I0
sg904
g1680
sS'block_loop.thisRepN'
p2245
I0
sg907
g1007
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2246
I0
sg910
g1001
sg55
g11
sS'block_loop.thisTrial'
p2247
Nsg70
Vn
sS'block_loop.thisTrialN'
p2248
I0
sg39
F0.88321561610428034
sg34
g753
(S'\x07\xdf\x07\t\x1233\x04\x07@'
tRp2249
sa(dp2250
S'trial_loop.thisTrialN'
p2251
I95
sg895
g1046
sS'block_loop.thisIndex'
p2252
g889
sg38
S'right'
p2253
sg59
g63
sS'trial_loop.thisN'
p2254
I95
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p2255
g60
(g99
S'_\x00\x00\x00'
tRp2256
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2257
I0
sg904
g1054
sS'block_loop.thisRepN'
p2258
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2259
I0
sg910
g1057
sg55
g11
sS'block_loop.thisTrial'
p2260
Nsg70
Vn
sS'block_loop.thisTrialN'
p2261
I0
sg39
F1.4663039071638195
sg34
g753
(S'\x07\xdf\x07\t\x1239\x02\xb3h'
tRp2262
sa(dp2263
S'trial_loop.thisTrialN'
p2264
I96
sg895
g896
sS'block_loop.thisIndex'
p2265
g889
sg38
S'right'
p2266
sg59
g63
sS'trial_loop.thisN'
p2267
I96
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p2268
g60
(g99
S'`\x00\x00\x00'
tRp2269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2270
I0
sg904
g905
sS'block_loop.thisRepN'
p2271
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2272
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p2273
Nsg70
Vn
sS'block_loop.thisTrialN'
p2274
I0
sg39
F1.5333479874025215
sg34
g753
(S'\x07\xdf\x07\t\x124\x03\n)\x90'
tRp2275
sa(dp2276
S'trial_loop.thisTrialN'
p2277
I97
sg895
g1264
sS'block_loop.thisIndex'
p2278
g889
sg38
S'left'
p2279
sg59
g63
sS'trial_loop.thisN'
p2280
I97
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p2281
g60
(g99
S'a\x00\x00\x00'
tRp2282
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2283
I0
sg904
g1271
sS'block_loop.thisRepN'
p2284
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2285
I0
sg910
g1057
sg55
g11
sS'block_loop.thisTrial'
p2286
Nsg70
Vn
sS'block_loop.thisTrialN'
p2287
I0
sg39
F1.2162897947819147
sg34
g753
(S'\x07\xdf\x07\t\x124\n\x03\x92\x10'
tRp2288
sa(dp2289
S'trial_loop.thisTrialN'
p2290
I98
sg895
g1673
sS'block_loop.thisIndex'
p2291
g889
sg38
S'left'
p2292
sg59
g63
sS'trial_loop.thisN'
p2293
I98
sg33
g1007
sg64
g65
sS'trial_loop.thisIndex'
p2294
g60
(g99
S'b\x00\x00\x00'
tRp2295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2296
I0
sg904
g1680
sS'block_loop.thisRepN'
p2297
I0
sg907
g1007
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2298
I0
sg910
g1001
sg55
g11
sS'block_loop.thisTrial'
p2299
Nsg70
Vn
sS'block_loop.thisTrialN'
p2300
I0
sg39
F0.76705816411413252
sg34
g753
(S'\x07\xdf\x07\t\x124\x10\x07v('
tRp2301
sa(dp2302
S'trial_loop.thisTrialN'
p2303
I99
sg895
g1613
sS'block_loop.thisIndex'
p2304
g889
sg38
S'left'
p2305
sg59
g63
sS'trial_loop.thisN'
p2306
I99
sg33
g1105
sg64
g65
sS'trial_loop.thisIndex'
p2307
g60
(g99
S'c\x00\x00\x00'
tRp2308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2309
I0
sg904
g1620
sS'block_loop.thisRepN'
p2310
I0
sg907
g1105
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2311
I0
sg910
g1099
sg55
g11
sS'block_loop.thisTrial'
p2312
Nsg70
Vn
sS'block_loop.thisTrialN'
p2313
I0
sg39
F2.066589347916306
sg34
g753
(S'\x07\xdf\x07\t\x124\x16\x04x\x88'
tRp2314
sa(dp2315
S'trial_loop.thisTrialN'
p2316
I100
sg895
g1279
sS'block_loop.thisIndex'
p2317
g889
sg38
S'left'
p2318
sg59
g63
sS'trial_loop.thisN'
p2319
I100
sg33
g1290
sg64
g65
sS'trial_loop.thisIndex'
p2320
g60
(g99
S'd\x00\x00\x00'
tRp2321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2322
I0
sg904
g1287
sS'block_loop.thisRepN'
p2323
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2324
I0
sg910
g1290
sg55
g11
sS'block_loop.thisTrial'
p2325
Nsg70
Vn
sS'block_loop.thisTrialN'
p2326
I0
sg39
F1.3332192938760272
sg34
g753
(S'\x07\xdf\x07\t\x124\x1d\x05\xf7X'
tRp2327
sa(dp2328
S'trial_loop.thisTrialN'
p2329
I101
sg895
g1363
sS'block_loop.thisIndex'
p2330
g889
sg38
S'right'
p2331
sg59
g63
sS'trial_loop.thisN'
p2332
I101
sg33
g1367
sg64
g65
sS'trial_loop.thisIndex'
p2333
g60
(g99
S'e\x00\x00\x00'
tRp2334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2335
I0
sg904
g1371
sS'block_loop.thisRepN'
p2336
I0
sg907
g1367
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2337
I0
sg910
g1374
sg55
g11
sS'block_loop.thisTrial'
p2338
Nsg70
Vn
sS'block_loop.thisTrialN'
p2339
I0
sg39
F1.0833688281127252
sg34
g753
(S'\x07\xdf\x07\t\x124#\x0b\x858'
tRp2340
sa(dp2341
S'trial_loop.thisTrialN'
p2342
I102
sg895
g1172
sS'block_loop.thisIndex'
p2343
g889
sg38
S'left'
p2344
sg59
g63
sS'trial_loop.thisN'
p2345
I102
sg33
g1074
sg64
g65
sS'trial_loop.thisIndex'
p2346
g60
(g99
S'f\x00\x00\x00'
tRp2347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2348
I0
sg904
g1179
sS'block_loop.thisRepN'
p2349
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2350
I0
sg910
g1074
sg55
g11
sS'block_loop.thisTrial'
p2351
Nsg70
Vn
sS'block_loop.thisTrialN'
p2352
I0
sg39
F1.049906516156625
sg34
g753
(S'\x07\xdf\x07\t\x124)\rJX'
tRp2353
sa(dp2354
S'trial_loop.thisTrialN'
p2355
I103
sg895
g2051
sS'block_loop.thisIndex'
p2356
g889
sg38
S'right'
p2357
sg59
g63
sS'trial_loop.thisN'
p2358
I103
sg33
g1735
sg64
g65
sS'trial_loop.thisIndex'
p2359
g60
(g99
S'g\x00\x00\x00'
tRp2360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2361
I0
sg904
g2058
sS'block_loop.thisRepN'
p2362
I0
sg907
g1735
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2363
I0
sg910
g1742
sg55
g11
sS'block_loop.thisTrial'
p2364
Nsg70
Vn
sS'block_loop.thisTrialN'
p2365
I0
sg39
F1.0499347409240727
sg34
g753
(S'\x07\xdf\x07\t\x124/\x0e\x92x'
tRp2366
sa(dp2367
S'trial_loop.thisTrialN'
p2368
I104
sg895
g1363
sS'block_loop.thisIndex'
p2369
g889
sg38
S'right'
p2370
sg59
g63
sS'trial_loop.thisN'
p2371
I104
sg33
g1374
sg64
g65
sS'trial_loop.thisIndex'
p2372
g60
(g99
S'h\x00\x00\x00'
tRp2373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2374
I0
sg904
g1371
sS'block_loop.thisRepN'
p2375
I0
sg907
g1367
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2376
I0
sg910
g1374
sg55
g11
sS'block_loop.thisTrial'
p2377
Nsg70
Vn
sS'block_loop.thisTrialN'
p2378
I0
sg39
F0.98323420453743893
sg34
g753
(S'\x07\xdf\x07\t\x1246\x00\x98X'
tRp2379
sa(dp2380
S'trial_loop.thisTrialN'
p2381
I105
sg895
g1046
sS'block_loop.thisIndex'
p2382
g889
sg38
S'right'
p2383
sg59
g63
sS'trial_loop.thisN'
p2384
I105
sg33
g1057
sg64
g65
sS'trial_loop.thisIndex'
p2385
g60
(g99
S'i\x00\x00\x00'
tRp2386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2387
I0
sg904
g1054
sS'block_loop.thisRepN'
p2388
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2389
I0
sg910
g1057
sg55
g11
sS'block_loop.thisTrial'
p2390
Nsg70
Vn
sS'block_loop.thisTrialN'
p2391
I0
sg39
F1.4163372351940779
sg34
g753
(S'\x07\xdf\x07\t\x125\x00\x00\xea`'
tRp2392
sa(dp2393
S'trial_loop.thisTrialN'
p2394
I106
sg895
g1477
sS'block_loop.thisIndex'
p2395
g889
sg38
S'right'
p2396
sg59
g63
sS'trial_loop.thisN'
p2397
I106
sg33
g1481
sg64
g65
sS'trial_loop.thisIndex'
p2398
g60
(g99
S'j\x00\x00\x00'
tRp2399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2400
I0
sg904
g1485
sS'block_loop.thisRepN'
p2401
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2402
I0
sg910
g1488
sg55
g11
sS'block_loop.thisTrial'
p2403
Nsg70
Vn
sS'block_loop.thisTrialN'
p2404
I0
sg39
F1.5333459917128494
sg34
g753
(S'\x07\xdf\x07\t\x125\x06\x07\xac\xd8'
tRp2405
sa(dp2406
S'trial_loop.thisTrialN'
p2407
I107
sg895
g1063
sS'block_loop.thisIndex'
p2408
g889
sg38
S'right'
p2409
sg59
g63
sS'trial_loop.thisN'
p2410
I107
sg33
g1074
sg64
g65
sS'trial_loop.thisIndex'
p2411
g60
(g99
S'k\x00\x00\x00'
tRp2412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2413
I0
sg904
g1071
sS'block_loop.thisRepN'
p2414
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2415
I0
sg910
g1074
sg55
g11
sS'block_loop.thisTrial'
p2416
Nsg70
Vn
sS'block_loop.thisTrialN'
p2417
I0
sg39
F1.0501220507248945
sg34
g753
(S'\x07\xdf\x07\t\x125\r\x01\x15X'
tRp2418
sa(dp2419
S'trial_loop.thisTrialN'
p2420
I108
sg895
g1335
sS'block_loop.thisIndex'
p2421
g889
sg38
S'right'
p2422
sg59
g63
sS'trial_loop.thisN'
p2423
I108
sg33
g1024
sg64
g65
sS'trial_loop.thisIndex'
p2424
g60
(g99
S'l\x00\x00\x00'
tRp2425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2426
I0
sg904
g1342
sS'block_loop.thisRepN'
p2427
I0
sg907
g1024
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2428
I0
sg910
g1018
sg55
g11
sS'block_loop.thisTrial'
p2429
Nsg70
Vn
sS'block_loop.thisTrialN'
p2430
I0
sg39
F1.1999815826275153
sg34
g753
(S'\x07\xdf\x07\t\x125\x13\x02]x'
tRp2431
sa(dp2432
S'trial_loop.thisTrialN'
p2433
I109
sg895
g1643
sS'block_loop.thisIndex'
p2434
g889
sg38
S'left'
p2435
sg59
g63
sS'trial_loop.thisN'
p2436
I109
sg33
g1647
sg64
g65
sS'trial_loop.thisIndex'
p2437
g60
(g99
S'm\x00\x00\x00'
tRp2438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2439
I0
sg904
g1651
sS'block_loop.thisRepN'
p2440
I0
sg907
g1647
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2441
I0
sg910
g1654
sg55
g11
sS'block_loop.thisTrial'
p2442
Nsg70
Vn
sS'block_loop.thisTrialN'
p2443
I0
sg39
F1.1997814433852909
sg34
g753
(S'\x07\xdf\x07\t\x125\x19\x06\x06\xf8'
tRp2444
sa(dp2445
S'trial_loop.thisTrialN'
p2446
I110
sg895
g997
sS'block_loop.thisIndex'
p2447
g889
sg38
S'right'
p2448
sg59
g63
sS'trial_loop.thisN'
p2449
I110
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p2450
g60
(g99
S'n\x00\x00\x00'
tRp2451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2452
I0
sg904
g1005
sS'block_loop.thisRepN'
p2453
I0
sg907
g1007
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2454
I0
sg910
g1001
sg55
g11
sS'block_loop.thisTrial'
p2455
Nsg70
Vn
sS'block_loop.thisTrialN'
p2456
I0
sg39
F1.7499408420335385
sg34
g753
(S'\x07\xdf\x07\t\x125\x1f\tq\xf8'
tRp2457
sa(dp2458
S'trial_loop.thisTrialN'
p2459
I111
sg895
g1264
sS'block_loop.thisIndex'
p2460
g889
sg38
S'left'
p2461
sg59
g63
sS'trial_loop.thisN'
p2462
I111
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p2463
g60
(g99
S'o\x00\x00\x00'
tRp2464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2465
I0
sg904
g1271
sS'block_loop.thisRepN'
p2466
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2467
I0
sg910
g1057
sg55
g11
sS'block_loop.thisTrial'
p2468
Nsg70
Vn
sS'block_loop.thisTrialN'
p2469
I0
sg39
F1.0163390028028516
sg34
g753
(S'\x07\xdf\x07\t\x125&\x06.\x08'
tRp2470
sa(dp2471
S'trial_loop.thisTrialN'
p2472
I112
sg895
S'50-polo.png'
p2473
sS'block_loop.thisIndex'
p2474
g889
sg38
S'right'
p2475
sg59
g63
sS'trial_loop.thisN'
p2476
I112
sg33
g1208
sg64
g65
sS'trial_loop.thisIndex'
p2477
g60
(g99
S'p\x00\x00\x00'
tRp2478
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2479
I0
sg904
S'48-twix.png'
p2480
sS'block_loop.thisRepN'
p2481
I0
sg907
g1208
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2482
I0
sg910
g1215
sg55
g11
sS'block_loop.thisTrial'
p2483
Nsg70
Vn
sS'block_loop.thisTrialN'
p2484
I0
sg39
F1.5499852033790376
sg34
g753
(S'\x07\xdf\x07\t\x125,\x06\xfd\x10'
tRp2485
sa(dp2486
S'trial_loop.thisTrialN'
p2487
I113
sg895
g1688
sS'block_loop.thisIndex'
p2488
g889
sg38
S'left'
p2489
sg59
g63
sS'trial_loop.thisN'
p2490
I113
sg33
g1374
sg64
g65
sS'trial_loop.thisIndex'
p2491
g60
(g99
S'q\x00\x00\x00'
tRp2492
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2493
I0
sg904
g1695
sS'block_loop.thisRepN'
p2494
I0
sg907
g1367
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2495
I0
sg910
g1374
sg55
g11
sS'block_loop.thisTrial'
p2496
Nsg70
Vn
sS'block_loop.thisTrialN'
p2497
I0
sg39
F0.9666771012780373
sg34
g753
(S'\x07\xdf\x07\t\x1253\x00\xa0('
tRp2498
sa(dp2499
S'trial_loop.thisTrialN'
p2500
I114
sg895
g1813
sS'block_loop.thisIndex'
p2501
g889
sg38
S'right'
p2502
sg59
g63
sS'trial_loop.thisN'
p2503
I114
sg33
g1647
sg64
g65
sS'trial_loop.thisIndex'
p2504
g60
(g99
S'r\x00\x00\x00'
tRp2505
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2506
I0
sg904
g1820
sS'block_loop.thisRepN'
p2507
I0
sg907
g1647
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2508
I0
sg910
g1654
sg55
g11
sS'block_loop.thisTrial'
p2509
Nsg70
Vn
sS'block_loop.thisTrialN'
p2510
I0
sg39
F1.2499858876180951
sg34
g753
(S'\x07\xdf\x07\t\x1259\x00}\x00'
tRp2511
sa(dp2512
S'trial_loop.thisTrialN'
p2513
I115
sg895
g1095
sS'block_loop.thisIndex'
p2514
g889
sg38
S'left'
p2515
sg59
g63
sS'trial_loop.thisN'
p2516
I115
sg33
g1105
sg64
g65
sS'trial_loop.thisIndex'
p2517
g60
(g99
S's\x00\x00\x00'
tRp2518
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2519
I0
sg904
g1103
sS'block_loop.thisRepN'
p2520
I0
sg907
g1105
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2521
I0
sg910
g1099
sg55
g11
sS'block_loop.thisTrial'
p2522
Nsg70
Vn
sS'block_loop.thisTrialN'
p2523
I0
sg39
F1.2332945028974791
sg34
g753
(S'\x07\xdf\x07\t\x126\x03\x04\xda0'
tRp2524
sa(dp2525
S'trial_loop.thisTrialN'
p2526
I116
sg895
g1546
sS'block_loop.thisIndex'
p2527
g889
sg38
S'left'
p2528
sg59
g63
sS'trial_loop.thisN'
p2529
I116
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2530
g60
(g99
S't\x00\x00\x00'
tRp2531
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2532
I0
sg904
g1553
sS'block_loop.thisRepN'
p2533
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2534
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p2535
Nsg70
Vn
sS'block_loop.thisTrialN'
p2536
I0
sg39
F1.6999932716717012
sg34
g753
(S'\x07\xdf\x07\t\x126\t\t\x00\xb0'
tRp2537
sa(dp2538
S'trial_loop.thisTrialN'
p2539
I117
sg895
g1628
sS'block_loop.thisIndex'
p2540
g889
sg38
S'left'
p2541
sg59
g63
sS'trial_loop.thisN'
p2542
I117
sg33
g1481
sg64
g65
sS'trial_loop.thisIndex'
p2543
g60
(g99
S'u\x00\x00\x00'
tRp2544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2545
I0
sg904
g1635
sS'block_loop.thisRepN'
p2546
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2547
I0
sg910
g1488
sg55
g11
sS'block_loop.thisTrial'
p2548
Nsg70
Vn
sS'block_loop.thisTrialN'
p2549
I0
sg39
F1.53329638455034
sg34
g753
(S'\x07\xdf\x07\t\x126\x10\x05\x05('
tRp2550
sa(dp2551
S'trial_loop.thisTrialN'
p2552
I118
sg895
g1688
sS'block_loop.thisIndex'
p2553
g889
sg38
S'left'
p2554
sg59
g63
sS'trial_loop.thisN'
p2555
I118
sg33
g1374
sg64
g65
sS'trial_loop.thisIndex'
p2556
g60
(g99
S'v\x00\x00\x00'
tRp2557
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2558
I0
sg904
g1695
sS'block_loop.thisRepN'
p2559
I0
sg907
g1367
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2560
I0
sg910
g1374
sg55
g11
sS'block_loop.thisTrial'
p2561
Nsg70
Vn
sS'block_loop.thisTrialN'
p2562
I0
sg39
F1.716643602187105
sg34
g753
(S'\x07\xdf\x07\t\x126\x16\r\xac\x00'
tRp2563
sa(dp2564
S'trial_loop.thisTrialN'
p2565
I119
sg895
g1703
sS'block_loop.thisIndex'
p2566
g889
sg38
S'left'
p2567
sg59
g63
sS'trial_loop.thisN'
p2568
I119
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p2569
g60
(g99
S'w\x00\x00\x00'
tRp2570
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2571
I0
sg904
g1710
sS'block_loop.thisRepN'
p2572
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2573
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p2574
Nsg70
Vn
sS'block_loop.thisTrialN'
p2575
I0
sg39
F1.8832227435741515
sg34
g753
(S'\x07\xdf\x07\t\x126\x1d\t\xb4`'
tRp2576
sa(dp2577
S'trial_loop.thisTrialN'
p2578
I120
sg895
g2133
sS'block_loop.thisIndex'
p2579
g889
sg38
S'right'
p2580
sg59
g63
sS'trial_loop.thisN'
p2581
I120
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p2582
g60
(g99
S'x\x00\x00\x00'
tRp2583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2584
I0
sg904
g2140
sS'block_loop.thisRepN'
p2585
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2586
I0
sg910
g1290
sg55
g11
sS'block_loop.thisTrial'
p2587
Nsg70
Vn
sS'block_loop.thisTrialN'
p2588
I0
sg39
F2.0833029703317152
sg34
g753
(S'\x07\xdf\x07\t\x126$\x08\x93P'
tRp2589
sa(dp2590
S'trial_loop.thisTrialN'
p2591
I121
sg895
g1673
sS'block_loop.thisIndex'
p2592
g889
sg38
S'left'
p2593
sg59
g63
sS'trial_loop.thisN'
p2594
I121
sg33
g1007
sg64
g65
sS'trial_loop.thisIndex'
p2595
g60
(g99
S'y\x00\x00\x00'
tRp2596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2597
I0
sg904
g1680
sS'block_loop.thisRepN'
p2598
I0
sg907
g1007
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2599
I0
sg910
g1001
sg55
g11
sS'block_loop.thisTrial'
p2600
Nsg70
Vn
sS'block_loop.thisTrialN'
p2601
I0
sg39
F1.4333094420690031
sg34
g753
(S'\x07\xdf\x07\t\x126+\nP\xa0'
tRp2602
sa(dp2603
S'trial_loop.thisTrialN'
p2604
I122
sg895
g2051
sS'block_loop.thisIndex'
p2605
g889
sg38
S'right'
p2606
sg59
g63
sS'trial_loop.thisN'
p2607
I122
sg33
g1735
sg64
g65
sS'trial_loop.thisIndex'
p2608
g60
(g99
S'z\x00\x00\x00'
tRp2609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2610
I0
sg904
g2058
sS'block_loop.thisRepN'
p2611
I0
sg907
g1735
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2612
I0
sg910
g1742
sg55
g11
sS'block_loop.thisTrial'
p2613
Nsg70
Vn
sS'block_loop.thisTrialN'
p2614
I0
sg39
F0.98321339233734761
sg34
g753
(S'\x07\xdf\x07\t\x1262\x02\x0bp'
tRp2615
sa(dp2616
S'trial_loop.thisTrialN'
p2617
I123
sg895
g1063
sS'block_loop.thisIndex'
p2618
g889
sg38
S'right'
p2619
sg59
g63
sS'trial_loop.thisN'
p2620
I123
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p2621
g60
(g99
S'{\x00\x00\x00'
tRp2622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2623
I0
sg904
g1071
sS'block_loop.thisRepN'
p2624
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2625
I0
sg910
g1074
sg55
g11
sS'block_loop.thisTrial'
p2626
Nsg70
Vn
sS'block_loop.thisTrialN'
p2627
I0
sg39
F1.3170818558101018
sg34
g753
(S'\x07\xdf\x07\t\x1268\x02a`'
tRp2628
sa(dp2629
S'trial_loop.thisTrialN'
p2630
I124
sg895
g1643
sS'block_loop.thisIndex'
p2631
g889
sg38
S'left'
p2632
sg59
g63
sS'trial_loop.thisN'
p2633
I124
sg33
g1654
sg64
g65
sS'trial_loop.thisIndex'
p2634
g60
(g99
S'|\x00\x00\x00'
tRp2635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2636
I0
sg904
g1651
sS'block_loop.thisRepN'
p2637
I0
sg907
g1647
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2638
I0
sg910
g1654
sg55
g11
sS'block_loop.thisTrial'
p2639
Nsg70
Vn
sS'block_loop.thisTrialN'
p2640
I0
sg39
F1.1665785711884382
sg34
g753
(S'\x07\xdf\x07\t\x127\x02\x07\xb4\xa8'
tRp2641
sa(dp2642
S'trial_loop.thisTrialN'
p2643
I125
sg895
g1462
sS'block_loop.thisIndex'
p2644
g889
sg38
S'right'
p2645
sg59
g63
sS'trial_loop.thisN'
p2646
I125
sg33
g1225
sg64
g65
sS'trial_loop.thisIndex'
p2647
g60
(g99
S'}\x00\x00\x00'
tRp2648
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2649
I0
sg904
g1469
sS'block_loop.thisRepN'
p2650
I0
sg907
g1225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2651
I0
sg910
g1232
sg55
g11
sS'block_loop.thisTrial'
p2652
Nsg70
Vn
sS'block_loop.thisTrialN'
p2653
I0
sg39
F1.4497673310033861
sg34
g753
(S'\x07\xdf\x07\t\x127\x08\n\xa6\x90'
tRp2654
sa(dp2655
S'trial_loop.thisTrialN'
p2656
I126
sg895
g1046
sS'block_loop.thisIndex'
p2657
g889
sg38
S'right'
p2658
sg59
g63
sS'trial_loop.thisN'
p2659
I126
sg33
g1057
sg64
g65
sS'trial_loop.thisIndex'
p2660
g60
(g99
S'~\x00\x00\x00'
tRp2661
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2662
I0
sg904
g1054
sS'block_loop.thisRepN'
p2663
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2664
I0
sg910
g1057
sg55
g11
sS'block_loop.thisTrial'
p2665
Nsg70
Vn
sS'block_loop.thisTrialN'
p2666
I0
sg39
F0.9830608645643224
sg34
g753
(S'\x07\xdf\x07\t\x127\x0f\x02\xde`'
tRp2667
sa(dp2668
S'trial_loop.thisTrialN'
p2669
I127
sg895
g1688
sS'block_loop.thisIndex'
p2670
g889
sg38
S'right'
p2671
sg59
g63
sS'trial_loop.thisN'
p2672
I127
sg33
g1374
sg64
g65
sS'trial_loop.thisIndex'
p2673
g60
(g99
S'\x7f\x00\x00\x00'
tRp2674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2675
I0
sg904
g1695
sS'block_loop.thisRepN'
p2676
I0
sg907
g1367
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2677
I0
sg910
g1374
sg55
g11
sS'block_loop.thisTrial'
p2678
Nsg70
Vn
sS'block_loop.thisTrialN'
p2679
I0
sg39
F1.3333028277811536
sg34
g753
(S'\x07\xdf\x07\t\x127\x15\x030h'
tRp2680
sa(dp2681
S'trial_loop.thisTrialN'
p2682
I128
sg895
g2079
sS'block_loop.thisIndex'
p2683
g889
sg38
S'left'
p2684
sg59
g63
sS'trial_loop.thisN'
p2685
I128
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p2686
g60
(g99
S'\x80\x00\x00\x00'
tRp2687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2688
I0
sg904
g2086
sS'block_loop.thisRepN'
p2689
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2690
I0
sg910
g1198
sg55
g11
sS'block_loop.thisTrial'
p2691
Nsg70
Vn
sS'block_loop.thisTrialN'
p2692
I0
sg39
F1.3500315604214848
sg34
g753
(S'\x07\xdf\x07\t\x127\x1b\x08\xc20'
tRp2693
sa(dp2694
S'trial_loop.thisTrialN'
p2695
I129
sg895
g2051
sS'block_loop.thisIndex'
p2696
g889
sg38
S'right'
p2697
sg59
g63
sS'trial_loop.thisN'
p2698
I129
sg33
g1742
sg64
g65
sS'trial_loop.thisIndex'
p2699
g60
(g99
S'\x81\x00\x00\x00'
tRp2700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2701
I0
sg904
g2058
sS'block_loop.thisRepN'
p2702
I0
sg907
g1735
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2703
I0
sg910
g1742
sg55
g11
sS'block_loop.thisTrial'
p2704
Nsg70
Vn
sS'block_loop.thisTrialN'
p2705
I0
sg39
F1.0663478693713841
sg34
g753
(S'\x07\xdf\x07\t\x127!\x0e\x8e\x90'
tRp2706
sa(dp2707
S'trial_loop.thisTrialN'
p2708
I130
sg895
g1031
sS'block_loop.thisIndex'
p2709
g889
sg38
S'left'
p2710
sg59
g63
sS'trial_loop.thisN'
p2711
I130
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2712
g60
(g99
S'\x82\x00\x00\x00'
tRp2713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2714
I0
sg904
g1038
sS'block_loop.thisRepN'
p2715
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2716
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p2717
Nsg70
Vn
sS'block_loop.thisTrialN'
p2718
I0
sg39
F1.6165600112653919
sg34
g753
(S'\x07\xdf\x07\t\x127(\x00\xd2\xf0'
tRp2719
sa(dp2720
S'trial_loop.thisTrialN'
p2721
I131
sg895
g1813
sS'block_loop.thisIndex'
p2722
g889
sg38
S'right'
p2723
sg59
g63
sS'trial_loop.thisN'
p2724
I131
sg33
g1647
sg64
g65
sS'trial_loop.thisIndex'
p2725
g60
(g99
S'\x83\x00\x00\x00'
tRp2726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2727
I0
sg904
g1820
sS'block_loop.thisRepN'
p2728
I0
sg907
g1647
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2729
I0
sg910
g1654
sg55
g11
sS'block_loop.thisTrial'
p2730
Nsg70
Vn
sS'block_loop.thisTrialN'
p2731
I0
sg39
F0.9832062648711144
sg34
g753
(S'\x07\xdf\x07\t\x127.\n\xae`'
tRp2732
sa(dp2733
S'trial_loop.thisTrialN'
p2734
I132
sg895
g1335
sS'block_loop.thisIndex'
p2735
g889
sg38
S'right'
p2736
sg59
g63
sS'trial_loop.thisN'
p2737
I132
sg33
g1024
sg64
g65
sS'trial_loop.thisIndex'
p2738
g60
(g99
S'\x84\x00\x00\x00'
tRp2739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2740
I0
sg904
g1342
sS'block_loop.thisRepN'
p2741
I0
sg907
g1024
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2742
I0
sg910
g1018
sg55
g11
sS'block_loop.thisTrial'
p2743
Nsg70
Vn
sS'block_loop.thisTrialN'
p2744
I0
sg39
F1.2666567452361051
sg34
g753
(S'\x07\xdf\x07\t\x1274\x0b\x00h'
tRp2745
sa(dp2746
S'trial_loop.thisTrialN'
p2747
I133
sg895
g2133
sS'block_loop.thisIndex'
p2748
g889
sg38
S'right'
p2749
sg59
g63
sS'trial_loop.thisN'
p2750
I133
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p2751
g60
(g99
S'\x85\x00\x00\x00'
tRp2752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2753
I0
sg904
g2140
sS'block_loop.thisRepN'
p2754
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2755
I0
sg910
g1290
sg55
g11
sS'block_loop.thisTrial'
p2756
Nsg70
Vn
sS'block_loop.thisTrialN'
p2757
I0
sg39
F1.6666618199888035
sg34
g753
(S'\x07\xdf\x07\t\x127;\x00]\xc0'
tRp2758
sa(dp2759
S'trial_loop.thisTrialN'
p2760
I134
sg895
g1731
sS'block_loop.thisIndex'
p2761
g889
sg38
S'right'
p2762
sg59
g63
sS'trial_loop.thisN'
p2763
I134
sg33
g1735
sg64
g65
sS'trial_loop.thisIndex'
p2764
g60
(g99
S'\x86\x00\x00\x00'
tRp2765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2766
I0
sg904
g1739
sS'block_loop.thisRepN'
p2767
I0
sg907
g1735
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2768
I0
sg910
g1742
sg55
g11
sS'block_loop.thisTrial'
p2769
Nsg70
Vn
sS'block_loop.thisTrialN'
p2770
I0
sg39
F0.98326328459734214
sg34
g753
(S'\x07\xdf\x07\t\x128\x05\n\xec\xe0'
tRp2771
sa(dp2772
S'trial_loop.thisTrialN'
p2773
I135
sg895
g1673
sS'block_loop.thisIndex'
p2774
g889
sg38
S'left'
p2775
sg59
g63
sS'trial_loop.thisN'
p2776
I135
sg33
g1007
sg64
g65
sS'trial_loop.thisIndex'
p2777
g60
(g99
S'\x87\x00\x00\x00'
tRp2778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2779
I0
sg904
g1680
sS'block_loop.thisRepN'
p2780
I0
sg907
g1007
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2781
I0
sg910
g1001
sg55
g11
sS'block_loop.thisTrial'
p2782
Nsg70
Vn
sS'block_loop.thisTrialN'
p2783
I0
sg39
F0.88326009149386664
sg34
g753
(S'\x07\xdf\x07\t\x128\x0b\x0bB\xd0'
tRp2784
sa(dp2785
S'trial_loop.thisTrialN'
p2786
I136
sg895
g1204
sS'block_loop.thisIndex'
p2787
g889
sg38
S'left'
p2788
sg59
g63
sS'trial_loop.thisN'
p2789
I136
sg33
g1208
sg64
g65
sS'trial_loop.thisIndex'
p2790
g60
(g99
S'\x88\x00\x00\x00'
tRp2791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2792
I0
sg904
g1212
sS'block_loop.thisRepN'
p2793
I0
sg907
g1208
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2794
I0
sg910
g1215
sg55
g11
sS'block_loop.thisTrial'
p2795
Nsg70
Vn
sS'block_loop.thisTrialN'
p2796
I0
sg39
F1.8665678514771571
sg34
g753
(S'\x07\xdf\x07\t\x128\x11\t\xeb\x10'
tRp2797
sa(dp2798
S'trial_loop.thisTrialN'
p2799
I137
sg895
g1187
sS'block_loop.thisIndex'
p2800
g889
sg38
S'right'
p2801
sg59
g63
sS'trial_loop.thisN'
p2802
I137
sg33
g1198
sg64
g65
sS'trial_loop.thisIndex'
p2803
g60
(g99
S'\x89\x00\x00\x00'
tRp2804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2805
I0
sg904
g1195
sS'block_loop.thisRepN'
p2806
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2807
I0
sg910
g1198
sg55
g11
sS'block_loop.thisTrial'
p2808
Nsg70
Vn
sS'block_loop.thisTrialN'
p2809
I0
sg39
F1.4998335023956315
sg34
g753
(S'\x07\xdf\x07\t\x128\x18\x08\x8fh'
tRp2810
sa(dp2811
S'trial_loop.thisTrialN'
p2812
I138
sg895
g1408
sS'block_loop.thisIndex'
p2813
g889
sg38
S'left'
p2814
sg59
g63
sS'trial_loop.thisN'
p2815
I138
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2816
g60
(g99
S'\x8a\x00\x00\x00'
tRp2817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2818
I0
sg904
g1415
sS'block_loop.thisRepN'
p2819
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2820
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p2821
Nsg70
Vn
sS'block_loop.thisTrialN'
p2822
I0
sg39
F1.7669572391932888
sg34
g753
(S'\x07\xdf\x07\t\x128\x1f\x01@P'
tRp2823
sa(dp2824
S'trial_loop.thisTrialN'
p2825
I139
sg895
g1155
sS'block_loop.thisIndex'
p2826
g889
sg38
S'left'
p2827
sg59
g63
sS'trial_loop.thisN'
p2828
I139
sg33
g1159
sg64
g65
sS'trial_loop.thisIndex'
p2829
g60
(g99
S'\x8b\x00\x00\x00'
tRp2830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2831
I0
sg904
g1163
sS'block_loop.thisRepN'
p2832
I0
sg907
g1159
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2833
I0
sg910
g1166
sg55
g11
sS'block_loop.thisTrial'
p2834
Nsg70
Vn
sS'block_loop.thisTrialN'
p2835
I0
sg39
F1.1665705884261115
sg34
g753
(S'\x07\xdf\x07\t\x128%\ry8'
tRp2836
sa(dp2837
S'trial_loop.thisTrialN'
p2838
I140
sg895
g1462
sS'block_loop.thisIndex'
p2839
g889
sg38
S'right'
p2840
sg59
g63
sS'trial_loop.thisN'
p2841
I140
sg33
g1225
sg64
g65
sS'trial_loop.thisIndex'
p2842
g60
(g99
S'\x8c\x00\x00\x00'
tRp2843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2844
I0
sg904
g1469
sS'block_loop.thisRepN'
p2845
I0
sg907
g1225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2846
I0
sg910
g1232
sg55
g11
sS'block_loop.thisTrial'
p2847
Nsg70
Vn
sS'block_loop.thisTrialN'
p2848
I0
sg39
F1.1166104737239948
sg34
g753
(S'\x07\xdf\x07\t\x128,\x01g`'
tRp2849
sa(dp2850
S'trial_loop.thisTrialN'
p2851
I141
sg895
g896
sS'block_loop.thisIndex'
p2852
g889
sg38
S'right'
p2853
sg59
g63
sS'trial_loop.thisN'
p2854
I141
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p2855
g60
(g99
S'\x8d\x00\x00\x00'
tRp2856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2857
I0
sg904
g905
sS'block_loop.thisRepN'
p2858
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2859
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p2860
Nsg70
Vn
sS'block_loop.thisTrialN'
p2861
I0
sg39
F1.8165991838213813
sg34
g753
(S'\x07\xdf\x07\t\x1282\x03\xa5\x98'
tRp2862
sa(dp2863
S'trial_loop.thisTrialN'
p2864
I142
sg895
g2079
sS'block_loop.thisIndex'
p2865
g889
sg38
S'left'
p2866
sg59
g63
sS'trial_loop.thisN'
p2867
I142
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p2868
g60
(g99
S'\x8e\x00\x00\x00'
tRp2869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2870
I0
sg904
g2086
sS'block_loop.thisRepN'
p2871
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2872
I0
sg910
g1198
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vn
sS'block_loop.thisTrialN'
p2874
I0
sg39
F1.1999111632649146
sg34
g753
(S'\x07\xdf\x07\t\x1289\x01S\xd8'
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g1643
sS'block_loop.thisIndex'
p2878
g889
sg38
S'left'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g1647
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g1651
sS'block_loop.thisRepN'
p2884
I0
sg907
g1647
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2885
I0
sg910
g1654
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vn
sS'block_loop.thisTrialN'
p2887
I0
sg39
F1.8003129242642899
sg34
g753
(S'\x07\xdf\x07\t\x129\x03\x04\xfdX'
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g1971
sS'block_loop.thisIndex'
p2891
g889
sg38
S'right'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g1159
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g1978
sS'block_loop.thisRepN'
p2897
I0
sg907
g1159
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2898
I0
sg910
g1166
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vn
sS'block_loop.thisTrialN'
p2900
I0
sg39
F1.0832277042900387
sg34
g753
(S'\x07\xdf\x07\t\x129\n\x02q\x00'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g1095
sS'block_loop.thisIndex'
p2904
g889
sg38
S'left'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g1105
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g1103
sS'block_loop.thisRepN'
p2910
I0
sg907
g1105
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2911
I0
sg910
g1099
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vn
sS'block_loop.thisTrialN'
p2913
I0
sg39
F1.0833012597358902
sg34
g753
(S'\x07\xdf\x07\t\x129\x10\x0428'
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g1971
sS'block_loop.thisIndex'
p2917
g889
sg38
S'right'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g1159
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g1978
sS'block_loop.thisRepN'
p2923
I0
sg907
g1159
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2924
I0
sg910
g1166
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vn
sS'block_loop.thisTrialN'
p2926
I0
sg39
F0.99996065638697473
sg34
g753
(S'\x07\xdf\x07\t\x129\x16\x05\xf3p'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g2473
sS'block_loop.thisIndex'
p2930
g889
sg38
S'right'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g1208
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g2480
sS'block_loop.thisRepN'
p2936
I0
sg907
g1208
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2937
I0
sg910
g1215
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vn
sS'block_loop.thisTrialN'
p2939
I0
sg39
F1.7333087578335835
sg34
g753
(S'\x07\xdf\x07\t\x129\x1c\x06\x83\xf8'
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g1063
sS'block_loop.thisIndex'
p2943
g889
sg38
S'right'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g1071
sS'block_loop.thisRepN'
p2949
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2950
I0
sg910
g1074
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vn
sS'block_loop.thisTrialN'
p2952
I0
sg39
F1.3836141840001801
sg34
g753
(S'\x07\xdf\x07\t\x129#\x02\xc6\xf0'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g1971
sS'block_loop.thisIndex'
p2956
g889
sg38
S'right'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g1159
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g1978
sS'block_loop.thisRepN'
p2962
I0
sg907
g1159
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2963
I0
sg910
g1166
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vn
sS'block_loop.thisTrialN'
p2965
I0
sg39
F1.2664942390110809
sg34
g753
(S'\x07\xdf\x07\t\x129)\tN\xd0'
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g1380
sS'block_loop.thisIndex'
p2969
g889
sg38
S'left'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g1387
sS'block_loop.thisRepN'
p2975
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2976
I0
sg910
g1123
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vn
sS'block_loop.thisTrialN'
p2978
I0
sg39
F1.2498635803021898
sg34
g753
(S'\x07\xdf\x07\t\x129/\r\xac\x00'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g1546
sS'block_loop.thisIndex'
p2982
g889
sg38
S'left'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g1553
sS'block_loop.thisRepN'
p2988
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2989
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vn
sS'block_loop.thisTrialN'
p2991
I0
sg39
F1.166596817503887
sg34
g753
(S'\x07\xdf\x07\t\x1296\x02\xca\xd8'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g1014
sS'block_loop.thisIndex'
p2995
g889
sg38
S'left'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g1024
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g1022
sS'block_loop.thisRepN'
p3001
I0
sg907
g1024
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3002
I0
sg910
g1018
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vn
sS'block_loop.thisTrialN'
p3004
I0
sg39
F0.81659348184984992
sg34
g753
(S'\x07\xdf\x07\t\x12:\x00\x05\xfb@'
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g1703
sS'block_loop.thisIndex'
p3008
g889
sg38
S'left'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g1710
sS'block_loop.thisRepN'
p3014
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3015
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vn
sS'block_loop.thisTrialN'
p3017
I0
sg39
F1.816651071771048
sg34
g753
(S'\x07\xdf\x07\t\x12:\x06\x03\xb1P'
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g1813
sS'block_loop.thisIndex'
p3021
g889
sg38
S'right'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g1647
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g1820
sS'block_loop.thisRepN'
p3027
I0
sg907
g1647
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3028
I0
sg910
g1654
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vn
sS'block_loop.thisTrialN'
p3030
I0
sg39
F1.4832342045374389
sg34
g753
(S'\x07\xdf\x07\t\x12:\r\x01_\x90'
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g1363
sS'block_loop.thisIndex'
p3034
g889
sg38
S'left'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g1367
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g1371
sS'block_loop.thisRepN'
p3040
I0
sg907
g1367
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3041
I0
sg910
g1374
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vn
sS'block_loop.thisTrialN'
p3043
I0
sg39
F2.5831889308756217
sg34
g753
(S'\x07\xdf\x07\t\x12:\x13\tR\xb8'
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g1264
sS'block_loop.thisIndex'
p3047
g889
sg38
S'left'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g1271
sS'block_loop.thisRepN'
p3053
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3054
I0
sg910
g1057
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vn
sS'block_loop.thisTrialN'
p3056
I0
sg39
F1.6163738418581488
sg34
g753
(S'\x07\xdf\x07\t\x12:\x1b\x03k\x00'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g950
sS'block_loop.thisIndex'
p3060
g889
sg38
S'right'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g958
sS'block_loop.thisRepN'
p3066
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3067
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vn
sS'block_loop.thisTrialN'
p3069
I0
sg39
F1.7332714099065925
sg34
g753
(S'\x07\xdf\x07\t\x12:!\rFp'
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g2473
sS'block_loop.thisIndex'
p3073
g889
sg38
S'right'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g1208
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g2480
sS'block_loop.thisRepN'
p3079
I0
sg907
g1208
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3080
I0
sg910
g1215
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vn
sS'block_loop.thisTrialN'
p3082
I0
sg39
F1.5170135461776226
sg34
g753
(S'\x07\xdf\x07\t\x12:(\t\xc4\x00'
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g1031
sS'block_loop.thisIndex'
p3086
g889
sg38
S'left'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g1038
sS'block_loop.thisRepN'
p3092
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3093
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vn
sS'block_loop.thisTrialN'
p3095
I0
sg39
F1.7333215872713481
sg34
g753
(S'\x07\xdf\x07\t\x12:/\x02\xee\x00'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g1813
sS'block_loop.thisIndex'
p3099
g889
sg38
S'right'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g1654
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g1820
sS'block_loop.thisRepN'
p3105
I0
sg907
g1647
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3106
I0
sg910
g1654
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vn
sS'block_loop.thisTrialN'
p3108
I0
sg39
F2.4165065837842121
sg34
g753
(S'\x07\xdf\x07\t\x12:5\x0es8'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g1477
sS'block_loop.thisIndex'
p3112
g889
sg38
S'right'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g1481
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g1485
sS'block_loop.thisRepN'
p3118
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3119
I0
sg910
g1488
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vn
sS'block_loop.thisTrialN'
p3121
I0
sg39
F1.799895539857971
sg34
g753
(S'\x07\xdf\x07\t\x12;\x01\x06* '
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g1380
sS'block_loop.thisIndex'
p3125
g889
sg38
S'left'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g1123
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g1387
sS'block_loop.thisRepN'
p3131
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3132
I0
sg910
g1123
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vn
sS'block_loop.thisTrialN'
p3134
I0
sg39
F1.0332576111359231
sg34
g753
(S'\x07\xdf\x07\t\x12;\x08\x03\x99\xe0'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g1204
sS'block_loop.thisIndex'
p3138
g889
sg38
S'left'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g1208
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g1212
sS'block_loop.thisRepN'
p3144
I0
sg907
g1208
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3145
I0
sg910
g1215
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vn
sS'block_loop.thisTrialN'
p3147
I0
sg39
F1.6999975481521687
sg34
g753
(S'\x07\xdf\x07\t\x12;\x0e\x04\xa7h'
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g2079
sS'block_loop.thisIndex'
p3151
g889
sg38
S'left'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g1198
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g2086
sS'block_loop.thisRepN'
p3157
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3158
I0
sg910
g1198
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vn
sS'block_loop.thisTrialN'
p3160
I0
sg39
F1.1165534539977671
sg34
g753
(S'\x07\xdf\x07\t\x12;\x15\x00\xab\xe0'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g1080
sS'block_loop.thisIndex'
p3164
g889
sg38
S'left'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g1087
sS'block_loop.thisRepN'
p3170
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3171
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vn
sS'block_loop.thisTrialN'
p3173
I0
sg39
F1.9166066534053243
sg34
g753
(S'\x07\xdf\x07\t\x12;\x1b\x02\xe60'
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g1628
sS'block_loop.thisIndex'
p3177
g889
sg38
S'left'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g1488
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g1635
sS'block_loop.thisRepN'
p3183
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3184
I0
sg910
g1488
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vn
sS'block_loop.thisTrialN'
p3186
I0
sg39
F1.2499773346571601
sg34
g753
(S'\x07\xdf\x07\t\x12;"\x02\x07\x88'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g1095
sS'block_loop.thisIndex'
p3190
g889
sg38
S'left'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g1105
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g1103
sS'block_loop.thisRepN'
p3196
I0
sg907
g1105
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3197
I0
sg910
g1099
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vn
sS'block_loop.thisTrialN'
p3199
I0
sg39
F1.1831787243427243
sg34
g753
(S'\x07\xdf\x07\t\x12;(\x06d\xb8'
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g2051
sS'block_loop.thisIndex'
p3203
g889
sg38
S'right'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g1735
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g2058
sS'block_loop.thisRepN'
p3209
I0
sg907
g1735
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3210
I0
sg910
g1742
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vn
sS'block_loop.thisTrialN'
p3212
I0
sg39
F1.5169231699073862
sg34
g753
(S'\x07\xdf\x07\t\x12;.\t\xd3\xa0'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g1221
sS'block_loop.thisIndex'
p3216
g889
sg38
S'left'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g1225
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g1229
sS'block_loop.thisRepN'
p3222
I0
sg907
g1225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3223
I0
sg910
g1232
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vn
sS'block_loop.thisTrialN'
p3225
I0
sg39
F1.0498899804370012
sg34
g753
(S'\x07\xdf\x07\t\x12;5\x02\xbf '
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g1613
sS'block_loop.thisIndex'
p3229
g889
sg38
S'right'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g1105
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g1620
sS'block_loop.thisRepN'
p3235
I0
sg907
g1105
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3236
I0
sg910
g1099
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vn
sS'block_loop.thisTrialN'
p3238
I0
sg39
F0.94992299485966214
sg34
g753
(S'\x07\xdf\x07\t\x12;;\x04\x07@'
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g967
sS'block_loop.thisIndex'
p3242
g889
sg38
S'right'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g975
sS'block_loop.thisRepN'
p3248
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3249
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vn
sS'block_loop.thisTrialN'
p3251
I0
sg39
F1.2165660553582711
sg34
g753
(S'\x07\xdf\x07\t\x13\x00\x05\x03\xe4\x18'
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g1335
sS'block_loop.thisIndex'
p3255
g889
sg38
S'right'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g1024
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g1342
sS'block_loop.thisRepN'
p3261
I0
sg907
g1024
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3262
I0
sg910
g1018
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vn
sS'block_loop.thisTrialN'
p3264
I0
sg39
F1.28332589225829
sg34
g753
(S'\x07\xdf\x07\t\x13\x00\x0b\x07\xc80'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g1408
sS'block_loop.thisIndex'
p3268
g889
sg38
S'left'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g1415
sS'block_loop.thisRepN'
p3274
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3275
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vn
sS'block_loop.thisTrialN'
p3277
I0
sg39
F1.0503407213800529
sg34
g753
(S'\x07\xdf\x07\t\x13\x00\x11\x0cg\xc8'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g1031
sS'block_loop.thisIndex'
p3281
g889
sg38
S'left'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g1038
sS'block_loop.thisRepN'
p3287
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3288
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vn
sS'block_loop.thisTrialN'
p3290
I0
sg39
F1.0665648294343555
sg34
g753
(S'\x07\xdf\x07\t\x13\x00\x17\r\xaf\xe8'
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g1172
sS'block_loop.thisIndex'
p3294
g889
sg38
S'left'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g1179
sS'block_loop.thisRepN'
p3300
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3301
I0
sg910
g1074
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vn
sS'block_loop.thisTrialN'
p3303
I0
sg39
F1.1498997308081016
sg34
g753
(S'\x07\xdf\x07\t\x13\x00\x1d\x0f2\xa0'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g1080
sS'block_loop.thisIndex'
p3307
g889
sg38
S'left'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g1087
sS'block_loop.thisRepN'
p3313
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3314
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vn
sS'block_loop.thisTrialN'
p3316
I0
sg39
F1.1166036313588847
sg34
g753
(S'\x07\xdf\x07\t\x13\x00$\x02\xe2H'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g2133
sS'block_loop.thisIndex'
p3320
g889
sg38
S'right'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g2140
sS'block_loop.thisRepN'
p3326
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3327
I0
sg910
g1290
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vn
sS'block_loop.thisTrialN'
p3329
I0
sg39
F1.4665855846142222
sg34
g753
(S'\x07\xdf\x07\t\x13\x00*\x05 \x80'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g1080
sS'block_loop.thisIndex'
p3333
g889
sg38
S'left'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g1087
sS'block_loop.thisRepN'
p3339
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3340
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vn
sS'block_loop.thisTrialN'
p3342
I0
sg39
F1.2670139738220314
sg34
g753
(S'\x07\xdf\x07\t\x13\x000\x0c\xd5('
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g1046
sS'block_loop.thisIndex'
p3346
g889
sg38
S'right'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g1054
sS'block_loop.thisRepN'
p3352
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3353
I0
sg910
g1057
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vn
sS'block_loop.thisTrialN'
p3355
I0
sg39
F0.83300518480609753
sg34
g753
(S'\x07\xdf\x07\t\x13\x007\x02.\x98'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g1187
sS'block_loop.thisIndex'
p3359
g889
sg38
S'right'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g1198
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g1195
sS'block_loop.thisRepN'
p3365
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3366
I0
sg910
g1198
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vn
sS'block_loop.thisTrialN'
p3368
I0
sg39
F1.8665678514807951
sg34
g753
(S'\x07\xdf\x07\t\x13\x01\x01\x00#('
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g1628
sS'block_loop.thisIndex'
p3372
g889
sg38
S'left'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g1481
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g1635
sS'block_loop.thisRepN'
p3378
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3379
I0
sg910
g1488
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vn
sS'block_loop.thisTrialN'
p3381
I0
sg39
F1.1666489905510389
sg34
g753
(S'\x07\xdf\x07\t\x13\x01\x07\r\xcb@'
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g2473
sS'block_loop.thisIndex'
p3385
g889
sg38
S'right'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g1208
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g2480
sS'block_loop.thisRepN'
p3391
I0
sg907
g1208
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3392
I0
sg910
g1215
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vn
sS'block_loop.thisTrialN'
p3394
I0
sg39
F1.3999548973952187
sg34
g753
(S'\x07\xdf\x07\t\x13\x01\x0e\x01z\xe8'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g1971
sS'block_loop.thisIndex'
p3398
g889
sg38
S'right'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g1159
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g1978
sS'block_loop.thisRepN'
p3404
I0
sg907
g1159
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3405
I0
sg910
g1166
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vn
sS'block_loop.thisTrialN'
p3407
I0
sg39
F1.2500400563585572
sg34
g753
(S'\x07\xdf\x07\t\x13\x01\x14\x08=`'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g1613
sS'block_loop.thisIndex'
p3411
g889
sg38
S'right'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g1099
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g1620
sS'block_loop.thisRepN'
p3417
I0
sg907
g1105
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3418
I0
sg910
g1099
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vn
sS'block_loop.thisTrialN'
p3420
I0
sg39
F1.0666794390854193
sg34
g753
(S'\x07\xdf\x07\t\x13\x01\x1a\x0cc\xe0'
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g1731
sS'block_loop.thisIndex'
p3424
g889
sg38
S'left'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g1735
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g1739
sS'block_loop.thisRepN'
p3430
I0
sg907
g1735
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3431
I0
sg910
g1742
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vn
sS'block_loop.thisTrialN'
p3433
I0
sg39
F1.1998110936438025
sg34
g753
(S'\x07\xdf\x07\t\x13\x01 \r\xe6\x98'
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g916
sS'block_loop.thisIndex'
p3437
g889
sg38
S'right'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g924
sS'block_loop.thisRepN'
p3443
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3444
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vn
sS'block_loop.thisTrialN'
p3446
I0
sg39
F2.4666280643104983
sg34
g753
(S"\x07\xdf\x07\t\x13\x01'\x02M\xd8"
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g997
sS'block_loop.thisIndex'
p3450
g889
sg38
S'right'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g1005
sS'block_loop.thisRepN'
p3456
I0
sg907
g1007
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3457
I0
sg910
g1001
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vn
sS'block_loop.thisTrialN'
p3459
I0
sg39
F1.5165699326971662
sg34
g753
(S'\x07\xdf\x07\t\x13\x01.\t\xfe\x98'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g1613
sS'block_loop.thisIndex'
p3463
g889
sg38
S'right'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g1099
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g1620
sS'block_loop.thisRepN'
p3469
I0
sg907
g1105
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3470
I0
sg910
g1099
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vn
sS'block_loop.thisTrialN'
p3472
I0
sg39
F0.93338584850062034
sg34
g753
(S'\x07\xdf\x07\t\x13\x015\x03(\x98'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g2473
sS'block_loop.thisIndex'
p3476
g889
sg38
S'right'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g1208
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g2480
sS'block_loop.thisRepN'
p3482
I0
sg907
g1208
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3483
I0
sg910
g1215
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vn
sS'block_loop.thisTrialN'
p3485
I0
sg39
F1.5999039787784568
sg34
g753
(S'\x07\xdf\x07\t\x13\x01;\x02\x88p'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g1112
sS'block_loop.thisIndex'
p3489
g889
sg38
S'right'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g1120
sS'block_loop.thisRepN'
p3495
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3496
I0
sg910
g1123
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vn
sS'block_loop.thisTrialN'
p3498
I0
sg39
F1.5999082552589243
sg34
g753
(S'\x07\xdf\x07\t\x13\x02\x05\x0c%`'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g2133
sS'block_loop.thisIndex'
p3502
g889
sg38
S'right'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g1290
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g2140
sS'block_loop.thisRepN'
p3508
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3509
I0
sg910
g1290
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vn
sS'block_loop.thisTrialN'
p3511
I0
sg39
F1.5832325509654765
sg34
g753
(S'\x07\xdf\x07\t\x13\x02\x0c\x06\xbe\x90'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g950
sS'block_loop.thisIndex'
p3515
g889
sg38
S'right'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g958
sS'block_loop.thisRepN'
p3521
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3522
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vn
sS'block_loop.thisTrialN'
p3524
I0
sg39
F1.2332711248127453
sg34
g753
(S'\x07\xdf\x07\t\x13\x02\x13\x00\xda\xc0'
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g1477
sS'block_loop.thisIndex'
p3528
g889
sg38
S'right'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g1481
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g1485
sS'block_loop.thisRepN'
p3534
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3535
I0
sg910
g1488
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vn
sS'block_loop.thisTrialN'
p3537
I0
sg39
F1.8166513568685332
sg34
g753
(S'\x07\xdf\x07\t\x13\x02\x19\x04\xc2\xc0'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g1643
sS'block_loop.thisIndex'
p3541
g889
sg38
S'left'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g1647
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g1651
sS'block_loop.thisRepN'
p3547
I0
sg907
g1647
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3548
I0
sg910
g1654
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vn
sS'block_loop.thisTrialN'
p3550
I0
sg39
F1.483296926238836
sg34
g753
(S'\x07\xdf\x07\t\x13\x02 \x02\xaf\x80'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g916
sS'block_loop.thisIndex'
p3554
g889
sg38
S'right'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g924
sS'block_loop.thisRepN'
p3560
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3561
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vn
sS'block_loop.thisTrialN'
p3563
I0
sg39
F1.7499160384504648
sg34
g753
(S'\x07\xdf\x07\t\x13\x02&\nd('
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g1112
sS'block_loop.thisIndex'
p3567
g889
sg38
S'right'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1120
sS'block_loop.thisRepN'
p3573
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3574
I0
sg910
g1123
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vn
sS'block_loop.thisTrialN'
p3576
I0
sg39
F1.1998723898504977
sg34
g753
(S'\x07\xdf\x07\t\x13\x02-\x07 8'
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g1703
sS'block_loop.thisIndex'
p3580
g889
sg38
S'left'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g1710
sS'block_loop.thisRepN'
p3586
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3587
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vn
sS'block_loop.thisTrialN'
p3589
I0
sg39
F1.933219635997375
sg34
g753
(S'\x07\xdf\x07\t\x13\x023\n\xc9\xb8'
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g1063
sS'block_loop.thisIndex'
p3593
g889
sg38
S'right'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g1074
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g1071
sS'block_loop.thisRepN'
p3599
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3600
I0
sg910
g1074
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vn
sS'block_loop.thisTrialN'
p3602
I0
sg39
F1.4003426315393881
sg34
g753
(S'\x07\xdf\x07\t\x13\x02:\n!\xc0'
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g1279
sS'block_loop.thisIndex'
p3606
g889
sg38
S'left'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g1287
sS'block_loop.thisRepN'
p3612
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3613
I0
sg910
g1290
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vn
sS'block_loop.thisTrialN'
p3615
I0
sg39
F2.4332472905625764
sg34
g753
(S'\x07\xdf\x07\t\x13\x03\x05\x01\xa1\xf8'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F105.1813606503456
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vn
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vn
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'40-sardines.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'right'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'5-pineapple.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'5-pineapple.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
S'40-sardines.png'
p3648
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vn
sS'block_loop.thisTrialN'
p3650
I0
sg39
F2.1664730846932798
sg34
g753
(S'\x07\xdf\x07\t\x13\x06\x01\r\xc3p'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'43-mrporky_pork_crackles_redo.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'right'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'18-mms.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'18-mms.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3664
I1
sg3647
S'43-mrporky_pork_crackles_redo.png'
p3665
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vn
sS'block_loop.thisTrialN'
p3667
I0
sg39
F1.0832220023148693
sg34
g753
(S'\x07\xdf\x07\t\x13\x06\t\x010\xb0'
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'8-liquorice_catherine_wheels.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'left'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'8-liquorice_catherine_wheels.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3681
I1
sg3647
S'17-jacobs_mini_cheddars_redo.png'
p3682
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vn
sS'block_loop.thisTrialN'
p3684
I0
sg39
F0.78339773711559246
sg34
g753
(S'\x07\xdf\x07\t\x13\x06\x0f\x02\xf5\xd0'
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
S'27-hartleys_raspberries_jelly.png'
p3688
sS'block_loop.thisIndex'
p3689
g3627
sg38
S'right'
p3690
sg59
g63
sS'trial_loop.thisN'
p3691
I3
sg33
S'27-hartleys_raspberries_jelly.png'
p3692
sg64
g65
sS'trial_loop.thisIndex'
p3693
g60
(g99
S'\x03\x00\x00\x00'
tRp3694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3695
I0
sg3642
S'51-mars.png'
p3696
sS'block_loop.thisRepN'
p3697
I1
sg3645
S'51-mars.png'
p3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3699
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p3700
Nsg70
Vn
sS'block_loop.thisTrialN'
p3701
I0
sg39
F1.3498770369587874
sg34
g753
(S'\x07\xdf\x07\t\x13\x06\x15\x00.\xe0'
tRp3702
sa(dp3703
S'trial_loop.thisTrialN'
p3704
I4
sg3633
S'29-beans.png'
p3705
sS'block_loop.thisIndex'
p3706
g3627
sg38
S'left'
p3707
sg59
g63
sS'trial_loop.thisN'
p3708
I4
sg33
S'46-pistachios.png'
p3709
sg64
g65
sS'trial_loop.thisIndex'
p3710
g60
(g99
S'\x04\x00\x00\x00'
tRp3711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3712
I0
sg3642
S'46-pistachios.png'
p3713
sS'block_loop.thisRepN'
p3714
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3715
I1
sg3647
S'29-beans.png'
p3716
sg55
g11
sS'block_loop.thisTrial'
p3717
Nsg70
Vn
sS'block_loop.thisTrialN'
p3718
I0
sg39
F3.1665768605962512
sg34
g753
(S'\x07\xdf\x07\t\x13\x06\x1b\x05\xff('
tRp3719
sa(dp3720
S'trial_loop.thisTrialN'
p3721
I5
sg3633
g3634
sS'block_loop.thisIndex'
p3722
g3627
sg38
S'right'
p3723
sg59
g63
sS'trial_loop.thisN'
p3724
I5
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3725
g60
(g99
S'\x05\x00\x00\x00'
tRp3726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3727
I0
sg3642
g3643
sS'block_loop.thisRepN'
p3728
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3729
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3730
Nsg70
Vn
sS'block_loop.thisTrialN'
p3731
I0
sg39
F1.266665013092279
sg34
g753
(S'\x07\xdf\x07\t\x13\x06#\t\x1f\xf0'
tRp3732
sa(dp3733
S'trial_loop.thisTrialN'
p3734
I6
sg3633
S'2-steamed_puddings.png'
p3735
sS'block_loop.thisIndex'
p3736
g3627
sg38
S'left'
p3737
sg59
g63
sS'trial_loop.thisN'
p3738
I6
sg33
S'2-steamed_puddings.png'
p3739
sg64
g65
sS'trial_loop.thisIndex'
p3740
g60
(g99
S'\x06\x00\x00\x00'
tRp3741
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3742
I0
sg3642
S'20-fruit_pastilles.png'
p3743
sS'block_loop.thisRepN'
p3744
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3745
I1
sg3647
S'20-fruit_pastilles.png'
p3746
sg55
g11
sS'block_loop.thisTrial'
p3747
Nsg70
Vn
sS'block_loop.thisTrialN'
p3748
I0
sg39
F1.3499816681578523
sg34
g753
(S'\x07\xdf\x07\t\x13\x06)\r\xbf\x88'
tRp3749
sa(dp3750
S'trial_loop.thisTrialN'
p3751
I7
sg3633
S'35-raisins.png'
p3752
sS'block_loop.thisIndex'
p3753
g3627
sg38
S'left'
p3754
sg59
g63
sS'trial_loop.thisN'
p3755
I7
sg33
S'35-raisins.png'
p3756
sg64
g65
sS'trial_loop.thisIndex'
p3757
g60
(g99
S'\x07\x00\x00\x00'
tRp3758
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3759
I0
sg3642
S'49-yorkie.png'
p3760
sS'block_loop.thisRepN'
p3761
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3762
I1
sg3647
S'49-yorkie.png'
p3763
sg55
g11
sS'block_loop.thisTrial'
p3764
Nsg70
Vn
sS'block_loop.thisTrialN'
p3765
I0
sg39
F1.2999499936995562
sg34
g753
(S'\x07\xdf\x07\t\x13\x060\x04I\xa8'
tRp3766
sa(dp3767
S'trial_loop.thisTrialN'
p3768
I8
sg3633
S'19-caramello_redo.png'
p3769
sS'block_loop.thisIndex'
p3770
g3627
sg38
S'left'
p3771
sg59
g63
sS'trial_loop.thisN'
p3772
I8
sg33
S'19-caramello_redo.png'
p3773
sg64
g65
sS'trial_loop.thisIndex'
p3774
g60
(g99
S'\x08\x00\x00\x00'
tRp3775
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3776
I0
sg3642
S'30-spaghetti_hoops.png'
p3777
sS'block_loop.thisRepN'
p3778
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3779
I1
sg3647
S'30-spaghetti_hoops.png'
p3780
sg55
g11
sS'block_loop.thisTrial'
p3781
Nsg70
Vn
sS'block_loop.thisTrialN'
p3782
I0
sg39
F1.2999306069941667
sg34
g753
(S'\x07\xdf\x07\t\x13\x066\tbX'
tRp3783
sa(dp3784
S'trial_loop.thisTrialN'
p3785
I9
sg3633
S'25-kitkat.png'
p3786
sS'block_loop.thisIndex'
p3787
g3627
sg38
S'right'
p3788
sg59
g63
sS'trial_loop.thisN'
p3789
I9
sg33
S'31-hobnobs.png'
p3790
sg64
g65
sS'trial_loop.thisIndex'
p3791
g60
(g99
S'\t\x00\x00\x00'
tRp3792
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3793
I0
sg3642
S'31-hobnobs.png'
p3794
sS'block_loop.thisRepN'
p3795
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3796
I1
sg3647
S'25-kitkat.png'
p3797
sg55
g11
sS'block_loop.thisTrial'
p3798
Nsg70
Vn
sS'block_loop.thisTrialN'
p3799
I0
sg39
F1.4499167226895224
sg34
g753
(S'\x07\xdf\x07\t\x13\x07\x00\x0ew '
tRp3800
sa(dp3801
S'trial_loop.thisTrialN'
p3802
I10
sg3633
S'50-polo.png'
p3803
sS'block_loop.thisIndex'
p3804
g3627
sg38
S'right'
p3805
sg59
g63
sS'trial_loop.thisN'
p3806
I10
sg33
S'48-twix.png'
p3807
sg64
g65
sS'trial_loop.thisIndex'
p3808
g60
(g99
S'\n\x00\x00\x00'
tRp3809
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3810
I0
sg3642
S'48-twix.png'
p3811
sS'block_loop.thisRepN'
p3812
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3813
I1
sg3647
S'50-polo.png'
p3814
sg55
g11
sS'block_loop.thisTrial'
p3815
Nsg70
Vn
sS'block_loop.thisTrialN'
p3816
I0
sg39
F1.3333187933021691
sg34
g753
(S'\x07\xdf\x07\t\x13\x07\x07\x06\xae\xf0'
tRp3817
sa(dp3818
S'trial_loop.thisTrialN'
p3819
I11
sg3633
S'42-mrkipling_lemon_slices.png'
p3820
sS'block_loop.thisIndex'
p3821
g3627
sg38
S'left'
p3822
sg59
g63
sS'trial_loop.thisN'
p3823
I11
sg33
S'42-mrkipling_lemon_slices.png'
p3824
sg64
g65
sS'trial_loop.thisIndex'
p3825
g60
(g99
S'\x0b\x00\x00\x00'
tRp3826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3827
I0
sg3642
S'16-skips_prawn.png'
p3828
sS'block_loop.thisRepN'
p3829
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3830
I1
sg3647
S'16-skips_prawn.png'
p3831
sg55
g11
sS'block_loop.thisTrial'
p3832
Nsg70
Vn
sS'block_loop.thisTrialN'
p3833
I0
sg39
F1.366582961705717
sg34
g753
(S'\x07\xdf\x07\t\x13\x07\r\x0c@\xb8'
tRp3834
sa(dp3835
S'trial_loop.thisTrialN'
p3836
I12
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p3837
sS'block_loop.thisIndex'
p3838
g3627
sg38
S'right'
p3839
sg59
g63
sS'trial_loop.thisN'
p3840
I12
sg33
S'36-fig_rolls.png'
p3841
sg64
g65
sS'trial_loop.thisIndex'
p3842
g60
(g99
S'\x0c\x00\x00\x00'
tRp3843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3844
I0
sg3642
S'36-fig_rolls.png'
p3845
sS'block_loop.thisRepN'
p3846
I1
sg3645
g3841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3847
I1
sg3647
S'34-hula_hoops_bbq_beef_redo.png'
p3848
sg55
g11
sS'block_loop.thisTrial'
p3849
Nsg70
Vn
sS'block_loop.thisTrialN'
p3850
I0
sg39
F1.0665728121966822
sg34
g753
(S'\x07\xdf\x07\t\x13\x07\x14\x03\tX'
tRp3851
sa(dp3852
S'trial_loop.thisTrialN'
p3853
I13
sg3633
S'23-crunchie_redo.png'
p3854
sS'block_loop.thisIndex'
p3855
g3627
sg38
S'right'
p3856
sg59
g63
sS'trial_loop.thisN'
p3857
I13
sg33
S'23-crunchie_redo.png'
p3858
sg64
g65
sS'trial_loop.thisIndex'
p3859
g60
(g99
S'\r\x00\x00\x00'
tRp3860
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3861
I0
sg3642
S'33-ambrosia_rice.png'
p3862
sS'block_loop.thisRepN'
p3863
I1
sg3645
g3858
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3864
I1
sg3647
S'33-ambrosia_rice.png'
p3865
sg55
g11
sS'block_loop.thisTrial'
p3866
Nsg70
Vn
sS'block_loop.thisTrialN'
p3867
I0
sg39
F3.5665294772006746
sg34
g753
(S'\x07\xdf\x07\t\x13\x07\x1a\x04\x8f\xf8'
tRp3868
sa(dp3869
S'trial_loop.thisTrialN'
p3870
I14
sg3633
S'5-pineapple.png'
p3871
sS'block_loop.thisIndex'
p3872
g3627
sg38
S'left'
p3873
sg59
g63
sS'trial_loop.thisN'
p3874
I14
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3875
g60
(g99
S'\x0e\x00\x00\x00'
tRp3876
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3877
I0
sg3642
S'40-sardines.png'
p3878
sS'block_loop.thisRepN'
p3879
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3880
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3881
Nsg70
Vn
sS'block_loop.thisTrialN'
p3882
I0
sg39
F1.9833305678766919
sg34
g753
(S'\x07\xdf\x07\t\x13\x07"\r\xa40'
tRp3883
sa(dp3884
S'trial_loop.thisTrialN'
p3885
I15
sg3633
g3688
sS'block_loop.thisIndex'
p3886
g3627
sg38
S'right'
p3887
sg59
g63
sS'trial_loop.thisN'
p3888
I15
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p3889
g60
(g99
S'\x0f\x00\x00\x00'
tRp3890
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3891
I0
sg3642
g3696
sS'block_loop.thisRepN'
p3892
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3893
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p3894
Nsg70
Vn
sS'block_loop.thisTrialN'
p3895
I0
sg39
F1.4332048108699382
sg34
g753
(S'\x07\xdf\x07\t\x13\x07)\r\xf2P'
tRp3896
sa(dp3897
S'trial_loop.thisTrialN'
p3898
I16
sg3633
S'21-nakd_banana_crunch.png'
p3899
sS'block_loop.thisIndex'
p3900
g3627
sg38
S'right'
p3901
sg59
g63
sS'trial_loop.thisN'
p3902
I16
sg33
S'1-treacle_cookies.png'
p3903
sg64
g65
sS'trial_loop.thisIndex'
p3904
g60
(g99
S'\x10\x00\x00\x00'
tRp3905
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3906
I0
sg3642
S'1-treacle_cookies.png'
p3907
sS'block_loop.thisRepN'
p3908
I1
sg3645
g3903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3909
I1
sg3647
S'21-nakd_banana_crunch.png'
p3910
sg55
g11
sS'block_loop.thisTrial'
p3911
Nsg70
Vn
sS'block_loop.thisTrialN'
p3912
I0
sg39
F0.9500079542522144
sg34
g753
(S'\x07\xdf\x07\t\x13\x070\x05\xeb\xa0'
tRp3913
sa(dp3914
S'trial_loop.thisTrialN'
p3915
I17
sg3633
g3820
sS'block_loop.thisIndex'
p3916
g3627
sg38
S'left'
p3917
sg59
g63
sS'trial_loop.thisN'
p3918
I17
sg33
g3831
sg64
g65
sS'trial_loop.thisIndex'
p3919
g60
(g99
S'\x11\x00\x00\x00'
tRp3920
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3921
I0
sg3642
g3828
sS'block_loop.thisRepN'
p3922
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3923
I1
sg3647
g3831
sg55
g11
sS'block_loop.thisTrial'
p3924
Nsg70
Vn
sS'block_loop.thisTrialN'
p3925
I0
sg39
F1.0498201312693709
sg34
g753
(S'\x07\xdf\x07\t\x13\x076\x05\x89\xf8'
tRp3926
sa(dp3927
S'trial_loop.thisTrialN'
p3928
I18
sg3633
S'51-mars.png'
p3929
sS'block_loop.thisIndex'
p3930
g3627
sg38
S'left'
p3931
sg59
g63
sS'trial_loop.thisN'
p3932
I18
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p3933
g60
(g99
S'\x12\x00\x00\x00'
tRp3934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3935
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p3936
sS'block_loop.thisRepN'
p3937
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3938
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p3939
Nsg70
Vn
sS'block_loop.thisTrialN'
p3940
I0
sg39
F1.0332730064619682
sg34
g753
(S'\x07\xdf\x07\t\x13\x08\x00\x06\xd2\x18'
tRp3941
sa(dp3942
S'trial_loop.thisTrialN'
p3943
I19
sg3633
S'33-ambrosia_rice.png'
p3944
sS'block_loop.thisIndex'
p3945
g3627
sg38
S'right'
p3946
sg59
g63
sS'trial_loop.thisN'
p3947
I19
sg33
g3858
sg64
g65
sS'trial_loop.thisIndex'
p3948
g60
(g99
S'\x13\x00\x00\x00'
tRp3949
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3950
I0
sg3642
S'23-crunchie_redo.png'
p3951
sS'block_loop.thisRepN'
p3952
I1
sg3645
g3858
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3953
I1
sg3647
g3865
sg55
g11
sS'block_loop.thisTrial'
p3954
Nsg70
Vn
sS'block_loop.thisTrialN'
p3955
I0
sg39
F1.283378350410203
sg34
g753
(S'\x07\xdf\x07\t\x13\x08\x06\x07\xdb\xb8'
tRp3956
sa(dp3957
S'trial_loop.thisTrialN'
p3958
I20
sg3633
g3871
sS'block_loop.thisIndex'
p3959
g3627
sg38
S'left'
p3960
sg59
g63
sS'trial_loop.thisN'
p3961
I20
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p3962
g60
(g99
S'\x14\x00\x00\x00'
tRp3963
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3964
I0
sg3642
g3878
sS'block_loop.thisRepN'
p3965
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3966
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3967
Nsg70
Vn
sS'block_loop.thisTrialN'
p3968
I0
sg39
F0.84991238918883028
sg34
g753
(S'\x07\xdf\x07\t\x13\x08\x0c\x0c\xb5\xe8'
tRp3969
sa(dp3970
S'trial_loop.thisTrialN'
p3971
I21
sg3633
S'26-walkers_smoky_bacon.png'
p3972
sS'block_loop.thisIndex'
p3973
g3627
sg38
S'right'
p3974
sg59
g63
sS'trial_loop.thisN'
p3975
I21
sg33
S'44-crunch.png'
p3976
sg64
g65
sS'trial_loop.thisIndex'
p3977
g60
(g99
S'\x15\x00\x00\x00'
tRp3978
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3979
I0
sg3642
S'44-crunch.png'
p3980
sS'block_loop.thisRepN'
p3981
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3982
I1
sg3647
S'26-walkers_smoky_bacon.png'
p3983
sg55
g11
sS'block_loop.thisTrial'
p3984
Nsg70
Vn
sS'block_loop.thisTrialN'
p3985
I0
sg39
F1.1832354589714669
sg34
g753
(S'\x07\xdf\x07\t\x13\x08\x12\n\xe8\xf8'
tRp3986
sa(dp3987
S'trial_loop.thisTrialN'
p3988
I22
sg3633
g3654
sS'block_loop.thisIndex'
p3989
g3627
sg38
S'right'
p3990
sg59
g63
sS'trial_loop.thisN'
p3991
I22
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p3992
g60
(g99
S'\x16\x00\x00\x00'
tRp3993
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3994
I0
sg3642
g3662
sS'block_loop.thisRepN'
p3995
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3996
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p3997
Nsg70
Vn
sS'block_loop.thisTrialN'
p3998
I0
sg39
F1.066594479689229
sg34
g753
(S'\x07\xdf\x07\t\x13\x08\x18\x0eS\xf8'
tRp3999
sa(dp4000
S'trial_loop.thisTrialN'
p4001
I23
sg3633
S'41-peanuts_redo.png'
p4002
sS'block_loop.thisIndex'
p4003
g3627
sg38
S'left'
p4004
sg59
g63
sS'trial_loop.thisN'
p4005
I23
sg33
S'45-chewy_nougat_redo.png'
p4006
sg64
g65
sS'trial_loop.thisIndex'
p4007
g60
(g99
S'\x17\x00\x00\x00'
tRp4008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4009
I0
sg3642
S'45-chewy_nougat_redo.png'
p4010
sS'block_loop.thisRepN'
p4011
I1
sg3645
S'41-peanuts_redo.png'
p4012
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4013
I1
sg3647
g4006
sg55
g11
sS'block_loop.thisTrial'
p4014
Nsg70
Vn
sS'block_loop.thisTrialN'
p4015
I0
sg39
F2.1501623066542379
sg34
g753
(S'\x07\xdf\x07\t\x13\x08\x1f\x00\x98X'
tRp4016
sa(dp4017
S'trial_loop.thisTrialN'
p4018
I24
sg3633
S'18-mms.png'
p4019
sS'block_loop.thisIndex'
p4020
g3627
sg38
S'left'
p4021
sg59
g63
sS'trial_loop.thisN'
p4022
I24
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4023
g60
(g99
S'\x18\x00\x00\x00'
tRp4024
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4025
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p4026
sS'block_loop.thisRepN'
p4027
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4028
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4029
Nsg70
Vn
sS'block_loop.thisTrialN'
p4030
I0
sg39
F1.5167295879364247
sg34
g753
(S'\x07\xdf\x07\t\x13\x08&\x03G\xd8'
tRp4031
sa(dp4032
S'trial_loop.thisTrialN'
p4033
I25
sg3633
S'38-maltesers.png'
p4034
sS'block_loop.thisIndex'
p4035
g3627
sg38
S'left'
p4036
sg59
g63
sS'trial_loop.thisN'
p4037
I25
sg33
S'38-maltesers.png'
p4038
sg64
g65
sS'trial_loop.thisIndex'
p4039
g60
(g99
S'\x19\x00\x00\x00'
tRp4040
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4041
I0
sg3642
S'6-sour_patch_kids.png'
p4042
sS'block_loop.thisRepN'
p4043
I1
sg3645
g4038
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4044
I1
sg3647
S'6-sour_patch_kids.png'
p4045
sg55
g11
sS'block_loop.thisTrial'
p4046
Nsg70
Vn
sS'block_loop.thisTrialN'
p4047
I0
sg39
F1.0496818584360881
sg34
g753
(S'\x07\xdf\x07\t\x13\x08,\x0b\xb4\x18'
tRp4048
sa(dp4049
S'trial_loop.thisTrialN'
p4050
I26
sg3633
g4019
sS'block_loop.thisIndex'
p4051
g3627
sg38
S'left'
p4052
sg59
g63
sS'trial_loop.thisN'
p4053
I26
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4054
g60
(g99
S'\x1a\x00\x00\x00'
tRp4055
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4056
I0
sg3642
g4026
sS'block_loop.thisRepN'
p4057
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4058
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4059
Nsg70
Vn
sS'block_loop.thisTrialN'
p4060
I0
sg39
F1.1833543450993602
sg34
g753
(S'\x07\xdf\x07\t\x13\x082\x0c\xfc8'
tRp4061
sa(dp4062
S'trial_loop.thisTrialN'
p4063
I27
sg3633
S'22-daim.png'
p4064
sS'block_loop.thisIndex'
p4065
g3627
sg38
S'right'
p4066
sg59
g63
sS'trial_loop.thisN'
p4067
I27
sg33
S'22-daim.png'
p4068
sg64
g65
sS'trial_loop.thisIndex'
p4069
g60
(g99
S'\x1b\x00\x00\x00'
tRp4070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4071
I0
sg3642
S'7-olives.png'
p4072
sS'block_loop.thisRepN'
p4073
I1
sg3645
S'7-olives.png'
p4074
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4075
I1
sg3647
g4068
sg55
g11
sS'block_loop.thisTrial'
p4076
Nsg70
Vn
sS'block_loop.thisTrialN'
p4077
I0
sg39
F1.1830301879526814
sg34
g753
(S'\x07\xdf\x07\t\x13\x089\x00\xe6x'
tRp4078
sa(dp4079
S'trial_loop.thisTrialN'
p4080
I28
sg3633
g3786
sS'block_loop.thisIndex'
p4081
g3627
sg38
S'right'
p4082
sg59
g63
sS'trial_loop.thisN'
p4083
I28
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p4084
g60
(g99
S'\x1c\x00\x00\x00'
tRp4085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4086
I0
sg3642
g3794
sS'block_loop.thisRepN'
p4087
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4088
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p4089
Nsg70
Vn
sS'block_loop.thisTrialN'
p4090
I0
sg39
F2.183206949106534
sg34
g753
(S'\x07\xdf\x07\t\x13\t\x03\x04U`'
tRp4091
sa(dp4092
S'trial_loop.thisTrialN'
p4093
I29
sg3633
S'13-mccoys_steak_crisps.png'
p4094
sS'block_loop.thisIndex'
p4095
g3627
sg38
S'left'
p4096
sg59
g63
sS'trial_loop.thisN'
p4097
I29
sg33
S'13-mccoys_steak_crisps.png'
p4098
sg64
g65
sS'trial_loop.thisIndex'
p4099
g60
(g99
S'\x1d\x00\x00\x00'
tRp4100
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4101
I0
sg3642
S'3-ellas_strawberries_apples.png'
p4102
sS'block_loop.thisRepN'
p4103
I1
sg3645
g4098
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4104
I1
sg3647
S'3-ellas_strawberries_apples.png'
p4105
sg55
g11
sS'block_loop.thisTrial'
p4106
Nsg70
Vn
sS'block_loop.thisTrialN'
p4107
I0
sg39
F1.7003179990133503
sg34
g753
(S'\x07\xdf\x07\t\x13\t\n\x07}\xf8'
tRp4108
sa(dp4109
S'trial_loop.thisTrialN'
p4110
I30
sg3633
S'48-twix.png'
p4111
sS'block_loop.thisIndex'
p4112
g3627
sg38
S'left'
p4113
sg59
g63
sS'trial_loop.thisN'
p4114
I30
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p4115
g60
(g99
S'\x1e\x00\x00\x00'
tRp4116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4117
I0
sg3642
S'50-polo.png'
p4118
sS'block_loop.thisRepN'
p4119
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4120
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p4121
Nsg70
Vn
sS'block_loop.thisTrialN'
p4122
I0
sg39
F1.0999185188120464
sg34
g753
(S'\x07\xdf\x07\t\x13\t\x11\x03\x82p'
tRp4123
sa(dp4124
S'trial_loop.thisTrialN'
p4125
I31
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p4126
sS'block_loop.thisIndex'
p4127
g3627
sg38
S'right'
p4128
sg59
g63
sS'trial_loop.thisN'
p4129
I31
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4130
g60
(g99
S'\x1f\x00\x00\x00'
tRp4131
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4132
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p4133
sS'block_loop.thisRepN'
p4134
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4135
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4136
Nsg70
Vn
sS'block_loop.thisTrialN'
p4137
I0
sg39
F1.4999595159897581
sg34
g753
(S'\x07\xdf\x07\t\x13\t\x17\x05\x82('
tRp4138
sa(dp4139
S'trial_loop.thisTrialN'
p4140
I32
sg3633
g3803
sS'block_loop.thisIndex'
p4141
g3627
sg38
S'right'
p4142
sg59
g63
sS'trial_loop.thisN'
p4143
I32
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p4144
g60
(g99
S' \x00\x00\x00'
tRp4145
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4146
I0
sg3642
g3811
sS'block_loop.thisRepN'
p4147
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4148
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p4149
Nsg70
Vn
sS'block_loop.thisTrialN'
p4150
I0
sg39
F1.6166367028054083
sg34
g753
(S'\x07\xdf\x07\t\x13\t\x1d\r\xb3\xd0'
tRp4151
sa(dp4152
S'trial_loop.thisTrialN'
p4153
I33
sg3633
g3899
sS'block_loop.thisIndex'
p4154
g3627
sg38
S'right'
p4155
sg59
g63
sS'trial_loop.thisN'
p4156
I33
sg33
g3903
sg64
g65
sS'trial_loop.thisIndex'
p4157
g60
(g99
S'!\x00\x00\x00'
tRp4158
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4159
I0
sg3642
g3907
sS'block_loop.thisRepN'
p4160
I1
sg3645
g3903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4161
I1
sg3647
g3910
sg55
g11
sS'block_loop.thisTrial'
p4162
Nsg70
Vn
sS'block_loop.thisTrialN'
p4163
I0
sg39
F0.96668080755625851
sg34
g753
(S'\x07\xdf\x07\t\x13\t$\x08I\x18'
tRp4164
sa(dp4165
S'trial_loop.thisTrialN'
p4166
I34
sg3633
g3705
sS'block_loop.thisIndex'
p4167
g3627
sg38
S'right'
p4168
sg59
g63
sS'trial_loop.thisN'
p4169
I34
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4170
g60
(g99
S'"\x00\x00\x00'
tRp4171
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4172
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4173
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4174
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4175
Nsg70
Vn
sS'block_loop.thisTrialN'
p4176
I0
sg39
F3.4169473462752649
sg34
g753
(S'\x07\xdf\x07\t\x13\t*\x08`\x88'
tRp4177
sa(dp4178
S'trial_loop.thisTrialN'
p4179
I35
sg3633
S'7-olives.png'
p4180
sS'block_loop.thisIndex'
p4181
g3627
sg38
S'left'
p4182
sg59
g63
sS'trial_loop.thisN'
p4183
I35
sg33
g4068
sg64
g65
sS'trial_loop.thisIndex'
p4184
g60
(g99
S'#\x00\x00\x00'
tRp4185
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4186
I0
sg3642
S'22-daim.png'
p4187
sS'block_loop.thisRepN'
p4188
I1
sg3645
g4074
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4189
I1
sg3647
g4068
sg55
g11
sS'block_loop.thisTrial'
p4190
Nsg70
Vn
sS'block_loop.thisTrialN'
p4191
I0
sg39
F0.93330488049105043
sg34
g753
(S'\x07\xdf\x07\t\x13\t3\x00\x0f\xa0'
tRp4192
sa(dp4193
S'trial_loop.thisTrialN'
p4194
I36
sg3633
S'31-hobnobs.png'
p4195
sS'block_loop.thisIndex'
p4196
g3627
sg38
S'left'
p4197
sg59
g63
sS'trial_loop.thisN'
p4198
I36
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p4199
g60
(g99
S'$\x00\x00\x00'
tRp4200
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4201
I0
sg3642
S'25-kitkat.png'
p4202
sS'block_loop.thisRepN'
p4203
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4204
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p4205
Nsg70
Vn
sS'block_loop.thisTrialN'
p4206
I0
sg39
F0.8833307959503145
sg34
g753
(S'\x07\xdf\x07\t\x13\t8\x0e\xb5\xa0'
tRp4207
sa(dp4208
S'trial_loop.thisTrialN'
p4209
I37
sg3633
S'44-crunch.png'
p4210
sS'block_loop.thisIndex'
p4211
g3627
sg38
S'left'
p4212
sg59
g63
sS'trial_loop.thisN'
p4213
I37
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p4214
g60
(g99
S'%\x00\x00\x00'
tRp4215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4216
I0
sg3642
S'26-walkers_smoky_bacon.png'
p4217
sS'block_loop.thisRepN'
p4218
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4219
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p4220
Nsg70
Vn
sS'block_loop.thisTrialN'
p4221
I0
sg39
F1.1666735090329894
sg34
g753
(S'\x07\xdf\x07\t\x13\n\x02\r]\xe0'
tRp4222
sa(dp4223
S'trial_loop.thisTrialN'
p4224
I38
sg3633
g3899
sS'block_loop.thisIndex'
p4225
g3627
sg38
S'right'
p4226
sg59
g63
sS'trial_loop.thisN'
p4227
I38
sg33
g3903
sg64
g65
sS'trial_loop.thisIndex'
p4228
g60
(g99
S'&\x00\x00\x00'
tRp4229
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4230
I0
sg3642
g3907
sS'block_loop.thisRepN'
p4231
I1
sg3645
g3903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4232
I1
sg3647
g3910
sg55
g11
sS'block_loop.thisTrial'
p4233
Nsg70
Vn
sS'block_loop.thisTrialN'
p4234
I0
sg39
F0.96669791347812861
sg34
g753
(S'\x07\xdf\x07\t\x13\n\t\x01L\x08'
tRp4235
sa(dp4236
S'trial_loop.thisTrialN'
p4237
I39
sg3633
S'46-pistachios.png'
p4238
sS'block_loop.thisIndex'
p4239
g3627
sg38
S'left'
p4240
sg59
g63
sS'trial_loop.thisN'
p4241
I39
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4242
g60
(g99
S"'\x00\x00\x00"
tRp4243
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4244
I0
sg3642
S'29-beans.png'
p4245
sS'block_loop.thisRepN'
p4246
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4247
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4248
Nsg70
Vn
sS'block_loop.thisTrialN'
p4249
I0
sg39
F1.1003344777200255
sg34
g753
(S'\x07\xdf\x07\t\x13\n\x0f\x01$\xf8'
tRp4250
sa(dp4251
S'trial_loop.thisTrialN'
p4252
I40
sg3633
g4210
sS'block_loop.thisIndex'
p4253
g3627
sg38
S'left'
p4254
sg59
g63
sS'trial_loop.thisN'
p4255
I40
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p4256
g60
(g99
S'(\x00\x00\x00'
tRp4257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4258
I0
sg3642
g4217
sS'block_loop.thisRepN'
p4259
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4260
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p4261
Nsg70
Vn
sS'block_loop.thisTrialN'
p4262
I0
sg39
F1.466617515667167
sg34
g753
(S'\x07\xdf\x07\t\x13\n\x15\x03c0'
tRp4263
sa(dp4264
S'trial_loop.thisTrialN'
p4265
I41
sg3633
g3899
sS'block_loop.thisIndex'
p4266
g3627
sg38
S'right'
p4267
sg59
g63
sS'trial_loop.thisN'
p4268
I41
sg33
g3903
sg64
g65
sS'trial_loop.thisIndex'
p4269
g60
(g99
S')\x00\x00\x00'
tRp4270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4271
I0
sg3642
g3907
sS'block_loop.thisRepN'
p4272
I1
sg3645
g3903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4273
I1
sg3647
g3910
sg55
g11
sS'block_loop.thisTrial'
p4274
Nsg70
Vn
sS'block_loop.thisTrialN'
p4275
I0
sg39
F0.6833497835250455
sg34
g753
(S'\x07\xdf\x07\t\x13\n\x1b\n\xd9X'
tRp4276
sa(dp4277
S'trial_loop.thisTrialN'
p4278
I42
sg3633
g3944
sS'block_loop.thisIndex'
p4279
g3627
sg38
S'right'
p4280
sg59
g63
sS'trial_loop.thisN'
p4281
I42
sg33
g3865
sg64
g65
sS'trial_loop.thisIndex'
p4282
g60
(g99
S'*\x00\x00\x00'
tRp4283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4284
I0
sg3642
g3951
sS'block_loop.thisRepN'
p4285
I1
sg3645
g3858
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4286
I1
sg3647
g3865
sg55
g11
sS'block_loop.thisTrial'
p4287
Nsg70
Vn
sS'block_loop.thisTrialN'
p4288
I0
sg39
F1.3000070134294219
sg34
g753
(S'\x07\xdf\x07\t\x13\n!\x06\xa7 '
tRp4289
sa(dp4290
S'trial_loop.thisTrialN'
p4291
I43
sg3633
g4126
sS'block_loop.thisIndex'
p4292
g3627
sg38
S'right'
p4293
sg59
g63
sS'trial_loop.thisN'
p4294
I43
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4295
g60
(g99
S'+\x00\x00\x00'
tRp4296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4297
I0
sg3642
g4133
sS'block_loop.thisRepN'
p4298
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4299
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4300
Nsg70
Vn
sS'block_loop.thisTrialN'
p4301
I0
sg39
F1.5000065572676249
sg34
g753
(S"\x07\xdf\x07\t\x13\n'\x0b\xbf\xd0"
tRp4302
sa(dp4303
S'trial_loop.thisTrialN'
p4304
I44
sg3633
S'16-skips_prawn.png'
p4305
sS'block_loop.thisIndex'
p4306
g3627
sg38
S'right'
p4307
sg59
g63
sS'trial_loop.thisN'
p4308
I44
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p4309
g60
(g99
S',\x00\x00\x00'
tRp4310
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4311
I0
sg3642
S'42-mrkipling_lemon_slices.png'
p4312
sS'block_loop.thisRepN'
p4313
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4314
I1
sg3647
g3831
sg55
g11
sS'block_loop.thisTrial'
p4315
Nsg70
Vn
sS'block_loop.thisTrialN'
p4316
I0
sg39
F1.2167995511408662
sg34
g753
(S'\x07\xdf\x07\t\x13\n.\x04p\xb8'
tRp4317
sa(dp4318
S'trial_loop.thisTrialN'
p4319
I45
sg3633
S'3-ellas_strawberries_apples.png'
p4320
sS'block_loop.thisIndex'
p4321
g3627
sg38
S'right'
p4322
sg59
g63
sS'trial_loop.thisN'
p4323
I45
sg33
g4098
sg64
g65
sS'trial_loop.thisIndex'
p4324
g60
(g99
S'-\x00\x00\x00'
tRp4325
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4326
I0
sg3642
S'13-mccoys_steak_crisps.png'
p4327
sS'block_loop.thisRepN'
p4328
I1
sg3645
g4098
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4329
I1
sg3647
g4105
sg55
g11
sS'block_loop.thisTrial'
p4330
Nsg70
Vn
sS'block_loop.thisTrialN'
p4331
I0
sg39
F1.1832551307743415
sg34
g753
(S'\x07\xdf\x07\t\x13\n4\x08T\xd0'
tRp4332
sa(dp4333
S'trial_loop.thisTrialN'
p4334
I46
sg3633
g3654
sS'block_loop.thisIndex'
p4335
g3627
sg38
S'right'
p4336
sg59
g63
sS'trial_loop.thisN'
p4337
I46
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4338
g60
(g99
S'.\x00\x00\x00'
tRp4339
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4340
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4341
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4342
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4343
Nsg70
Vn
sS'block_loop.thisTrialN'
p4344
I0
sg39
F1.3499876552305068
sg34
g753
(S'\x07\xdf\x07\t\x13\n:\x0b\xc3\xb8'
tRp4345
sa(dp4346
S'trial_loop.thisTrialN'
p4347
I47
sg3633
S'36-fig_rolls.png'
p4348
sS'block_loop.thisIndex'
p4349
g3627
sg38
S'left'
p4350
sg59
g63
sS'trial_loop.thisN'
p4351
I47
sg33
g3841
sg64
g65
sS'trial_loop.thisIndex'
p4352
g60
(g99
S'/\x00\x00\x00'
tRp4353
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4354
I0
sg3642
S'34-hula_hoops_bbq_beef_redo.png'
p4355
sS'block_loop.thisRepN'
p4356
I1
sg3645
g3841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4357
I1
sg3647
g3848
sg55
g11
sS'block_loop.thisTrial'
p4358
Nsg70
Vn
sS'block_loop.thisTrialN'
p4359
I0
sg39
F1.5833220719359815
sg34
g753
(S'\x07\xdf\x07\t\x13\x0b\x05\x02M\xd8'
tRp4360
sa(dp4361
S'trial_loop.thisTrialN'
p4362
I48
sg3633
g3634
sS'block_loop.thisIndex'
p4363
g3627
sg38
S'right'
p4364
sg59
g63
sS'trial_loop.thisN'
p4365
I48
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p4366
g60
(g99
S'0\x00\x00\x00'
tRp4367
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4368
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4369
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4370
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4371
Nsg70
Vn
sS'block_loop.thisTrialN'
p4372
I0
sg39
F1.0832285595824942
sg34
g753
(S'\x07\xdf\x07\t\x13\x0b\x0b\x0b\xb00'
tRp4373
sa(dp4374
S'trial_loop.thisTrialN'
p4375
I49
sg3633
g4305
sS'block_loop.thisIndex'
p4376
g3627
sg38
S'right'
p4377
sg59
g63
sS'trial_loop.thisN'
p4378
I49
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p4379
g60
(g99
S'1\x00\x00\x00'
tRp4380
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4381
I0
sg3642
g4312
sS'block_loop.thisRepN'
p4382
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4383
I1
sg3647
g3831
sg55
g11
sS'block_loop.thisTrial'
p4384
Nsg70
Vn
sS'block_loop.thisTrialN'
p4385
I0
sg39
F1.1335436220833799
sg34
g753
(S'\x07\xdf\x07\t\x13\x0b\x11\rqh'
tRp4386
sa(dp4387
S'trial_loop.thisTrialN'
p4388
I50
sg3633
g3837
sS'block_loop.thisIndex'
p4389
g3627
sg38
S'right'
p4390
sg59
g63
sS'trial_loop.thisN'
p4391
I50
sg33
g3841
sg64
g65
sS'trial_loop.thisIndex'
p4392
g60
(g99
S'2\x00\x00\x00'
tRp4393
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4394
I0
sg3642
g3845
sS'block_loop.thisRepN'
p4395
I1
sg3645
g3841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4396
I1
sg3647
g3848
sg55
g11
sS'block_loop.thisTrial'
p4397
Nsg70
Vn
sS'block_loop.thisTrialN'
p4398
I0
sg39
F1.4666215070465114
sg34
g753
(S'\x07\xdf\x07\t\x13\x0b\x18\x00\xa7\xf8'
tRp4399
sa(dp4400
S'trial_loop.thisTrialN'
p4401
I51
sg3633
g4320
sS'block_loop.thisIndex'
p4402
g3627
sg38
S'right'
p4403
sg59
g63
sS'trial_loop.thisN'
p4404
I51
sg33
g4098
sg64
g65
sS'trial_loop.thisIndex'
p4405
g60
(g99
S'3\x00\x00\x00'
tRp4406
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4407
I0
sg3642
g4327
sS'block_loop.thisRepN'
p4408
I1
sg3645
g4098
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4409
I1
sg3647
g4105
sg55
g11
sS'block_loop.thisTrial'
p4410
Nsg70
Vn
sS'block_loop.thisTrialN'
p4411
I0
sg39
F1.3332689010421745
sg34
g753
(S'\x07\xdf\x07\t\x13\x0b\x1e\x08\\\xa0'
tRp4412
sa(dp4413
S'trial_loop.thisTrialN'
p4414
I52
sg3633
S'10-bounty_redo.png'
p4415
sS'block_loop.thisIndex'
p4416
g3627
sg38
S'left'
p4417
sg59
g63
sS'trial_loop.thisN'
p4418
I52
sg33
S'10-bounty_redo.png'
p4419
sg64
g65
sS'trial_loop.thisIndex'
p4420
g60
(g99
S'4\x00\x00\x00'
tRp4421
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4422
I0
sg3642
S'4-corn.png'
p4423
sS'block_loop.thisRepN'
p4424
I1
sg3645
g4419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4425
I1
sg3647
S'4-corn.png'
p4426
sg55
g11
sS'block_loop.thisTrial'
p4427
Nsg70
Vn
sS'block_loop.thisTrialN'
p4428
I0
sg39
F1.3832258796610404
sg34
g753
(S'\x07\xdf\x07\t\x13\x0b$\r\xeeh'
tRp4429
sa(dp4430
S'trial_loop.thisTrialN'
p4431
I53
sg3633
g3929
sS'block_loop.thisIndex'
p4432
g3627
sg38
S'left'
p4433
sg59
g63
sS'trial_loop.thisN'
p4434
I53
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p4435
g60
(g99
S'5\x00\x00\x00'
tRp4436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4437
I0
sg3642
g3936
sS'block_loop.thisRepN'
p4438
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4439
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p4440
Nsg70
Vn
sS'block_loop.thisTrialN'
p4441
I0
sg39
F2.133084043081908
sg34
g753
(S'\x07\xdf\x07\t\x13\x0b+\x04\xf5\x88'
tRp4442
sa(dp4443
S'trial_loop.thisTrialN'
p4444
I54
sg3633
g3634
sS'block_loop.thisIndex'
p4445
g3627
sg38
S'right'
p4446
sg59
g63
sS'trial_loop.thisN'
p4447
I54
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4448
g60
(g99
S'6\x00\x00\x00'
tRp4449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4450
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4451
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4452
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4453
Nsg70
Vn
sS'block_loop.thisTrialN'
p4454
I0
sg39
F3.0499581190160825
sg34
g753
(S'\x07\xdf\x07\t\x13\x0b2\x07\xa5\x08'
tRp4455
sa(dp4456
S'trial_loop.thisTrialN'
p4457
I55
sg3633
g4111
sS'block_loop.thisIndex'
p4458
g3627
sg38
S'left'
p4459
sg59
g63
sS'trial_loop.thisN'
p4460
I55
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p4461
g60
(g99
S'7\x00\x00\x00'
tRp4462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4463
I0
sg3642
g4118
sS'block_loop.thisRepN'
p4464
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4465
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p4466
Nsg70
Vn
sS'block_loop.thisTrialN'
p4467
I0
sg39
F1.0000333565403707
sg34
g753
(S'\x07\xdf\x07\t\x13\x0b:\x08\xdd\x88'
tRp4468
sa(dp4469
S'trial_loop.thisTrialN'
p4470
I56
sg3633
g4180
sS'block_loop.thisIndex'
p4471
g3627
sg38
S'left'
p4472
sg59
g63
sS'trial_loop.thisN'
p4473
I56
sg33
g4074
sg64
g65
sS'trial_loop.thisIndex'
p4474
g60
(g99
S'8\x00\x00\x00'
tRp4475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4476
I0
sg3642
g4187
sS'block_loop.thisRepN'
p4477
I1
sg3645
g4074
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4478
I1
sg3647
g4068
sg55
g11
sS'block_loop.thisTrial'
p4479
Nsg70
Vn
sS'block_loop.thisTrialN'
p4480
I0
sg39
F1.1832480033117463
sg34
g753
(S'\x07\xdf\x07\t\x13\x0c\x04\tq\xf8'
tRp4481
sa(dp4482
S'trial_loop.thisTrialN'
p4483
I57
sg3633
g4126
sS'block_loop.thisIndex'
p4484
g3627
sg38
S'right'
p4485
sg59
g63
sS'trial_loop.thisN'
p4486
I57
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4487
g60
(g99
S'9\x00\x00\x00'
tRp4488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4489
I0
sg3642
g4133
sS'block_loop.thisRepN'
p4490
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4491
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4492
Nsg70
Vn
sS'block_loop.thisTrialN'
p4493
I0
sg39
F0.99994183988019358
sg34
g753
(S'\x07\xdf\x07\t\x13\x0c\n\x0c\x9ex'
tRp4494
sa(dp4495
S'trial_loop.thisTrialN'
p4496
I58
sg3633
g3735
sS'block_loop.thisIndex'
p4497
g3627
sg38
S'left'
p4498
sg59
g63
sS'trial_loop.thisN'
p4499
I58
sg33
g3746
sg64
g65
sS'trial_loop.thisIndex'
p4500
g60
(g99
S':\x00\x00\x00'
tRp4501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4502
I0
sg3642
g3743
sS'block_loop.thisRepN'
p4503
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4504
I1
sg3647
g3746
sg55
g11
sS'block_loop.thisTrial'
p4505
Nsg70
Vn
sS'block_loop.thisTrialN'
p4506
I0
sg39
F0.86658068092219764
sg34
g753
(S'\x07\xdf\x07\t\x13\x0c\x10\r2\xe8'
tRp4507
sa(dp4508
S'trial_loop.thisTrialN'
p4509
I59
sg3633
S'30-spaghetti_hoops.png'
p4510
sS'block_loop.thisIndex'
p4511
g3627
sg38
S'right'
p4512
sg59
g63
sS'trial_loop.thisN'
p4513
I59
sg33
g3780
sg64
g65
sS'trial_loop.thisIndex'
p4514
g60
(g99
S';\x00\x00\x00'
tRp4515
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4516
I0
sg3642
S'19-caramello_redo.png'
p4517
sS'block_loop.thisRepN'
p4518
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4519
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p4520
Nsg70
Vn
sS'block_loop.thisTrialN'
p4521
I0
sg39
F1.9668595644034212
sg34
g753
(S'\x07\xdf\x07\t\x13\x0c\x16\x0b\x9c\xa8'
tRp4522
sa(dp4523
S'trial_loop.thisTrialN'
p4524
I60
sg3633
g3944
sS'block_loop.thisIndex'
p4525
g3627
sg38
S'right'
p4526
sg59
g63
sS'trial_loop.thisN'
p4527
I60
sg33
g3865
sg64
g65
sS'trial_loop.thisIndex'
p4528
g60
(g99
S'<\x00\x00\x00'
tRp4529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4530
I0
sg3642
g3951
sS'block_loop.thisRepN'
p4531
I1
sg3645
g3858
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4532
I1
sg3647
g3865
sg55
g11
sS'block_loop.thisTrial'
p4533
Nsg70
Vn
sS'block_loop.thisTrialN'
p4534
I0
sg39
F1.2999924733958323
sg34
g753
(S'\x07\xdf\x07\t\x13\x0c\x1d\x0b\xb00'
tRp4535
sa(dp4536
S'trial_loop.thisTrialN'
p4537
I61
sg3633
S'45-chewy_nougat_redo.png'
p4538
sS'block_loop.thisIndex'
p4539
g3627
sg38
S'right'
p4540
sg59
g63
sS'trial_loop.thisN'
p4541
I61
sg33
g4012
sg64
g65
sS'trial_loop.thisIndex'
p4542
g60
(g99
S'=\x00\x00\x00'
tRp4543
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4544
I0
sg3642
S'41-peanuts_redo.png'
p4545
sS'block_loop.thisRepN'
p4546
I1
sg3645
g4012
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4547
I1
sg3647
g4006
sg55
g11
sS'block_loop.thisTrial'
p4548
Nsg70
Vn
sS'block_loop.thisTrialN'
p4549
I0
sg39
F1.3999922453222098
sg34
g753
(S'\x07\xdf\x07\t\x13\x0c$\x01\x82\xb8'
tRp4550
sa(dp4551
S'trial_loop.thisTrialN'
p4552
I62
sg3633
S'49-yorkie.png'
p4553
sS'block_loop.thisIndex'
p4554
g3627
sg38
S'right'
p4555
sg59
g63
sS'trial_loop.thisN'
p4556
I62
sg33
g3763
sg64
g65
sS'trial_loop.thisIndex'
p4557
g60
(g99
S'>\x00\x00\x00'
tRp4558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4559
I0
sg3642
S'35-raisins.png'
p4560
sS'block_loop.thisRepN'
p4561
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4562
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p4563
Nsg70
Vn
sS'block_loop.thisTrialN'
p4564
I0
sg39
F1.1498777782107936
sg34
g753
(S'\x07\xdf\x07\t\x13\x0c*\x08\n\x98'
tRp4565
sa(dp4566
S'trial_loop.thisTrialN'
p4567
I63
sg3633
g4034
sS'block_loop.thisIndex'
p4568
g3627
sg38
S'left'
p4569
sg59
g63
sS'trial_loop.thisN'
p4570
I63
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p4571
g60
(g99
S'?\x00\x00\x00'
tRp4572
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4573
I0
sg3642
g4042
sS'block_loop.thisRepN'
p4574
I1
sg3645
g4038
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4575
I1
sg3647
g4045
sg55
g11
sS'block_loop.thisTrial'
p4576
Nsg70
Vn
sS'block_loop.thisTrialN'
p4577
I0
sg39
F1.4497040391070186
sg34
g753
(S'\x07\xdf\x07\t\x13\x0c0\n\xfc\x80'
tRp4578
sa(dp4579
S'trial_loop.thisTrialN'
p4580
I64
sg3633
g3769
sS'block_loop.thisIndex'
p4581
g3627
sg38
S'right'
p4582
sg59
g63
sS'trial_loop.thisN'
p4583
I64
sg33
g3780
sg64
g65
sS'trial_loop.thisIndex'
p4584
g60
(g99
S'@\x00\x00\x00'
tRp4585
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4586
I0
sg3642
g3777
sS'block_loop.thisRepN'
p4587
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4588
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p4589
Nsg70
Vn
sS'block_loop.thisTrialN'
p4590
I0
sg39
F3.7169178670737892
sg34
g753
(S'\x07\xdf\x07\t\x13\x0c7\x02\xf5\xd0'
tRp4591
sa(dp4592
S'trial_loop.thisTrialN'
p4593
I65
sg3633
g3671
sS'block_loop.thisIndex'
p4594
g3627
sg38
S'left'
p4595
sg59
g63
sS'trial_loop.thisN'
p4596
I65
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4597
g60
(g99
S'A\x00\x00\x00'
tRp4598
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4599
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4600
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4601
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4602
Nsg70
Vn
sS'block_loop.thisTrialN'
p4603
I0
sg39
F0.78337065274536144
sg34
g753
(S'\x07\xdf\x07\t\x13\r\x03\x0eoP'
tRp4604
sa(dp4605
S'trial_loop.thisTrialN'
p4606
I66
sg3633
g3929
sS'block_loop.thisIndex'
p4607
g3627
sg38
S'left'
p4608
sg59
g63
sS'trial_loop.thisN'
p4609
I66
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p4610
g60
(g99
S'B\x00\x00\x00'
tRp4611
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4612
I0
sg3642
g3936
sS'block_loop.thisRepN'
p4613
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4614
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p4615
Nsg70
Vn
sS'block_loop.thisTrialN'
p4616
I0
sg39
F0.98332942748675123
sg34
g753
(S'\x07\xdf\x07\t\x13\r\t\x0b\xa8`'
tRp4617
sa(dp4618
S'trial_loop.thisTrialN'
p4619
I67
sg3633
g4510
sS'block_loop.thisIndex'
p4620
g3627
sg38
S'left'
p4621
sg59
g63
sS'trial_loop.thisN'
p4622
I67
sg33
g3773
sg64
g65
sS'trial_loop.thisIndex'
p4623
g60
(g99
S'C\x00\x00\x00'
tRp4624
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4625
I0
sg3642
g4517
sS'block_loop.thisRepN'
p4626
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4627
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p4628
Nsg70
Vn
sS'block_loop.thisTrialN'
p4629
I0
sg39
F1.6665757201990345
sg34
g753
(S'\x07\xdf\x07\t\x13\r\x0f\x0b\xfeP'
tRp4630
sa(dp4631
S'trial_loop.thisTrialN'
p4632
I68
sg3633
g4195
sS'block_loop.thisIndex'
p4633
g3627
sg38
S'left'
p4634
sg59
g63
sS'trial_loop.thisN'
p4635
I68
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p4636
g60
(g99
S'D\x00\x00\x00'
tRp4637
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4638
I0
sg3642
g4202
sS'block_loop.thisRepN'
p4639
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4640
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p4641
Nsg70
Vn
sS'block_loop.thisTrialN'
p4642
I0
sg39
F1.2998981057462515
sg34
g753
(S'\x07\xdf\x07\t\x13\r\x16\x07K0'
tRp4643
sa(dp4644
S'trial_loop.thisTrialN'
p4645
I69
sg3633
g3654
sS'block_loop.thisIndex'
p4646
g3627
sg38
S'right'
p4647
sg59
g63
sS'trial_loop.thisN'
p4648
I69
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4649
g60
(g99
S'E\x00\x00\x00'
tRp4650
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4651
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4652
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4653
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4654
Nsg70
Vn
sS'block_loop.thisTrialN'
p4655
I0
sg39
F1.6836799277443788
sg34
g753
(S'\x07\xdf\x07\t\x13\r\x1c\x0cc\xe0'
tRp4656
sa(dp4657
S'trial_loop.thisTrialN'
p4658
I70
sg3633
S'20-fruit_pastilles.png'
p4659
sS'block_loop.thisIndex'
p4660
g3627
sg38
S'right'
p4661
sg59
g63
sS'trial_loop.thisN'
p4662
I70
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p4663
g60
(g99
S'F\x00\x00\x00'
tRp4664
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4665
I0
sg3642
S'2-steamed_puddings.png'
p4666
sS'block_loop.thisRepN'
p4667
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4668
I1
sg3647
g3746
sg55
g11
sS'block_loop.thisTrial'
p4669
Nsg70
Vn
sS'block_loop.thisTrialN'
p4670
I0
sg39
F1.0499028098711278
sg34
g753
(S'\x07\xdf\x07\t\x13\r#\x08-\xc0'
tRp4671
sa(dp4672
S'trial_loop.thisTrialN'
p4673
I71
sg3633
g4094
sS'block_loop.thisIndex'
p4674
g3627
sg38
S'left'
p4675
sg59
g63
sS'trial_loop.thisN'
p4676
I71
sg33
g4098
sg64
g65
sS'trial_loop.thisIndex'
p4677
g60
(g99
S'G\x00\x00\x00'
tRp4678
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4679
I0
sg3642
g4102
sS'block_loop.thisRepN'
p4680
I1
sg3645
g4098
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4681
I1
sg3647
g4105
sg55
g11
sS'block_loop.thisTrial'
p4682
Nsg70
Vn
sS'block_loop.thisTrialN'
p4683
I0
sg39
F0.91667279628745746
sg34
g753
(S'\x07\xdf\x07\t\x13\r)\tu\xe0'
tRp4684
sa(dp4685
S'trial_loop.thisTrialN'
p4686
I72
sg3633
g3854
sS'block_loop.thisIndex'
p4687
g3627
sg38
S'left'
p4688
sg59
g63
sS'trial_loop.thisN'
p4689
I72
sg33
g3858
sg64
g65
sS'trial_loop.thisIndex'
p4690
g60
(g99
S'H\x00\x00\x00'
tRp4691
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4692
I0
sg3642
g3862
sS'block_loop.thisRepN'
p4693
I1
sg3645
g3858
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4694
I1
sg3647
g3865
sg55
g11
sS'block_loop.thisTrial'
p4695
Nsg70
Vn
sS'block_loop.thisTrialN'
p4696
I0
sg39
F3.7165939950209577
sg34
g753
(S'\x07\xdf\x07\t\x13\r/\x08\x978'
tRp4697
sa(dp4698
S'trial_loop.thisTrialN'
p4699
I73
sg3633
g4659
sS'block_loop.thisIndex'
p4700
g3627
sg38
S'right'
p4701
sg59
g63
sS'trial_loop.thisN'
p4702
I73
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p4703
g60
(g99
S'I\x00\x00\x00'
tRp4704
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4705
I0
sg3642
g4666
sS'block_loop.thisRepN'
p4706
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4707
I1
sg3647
g3746
sg55
g11
sS'block_loop.thisTrial'
p4708
Nsg70
Vn
sS'block_loop.thisTrialN'
p4709
I0
sg39
F1.0499880543720792
sg34
g753
(S'\x07\xdf\x07\t\x13\r8\x04\xcex'
tRp4710
sa(dp4711
S'trial_loop.thisTrialN'
p4712
I74
sg3633
S'4-corn.png'
p4713
sS'block_loop.thisIndex'
p4714
g3627
sg38
S'right'
p4715
sg59
g63
sS'trial_loop.thisN'
p4716
I74
sg33
g4419
sg64
g65
sS'trial_loop.thisIndex'
p4717
g60
(g99
S'J\x00\x00\x00'
tRp4718
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4719
I0
sg3642
S'10-bounty_redo.png'
p4720
sS'block_loop.thisRepN'
p4721
I1
sg3645
g4419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4722
I1
sg3647
g4426
sg55
g11
sS'block_loop.thisTrial'
p4723
Nsg70
Vn
sS'block_loop.thisTrialN'
p4724
I0
sg39
F1.3499925019059447
sg34
g753
(S'\x07\xdf\x07\t\x13\x0e\x02\x06\x16\x98'
tRp4725
sa(dp4726
S'trial_loop.thisTrialN'
p4727
I75
sg3633
g4348
sS'block_loop.thisIndex'
p4728
g3627
sg38
S'left'
p4729
sg59
g63
sS'trial_loop.thisN'
p4730
I75
sg33
g3841
sg64
g65
sS'trial_loop.thisIndex'
p4731
g60
(g99
S'K\x00\x00\x00'
tRp4732
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4733
I0
sg3642
g4355
sS'block_loop.thisRepN'
p4734
I1
sg3645
g3841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4735
I1
sg3647
g3848
sg55
g11
sS'block_loop.thisTrial'
p4736
Nsg70
Vn
sS'block_loop.thisTrialN'
p4737
I0
sg39
F1.1166315710215713
sg34
g753
(S'\x07\xdf\x07\t\x13\x0e\x08\x0b\xe2\xf8'
tRp4738
sa(dp4739
S'trial_loop.thisTrialN'
p4740
I76
sg3633
g3871
sS'block_loop.thisIndex'
p4741
g3627
sg38
S'left'
p4742
sg59
g63
sS'trial_loop.thisN'
p4743
I76
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4744
g60
(g99
S'L\x00\x00\x00'
tRp4745
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4746
I0
sg3642
g3878
sS'block_loop.thisRepN'
p4747
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4748
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4749
Nsg70
Vn
sS'block_loop.thisTrialN'
p4750
I0
sg39
F1.1999921312817605
sg34
g753
(S'\x07\xdf\x07\t\x13\x0e\x0e\x0e!0'
tRp4751
sa(dp4752
S'trial_loop.thisTrialN'
p4753
I77
sg3633
g3769
sS'block_loop.thisIndex'
p4754
g3627
sg38
S'left'
p4755
sg59
g63
sS'trial_loop.thisN'
p4756
I77
sg33
g3780
sg64
g65
sS'trial_loop.thisIndex'
p4757
g60
(g99
S'M\x00\x00\x00'
tRp4758
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4759
I0
sg3642
g3777
sS'block_loop.thisRepN'
p4760
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4761
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p4762
Nsg70
Vn
sS'block_loop.thisTrialN'
p4763
I0
sg39
F3.0832639118161751
sg34
g753
(S'\x07\xdf\x07\t\x13\x0e\x15\x02\x88p'
tRp4764
sa(dp4765
S'trial_loop.thisTrialN'
p4766
I78
sg3633
g3929
sS'block_loop.thisIndex'
p4767
g3627
sg38
S'left'
p4768
sg59
g63
sS'trial_loop.thisN'
p4769
I78
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p4770
g60
(g99
S'N\x00\x00\x00'
tRp4771
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4772
I0
sg3642
g3936
sS'block_loop.thisRepN'
p4773
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4774
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p4775
Nsg70
Vn
sS'block_loop.thisTrialN'
p4776
I0
sg39
F1.0998962811136153
sg34
g753
(S'\x07\xdf\x07\t\x13\x0e\x1d\x04=\xf0'
tRp4777
sa(dp4778
S'trial_loop.thisTrialN'
p4779
I79
sg3633
g4002
sS'block_loop.thisIndex'
p4780
g3627
sg38
S'left'
p4781
sg59
g63
sS'trial_loop.thisN'
p4782
I79
sg33
g4012
sg64
g65
sS'trial_loop.thisIndex'
p4783
g60
(g99
S'O\x00\x00\x00'
tRp4784
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4785
I0
sg3642
g4010
sS'block_loop.thisRepN'
p4786
I1
sg3645
g4012
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4787
I1
sg3647
g4006
sg55
g11
sS'block_loop.thisTrial'
p4788
Nsg70
Vn
sS'block_loop.thisTrialN'
p4789
I0
sg39
F1.7665994404087542
sg34
g753
(S'\x07\xdf\x07\t\x13\x0e#\x069\xc0'
tRp4790
sa(dp4791
S'trial_loop.thisTrialN'
p4792
I80
sg3633
g4320
sS'block_loop.thisIndex'
p4793
g3627
sg38
S'right'
p4794
sg59
g63
sS'trial_loop.thisN'
p4795
I80
sg33
g4105
sg64
g65
sS'trial_loop.thisIndex'
p4796
g60
(g99
S'P\x00\x00\x00'
tRp4797
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4798
I0
sg3642
g4327
sS'block_loop.thisRepN'
p4799
I1
sg3645
g4098
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4800
I1
sg3647
g4105
sg55
g11
sS'block_loop.thisTrial'
p4801
Nsg70
Vn
sS'block_loop.thisTrialN'
p4802
I0
sg39
F1.1833238395483932
sg34
g753
(S'\x07\xdf\x07\t\x13\x0e*\x034P'
tRp4803
sa(dp4804
S'trial_loop.thisTrialN'
p4805
I81
sg3633
g4180
sS'block_loop.thisIndex'
p4806
g3627
sg38
S'left'
p4807
sg59
g63
sS'trial_loop.thisN'
p4808
I81
sg33
g4074
sg64
g65
sS'trial_loop.thisIndex'
p4809
g60
(g99
S'Q\x00\x00\x00'
tRp4810
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4811
I0
sg3642
g4187
sS'block_loop.thisRepN'
p4812
I1
sg3645
g4074
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4813
I1
sg3647
g4068
sg55
g11
sS'block_loop.thisTrial'
p4814
Nsg70
Vn
sS'block_loop.thisTrialN'
p4815
I0
sg39
F2.9164988861230086
sg34
g753
(S'\x07\xdf\x07\t\x13\x0e0\x06\xa38'
tRp4816
sa(dp4817
S'trial_loop.thisTrialN'
p4818
I82
sg3633
g3769
sS'block_loop.thisIndex'
p4819
g3627
sg38
S'right'
p4820
sg59
g63
sS'trial_loop.thisN'
p4821
I82
sg33
g3773
sg64
g65
sS'trial_loop.thisIndex'
p4822
g60
(g99
S'R\x00\x00\x00'
tRp4823
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4824
I0
sg3642
g3777
sS'block_loop.thisRepN'
p4825
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4826
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p4827
Nsg70
Vn
sS'block_loop.thisTrialN'
p4828
I0
sg39
F1.9832781097284169
sg34
g753
(S'\x07\xdf\x07\t\x13\x0e8\x05\xb8\xd8'
tRp4829
sa(dp4830
S'trial_loop.thisTrialN'
p4831
I83
sg3633
g3671
sS'block_loop.thisIndex'
p4832
g3627
sg38
S'left'
p4833
sg59
g63
sS'trial_loop.thisN'
p4834
I83
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4835
g60
(g99
S'S\x00\x00\x00'
tRp4836
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4837
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4838
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4839
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4840
Nsg70
Vn
sS'block_loop.thisTrialN'
p4841
I0
sg39
F0.76667214056215016
sg34
g753
(S'\x07\xdf\x07\t\x13\x0f\x03\x06\x06\xf8'
tRp4842
sa(dp4843
S'trial_loop.thisTrialN'
p4844
I84
sg3633
g3688
sS'block_loop.thisIndex'
p4845
g3627
sg38
S'right'
p4846
sg59
g63
sS'trial_loop.thisN'
p4847
I84
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p4848
g60
(g99
S'T\x00\x00\x00'
tRp4849
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4850
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4851
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4852
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p4853
Nsg70
Vn
sS'block_loop.thisTrialN'
p4854
I0
sg39
F1.1170116075008991
sg34
g753
(S'\x07\xdf\x07\t\x13\x0f\t\x03\x05p'
tRp4855
sa(dp4856
S'trial_loop.thisTrialN'
p4857
I85
sg3633
g4195
sS'block_loop.thisIndex'
p4858
g3627
sg38
S'left'
p4859
sg59
g63
sS'trial_loop.thisN'
p4860
I85
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p4861
g60
(g99
S'U\x00\x00\x00'
tRp4862
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4863
I0
sg3642
g4202
sS'block_loop.thisRepN'
p4864
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4865
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p4866
Nsg70
Vn
sS'block_loop.thisTrialN'
p4867
I0
sg39
F1.3832025015653926
sg34
g753
(S'\x07\xdf\x07\t\x13\x0f\x0f\x05C\xa8'
tRp4868
sa(dp4869
S'trial_loop.thisTrialN'
p4870
I86
sg3633
g3705
sS'block_loop.thisIndex'
p4871
g3627
sg38
S'right'
p4872
sg59
g63
sS'trial_loop.thisN'
p4873
I86
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p4874
g60
(g99
S'V\x00\x00\x00'
tRp4875
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4876
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4877
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4878
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4879
Nsg70
Vn
sS'block_loop.thisTrialN'
p4880
I0
sg39
F1.9999717752361903
sg34
g753
(S'\x07\xdf\x07\t\x13\x0f\x15\x0b\x89 '
tRp4881
sa(dp4882
S'trial_loop.thisTrialN'
p4883
I87
sg3633
g4064
sS'block_loop.thisIndex'
p4884
g3627
sg38
S'right'
p4885
sg59
g63
sS'trial_loop.thisN'
p4886
I87
sg33
g4068
sg64
g65
sS'trial_loop.thisIndex'
p4887
g60
(g99
S'W\x00\x00\x00'
tRp4888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4889
I0
sg3642
g4072
sS'block_loop.thisRepN'
p4890
I1
sg3645
g4074
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4891
I1
sg3647
g4068
sg55
g11
sS'block_loop.thisTrial'
p4892
Nsg70
Vn
sS'block_loop.thisTrialN'
p4893
I0
sg39
F1.1333349298874964
sg34
g753
(S'\x07\xdf\x07\t\x13\x0f\x1c\x0c\x15\xc0'
tRp4894
sa(dp4895
S'trial_loop.thisTrialN'
p4896
I88
sg3633
g3854
sS'block_loop.thisIndex'
p4897
g3627
sg38
S'left'
p4898
sg59
g63
sS'trial_loop.thisN'
p4899
I88
sg33
g3858
sg64
g65
sS'trial_loop.thisIndex'
p4900
g60
(g99
S'X\x00\x00\x00'
tRp4901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4902
I0
sg3642
g3862
sS'block_loop.thisRepN'
p4903
I1
sg3645
g3858
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4904
I1
sg3647
g3865
sg55
g11
sS'block_loop.thisTrial'
p4905
Nsg70
Vn
sS'block_loop.thisTrialN'
p4906
I0
sg39
F1.6499789882363984
sg34
g753
(S'\x07\xdf\x07\t\x13\x0f"\x0e\x8e\x90'
tRp4907
sa(dp4908
S'trial_loop.thisTrialN'
p4909
I89
sg3633
g4238
sS'block_loop.thisIndex'
p4910
g3627
sg38
S'left'
p4911
sg59
g63
sS'trial_loop.thisN'
p4912
I89
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4913
g60
(g99
S'Y\x00\x00\x00'
tRp4914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4915
I0
sg3642
g4245
sS'block_loop.thisRepN'
p4916
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4917
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4918
Nsg70
Vn
sS'block_loop.thisTrialN'
p4919
I0
sg39
F1.4333450793928932
sg34
g753
(S'\x07\xdf\x07\t\x13\x0f)\t\xdbp'
tRp4920
sa(dp4921
S'trial_loop.thisTrialN'
p4922
I90
sg3633
g4019
sS'block_loop.thisIndex'
p4923
g3627
sg38
S'left'
p4924
sg59
g63
sS'trial_loop.thisN'
p4925
I90
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4926
g60
(g99
S'Z\x00\x00\x00'
tRp4927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4928
I0
sg3642
g4026
sS'block_loop.thisRepN'
p4929
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4930
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4931
Nsg70
Vn
sS'block_loop.thisTrialN'
p4932
I0
sg39
F2.58331437427114
sg34
g753
(S'\x07\xdf\x07\t\x13\x0f0\x01\x9a('
tRp4933
sa(dp4934
S'trial_loop.thisTrialN'
p4935
I91
sg3633
S'1-treacle_cookies.png'
p4936
sS'block_loop.thisIndex'
p4937
g3627
sg38
S'left'
p4938
sg59
g63
sS'trial_loop.thisN'
p4939
I91
sg33
g3903
sg64
g65
sS'trial_loop.thisIndex'
p4940
g60
(g99
S'[\x00\x00\x00'
tRp4941
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4942
I0
sg3642
S'21-nakd_banana_crunch.png'
p4943
sS'block_loop.thisRepN'
p4944
I1
sg3645
g3903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4945
I1
sg3647
g3910
sg55
g11
sS'block_loop.thisTrial'
p4946
Nsg70
Vn
sS'block_loop.thisTrialN'
p4947
I0
sg39
F0.80000758362439228
sg34
g753
(S'\x07\xdf\x07\t\x13\x0f7\x0b/H'
tRp4948
sa(dp4949
S'trial_loop.thisTrialN'
p4950
I92
sg3633
g3803
sS'block_loop.thisIndex'
p4951
g3627
sg38
S'right'
p4952
sg59
g63
sS'trial_loop.thisN'
p4953
I92
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p4954
g60
(g99
S'\\\x00\x00\x00'
tRp4955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4956
I0
sg3642
g3811
sS'block_loop.thisRepN'
p4957
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4958
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p4959
Nsg70
Vn
sS'block_loop.thisTrialN'
p4960
I0
sg39
F0.94995521100645419
sg34
g753
(S'\x07\xdf\x07\t\x13\x10\x01\x08\xa6\xd8'
tRp4961
sa(dp4962
S'trial_loop.thisTrialN'
p4963
I93
sg3633
g4538
sS'block_loop.thisIndex'
p4964
g3627
sg38
S'right'
p4965
sg59
g63
sS'trial_loop.thisN'
p4966
I93
sg33
g4012
sg64
g65
sS'trial_loop.thisIndex'
p4967
g60
(g99
S']\x00\x00\x00'
tRp4968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4969
I0
sg3642
g4545
sS'block_loop.thisRepN'
p4970
I1
sg3645
g4012
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4971
I1
sg3647
g4006
sg55
g11
sS'block_loop.thisTrial'
p4972
Nsg70
Vn
sS'block_loop.thisTrialN'
p4973
I0
sg39
F0.91658812199602835
sg34
g753
(S'\x07\xdf\x07\t\x13\x10\x07\x08E0'
tRp4974
sa(dp4975
S'trial_loop.thisTrialN'
p4976
I94
sg3633
g3820
sS'block_loop.thisIndex'
p4977
g3627
sg38
S'left'
p4978
sg59
g63
sS'trial_loop.thisN'
p4979
I94
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p4980
g60
(g99
S'^\x00\x00\x00'
tRp4981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4982
I0
sg3642
g3828
sS'block_loop.thisRepN'
p4983
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4984
I1
sg3647
g3831
sg55
g11
sS'block_loop.thisTrial'
p4985
Nsg70
Vn
sS'block_loop.thisTrialN'
p4986
I0
sg39
F0.85008629936055513
sg34
g753
(S'\x07\xdf\x07\t\x13\x10\r\x07\xa5\x08'
tRp4987
sa(dp4988
S'trial_loop.thisTrialN'
p4989
I95
sg3633
g3688
sS'block_loop.thisIndex'
p4990
g3627
sg38
S'right'
p4991
sg59
g63
sS'trial_loop.thisN'
p4992
I95
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p4993
g60
(g99
S'_\x00\x00\x00'
tRp4994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4995
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4996
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4997
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p4998
Nsg70
Vn
sS'block_loop.thisTrialN'
p4999
I0
sg39
F1.066665469254076
sg34
g753
(S'\x07\xdf\x07\t\x13\x10\x13\x05\xd8\x18'
tRp5000
sa(dp5001
S'trial_loop.thisTrialN'
p5002
I96
sg3633
g3854
sS'block_loop.thisIndex'
p5003
g3627
sg38
S'left'
p5004
sg59
g63
sS'trial_loop.thisN'
p5005
I96
sg33
g3858
sg64
g65
sS'trial_loop.thisIndex'
p5006
g60
(g99
S'`\x00\x00\x00'
tRp5007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5008
I0
sg3642
g3862
sS'block_loop.thisRepN'
p5009
I1
sg3645
g3858
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5010
I1
sg3647
g3865
sg55
g11
sS'block_loop.thisTrial'
p5011
Nsg70
Vn
sS'block_loop.thisTrialN'
p5012
I0
sg39
F1.3666439728112891
sg34
g753
(S'\x07\xdf\x07\t\x13\x10\x19\x07Z\xd0'
tRp5013
sa(dp5014
S'trial_loop.thisTrialN'
p5015
I97
sg3633
g4195
sS'block_loop.thisIndex'
p5016
g3627
sg38
S'left'
p5017
sg59
g63
sS'trial_loop.thisN'
p5018
I97
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p5019
g60
(g99
S'a\x00\x00\x00'
tRp5020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5021
I0
sg3642
g4202
sS'block_loop.thisRepN'
p5022
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5023
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5024
Nsg70
Vn
sS'block_loop.thisTrialN'
p5025
I0
sg39
F0.94993496900133323
sg34
g753
(S'\x07\xdf\x07\t\x13\x10\x1f\re\xb0'
tRp5026
sa(dp5027
S'trial_loop.thisTrialN'
p5028
I98
sg3633
g4002
sS'block_loop.thisIndex'
p5029
g3627
sg38
S'left'
p5030
sg59
g63
sS'trial_loop.thisN'
p5031
I98
sg33
g4012
sg64
g65
sS'trial_loop.thisIndex'
p5032
g60
(g99
S'b\x00\x00\x00'
tRp5033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5034
I0
sg3642
g4010
sS'block_loop.thisRepN'
p5035
I1
sg3645
g4012
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5036
I1
sg3647
g4006
sg55
g11
sS'block_loop.thisTrial'
p5037
Nsg70
Vn
sS'block_loop.thisTrialN'
p5038
I0
sg39
F1.7165469537503668
sg34
g753
(S'\x07\xdf\x07\t\x13\x10%\rB\x88'
tRp5039
sa(dp5040
S'trial_loop.thisTrialN'
p5041
I99
sg3633
g3944
sS'block_loop.thisIndex'
p5042
g3627
sg38
S'right'
p5043
sg59
g63
sS'trial_loop.thisN'
p5044
I99
sg33
g3858
sg64
g65
sS'trial_loop.thisIndex'
p5045
g60
(g99
S'c\x00\x00\x00'
tRp5046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5047
I0
sg3642
g3951
sS'block_loop.thisRepN'
p5048
I1
sg3645
g3858
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5049
I1
sg3647
g3865
sg55
g11
sS'block_loop.thisTrial'
p5050
Nsg70
Vn
sS'block_loop.thisTrialN'
p5051
I0
sg39
F1.9000070704423706
sg34
g753
(S'\x07\xdf\x07\t\x13\x10,\tG\x00'
tRp5052
sa(dp5053
S'trial_loop.thisTrialN'
p5054
I100
sg3633
g3972
sS'block_loop.thisIndex'
p5055
g3627
sg38
S'right'
p5056
sg59
g63
sS'trial_loop.thisN'
p5057
I100
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p5058
g60
(g99
S'd\x00\x00\x00'
tRp5059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5060
I0
sg3642
g3980
sS'block_loop.thisRepN'
p5061
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5062
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p5063
Nsg70
Vn
sS'block_loop.thisTrialN'
p5064
I0
sg39
F1.216640181002731
sg34
g753
(S'\x07\xdf\x07\t\x13\x103\x08dp'
tRp5065
sa(dp5066
S'trial_loop.thisTrialN'
p5067
I101
sg3633
g4415
sS'block_loop.thisIndex'
p5068
g3627
sg38
S'left'
p5069
sg59
g63
sS'trial_loop.thisN'
p5070
I101
sg33
g4419
sg64
g65
sS'trial_loop.thisIndex'
p5071
g60
(g99
S'e\x00\x00\x00'
tRp5072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5073
I0
sg3642
g4423
sS'block_loop.thisRepN'
p5074
I1
sg3645
g4419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5075
I1
sg3647
g4426
sg55
g11
sS'block_loop.thisTrial'
p5076
Nsg70
Vn
sS'block_loop.thisTrialN'
p5077
I0
sg39
F1.4165915431804024
sg34
g753
(S'\x07\xdf\x07\t\x13\x109\x0c\r\xf0'
tRp5078
sa(dp5079
S'trial_loop.thisTrialN'
p5080
I102
sg3633
g3820
sS'block_loop.thisIndex'
p5081
g3627
sg38
S'left'
p5082
sg59
g63
sS'trial_loop.thisN'
p5083
I102
sg33
g3831
sg64
g65
sS'trial_loop.thisIndex'
p5084
g60
(g99
S'f\x00\x00\x00'
tRp5085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5086
I0
sg3642
g3828
sS'block_loop.thisRepN'
p5087
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5088
I1
sg3647
g3831
sg55
g11
sS'block_loop.thisTrial'
p5089
Nsg70
Vn
sS'block_loop.thisTrialN'
p5090
I0
sg39
F0.88324298557563452
sg34
g753
(S'\x07\xdf\x07\t\x13\x11\x04\x03\xc8\xc0'
tRp5091
sa(dp5092
S'trial_loop.thisTrialN'
p5093
I103
sg3633
g4195
sS'block_loop.thisIndex'
p5094
g3627
sg38
S'left'
p5095
sg59
g63
sS'trial_loop.thisN'
p5096
I103
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p5097
g60
(g99
S'g\x00\x00\x00'
tRp5098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5099
I0
sg3642
g4202
sS'block_loop.thisRepN'
p5100
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5101
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5102
Nsg70
Vn
sS'block_loop.thisTrialN'
p5103
I0
sg39
F1.9832963560402277
sg34
g753
(S'\x07\xdf\x07\t\x13\x11\n\x02t\xe8'
tRp5104
sa(dp5105
S'trial_loop.thisTrialN'
p5106
I104
sg3633
g4002
sS'block_loop.thisIndex'
p5107
g3627
sg38
S'left'
p5108
sg59
g63
sS'trial_loop.thisN'
p5109
I104
sg33
g4012
sg64
g65
sS'trial_loop.thisIndex'
p5110
g60
(g99
S'h\x00\x00\x00'
tRp5111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5112
I0
sg3642
g4010
sS'block_loop.thisRepN'
p5113
I1
sg3645
g4012
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5114
I1
sg3647
g4006
sg55
g11
sS'block_loop.thisTrial'
p5115
Nsg70
Vn
sS'block_loop.thisTrialN'
p5116
I0
sg39
F1.5336826932034455
sg34
g753
(S'\x07\xdf\x07\t\x13\x11\x11\x02\xc3\x08'
tRp5117
sa(dp5118
S'trial_loop.thisTrialN'
p5119
I105
sg3633
g4936
sS'block_loop.thisIndex'
p5120
g3627
sg38
S'left'
p5121
sg59
g63
sS'trial_loop.thisN'
p5122
I105
sg33
g3910
sg64
g65
sS'trial_loop.thisIndex'
p5123
g60
(g99
S'i\x00\x00\x00'
tRp5124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5125
I0
sg3642
g4943
sS'block_loop.thisRepN'
p5126
I1
sg3645
g3903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5127
I1
sg3647
g3910
sg55
g11
sS'block_loop.thisTrial'
p5128
Nsg70
Vn
sS'block_loop.thisTrialN'
p5129
I0
sg39
F1.5332918229760253
sg34
g753
(S'\x07\xdf\x07\t\x13\x11\x17\x0bi\xe0'
tRp5130
sa(dp5131
S'trial_loop.thisTrialN'
p5132
I106
sg3633
g3803
sS'block_loop.thisIndex'
p5133
g3627
sg38
S'right'
p5134
sg59
g63
sS'trial_loop.thisN'
p5135
I106
sg33
g3814
sg64
g65
sS'trial_loop.thisIndex'
p5136
g60
(g99
S'j\x00\x00\x00'
tRp5137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5138
I0
sg3642
g3811
sS'block_loop.thisRepN'
p5139
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5140
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p5141
Nsg70
Vn
sS'block_loop.thisTrialN'
p5142
I0
sg39
F2.0999812405134435
sg34
g753
(S'\x07\xdf\x07\t\x13\x11\x1e\x04\xd2`'
tRp5143
sa(dp5144
S'trial_loop.thisTrialN'
p5145
I107
sg3633
g4553
sS'block_loop.thisIndex'
p5146
g3627
sg38
S'right'
p5147
sg59
g63
sS'trial_loop.thisN'
p5148
I107
sg33
g3756
sg64
g65
sS'trial_loop.thisIndex'
p5149
g60
(g99
S'k\x00\x00\x00'
tRp5150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5151
I0
sg3642
g4560
sS'block_loop.thisRepN'
p5152
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5153
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p5154
Nsg70
Vn
sS'block_loop.thisTrialN'
p5155
I0
sg39
F1.1166726252267836
sg34
g753
(S'\x07\xdf\x07\t\x13\x11%\x06\xcaH'
tRp5156
sa(dp5157
S'trial_loop.thisTrialN'
p5158
I108
sg3633
g4305
sS'block_loop.thisIndex'
p5159
g3627
sg38
S'right'
p5160
sg59
g63
sS'trial_loop.thisN'
p5161
I108
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p5162
g60
(g99
S'l\x00\x00\x00'
tRp5163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5164
I0
sg3642
g4312
sS'block_loop.thisRepN'
p5165
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5166
I1
sg3647
g3831
sg55
g11
sS'block_loop.thisTrial'
p5167
Nsg70
Vn
sS'block_loop.thisTrialN'
p5168
I0
sg39
F1.2665498332426068
sg34
g753
(S'\x07\xdf\x07\t\x13\x11+\t\x08\x80'
tRp5169
sa(dp5170
S'trial_loop.thisTrialN'
p5171
I109
sg3633
g3837
sS'block_loop.thisIndex'
p5172
g3627
sg38
S'right'
p5173
sg59
g63
sS'trial_loop.thisN'
p5174
I109
sg33
g3841
sg64
g65
sS'trial_loop.thisIndex'
p5175
g60
(g99
S'm\x00\x00\x00'
tRp5176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5177
I0
sg3642
g3845
sS'block_loop.thisRepN'
p5178
I1
sg3645
g3841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5179
I1
sg3647
g3848
sg55
g11
sS'block_loop.thisTrial'
p5180
Nsg70
Vn
sS'block_loop.thisTrialN'
p5181
I0
sg39
F1.0833471606165404
sg34
g753
(S'\x07\xdf\x07\t\x13\x111\r\xa40'
tRp5182
sa(dp5183
S'trial_loop.thisTrialN'
p5184
I110
sg3633
g3735
sS'block_loop.thisIndex'
p5185
g3627
sg38
S'left'
p5186
sg59
g63
sS'trial_loop.thisN'
p5187
I110
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p5188
g60
(g99
S'n\x00\x00\x00'
tRp5189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5190
I0
sg3642
g3743
sS'block_loop.thisRepN'
p5191
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5192
I1
sg3647
g3746
sg55
g11
sS'block_loop.thisTrial'
p5193
Nsg70
Vn
sS'block_loop.thisTrialN'
p5194
I0
sg39
F0.83329855130432406
sg34
g753
(S'\x07\xdf\x07\t\x13\x118\x00#('
tRp5195
sa(dp5196
S'trial_loop.thisTrialN'
p5197
I111
sg3633
g4210
sS'block_loop.thisIndex'
p5198
g3627
sg38
S'left'
p5199
sg59
g63
sS'trial_loop.thisN'
p5200
I111
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p5201
g60
(g99
S'o\x00\x00\x00'
tRp5202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5203
I0
sg3642
g4217
sS'block_loop.thisRepN'
p5204
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5205
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p5206
Nsg70
Vn
sS'block_loop.thisTrialN'
p5207
I0
sg39
F1.1999946971627651
sg34
g753
(S'\x07\xdf\x07\t\x13\x12\x01\rY\xf8'
tRp5208
sa(dp5209
S'trial_loop.thisTrialN'
p5210
I112
sg3633
g4553
sS'block_loop.thisIndex'
p5211
g3627
sg38
S'right'
p5212
sg59
g63
sS'trial_loop.thisN'
p5213
I112
sg33
g3756
sg64
g65
sS'trial_loop.thisIndex'
p5214
g60
(g99
S'p\x00\x00\x00'
tRp5215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5216
I0
sg3642
g4560
sS'block_loop.thisRepN'
p5217
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5218
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p5219
Nsg70
Vn
sS'block_loop.thisTrialN'
p5220
I0
sg39
F2.8832874609652208
sg34
g753
(S'\x07\xdf\x07\t\x13\x12\x08\x01\xc18'
tRp5221
sa(dp5222
S'trial_loop.thisTrialN'
p5223
I113
sg3633
g4238
sS'block_loop.thisIndex'
p5224
g3627
sg38
S'left'
p5225
sg59
g63
sS'trial_loop.thisN'
p5226
I113
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5227
g60
(g99
S'q\x00\x00\x00'
tRp5228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5229
I0
sg3642
g4245
sS'block_loop.thisRepN'
p5230
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5231
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5232
Nsg70
Vn
sS'block_loop.thisTrialN'
p5233
I0
sg39
F3.2998792892394704
sg34
g753
(S'\x07\xdf\x07\t\x13\x12\x10\x00]\xc0'
tRp5234
sa(dp5235
S'trial_loop.thisTrialN'
p5236
I114
sg3633
g4305
sS'block_loop.thisIndex'
p5237
g3627
sg38
S'right'
p5238
sg59
g63
sS'trial_loop.thisN'
p5239
I114
sg33
g3831
sg64
g65
sS'trial_loop.thisIndex'
p5240
g60
(g99
S'r\x00\x00\x00'
tRp5241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5242
I0
sg3642
g4312
sS'block_loop.thisRepN'
p5243
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5244
I1
sg3647
g3831
sg55
g11
sS'block_loop.thisTrial'
p5245
Nsg70
Vn
sS'block_loop.thisTrialN'
p5246
I0
sg39
F0.8832030717676389
sg34
g753
(S'\x07\xdf\x07\t\x13\x12\x18\x05f\xd0'
tRp5247
sa(dp5248
S'trial_loop.thisTrialN'
p5249
I115
sg3633
g4034
sS'block_loop.thisIndex'
p5250
g3627
sg38
S'left'
p5251
sg59
g63
sS'trial_loop.thisN'
p5252
I115
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p5253
g60
(g99
S's\x00\x00\x00'
tRp5254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5255
I0
sg3642
g4042
sS'block_loop.thisRepN'
p5256
I1
sg3645
g4038
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5257
I1
sg3647
g4045
sg55
g11
sS'block_loop.thisTrial'
p5258
Nsg70
Vn
sS'block_loop.thisTrialN'
p5259
I0
sg39
F0.86633549608814064
sg34
g753
(S'\x07\xdf\x07\t\x13\x12\x1e\x04Qx'
tRp5260
sa(dp5261
S'trial_loop.thisTrialN'
p5262
I116
sg3633
g4019
sS'block_loop.thisIndex'
p5263
g3627
sg38
S'left'
p5264
sg59
g63
sS'trial_loop.thisN'
p5265
I116
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5266
g60
(g99
S't\x00\x00\x00'
tRp5267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5268
I0
sg3642
g4026
sS'block_loop.thisRepN'
p5269
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5270
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5271
Nsg70
Vn
sS'block_loop.thisTrialN'
p5272
I0
sg39
F0.91666880490811309
sg34
g753
(S'\x07\xdf\x07\t\x13\x12$\x02\xbb8'
tRp5273
sa(dp5274
S'trial_loop.thisTrialN'
p5275
I117
sg3633
g4034
sS'block_loop.thisIndex'
p5276
g3627
sg38
S'left'
p5277
sg59
g63
sS'trial_loop.thisN'
p5278
I117
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p5279
g60
(g99
S'u\x00\x00\x00'
tRp5280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5281
I0
sg3642
g4042
sS'block_loop.thisRepN'
p5282
I1
sg3645
g4038
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5283
I1
sg3647
g4045
sg55
g11
sS'block_loop.thisTrial'
p5284
Nsg70
Vn
sS'block_loop.thisTrialN'
p5285
I0
sg39
F0.71632856819633162
sg34
g753
(S'\x07\xdf\x07\t\x13\x12*\x01\xe0x'
tRp5286
sa(dp5287
S'trial_loop.thisTrialN'
p5288
I118
sg3633
g3899
sS'block_loop.thisIndex'
p5289
g3627
sg38
S'right'
p5290
sg59
g63
sS'trial_loop.thisN'
p5291
I118
sg33
g3903
sg64
g65
sS'trial_loop.thisIndex'
p5292
g60
(g99
S'v\x00\x00\x00'
tRp5293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5294
I0
sg3642
g3907
sS'block_loop.thisRepN'
p5295
I1
sg3645
g3903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5296
I1
sg3647
g3910
sg55
g11
sS'block_loop.thisTrial'
p5297
Nsg70
Vn
sS'block_loop.thisTrialN'
p5298
I0
sg39
F0.81657266964612063
sg34
g753
(S'\x07\xdf\x07\t\x13\x12/\ri\x98'
tRp5299
sa(dp5300
S'trial_loop.thisTrialN'
p5301
I119
sg3633
g3837
sS'block_loop.thisIndex'
p5302
g3627
sg38
S'right'
p5303
sg59
g63
sS'trial_loop.thisN'
p5304
I119
sg33
g3841
sg64
g65
sS'trial_loop.thisIndex'
p5305
g60
(g99
S'w\x00\x00\x00'
tRp5306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5307
I0
sg3642
g3845
sS'block_loop.thisRepN'
p5308
I1
sg3645
g3841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5309
I1
sg3647
g3848
sg55
g11
sS'block_loop.thisTrial'
p5310
Nsg70
Vn
sS'block_loop.thisTrialN'
p5311
I0
sg39
F0.89998568804730894
sg34
g753
(S'\x07\xdf\x07\t\x13\x125\x0b\x1f\xa8'
tRp5312
sa(dp5313
S'trial_loop.thisTrialN'
p5314
I120
sg3633
g4111
sS'block_loop.thisIndex'
p5315
g3627
sg38
S'left'
p5316
sg59
g63
sS'trial_loop.thisN'
p5317
I120
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p5318
g60
(g99
S'x\x00\x00\x00'
tRp5319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5320
I0
sg3642
g4118
sS'block_loop.thisRepN'
p5321
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5322
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p5323
Nsg70
Vn
sS'block_loop.thisTrialN'
p5324
I0
sg39
F0.7170384637938696
sg34
g753
(S'\x07\xdf\x07\t\x13\x12;\n\x06h'
tRp5325
sa(dp5326
S'trial_loop.thisTrialN'
p5327
I121
sg3633
g4415
sS'block_loop.thisIndex'
p5328
g3627
sg38
S'left'
p5329
sg59
g63
sS'trial_loop.thisN'
p5330
I121
sg33
g4426
sg64
g65
sS'trial_loop.thisIndex'
p5331
g60
(g99
S'y\x00\x00\x00'
tRp5332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5333
I0
sg3642
g4423
sS'block_loop.thisRepN'
p5334
I1
sg3645
g4419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5335
I1
sg3647
g4426
sg55
g11
sS'block_loop.thisTrial'
p5336
Nsg70
Vn
sS'block_loop.thisTrialN'
p5337
I0
sg39
F1.0832949875693885
sg34
g753
(S'\x07\xdf\x07\t\x13\x13\x05\x06Q0'
tRp5338
sa(dp5339
S'trial_loop.thisTrialN'
p5340
I122
sg3633
g3735
sS'block_loop.thisIndex'
p5341
g3627
sg38
S'left'
p5342
sg59
g63
sS'trial_loop.thisN'
p5343
I122
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p5344
g60
(g99
S'z\x00\x00\x00'
tRp5345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5346
I0
sg3642
g3743
sS'block_loop.thisRepN'
p5347
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5348
I1
sg3647
g3746
sg55
g11
sS'block_loop.thisTrial'
p5349
Nsg70
Vn
sS'block_loop.thisTrialN'
p5350
I0
sg39
F0.81658492889255285
sg34
g753
(S'\x07\xdf\x07\t\x13\x13\x0b\x08\x12h'
tRp5351
sa(dp5352
S'trial_loop.thisTrialN'
p5353
I123
sg3633
g3786
sS'block_loop.thisIndex'
p5354
g3627
sg38
S'right'
p5355
sg59
g63
sS'trial_loop.thisN'
p5356
I123
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p5357
g60
(g99
S'{\x00\x00\x00'
tRp5358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5359
I0
sg3642
g3794
sS'block_loop.thisRepN'
p5360
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5361
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5362
Nsg70
Vn
sS'block_loop.thisTrialN'
p5363
I0
sg39
F0.91661092988215387
sg34
g753
(S'\x07\xdf\x07\t\x13\x13\x11\x05\xc8x'
tRp5364
sa(dp5365
S'trial_loop.thisTrialN'
p5366
I124
sg3633
g4415
sS'block_loop.thisIndex'
p5367
g3627
sg38
S'left'
p5368
sg59
g63
sS'trial_loop.thisN'
p5369
I124
sg33
g4419
sg64
g65
sS'trial_loop.thisIndex'
p5370
g60
(g99
S'|\x00\x00\x00'
tRp5371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5372
I0
sg3642
g4423
sS'block_loop.thisRepN'
p5373
I1
sg3645
g4419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5374
I1
sg3647
g4426
sg55
g11
sS'block_loop.thisTrial'
p5375
Nsg70
Vn
sS'block_loop.thisTrialN'
p5376
I0
sg39
F1.6998906361623085
sg34
g753
(S'\x07\xdf\x07\t\x13\x13\x17\x04\xed\xb8'
tRp5377
sa(dp5378
S'trial_loop.thisTrialN'
p5379
I125
sg3633
g4510
sS'block_loop.thisIndex'
p5380
g3627
sg38
S'left'
p5381
sg59
g63
sS'trial_loop.thisN'
p5382
I125
sg33
g3773
sg64
g65
sS'trial_loop.thisIndex'
p5383
g60
(g99
S'}\x00\x00\x00'
tRp5384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5385
I0
sg3642
g4517
sS'block_loop.thisRepN'
p5386
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5387
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p5388
Nsg70
Vn
sS'block_loop.thisTrialN'
p5389
I0
sg39
F3.1165882360364776
sg34
g753
(S'\x07\xdf\x07\t\x13\x13\x1e\x00\xf20'
tRp5390
sa(dp5391
S'trial_loop.thisTrialN'
p5392
I126
sg3633
g4553
sS'block_loop.thisIndex'
p5393
g3627
sg38
S'right'
p5394
sg59
g63
sS'trial_loop.thisN'
p5395
I126
sg33
g3763
sg64
g65
sS'trial_loop.thisIndex'
p5396
g60
(g99
S'~\x00\x00\x00'
tRp5397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5398
I0
sg3642
g4560
sS'block_loop.thisRepN'
p5399
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5400
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p5401
Nsg70
Vn
sS'block_loop.thisTrialN'
p5402
I0
sg39
F0.8166040304931812
sg34
g753
(S'\x07\xdf\x07\t\x13\x13&\x03 \xc8'
tRp5403
sa(dp5404
S'trial_loop.thisTrialN'
p5405
I127
sg3633
g3871
sS'block_loop.thisIndex'
p5406
g3627
sg38
S'left'
p5407
sg59
g63
sS'trial_loop.thisN'
p5408
I127
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5409
g60
(g99
S'\x7f\x00\x00\x00'
tRp5410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5411
I0
sg3642
g3878
sS'block_loop.thisRepN'
p5412
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5413
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5414
Nsg70
Vn
sS'block_loop.thisTrialN'
p5415
I0
sg39
F0.90002018497762037
sg34
g753
(S'\x07\xdf\x07\t\x13\x13,\x00\xd6\xd8'
tRp5416
sa(dp5417
S'trial_loop.thisTrialN'
p5418
I128
sg3633
g4320
sS'block_loop.thisIndex'
p5419
g3627
sg38
S'right'
p5420
sg59
g63
sS'trial_loop.thisN'
p5421
I128
sg33
g4098
sg64
g65
sS'trial_loop.thisIndex'
p5422
g60
(g99
S'\x80\x00\x00\x00'
tRp5423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5424
I0
sg3642
g4327
sS'block_loop.thisRepN'
p5425
I1
sg3645
g4098
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5426
I1
sg3647
g4105
sg55
g11
sS'block_loop.thisTrial'
p5427
Nsg70
Vn
sS'block_loop.thisTrialN'
p5428
I0
sg39
F0.98334054632869083
sg34
g753
(S'\x07\xdf\x07\t\x13\x131\x0f>X'
tRp5429
sa(dp5430
S'trial_loop.thisTrialN'
p5431
I129
sg3633
g3752
sS'block_loop.thisIndex'
p5432
g3627
sg38
S'left'
p5433
sg59
g63
sS'trial_loop.thisN'
p5434
I129
sg33
g3756
sg64
g65
sS'trial_loop.thisIndex'
p5435
g60
(g99
S'\x81\x00\x00\x00'
tRp5436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5437
I0
sg3642
g3760
sS'block_loop.thisRepN'
p5438
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5439
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p5440
Nsg70
Vn
sS'block_loop.thisTrialN'
p5441
I0
sg39
F0.91664172053424409
sg34
g753
(S'\x07\xdf\x07\t\x13\x138\x00\x13\x88'
tRp5442
sa(dp5443
S'trial_loop.thisTrialN'
p5444
I130
sg3633
g3820
sS'block_loop.thisIndex'
p5445
g3627
sg38
S'left'
p5446
sg59
g63
sS'trial_loop.thisN'
p5447
I130
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p5448
g60
(g99
S'\x82\x00\x00\x00'
tRp5449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5450
I0
sg3642
g3828
sS'block_loop.thisRepN'
p5451
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5452
I1
sg3647
g3831
sg55
g11
sS'block_loop.thisTrial'
p5453
Nsg70
Vn
sS'block_loop.thisTrialN'
p5454
I0
sg39
F1.1331062807803391
sg34
g753
(S'\x07\xdf\x07\t\x13\x14\x01\x0e\xb5\xa0'
tRp5455
sa(dp5456
S'trial_loop.thisTrialN'
p5457
I131
sg3633
S'6-sour_patch_kids.png'
p5458
sS'block_loop.thisIndex'
p5459
g3627
sg38
S'right'
p5460
sg59
g63
sS'trial_loop.thisN'
p5461
I131
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p5462
g60
(g99
S'\x83\x00\x00\x00'
tRp5463
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5464
I0
sg3642
S'38-maltesers.png'
p5465
sS'block_loop.thisRepN'
p5466
I1
sg3645
g4038
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5467
I1
sg3647
g4045
sg55
g11
sS'block_loop.thisTrial'
p5468
Nsg70
Vn
sS'block_loop.thisTrialN'
p5469
I0
sg39
F0.98295338237949181
sg34
g753
(S'\x07\xdf\x07\t\x13\x14\x08\x01\xec0'
tRp5470
sa(dp5471
S'trial_loop.thisTrialN'
p5472
I132
sg3633
g4510
sS'block_loop.thisIndex'
p5473
g3627
sg38
S'right'
p5474
sg59
g63
sS'trial_loop.thisN'
p5475
I132
sg33
g3773
sg64
g65
sS'trial_loop.thisIndex'
p5476
g60
(g99
S'\x84\x00\x00\x00'
tRp5477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5478
I0
sg3642
g4517
sS'block_loop.thisRepN'
p5479
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5480
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p5481
Nsg70
Vn
sS'block_loop.thisTrialN'
p5482
I0
sg39
F1.7832238269475056
sg34
g753
(S'\x07\xdf\x07\t\x13\x14\x0e\x02>8'
tRp5483
sa(dp5484
S'trial_loop.thisTrialN'
p5485
I133
sg3633
g4064
sS'block_loop.thisIndex'
p5486
g3627
sg38
S'right'
p5487
sg59
g63
sS'trial_loop.thisN'
p5488
I133
sg33
g4074
sg64
g65
sS'trial_loop.thisIndex'
p5489
g60
(g99
S'\x85\x00\x00\x00'
tRp5490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5491
I0
sg3642
g4072
sS'block_loop.thisRepN'
p5492
I1
sg3645
g4074
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5493
I1
sg3647
g4068
sg55
g11
sS'block_loop.thisTrial'
p5494
Nsg70
Vn
sS'block_loop.thisTrialN'
p5495
I0
sg39
F1.1665797115783789
sg34
g753
(S'\x07\xdf\x07\t\x13\x14\x14\x0e\xb9\x88'
tRp5496
sa(dp5497
S'trial_loop.thisTrialN'
p5498
I134
sg3633
g4936
sS'block_loop.thisIndex'
p5499
g3627
sg38
S'left'
p5500
sg59
g63
sS'trial_loop.thisN'
p5501
I134
sg33
g3910
sg64
g65
sS'trial_loop.thisIndex'
p5502
g60
(g99
S'\x86\x00\x00\x00'
tRp5503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5504
I0
sg3642
g4943
sS'block_loop.thisRepN'
p5505
I1
sg3645
g3903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5506
I1
sg3647
g3910
sg55
g11
sS'block_loop.thisTrial'
p5507
Nsg70
Vn
sS'block_loop.thisTrialN'
p5508
I0
sg39
F0.61666179147869116
sg34
g753
(S'\x07\xdf\x07\t\x13\x14\x1b\x02i0'
tRp5509
sa(dp5510
S'trial_loop.thisTrialN'
p5511
I135
sg3633
g3752
sS'block_loop.thisIndex'
p5512
g3627
sg38
S'left'
p5513
sg59
g63
sS'trial_loop.thisN'
p5514
I135
sg33
g3763
sg64
g65
sS'trial_loop.thisIndex'
p5515
g60
(g99
S'\x87\x00\x00\x00'
tRp5516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5517
I0
sg3642
g3760
sS'block_loop.thisRepN'
p5518
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5519
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p5520
Nsg70
Vn
sS'block_loop.thisTrialN'
p5521
I0
sg39
F0.80038505422271555
sg34
g753
(S'\x07\xdf\x07\t\x13\x14 \x0cH\x88'
tRp5522
sa(dp5523
S'trial_loop.thisTrialN'
p5524
I136
sg3633
g4238
sS'block_loop.thisIndex'
p5525
g3627
sg38
S'left'
p5526
sg59
g63
sS'trial_loop.thisN'
p5527
I136
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p5528
g60
(g99
S'\x88\x00\x00\x00'
tRp5529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5530
I0
sg3642
g4245
sS'block_loop.thisRepN'
p5531
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5532
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5533
Nsg70
Vn
sS'block_loop.thisTrialN'
p5534
I0
sg39
F1.5833186507516075
sg34
g753
(S'\x07\xdf\x07\t\x13\x14&\t\xc4\x00'
tRp5535
sa(dp5536
S'trial_loop.thisTrialN'
p5537
I137
sg3633
g4064
sS'block_loop.thisIndex'
p5538
g3627
sg38
S'right'
p5539
sg59
g63
sS'trial_loop.thisN'
p5540
I137
sg33
g4074
sg64
g65
sS'trial_loop.thisIndex'
p5541
g60
(g99
S'\x89\x00\x00\x00'
tRp5542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5543
I0
sg3642
g4072
sS'block_loop.thisRepN'
p5544
I1
sg3645
g4074
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5545
I1
sg3647
g4068
sg55
g11
sS'block_loop.thisTrial'
p5546
Nsg70
Vn
sS'block_loop.thisTrialN'
p5547
I0
sg39
F0.99997120504121995
sg34
g753
(S'\x07\xdf\x07\t\x13\x14-\x03\xe00'
tRp5548
sa(dp5549
S'trial_loop.thisTrialN'
p5550
I138
sg3633
g3854
sS'block_loop.thisIndex'
p5551
g3627
sg38
S'left'
p5552
sg59
g63
sS'trial_loop.thisN'
p5553
I138
sg33
g3865
sg64
g65
sS'trial_loop.thisIndex'
p5554
g60
(g99
S'\x8a\x00\x00\x00'
tRp5555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5556
I0
sg3642
g3862
sS'block_loop.thisRepN'
p5557
I1
sg3645
g3858
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5558
I1
sg3647
g3865
sg55
g11
sS'block_loop.thisTrial'
p5559
Nsg70
Vn
sS'block_loop.thisTrialN'
p5560
I0
sg39
F1.5499726590423961
sg34
g753
(S'\x07\xdf\x07\t\x13\x143\x04p\xb8'
tRp5561
sa(dp5562
S'trial_loop.thisTrialN'
p5563
I139
sg3633
g4510
sS'block_loop.thisIndex'
p5564
g3627
sg38
S'right'
p5565
sg59
g63
sS'trial_loop.thisN'
p5566
I139
sg33
g3773
sg64
g65
sS'trial_loop.thisIndex'
p5567
g60
(g99
S'\x8b\x00\x00\x00'
tRp5568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5569
I0
sg3642
g4517
sS'block_loop.thisRepN'
p5570
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5571
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p5572
Nsg70
Vn
sS'block_loop.thisTrialN'
p5573
I0
sg39
F1.0832351168501191
sg34
g753
(S'\x07\xdf\x07\t\x13\x149\rV\x10'
tRp5574
sa(dp5575
S'trial_loop.thisTrialN'
p5576
I140
sg3633
g3752
sS'block_loop.thisIndex'
p5577
g3627
sg38
S'left'
p5578
sg59
g63
sS'trial_loop.thisN'
p5579
I140
sg33
g3756
sg64
g65
sS'trial_loop.thisIndex'
p5580
g60
(g99
S'\x8c\x00\x00\x00'
tRp5581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5582
I0
sg3642
g3760
sS'block_loop.thisRepN'
p5583
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5584
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p5585
Nsg70
Vn
sS'block_loop.thisTrialN'
p5586
I0
sg39
F0.76702965424919967
sg34
g753
(S'\x07\xdf\x07\t\x13\x15\x03\x0f\x1b0'
tRp5587
sa(dp5588
S'trial_loop.thisTrialN'
p5589
I141
sg3633
g5458
sS'block_loop.thisIndex'
p5590
g3627
sg38
S'right'
p5591
sg59
g63
sS'trial_loop.thisN'
p5592
I141
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p5593
g60
(g99
S'\x8d\x00\x00\x00'
tRp5594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5595
I0
sg3642
g5465
sS'block_loop.thisRepN'
p5596
I1
sg3645
g4038
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5597
I1
sg3647
g4045
sg55
g11
sS'block_loop.thisTrial'
p5598
Nsg70
Vn
sS'block_loop.thisTrialN'
p5599
I0
sg39
F1.0996798912528902
sg34
g753
(S'\x07\xdf\x07\t\x13\x15\t\x0c\x19\xa8'
tRp5600
sa(dp5601
S'trial_loop.thisTrialN'
p5602
I142
sg3633
g3871
sS'block_loop.thisIndex'
p5603
g3627
sg38
S'left'
p5604
sg59
g63
sS'trial_loop.thisN'
p5605
I142
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5606
g60
(g99
S'\x8e\x00\x00\x00'
tRp5607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5608
I0
sg3642
g3878
sS'block_loop.thisRepN'
p5609
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5610
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vn
sS'block_loop.thisTrialN'
p5612
I0
sg39
F0.89983772185951238
sg34
g753
(S'\x07\xdf\x07\t\x13\x15\x0f\x0e\x19`'
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g4713
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'left'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g4419
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g4720
sS'block_loop.thisRepN'
p5622
I1
sg3645
g4419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5623
I1
sg3647
g4426
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vn
sS'block_loop.thisTrialN'
p5625
I0
sg39
F1.8832783378020395
sg34
g753
(S'\x07\xdf\x07\t\x13\x15\x15\r\x00 '
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g4348
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'left'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g3848
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g4355
sS'block_loop.thisRepN'
p5635
I1
sg3645
g3841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5636
I1
sg3647
g3848
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vn
sS'block_loop.thisTrialN'
p5638
I0
sg39
F1.2832306693162536
sg34
g753
(S'\x07\xdf\x07\t\x13\x15\x1c\x0b\xdf\x10'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g3972
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'right'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g3980
sS'block_loop.thisRepN'
p5648
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5649
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vn
sS'block_loop.thisTrialN'
p5651
I0
sg39
F1.0503210495735402
sg34
g753
(S'\x07\xdf\x07\t\x13\x15#\x01w\x00'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g4713
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'right'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g4419
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g4720
sS'block_loop.thisRepN'
p5661
I1
sg3645
g4419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5662
I1
sg3647
g4426
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vn
sS'block_loop.thisTrialN'
p5664
I0
sg39
F1.1666216210869607
sg34
g753
(S'\x07\xdf\x07\t\x13\x15)\x02\xbf '
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g3671
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'left'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5674
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5675
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vn
sS'block_loop.thisTrialN'
p5677
I0
sg39
F2.2832936761187739
sg34
g753
(S'\x07\xdf\x07\t\x13\x15/\x05\xb1\x08'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g4553
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'right'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g3756
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g4560
sS'block_loop.thisRepN'
p5687
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5688
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vn
sS'block_loop.thisTrialN'
p5690
I0
sg39
F1.4332949020317756
sg34
g753
(S'\x07\xdf\x07\t\x13\x156\n\x87P'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g3786
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'right'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g3797
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g3794
sS'block_loop.thisRepN'
p5700
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5701
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vn
sS'block_loop.thisTrialN'
p5703
I0
sg39
F0.93327551533002406
sg34
g753
(S'\x07\xdf\x07\t\x13\x16\x01\x02\x80\xa0'
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g5458
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'right'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g5465
sS'block_loop.thisRepN'
p5713
I1
sg3645
g4038
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5714
I1
sg3647
g4045
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vn
sS'block_loop.thisTrialN'
p5716
I0
sg39
F0.93326553687802516
sg34
g753
(S'\x07\xdf\x07\t\x13\x16\x07\x01\xe0x'
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g3972
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'right'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g3983
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g3980
sS'block_loop.thisRepN'
p5726
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5727
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vn
sS'block_loop.thisTrialN'
p5729
I0
sg39
F1.2000217815366341
sg34
g753
(S'\x07\xdf\x07\t\x13\x16\r\x01~\xd0'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g4659
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'right'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g4666
sS'block_loop.thisRepN'
p5739
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5740
I1
sg3647
g3746
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vn
sS'block_loop.thisTrialN'
p5742
I0
sg39
F0.76666586838837247
sg34
g753
(S'\x07\xdf\x07\t\x13\x16\x13\x04\xe9\xd0'
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g3944
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'right'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g3858
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g3951
sS'block_loop.thisRepN'
p5752
I1
sg3645
g3858
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5753
I1
sg3647
g3865
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vn
sS'block_loop.thisTrialN'
p5755
I0
sg39
F2.2332945029047551
sg34
g753
(S'\x07\xdf\x07\t\x13\x16\x19\x01\xe8H'
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g4320
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'right'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g4098
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g4327
sS'block_loop.thisRepN'
p5765
I1
sg3645
g4098
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5766
I1
sg3647
g4105
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vn
sS'block_loop.thisTrialN'
p5768
I0
sg39
F1.3000178471775143
sg34
g753
(S'\x07\xdf\x07\t\x13\x16 \x06\x06\xf8'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g4659
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'right'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g4666
sS'block_loop.thisRepN'
p5778
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5779
I1
sg3647
g3746
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vn
sS'block_loop.thisTrialN'
p5781
I0
sg39
F0.78335924880229868
sg34
g753
(S'\x07\xdf\x07\t\x13\x16&\x0b\x1f\xa8'
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g4348
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'left'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g3848
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g4355
sS'block_loop.thisRepN'
p5791
I1
sg3645
g3841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5792
I1
sg3647
g3848
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vn
sS'block_loop.thisTrialN'
p5794
I0
sg39
F2.6332320092769805
sg34
g753
(S'\x07\xdf\x07\t\x13\x16,\x08X\xb8'
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g5458
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'right'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g5465
sS'block_loop.thisRepN'
p5804
I1
sg3645
g4038
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5805
I1
sg3647
g4045
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vn
sS'block_loop.thisTrialN'
p5807
I0
sg39
F0.73309265307034366
sg34
g753
(S'\x07\xdf\x07\t\x13\x164\x03(\x98'
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g4210
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'left'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g4217
sS'block_loop.thisRepN'
p5817
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5818
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vn
sS'block_loop.thisTrialN'
p5820
I0
sg39
F1.8666054845016333
sg34
g753
(S'\x07\xdf\x07\t\x13\x169\x0e\xf08'
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g4415
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'left'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g4419
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g4423
sS'block_loop.thisRepN'
p5830
I1
sg3645
g4419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5831
I1
sg3647
g4426
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vn
sS'block_loop.thisTrialN'
p5833
I0
sg39
F1.4498967657855246
sg34
g753
(S'\x07\xdf\x07\t\x13\x17\x04\rV\x10'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g4094
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'left'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g4098
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g4102
sS'block_loop.thisRepN'
p5843
I1
sg3645
g4098
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5844
I1
sg3647
g4105
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vn
sS'block_loop.thisTrialN'
p5846
I0
sg39
F1.1670387203921564
sg34
g753
(S'\x07\xdf\x07\t\x13\x17\x0b\x05\x8d\xe0'
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g3769
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'left'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g3780
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g3777
sS'block_loop.thisRepN'
p5856
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5857
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vn
sS'block_loop.thisTrialN'
p5859
I0
sg39
F2.3998625254389481
sg34
g753
(S'\x07\xdf\x07\t\x13\x17\x11\x08\x7f\xc8'
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g3705
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'right'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5869
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5870
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vn
sS'block_loop.thisTrialN'
p5872
I0
sg39
F1.9332988934183959
sg34
g753
(S'\x07\xdf\x07\t\x13\x17\x18\x0e\xff\xd8'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g3786
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'right'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g3794
sS'block_loop.thisRepN'
p5882
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5883
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vn
sS'block_loop.thisTrialN'
p5885
I0
sg39
F0.90002788264246192
sg34
g753
(S'\x07\xdf\x07\t\x13\x17\x1f\x0e\x96`'
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g4210
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'left'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g4217
sS'block_loop.thisRepN'
p5895
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5896
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vn
sS'block_loop.thisTrialN'
p5898
I0
sg39
F1.1332459791083238
sg34
g753
(S'\x07\xdf\x07\t\x13\x17%\r} '
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g4538
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'right'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g4012
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g4545
sS'block_loop.thisRepN'
p5908
I1
sg3645
g4012
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5909
I1
sg3647
g4006
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vn
sS'block_loop.thisTrialN'
p5911
I0
sg39
F0.90026765059883473
sg34
g753
(S'\x07\xdf\x07\t\x13\x17,\x00\xeeH'
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g3735
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'left'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g3743
sS'block_loop.thisRepN'
p5921
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5922
I1
sg3647
g3746
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vn
sS'block_loop.thisTrialN'
p5924
I0
sg39
F0.71653897099167807
sg34
g753
(S'\x07\xdf\x07\t\x13\x171\x0f\x17H'
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g4180
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'left'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g4074
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g4187
sS'block_loop.thisRepN'
p5934
I1
sg3645
g4074
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5935
I1
sg3647
g4068
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vn
sS'block_loop.thisTrialN'
p5937
I0
sg39
F0.8999229663531878
sg34
g753
(S'\x07\xdf\x07\t\x13\x177\x0bb\x10'
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g4034
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'left'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g4042
sS'block_loop.thisRepN'
p5947
I1
sg3645
g4038
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5948
I1
sg3647
g4045
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vn
sS'block_loop.thisTrialN'
p5950
I0
sg39
F2.2830311002689996
sg34
g753
(S'\x07\xdf\x07\t\x13\x18\x01\nH\xd0'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g3752
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'left'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g3756
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g3760
sS'block_loop.thisRepN'
p5960
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5961
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vn
sS'block_loop.thisTrialN'
p5963
I0
sg39
F0.80001642167917453
sg34
g753
(S'\x07\xdf\x07\t\x13\x18\x08\x0f\x1b0'
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g4094
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'left'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g4098
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g4102
sS'block_loop.thisRepN'
p5973
I1
sg3645
g4098
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5974
I1
sg3647
g4105
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vn
sS'block_loop.thisTrialN'
p5976
I0
sg39
F0.66660565555503126
sg34
g753
(S'\x07\xdf\x07\t\x13\x18\x0e\x0c\x96\xa8'
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g3654
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'right'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5986
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5987
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vn
sS'block_loop.thisTrialN'
p5989
I0
sg39
F1.4332726643406204
sg34
g753
(S'\x07\xdf\x07\t\x13\x18\x14\x07\xebX'
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g4713
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'right'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g4419
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g4720
sS'block_loop.thisRepN'
p5999
I1
sg3645
g4419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6000
I1
sg3647
g4426
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vn
sS'block_loop.thisTrialN'
p6002
I0
sg39
F1.1332702124927891
sg34
g753
(S'\x07\xdf\x07\t\x13\x18\x1a\x0f&\xe8'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g4305
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'right'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g4312
sS'block_loop.thisRepN'
p6012
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6013
I1
sg3647
g3831
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vn
sS'block_loop.thisTrialN'
p6015
I0
sg39
F0.98320113309455337
sg34
g753
(S'\x07\xdf\x07\t\x13\x18!\x02]x'
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g4064
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'right'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g4074
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g4072
sS'block_loop.thisRepN'
p6025
I1
sg3645
g4074
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6026
I1
sg3647
g4068
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vn
sS'block_loop.thisTrialN'
p6028
I0
sg39
F1.4666557188756997
sg34
g753
(S"\x07\xdf\x07\t\x13\x18'\x02\xaf\x80"
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g3803
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'right'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g3811
sS'block_loop.thisRepN'
p6038
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6039
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vn
sS'block_loop.thisTrialN'
p6041
I0
sg39
F1.2836953800870106
sg34
g753
(S'\x07\xdf\x07\t\x13\x18-\n)\x90'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g4538
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'right'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g4012
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g4545
sS'block_loop.thisRepN'
p6051
I1
sg3645
g4012
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6052
I1
sg3647
g4006
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vn
sS'block_loop.thisTrialN'
p6054
I0
sg39
F2.0499814970971784
sg34
g753
(S'\x07\xdf\x07\t\x13\x183\x0f\x03\xc0'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g5458
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'right'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g5465
sS'block_loop.thisRepN'
p6064
I1
sg3645
g4038
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6065
I1
sg3647
g4045
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vn
sS'block_loop.thisTrialN'
p6067
I0
sg39
F1.599581532223965
sg34
g753
(S'\x07\xdf\x07\t\x13\x18;\x01\x01\xd0'
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g4111
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'left'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g4118
sS'block_loop.thisRepN'
p6077
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6078
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vn
sS'block_loop.thisTrialN'
p6080
I0
sg39
F1.8666425473275012
sg34
g753
(S'\x07\xdf\x07\t\x13\x19\x05\n\xdd@'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g4348
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'left'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g3848
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g4355
sS'block_loop.thisRepN'
p6090
I1
sg3645
g3841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6091
I1
sg3647
g3848
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vn
sS'block_loop.thisTrialN'
p6093
I0
sg39
F1.0999484541680431
sg34
g753
(S'\x07\xdf\x07\t\x13\x19\x0c\tC\x18'
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g4238
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'left'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g4245
sS'block_loop.thisRepN'
p6103
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6104
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vn
sS'block_loop.thisTrialN'
p6106
I0
sg39
F1.5003002088633366
sg34
g753
(S'\x07\xdf\x07\t\x13\x19\x12\x0bB\xd0'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g4538
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'right'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g4012
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g4545
sS'block_loop.thisRepN'
p6116
I1
sg3645
g4012
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6117
I1
sg3647
g4006
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vn
sS'block_loop.thisTrialN'
p6119
I0
sg39
F1.5166560324869351
sg34
g753
(S'\x07\xdf\x07\t\x13\x19\x19\x04.P'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g4659
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'right'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g4666
sS'block_loop.thisRepN'
p6129
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6130
I1
sg3647
g3746
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vn
sS'block_loop.thisTrialN'
p6132
I0
sg39
F0.84999877407972235
sg34
g753
(S'\x07\xdf\x07\t\x13\x19\x1f\x0c\x9a\x90'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g3929
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'left'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g3936
sS'block_loop.thisRepN'
p6142
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6143
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vn
sS'block_loop.thisTrialN'
p6145
I0
sg39
F1.0166511858114973
sg34
g753
(S'\x07\xdf\x07\t\x13\x19%\n\xcd\xa0'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g3634
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'right'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g3643
sS'block_loop.thisRepN'
p6155
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6156
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vn
sS'block_loop.thisTrialN'
p6158
I0
sg39
F1.5499971775279846
sg34
g753
(S'\x07\xdf\x07\t\x13\x19+\x0b\x98\xc0'
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g4126
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'right'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g4133
sS'block_loop.thisRepN'
p6168
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6169
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vn
sS'block_loop.thisTrialN'
p6171
I0
sg39
F0.90004755445261253
sg34
g753
(S'\x07\xdf\x07\t\x13\x192\x05?\xc0'
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g4180
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'left'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g4074
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g4187
sS'block_loop.thisRepN'
p6181
I1
sg3645
g4074
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6182
I1
sg3647
g4068
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vn
sS'block_loop.thisTrialN'
p6184
I0
sg39
F0.81658350339421304
sg34
g753
(S'\x07\xdf\x07\t\x13\x198\x04&\x80'
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g3837
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'right'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g3841
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g3845
sS'block_loop.thisRepN'
p6194
I1
sg3645
g3841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6195
I1
sg3647
g3848
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vn
sS'block_loop.thisTrialN'
p6197
I0
sg39
F1.3999041498391307
sg34
g753
(S'\x07\xdf\x07\t\x13\x1a\x02\x01\xdc\x90'
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g4019
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'left'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g4026
sS'block_loop.thisRepN'
p6207
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6208
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vn
sS'block_loop.thisTrialN'
p6210
I0
sg39
F0.93331001226761146
sg34
g753
(S'\x07\xdf\x07\t\x13\x1a\x08\x08`\x88'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g4936
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'left'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g3903
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g4943
sS'block_loop.thisRepN'
p6220
I1
sg3645
g3903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6221
I1
sg3647
g3910
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vn
sS'block_loop.thisTrialN'
p6223
I0
sg39
F1.2499861727192183
sg34
g753
(S'\x07\xdf\x07\t\x13\x1a\x0e\x07\xfe\xe0'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g3671
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'left'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g3679
sS'block_loop.thisRepN'
p6233
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6234
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vn
sS'block_loop.thisTrialN'
p6236
I0
sg39
F0.83368514505127678
sg34
g753
(S'\x07\xdf\x07\t\x13\x1a\x14\x0c_\xf8'
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g3688
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'right'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g3696
sS'block_loop.thisRepN'
p6246
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6247
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vn
sS'block_loop.thisTrialN'
p6249
I0
sg39
F0.75001610806793906
sg34
g753
(S'\x07\xdf\x07\t\x13\x1a\x1a\nP\xa0'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g3705
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'right'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g3713
sS'block_loop.thisRepN'
p6259
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6260
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vn
sS'block_loop.thisTrialN'
p6262
I0
sg39
F2.0665411662484985
sg34
g753
(S'\x07\xdf\x07\t\x13\x1a \x06\xd6\x00'
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g4094
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'left'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g4098
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g4102
sS'block_loop.thisRepN'
p6272
I1
sg3645
g4098
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6273
I1
sg3647
g4105
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vn
sS'block_loop.thisTrialN'
p6275
I0
sg39
F0.71659028874273645
sg34
g753
(S"\x07\xdf\x07\t\x13\x1a'\x08\x93P"
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g4002
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'left'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g4012
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g4010
sS'block_loop.thisRepN'
p6285
I1
sg3645
g4012
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6286
I1
sg3647
g4006
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vn
sS'block_loop.thisTrialN'
p6288
I0
sg39
F1.2332180964658619
sg34
g753
(S'\x07\xdf\x07\t\x13\x1a-\x04\x9f\x98'
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g4936
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'left'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g3903
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g4943
sS'block_loop.thisRepN'
p6298
I1
sg3645
g3903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6299
I1
sg3647
g3910
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vn
sS'block_loop.thisTrialN'
p6301
I0
sg39
F0.91667878336011199
sg34
g753
(S'\x07\xdf\x07\t\x13\x1a3\x08\xc20'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g3972
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'right'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g3980
sS'block_loop.thisRepN'
p6311
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6312
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vn
sS'block_loop.thisTrialN'
p6314
I0
sg39
F0.79999846046848688
sg34
g753
(S'\x07\xdf\x07\t\x13\x1a9\x07\xe3\x88'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g4111
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'left'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g4118
sS'block_loop.thisRepN'
p6324
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6325
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vn
sS'block_loop.thisTrialN'
p6327
I0
sg39
F1.0165784856581013
sg34
g753
(S'\x07\xdf\x07\t\x13\x1b\x03\x05_\x00'
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g4713
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'right'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g4419
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g4720
sS'block_loop.thisRepN'
p6337
I1
sg3645
g4419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6338
I1
sg3647
g4426
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vn
sS'block_loop.thisTrialN'
p6340
I0
sg39
F0.95000339266698575
sg34
g753
(S'\x07\xdf\x07\t\x13\x1b\t\x06.\x08'
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g4126
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'right'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g4133
sS'block_loop.thisRepN'
p6350
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6351
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vn
sS'block_loop.thisTrialN'
p6353
I0
sg39
F0.98325815282441908
sg34
g753
(S'\x07\xdf\x07\t\x13\x1b\x0f\x06\x06\xf8'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F226.19489656336373
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vn
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vn
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'40-sardines.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'right'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'5-pineapple.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'5-pineapple.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6384
I2
sS'img_wrong'
p6385
S'40-sardines.png'
p6386
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vn
sS'block_loop.thisTrialN'
p6388
I0
sg39
F1.0998555120095261
sg34
g753
(S'\x07\xdf\x07\t\x13 5\x0b\xd3X'
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'right'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'36-fig_rolls.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'36-fig_rolls.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6402
I2
sg6385
S'34-hula_hoops_bbq_beef_redo.png'
p6403
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vn
sS'block_loop.thisTrialN'
p6405
I0
sg39
F1.5999159529237659
sg34
g753
(S'\x07\xdf\x07\t\x13 ;\r\xd3\x10'
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'22-daim.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'right'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
S'7-olives.png'
p6413
sg64
g65
sS'trial_loop.thisIndex'
p6414
g60
(g99
S'\x02\x00\x00\x00'
tRp6415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6416
I0
sg6380
S'7-olives.png'
p6417
sS'block_loop.thisRepN'
p6418
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6419
I2
sg6385
S'22-daim.png'
p6420
sg55
g11
sS'block_loop.thisTrial'
p6421
Nsg70
Vn
sS'block_loop.thisTrialN'
p6422
I0
sg39
F1.133325806731591
sg34
g753
(S'\x07\xdf\x07\t\x13!\x06\x08-\xc0'
tRp6423
sa(dp6424
S'trial_loop.thisTrialN'
p6425
I3
sg6371
S'13-mccoys_steak_crisps.png'
p6426
sS'block_loop.thisIndex'
p6427
g6365
sg38
S'left'
p6428
sg59
g63
sS'trial_loop.thisN'
p6429
I3
sg33
S'13-mccoys_steak_crisps.png'
p6430
sg64
g65
sS'trial_loop.thisIndex'
p6431
g60
(g99
S'\x03\x00\x00\x00'
tRp6432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6433
I0
sg6380
S'3-ellas_strawberries_apples.png'
p6434
sS'block_loop.thisRepN'
p6435
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6436
I2
sg6385
S'3-ellas_strawberries_apples.png'
p6437
sg55
g11
sS'block_loop.thisTrial'
p6438
Nsg70
Vn
sS'block_loop.thisTrialN'
p6439
I0
sg39
F0.7832343756017508
sg34
g753
(S'\x07\xdf\x07\t\x13!\x0c\n\xa6\x90'
tRp6440
sa(dp6441
S'trial_loop.thisTrialN'
p6442
I4
sg6371
S'7-olives.png'
p6443
sS'block_loop.thisIndex'
p6444
g6365
sg38
S'left'
p6445
sg59
g63
sS'trial_loop.thisN'
p6446
I4
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p6447
g60
(g99
S'\x04\x00\x00\x00'
tRp6448
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6449
I0
sg6380
S'22-daim.png'
p6450
sS'block_loop.thisRepN'
p6451
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6452
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6453
Nsg70
Vn
sS'block_loop.thisTrialN'
p6454
I0
sg39
F1.6832671049269265
sg34
g753
(S'\x07\xdf\x07\t\x13!\x12\x07\xe3\x88'
tRp6455
sa(dp6456
S'trial_loop.thisTrialN'
p6457
I5
sg6371
S'38-maltesers.png'
p6458
sS'block_loop.thisIndex'
p6459
g6365
sg38
S'left'
p6460
sg59
g63
sS'trial_loop.thisN'
p6461
I5
sg33
S'38-maltesers.png'
p6462
sg64
g65
sS'trial_loop.thisIndex'
p6463
g60
(g99
S'\x05\x00\x00\x00'
tRp6464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6465
I0
sg6380
S'6-sour_patch_kids.png'
p6466
sS'block_loop.thisRepN'
p6467
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6468
I2
sg6385
S'6-sour_patch_kids.png'
p6469
sg55
g11
sS'block_loop.thisTrial'
p6470
Nsg70
Vn
sS'block_loop.thisTrialN'
p6471
I0
sg39
F1.1334327187214512
sg34
g753
(S'\x07\xdf\x07\t\x13!\x19\x03\xa9\x80'
tRp6472
sa(dp6473
S'trial_loop.thisTrialN'
p6474
I6
sg6371
S'27-hartleys_raspberries_jelly.png'
p6475
sS'block_loop.thisIndex'
p6476
g6365
sg38
S'right'
p6477
sg59
g63
sS'trial_loop.thisN'
p6478
I6
sg33
S'51-mars.png'
p6479
sg64
g65
sS'trial_loop.thisIndex'
p6480
g60
(g99
S'\x06\x00\x00\x00'
tRp6481
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6482
I0
sg6380
S'51-mars.png'
p6483
sS'block_loop.thisRepN'
p6484
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6485
I2
sg6385
S'27-hartleys_raspberries_jelly.png'
p6486
sg55
g11
sS'block_loop.thisTrial'
p6487
Nsg70
Vn
sS'block_loop.thisTrialN'
p6488
I0
sg39
F2.1665586142844404
sg34
g753
(S'\x07\xdf\x07\t\x13!\x1f\x06"P'
tRp6489
sa(dp6490
S'trial_loop.thisTrialN'
p6491
I7
sg6371
S'26-walkers_smoky_bacon.png'
p6492
sS'block_loop.thisIndex'
p6493
g6365
sg38
S'right'
p6494
sg59
g63
sS'trial_loop.thisN'
p6495
I7
sg33
S'44-crunch.png'
p6496
sg64
g65
sS'trial_loop.thisIndex'
p6497
g60
(g99
S'\x07\x00\x00\x00'
tRp6498
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6499
I0
sg6380
S'44-crunch.png'
p6500
sS'block_loop.thisRepN'
p6501
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6502
I2
sg6385
S'26-walkers_smoky_bacon.png'
p6503
sg55
g11
sS'block_loop.thisTrial'
p6504
Nsg70
Vn
sS'block_loop.thisTrialN'
p6505
I0
sg39
F2.2499496800955967
sg34
g753
(S'\x07\xdf\x07\t\x13!&\t\x10P'
tRp6506
sa(dp6507
S'trial_loop.thisTrialN'
p6508
I8
sg6371
S'25-kitkat.png'
p6509
sS'block_loop.thisIndex'
p6510
g6365
sg38
S'right'
p6511
sg59
g63
sS'trial_loop.thisN'
p6512
I8
sg33
S'31-hobnobs.png'
p6513
sg64
g65
sS'trial_loop.thisIndex'
p6514
g60
(g99
S'\x08\x00\x00\x00'
tRp6515
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6516
I0
sg6380
S'31-hobnobs.png'
p6517
sS'block_loop.thisRepN'
p6518
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6519
I2
sg6385
S'25-kitkat.png'
p6520
sg55
g11
sS'block_loop.thisTrial'
p6521
Nsg70
Vn
sS'block_loop.thisTrialN'
p6522
I0
sg39
F1.3498861601183307
sg34
g753
(S'\x07\xdf\x07\t\x13!-\ri\x98'
tRp6523
sa(dp6524
S'trial_loop.thisTrialN'
p6525
I9
sg6371
g6392
sS'block_loop.thisIndex'
p6526
g6365
sg38
S'right'
p6527
sg59
g63
sS'trial_loop.thisN'
p6528
I9
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6529
g60
(g99
S'\t\x00\x00\x00'
tRp6530
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6531
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6532
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6533
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6534
Nsg70
Vn
sS'block_loop.thisTrialN'
p6535
I0
sg39
F1.0666172875862685
sg34
g753
(S'\x07\xdf\x07\t\x13!4\x0428'
tRp6536
sa(dp6537
S'trial_loop.thisTrialN'
p6538
I10
sg6371
g6372
sS'block_loop.thisIndex'
p6539
g6365
sg38
S'right'
p6540
sg59
g63
sS'trial_loop.thisN'
p6541
I10
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6542
g60
(g99
S'\n\x00\x00\x00'
tRp6543
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6544
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6545
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6546
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6547
Nsg70
Vn
sS'block_loop.thisTrialN'
p6548
I0
sg39
F0.88369657750445185
sg34
g753
(S'\x07\xdf\x07\t\x13!:\x05\xb8\xd8'
tRp6549
sa(dp6550
S'trial_loop.thisTrialN'
p6551
I11
sg6371
S'10-bounty_redo.png'
p6552
sS'block_loop.thisIndex'
p6553
g6365
sg38
S'left'
p6554
sg59
g63
sS'trial_loop.thisN'
p6555
I11
sg33
S'10-bounty_redo.png'
p6556
sg64
g65
sS'trial_loop.thisIndex'
p6557
g60
(g99
S'\x0b\x00\x00\x00'
tRp6558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6559
I0
sg6380
S'4-corn.png'
p6560
sS'block_loop.thisRepN'
p6561
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6562
I2
sg6385
S'4-corn.png'
p6563
sg55
g11
sS'block_loop.thisTrial'
p6564
Nsg70
Vn
sS'block_loop.thisTrialN'
p6565
I0
sg39
F1.1166711997357197
sg34
g753
(S'\x07\xdf\x07\t\x13"\x04\x04a\x18'
tRp6566
sa(dp6567
S'trial_loop.thisTrialN'
p6568
I12
sg6371
S'3-ellas_strawberries_apples.png'
p6569
sS'block_loop.thisIndex'
p6570
g6365
sg38
S'right'
p6571
sg59
g63
sS'trial_loop.thisN'
p6572
I12
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6573
g60
(g99
S'\x0c\x00\x00\x00'
tRp6574
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6575
I0
sg6380
S'13-mccoys_steak_crisps.png'
p6576
sS'block_loop.thisRepN'
p6577
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6578
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6579
Nsg70
Vn
sS'block_loop.thisTrialN'
p6580
I0
sg39
F0.81660916226974223
sg34
g753
(S'\x07\xdf\x07\t\x13"\n\x06\x9fP'
tRp6581
sa(dp6582
S'trial_loop.thisTrialN'
p6583
I13
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p6584
sS'block_loop.thisIndex'
p6585
g6365
sg38
S'right'
p6586
sg59
g63
sS'trial_loop.thisN'
p6587
I13
sg33
S'8-liquorice_catherine_wheels.png'
p6588
sg64
g65
sS'trial_loop.thisIndex'
p6589
g60
(g99
S'\r\x00\x00\x00'
tRp6590
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6591
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p6592
sS'block_loop.thisRepN'
p6593
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6594
I2
sg6385
S'17-jacobs_mini_cheddars_redo.png'
p6595
sg55
g11
sS'block_loop.thisTrial'
p6596
Nsg70
Vn
sS'block_loop.thisTrialN'
p6597
I0
sg39
F2.166662675284897
sg34
g753
(S'\x07\xdf\x07\t\x13"\x10\x04U`'
tRp6598
sa(dp6599
S'trial_loop.thisTrialN'
p6600
I14
sg6371
S'46-pistachios.png'
p6601
sS'block_loop.thisIndex'
p6602
g6365
sg38
S'left'
p6603
sg59
g63
sS'trial_loop.thisN'
p6604
I14
sg33
S'46-pistachios.png'
p6605
sg64
g65
sS'trial_loop.thisIndex'
p6606
g60
(g99
S'\x0e\x00\x00\x00'
tRp6607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6608
I0
sg6380
S'29-beans.png'
p6609
sS'block_loop.thisRepN'
p6610
I2
sg6383
g6605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6611
I2
sg6385
S'29-beans.png'
p6612
sg55
g11
sS'block_loop.thisTrial'
p6613
Nsg70
Vn
sS'block_loop.thisTrialN'
p6614
I0
sg39
F1.9165521995601011
sg34
g753
(S'\x07\xdf\x07\t\x13"\x17\x07}\xf8'
tRp6615
sa(dp6616
S'trial_loop.thisTrialN'
p6617
I15
sg6371
g6475
sS'block_loop.thisIndex'
p6618
g6365
sg38
S'right'
p6619
sg59
g63
sS'trial_loop.thisN'
p6620
I15
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p6621
g60
(g99
S'\x0f\x00\x00\x00'
tRp6622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6623
I0
sg6380
g6483
sS'block_loop.thisRepN'
p6624
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6625
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p6626
Nsg70
Vn
sS'block_loop.thisTrialN'
p6627
I0
sg39
F1.2670692829633481
sg34
g753
(S'\x07\xdf\x07\t\x13"\x1e\x06\x9bh'
tRp6628
sa(dp6629
S'trial_loop.thisTrialN'
p6630
I16
sg6371
S'8-liquorice_catherine_wheels.png'
p6631
sS'block_loop.thisIndex'
p6632
g6365
sg38
S'left'
p6633
sg59
g63
sS'trial_loop.thisN'
p6634
I16
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p6635
g60
(g99
S'\x10\x00\x00\x00'
tRp6636
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6637
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p6638
sS'block_loop.thisRepN'
p6639
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6640
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p6641
Nsg70
Vn
sS'block_loop.thisTrialN'
p6642
I0
sg39
F0.95000282247929135
sg34
g753
(S'\x07\xdf\x07\t\x13"$\x0b7\x18'
tRp6643
sa(dp6644
S'trial_loop.thisTrialN'
p6645
I17
sg6371
S'20-fruit_pastilles.png'
p6646
sS'block_loop.thisIndex'
p6647
g6365
sg38
S'right'
p6648
sg59
g63
sS'trial_loop.thisN'
p6649
I17
sg33
S'2-steamed_puddings.png'
p6650
sg64
g65
sS'trial_loop.thisIndex'
p6651
g60
(g99
S'\x11\x00\x00\x00'
tRp6652
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6653
I0
sg6380
S'2-steamed_puddings.png'
p6654
sS'block_loop.thisRepN'
p6655
I2
sg6383
g6650
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6656
I2
sg6385
S'20-fruit_pastilles.png'
p6657
sg55
g11
sS'block_loop.thisTrial'
p6658
Nsg70
Vn
sS'block_loop.thisTrialN'
p6659
I0
sg39
F1.1499057178807561
sg34
g753
(S'\x07\xdf\x07\t\x13"*\n\xd5p'
tRp6660
sa(dp6661
S'trial_loop.thisTrialN'
p6662
I18
sg6371
S'18-mms.png'
p6663
sS'block_loop.thisIndex'
p6664
g6365
sg38
S'left'
p6665
sg59
g63
sS'trial_loop.thisN'
p6666
I18
sg33
S'18-mms.png'
p6667
sg64
g65
sS'trial_loop.thisIndex'
p6668
g60
(g99
S'\x12\x00\x00\x00'
tRp6669
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6670
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p6671
sS'block_loop.thisRepN'
p6672
I2
sg6383
g6667
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6673
I2
sg6385
S'43-mrporky_pork_crackles_redo.png'
p6674
sg55
g11
sS'block_loop.thisTrial'
p6675
Nsg70
Vn
sS'block_loop.thisTrialN'
p6676
I0
sg39
F1.1167493167667999
sg34
g753
(S'\x07\xdf\x07\t\x13"0\r\xc7X'
tRp6677
sa(dp6678
S'trial_loop.thisTrialN'
p6679
I19
sg6371
S'35-raisins.png'
p6680
sS'block_loop.thisIndex'
p6681
g6365
sg38
S'left'
p6682
sg59
g63
sS'trial_loop.thisN'
p6683
I19
sg33
S'35-raisins.png'
p6684
sg64
g65
sS'trial_loop.thisIndex'
p6685
g60
(g99
S'\x13\x00\x00\x00'
tRp6686
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6687
I0
sg6380
S'49-yorkie.png'
p6688
sS'block_loop.thisRepN'
p6689
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6690
I2
sg6385
S'49-yorkie.png'
p6691
sg55
g11
sS'block_loop.thisTrial'
p6692
Nsg70
Vn
sS'block_loop.thisTrialN'
p6693
I0
sg39
F1.0498865592526272
sg34
g753
(S'\x07\xdf\x07\t\x13"7\x00\xc3P'
tRp6694
sa(dp6695
S'trial_loop.thisTrialN'
p6696
I20
sg6371
S'29-beans.png'
p6697
sS'block_loop.thisIndex'
p6698
g6365
sg38
S'right'
p6699
sg59
g63
sS'trial_loop.thisN'
p6700
I20
sg33
g6605
sg64
g65
sS'trial_loop.thisIndex'
p6701
g60
(g99
S'\x14\x00\x00\x00'
tRp6702
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6703
I0
sg6380
S'46-pistachios.png'
p6704
sS'block_loop.thisRepN'
p6705
I2
sg6383
g6605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6706
I2
sg6385
g6612
sg55
g11
sS'block_loop.thisTrial'
p6707
Nsg70
Vn
sS'block_loop.thisTrialN'
p6708
I0
sg39
F1.2166664100732305
sg34
g753
(S'\x07\xdf\x07\t\x13#\x01\x02\x0bp'
tRp6709
sa(dp6710
S'trial_loop.thisTrialN'
p6711
I21
sg6371
g6392
sS'block_loop.thisIndex'
p6712
g6365
sg38
S'right'
p6713
sg59
g63
sS'trial_loop.thisN'
p6714
I21
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6715
g60
(g99
S'\x15\x00\x00\x00'
tRp6716
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6717
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6718
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6719
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6720
Nsg70
Vn
sS'block_loop.thisTrialN'
p6721
I0
sg39
F1.0499113628320629
sg34
g753
(S'\x07\xdf\x07\t\x13#\x07\x05\xef\x88'
tRp6722
sa(dp6723
S'trial_loop.thisTrialN'
p6724
I22
sg6371
S'16-skips_prawn.png'
p6725
sS'block_loop.thisIndex'
p6726
g6365
sg38
S'right'
p6727
sg59
g63
sS'trial_loop.thisN'
p6728
I22
sg33
S'42-mrkipling_lemon_slices.png'
p6729
sg64
g65
sS'trial_loop.thisIndex'
p6730
g60
(g99
S'\x16\x00\x00\x00'
tRp6731
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6732
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p6733
sS'block_loop.thisRepN'
p6734
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6735
I2
sg6385
S'16-skips_prawn.png'
p6736
sg55
g11
sS'block_loop.thisTrial'
p6737
Nsg70
Vn
sS'block_loop.thisTrialN'
p6738
I0
sg39
F0.81647887219878612
sg34
g753
(S'\x07\xdf\x07\t\x13#\r\x077\xa8'
tRp6739
sa(dp6740
S'trial_loop.thisTrialN'
p6741
I23
sg6371
S'5-pineapple.png'
p6742
sS'block_loop.thisIndex'
p6743
g6365
sg38
S'left'
p6744
sg59
g63
sS'trial_loop.thisN'
p6745
I23
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6746
g60
(g99
S'\x17\x00\x00\x00'
tRp6747
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6748
I0
sg6380
S'40-sardines.png'
p6749
sS'block_loop.thisRepN'
p6750
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6751
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6752
Nsg70
Vn
sS'block_loop.thisTrialN'
p6753
I0
sg39
F1.3832247392638237
sg34
g753
(S'\x07\xdf\x07\t\x13#\x13\x04\xed\xb8'
tRp6754
sa(dp6755
S'trial_loop.thisTrialN'
p6756
I24
sg6371
S'30-spaghetti_hoops.png'
p6757
sS'block_loop.thisIndex'
p6758
g6365
sg38
S'right'
p6759
sg59
g63
sS'trial_loop.thisN'
p6760
I24
sg33
S'30-spaghetti_hoops.png'
p6761
sg64
g65
sS'trial_loop.thisIndex'
p6762
g60
(g99
S'\x18\x00\x00\x00'
tRp6763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6764
I0
sg6380
S'19-caramello_redo.png'
p6765
sS'block_loop.thisRepN'
p6766
I2
sg6383
S'19-caramello_redo.png'
p6767
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6768
I2
sg6385
g6761
sg55
g11
sS'block_loop.thisTrial'
p6769
Nsg70
Vn
sS'block_loop.thisTrialN'
p6770
I0
sg39
F1.6999738849626738
sg34
g753
(S'\x07\xdf\x07\t\x13#\x19\x0b7\x18'
tRp6771
sa(dp6772
S'trial_loop.thisTrialN'
p6773
I25
sg6371
S'4-corn.png'
p6774
sS'block_loop.thisIndex'
p6775
g6365
sg38
S'right'
p6776
sg59
g63
sS'trial_loop.thisN'
p6777
I25
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p6778
g60
(g99
S'\x19\x00\x00\x00'
tRp6779
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6780
I0
sg6380
S'10-bounty_redo.png'
p6781
sS'block_loop.thisRepN'
p6782
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6783
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p6784
Nsg70
Vn
sS'block_loop.thisTrialN'
p6785
I0
sg39
F2.5999963507347275
sg34
g753
(S'\x07\xdf\x07\t\x13# \x07;\x90'
tRp6786
sa(dp6787
S'trial_loop.thisTrialN'
p6788
I26
sg6371
S'42-mrkipling_lemon_slices.png'
p6789
sS'block_loop.thisIndex'
p6790
g6365
sg38
S'left'
p6791
sg59
g63
sS'trial_loop.thisN'
p6792
I26
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p6793
g60
(g99
S'\x1a\x00\x00\x00'
tRp6794
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6795
I0
sg6380
S'16-skips_prawn.png'
p6796
sS'block_loop.thisRepN'
p6797
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6798
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p6799
Nsg70
Vn
sS'block_loop.thisTrialN'
p6800
I0
sg39
F0.8166131536490866
sg34
g753
(S'\x07\xdf\x07\t\x13#(\x01\x92X'
tRp6801
sa(dp6802
S'trial_loop.thisTrialN'
p6803
I27
sg6371
g6646
sS'block_loop.thisIndex'
p6804
g6365
sg38
S'right'
p6805
sg59
g63
sS'trial_loop.thisN'
p6806
I27
sg33
g6650
sg64
g65
sS'trial_loop.thisIndex'
p6807
g60
(g99
S'\x1b\x00\x00\x00'
tRp6808
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6809
I0
sg6380
g6654
sS'block_loop.thisRepN'
p6810
I2
sg6383
g6650
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6811
I2
sg6385
g6657
sg55
g11
sS'block_loop.thisTrial'
p6812
Nsg70
Vn
sS'block_loop.thisTrialN'
p6813
I0
sg39
F1.3832449812616687
sg34
g753
(S'\x07\xdf\x07\t\x13#-\x0e\x8a\xa8'
tRp6814
sa(dp6815
S'trial_loop.thisTrialN'
p6816
I28
sg6371
S'21-nakd_banana_crunch.png'
p6817
sS'block_loop.thisIndex'
p6818
g6365
sg38
S'right'
p6819
sg59
g63
sS'trial_loop.thisN'
p6820
I28
sg33
S'1-treacle_cookies.png'
p6821
sg64
g65
sS'trial_loop.thisIndex'
p6822
g60
(g99
S'\x1c\x00\x00\x00'
tRp6823
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6824
I0
sg6380
S'1-treacle_cookies.png'
p6825
sS'block_loop.thisRepN'
p6826
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6827
I2
sg6385
S'21-nakd_banana_crunch.png'
p6828
sg55
g11
sS'block_loop.thisTrial'
p6829
Nsg70
Vn
sS'block_loop.thisTrialN'
p6830
I0
sg39
F1.0999136721366085
sg34
g753
(S'\x07\xdf\x07\t\x13#4\x05\x8d\xe0'
tRp6831
sa(dp6832
S'trial_loop.thisTrialN'
p6833
I29
sg6371
g6631
sS'block_loop.thisIndex'
p6834
g6365
sg38
S'left'
p6835
sg59
g63
sS'trial_loop.thisN'
p6836
I29
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p6837
g60
(g99
S'\x1d\x00\x00\x00'
tRp6838
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6839
I0
sg6380
g6638
sS'block_loop.thisRepN'
p6840
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6841
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p6842
Nsg70
Vn
sS'block_loop.thisTrialN'
p6843
I0
sg39
F1.2666821190141491
sg34
g753
(S'\x07\xdf\x07\t\x13#:\x07\x8d\x98'
tRp6844
sa(dp6845
S'trial_loop.thisTrialN'
p6846
I30
sg6371
g6663
sS'block_loop.thisIndex'
p6847
g6365
sg38
S'left'
p6848
sg59
g63
sS'trial_loop.thisN'
p6849
I30
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p6850
g60
(g99
S'\x1e\x00\x00\x00'
tRp6851
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6852
I0
sg6380
g6671
sS'block_loop.thisRepN'
p6853
I2
sg6383
g6667
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6854
I2
sg6385
g6674
sg55
g11
sS'block_loop.thisTrial'
p6855
Nsg70
Vn
sS'block_loop.thisTrialN'
p6856
I0
sg39
F1.6167054115721839
sg34
g753
(S'\x07\xdf\x07\t\x13$\x04\x0c-0'
tRp6857
sa(dp6858
S'trial_loop.thisTrialN'
p6859
I31
sg6371
g6409
sS'block_loop.thisIndex'
p6860
g6365
sg38
S'right'
p6861
sg59
g63
sS'trial_loop.thisN'
p6862
I31
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p6863
g60
(g99
S'\x1f\x00\x00\x00'
tRp6864
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6865
I0
sg6380
g6417
sS'block_loop.thisRepN'
p6866
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6867
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6868
Nsg70
Vn
sS'block_loop.thisTrialN'
p6869
I0
sg39
F1.7165603533794638
sg34
g753
(S'\x07\xdf\x07\t\x13$\x0b\x06\xc2x'
tRp6870
sa(dp6871
S'trial_loop.thisTrialN'
p6872
I32
sg6371
S'48-twix.png'
p6873
sS'block_loop.thisIndex'
p6874
g6365
sg38
S'left'
p6875
sg59
g63
sS'trial_loop.thisN'
p6876
I32
sg33
S'48-twix.png'
p6877
sg64
g65
sS'trial_loop.thisIndex'
p6878
g60
(g99
S' \x00\x00\x00'
tRp6879
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6880
I0
sg6380
S'50-polo.png'
p6881
sS'block_loop.thisRepN'
p6882
I2
sg6383
g6877
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6883
I2
sg6385
S'50-polo.png'
p6884
sg55
g11
sS'block_loop.thisTrial'
p6885
Nsg70
Vn
sS'block_loop.thisTrialN'
p6886
I0
sg39
F3.3831825446686707
sg34
g753
(S'\x07\xdf\x07\t\x13$\x12\x03\x05p'
tRp6887
sa(dp6888
S'trial_loop.thisTrialN'
p6889
I33
sg6371
g6426
sS'block_loop.thisIndex'
p6890
g6365
sg38
S'left'
p6891
sg59
g63
sS'trial_loop.thisN'
p6892
I33
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6893
g60
(g99
S'!\x00\x00\x00'
tRp6894
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6895
I0
sg6380
g6434
sS'block_loop.thisRepN'
p6896
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6897
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6898
Nsg70
Vn
sS'block_loop.thisTrialN'
p6899
I0
sg39
F1.133324096139404
sg34
g753
(S'\x07\xdf\x07\t\x13$\x1a\t}\xb0'
tRp6900
sa(dp6901
S'trial_loop.thisTrialN'
p6902
I34
sg6371
S'31-hobnobs.png'
p6903
sS'block_loop.thisIndex'
p6904
g6365
sg38
S'left'
p6905
sg59
g63
sS'trial_loop.thisN'
p6906
I34
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p6907
g60
(g99
S'"\x00\x00\x00'
tRp6908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6909
I0
sg6380
S'25-kitkat.png'
p6910
sS'block_loop.thisRepN'
p6911
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6912
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p6913
Nsg70
Vn
sS'block_loop.thisTrialN'
p6914
I0
sg39
F1.0333100692878361
sg34
g753
(S'\x07\xdf\x07\t\x13$ \x0b\xf6\x80'
tRp6915
sa(dp6916
S'trial_loop.thisTrialN'
p6917
I35
sg6371
S'43-mrporky_pork_crackles_redo.png'
p6918
sS'block_loop.thisIndex'
p6919
g6365
sg38
S'right'
p6920
sg59
g63
sS'trial_loop.thisN'
p6921
I35
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p6922
g60
(g99
S'#\x00\x00\x00'
tRp6923
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6924
I0
sg6380
S'18-mms.png'
p6925
sS'block_loop.thisRepN'
p6926
I2
sg6383
g6667
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6927
I2
sg6385
g6674
sg55
g11
sS'block_loop.thisTrial'
p6928
Nsg70
Vn
sS'block_loop.thisTrialN'
p6929
I0
sg39
F1.3669361989232129
sg34
g753
(S'\x07\xdf\x07\t\x13$&\r\x00 '
tRp6930
sa(dp6931
S'trial_loop.thisTrialN'
p6932
I36
sg6371
S'49-yorkie.png'
p6933
sS'block_loop.thisIndex'
p6934
g6365
sg38
S'right'
p6935
sg59
g63
sS'trial_loop.thisN'
p6936
I36
sg33
g6691
sg64
g65
sS'trial_loop.thisIndex'
p6937
g60
(g99
S'$\x00\x00\x00'
tRp6938
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6939
I0
sg6380
S'35-raisins.png'
p6940
sS'block_loop.thisRepN'
p6941
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6942
I2
sg6385
g6691
sg55
g11
sS'block_loop.thisTrial'
p6943
Nsg70
Vn
sS'block_loop.thisTrialN'
p6944
I0
sg39
F1.4165182728247601
sg34
g753
(S'\x07\xdf\x07\t\x13$-\x03\xc8\xc0'
tRp6945
sa(dp6946
S'trial_loop.thisTrialN'
p6947
I37
sg6371
g6742
sS'block_loop.thisIndex'
p6948
g6365
sg38
S'left'
p6949
sg59
g63
sS'trial_loop.thisN'
p6950
I37
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6951
g60
(g99
S'%\x00\x00\x00'
tRp6952
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6953
I0
sg6380
g6749
sS'block_loop.thisRepN'
p6954
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6955
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6956
Nsg70
Vn
sS'block_loop.thisTrialN'
p6957
I0
sg39
F1.649986685893964
sg34
g753
(S'\x07\xdf\x07\t\x13$3\n\xc9\xb8'
tRp6958
sa(dp6959
S'trial_loop.thisTrialN'
p6960
I38
sg6371
g6392
sS'block_loop.thisIndex'
p6961
g6365
sg38
S'right'
p6962
sg59
g63
sS'trial_loop.thisN'
p6963
I38
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p6964
g60
(g99
S'&\x00\x00\x00'
tRp6965
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6966
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6967
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6968
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6969
Nsg70
Vn
sS'block_loop.thisTrialN'
p6970
I0
sg39
F1.149981554117403
sg34
g753
(S'\x07\xdf\x07\t\x13$:\x05\xdc\x00'
tRp6971
sa(dp6972
S'trial_loop.thisTrialN'
p6973
I39
sg6371
S'6-sour_patch_kids.png'
p6974
sS'block_loop.thisIndex'
p6975
g6365
sg38
S'right'
p6976
sg59
g63
sS'trial_loop.thisN'
p6977
I39
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p6978
g60
(g99
S"'\x00\x00\x00"
tRp6979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6980
I0
sg6380
S'38-maltesers.png'
p6981
sS'block_loop.thisRepN'
p6982
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6983
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p6984
Nsg70
Vn
sS'block_loop.thisTrialN'
p6985
I0
sg39
F0.74972815845103469
sg34
g753
(S'\x07\xdf\x07\t\x13%\x04\x08\x8fh'
tRp6986
sa(dp6987
S'trial_loop.thisTrialN'
p6988
I40
sg6371
S'44-crunch.png'
p6989
sS'block_loop.thisIndex'
p6990
g6365
sg38
S'left'
p6991
sg59
g63
sS'trial_loop.thisN'
p6992
I40
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p6993
g60
(g99
S'(\x00\x00\x00'
tRp6994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6995
I0
sg6380
S'26-walkers_smoky_bacon.png'
p6996
sS'block_loop.thisRepN'
p6997
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6998
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p6999
Nsg70
Vn
sS'block_loop.thisTrialN'
p7000
I0
sg39
F1.1333531761993072
sg34
g753
(S'\x07\xdf\x07\t\x13%\n\x05SH'
tRp7001
sa(dp7002
S'trial_loop.thisTrialN'
p7003
I41
sg6371
g6475
sS'block_loop.thisIndex'
p7004
g6365
sg38
S'right'
p7005
sg59
g63
sS'trial_loop.thisN'
p7006
I41
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p7007
g60
(g99
S')\x00\x00\x00'
tRp7008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7009
I0
sg6380
g6483
sS'block_loop.thisRepN'
p7010
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7011
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p7012
Nsg70
Vn
sS'block_loop.thisTrialN'
p7013
I0
sg39
F1.6998652623879025
sg34
g753
(S'\x07\xdf\x07\t\x13%\x10\x07\xcc\x18'
tRp7014
sa(dp7015
S'trial_loop.thisTrialN'
p7016
I42
sg6371
S'33-ambrosia_rice.png'
p7017
sS'block_loop.thisIndex'
p7018
g6365
sg38
S'right'
p7019
sg59
g63
sS'trial_loop.thisN'
p7020
I42
sg33
S'23-crunchie_redo.png'
p7021
sg64
g65
sS'trial_loop.thisIndex'
p7022
g60
(g99
S'*\x00\x00\x00'
tRp7023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7024
I0
sg6380
S'23-crunchie_redo.png'
p7025
sS'block_loop.thisRepN'
p7026
I2
sg6383
g7021
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7027
I2
sg6385
S'33-ambrosia_rice.png'
p7028
sg55
g11
sS'block_loop.thisTrial'
p7029
Nsg70
Vn
sS'block_loop.thisTrialN'
p7030
I0
sg39
F1.0999772491268232
sg34
g753
(S'\x07\xdf\x07\t\x13%\x17\x03\xd0\x90'
tRp7031
sa(dp7032
S'trial_loop.thisTrialN'
p7033
I43
sg6371
S'36-fig_rolls.png'
p7034
sS'block_loop.thisIndex'
p7035
g6365
sg38
S'left'
p7036
sg59
g63
sS'trial_loop.thisN'
p7037
I43
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7038
g60
(g99
S'+\x00\x00\x00'
tRp7039
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7040
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p7041
sS'block_loop.thisRepN'
p7042
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7043
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7044
Nsg70
Vn
sS'block_loop.thisTrialN'
p7045
I0
sg39
F2.0832257086003665
sg34
g753
(S'\x07\xdf\x07\t\x13%\x1d\x05\xd0H'
tRp7046
sa(dp7047
S'trial_loop.thisTrialN'
p7048
I44
sg6371
g6552
sS'block_loop.thisIndex'
p7049
g6365
sg38
S'left'
p7050
sg59
g63
sS'trial_loop.thisN'
p7051
I44
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p7052
g60
(g99
S',\x00\x00\x00'
tRp7053
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7054
I0
sg6380
g6560
sS'block_loop.thisRepN'
p7055
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7056
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p7057
Nsg70
Vn
sS'block_loop.thisTrialN'
p7058
I0
sg39
F1.0166945208038669
sg34
g753
(S'\x07\xdf\x07\t\x13%$\x07\x8d\x98'
tRp7059
sa(dp7060
S'trial_loop.thisTrialN'
p7061
I45
sg6371
S'51-mars.png'
p7062
sS'block_loop.thisIndex'
p7063
g6365
sg38
S'left'
p7064
sg59
g63
sS'trial_loop.thisN'
p7065
I45
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p7066
g60
(g99
S'-\x00\x00\x00'
tRp7067
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7068
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p7069
sS'block_loop.thisRepN'
p7070
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7071
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p7072
Nsg70
Vn
sS'block_loop.thisTrialN'
p7073
I0
sg39
F1.0336792720190715
sg34
g753
(S'\x07\xdf\x07\t\x13%*\x08X\xb8'
tRp7074
sa(dp7075
S'trial_loop.thisTrialN'
p7076
I46
sg6371
g6372
sS'block_loop.thisIndex'
p7077
g6365
sg38
S'right'
p7078
sg59
g63
sS'trial_loop.thisN'
p7079
I46
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7080
g60
(g99
S'.\x00\x00\x00'
tRp7081
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7082
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7083
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7084
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7085
Nsg70
Vn
sS'block_loop.thisTrialN'
p7086
I0
sg39
F0.93332227149949176
sg34
g753
(S'\x07\xdf\x07\t\x13%0\tf@'
tRp7087
sa(dp7088
S'trial_loop.thisTrialN'
p7089
I47
sg6371
g6426
sS'block_loop.thisIndex'
p7090
g6365
sg38
S'left'
p7091
sg59
g63
sS'trial_loop.thisN'
p7092
I47
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7093
g60
(g99
S'/\x00\x00\x00'
tRp7094
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7095
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7096
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7097
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7098
Nsg70
Vn
sS'block_loop.thisTrialN'
p7099
I0
sg39
F0.9166725111863343
sg34
g753
(S'\x07\xdf\x07\t\x13%6\x08\xc6\x18'
tRp7100
sa(dp7101
S'trial_loop.thisTrialN'
p7102
I48
sg6371
g6974
sS'block_loop.thisIndex'
p7103
g6365
sg38
S'right'
p7104
sg59
g63
sS'trial_loop.thisN'
p7105
I48
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p7106
g60
(g99
S'0\x00\x00\x00'
tRp7107
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7108
I0
sg6380
g6981
sS'block_loop.thisRepN'
p7109
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7110
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p7111
Nsg70
Vn
sS'block_loop.thisTrialN'
p7112
I0
sg39
F1.3663942264101934
sg34
g753
(S'\x07\xdf\x07\t\x13&\x00\x08%\xf0'
tRp7113
sa(dp7114
S'trial_loop.thisTrialN'
p7115
I49
sg6371
g6903
sS'block_loop.thisIndex'
p7116
g6365
sg38
S'left'
p7117
sg59
g63
sS'trial_loop.thisN'
p7118
I49
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p7119
g60
(g99
S'1\x00\x00\x00'
tRp7120
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7121
I0
sg6380
g6910
sS'block_loop.thisRepN'
p7122
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7123
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p7124
Nsg70
Vn
sS'block_loop.thisTrialN'
p7125
I0
sg39
F1.5332342330439133
sg34
g753
(S'\x07\xdf\x07\t\x13&\x06\x0e0\xd0'
tRp7126
sa(dp7127
S'trial_loop.thisTrialN'
p7128
I50
sg6371
g7017
sS'block_loop.thisIndex'
p7129
g6365
sg38
S'right'
p7130
sg59
g63
sS'trial_loop.thisN'
p7131
I50
sg33
g7021
sg64
g65
sS'trial_loop.thisIndex'
p7132
g60
(g99
S'2\x00\x00\x00'
tRp7133
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7134
I0
sg6380
g7025
sS'block_loop.thisRepN'
p7135
I2
sg6383
g7021
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7136
I2
sg6385
g7028
sg55
g11
sS'block_loop.thisTrial'
p7137
Nsg70
Vn
sS'block_loop.thisTrialN'
p7138
I0
sg39
F2.2669680729450192
sg34
g753
(S'\x07\xdf\x07\t\x13&\r\x07\x99P'
tRp7139
sa(dp7140
S'trial_loop.thisTrialN'
p7141
I51
sg6371
g6933
sS'block_loop.thisIndex'
p7142
g6365
sg38
S'right'
p7143
sg59
g63
sS'trial_loop.thisN'
p7144
I51
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p7145
g60
(g99
S'3\x00\x00\x00'
tRp7146
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7147
I0
sg6380
g6940
sS'block_loop.thisRepN'
p7148
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7149
I2
sg6385
g6691
sg55
g11
sS'block_loop.thisTrial'
p7150
Nsg70
Vn
sS'block_loop.thisTrialN'
p7151
I0
sg39
F0.96658929089608137
sg34
g753
(S'\x07\xdf\x07\t\x13&\x14\x0c1\x18'
tRp7152
sa(dp7153
S'trial_loop.thisTrialN'
p7154
I52
sg6371
S'23-crunchie_redo.png'
p7155
sS'block_loop.thisIndex'
p7156
g6365
sg38
S'left'
p7157
sg59
g63
sS'trial_loop.thisN'
p7158
I52
sg33
g7021
sg64
g65
sS'trial_loop.thisIndex'
p7159
g60
(g99
S'4\x00\x00\x00'
tRp7160
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7161
I0
sg6380
S'33-ambrosia_rice.png'
p7162
sS'block_loop.thisRepN'
p7163
I2
sg6383
g7021
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7164
I2
sg6385
g7028
sg55
g11
sS'block_loop.thisTrial'
p7165
Nsg70
Vn
sS'block_loop.thisTrialN'
p7166
I0
sg39
F1.6999738849699497
sg34
g753
(S'\x07\xdf\x07\t\x13&\x1a\x0cH\x88'
tRp7167
sa(dp7168
S'trial_loop.thisTrialN'
p7169
I53
sg6371
S'41-peanuts_redo.png'
p7170
sS'block_loop.thisIndex'
p7171
g6365
sg38
S'left'
p7172
sg59
g63
sS'trial_loop.thisN'
p7173
I53
sg33
S'41-peanuts_redo.png'
p7174
sg64
g65
sS'trial_loop.thisIndex'
p7175
g60
(g99
S'5\x00\x00\x00'
tRp7176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7177
I0
sg6380
S'45-chewy_nougat_redo.png'
p7178
sS'block_loop.thisRepN'
p7179
I2
sg6383
g7174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7180
I2
sg6385
S'45-chewy_nougat_redo.png'
p7181
sg55
g11
sS'block_loop.thisTrial'
p7182
Nsg70
Vn
sS'block_loop.thisTrialN'
p7183
I0
sg39
F1.8166265532927355
sg34
g753
(S'\x07\xdf\x07\t\x13&!\x08\x0e\x80'
tRp7184
sa(dp7185
S'trial_loop.thisTrialN'
p7186
I54
sg6371
g6601
sS'block_loop.thisIndex'
p7187
g6365
sg38
S'left'
p7188
sg59
g63
sS'trial_loop.thisN'
p7189
I54
sg33
g6605
sg64
g65
sS'trial_loop.thisIndex'
p7190
g60
(g99
S'6\x00\x00\x00'
tRp7191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7192
I0
sg6380
g6609
sS'block_loop.thisRepN'
p7193
I2
sg6383
g6605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7194
I2
sg6385
g6612
sg55
g11
sS'block_loop.thisTrial'
p7195
Nsg70
Vn
sS'block_loop.thisTrialN'
p7196
I0
sg39
F2.8665248015895486
sg34
g753
(S'\x07\xdf\x07\t\x13&(\x05\xc0\xa8'
tRp7197
sa(dp7198
S'trial_loop.thisTrialN'
p7199
I55
sg6371
g6873
sS'block_loop.thisIndex'
p7200
g6365
sg38
S'left'
p7201
sg59
g63
sS'trial_loop.thisN'
p7202
I55
sg33
g6877
sg64
g65
sS'trial_loop.thisIndex'
p7203
g60
(g99
S'7\x00\x00\x00'
tRp7204
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7205
I0
sg6380
g6881
sS'block_loop.thisRepN'
p7206
I2
sg6383
g6877
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7207
I2
sg6385
g6884
sg55
g11
sS'block_loop.thisTrial'
p7208
Nsg70
Vn
sS'block_loop.thisTrialN'
p7209
I0
sg39
F2.183328686223831
sg34
g753
(S'\x07\xdf\x07\t\x13&0\x04]0'
tRp7210
sa(dp7211
S'trial_loop.thisTrialN'
p7212
I56
sg6371
g6757
sS'block_loop.thisIndex'
p7213
g6365
sg38
S'left'
p7214
sg59
g63
sS'trial_loop.thisN'
p7215
I56
sg33
g6767
sg64
g65
sS'trial_loop.thisIndex'
p7216
g60
(g99
S'8\x00\x00\x00'
tRp7217
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7218
I0
sg6380
g6765
sS'block_loop.thisRepN'
p7219
I2
sg6383
g6767
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7220
I2
sg6385
g6761
sg55
g11
sS'block_loop.thisTrial'
p7221
Nsg70
Vn
sS'block_loop.thisTrialN'
p7222
I0
sg39
F3.4498081001074752
sg34
g753
(S'\x07\xdf\x07\t\x13&7\x07\x85\xc8'
tRp7223
sa(dp7224
S'trial_loop.thisTrialN'
p7225
I57
sg6371
g6989
sS'block_loop.thisIndex'
p7226
g6365
sg38
S'left'
p7227
sg59
g63
sS'trial_loop.thisN'
p7228
I57
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p7229
g60
(g99
S'9\x00\x00\x00'
tRp7230
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7231
I0
sg6380
g6996
sS'block_loop.thisRepN'
p7232
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7233
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p7234
Nsg70
Vn
sS'block_loop.thisTrialN'
p7235
I0
sg39
F2.2165825910851709
sg34
g753
(S"\x07\xdf\x07\t\x13'\x03\x0e\xf08"
tRp7236
sa(dp7237
S'trial_loop.thisTrialN'
p7238
I58
sg6371
g6680
sS'block_loop.thisIndex'
p7239
g6365
sg38
S'left'
p7240
sg59
g63
sS'trial_loop.thisN'
p7241
I58
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p7242
g60
(g99
S':\x00\x00\x00'
tRp7243
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7244
I0
sg6380
g6688
sS'block_loop.thisRepN'
p7245
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7246
I2
sg6385
g6691
sg55
g11
sS'block_loop.thisTrial'
p7247
Nsg70
Vn
sS'block_loop.thisTrialN'
p7248
I0
sg39
F3.5165308741925401
sg34
g753
(S"\x07\xdf\x07\t\x13'\x0b\x03\x8e("
tRp7249
sa(dp7250
S'trial_loop.thisTrialN'
p7251
I59
sg6371
g6509
sS'block_loop.thisIndex'
p7252
g6365
sg38
S'right'
p7253
sg59
g63
sS'trial_loop.thisN'
p7254
I59
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p7255
g60
(g99
S';\x00\x00\x00'
tRp7256
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7257
I0
sg6380
g6517
sS'block_loop.thisRepN'
p7258
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7259
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p7260
Nsg70
Vn
sS'block_loop.thisTrialN'
p7261
I0
sg39
F0.86703940462030005
sg34
g753
(S"\x07\xdf\x07\t\x13'\x13\x0b\xee\xb0"
tRp7262
sa(dp7263
S'trial_loop.thisTrialN'
p7264
I60
sg6371
g6789
sS'block_loop.thisIndex'
p7265
g6365
sg38
S'left'
p7266
sg59
g63
sS'trial_loop.thisN'
p7267
I60
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p7268
g60
(g99
S'<\x00\x00\x00'
tRp7269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7270
I0
sg6380
g6796
sS'block_loop.thisRepN'
p7271
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7272
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p7273
Nsg70
Vn
sS'block_loop.thisTrialN'
p7274
I0
sg39
F0.96655051747802645
sg34
g753
(S"\x07\xdf\x07\t\x13'\x19\n\\X"
tRp7275
sa(dp7276
S'trial_loop.thisTrialN'
p7277
I61
sg6371
g6774
sS'block_loop.thisIndex'
p7278
g6365
sg38
S'right'
p7279
sg59
g63
sS'trial_loop.thisN'
p7280
I61
sg33
g6563
sg64
g65
sS'trial_loop.thisIndex'
p7281
g60
(g99
S'=\x00\x00\x00'
tRp7282
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7283
I0
sg6380
g6781
sS'block_loop.thisRepN'
p7284
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7285
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p7286
Nsg70
Vn
sS'block_loop.thisTrialN'
p7287
I0
sg39
F1.1999442347005242
sg34
g753
(S"\x07\xdf\x07\t\x13'\x1f\ns\xc8"
tRp7288
sa(dp7289
S'trial_loop.thisTrialN'
p7290
I62
sg6371
g6725
sS'block_loop.thisIndex'
p7291
g6365
sg38
S'right'
p7292
sg59
g63
sS'trial_loop.thisN'
p7293
I62
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p7294
g60
(g99
S'>\x00\x00\x00'
tRp7295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7296
I0
sg6380
g6733
sS'block_loop.thisRepN'
p7297
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7298
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p7299
Nsg70
Vn
sS'block_loop.thisTrialN'
p7300
I0
sg39
F2.1330230319726979
sg34
g753
(S"\x07\xdf\x07\t\x13'%\r\xe2\xb0"
tRp7301
sa(dp7302
S'trial_loop.thisTrialN'
p7303
I63
sg6371
g6458
sS'block_loop.thisIndex'
p7304
g6365
sg38
S'left'
p7305
sg59
g63
sS'trial_loop.thisN'
p7306
I63
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p7307
g60
(g99
S'?\x00\x00\x00'
tRp7308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7309
I0
sg6380
g6466
sS'block_loop.thisRepN'
p7310
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7311
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p7312
Nsg70
Vn
sS'block_loop.thisTrialN'
p7313
I0
sg39
F1.4163375202915631
sg34
g753
(S"\x07\xdf\x07\t\x13'-\x01O\xf0"
tRp7314
sa(dp7315
S'trial_loop.thisTrialN'
p7316
I64
sg6371
g6742
sS'block_loop.thisIndex'
p7317
g6365
sg38
S'left'
p7318
sg59
g63
sS'trial_loop.thisN'
p7319
I64
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7320
g60
(g99
S'@\x00\x00\x00'
tRp7321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7322
I0
sg6380
g6749
sS'block_loop.thisRepN'
p7323
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7324
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7325
Nsg70
Vn
sS'block_loop.thisTrialN'
p7326
I0
sg39
F1.7499910193873802
sg34
g753
(S"\x07\xdf\x07\t\x13'3\x08\x0e\x80"
tRp7327
sa(dp7328
S'trial_loop.thisTrialN'
p7329
I65
sg6371
g6974
sS'block_loop.thisIndex'
p7330
g6365
sg38
S'right'
p7331
sg59
g63
sS'trial_loop.thisN'
p7332
I65
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p7333
g60
(g99
S'A\x00\x00\x00'
tRp7334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7335
I0
sg6380
g6981
sS'block_loop.thisRepN'
p7336
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7337
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p7338
Nsg70
Vn
sS'block_loop.thisTrialN'
p7339
I0
sg39
F1.0164470551899285
sg34
g753
(S"\x07\xdf\x07\t\x13':\x04\xca\x90"
tRp7340
sa(dp7341
S'trial_loop.thisTrialN'
p7342
I66
sg6371
g6552
sS'block_loop.thisIndex'
p7343
g6365
sg38
S'left'
p7344
sg59
g63
sS'trial_loop.thisN'
p7345
I66
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p7346
g60
(g99
S'B\x00\x00\x00'
tRp7347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7348
I0
sg6380
g6560
sS'block_loop.thisRepN'
p7349
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7350
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p7351
Nsg70
Vn
sS'block_loop.thisTrialN'
p7352
I0
sg39
F3.3499061170150526
sg34
g753
(S'\x07\xdf\x07\t\x13(\x04\x05\x99\x98'
tRp7353
sa(dp7354
S'trial_loop.thisTrialN'
p7355
I67
sg6371
g6409
sS'block_loop.thisIndex'
p7356
g6365
sg38
S'right'
p7357
sg59
g63
sS'trial_loop.thisN'
p7358
I67
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7359
g60
(g99
S'C\x00\x00\x00'
tRp7360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7361
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7362
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7363
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7364
Nsg70
Vn
sS'block_loop.thisTrialN'
p7365
I0
sg39
F0.98324674888135633
sg34
g753
(S'\x07\xdf\x07\t\x13(\x0c\x0bZ@'
tRp7366
sa(dp7367
S'trial_loop.thisTrialN'
p7368
I68
sg6371
g6742
sS'block_loop.thisIndex'
p7369
g6365
sg38
S'left'
p7370
sg59
g63
sS'trial_loop.thisN'
p7371
I68
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7372
g60
(g99
S'D\x00\x00\x00'
tRp7373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7374
I0
sg6380
g6749
sS'block_loop.thisRepN'
p7375
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7376
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7377
Nsg70
Vn
sS'block_loop.thisTrialN'
p7378
I0
sg39
F1.2499103364825714
sg34
g753
(S'\x07\xdf\x07\t\x13(\x12\x0b\xb00'
tRp7379
sa(dp7380
S'trial_loop.thisTrialN'
p7381
I69
sg6371
g7034
sS'block_loop.thisIndex'
p7382
g6365
sg38
S'left'
p7383
sg59
g63
sS'trial_loop.thisN'
p7384
I69
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7385
g60
(g99
S'E\x00\x00\x00'
tRp7386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7387
I0
sg6380
g7041
sS'block_loop.thisRepN'
p7388
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7389
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7390
Nsg70
Vn
sS'block_loop.thisTrialN'
p7391
I0
sg39
F0.73350176960229874
sg34
g753
(S'\x07\xdf\x07\t\x13(\x19\x00\xcf\x08'
tRp7392
sa(dp7393
S'trial_loop.thisTrialN'
p7394
I70
sg6371
g6443
sS'block_loop.thisIndex'
p7395
g6365
sg38
S'left'
p7396
sg59
g63
sS'trial_loop.thisN'
p7397
I70
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7398
g60
(g99
S'F\x00\x00\x00'
tRp7399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7400
I0
sg6380
g6450
sS'block_loop.thisRepN'
p7401
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7402
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7403
Nsg70
Vn
sS'block_loop.thisTrialN'
p7404
I0
sg39
F0.89958255858073244
sg34
g753
(S'\x07\xdf\x07\t\x13(\x1e\x0cX('
tRp7405
sa(dp7406
S'trial_loop.thisTrialN'
p7407
I71
sg6371
S'1-treacle_cookies.png'
p7408
sS'block_loop.thisIndex'
p7409
g6365
sg38
S'left'
p7410
sg59
g63
sS'trial_loop.thisN'
p7411
I71
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p7412
g60
(g99
S'G\x00\x00\x00'
tRp7413
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7414
I0
sg6380
S'21-nakd_banana_crunch.png'
p7415
sS'block_loop.thisRepN'
p7416
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7417
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p7418
Nsg70
Vn
sS'block_loop.thisTrialN'
p7419
I0
sg39
F0.73321724116976839
sg34
g753
(S'\x07\xdf\x07\t\x13($\x0b}h'
tRp7420
sa(dp7421
S'trial_loop.thisTrialN'
p7422
I72
sg6371
g7155
sS'block_loop.thisIndex'
p7423
g6365
sg38
S'left'
p7424
sg59
g63
sS'trial_loop.thisN'
p7425
I72
sg33
g7021
sg64
g65
sS'trial_loop.thisIndex'
p7426
g60
(g99
S'H\x00\x00\x00'
tRp7427
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7428
I0
sg6380
g7162
sS'block_loop.thisRepN'
p7429
I2
sg6383
g7021
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7430
I2
sg6385
g7028
sg55
g11
sS'block_loop.thisTrial'
p7431
Nsg70
Vn
sS'block_loop.thisTrialN'
p7432
I0
sg39
F1.2498687120823888
sg34
g753
(S'\x07\xdf\x07\t\x13(*\x07\xc4H'
tRp7433
sa(dp7434
S'trial_loop.thisTrialN'
p7435
I73
sg6371
g6663
sS'block_loop.thisIndex'
p7436
g6365
sg38
S'left'
p7437
sg59
g63
sS'trial_loop.thisN'
p7438
I73
sg33
g6674
sg64
g65
sS'trial_loop.thisIndex'
p7439
g60
(g99
S'I\x00\x00\x00'
tRp7440
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7441
I0
sg6380
g6671
sS'block_loop.thisRepN'
p7442
I2
sg6383
g6667
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7443
I2
sg6385
g6674
sg55
g11
sS'block_loop.thisTrial'
p7444
Nsg70
Vn
sS'block_loop.thisTrialN'
p7445
I0
sg39
F1.4166468523108051
sg34
g753
(S'\x07\xdf\x07\t\x13(0\x0c%`'
tRp7446
sa(dp7447
S'trial_loop.thisTrialN'
p7448
I74
sg6371
g6443
sS'block_loop.thisIndex'
p7449
g6365
sg38
S'left'
p7450
sg59
g63
sS'trial_loop.thisN'
p7451
I74
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7452
g60
(g99
S'J\x00\x00\x00'
tRp7453
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7454
I0
sg6380
g6450
sS'block_loop.thisRepN'
p7455
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7456
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7457
Nsg70
Vn
sS'block_loop.thisTrialN'
p7458
I0
sg39
F2.1003547197251464
sg34
g753
(S'\x07\xdf\x07\t\x13(7\x03\xe00'
tRp7459
sa(dp7460
S'trial_loop.thisTrialN'
p7461
I75
sg6371
g6680
sS'block_loop.thisIndex'
p7462
g6365
sg38
S'left'
p7463
sg59
g63
sS'trial_loop.thisN'
p7464
I75
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p7465
g60
(g99
S'K\x00\x00\x00'
tRp7466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7467
I0
sg6380
g6688
sS'block_loop.thisRepN'
p7468
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7469
I2
sg6385
g6691
sg55
g11
sS'block_loop.thisTrial'
p7470
Nsg70
Vn
sS'block_loop.thisTrialN'
p7471
I0
sg39
F1.0500043049833039
sg34
g753
(S'\x07\xdf\x07\t\x13)\x02\x05\xdc\x00'
tRp7472
sa(dp7473
S'trial_loop.thisTrialN'
p7474
I76
sg6371
S'45-chewy_nougat_redo.png'
p7475
sS'block_loop.thisIndex'
p7476
g6365
sg38
S'right'
p7477
sg59
g63
sS'trial_loop.thisN'
p7478
I76
sg33
g7174
sg64
g65
sS'trial_loop.thisIndex'
p7479
g60
(g99
S'L\x00\x00\x00'
tRp7480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7481
I0
sg6380
S'41-peanuts_redo.png'
p7482
sS'block_loop.thisRepN'
p7483
I2
sg6383
g7174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7484
I2
sg6385
g7181
sg55
g11
sS'block_loop.thisTrial'
p7485
Nsg70
Vn
sS'block_loop.thisTrialN'
p7486
I0
sg39
F0.88334334029786987
sg34
g753
(S'\x07\xdf\x07\t\x13)\x08\x07$ '
tRp7487
sa(dp7488
S'trial_loop.thisTrialN'
p7489
I77
sg6371
g6817
sS'block_loop.thisIndex'
p7490
g6365
sg38
S'right'
p7491
sg59
g63
sS'trial_loop.thisN'
p7492
I77
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p7493
g60
(g99
S'M\x00\x00\x00'
tRp7494
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7495
I0
sg6380
g6825
sS'block_loop.thisRepN'
p7496
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7497
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p7498
Nsg70
Vn
sS'block_loop.thisTrialN'
p7499
I0
sg39
F0.93329290634574136
sg34
g753
(S'\x07\xdf\x07\t\x13)\x0e\x05\xcc`'
tRp7500
sa(dp7501
S'trial_loop.thisTrialN'
p7502
I78
sg6371
g6789
sS'block_loop.thisIndex'
p7503
g6365
sg38
S'left'
p7504
sg59
g63
sS'trial_loop.thisN'
p7505
I78
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p7506
g60
(g99
S'N\x00\x00\x00'
tRp7507
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7508
I0
sg6380
g6796
sS'block_loop.thisRepN'
p7509
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7510
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p7511
Nsg70
Vn
sS'block_loop.thisTrialN'
p7512
I0
sg39
F0.89982175633485895
sg34
g753
(S'\x07\xdf\x07\t\x13)\x14\x05j\xb8'
tRp7513
sa(dp7514
S'trial_loop.thisTrialN'
p7515
I79
sg6371
g6873
sS'block_loop.thisIndex'
p7516
g6365
sg38
S'left'
p7517
sg59
g63
sS'trial_loop.thisN'
p7518
I79
sg33
g6877
sg64
g65
sS'trial_loop.thisIndex'
p7519
g60
(g99
S'O\x00\x00\x00'
tRp7520
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7521
I0
sg6380
g6881
sS'block_loop.thisRepN'
p7522
I2
sg6383
g6877
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7523
I2
sg6385
g6884
sg55
g11
sS'block_loop.thisTrial'
p7524
Nsg70
Vn
sS'block_loop.thisTrialN'
p7525
I0
sg39
F1.6169987780667725
sg34
g753
(S'\x07\xdf\x07\t\x13)\x1a\x04Qx'
tRp7526
sa(dp7527
S'trial_loop.thisTrialN'
p7528
I80
sg6371
g6509
sS'block_loop.thisIndex'
p7529
g6365
sg38
S'right'
p7530
sg59
g63
sS'trial_loop.thisN'
p7531
I80
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p7532
g60
(g99
S'P\x00\x00\x00'
tRp7533
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7534
I0
sg6380
g6517
sS'block_loop.thisRepN'
p7535
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7536
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p7537
Nsg70
Vn
sS'block_loop.thisTrialN'
p7538
I0
sg39
F0.89999196021381067
sg34
g753
(S'\x07\xdf\x07\t\x13) \x0e,\xe8'
tRp7539
sa(dp7540
S'trial_loop.thisTrialN'
p7541
I81
sg6371
g6409
sS'block_loop.thisIndex'
p7542
g6365
sg38
S'right'
p7543
sg59
g63
sS'trial_loop.thisN'
p7544
I81
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7545
g60
(g99
S'Q\x00\x00\x00'
tRp7546
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7547
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7548
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7549
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7550
Nsg70
Vn
sS'block_loop.thisTrialN'
p7551
I0
sg39
F1.2165717573298025
sg34
g753
(S'\x07\xdf\x07\t\x13)&\r\x13\xa8'
tRp7552
sa(dp7553
S'trial_loop.thisTrialN'
p7554
I82
sg6371
g7170
sS'block_loop.thisIndex'
p7555
g6365
sg38
S'left'
p7556
sg59
g63
sS'trial_loop.thisN'
p7557
I82
sg33
g7181
sg64
g65
sS'trial_loop.thisIndex'
p7558
g60
(g99
S'R\x00\x00\x00'
tRp7559
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7560
I0
sg6380
g7178
sS'block_loop.thisRepN'
p7561
I2
sg6383
g7174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7562
I2
sg6385
g7181
sg55
g11
sS'block_loop.thisTrial'
p7563
Nsg70
Vn
sS'block_loop.thisTrialN'
p7564
I0
sg39
F1.6833073038287694
sg34
g753
(S'\x07\xdf\x07\t\x13)-\x01\xb5\x80'
tRp7565
sa(dp7566
S'trial_loop.thisTrialN'
p7567
I83
sg6371
g6584
sS'block_loop.thisIndex'
p7568
g6365
sg38
S'right'
p7569
sg59
g63
sS'trial_loop.thisN'
p7570
I83
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p7571
g60
(g99
S'S\x00\x00\x00'
tRp7572
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7573
I0
sg6380
g6592
sS'block_loop.thisRepN'
p7574
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7575
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p7576
Nsg70
Vn
sS'block_loop.thisTrialN'
p7577
I0
sg39
F1.0166426328505622
sg34
g753
(S'\x07\xdf\x07\t\x13)3\x0c\xc1\xa0'
tRp7578
sa(dp7579
S'trial_loop.thisTrialN'
p7580
I84
sg6371
g6725
sS'block_loop.thisIndex'
p7581
g6365
sg38
S'right'
p7582
sg59
g63
sS'trial_loop.thisN'
p7583
I84
sg33
g6736
sg64
g65
sS'trial_loop.thisIndex'
p7584
g60
(g99
S'T\x00\x00\x00'
tRp7585
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7586
I0
sg6380
g6733
sS'block_loop.thisRepN'
p7587
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7588
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p7589
Nsg70
Vn
sS'block_loop.thisTrialN'
p7590
I0
sg39
F2.1832177828619024
sg34
g753
(S'\x07\xdf\x07\t\x13)9\rR('
tRp7591
sa(dp7592
S'trial_loop.thisTrialN'
p7593
I85
sg6371
g6631
sS'block_loop.thisIndex'
p7594
g6365
sg38
S'left'
p7595
sg59
g63
sS'trial_loop.thisN'
p7596
I85
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p7597
g60
(g99
S'U\x00\x00\x00'
tRp7598
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7599
I0
sg6380
g6638
sS'block_loop.thisRepN'
p7600
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7601
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p7602
Nsg70
Vn
sS'block_loop.thisTrialN'
p7603
I0
sg39
F0.89991868986544432
sg34
g753
(S'\x07\xdf\x07\t\x13*\x05\x01w\x00'
tRp7604
sa(dp7605
S'trial_loop.thisTrialN'
p7606
I86
sg6371
g6492
sS'block_loop.thisIndex'
p7607
g6365
sg38
S'right'
p7608
sg59
g63
sS'trial_loop.thisN'
p7609
I86
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p7610
g60
(g99
S'V\x00\x00\x00'
tRp7611
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7612
I0
sg6380
g6500
sS'block_loop.thisRepN'
p7613
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7614
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p7615
Nsg70
Vn
sS'block_loop.thisTrialN'
p7616
I0
sg39
F1.8498796028507059
sg34
g753
(S'\x07\xdf\x07\t\x13*\x0b\x00]\xc0'
tRp7617
sa(dp7618
S'trial_loop.thisTrialN'
p7619
I87
sg6371
g6789
sS'block_loop.thisIndex'
p7620
g6365
sg38
S'left'
p7621
sg59
g63
sS'trial_loop.thisN'
p7622
I87
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p7623
g60
(g99
S'W\x00\x00\x00'
tRp7624
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7625
I0
sg6380
g6796
sS'block_loop.thisRepN'
p7626
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7627
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p7628
Nsg70
Vn
sS'block_loop.thisTrialN'
p7629
I0
sg39
F0.68322376992728096
sg34
g753
(S'\x07\xdf\x07\t\x13*\x11\x0e\x05\xd8'
tRp7630
sa(dp7631
S'trial_loop.thisTrialN'
p7632
I88
sg6371
g7170
sS'block_loop.thisIndex'
p7633
g6365
sg38
S'left'
p7634
sg59
g63
sS'trial_loop.thisN'
p7635
I88
sg33
g7181
sg64
g65
sS'trial_loop.thisIndex'
p7636
g60
(g99
S'X\x00\x00\x00'
tRp7637
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7638
I0
sg6380
g7178
sS'block_loop.thisRepN'
p7639
I2
sg6383
g7174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7640
I2
sg6385
g7181
sg55
g11
sS'block_loop.thisTrial'
p7641
Nsg70
Vn
sS'block_loop.thisTrialN'
p7642
I0
sg39
F1.5998863026616164
sg34
g753
(S'\x07\xdf\x07\t\x13*\x17\t\x99\x08'
tRp7643
sa(dp7644
S'trial_loop.thisTrialN'
p7645
I89
sg6371
g6774
sS'block_loop.thisIndex'
p7646
g6365
sg38
S'right'
p7647
sg59
g63
sS'trial_loop.thisN'
p7648
I89
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p7649
g60
(g99
S'Y\x00\x00\x00'
tRp7650
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7651
I0
sg6380
g6781
sS'block_loop.thisRepN'
p7652
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7653
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p7654
Nsg70
Vn
sS'block_loop.thisTrialN'
p7655
I0
sg39
F1.2999810694527696
sg34
g753
(S'\x07\xdf\x07\t\x13*\x1e\x03\xf3\xb8'
tRp7656
sa(dp7657
S'trial_loop.thisTrialN'
p7658
I90
sg6371
S'2-steamed_puddings.png'
p7659
sS'block_loop.thisIndex'
p7660
g6365
sg38
S'left'
p7661
sg59
g63
sS'trial_loop.thisN'
p7662
I90
sg33
g6650
sg64
g65
sS'trial_loop.thisIndex'
p7663
g60
(g99
S'Z\x00\x00\x00'
tRp7664
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7665
I0
sg6380
S'20-fruit_pastilles.png'
p7666
sS'block_loop.thisRepN'
p7667
I2
sg6383
g6650
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7668
I2
sg6385
g6657
sg55
g11
sS'block_loop.thisTrial'
p7669
Nsg70
Vn
sS'block_loop.thisTrialN'
p7670
I0
sg39
F0.76658946195675526
sg34
g753
(S'\x07\xdf\x07\t\x13*$\t\x08\x80'
tRp7671
sa(dp7672
S'trial_loop.thisTrialN'
p7673
I91
sg6371
g6372
sS'block_loop.thisIndex'
p7674
g6365
sg38
S'right'
p7675
sg59
g63
sS'trial_loop.thisN'
p7676
I91
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p7677
g60
(g99
S'[\x00\x00\x00'
tRp7678
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7679
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7680
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7681
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7682
Nsg70
Vn
sS'block_loop.thisTrialN'
p7683
I0
sg39
F0.94995407060923753
sg34
g753
(S'\x07\xdf\x07\t\x13**\x06\x06\xf8'
tRp7684
sa(dp7685
S'trial_loop.thisTrialN'
p7686
I92
sg6371
g6426
sS'block_loop.thisIndex'
p7687
g6365
sg38
S'left'
p7688
sg59
g63
sS'trial_loop.thisN'
p7689
I92
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7690
g60
(g99
S'\\\x00\x00\x00'
tRp7691
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7692
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7693
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7694
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7695
Nsg70
Vn
sS'block_loop.thisTrialN'
p7696
I0
sg39
F3.1665742947079707
sg34
g753
(S'\x07\xdf\x07\t\x13*0\x05\xe3\xd0'
tRp7697
sa(dp7698
S'trial_loop.thisTrialN'
p7699
I93
sg6371
g6475
sS'block_loop.thisIndex'
p7700
g6365
sg38
S'right'
p7701
sg59
g63
sS'trial_loop.thisN'
p7702
I93
sg33
g6486
sg64
g65
sS'trial_loop.thisIndex'
p7703
g60
(g99
S']\x00\x00\x00'
tRp7704
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7705
I0
sg6380
g6483
sS'block_loop.thisRepN'
p7706
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7707
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p7708
Nsg70
Vn
sS'block_loop.thisTrialN'
p7709
I0
sg39
F1.6166586553954403
sg34
g753
(S'\x07\xdf\x07\t\x13*8\x08\xca\x00'
tRp7710
sa(dp7711
S'trial_loop.thisTrialN'
p7712
I94
sg6371
g6742
sS'block_loop.thisIndex'
p7713
g6365
sg38
S'left'
p7714
sg59
g63
sS'trial_loop.thisN'
p7715
I94
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7716
g60
(g99
S'^\x00\x00\x00'
tRp7717
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7718
I0
sg6380
g6749
sS'block_loop.thisRepN'
p7719
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7720
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7721
Nsg70
Vn
sS'block_loop.thisTrialN'
p7722
I0
sg39
F2.5499221965801553
sg34
g753
(S'\x07\xdf\x07\t\x13+\x03\x03\x9d\xc8'
tRp7723
sa(dp7724
S'trial_loop.thisTrialN'
p7725
I95
sg6371
g7408
sS'block_loop.thisIndex'
p7726
g6365
sg38
S'left'
p7727
sg59
g63
sS'trial_loop.thisN'
p7728
I95
sg33
g6828
sg64
g65
sS'trial_loop.thisIndex'
p7729
g60
(g99
S'_\x00\x00\x00'
tRp7730
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7731
I0
sg6380
g7415
sS'block_loop.thisRepN'
p7732
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7733
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p7734
Nsg70
Vn
sS'block_loop.thisTrialN'
p7735
I0
sg39
F2.3498753263702383
sg34
g753
(S'\x07\xdf\x07\t\x13+\n\x0c\x7f8'
tRp7736
sa(dp7737
S'trial_loop.thisTrialN'
p7738
I96
sg6371
g7659
sS'block_loop.thisIndex'
p7739
g6365
sg38
S'left'
p7740
sg59
g63
sS'trial_loop.thisN'
p7741
I96
sg33
g6650
sg64
g65
sS'trial_loop.thisIndex'
p7742
g60
(g99
S'`\x00\x00\x00'
tRp7743
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7744
I0
sg6380
g7666
sS'block_loop.thisRepN'
p7745
I2
sg6383
g6650
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7746
I2
sg6385
g6657
sg55
g11
sS'block_loop.thisTrial'
p7747
Nsg70
Vn
sS'block_loop.thisTrialN'
p7748
I0
sg39
F0.99991218961804407
sg34
g753
(S'\x07\xdf\x07\t\x13+\x12\x03\x05p'
tRp7749
sa(dp7750
S'trial_loop.thisTrialN'
p7751
I97
sg6371
g6631
sS'block_loop.thisIndex'
p7752
g6365
sg38
S'left'
p7753
sg59
g63
sS'trial_loop.thisN'
p7754
I97
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p7755
g60
(g99
S'a\x00\x00\x00'
tRp7756
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7757
I0
sg6380
g6638
sS'block_loop.thisRepN'
p7758
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7759
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p7760
Nsg70
Vn
sS'block_loop.thisTrialN'
p7761
I0
sg39
F0.78335354682349134
sg34
g753
(S'\x07\xdf\x07\t\x13+\x18\x03\x95\xf8'
tRp7762
sa(dp7763
S'trial_loop.thisTrialN'
p7764
I98
sg6371
g6918
sS'block_loop.thisIndex'
p7765
g6365
sg38
S'right'
p7766
sg59
g63
sS'trial_loop.thisN'
p7767
I98
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p7768
g60
(g99
S'b\x00\x00\x00'
tRp7769
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7770
I0
sg6380
g6925
sS'block_loop.thisRepN'
p7771
I2
sg6383
g6667
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7772
I2
sg6385
g6674
sg55
g11
sS'block_loop.thisTrial'
p7773
Nsg70
Vn
sS'block_loop.thisTrialN'
p7774
I0
sg39
F1.0832448102082708
sg34
g753
(S'\x07\xdf\x07\t\x13+\x1e\x00\xd2\xf0'
tRp7775
sa(dp7776
S'trial_loop.thisTrialN'
p7777
I99
sg6371
g6757
sS'block_loop.thisIndex'
p7778
g6365
sg38
S'right'
p7779
sg59
g63
sS'trial_loop.thisN'
p7780
I99
sg33
g6767
sg64
g65
sS'trial_loop.thisIndex'
p7781
g60
(g99
S'c\x00\x00\x00'
tRp7782
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7783
I0
sg6380
g6765
sS'block_loop.thisRepN'
p7784
I2
sg6383
g6767
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7785
I2
sg6385
g6761
sg55
g11
sS'block_loop.thisTrial'
p7786
Nsg70
Vn
sS'block_loop.thisTrialN'
p7787
I0
sg39
F1.9003218193392968
sg34
g753
(S'\x07\xdf\x07\t\x13+$\x02\x94('
tRp7788
sa(dp7789
S'trial_loop.thisTrialN'
p7790
I100
sg6371
g7062
sS'block_loop.thisIndex'
p7791
g6365
sg38
S'left'
p7792
sg59
g63
sS'trial_loop.thisN'
p7793
I100
sg33
g6486
sg64
g65
sS'trial_loop.thisIndex'
p7794
g60
(g99
S'd\x00\x00\x00'
tRp7795
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7796
I0
sg6380
g7069
sS'block_loop.thisRepN'
p7797
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7798
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p7799
Nsg70
Vn
sS'block_loop.thisTrialN'
p7800
I0
sg39
F1.9666477361170109
sg34
g753
(S'\x07\xdf\x07\t\x13++\x01s\x18'
tRp7801
sa(dp7802
S'trial_loop.thisTrialN'
p7803
I101
sg6371
g6817
sS'block_loop.thisIndex'
p7804
g6365
sg38
S'right'
p7805
sg59
g63
sS'trial_loop.thisN'
p7806
I101
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p7807
g60
(g99
S'e\x00\x00\x00'
tRp7808
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7809
I0
sg6380
g6825
sS'block_loop.thisRepN'
p7810
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7811
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p7812
Nsg70
Vn
sS'block_loop.thisTrialN'
p7813
I0
sg39
F0.69993482645077165
sg34
g753
(S'\x07\xdf\x07\t\x13+2\x01\x86\xa0'
tRp7814
sa(dp7815
S'trial_loop.thisTrialN'
p7816
I102
sg6371
g6663
sS'block_loop.thisIndex'
p7817
g6365
sg38
S'left'
p7818
sg59
g63
sS'trial_loop.thisN'
p7819
I102
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p7820
g60
(g99
S'f\x00\x00\x00'
tRp7821
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7822
I0
sg6380
g6671
sS'block_loop.thisRepN'
p7823
I2
sg6383
g6667
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7824
I2
sg6385
g6674
sg55
g11
sS'block_loop.thisTrial'
p7825
Nsg70
Vn
sS'block_loop.thisTrialN'
p7826
I0
sg39
F1.5165522565803258
sg34
g753
(S'\x07\xdf\x07\t\x13+7\x0c\x96\xa8'
tRp7827
sa(dp7828
S'trial_loop.thisTrialN'
p7829
I103
sg6371
g6392
sS'block_loop.thisIndex'
p7830
g6365
sg38
S'right'
p7831
sg59
g63
sS'trial_loop.thisN'
p7832
I103
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7833
g60
(g99
S'g\x00\x00\x00'
tRp7834
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7835
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7836
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7837
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7838
Nsg70
Vn
sS'block_loop.thisTrialN'
p7839
I0
sg39
F1.2666270949775935
sg34
g753
(S'\x07\xdf\x07\t\x13,\x02\x05\xc0\xa8'
tRp7840
sa(dp7841
S'trial_loop.thisTrialN'
p7842
I104
sg6371
g6584
sS'block_loop.thisIndex'
p7843
g6365
sg38
S'right'
p7844
sg59
g63
sS'trial_loop.thisN'
p7845
I104
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p7846
g60
(g99
S'h\x00\x00\x00'
tRp7847
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7848
I0
sg6380
g6592
sS'block_loop.thisRepN'
p7849
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7850
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p7851
Nsg70
Vn
sS'block_loop.thisTrialN'
p7852
I0
sg39
F1.5833713940010057
sg34
g753
(S'\x07\xdf\x07\t\x13,\x08\n\\X'
tRp7853
sa(dp7854
S'trial_loop.thisTrialN'
p7855
I105
sg6371
g6601
sS'block_loop.thisIndex'
p7856
g6365
sg38
S'left'
p7857
sg59
g63
sS'trial_loop.thisN'
p7858
I105
sg33
g6605
sg64
g65
sS'trial_loop.thisIndex'
p7859
g60
(g99
S'i\x00\x00\x00'
tRp7860
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7861
I0
sg6380
g6609
sS'block_loop.thisRepN'
p7862
I2
sg6383
g6605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7863
I2
sg6385
g6612
sg55
g11
sS'block_loop.thisTrial'
p7864
Nsg70
Vn
sS'block_loop.thisTrialN'
p7865
I0
sg39
F1.4999483971405425
sg34
g753
(S'\x07\xdf\x07\t\x13,\x0f\x04|p'
tRp7866
sa(dp7867
S'trial_loop.thisTrialN'
p7868
I106
sg6371
S'50-polo.png'
p7869
sS'block_loop.thisIndex'
p7870
g6365
sg38
S'right'
p7871
sg59
g63
sS'trial_loop.thisN'
p7872
I106
sg33
g6877
sg64
g65
sS'trial_loop.thisIndex'
p7873
g60
(g99
S'j\x00\x00\x00'
tRp7874
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7875
I0
sg6380
S'48-twix.png'
p7876
sS'block_loop.thisRepN'
p7877
I2
sg6383
g6877
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7878
I2
sg6385
g6884
sg55
g11
sS'block_loop.thisTrial'
p7879
Nsg70
Vn
sS'block_loop.thisTrialN'
p7880
I0
sg39
F0.96666455693775788
sg34
g753
(S'\x07\xdf\x07\t\x13,\x15\x0c\xaa0'
tRp7881
sa(dp7882
S'trial_loop.thisTrialN'
p7883
I107
sg6371
g6789
sS'block_loop.thisIndex'
p7884
g6365
sg38
S'left'
p7885
sg59
g63
sS'trial_loop.thisN'
p7886
I107
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p7887
g60
(g99
S'k\x00\x00\x00'
tRp7888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7889
I0
sg6380
g6796
sS'block_loop.thisRepN'
p7890
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7891
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p7892
Nsg70
Vn
sS'block_loop.thisTrialN'
p7893
I0
sg39
F0.86647719011671143
sg34
g753
(S'\x07\xdf\x07\t\x13,\x1b\x0c\xc1\xa0'
tRp7894
sa(dp7895
S'trial_loop.thisTrialN'
p7896
I108
sg6371
g7408
sS'block_loop.thisIndex'
p7897
g6365
sg38
S'left'
p7898
sg59
g63
sS'trial_loop.thisN'
p7899
I108
sg33
g6828
sg64
g65
sS'trial_loop.thisIndex'
p7900
g60
(g99
S'l\x00\x00\x00'
tRp7901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7902
I0
sg6380
g7415
sS'block_loop.thisRepN'
p7903
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7904
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p7905
Nsg70
Vn
sS'block_loop.thisTrialN'
p7906
I0
sg39
F0.89988048665691167
sg34
g753
(S'\x07\xdf\x07\t\x13,!\x0b/H'
tRp7907
sa(dp7908
S'trial_loop.thisTrialN'
p7909
I109
sg6371
g7062
sS'block_loop.thisIndex'
p7910
g6365
sg38
S'left'
p7911
sg59
g63
sS'trial_loop.thisN'
p7912
I109
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p7913
g60
(g99
S'm\x00\x00\x00'
tRp7914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7915
I0
sg6380
g7069
sS'block_loop.thisRepN'
p7916
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7917
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p7918
Nsg70
Vn
sS'block_loop.thisTrialN'
p7919
I0
sg39
F1.1001782436651411
sg34
g753
(S"\x07\xdf\x07\t\x13,'\n\x16\x08"
tRp7920
sa(dp7921
S'trial_loop.thisTrialN'
p7922
I110
sg6371
g7659
sS'block_loop.thisIndex'
p7923
g6365
sg38
S'left'
p7924
sg59
g63
sS'trial_loop.thisN'
p7925
I110
sg33
g6657
sg64
g65
sS'trial_loop.thisIndex'
p7926
g60
(g99
S'n\x00\x00\x00'
tRp7927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7928
I0
sg6380
g7666
sS'block_loop.thisRepN'
p7929
I2
sg6383
g6650
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7930
I2
sg6385
g6657
sg55
g11
sS'block_loop.thisTrial'
p7931
Nsg70
Vn
sS'block_loop.thisTrialN'
p7932
I0
sg39
F1.416646567209682
sg34
g753
(S'\x07\xdf\x07\t\x13,-\x0c\x15\xc0'
tRp7933
sa(dp7934
S'trial_loop.thisTrialN'
p7935
I111
sg6371
g7034
sS'block_loop.thisIndex'
p7936
g6365
sg38
S'left'
p7937
sg59
g63
sS'trial_loop.thisN'
p7938
I111
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7939
g60
(g99
S'o\x00\x00\x00'
tRp7940
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7941
I0
sg6380
g7041
sS'block_loop.thisRepN'
p7942
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7943
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7944
Nsg70
Vn
sS'block_loop.thisTrialN'
p7945
I0
sg39
F1.2665501183510059
sg34
g753
(S'\x07\xdf\x07\t\x13,4\x03\xd0\x90'
tRp7946
sa(dp7947
S'trial_loop.thisTrialN'
p7948
I112
sg6371
g6509
sS'block_loop.thisIndex'
p7949
g6365
sg38
S'right'
p7950
sg59
g63
sS'trial_loop.thisN'
p7951
I112
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p7952
g60
(g99
S'p\x00\x00\x00'
tRp7953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7954
I0
sg6380
g6517
sS'block_loop.thisRepN'
p7955
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7956
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p7957
Nsg70
Vn
sS'block_loop.thisTrialN'
p7958
I0
sg39
F1.3333042532685795
sg34
g753
(S'\x07\xdf\x07\t\x13,:\x08l@'
tRp7959
sa(dp7960
S'trial_loop.thisTrialN'
p7961
I113
sg6371
g6774
sS'block_loop.thisIndex'
p7962
g6365
sg38
S'right'
p7963
sg59
g63
sS'trial_loop.thisN'
p7964
I113
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p7965
g60
(g99
S'q\x00\x00\x00'
tRp7966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7967
I0
sg6380
g6781
sS'block_loop.thisRepN'
p7968
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7969
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p7970
Nsg70
Vn
sS'block_loop.thisTrialN'
p7971
I0
sg39
F1.8999437785532791
sg34
g753
(S'\x07\xdf\x07\t\x13-\x04\r\xfe\x08'
tRp7972
sa(dp7973
S'trial_loop.thisTrialN'
p7974
I114
sg6371
g7659
sS'block_loop.thisIndex'
p7975
g6365
sg38
S'left'
p7976
sg59
g63
sS'trial_loop.thisN'
p7977
I114
sg33
g6650
sg64
g65
sS'trial_loop.thisIndex'
p7978
g60
(g99
S'r\x00\x00\x00'
tRp7979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7980
I0
sg6380
g7666
sS'block_loop.thisRepN'
p7981
I2
sg6383
g6650
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7982
I2
sg6385
g6657
sg55
g11
sS'block_loop.thisTrial'
p7983
Nsg70
Vn
sS'block_loop.thisTrialN'
p7984
I0
sg39
F2.1670427117642248
sg34
g753
(S'\x07\xdf\x07\t\x13-\x0b\x0c\xe0\xe0'
tRp7985
sa(dp7986
S'trial_loop.thisTrialN'
p7987
I115
sg6371
g6757
sS'block_loop.thisIndex'
p7988
g6365
sg38
S'right'
p7989
sg59
g63
sS'trial_loop.thisN'
p7990
I115
sg33
g6767
sg64
g65
sS'trial_loop.thisIndex'
p7991
g60
(g99
S's\x00\x00\x00'
tRp7992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7993
I0
sg6380
g6765
sS'block_loop.thisRepN'
p7994
I2
sg6383
g6767
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7995
I2
sg6385
g6761
sg55
g11
sS'block_loop.thisTrial'
p7996
Nsg70
Vn
sS'block_loop.thisTrialN'
p7997
I0
sg39
F2.133307275318657
sg34
g753
(S'\x07\xdf\x07\t\x13-\x13\x00\xc78'
tRp7998
sa(dp7999
S'trial_loop.thisTrialN'
p8000
I116
sg6371
g6903
sS'block_loop.thisIndex'
p8001
g6365
sg38
S'left'
p8002
sg59
g63
sS'trial_loop.thisN'
p8003
I116
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p8004
g60
(g99
S't\x00\x00\x00'
tRp8005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8006
I0
sg6380
g6910
sS'block_loop.thisRepN'
p8007
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8008
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p8009
Nsg70
Vn
sS'block_loop.thisTrialN'
p8010
I0
sg39
F2.0332975249475567
sg34
g753
(S'\x07\xdf\x07\t\x13-\x1a\x0388'
tRp8011
sa(dp8012
S'trial_loop.thisTrialN'
p8013
I117
sg6371
g6631
sS'block_loop.thisIndex'
p8014
g6365
sg38
S'left'
p8015
sg59
g63
sS'trial_loop.thisN'
p8016
I117
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p8017
g60
(g99
S'u\x00\x00\x00'
tRp8018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8019
I0
sg6380
g6638
sS'block_loop.thisRepN'
p8020
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8021
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p8022
Nsg70
Vn
sS'block_loop.thisTrialN'
p8023
I0
sg39
F1.0665773737782729
sg34
g753
(S'\x07\xdf\x07\t\x13-!\x04=\xf0'
tRp8024
sa(dp8025
S'trial_loop.thisTrialN'
p8026
I118
sg6371
g7155
sS'block_loop.thisIndex'
p8027
g6365
sg38
S'left'
p8028
sg59
g63
sS'trial_loop.thisN'
p8029
I118
sg33
g7021
sg64
g65
sS'trial_loop.thisIndex'
p8030
g60
(g99
S'v\x00\x00\x00'
tRp8031
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8032
I0
sg6380
g7162
sS'block_loop.thisRepN'
p8033
I2
sg6383
g7021
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8034
I2
sg6385
g7028
sg55
g11
sS'block_loop.thisTrial'
p8035
Nsg70
Vn
sS'block_loop.thisTrialN'
p8036
I0
sg39
F1.2665683646555408
sg34
g753
(S"\x07\xdf\x07\t\x13-'\x05\xc4\x90"
tRp8037
sa(dp8038
S'trial_loop.thisTrialN'
p8039
I119
sg6371
g6757
sS'block_loop.thisIndex'
p8040
g6365
sg38
S'right'
p8041
sg59
g63
sS'trial_loop.thisN'
p8042
I119
sg33
g6767
sg64
g65
sS'trial_loop.thisIndex'
p8043
g60
(g99
S'w\x00\x00\x00'
tRp8044
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8045
I0
sg6380
g6765
sS'block_loop.thisRepN'
p8046
I2
sg6383
g6767
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8047
I2
sg6385
g6761
sg55
g11
sS'block_loop.thisTrial'
p8048
Nsg70
Vn
sS'block_loop.thisTrialN'
p8049
I0
sg39
F2.1670304525250685
sg34
g753
(S'\x07\xdf\x07\t\x13--\n`@'
tRp8050
sa(dp8051
S'trial_loop.thisTrialN'
p8052
I120
sg6371
g6817
sS'block_loop.thisIndex'
p8053
g6365
sg38
S'right'
p8054
sg59
g63
sS'trial_loop.thisN'
p8055
I120
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p8056
g60
(g99
S'x\x00\x00\x00'
tRp8057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8058
I0
sg6380
g6825
sS'block_loop.thisRepN'
p8059
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8060
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p8061
Nsg70
Vn
sS'block_loop.thisTrialN'
p8062
I0
sg39
F1.1666780706073041
sg34
g753
(S'\x07\xdf\x07\t\x13-4\rN@'
tRp8063
sa(dp8064
S'trial_loop.thisTrialN'
p8065
I121
sg6371
g7869
sS'block_loop.thisIndex'
p8066
g6365
sg38
S'right'
p8067
sg59
g63
sS'trial_loop.thisN'
p8068
I121
sg33
g6877
sg64
g65
sS'trial_loop.thisIndex'
p8069
g60
(g99
S'y\x00\x00\x00'
tRp8070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8071
I0
sg6380
g7876
sS'block_loop.thisRepN'
p8072
I2
sg6383
g6877
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8073
I2
sg6385
g6884
sg55
g11
sS'block_loop.thisTrial'
p8074
Nsg70
Vn
sS'block_loop.thisTrialN'
p8075
I0
sg39
F2.2666205377026927
sg34
g753
(S'\x07\xdf\x07\t\x13-;\x01<h'
tRp8076
sa(dp8077
S'trial_loop.thisTrialN'
p8078
I122
sg6371
g7475
sS'block_loop.thisIndex'
p8079
g6365
sg38
S'right'
p8080
sg59
g63
sS'trial_loop.thisN'
p8081
I122
sg33
g7174
sg64
g65
sS'trial_loop.thisIndex'
p8082
g60
(g99
S'z\x00\x00\x00'
tRp8083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8084
I0
sg6380
g7482
sS'block_loop.thisRepN'
p8085
I2
sg6383
g7174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8086
I2
sg6385
g7181
sg55
g11
sS'block_loop.thisTrial'
p8087
Nsg70
Vn
sS'block_loop.thisTrialN'
p8088
I0
sg39
F1.0832507972809253
sg34
g753
(S'\x07\xdf\x07\t\x13.\x06\x05\xd0H'
tRp8089
sa(dp8090
S'trial_loop.thisTrialN'
p8091
I123
sg6371
g6774
sS'block_loop.thisIndex'
p8092
g6365
sg38
S'right'
p8093
sg59
g63
sS'trial_loop.thisN'
p8094
I123
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p8095
g60
(g99
S'{\x00\x00\x00'
tRp8096
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8097
I0
sg6380
g6781
sS'block_loop.thisRepN'
p8098
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8099
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p8100
Nsg70
Vn
sS'block_loop.thisTrialN'
p8101
I0
sg39
F1.3998993031636928
sg34
g753
(S'\x07\xdf\x07\t\x13.\x0c\x07\x95h'
tRp8102
sa(dp8103
S'trial_loop.thisTrialN'
p8104
I124
sg6371
g6492
sS'block_loop.thisIndex'
p8105
g6365
sg38
S'right'
p8106
sg59
g63
sS'trial_loop.thisN'
p8107
I124
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p8108
g60
(g99
S'|\x00\x00\x00'
tRp8109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8110
I0
sg6380
g6500
sS'block_loop.thisRepN'
p8111
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8112
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p8113
Nsg70
Vn
sS'block_loop.thisTrialN'
p8114
I0
sg39
F1.7333284296400961
sg34
g753
(S'\x07\xdf\x07\t\x13.\x12\x0e\x19`'
tRp8115
sa(dp8116
S'trial_loop.thisTrialN'
p8117
I125
sg6371
g6569
sS'block_loop.thisIndex'
p8118
g6365
sg38
S'right'
p8119
sg59
g63
sS'trial_loop.thisN'
p8120
I125
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p8121
g60
(g99
S'}\x00\x00\x00'
tRp8122
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8123
I0
sg6380
g6576
sS'block_loop.thisRepN'
p8124
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8125
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8126
Nsg70
Vn
sS'block_loop.thisTrialN'
p8127
I0
sg39
F2.1499259598858771
sg34
g753
(S'\x07\xdf\x07\t\x13.\x19\n\x96\xf0'
tRp8128
sa(dp8129
S'trial_loop.thisTrialN'
p8130
I126
sg6371
g6458
sS'block_loop.thisIndex'
p8131
g6365
sg38
S'left'
p8132
sg59
g63
sS'trial_loop.thisN'
p8133
I126
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p8134
g60
(g99
S'~\x00\x00\x00'
tRp8135
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8136
I0
sg6380
g6466
sS'block_loop.thisRepN'
p8137
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8138
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p8139
Nsg70
Vn
sS'block_loop.thisTrialN'
p8140
I0
sg39
F2.7330076936705154
sg34
g753
(S'\x07\xdf\x07\t\x13. \rFp'
tRp8141
sa(dp8142
S'trial_loop.thisTrialN'
p8143
I127
sg6371
g6680
sS'block_loop.thisIndex'
p8144
g6365
sg38
S'left'
p8145
sg59
g63
sS'trial_loop.thisN'
p8146
I127
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p8147
g60
(g99
S'\x7f\x00\x00\x00'
tRp8148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8149
I0
sg6380
g6688
sS'block_loop.thisRepN'
p8150
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8151
I2
sg6385
g6691
sg55
g11
sS'block_loop.thisTrial'
p8152
Nsg70
Vn
sS'block_loop.thisTrialN'
p8153
I0
sg39
F1.0832798773408285
sg34
g753
(S'\x07\xdf\x07\t\x13.(\t\xc0\x18'
tRp8154
sa(dp8155
S'trial_loop.thisTrialN'
p8156
I128
sg6371
g6646
sS'block_loop.thisIndex'
p8157
g6365
sg38
S'right'
p8158
sg59
g63
sS'trial_loop.thisN'
p8159
I128
sg33
g6650
sg64
g65
sS'trial_loop.thisIndex'
p8160
g60
(g99
S'\x80\x00\x00\x00'
tRp8161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8162
I0
sg6380
g6654
sS'block_loop.thisRepN'
p8163
I2
sg6383
g6650
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8164
I2
sg6385
g6657
sg55
g11
sS'block_loop.thisTrial'
p8165
Nsg70
Vn
sS'block_loop.thisTrialN'
p8166
I0
sg39
F1.3665439031901769
sg34
g753
(S'\x07\xdf\x07\t\x13..\x0b\x81P'
tRp8167
sa(dp8168
S'trial_loop.thisTrialN'
p8169
I129
sg6371
g6601
sS'block_loop.thisIndex'
p8170
g6365
sg38
S'left'
p8171
sg59
g63
sS'trial_loop.thisN'
p8172
I129
sg33
g6605
sg64
g65
sS'trial_loop.thisIndex'
p8173
g60
(g99
S'\x81\x00\x00\x00'
tRp8174
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8175
I0
sg6380
g6609
sS'block_loop.thisRepN'
p8176
I2
sg6383
g6605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8177
I2
sg6385
g6612
sg55
g11
sS'block_loop.thisTrial'
p8178
Nsg70
Vn
sS'block_loop.thisTrialN'
p8179
I0
sg39
F1.216668975961511
sg34
g753
(S'\x07\xdf\x07\t\x13.5\x02\x88p'
tRp8180
sa(dp8181
S'trial_loop.thisTrialN'
p8182
I130
sg6371
g6663
sS'block_loop.thisIndex'
p8183
g6365
sg38
S'left'
p8184
sg59
g63
sS'trial_loop.thisN'
p8185
I130
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p8186
g60
(g99
S'\x82\x00\x00\x00'
tRp8187
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8188
I0
sg6380
g6671
sS'block_loop.thisRepN'
p8189
I2
sg6383
g6667
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8190
I2
sg6385
g6674
sg55
g11
sS'block_loop.thisTrial'
p8191
Nsg70
Vn
sS'block_loop.thisTrialN'
p8192
I0
sg39
F1.2832822721684352
sg34
g753
(S'\x07\xdf\x07\t\x13.;\x061\xf0'
tRp8193
sa(dp8194
S'trial_loop.thisTrialN'
p8195
I131
sg6371
g6569
sS'block_loop.thisIndex'
p8196
g6365
sg38
S'right'
p8197
sg59
g63
sS'trial_loop.thisN'
p8198
I131
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8199
g60
(g99
S'\x83\x00\x00\x00'
tRp8200
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8201
I0
sg6380
g6576
sS'block_loop.thisRepN'
p8202
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8203
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8204
Nsg70
Vn
sS'block_loop.thisTrialN'
p8205
I0
sg39
F2.2165609235817101
sg34
g753
(S'\x07\xdf\x07\t\x13/\x05\x0b\x0c '
tRp8206
sa(dp8207
S'trial_loop.thisTrialN'
p8208
I132
sg6371
g7869
sS'block_loop.thisIndex'
p8209
g6365
sg38
S'right'
p8210
sg59
g63
sS'trial_loop.thisN'
p8211
I132
sg33
g6877
sg64
g65
sS'trial_loop.thisIndex'
p8212
g60
(g99
S'\x84\x00\x00\x00'
tRp8213
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8214
I0
sg6380
g7876
sS'block_loop.thisRepN'
p8215
I2
sg6383
g6877
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8216
I2
sg6385
g6884
sg55
g11
sS'block_loop.thisTrial'
p8217
Nsg70
Vn
sS'block_loop.thisTrialN'
p8218
I0
sg39
F1.6999507919754251
sg34
g753
(S'\x07\xdf\x07\t\x13/\x0c\x0e\xecP'
tRp8219
sa(dp8220
S'trial_loop.thisTrialN'
p8221
I133
sg6371
g7017
sS'block_loop.thisIndex'
p8222
g6365
sg38
S'right'
p8223
sg59
g63
sS'trial_loop.thisN'
p8224
I133
sg33
g7021
sg64
g65
sS'trial_loop.thisIndex'
p8225
g60
(g99
S'\x85\x00\x00\x00'
tRp8226
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8227
I0
sg6380
g7025
sS'block_loop.thisRepN'
p8228
I2
sg6383
g7021
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8229
I2
sg6385
g7028
sg55
g11
sS'block_loop.thisTrial'
p8230
Nsg70
Vn
sS'block_loop.thisTrialN'
p8231
I0
sg39
F2.1999502217804547
sg34
g753
(S'\x07\xdf\x07\t\x13/\x13\n\xf0\xc8'
tRp8232
sa(dp8233
S'trial_loop.thisTrialN'
p8234
I134
sg6371
g6492
sS'block_loop.thisIndex'
p8235
g6365
sg38
S'right'
p8236
sg59
g63
sS'trial_loop.thisN'
p8237
I134
sg33
g6503
sg64
g65
sS'trial_loop.thisIndex'
p8238
g60
(g99
S'\x86\x00\x00\x00'
tRp8239
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8240
I0
sg6380
g6500
sS'block_loop.thisRepN'
p8241
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8242
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p8243
Nsg70
Vn
sS'block_loop.thisTrialN'
p8244
I0
sg39
F0.78369908637250774
sg34
g753
(S'\x07\xdf\x07\t\x13/\x1a\x0eW\xe0'
tRp8245
sa(dp8246
S'trial_loop.thisTrialN'
p8247
I135
sg6371
g7659
sS'block_loop.thisIndex'
p8248
g6365
sg38
S'left'
p8249
sg59
g63
sS'trial_loop.thisN'
p8250
I135
sg33
g6650
sg64
g65
sS'trial_loop.thisIndex'
p8251
g60
(g99
S'\x87\x00\x00\x00'
tRp8252
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8253
I0
sg6380
g7666
sS'block_loop.thisRepN'
p8254
I2
sg6383
g6650
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8255
I2
sg6385
g6657
sg55
g11
sS'block_loop.thisTrial'
p8256
Nsg70
Vn
sS'block_loop.thisTrialN'
p8257
I0
sg39
F0.71660739465733059
sg34
g753
(S'\x07\xdf\x07\t\x13/ \x0b\x94\xd8'
tRp8258
sa(dp8259
S'trial_loop.thisTrialN'
p8260
I136
sg6371
g6492
sS'block_loop.thisIndex'
p8261
g6365
sg38
S'right'
p8262
sg59
g63
sS'trial_loop.thisN'
p8263
I136
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p8264
g60
(g99
S'\x88\x00\x00\x00'
tRp8265
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8266
I0
sg6380
g6500
sS'block_loop.thisRepN'
p8267
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8268
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p8269
Nsg70
Vn
sS'block_loop.thisTrialN'
p8270
I0
sg39
F1.3833353575319052
sg34
g753
(S'\x07\xdf\x07\t\x13/&\x07\xdb\xb8'
tRp8271
sa(dp8272
S'trial_loop.thisTrialN'
p8273
I137
sg6371
g6458
sS'block_loop.thisIndex'
p8274
g6365
sg38
S'left'
p8275
sg59
g63
sS'trial_loop.thisN'
p8276
I137
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p8277
g60
(g99
S'\x89\x00\x00\x00'
tRp8278
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8279
I0
sg6380
g6466
sS'block_loop.thisRepN'
p8280
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8281
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p8282
Nsg70
Vn
sS'block_loop.thisTrialN'
p8283
I0
sg39
F2.5662939857284073
sg34
g753
(S'\x07\xdf\x07\t\x13/,\x0e%\x18'
tRp8284
sa(dp8285
S'trial_loop.thisTrialN'
p8286
I138
sg6371
g7017
sS'block_loop.thisIndex'
p8287
g6365
sg38
S'right'
p8288
sg59
g63
sS'trial_loop.thisN'
p8289
I138
sg33
g7021
sg64
g65
sS'trial_loop.thisIndex'
p8290
g60
(g99
S'\x8a\x00\x00\x00'
tRp8291
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8292
I0
sg6380
g7025
sS'block_loop.thisRepN'
p8293
I2
sg6383
g7021
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8294
I2
sg6385
g7028
sg55
g11
sS'block_loop.thisTrial'
p8295
Nsg70
Vn
sS'block_loop.thisTrialN'
p8296
I0
sg39
F1.5000076976648415
sg34
g753
(S'\x07\xdf\x07\t\x13/4\x07\xfe\xe0'
tRp8297
sa(dp8298
S'trial_loop.thisTrialN'
p8299
I139
sg6371
g6646
sS'block_loop.thisIndex'
p8300
g6365
sg38
S'right'
p8301
sg59
g63
sS'trial_loop.thisN'
p8302
I139
sg33
g6650
sg64
g65
sS'trial_loop.thisIndex'
p8303
g60
(g99
S'\x8b\x00\x00\x00'
tRp8304
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8305
I0
sg6380
g6654
sS'block_loop.thisRepN'
p8306
I2
sg6383
g6650
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8307
I2
sg6385
g6657
sg55
g11
sS'block_loop.thisTrial'
p8308
Nsg70
Vn
sS'block_loop.thisTrialN'
p8309
I0
sg39
F2.8833151155340602
sg34
g753
(S'\x07\xdf\x07\t\x13/;\x00\xea`'
tRp8310
sa(dp8311
S'trial_loop.thisTrialN'
p8312
I140
sg6371
g6903
sS'block_loop.thisIndex'
p8313
g6365
sg38
S'left'
p8314
sg59
g63
sS'trial_loop.thisN'
p8315
I140
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p8316
g60
(g99
S'\x8c\x00\x00\x00'
tRp8317
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8318
I0
sg6380
g6910
sS'block_loop.thisRepN'
p8319
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8320
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p8321
Nsg70
Vn
sS'block_loop.thisTrialN'
p8322
I0
sg39
F1.8999811264657183
sg34
g753
(S'\x07\xdf\x07\t\x130\x06\x0e\xcd\x10'
tRp8323
sa(dp8324
S'trial_loop.thisTrialN'
p8325
I141
sg6371
g6873
sS'block_loop.thisIndex'
p8326
g6365
sg38
S'left'
p8327
sg59
g63
sS'trial_loop.thisN'
p8328
I141
sg33
g6877
sg64
g65
sS'trial_loop.thisIndex'
p8329
g60
(g99
S'\x8d\x00\x00\x00'
tRp8330
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8331
I0
sg6380
g6881
sS'block_loop.thisRepN'
p8332
I2
sg6383
g6877
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8333
I2
sg6385
g6884
sg55
g11
sS'block_loop.thisTrial'
p8334
Nsg70
Vn
sS'block_loop.thisTrialN'
p8335
I0
sg39
F1.2333355571026914
sg34
g753
(S'\x07\xdf\x07\t\x130\r\r\xea\x80'
tRp8336
sa(dp8337
S'trial_loop.thisTrialN'
p8338
I142
sg6371
g6989
sS'block_loop.thisIndex'
p8339
g6365
sg38
S'left'
p8340
sg59
g63
sS'trial_loop.thisN'
p8341
I142
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p8342
g60
(g99
S'\x8e\x00\x00\x00'
tRp8343
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8344
I0
sg6380
g6996
sS'block_loop.thisRepN'
p8345
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8346
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p8347
Nsg70
Vn
sS'block_loop.thisTrialN'
p8348
I0
sg39
F1.4166588264561142
sg34
g753
(S'\x07\xdf\x07\t\x130\x14\x02\xca\xd8'
tRp8349
sa(dp8350
S'trial_loop.thisTrialN'
p8351
I143
sg6371
g7034
sS'block_loop.thisIndex'
p8352
g6365
sg38
S'left'
p8353
sg59
g63
sS'trial_loop.thisN'
p8354
I143
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8355
g60
(g99
S'\x8f\x00\x00\x00'
tRp8356
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8357
I0
sg6380
g7041
sS'block_loop.thisRepN'
p8358
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8359
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8360
Nsg70
Vn
sS'block_loop.thisTrialN'
p8361
I0
sg39
F1.249855597547139
sg34
g753
(S'\x07\xdf\x07\t\x130\x1a\t\x8dP'
tRp8362
sa(dp8363
S'trial_loop.thisTrialN'
p8364
I144
sg6371
g6933
sS'block_loop.thisIndex'
p8365
g6365
sg38
S'right'
p8366
sg59
g63
sS'trial_loop.thisN'
p8367
I144
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p8368
g60
(g99
S'\x90\x00\x00\x00'
tRp8369
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8370
I0
sg6380
g6940
sS'block_loop.thisRepN'
p8371
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8372
I2
sg6385
g6691
sg55
g11
sS'block_loop.thisTrial'
p8373
Nsg70
Vn
sS'block_loop.thisTrialN'
p8374
I0
sg39
F1.1003299161384348
sg34
g753
(S'\x07\xdf\x07\t\x130 \r\xea\x80'
tRp8375
sa(dp8376
S'trial_loop.thisTrialN'
p8377
I145
sg6371
g6989
sS'block_loop.thisIndex'
p8378
g6365
sg38
S'left'
p8379
sg59
g63
sS'trial_loop.thisN'
p8380
I145
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p8381
g60
(g99
S'\x91\x00\x00\x00'
tRp8382
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8383
I0
sg6380
g6996
sS'block_loop.thisRepN'
p8384
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8385
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p8386
Nsg70
Vn
sS'block_loop.thisTrialN'
p8387
I0
sg39
F2.1165993548784172
sg34
g753
(S"\x07\xdf\x07\t\x130'\x00\xa7\xf8"
tRp8388
sa(dp8389
S'trial_loop.thisTrialN'
p8390
I146
sg6371
g7017
sS'block_loop.thisIndex'
p8391
g6365
sg38
S'right'
p8392
sg59
g63
sS'trial_loop.thisN'
p8393
I146
sg33
g7021
sg64
g65
sS'trial_loop.thisIndex'
p8394
g60
(g99
S'\x92\x00\x00\x00'
tRp8395
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8396
I0
sg6380
g7025
sS'block_loop.thisRepN'
p8397
I2
sg6383
g7021
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8398
I2
sg6385
g7028
sg55
g11
sS'block_loop.thisTrial'
p8399
Nsg70
Vn
sS'block_loop.thisTrialN'
p8400
I0
sg39
F2.0327766497357516
sg34
g753
(S'\x07\xdf\x07\t\x130.\x02\xde`'
tRp8401
sa(dp8402
S'trial_loop.thisTrialN'
p8403
I147
sg6371
g6569
sS'block_loop.thisIndex'
p8404
g6365
sg38
S'right'
p8405
sg59
g63
sS'trial_loop.thisN'
p8406
I147
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8407
g60
(g99
S'\x93\x00\x00\x00'
tRp8408
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8409
I0
sg6380
g6576
sS'block_loop.thisRepN'
p8410
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8411
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8412
Nsg70
Vn
sS'block_loop.thisTrialN'
p8413
I0
sg39
F1.3999882539355895
sg34
g753
(S'\x07\xdf\x07\t\x1305\x03\xe4\x18'
tRp8414
sa(dp8415
S'trial_loop.thisTrialN'
p8416
I148
sg6371
g6873
sS'block_loop.thisIndex'
p8417
g6365
sg38
S'left'
p8418
sg59
g63
sS'trial_loop.thisN'
p8419
I148
sg33
g6877
sg64
g65
sS'trial_loop.thisIndex'
p8420
g60
(g99
S'\x94\x00\x00\x00'
tRp8421
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8422
I0
sg6380
g6881
sS'block_loop.thisRepN'
p8423
I2
sg6383
g6877
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8424
I2
sg6385
g6884
sg55
g11
sS'block_loop.thisTrial'
p8425
Nsg70
Vn
sS'block_loop.thisTrialN'
p8426
I0
sg39
F1.6832408758491511
sg34
g753
(S'\x07\xdf\x07\t\x130;\n\xa6\x90'
tRp8427
sa(dp8428
S'trial_loop.thisTrialN'
p8429
I149
sg6371
g7062
sS'block_loop.thisIndex'
p8430
g6365
sg38
S'left'
p8431
sg59
g63
sS'trial_loop.thisN'
p8432
I149
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p8433
g60
(g99
S'\x95\x00\x00\x00'
tRp8434
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8435
I0
sg6380
g7069
sS'block_loop.thisRepN'
p8436
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8437
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p8438
Nsg70
Vn
sS'block_loop.thisTrialN'
p8439
I0
sg39
F1.1000257158957538
sg34
g753
(S'\x07\xdf\x07\t\x131\x06\x061\xf0'
tRp8440
sa(dp8441
S'trial_loop.thisTrialN'
p8442
I150
sg6371
g6458
sS'block_loop.thisIndex'
p8443
g6365
sg38
S'left'
p8444
sg59
g63
sS'trial_loop.thisN'
p8445
I150
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p8446
g60
(g99
S'\x96\x00\x00\x00'
tRp8447
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8448
I0
sg6380
g6466
sS'block_loop.thisRepN'
p8449
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8450
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p8451
Nsg70
Vn
sS'block_loop.thisTrialN'
p8452
I0
sg39
F1.4329599111442803
sg34
g753
(S'\x07\xdf\x07\t\x131\x0c\x081\xa8'
tRp8453
sa(dp8454
S'trial_loop.thisTrialN'
p8455
I151
sg6371
g7155
sS'block_loop.thisIndex'
p8456
g6365
sg38
S'left'
p8457
sg59
g63
sS'trial_loop.thisN'
p8458
I151
sg33
g7021
sg64
g65
sS'trial_loop.thisIndex'
p8459
g60
(g99
S'\x97\x00\x00\x00'
tRp8460
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8461
I0
sg6380
g7162
sS'block_loop.thisRepN'
p8462
I2
sg6383
g7021
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8463
I2
sg6385
g7028
sg55
g11
sS'block_loop.thisTrial'
p8464
Nsg70
Vn
sS'block_loop.thisTrialN'
p8465
I0
sg39
F2.0498945420185919
sg34
g753
(S'\x07\xdf\x07\t\x131\x13\x00*\xf8'
tRp8466
sa(dp8467
S'trial_loop.thisTrialN'
p8468
I152
sg6371
g6989
sS'block_loop.thisIndex'
p8469
g6365
sg38
S'left'
p8470
sg59
g63
sS'trial_loop.thisN'
p8471
I152
sg33
g6503
sg64
g65
sS'trial_loop.thisIndex'
p8472
g60
(g99
S'\x98\x00\x00\x00'
tRp8473
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8474
I0
sg6380
g6996
sS'block_loop.thisRepN'
p8475
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8476
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p8477
Nsg70
Vn
sS'block_loop.thisTrialN'
p8478
I0
sg39
F0.94992356505827047
sg34
g753
(S'\x07\xdf\x07\t\x131\x1a\x01kH'
tRp8479
sa(dp8480
S'trial_loop.thisTrialN'
p8481
I153
sg6371
g6974
sS'block_loop.thisIndex'
p8482
g6365
sg38
S'right'
p8483
sg59
g63
sS'trial_loop.thisN'
p8484
I153
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p8485
g60
(g99
S'\x99\x00\x00\x00'
tRp8486
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8487
I0
sg6380
g6981
sS'block_loop.thisRepN'
p8488
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8489
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p8490
Nsg70
Vn
sS'block_loop.thisTrialN'
p8491
I0
sg39
F2.6663254036029684
sg34
g753
(S'\x07\xdf\x07\t\x131 \x01D8'
tRp8492
sa(dp8493
S'trial_loop.thisTrialN'
p8494
I154
sg6371
g7475
sS'block_loop.thisIndex'
p8495
g6365
sg38
S'right'
p8496
sg59
g63
sS'trial_loop.thisN'
p8497
I154
sg33
g7181
sg64
g65
sS'trial_loop.thisIndex'
p8498
g60
(g99
S'\x9a\x00\x00\x00'
tRp8499
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8500
I0
sg6380
g7482
sS'block_loop.thisRepN'
p8501
I2
sg6383
g7174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8502
I2
sg6385
g7181
sg55
g11
sS'block_loop.thisTrial'
p8503
Nsg70
Vn
sS'block_loop.thisTrialN'
p8504
I0
sg39
F1.450331826301408
sg34
g753
(S"\x07\xdf\x07\t\x131'\x0b\xcfp"
tRp8505
sa(dp8506
S'trial_loop.thisTrialN'
p8507
I155
sg6371
g7034
sS'block_loop.thisIndex'
p8508
g6365
sg38
S'left'
p8509
sg59
g63
sS'trial_loop.thisN'
p8510
I155
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8511
g60
(g99
S'\x9b\x00\x00\x00'
tRp8512
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8513
I0
sg6380
g7041
sS'block_loop.thisRepN'
p8514
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8515
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8516
Nsg70
Vn
sS'block_loop.thisTrialN'
p8517
I0
sg39
F1.3666140374552924
sg34
g753
(S'\x07\xdf\x07\t\x131.\x04\x07@'
tRp8518
sa(dp8519
S'trial_loop.thisTrialN'
p8520
I156
sg6371
g6443
sS'block_loop.thisIndex'
p8521
g6365
sg38
S'left'
p8522
sg59
g63
sS'trial_loop.thisN'
p8523
I156
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8524
g60
(g99
S'\x9c\x00\x00\x00'
tRp8525
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8526
I0
sg6380
g6450
sS'block_loop.thisRepN'
p8527
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8528
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8529
Nsg70
Vn
sS'block_loop.thisTrialN'
p8530
I0
sg39
F0.90000079828314483
sg34
g753
(S'\x07\xdf\x07\t\x1314\n\x12 '
tRp8531
sa(dp8532
S'trial_loop.thisTrialN'
p8533
I157
sg6371
g7408
sS'block_loop.thisIndex'
p8534
g6365
sg38
S'left'
p8535
sg59
g63
sS'trial_loop.thisN'
p8536
I157
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p8537
g60
(g99
S'\x9d\x00\x00\x00'
tRp8538
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8539
I0
sg6380
g7415
sS'block_loop.thisRepN'
p8540
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8541
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p8542
Nsg70
Vn
sS'block_loop.thisTrialN'
p8543
I0
sg39
F0.75000213823659578
sg34
g753
(S'\x07\xdf\x07\t\x131:\x08\xf8\xe0'
tRp8544
sa(dp8545
S'trial_loop.thisTrialN'
p8546
I158
sg6371
g7155
sS'block_loop.thisIndex'
p8547
g6365
sg38
S'left'
p8548
sg59
g63
sS'trial_loop.thisN'
p8549
I158
sg33
g7028
sg64
g65
sS'trial_loop.thisIndex'
p8550
g60
(g99
S'\x9e\x00\x00\x00'
tRp8551
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8552
I0
sg6380
g7162
sS'block_loop.thisRepN'
p8553
I2
sg6383
g7021
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8554
I2
sg6385
g7028
sg55
g11
sS'block_loop.thisTrial'
p8555
Nsg70
Vn
sS'block_loop.thisTrialN'
p8556
I0
sg39
F1.0499113628393388
sg34
g753
(S'\x07\xdf\x07\t\x132\x04\x05\xb8\xd8'
tRp8557
sa(dp8558
S'trial_loop.thisTrialN'
p8559
I159
sg6371
g6426
sS'block_loop.thisIndex'
p8560
g6365
sg38
S'left'
p8561
sg59
g63
sS'trial_loop.thisN'
p8562
I159
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8563
g60
(g99
S'\x9f\x00\x00\x00'
tRp8564
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8565
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8566
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8567
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8568
Nsg70
Vn
sS'block_loop.thisTrialN'
p8569
I0
sg39
F1.566773521633877
sg34
g753
(S'\x07\xdf\x07\t\x132\n\x07\x00\xf8'
tRp8570
sa(dp8571
S'trial_loop.thisTrialN'
p8572
I160
sg6371
g6918
sS'block_loop.thisIndex'
p8573
g6365
sg38
S'right'
p8574
sg59
g63
sS'trial_loop.thisN'
p8575
I160
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p8576
g60
(g99
S'\xa0\x00\x00\x00'
tRp8577
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8578
I0
sg6380
g6925
sS'block_loop.thisRepN'
p8579
I2
sg6383
g6667
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8580
I2
sg6385
g6674
sg55
g11
sS'block_loop.thisTrial'
p8581
Nsg70
Vn
sS'block_loop.thisTrialN'
p8582
I0
sg39
F1.3832429855756345
sg34
g753
(S'\x07\xdf\x07\t\x132\x11\x00\xe2\x90'
tRp8583
sa(dp8584
S'trial_loop.thisTrialN'
p8585
I161
sg6371
g6409
sS'block_loop.thisIndex'
p8586
g6365
sg38
S'right'
p8587
sg59
g63
sS'trial_loop.thisN'
p8588
I161
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p8589
g60
(g99
S'\xa1\x00\x00\x00'
tRp8590
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8591
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8592
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8593
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8594
Nsg70
Vn
sS'block_loop.thisTrialN'
p8595
I0
sg39
F2.3499140997810173
sg34
g753
(S'\x07\xdf\x07\t\x132\x17\x07+\xf0'
tRp8596
sa(dp8597
S'trial_loop.thisTrialN'
p8598
I162
sg6371
g6697
sS'block_loop.thisIndex'
p8599
g6365
sg38
S'right'
p8600
sg59
g63
sS'trial_loop.thisN'
p8601
I162
sg33
g6605
sg64
g65
sS'trial_loop.thisIndex'
p8602
g60
(g99
S'\xa2\x00\x00\x00'
tRp8603
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8604
I0
sg6380
g6704
sS'block_loop.thisRepN'
p8605
I2
sg6383
g6605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8606
I2
sg6385
g6612
sg55
g11
sS'block_loop.thisTrial'
p8607
Nsg70
Vn
sS'block_loop.thisTrialN'
p8608
I0
sg39
F1.9333097271592123
sg34
g753
(S'\x07\xdf\x07\t\x132\x1e\r/\x00'
tRp8609
sa(dp8610
S'trial_loop.thisTrialN'
p8611
I163
sg6371
S'19-caramello_redo.png'
p8612
sS'block_loop.thisIndex'
p8613
g6365
sg38
S'left'
p8614
sg59
g63
sS'trial_loop.thisN'
p8615
I163
sg33
g6767
sg64
g65
sS'trial_loop.thisIndex'
p8616
g60
(g99
S'\xa3\x00\x00\x00'
tRp8617
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8618
I0
sg6380
S'30-spaghetti_hoops.png'
p8619
sS'block_loop.thisRepN'
p8620
I2
sg6383
g6767
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8621
I2
sg6385
g6761
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vn
sS'block_loop.thisTrialN'
p8623
I0
sg39
F2.0166326543985633
sg34
g753
(S'\x07\xdf\x07\t\x132%\x0c\x8a\xf0'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g7869
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'right'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6877
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g7876
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6877
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8634
I2
sg6385
g6884
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vn
sS'block_loop.thisTrialN'
p8636
I0
sg39
F1.1170039098433335
sg34
g753
(S'\x07\xdf\x07\t\x132,\rR('
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g6601
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'left'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6605
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g6609
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8647
I2
sg6385
g6612
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vn
sS'block_loop.thisTrialN'
p8649
I0
sg39
F1.2333073323388817
sg34
g753
(S'\x07\xdf\x07\t\x1323\x00N '
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g6933
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'right'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g6940
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8660
I2
sg6385
g6691
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vn
sS'block_loop.thisTrialN'
p8662
I0
sg39
F1.4499138717001188
sg34
g753
(S'\x07\xdf\x07\t\x1329\x04p\xb8'
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g6725
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'right'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g6733
sS'block_loop.thisRepN'
p8672
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8673
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vn
sS'block_loop.thisTrialN'
p8675
I0
sg39
F1.0831438852910651
sg34
g753
(S'\x07\xdf\x07\t\x133\x03\x0b\xe6\xe0'
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g7475
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'right'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g7174
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g7482
sS'block_loop.thisRepN'
p8685
I2
sg6383
g7174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8686
I2
sg6385
g7181
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vn
sS'block_loop.thisTrialN'
p8688
I0
sg39
F1.1999852889057365
sg34
g753
(S'\x07\xdf\x07\t\x133\t\r\xac\x00'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g6443
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'left'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g6450
sS'block_loop.thisRepN'
p8698
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8699
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vn
sS'block_loop.thisTrialN'
p8701
I0
sg39
F1.7669774811947718
sg34
g753
(S'\x07\xdf\x07\t\x133\x10\x01\xd4\xc0'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g6475
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'right'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g6483
sS'block_loop.thisRepN'
p8711
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8712
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vn
sS'block_loop.thisTrialN'
p8714
I0
sg39
F1.1333272322226549
sg34
g753
(S'\x07\xdf\x07\t\x133\x16\x0e\x11\x90'
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g6817
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'right'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g6825
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8725
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vn
sS'block_loop.thisTrialN'
p8727
I0
sg39
F1.1832850661376142
sg34
g753
(S'\x07\xdf\x07\t\x133\x1d\x01\x82\xb8'
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g7475
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'right'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g7174
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g7482
sS'block_loop.thisRepN'
p8737
I2
sg6383
g7174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8738
I2
sg6385
g7181
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vn
sS'block_loop.thisTrialN'
p8740
I0
sg39
F1.2999967498762999
sg34
g753
(S'\x07\xdf\x07\t\x133#\x04\xb3 '
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g7062
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'left'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g7069
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6479
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8751
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vn
sS'block_loop.thisTrialN'
p8753
I0
sg39
F1.5833483010064811
sg34
g753
(S'\x07\xdf\x07\t\x133)\t\xcb\xd0'
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g6584
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'right'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g6592
sS'block_loop.thisRepN'
p8763
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8764
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vn
sS'block_loop.thisTrialN'
p8766
I0
sg39
F1.2167211490159389
sg34
g753
(S'\x07\xdf\x07\t\x1330\x03\xe8\x00'
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g6903
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'left'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g6910
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8777
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vn
sS'block_loop.thisTrialN'
p8779
I0
sg39
F1.0333388642466161
sg34
g753
(S'\x07\xdf\x07\t\x1336\x07\xd0\x00'
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g6697
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'right'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g6605
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g6704
sS'block_loop.thisRepN'
p8789
I2
sg6383
g6605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8790
I2
sg6385
g6612
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vn
sS'block_loop.thisTrialN'
p8792
I0
sg39
F1.1166848844659398
sg34
g753
(S'\x07\xdf\x07\t\x134\x00\x08\xd9\xa0'
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g6509
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'right'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g6517
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8803
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vn
sS'block_loop.thisTrialN'
p8805
I0
sg39
F1.2333355571026914
sg34
g753
(S'\x07\xdf\x07\t\x134\x06\x0b\x13\xf0'
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g6646
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'right'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6650
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g6654
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6650
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8816
I2
sg6385
g6657
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vn
sS'block_loop.thisTrialN'
p8818
I0
sg39
F0.76664733697543852
sg34
g753
(S'\x07\xdf\x07\t\x134\x0c\x0f:p'
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g6697
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'right'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g6605
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g6704
sS'block_loop.thisRepN'
p8828
I2
sg6383
g6605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8829
I2
sg6385
g6612
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vn
sS'block_loop.thisTrialN'
p8831
I0
sg39
F1.0835977623137296
sg34
g753
(S'\x07\xdf\x07\t\x134\x12\x0b\xfah'
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g6584
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'right'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g6592
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8842
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vn
sS'block_loop.thisTrialN'
p8844
I0
sg39
F1.4338776436416083
sg34
g753
(S'\x07\xdf\x07\t\x134\x18\r\xbb\xa0'
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g6974
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'right'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6469
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g6981
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8855
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vn
sS'block_loop.thisTrialN'
p8857
I0
sg39
F1.0163341561274137
sg34
g753
(S'\x07\xdf\x07\t\x134\x1f\x05\xb4\xf0'
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g6552
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'left'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g6560
sS'block_loop.thisRepN'
p8867
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8868
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vn
sS'block_loop.thisTrialN'
p8870
I0
sg39
F2.4165134261493222
sg34
g753
(S'\x07\xdf\x07\t\x134%\x06\x83\xf8'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g6372
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'right'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8880
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8881
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vn
sS'block_loop.thisTrialN'
p8883
I0
sg39
F2.2998935441719368
sg34
g753
(S'\x07\xdf\x07\t\x134,\rB\x88'
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g8612
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'left'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6767
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g8619
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6767
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8894
I2
sg6385
g6761
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vn
sS'block_loop.thisTrialN'
p8896
I0
sg39
F0.95036888911999995
sg34
g753
(S'\x07\xdf\x07\t\x1344\x03\x11('
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g7170
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'left'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g7174
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g7178
sS'block_loop.thisRepN'
p8906
I2
sg6383
g7174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8907
I2
sg6385
g7181
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vn
sS'block_loop.thisTrialN'
p8909
I0
sg39
F1.4499706063361373
sg34
g753
(S'\x07\xdf\x07\t\x134:\x02\xea\x18'
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g6697
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'right'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6605
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g6704
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8920
I2
sg6385
g6612
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vn
sS'block_loop.thisTrialN'
p8922
I0
sg39
F1.3332332637073705
sg34
g753
(S'\x07\xdf\x07\t\x135\x04\nd('
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g6918
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'right'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g6925
sS'block_loop.thisRepN'
p8932
I2
sg6383
g6667
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8933
I2
sg6385
g6674
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vn
sS'block_loop.thisTrialN'
p8935
I0
sg39
F1.0166682917333674
sg34
g753
(S'\x07\xdf\x07\t\x135\x0b\x00\xaf\xc8'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g8612
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'left'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g6767
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g8619
sS'block_loop.thisRepN'
p8945
I2
sg6383
g6767
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8946
I2
sg6385
g6761
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vn
sS'block_loop.thisTrialN'
p8948
I0
sg39
F3.1331256674893666
sg34
g753
(S'\x07\xdf\x07\t\x135\x11\x01~\xd0'
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g6569
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'right'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g6576
sS'block_loop.thisRepN'
p8958
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8959
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vn
sS'block_loop.thisTrialN'
p8961
I0
sg39
F0.86670184783724835
sg34
g753
(S'\x07\xdf\x07\t\x135\x19\x03\xeb\xe8'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g6918
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'right'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g6674
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g6925
sS'block_loop.thisRepN'
p8971
I2
sg6383
g6667
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8972
I2
sg6385
g6674
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vn
sS'block_loop.thisTrialN'
p8974
I0
sg39
F0.83335072435147595
sg34
g753
(S'\x07\xdf\x07\t\x135\x1f\x02Y\x90'
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g6725
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'right'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g6733
sS'block_loop.thisRepN'
p8984
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8985
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vn
sS'block_loop.thisTrialN'
p8987
I0
sg39
F0.99987455660448177
sg34
g753
(S'\x07\xdf\x07\t\x135%\x00J8'
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g6680
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'left'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g6688
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8998
I2
sg6385
g6691
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vn
sS'block_loop.thisTrialN'
p9000
I0
sg39
F1.6498703656470752
sg34
g753
(S'\x07\xdf\x07\t\x135+\x00\xde\xa8'
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g8612
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'left'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g6767
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g8619
sS'block_loop.thisRepN'
p9010
I2
sg6383
g6767
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9011
I2
sg6385
g6761
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vn
sS'block_loop.thisTrialN'
p9013
I0
sg39
F1.3166231321083615
sg34
g753
(S'\x07\xdf\x07\t\x1351\x0b/H'
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g6933
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'right'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6684
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g6940
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6684
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9024
I2
sg6385
g6691
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vn
sS'block_loop.thisTrialN'
p9026
I0
sg39
F0.76701368872454623
sg34
g753
(S'\x07\xdf\x07\t\x1358\x01~\xd0'
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g7869
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'right'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g6877
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g7876
sS'block_loop.thisRepN'
p9036
I2
sg6383
g6877
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9037
I2
sg6385
g6884
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vn
sS'block_loop.thisTrialN'
p9039
I0
sg39
F1.1832947594884899
sg34
g753
(S'\x07\xdf\x07\t\x136\x01\r\x84\xf0'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g6552
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'left'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g6560
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9050
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vn
sS'block_loop.thisTrialN'
p9052
I0
sg39
F1.5666463676461717
sg34
g753
(S'\x07\xdf\x07\t\x136\x08\x01\xad\xb0'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g7408
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'left'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g7415
sS'block_loop.thisRepN'
p9062
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9063
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vn
sS'block_loop.thisTrialN'
p9065
I0
sg39
F0.90003643560339697
sg34
g753
(S'\x07\xdf\x07\t\x136\x0e\n\xd1\x88'
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g7170
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'left'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g7174
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g7178
sS'block_loop.thisRepN'
p9075
I2
sg6383
g7174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9076
I2
sg6385
g7181
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vn
sS'block_loop.thisTrialN'
p9078
I0
sg39
F0.9665761763608316
sg34
g753
(S'\x07\xdf\x07\t\x136\x14\t\xb8H'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g8612
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'left'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6767
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g8619
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6767
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9089
I2
sg6385
g6761
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vn
sS'block_loop.thisTrialN'
p9091
I0
sg39
F1.1000907183915842
sg34
g753
(S'\x07\xdf\x07\t\x136\x1a\t\xcf\xb8'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vn
sa(dp9099
g64
g65
sg43
I26
sg56
g57
sg58
Vn
sg42
I574
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp9100
g64
g65
sg43
I26
sg55
g11
sg56
g57
sg45
F0.59999999999999998
sg42
I574
sg49
F0.01
sg58
Vn
sg59
g63
sg44
I01
sg48
I25
sg47
g553
sg51
F30.140000000000001
sg46
F0.63999999999999901
sg66
g67
sg68
g69
sg50
I0
sg70
Vn
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I82964816
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'fff?\xf6(\\?\xcd\xccL>\xcd\xccL>\x85\xebQ?\x9a\x99\x99>\x00\x00\x00\x00\n\xd7#>=\n\xd7>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xcd\xcc\xcc>\x1f\x85k?q=\n?\n\xd7\xa3>\n\xd7#?\xf6(\\?\x00\x00\x00?\x00\x00\x00\x00\\\x8f\x82?\x1f\x85\xeb>\\\x8f\xc2>\x8f\xc2\xf5>\xb8\x1e\x05?\x00\x00\x00\x00\x1f\x85\xeb>q=\n?\n\xd7#?\x00\x00\x00\x00\x1f\x85\xeb>\xaeGa?\x00\x00\x00\x00\x14\xaeG?\x9a\x99\x19?\xf6(\\?\x8f\xc2\xf5>\xa4p=?)\\\x0f?\x1f\x85\xeb>'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S'!\xb0\xa2@\xd5x\x03A\xfe\xd4\x94@\xbaIT@D\x8b\xb8@T\xe3\x85@\x0e-R@\xdb\xf9~@T\xe3\x95@\xa8\xc6K@P\x8d\'@d;\xd3@\xaa\xf1\x86@\xa8\xc6k@\x7fj\x0eA\xdb\xf9^@\xee|\'@b\x10P@\x0e-"@\x96Cc@\xc9vf@\x9a\x99\x91A\x98n\x86@\x10X\xdd@\xc9v\x16@!\xb0:@u\x938@b\x10 @\xfe\xd4\xa4@\xc9vF@\x98n\xce@\x96Cc@!\xb0*@\x87\x16\xc9@\xc9v6@\xee|\xaf@T\xe3\xbd@\xfc\xa9I@w\xbe\x9b@T\xe3=@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x10A\x00\x00\x98A\x00\x00\x10B\x00\x00\xb8A\x00\x00\x04B\x00\x00\xc8A\x00\x00@A\x00\x00\x14B\x00\x00\x00A\x00\x00\xa8A\x00\x00\x0cB\x00\x00\x00@\x00\x00\xc0@\x00\x00\x1cB\x00\x00\x18B\x00\x00`A\x00\x00 A\x00\x00\x80A\x00\x00\xe0A\x00\x00\x80@\x00\x00\xa0A\x00\x00\x00\x00\x00\x00\x80?\x00\x00\xc0A\x00\x00\xd0A\x00\x00\xe0@\x00\x000A\x00\x00\xf8A\x00\x00\xa0@\x00\x00\xd8A\x00\x00\xf0A\x00\x00\xe8A\x00\x00\x08B\x00\x00PA\x00\x00\x00B\x00\x00@@\x00\x00pA\x00\x00\xb0A\x00\x00\x90A\x00\x00\x88A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xc0?\xcd\xcc\x8c?33\xb3?\x9a\x99\x99?\x9a\x99\x99?33\xb3?33\xb3?33\xf3?ff\xe6?\x9a\x99\xd9?\x00\x00\xc0?33\xb3?\x9a\x99\xd9?33\xb3?ff\xe6?ff\xe6?\x9a\x99\xd9?\x00\x00\x00@\xcd\xcc\x8c?ff\xe6?\xcd\xcc\x8c?\xcd\xcc\xcc?33\xf3?\x00\x00\xc0?ff\xa6?\xcd\xcc\xcc?33\xf3?\x00\x00\x80?ff\xe6?33\xf3?\x9a\x99\xd9?33\xb3?\xcd\xcc\xcc?\xcd\xcc\xcc?ff\xa6?\x9a\x99\x99?33\xf3?\xcd\xcc\xcc?\x00\x00\x00@ff\xe6?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S'\x15\x00\x00\x00\x16\x00\x00\x00\x0b\x00\x00\x00#\x00\x00\x00\x13\x00\x00\x00\x1c\x00\x00\x00\x0c\x00\x00\x00\x19\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x1a\x00\x00\x00\x06\x00\x00\x00!\x00\x00\x00\x0f\x00\x00\x00$\x00\x00\x00\x11\x00\x00\x00\'\x00\x00\x00&\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\t\x00\x00\x00%\x00\x00\x00\x03\x00\x00\x00\x17\x00\x00\x00\x05\x00\x00\x00\x18\x00\x00\x00\x1d\x00\x00\x00\x12\x00\x00\x00\x1f\x00\x00\x00\x1e\x00\x00\x00\x1b\x00\x00\x00"\x00\x00\x00\x04\x00\x00\x00 \x00\x00\x00\n\x00\x00\x00\x02\x00\x00\x00\x07\x00\x00\x00\x0e\x00\x00\x00\r\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g166
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g236
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g355
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g264
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g334
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g278
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g187
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g362
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g159
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g250
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g348
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g117
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g145
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g376
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g369
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g201
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g173
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g215
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g299
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g131
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g243
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g103
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g110
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g271
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g285
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g152
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g180
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g320
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g138
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g292
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g313
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g306
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g341
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g194
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g327
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g124
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g208
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g257
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g229
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g222
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I82964816
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'\x9a\x99\x89@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@33\xa3@\x00\x00\xc0@\x00\x00\xb0@\x00\x00\xc0@33\x93@33\x83@\x00\x00\xc0@\xcd\xcc\xac@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@ff\x86@\xcd\xcc\x8c@\x00\x00\xc0@\xcd\xcc\xac@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\xcd\xcc\xac@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\x90@\x00\x00\xc0@33\xa3@\x9a\x99y@\x00\x00\xc0@\x00\x00\xc0@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S'\xcf\x11\xb1@\x17\xce\xcc?\xef\x0f!@\xddf\x06@\xa1g\xe6?!\xdf\xfd?&Lt@\x15\x07\xc0?\xa9\x16\xd1?+$\x02@V\xd3\xec?)W\xf5?|fF@\xd5"\x82@\x915\xd3?\xe48\xd3?\xf59\xd3?\xe9\xab\xaa?&\x9b\xb9?\xb0\xbc\xdb?%\xbd\x9b?\xf0%\xa2?[\xcd\x1c@\xaeW\x15@\x00F\x84?k\x12\xd1?Yyw?\xaa\xd2]?\xcd\xac\x8a?q>\xc4?m\xe0\xdd?\xaf\x14\xb1?\t\x9e\xf9?\xda\xe3\x9d?\x07\x10\xa1@\xefd\x06@\x8a\x9f\xf9?Yf\xbe@\x19\x8e\xc8?:$\xa2?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'\xcd\xccL@\x9a\x99Y@\xcd\xcc,@\xcd\xccL@\xcd\xccl@\x00\x00`@33S@\x00\x00@@fff@\x9a\x99\x89@ff\x86@33S@\xcd\xccl@33\x83@fff@\x00\x00`@\x00\x00`@\x00\x00\x80@ff\x86@ff\x86@33\x83@333@\x9a\x999@\x9a\x999@ffF@\x00\x00\x80@\xcd\xccl@\x9a\x99Y@\x00\x00@@\x00\x00`@33S@\x00\x00\x80@\x00\x00`@fff@\x9a\x99\x89@\x9a\x99Y@33s@\x9a\x99\x89@\x9a\x99Y@ffF@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'`\xf5@\r\x00\x0b\xce\x0c\xe09\xcc\x0c`;\xcc\x0c\xe05\xcc\x0c\xa0:\xcc\x0c\x008\xcc\x0c\xa09\xcc\x0c\x00;\xcc\x0c`{\xbd\x0c@x\xbd\x0c`\r\xce\x0c`\x06\xce\x0c\x00\x0c\xce\x0c\x80\x03\xce\x0c\x80\x06\xce\x0c \x0c\xce\x0c\xe0\x05\xce\x0c\xc0\x06\xce\x0c`\x08\xce\x0c`:\xcc\x0c@\x0c\xce\x0c\x00\r\xce\x0c {\xbd\x0c \xf6@\r\xc0\xf8@\r\x80\xfa@\r\x80\xfb@\r\x00\xf5@\r\x80\xf5@\r@\xf4@\r\x00\xf7@\r\x00\xf9@\r`\xf7@\r\x800\xcc\x0c\x80\x07\xce\x0c\x00\xf8@\r\xe0\xfb@\r\xe0\xf6@\r\xe0\xf7@\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'T\xe3}@B`\xd5?\xe9&\xf1?P\x8d\xb7?\xf8S\xb3?\x96C\x03@\xe9&\xb1?^\xba\x99?\xfc\xa9\x19@+\x87\x86?\x87\x16\xb1@B`\x95?B`\xf5?B`\xf5?P\x8d\x97?\x0e-\x02@+\x87\x86?\xa0\x1ao?\x06\x81U?+\x87\x86?\x83\xc0j?B`\x95?\x87\x16q@\x1dZ\xa4?P\x8dw?u\x938@\xbcts?\x1dZ\x84?P\x8d\x97?u\x93\x88?\x0e-\xe2?\xc9v6@\xa8\xc6\xdb?b\x10 @!\xb0\x1a@P\x8d\x97?\x1dZ\xe4?\x83\xc0\xca?P\x8d\x97?+\x87\x86?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I82964816
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S'\xf0\x82x\r\x18\x83x\rh\xfaw\r\xb0\xc6W\r\xe0\xc6W\r@\x83x\rh\x83x\r\xb0\xc6W\r\x18\x83x\r\x90\x83x\r\x80\xc6W\r@\x83x\rh\x83x\r\x90\x83x\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S'\x00;\xd0\x04h3\xd0\x04\x809\xd0\x04\xd8;\xd0\x04(=\xd0\x04P?\xd0\x04\x983\xd1\x0480\xd1\x04\x902\xd1\x04\x089\xd1\x04\x980\xd1\x04\xe81\xd1\x04\xf8<\xd1\x04\xc8?\xd1\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g767
sg83
g768
sg84
g772
sg85
g773
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g778
sg83
g779
sg84
g783
sg85
g784
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g744
sg83
g789
sg84
g749
sg85
g793
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g798
sg83
g799
sg84
g803
sg85
g804
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g809
sg83
g810
sg84
g814
sg85
g815
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g778
sg83
g820
sg84
g783
sg85
g824
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g756
sg83
g829
sg84
g761
sg85
g833
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g838
sg83
g839
sg84
g843
sg85
g844
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g767
sg83
g849
sg84
g772
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g798
sg83
g858
sg84
g803
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g809
sg83
g867
sg84
g814
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g838
sg83
g876
sg84
g843
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I82964816
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I82964816
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S'\xe0\x93z\rP\x92z\r \xd0?\rx\x92z\r\xa0\x92z\rP\x92z\rX\xa0z\rp\x87z\r \xd0?\r\xc8\x92z\r\xf0\x92z\rx\x92z\r\xd0\x87z\r\x80\xd1?\r\xa0\x92z\rP\x86z\r\xb0\x86z\r\xf0\x92z\r\xe0\x86z\r\xe0\xd5?\r\x18\x93z\r\x00\x88z\r\xf0\x92z\r\xc8\x92z\r\x10\x87z\r\xe0\xd5?\r\x80\xd1?\r\xb0\x86z\rP\x86z\r \xd0?\r@\x93z\r\x90\xa0z\r\x18\x93z\r\x08\x94z\r \xd0?\rX\x94z\r0\x88z\r\x18\x93z\rh\x93z\r\xe0\xd5?\r\x90\xa0z\r\x10\x87z\r\xe0\x86z\r\xe0\x93z\r\x18\x93z\r(\x92z\r\x18\x93z\r\x80\xd1?\r\xd0\x87z\rh\x93z\r\x90\x93z\r`\xd5?\r8\x1fz\r@\x93z\rP\x92z\r8\x1fz\rp\x1fz\r0\x94z\rp\x1fz\r \xd0?\r\xb0\x86z\r(\x92z\r`\x88z\rp\x87z\rh\x93z\r\x18\x93z\r\xa0\x92z\r\x80\xd1?\rx\x92z\r \xd0?\rp\x1fz\r\xa8\x1fz\r8\x1fz\r(\x92z\r\xb0\x86z\r(\x92z\rP\x86z\r\xa0\x92z\r \xd0?\r\xa0\x92z\r\x80\x94z\rp\x87z\r\xe0\x86z\rx\x92z\r\x80\x86z\r\xf0\x92z\r\x10\x87z\r\xc8\x92z\r\xa0\x92z\rx\x92z\r@\x93z\r\xb0\x86z\r\xe0\x86z\r\xa8\x1fz\r8\x1fz\r\xc8\x92z\r(\x92z\r\xc8\x92z\r8\x1fz\r\x80\x86z\r0\x88z\r@\x93z\r\xa0\xd3?\rp\x1fz\rX\x94z\r\xa0\x87z\rh\x93z\r\xa0\xd3?\rP\x86z\r\x90\x93z\rX\xa0z\r\xc8\x92z\r\xe0\xd5?\rX\x94z\r\x90\x93z\r\x80\x86z\r\xe0\x93z\rh\x93z\rX\x94z\r\xa8\x1fz\r\x10\x87z\r8\x1fz\rp\x1fz\r\xf0\x92z\r`\x88z\r\x18\x93z\r\xa0\x87z\rX\x94z\r\xe0\x86z\r\x80\x94z\r \xd0?\r\x90\x93z\rP\x86z\r\x10\x87z\rp\x1fz\r8\x1fz\r\xe0\xd5?\r\x00\x88z\r\xa0\x92z\r\xb0\x86z\r\x18\x93z\r(\x92z\r\xe0\x86z\r\x90\x93z\r\xb0\x86z\r\x80\x86z\r\xb0\x86z\r\xe0\xd5?\r\xf0\x92z\r\xb0\x86z\r\x80\xd1?\r(\x92z\rP\x86z\rP\x92z\r\x90\x93z\r@\x93z\r\xc8\x92z\rx\x92z\r\xe0\xd5?\r \xd0?\r`\x88z\rh\x93z\r\x90\xa0z\r\xe0\xd5?\r\x00\x88z\rx\x92z\r`\xd5?\r\x80\x86z\rp\x1fz\r\x18\x93z\r\x80\x86z\r\xa0\x92z\rP\x86z\r\x08\x94z\r \xa0z\r\xf0\x92z\r@\x87z\r\x10\x87z\rx\x92z\r\xc8\x92z\r\x00\x88z\rh\x93z\r\xe0\xd5?\r\xb0\x86z\r\xd0\x87z\rp\x1fz\rP\x92z\rX\xa0z\r\xd0\x87z\r\xe0\xd5?\r\x80\xd1?\r0\x88z\rx\x92z\rh\x93z\r\x90\x93z\r\xa8\x1fz\r\x80\xd1?\rP\x92z\r\xa0\xd3?\r\x10\x87z\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S'\xe0\x18X\r\x00\x1aX\r`\xfa@\r\x80\x8f\xce\x0c\x80\xb5>\r`\xb0>\r@\x1aX\r\xa0\x1bX\r`\xf6\xf1\x04\xe0\x15X\r\x80\x18X\r \x1aX\r\x80\x11X\r`\x1aX\r`\x18X\r\xa0\x17X\r \x1bX\r\xc0\x1aX\r`\x1bX\r\xe0\x1aX\r\xc0\x19X\r\x80\x1aX\r\xe0\x19X\r\xc0\x1bX\r`\x1cX\r\x80\x1cX\r \x1dX\r\x00\x1cX\r\x80\x1bX\r \x8e\xce\x0c\xe0.@\r\xa0/@\r\xe0\x80\xce\x0c\x00\xbc>\r\x00/@\r \x80\xce\x0c\xc0\x8bA\r\x00\x8bA\r@\x8cA\r\x00\x8eA\r@\x8bA\r\xc0\x8cA\r@\x8eA\r@\x8dA\r \x87A\r\x80\x8dA\r\xc0\x8aA\r`\x87A\r\x00\x86A\r\xe0\x86A\r`\x85A\r@\x86A\r\x00\x8aA\r\xc0\x85A\r\x80\x89A\r\xc0\x89A\r\x00\x88A\r@\x88A\r\x80\x86A\r\x80\x8bA\r\x00\x89A\r\xc0\x87A\r\x80\x8cA\r\xc0\x88A\r\x80\x88A\r\x80\x8eA\r \x80A\r\xa0\x80A\r\xe0\x80A\r@\x89A\r\xc0\x8dA\r\xc0\x80A\r\x00\x8fA\r\x00\x8cA\r`\x80A\r\x00\x81A\r \x81A\r\xc0\x8eA\r@\x8fA\r\xa0\x86A\r\x00\x8dA\r`%@\r\x80\x8aA\r\xa0\xe1A\r@\x8aA\r\xc0\xfe@\r \xf3@\r\xe0\xf1@\r`\xfe@\r@\xff@\r \xff@\r\xa0\xfe@\r\x80\xff@\r`\xff@\r@\xfe@\r\xa0\xff@\r\xc0\xff@\r@\xf1@\r \xf1@\r \xfe@\r`\xf1@\r\x00\xf1@\r \xf2@\r\x80\xf1@\r`\xf2@\r\xc0\xf1@\r@\xf3@\r\xe0\xf2@\r\xc0\xf2@\r`\xf3@\r\x80\xf3@\r\x00\xf2@\r \xf4@\r\x80\xf2@\r`\xf0@\r\xe0\xff@\r\x00{\xbd\x0c\xa0s\xbd\x0c@\x80A\r\x00\xf3@\r\xe0\xf3@\r@\xf2@\r@\xfb@\r\x00\xf4@\r\xa0\xf1@\r\x00|\xbd\x0c\x80\xfc@\r\xa0\xf3@\r\xa0\xf2@\r\xc0/@\r\x80\xfe@\r`-@\r\xa0\x1aX\r\x80\x16X\r\x80\x1dX\r@\x1dX\r@\x1bX\r \x1cX\r\x00\x1dX\r\xc0\x1dX\r\xa0\x1cX\r \x1eX\r\x00\x1eX\r@\x1eX\r\xe0\x1dX\r\x80\x1eX\r\xa0\x1eX\r`\x1dX\r\xe0\x1eX\r\x00\x1fX\r\xa0\x1dX\r\xa0\x1fX\r@\x1fX\r@\x1cX\r\xc0\x1fX\r\xe0\x1cX\r\xc0\x1eX\r\xe0\x1bX\r\xa0\x19X\r\xa0\x18X\r\xe0\x1fX\r`\x1eX\r \x19X\r\xc0\x1cX\r`\x1fX\r \x1fX\r\x80\xb1>\r\xe0\xfe@\r \x80\xae\r@\x82\xae\r\x80\x80\xae\r\x80\x81\xae\r \x81\xae\r@\x80\xae\r\xe0\x81\xae\r@\x81\xae\r\xc0\x81\xae\r\x80\x82\xae\r\xa0\x82\xae\r\xa0\x80\xae\r\x00\x83\xae\r\xe0\x82\xae\r\xa0\x81\xae\r`\x83\xae\r@\x83\xae\r`\x81\xae\r\xc0\x83\xae\r\xa0\x83\xae\r`\x82\xae\r\xe0\x83\xae\r\x00\x84\xae\r \x84\xae\r@\x84\xae\r`\x84\xae\r\x80\x84\xae\r\xe0\x17X\r\xe0\x11X\r\x80\x1fX\r \x16X\r@\x18X\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S"\xc1\xc7\xac?4\x1e\xe2?`\xee\xae?\x86C\xc4?}\x99\xb9?\xbeO\xc4?\x97e&@\x16\xef\xee?@\x7f\xa8?E:\xa4?\xc8\x83\xb7?\xa2\x1e\xe2?\xc0v\xb7?\xa8\x10\xb1?\xa7\x97\t@}w\xb7?\xb1\xc9\xcc?Du\x17@\x9a/\xb3?\xed\xfa\x0f@\xc8`\xb5?\xa0\xeb\xce?\xb1!\xc2?\x94\xb2\x9b?zv\xb7?\xf1\x0f\xd1?\n\xba\x0b@\xc4 \xc2?\x17c\xa6?\xb91\xf3?\x91I$@RR\xb5?sf\x86?9t\x97?\xd5\xff\xbf?\xed\xe9\xdd?\xb4\x87\xe8?'\xa7\xaa?3\x0f\xb1?\xe9\xdd\x9d?VC\xc4?M\xda\xbd?Bw\x17@\xfeT\xf5?\xd9\xff\x9f?\x03\xb7\xca?\xc0\x1a\x82?Y\x99\xb9?\\\xba\x83@\xf8\x96I@\xf6\xbaK@\xe2\xaa\xaa?\r\xcb<@\xa7\xddM@&\xec\xce?I\xee>@\xe6\xa3\xca?\x1f\xcd\x8c?%\xfc\x9f?q\x10\xb1?\xf5\xeb\xae?\x83\x0f\x91?\xe3A\x14@\x03\xbbK@it\x97?\xb5\xcc\x8c?\x86\x0c\xd1?;\x10\xd1?\xe4\xba\xfb?\xccD\xa4?\xd7\x1c\xa2?#\xd9\x9d?\xac\x87\xc8?Inw?/\xb9\x9b?\xa0B\xc4?\xed\xec\x0e@\xb1\xec\x8e?#\xa8\xaa?\xd5\n\x91?\x9f\r\xb1?D\xa9\xaa?\xfe\xfe\xff?\xdd\xc9\xbb?\xc2\xa8Z@\xf7\x96\xb9?\x04c\xe6?`\xd4\x9d?\xa7T\x95?Nc\xa6?\xcf\x87\xe8?\x01\xde]?0\xdb\xbd?\xda\xba\xfb?k\x1ab?\xd9\xaf\xbb?\xbfD\xc4?b\xaf\x9b?\xed]D?\x00C\x04@\xee\xa6\xaa?\xd4\xab\x8a?Vc\x86?Cd\x86?=\xb5{?\x8aJ\xb5?\xaeD\xc4?fj\x86?\xff\x98\x99?p\x92\x99?\x10\xfe\xdf?e\x17\x82?\xeae\xc6?'xw?\x8a\xff\x9f?\x98\xdc\x9d?a\x99\xd9?\x0eC\xc4?\xfa\xba\xdb?q\r\xf1?\xd6T\x05@\xafv\xb7?\xdf\xb3{?#\x96\xa8?rR\x95?\xfa\x91\xb9?\xe0\xa9{?\xab\xa9\xaa?\xd6\xcd\xac?\x16~\x88?p\xeb\xce?h\xb3{?\xcf!\xa2?-U\xd5?%\xb7{?U\x1db?\xb2\xeb\xee?\x8b\xfa\xbf?\xa8+\xe2?/R\x95?\x18\xed\x8e?R\x86\xe8?\xb0\x96\x99?\xa7p\xe6?5\xa7\x8a?\x9e\xa9\x8a?l\xfd\x7f?\x10\xdd\xdd?E\x1a\xb1?|\x1c\xa2?\x88\xfb\x9f?\x0bS\x95?E\x0cQ?\x06\x88\xe8?\x9e\xda\xbd?\xf8R%@W\xe5\xce?\xd6\xdb\xdd?\x80-\xc2?{\xdd\xdd?\x0b\xa8\x1a@\xfab\xe6?\xc9A\x84?\x85\x99\xd9?9\xeb\x8e?^S\xf5?B\xff\x9f?gr\x97?\x8a*\xc2?\xcbb\x86?'.s?p\xb8\x9b?\x06D\xa4?\x91q\x86?2\x85\x88?\xea/\x93?\xde\xec\x8e?\x14\xb9\xbb?\x84-\xa2?\xd4?U?\xb2\xeb\xee?\xc1T\x95?\xb91\xb3?P\x01\xa0?\xf4\x88\x88?i\x93\x99?<\xdd\x1d@\xf7\x1e\xc2?`\xf2n?\xa7\xc9\xcc?\xcb\xc9\xcc?]\xa7\xca?\xd4\xdb\x9d?\x08\x88\xe8?\xac\xdc\xbd?@\xfd\xdf?k\x95\x99?\xbes\xf7?m>\xb3?S\xba\x1b@"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S' <\xd1\x04@4\xd1\x04P3\x1f\x05h6\x1f\x05\xa82\x1f\x05\xd0=\x1f\x05H5\x1f\x0502\x1f\x05\x806\x1f\x05\xe00\x1f\x05 6\x1f\x05X7\x1f\x05\xd88\x1f\x05\xb84\x1f\x05\xf8<\x1f\x05\xf89\x1f\x05\x989\x1f\x05p:\x1f\x05\x101\x1f\x05\x88=\x1f\x05\xc8<\x1f\x050;\x1f\x05p4\x1f\x05\x887\x1f\x05\x10:\x1f\x05 0\x1f\x05X:\x1f\x05\xc0;\x1f\x05\xb8:\x1f\x05H;\x1f\x05p1\x1f\x05\x10=\x1f\x05@4\x1f\x05`;\x1f\x05H>\x1f\x05\xa07\x1f\x058?\x1f\x0508\x1f\x05(:\x1f\x050>\x1f\x05\x00;\x1f\x05 3\x1f\x05\x089\x1f\x05\x08?\x1f\x05\xc83\x1f\x05\x884\x1f\x05\xe84\x1f\x05x2\x1f\x05@=\x1f\x05\xb0?\x1f\x05\x107\x1f\x05\x005\x1f\x05\xb8=\x1f\x05P<\x1f\x05X1\x1f\x05\xc89\x1f\x05`2\x1f\x05p7\x1f\x05\xd0:\x1f\x05\xb87\x1f\x05\x18>\x1f\x05 9\x1f\x05\xa8;\x1f\x05\x08<\x1f\x05\x90;\x1f\x05\xa0:\x1f\x05\xe06\x1f\x05\x00>\x1f\x058<\x1f\x05p=\x1f\x05\x809\x1f\x05\x905\x1f\x05\xe8=\x1f\x05P0\x1f\x05\xe0?\x1f\x05X=\x1f\x05\x90>\x1f\x05h9\x1f\x05@7\x1f\x05\xe0<\x1f\x05\xf08\x1f\x05x>\x1f\x05h?\x1f\x05\xc0>\x1f\x0580\x1f\x05\xb81\x1f\x05x8\x1f\x05\xa04\x1f\x0589\x1f\x05\x986\x1f\x05\xc02\x1f\x05\xd8>\x1f\x05\xe09\x1f\x05h0\x1f\x05\xc05\x1f\x05\xa0=\x1f\x05\xf0>\x1f\x05\xe8:\x1f\x05\x803\x1f\x05\x80?\x1f\x05\x98?\x1f\x05\xe87\x1f\x05\x002\x1f\x05P9\x1f\x05P?\x1f\x05\x88:\x1f\x05\xd8;\x1f\x05x;\x1f\x05(1\x1f\x05\xa88\x1f\x05\xc8?\x1f\x05\xc08\x1f\x05\xd85\x1f\x05(4\x1f\x05\xb06\x1f\x05\x185\x1f\x05\xc86\x1f\x05\x188\x1f\x05p\xb7 \x05\x98\xb3 \x05\xe0\xb6 \x05\xc0\xbb \x05\xf0\xb2 \x05x\xb2 \x05@\xb4 \x050\xb2 \x05\xc8\xbc \x05\x98\xbf \x05\xa0\xbd \x05\xb0\xb9 \x05p\xbd \x05P\xb6 \x05P\xb0 \x05 \xb0 \x05P\xbc \x05\x08\xb3 \x05`\xb8 \x05h\xb0 \x05\xf0\xbe \x05\xc8\xb9 \x05\x80\xb6 \x058\xbf \x05\x00\xb2 \x05\x08\xbf \x05\xe8\xbd \x05\xf0\xb5 \x05\xa8\xbe \x05h\xb9 \x05\x80\xb9 \x05 \xb3 \x05(\xb7 \x05h\xb6 \x05H\xbe \x05 \xbc \x05\xb0\xbc \x05\xe03\x1f\x05\xa8>\x1f\x05\xe81\x1f\x05\xd82\x1f\x05\x980\x1f\x0583\x1f\x05H8\x1f\x05h3\x1f\x05\xf02\x1f\x05X4\x1f\x05\xa85\x1f\x05(=\x1f\x05\xd04\x1f\x05\x182\x1f\x05\xa01\x1f\x05\xd07\x1f\x05\xf05\x1f\x05\xd01\x1f\x05\x008\x1f\x05\x881\x1f\x05\xb00\x1f\x0505\x1f\x05\x983\x1f\x05\x104\x1f\x05`8\x1f\x05\x80<\x1f\x05x5\x1f\x05\xc80\x1f\x05\xf80\x1f\x05\x902\x1f\x05\xf86\x1f\x0586\x1f\x05@:\x1f\x05`>\x1f\x05H2\x1f\x05@1\x1f\x05\xb03\x1f\x05 <\x1f\x05P6\x1f\x05 ?\x1f\x05\xc0\xb5 \x05\x086\x1f\x05\x908\x1f\x05`5\x1f\x05(7\x1f\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g920
sg895
g916
sg910
g927
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g954
sg895
g950
sg910
g961
sg904
g958
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g920
sg895
g916
sg910
g927
sg904
g924
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g1007
sg895
g997
sg910
g1001
sg904
g1005
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g1024
sg895
g1014
sg910
g1018
sg904
g1022
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g937
sg895
g1031
sg910
g944
sg904
g1038
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g1050
sg895
g1046
sg910
g1057
sg904
g1054
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g1067
sg895
g1063
sg910
g1074
sg904
g1071
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g954
sg895
g1080
sg910
g961
sg904
g1087
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g1105
sg895
g1095
sg910
g1099
sg904
g1103
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g1116
sg895
g1112
sg910
g1123
sg904
g1120
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g1024
sg895
g1014
sg910
g1018
sg904
g1022
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g1159
sg895
g1155
sg910
g1166
sg904
g1163
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g1067
sg895
g1172
sg910
g1074
sg904
g1179
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g1191
sg895
g1187
sg910
g1198
sg904
g1195
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g1208
sg895
g1204
sg910
g1215
sg904
g1212
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g1225
sg895
g1221
sg910
g1232
sg904
g1229
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g1191
sg895
g1187
sg910
g1198
sg904
g1195
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g1067
sg895
g1172
sg910
g1074
sg904
g1179
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g1050
sg895
g1264
sg910
g1057
sg904
g1271
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g1283
sg895
g1279
sg910
g1290
sg904
g1287
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g1208
sg895
g1204
sg910
g1215
sg904
g1212
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g1116
sg895
g1112
sg910
g1123
sg904
g1120
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g1159
sg895
g1155
sg910
g1166
sg904
g1163
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g1024
sg895
g1335
sg910
g1018
sg904
g1342
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g1367
sg895
g1363
sg910
g1374
sg904
g1371
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g1116
sg895
g1380
sg910
g1123
sg904
g1387
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g1225
sg895
g1221
sg910
g1232
sg904
g1229
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g971
sg895
g1408
sg910
g978
sg904
g1415
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g1367
sg895
g1363
sg910
g1374
sg904
g1371
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g1283
sg895
g1279
sg910
g1290
sg904
g1287
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g1225
sg895
g1462
sg910
g1232
sg904
g1469
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g1481
sg895
g1477
sg910
g1488
sg904
g1485
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g1208
sg895
g1204
sg910
g1215
sg904
g1212
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g1116
sg895
g1380
sg910
g1123
sg904
g1387
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g1283
sg895
g1279
sg910
g1290
sg904
g1287
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g1191
sg895
g1187
sg910
g1198
sg904
g1195
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g908
sg895
g1546
sg910
g900
sg904
g1553
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g1225
sg895
g1462
sg910
g1232
sg904
g1469
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g908
sg895
g1546
sg910
g900
sg904
g1553
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g1225
sg895
g1221
sg910
g1232
sg904
g1229
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g1116
sg895
g1112
sg910
g1123
sg904
g1120
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g1105
sg895
g1613
sg910
g1099
sg904
g1620
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g1481
sg895
g1628
sg910
g1488
sg904
g1635
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g1647
sg895
g1643
sg910
g1654
sg904
g1651
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g1481
sg895
g1477
sg910
g1488
sg904
g1485
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g1007
sg895
g1673
sg910
g1001
sg904
g1680
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g1367
sg895
g1688
sg910
g1374
sg904
g1695
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g920
sg895
g1703
sg910
g927
sg904
g1710
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1007
sg895
g997
sg910
g1001
sg904
g1005
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g1735
sg895
g1731
sg910
g1742
sg904
g1739
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g1225
sg895
g1462
sg910
g1232
sg904
g1469
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g1735
sg895
g1731
sg910
g1742
sg904
g1739
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g1159
sg895
g1155
sg910
g1166
sg904
g1163
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g1647
sg895
g1813
sg910
g1654
sg904
g1820
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g1024
sg895
g1335
sg910
g1018
sg904
g1342
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g1481
sg895
g1628
sg910
g1488
sg904
g1635
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g1225
sg895
g1221
sg910
g1232
sg904
g1229
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g1116
sg895
g1380
sg910
g1123
sg904
g1387
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g954
sg895
g950
sg910
g961
sg904
g958
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g1735
sg895
g1731
sg910
g1742
sg904
g1739
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g920
sg895
g1703
sg910
g927
sg904
g1710
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g1007
sg895
g997
sg910
g1001
sg904
g1005
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g1159
sg895
g1971
sg910
g1166
sg904
g1978
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g908
sg895
g1546
sg910
g900
sg904
g1553
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g1024
sg895
g1014
sg910
g1018
sg904
g1022
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g971
sg895
g1408
sg910
g978
sg904
g1415
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g937
sg895
g1031
sg910
g944
sg904
g1038
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g1735
sg895
g2051
sg910
g1742
sg904
g2058
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g1024
sg895
g1014
sg910
g1018
sg904
g1022
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g1191
sg895
g2079
sg910
g1198
sg904
g2086
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g954
sg895
g950
sg910
g961
sg904
g958
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g1105
sg895
g1095
sg910
g1099
sg904
g1103
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g1067
sg895
g1172
sg910
g1074
sg904
g1179
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g1283
sg895
g2133
sg910
g1290
sg904
g2140
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g1050
sg895
g1264
sg910
g1057
sg904
g1271
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g971
sg895
g1408
sg910
g978
sg904
g1415
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g954
sg895
g1080
sg910
g961
sg904
g1087
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g1367
sg895
g1688
sg910
g1374
sg904
g1695
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g1159
sg895
g1155
sg910
g1166
sg904
g1163
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g1191
sg895
g2079
sg910
g1198
sg904
g2086
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g920
sg895
g916
sg910
g927
sg904
g924
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g1007
sg895
g1673
sg910
g1001
sg904
g1680
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g1050
sg895
g1046
sg910
g1057
sg904
g1054
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g1050
sg895
g1264
sg910
g1057
sg904
g1271
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g1007
sg895
g1673
sg910
g1001
sg904
g1680
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g1105
sg895
g1613
sg910
g1099
sg904
g1620
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g1283
sg895
g1279
sg910
g1290
sg904
g1287
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g1367
sg895
g1363
sg910
g1374
sg904
g1371
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g1067
sg895
g1172
sg910
g1074
sg904
g1179
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g1735
sg895
g2051
sg910
g1742
sg904
g2058
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g1367
sg895
g1363
sg910
g1374
sg904
g1371
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g1050
sg895
g1046
sg910
g1057
sg904
g1054
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g1481
sg895
g1477
sg910
g1488
sg904
g1485
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g1067
sg895
g1063
sg910
g1074
sg904
g1071
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g1024
sg895
g1335
sg910
g1018
sg904
g1342
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g1647
sg895
g1643
sg910
g1654
sg904
g1651
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g1007
sg895
g997
sg910
g1001
sg904
g1005
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g1050
sg895
g1264
sg910
g1057
sg904
g1271
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g1208
sg895
g2473
sg910
g1215
sg904
g2480
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g1367
sg895
g1688
sg910
g1374
sg904
g1695
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g1647
sg895
g1813
sg910
g1654
sg904
g1820
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g1105
sg895
g1095
sg910
g1099
sg904
g1103
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g908
sg895
g1546
sg910
g900
sg904
g1553
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g1481
sg895
g1628
sg910
g1488
sg904
g1635
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g1367
sg895
g1688
sg910
g1374
sg904
g1695
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g920
sg895
g1703
sg910
g927
sg904
g1710
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g1283
sg895
g2133
sg910
g1290
sg904
g2140
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g1007
sg895
g1673
sg910
g1001
sg904
g1680
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g1735
sg895
g2051
sg910
g1742
sg904
g2058
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g1067
sg895
g1063
sg910
g1074
sg904
g1071
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g1647
sg895
g1643
sg910
g1654
sg904
g1651
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g1225
sg895
g1462
sg910
g1232
sg904
g1469
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g1050
sg895
g1046
sg910
g1057
sg904
g1054
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g1367
sg895
g1688
sg910
g1374
sg904
g1695
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g1191
sg895
g2079
sg910
g1198
sg904
g2086
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g1735
sg895
g2051
sg910
g1742
sg904
g2058
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g937
sg895
g1031
sg910
g944
sg904
g1038
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g1647
sg895
g1813
sg910
g1654
sg904
g1820
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g1024
sg895
g1335
sg910
g1018
sg904
g1342
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g1283
sg895
g2133
sg910
g1290
sg904
g2140
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1735
sg895
g1731
sg910
g1742
sg904
g1739
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g1007
sg895
g1673
sg910
g1001
sg904
g1680
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g1208
sg895
g1204
sg910
g1215
sg904
g1212
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g1191
sg895
g1187
sg910
g1198
sg904
g1195
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g971
sg895
g1408
sg910
g978
sg904
g1415
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g1159
sg895
g1155
sg910
g1166
sg904
g1163
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g1225
sg895
g1462
sg910
g1232
sg904
g1469
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g1191
sg895
g2079
sg910
g1198
sg904
g2086
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g1647
sg895
g1643
sg910
g1654
sg904
g1651
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g1159
sg895
g1971
sg910
g1166
sg904
g1978
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g1105
sg895
g1095
sg910
g1099
sg904
g1103
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g1159
sg895
g1971
sg910
g1166
sg904
g1978
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g1208
sg895
g2473
sg910
g1215
sg904
g2480
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g1067
sg895
g1063
sg910
g1074
sg904
g1071
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g1159
sg895
g1971
sg910
g1166
sg904
g1978
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g1116
sg895
g1380
sg910
g1123
sg904
g1387
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g908
sg895
g1546
sg910
g900
sg904
g1553
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g1024
sg895
g1014
sg910
g1018
sg904
g1022
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g920
sg895
g1703
sg910
g927
sg904
g1710
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g1647
sg895
g1813
sg910
g1654
sg904
g1820
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g1367
sg895
g1363
sg910
g1374
sg904
g1371
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g1050
sg895
g1264
sg910
g1057
sg904
g1271
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g954
sg895
g950
sg910
g961
sg904
g958
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g1208
sg895
g2473
sg910
g1215
sg904
g2480
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g937
sg895
g1031
sg910
g944
sg904
g1038
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g1647
sg895
g1813
sg910
g1654
sg904
g1820
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g1481
sg895
g1477
sg910
g1488
sg904
g1485
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g1116
sg895
g1380
sg910
g1123
sg904
g1387
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g1208
sg895
g1204
sg910
g1215
sg904
g1212
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g1191
sg895
g2079
sg910
g1198
sg904
g2086
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g954
sg895
g1080
sg910
g961
sg904
g1087
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g1481
sg895
g1628
sg910
g1488
sg904
g1635
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g1105
sg895
g1095
sg910
g1099
sg904
g1103
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g1735
sg895
g2051
sg910
g1742
sg904
g2058
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g1225
sg895
g1221
sg910
g1232
sg904
g1229
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g1105
sg895
g1613
sg910
g1099
sg904
g1620
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g1024
sg895
g1335
sg910
g1018
sg904
g1342
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g971
sg895
g1408
sg910
g978
sg904
g1415
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g937
sg895
g1031
sg910
g944
sg904
g1038
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g1067
sg895
g1172
sg910
g1074
sg904
g1179
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g954
sg895
g1080
sg910
g961
sg904
g1087
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g1283
sg895
g2133
sg910
g1290
sg904
g2140
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g954
sg895
g1080
sg910
g961
sg904
g1087
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g1050
sg895
g1046
sg910
g1057
sg904
g1054
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g1191
sg895
g1187
sg910
g1198
sg904
g1195
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g1481
sg895
g1628
sg910
g1488
sg904
g1635
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g1208
sg895
g2473
sg910
g1215
sg904
g2480
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g1159
sg895
g1971
sg910
g1166
sg904
g1978
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g1105
sg895
g1613
sg910
g1099
sg904
g1620
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g1735
sg895
g1731
sg910
g1742
sg904
g1739
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g920
sg895
g916
sg910
g927
sg904
g924
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g1007
sg895
g997
sg910
g1001
sg904
g1005
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g1105
sg895
g1613
sg910
g1099
sg904
g1620
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g1208
sg895
g2473
sg910
g1215
sg904
g2480
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g1116
sg895
g1112
sg910
g1123
sg904
g1120
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g1283
sg895
g2133
sg910
g1290
sg904
g2140
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g954
sg895
g950
sg910
g961
sg904
g958
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g1481
sg895
g1477
sg910
g1488
sg904
g1485
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g1647
sg895
g1643
sg910
g1654
sg904
g1651
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g920
sg895
g916
sg910
g927
sg904
g924
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g1116
sg895
g1112
sg910
g1123
sg904
g1120
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g920
sg895
g1703
sg910
g927
sg904
g1710
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g1067
sg895
g1063
sg910
g1074
sg904
g1071
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g1283
sg895
g1279
sg910
g1290
sg904
g1287
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I82964816
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S'\x10\x16\xcd\x0c\x00Y\xe5\x0c\x80\xab\xcd\x0c`\xac\xcd\x0c\xe8\x15\xcd\x0c\x10\x16\xcd\x0c@d\xcd\x0c\xc0\x15\xcd\x0cpd\xcd\x0c\x98\x15\xcd\x0c\xc0X\xe5\x0c\xb8\xab\xcd\x0cp\x15\xcd\x0c\xa0d\xcd\x0c\x10\x16\xcd\x0c`\xac\xcd\x0c\xd0d\xcd\x0c\xb8\x13\xcd\x0c`Y\xe5\x0c\xa0d\xcd\x0cX\x14\xcd\x0cH\x15\xcd\x0c\x00Y\xe5\x0c f\xcd\x0c\x00Y\xe5\x0c\xf8\x14\xcd\x0c\x00Y\xe5\x0c\xe0_\xe5\x0c\x98\x15\xcd\x0c\x00e\xcd\x0c\xc0X\xe5\x0c\x80\xab\xcd\x0c\xc0X\xe5\x0c\xd0d\xcd\x0c\xe8\x15\xcd\x0c\xe0_\xe5\x0c\x98\x15\xcd\x0cH\x15\xcd\x0c\xd0d\xcd\x0c\xe8\x15\xcd\x0cH\x15\xcd\x0c\xd0d\xcd\x0c\x90e\xcd\x0c\x80\xab\xcd\x0c\xb8\xab\xcd\x0c\x00e\xcd\x0c\x00Y\xe5\x0cp\x15\xcd\x0cX\x14\xcd\x0c\xb8\xab\xcd\x0cp\x15\xcd\x0c\x00e\xcd\x0c\xa8\x14\xcd\x0c`Y\xe5\x0c\x10\x16\xcd\x0c\xc0X\xe5\x0c\xd0\x14\xcd\x0c\x80\xab\xcd\x0c0e\xcd\x0c`e\xcd\x0c\x90e\xcd\x0c \x15\xcd\x0c\x08\x14\xcd\x0c\xf8\x14\xcd\x0c`e\xcd\x0c\x80\xab\xcd\x0c`Y\xe5\x0cpd\xcd\x0c\x98\x15\xcd\x0c\x00Y\xe5\x0c@d\xcd\x0c\x00e\xcd\x0c\xa0d\xcd\x0c@d\xcd\x0c\xa8\x14\xcd\x0cp\x15\xcd\x0c\x10\x16\xcd\x0c`e\xcd\x0c`Y\xe5\x0c \x15\xcd\x0c\xd0\xac\xcd\x0c\xd0\x14\xcd\x0cpd\xcd\x0c\x80\xab\xcd\x0c`Y\xe5\x0c\x98\x15\xcd\x0c0\x14\xcd\x0c\xe0_\xe5\x0c\xa0d\xcd\x0c\xe8\x15\xcd\x0c\x00Y\xe5\x0c\xd0d\xcd\x0c\xc0X\xe5\x0c \x15\xcd\x0c\xb8\xab\xcd\x0c`Y\xe5\x0c\xa0d\xcd\x0c\x98\x15\xcd\x0c \x15\xcd\x0c\xa0d\xcd\x0cH\x15\xcd\x0c\xa8\x14\xcd\x0c\xb8\x13\xcd\x0c\x98\x15\xcd\x0c \x15\xcd\x0c\xc0e\xcd\x0c\x80X\xe5\x0c\xc0\x15\xcd\x0c\xb8\xab\xcd\x0cp\x15\xcd\x0c@d\xcd\x0cH\x15\xcd\x0c\xc0\x15\xcd\x0c\xe8\x15\xcd\x0c\xb8\x13\xcd\x0c\xf8\x14\xcd\x0c\x00Y\xe5\x0c\xf8\x14\xcd\x0c\xd0d\xcd\x0cp\x15\xcd\x0c\xc0X\xe5\x0c X\xe5\x0c@d\xcd\x0c\x98\x15\xcd\x0c\xa8\x14\xcd\x0cpd\xcd\x0c\x08\x14\xcd\x0c\x10\x16\xcd\x0c\x00e\xcd\x0c\xc0\x15\xcd\x0c\xb8\xab\xcd\x0c\xf8\x14\xcd\x0cpd\xcd\x0c\xd0\x14\xcd\x0c\xc0e\xcd\x0c\x08\x14\xcd\x0c0\x14\xcd\x0c\xd0\x14\xcd\x0c\x90e\xcd\x0cpd\xcd\x0c\xc0\x15\xcd\x0c\xf8\x14\xcd\x0c\x10\x16\xcd\x0c\xa8\x14\xcd\x0c\x98\xac\xcd\x0cH\x15\xcd\x0c\xa8\x14\xcd\x0c\x80\xab\xcd\x0c\xc0\x15\xcd\x0c\xe0\x13\xcd\x0c\xf8\x14\xcd\x0c\xf0e\xcd\x0c@d\xcd\x0c\xa0d\xcd\x0c\x00e\xcd\x0c@d\xcd\x0c\x98\xac\xcd\x0c\xf8\x14\xcd\x0cH\x15\xcd\x0c\xa8\x14\xcd\x0c\x00e\xcd\x0c`e\xcd\x0c\xe8\x15\xcd\x0c\x98\x15\xcd\x0cH\x15\xcd\x0c \x15\xcd\x0c@d\xcd\x0c\xd0\x14\xcd\x0c\xf8\x14\xcd\x0c\xc0\x15\xcd\x0c\x00e\xcd\x0c\x00Y\xe5\x0c\xa8\x14\xcd\x0c\xb8\xab\xcd\x0c\xd0\x14\xcd\x0c\xc0X\xe5\x0c \x15\xcd\x0c\xf8\x14\xcd\x0c\xc0X\xe5\x0c\x98\xac\xcd\x0c\xe8\x15\xcd\x0c \x15\xcd\x0c@d\xcd\x0c`Y\xe5\x0c\x10\x16\xcd\x0c\x80\xab\xcd\x0c\xd0\x14\xcd\x0cp\x15\xcd\x0c\xf0\xab\xcd\x0c\xd0d\xcd\x0c\x80\xab\xcd\x0c`Y\xe5\x0c\xe8\x15\xcd\x0c\x00e\xcd\x0c \x15\xcd\x0c\xd0d\xcd\x0cH\x15\xcd\x0c\xc0X\xe5\x0c\xa8\x14\xcd\x0c\x80\xab\xcd\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S'\x00\x86\xae\r`\x87\xae\r\xe0\x87\xae\r\xc0\x86\xae\r\x00\x87\xae\r\xc0\x87\xae\r\xa0\x86\xae\r`\x86\xae\r\xc0\x85\xae\r\x80\x87\xae\r\x80\x88\xae\r\xe0\x86\xae\r@\x89\xae\r\xa0\x88\xae\r@\x86\xae\r\xa0\x85\xae\r \x89\xae\r\xc0\x88\xae\r\xe0\x85\xae\r@\x88\xae\r@\x87\xae\r \x87\xae\r\xe0\x80\xae\r\x80\x86\xae\r\x00\x8a\xae\r\x80\x89\xae\r\xa0\x87\xae\r\xe0\x88\xae\r\xa0\x84\xae\r\x00\x8b\xae\r\x00\x89\xae\r \x8b\xae\r@\x8b\xae\r\xc0\x89\xae\r\xa0\x8b\xae\r\xa0\x89\xae\r\x80\x8a\xae\r\xc0\x8a\xae\r \x88\xae\r@\x8c\xae\r\xe0\x8a\xae\r\x00\x8c\xae\r`\x8b\xae\r`\x8c\xae\r\xc0\x8c\xae\r\xe0\x89\xae\r`\x88\xae\r \x8d\xae\r`\x8a\xae\r\x00\x8d\xae\r\x00\x88\xae\r \x8a\xae\r\xc0\x8b\xae\r@\x8a\xae\r\xc0\x8d\xae\r@\x8e\xae\r\xe0\x8b\xae\r \x8c\xae\r`\x89\xae\r\xe0\x8c\xae\r\xe0\x8e\xae\r \x8e\xae\r\xa0\x8e\xae\r`\x8e\xae\r\x00\x8f\xae\r\xa0\x8d\xae\r\xc0\x8f\xae\r`\x8d\xae\r\x80\x8e\xae\r\xa0\x8a\xae\r\x80\x8c\xae\r\x80\x8f\xae\r\x80\x8b\xae\r\xe0\x8d\xae\r\x00\x8e\xae\r \x8f\xae\r@\x8f\xae\r \x86\xae\r\xc0\x8e\xae\r\xe0\x8f\xae\r@\x8d\xae\r\xa0\x8f\xae\r\x80\x15X\r\x80\x17X\r@\xc2\xea\x1e \xc2\xea\x1e\xc0\xc0\xea\x1e@\xc1\xea\x1e\x00\xc2\xea\x1e\xe0\xc0\xea\x1e`\xc0\xea\x1e\x00\xc1\xea\x1e\xa0\xc2\xea\x1e\xc0\xc2\xea\x1e`\xc2\xea\x1e\x80\xc2\xea\x1e\x00\xc3\xea\x1e\xe0\xc2\xea\x1e\x80\xc1\xea\x1e`\xc3\xea\x1e@\xc3\xea\x1e \xc0\xea\x1e\xc0\xc3\xea\x1e\xa0\xc3\xea\x1e\x00\xc4\xea\x1e \xc4\xea\x1e\xa0\xc0\xea\x1e\xc0\xc1\xea\x1e@\xc4\xea\x1e`\xc4\xea\x1e@\xc0\xea\x1e\xa0\xc4\xea\x1e`\xc1\xea\x1e \xc5\xea\x1e@\xc5\xea\x1e\xa0\xc1\xea\x1e\xe0\xc1\xea\x1e`\xc5\xea\x1e\xc0\xc5\xea\x1e\xa0\xc5\xea\x1e\x00\xc6\xea\x1e\xe0\xc5\xea\x1e@\xc6\xea\x1e \xc6\xea\x1e\x80\xc6\xea\x1e`\xc6\xea\x1e \xc3\xea\x1e\xa0\xc6\xea\x1e\xc0\xc6\xea\x1e \xc7\xea\x1e\x80\xc4\xea\x1e`\xc7\xea\x1e\x80\xc7\xea\x1e\xe0\xc3\xea\x1e\xe0\xc4\xea\x1e\xa0\xc7\xea\x1e\xc0\xc7\xea\x1e\xe0\xc7\xea\x1e@\xc8\xea\x1e \xc8\xea\x1e \xc1\xea\x1e`\xc8\xea\x1e\x80\xc8\xea\x1e\xa0\xc8\xea\x1e\x00\xc9\xea\x1e\xe0\xc8\xea\x1e\x00\xc5\xea\x1e`\xc9\xea\x1e\xe0\xc6\xea\x1e\x00\xc7\xea\x1e\x80\xc5\xea\x1e\x80\xc0\xea\x1e`\xca\xea\x1e@\xca\xea\x1e\xe0\xc9\xea\x1e \xca\xea\x1e\x80\xc3\xea\x1e\x00\xc8\xea\x1e\x80\xca\xea\x1e\xe0\xca\xea\x1e\xc0\xca\xea\x1e\xa0\xc9\xea\x1e@\xcb\xea\x1e \xcb\xea\x1e\xc0\xc4\xea\x1e`\xcb\xea\x1e\xc0\xcb\xea\x1e\xa0\xcb\xea\x1e\x00\xcc\xea\x1e \xcc\xea\x1e\xc0\xc9\xea\x1e`\xcc\xea\x1e@\xcc\xea\x1e\x00\xcb\xea\x1e\x80\xcc\xea\x1e\xa0\xcc\xea\x1e\x00\xcd\xea\x1e\xe0\xcc\xea\x1e@\xcd\xea\x1e`\xcd\xea\x1e\x80\xc9\xea\x1e\xa0\xca\xea\x1e\xc0\xcd\xea\x1e\xa0\xcd\xea\x1e@\xc7\xea\x1e \xce\xea\x1e\x00\xce\xea\x1e`\xce\xea\x1e@\xce\xea\x1e\xc0\xc8\xea\x1e\x80\xce\xea\x1e\xa0\xce\xea\x1e\xc0\xce\xea\x1e\xe0\xce\xea\x1e \xcd\xea\x1e \xc9\xea\x1e\x00\xcf\xea\x1e\xe0\xcb\xea\x1e\x80\xcf\xea\x1e\xe0\xcf\xea\x1e'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S'\x7f\xa7\n@\x05\xa7\x8a?\xc1\x8cH?\xc5\xc8\xac?2\xa9J@\x14"\xa2?3\xcc\xac?\xc3d\xa6? d\xa6?\xdf\x96\xb9?1\xaa\xaa?1\xec\xae?u\x85\x88?\x05Bd@\xc7\xdd\xfd?As\xb7?\xb93s?\x82`\x86?JB\x84?\xbeE\xa4?\xdc\x93Y?Bt\x97?+\x86\x88?B\x9c\t@2$\xc2?\xfa[\x86?(x\x97?\x88m\x97?\xaa\xb9\x0b@\x05\xa4\xd9?!\xca\x8c?\xac\xfe\xbf?\xf4\xed\xce?exw?D\xafZ@\x12\xedn?\xf8!b?\x8fU\x95?\x84yw?\xc3\xd7\x8c?\x1f\xba\xbb?\x03\xf0.?\xa1f\xa6?7\x00\xc0?\x16\xc0\x9b?\xe7t\x97?e\xcc\xac?L\xaa\xca?<\xa7\x8a?\xf5\x17\x91?A\xba\xbb?\x8e\xa8\xaa?\x8c\r\xb1?s\x84\x08@\x842C@\x18\x01\x80?\xact\x97?0\xfc\x7f?;\xd8]?\x0e\xc2\xfb?\'f\xa6?\xf22\xb3?2/\x93?\xe7\x8f\xb9?\xfb\xe1m@\xfb\x8aH?z\xbb{?ZR\xd5?\x10c\xa6?\xd3\x82\xd7?7c\x86?\x12\xabj?\xad\xdcm@\x02f\x86?\x8e\xcc\xac?\xc9\xed\x8e?X\x99\x99?2TE@g\xc9\x8c?\xee\x1f\xe2?(w\x97?\xeb\xa7:@\x0f\xdc\xfd?\xa0DD?=\xfa\x8e?\xc8\x0c\xb1?\x13\xff\xff?\x1e\x11\x91?\x832\xd3?\xdaw\xb7?\x06U%@L\xcdL?D0s?\x85\xa5j?A\x9fY?~\x88\x88?1\xee\xae?\xf0.s?\xd0\xb7\xdb?o3\xf3?\xde\xba\x9b?\xdfR\xb5?6\x1cb?\xa8\xdc\xfd?\xb7O\xc4?\xe8B\xc4?\x18f\x06@!\xef\x8e?N\x1e\xa2?\x1f\xab\x8a?\x0eSU?m\x99\x99?\xc8\x878@91S@\x99\x19b?*\xc8]?\xcf\xaaj?Oa7?\xe8\nQ?vef?\xd5\x8f7?i\xa9\x8a?\xb6\x0bQ?\x04\xa7j?\x04\x96\xd9?/vG@\xf6\x0cQ?\xb9gf?5\xbc{?\x08\xa9j?\xa0\t\x91?\xd5\xa2{?\xae@\xe4?|R\x95?\x8c\xdd\x1d?\t\xe6L?0\xaa\xca?\x1d\xfe\x7f?\x81e\xc6?s\xa7\x8a?\x0e\\D?P\xc2\x8c?\xc4[f?D\x0f\xf1?\xe7@\xa4?\xecp\x86?\xdbS\x95?|!\x12@5v\xb7?%\xebn?}\xean?P\x9a\x99?7DD?L\xee\x0e@\xfcf\xa6?;\x8aH?\xe0\x86(@\xf6\xab;?\xee\xec\xee?8\x96\xb9?\x86a\x95?Y\x97\x19@Wv\xf7?:hf?4\x0e\x91?\xf1wf?\x19o7?Zaf?.\x1d\x12@\xe0\xcdL?\xab\xa6*?{u\xb7?\x00\x0f\x91?\x12\xb3{?`\xbb\xbb?!P\xa4?\xe62\x03@\x16\xbf\xcc?%\xee\xee?\x1c\xcb\x8c?\xd6\t\xc0?\xc9!\xc2?\x85\x99Y?\xa0!\x82?Of\xc6?\x84if?\x9e\x0bQ?\x0f0\xb3?h\xedn?\x8c\xff\x9f?dlU?\x0e\x01@?6B\x04@vr7?\x17\xda\x9d?v\xabj?\xb3\xccL?>\x1f\x82?l3s?\xce\xb6{?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S'0\xbe \x05\xf8\xb3 \x05\xd07\xd1\x04\x18>\xd1\x04`;\xd1\x04\xb0?\xd1\x04x2\xd1\x04h<\xd1\x04`2\xd1\x04\xb03\xd1\x04H;\xd1\x04 ?\xd1\x04\x10:\xd1\x04\x08<\xd1\x04\x90>\xd1\x04\xc80\xd1\x04\xa01\xd1\x04x>\xd1\x0408\xd1\x04X7\xd1\x04`8\xd1\x04\xd01\xd1\x04\x989\xd1\x0402\xd1\x0405\xd1\x04\xd8>\xd1\x04H5\xd1\x04@=\xd1\x04\xd85\xd1\x04h6\xd1\x04(:\xd1\x04@:\xd1\x04p:\xd1\x04\xb0<\xd1\x04\xa8>\xd1\x04 6\xd1\x04x5\xd1\x048?\xd1\x04\xf80\xd1\x04\x182\xd1\x04x8\xd1\x04X4\xd1\x04\x188\xd1\x04`>\xd1\x04\xc05\xd1\x04h?\xd1\x04\xf86\xd1\x0483\xd1\x04\xf08\xd1\x04\xb09\xd1\x04\x806\xd1\x04\xf83\xd1\x04\x002\xd1\x04\x083\xd1\x04\xb00\xd1\x04\xd04\xd1\x04\xb06\xd1\x04\xe84\xd1\x04h3\xd1\x04(7\xd1\x048<\xd1\x04P9\xd1\x04\xd82\xd1\x04\x00;\xd1\x04\x905\xd1\x04\xa0:\xd1\x04\xe06\xd1\x04\xc8<\xd1\x04(4\xd1\x04\xe0<\xd1\x04\x00>\xd1\x04\x986\xd1\x04\x101\xd1\x04\xa04\xd1\x04(\x8a \x05\xb8\x8d \x05\x80\x86 \x05\x98\x8f \x05\x90\x8e \x05\xe0\x86 \x05\xa8\x88 \x058\x80 \x05\x08\x86 \x05P\x8f \x05\x08\x83 \x05@\x8a \x05\x18\x8b \x05p\x8d \x05X\x84 \x05\x10\x84 \x05x\x8e \x05\xd8\x8b \x05\x10\x8a \x05\x98\x86 \x05\x98\x83 \x05 \x8f \x05\x00\x88 \x05\xd0\x8a \x05\xf0\x88 \x05\xb8\x81 \x05\xe0\x8f \x05\x00\x8e \x05`\x8b \x050\x88 \x05\xb0\x8f \x05\xb8\x84 \x05\xa8\x8b \x05\x88\x81 \x05\x10\x8d \x058\x83 \x050\x82 \x05\xc8\x86 \x05H\x85 \x05\xd0\x84 \x05\xf0\x82 \x05\xa8\x82 \x05\xd8\x88 \x05P\x86 \x058\x89 \x05\xe8\x87 \x05\xf8\x89 \x058v \x05\xe0| \x05\xb0\x7f \x05`r \x05\xb0y \x05x~ \x05\xa8{ \x05@z \x05hy \x05\x80s \x05\xc0r \x05\x98s \x05Pp \x05\x88} \x05`u \x05Xw \x05\xc0x \x05hs \x05\xf8v \x05\xc0{ \x05\x18~ \x05\xa8x \x05@t \x05h| \x05P\x7f \x050u \x05Xz \x05 \x7f \x05\xe8q \x05(q \x05H{ \x05\x80| \x05\xc8v \x05\xd8;\xd1\x04\xd88\xd1\x04\x887\xd1\x04P<\xd1\x04\x809\xd1\x04\xf05\xd1\x04\x884\xd1\x04\xc02\xd1\x04P6\xd1\x04\xa8;\xd1\x04\x908\xd1\x04\x18;\xd1\x04`5\xd1\x04X1\xd1\x04H2\xd1\x04\x803\xd1\x04\xc08\xd1\x04\x80<\xd1\x04H8\xd1\x04\xf0>\xd1\x04\x107\xd1\x04\x98?\xd1\x04\xb8=\xd1\x04\xe03\xd1\x0486\xd1\x04\x008\xd1\x04\x88:\xd1\x04P3\xd1\x04\xb87\xd1\x04\xa07\xd1\x04\x80?\xd1\x04\x88=\xd1\x04H>\xd1\x0489\xd1\x04\xc0;\xd1\x04\xe8:\xd1\x04\xc83\xd1\x04\xb84\xd1\x04\xe0?\xd1\x04\xf89\xd1\x04\xc0>\xd1\x040;\xd1\x04\xf0;\xd1\x040>\xd1\x04p7\xd1\x04\xa85\xd1\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3739
sg3633
g3735
sg3647
g3746
sg3642
g3743
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3756
sg3633
g3752
sg3647
g3763
sg3642
g3760
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3773
sg3633
g3769
sg3647
g3780
sg3642
g3777
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3807
sg3633
g3803
sg3647
g3814
sg3642
g3811
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3824
sg3633
g3820
sg3647
g3831
sg3642
g3828
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3841
sg3633
g3837
sg3647
g3848
sg3642
g3845
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3858
sg3633
g3854
sg3647
g3865
sg3642
g3862
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3638
sg3633
g3871
sg3647
g3648
sg3642
g3878
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3903
sg3633
g3899
sg3647
g3910
sg3642
g3907
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3824
sg3633
g3820
sg3647
g3831
sg3642
g3828
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3698
sg3633
g3929
sg3647
g3692
sg3642
g3936
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3858
sg3633
g3944
sg3647
g3865
sg3642
g3951
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3638
sg3633
g3871
sg3647
g3648
sg3642
g3878
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3976
sg3633
g3972
sg3647
g3983
sg3642
g3980
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g4012
sg3633
g4002
sg3647
g4006
sg3642
g4010
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g3658
sg3633
g4019
sg3647
g3665
sg3642
g4026
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g4038
sg3633
g4034
sg3647
g4045
sg3642
g4042
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3658
sg3633
g4019
sg3647
g3665
sg3642
g4026
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g4074
sg3633
g4064
sg3647
g4068
sg3642
g4072
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g4098
sg3633
g4094
sg3647
g4105
sg3642
g4102
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g3807
sg3633
g4111
sg3647
g3814
sg3642
g4118
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g3675
sg3633
g4126
sg3647
g3682
sg3642
g4133
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g3807
sg3633
g3803
sg3647
g3814
sg3642
g3811
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g3903
sg3633
g3899
sg3647
g3910
sg3642
g3907
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g4074
sg3633
g4180
sg3647
g4068
sg3642
g4187
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g3790
sg3633
g4195
sg3647
g3797
sg3642
g4202
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g3976
sg3633
g4210
sg3647
g3983
sg3642
g4217
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g3903
sg3633
g3899
sg3647
g3910
sg3642
g3907
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g3709
sg3633
g4238
sg3647
g3716
sg3642
g4245
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g3976
sg3633
g4210
sg3647
g3983
sg3642
g4217
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g3903
sg3633
g3899
sg3647
g3910
sg3642
g3907
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g3858
sg3633
g3944
sg3647
g3865
sg3642
g3951
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g3675
sg3633
g4126
sg3647
g3682
sg3642
g4133
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g3824
sg3633
g4305
sg3647
g3831
sg3642
g4312
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g4098
sg3633
g4320
sg3647
g4105
sg3642
g4327
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g3841
sg3633
g4348
sg3647
g3848
sg3642
g4355
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g3824
sg3633
g4305
sg3647
g3831
sg3642
g4312
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g3841
sg3633
g3837
sg3647
g3848
sg3642
g3845
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g4098
sg3633
g4320
sg3647
g4105
sg3642
g4327
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g4419
sg3633
g4415
sg3647
g4426
sg3642
g4423
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g3698
sg3633
g3929
sg3647
g3692
sg3642
g3936
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g3807
sg3633
g4111
sg3647
g3814
sg3642
g4118
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g4074
sg3633
g4180
sg3647
g4068
sg3642
g4187
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g3675
sg3633
g4126
sg3647
g3682
sg3642
g4133
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g3739
sg3633
g3735
sg3647
g3746
sg3642
g3743
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g3773
sg3633
g4510
sg3647
g3780
sg3642
g4517
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g3858
sg3633
g3944
sg3647
g3865
sg3642
g3951
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g4012
sg3633
g4538
sg3647
g4006
sg3642
g4545
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g3756
sg3633
g4553
sg3647
g3763
sg3642
g4560
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g4038
sg3633
g4034
sg3647
g4045
sg3642
g4042
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g3773
sg3633
g3769
sg3647
g3780
sg3642
g3777
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g3698
sg3633
g3929
sg3647
g3692
sg3642
g3936
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g3773
sg3633
g4510
sg3647
g3780
sg3642
g4517
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g3790
sg3633
g4195
sg3647
g3797
sg3642
g4202
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g3739
sg3633
g4659
sg3647
g3746
sg3642
g4666
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g4098
sg3633
g4094
sg3647
g4105
sg3642
g4102
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g3858
sg3633
g3854
sg3647
g3865
sg3642
g3862
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g3739
sg3633
g4659
sg3647
g3746
sg3642
g4666
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g4419
sg3633
g4713
sg3647
g4426
sg3642
g4720
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g3841
sg3633
g4348
sg3647
g3848
sg3642
g4355
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g3638
sg3633
g3871
sg3647
g3648
sg3642
g3878
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g3773
sg3633
g3769
sg3647
g3780
sg3642
g3777
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g3698
sg3633
g3929
sg3647
g3692
sg3642
g3936
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g4012
sg3633
g4002
sg3647
g4006
sg3642
g4010
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g4098
sg3633
g4320
sg3647
g4105
sg3642
g4327
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g4074
sg3633
g4180
sg3647
g4068
sg3642
g4187
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g3773
sg3633
g3769
sg3647
g3780
sg3642
g3777
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g3790
sg3633
g4195
sg3647
g3797
sg3642
g4202
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g4074
sg3633
g4064
sg3647
g4068
sg3642
g4072
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g3858
sg3633
g3854
sg3647
g3865
sg3642
g3862
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g3709
sg3633
g4238
sg3647
g3716
sg3642
g4245
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g3658
sg3633
g4019
sg3647
g3665
sg3642
g4026
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g3903
sg3633
g4936
sg3647
g3910
sg3642
g4943
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g3807
sg3633
g3803
sg3647
g3814
sg3642
g3811
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g4012
sg3633
g4538
sg3647
g4006
sg3642
g4545
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g3824
sg3633
g3820
sg3647
g3831
sg3642
g3828
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g3858
sg3633
g3854
sg3647
g3865
sg3642
g3862
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g3790
sg3633
g4195
sg3647
g3797
sg3642
g4202
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g4012
sg3633
g4002
sg3647
g4006
sg3642
g4010
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g3858
sg3633
g3944
sg3647
g3865
sg3642
g3951
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g3976
sg3633
g3972
sg3647
g3983
sg3642
g3980
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g4419
sg3633
g4415
sg3647
g4426
sg3642
g4423
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g3824
sg3633
g3820
sg3647
g3831
sg3642
g3828
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g3790
sg3633
g4195
sg3647
g3797
sg3642
g4202
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g4012
sg3633
g4002
sg3647
g4006
sg3642
g4010
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g3903
sg3633
g4936
sg3647
g3910
sg3642
g4943
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g3807
sg3633
g3803
sg3647
g3814
sg3642
g3811
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g3756
sg3633
g4553
sg3647
g3763
sg3642
g4560
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g3824
sg3633
g4305
sg3647
g3831
sg3642
g4312
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g3841
sg3633
g3837
sg3647
g3848
sg3642
g3845
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g3739
sg3633
g3735
sg3647
g3746
sg3642
g3743
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g3976
sg3633
g4210
sg3647
g3983
sg3642
g4217
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g3756
sg3633
g4553
sg3647
g3763
sg3642
g4560
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g3709
sg3633
g4238
sg3647
g3716
sg3642
g4245
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g3824
sg3633
g4305
sg3647
g3831
sg3642
g4312
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g4038
sg3633
g4034
sg3647
g4045
sg3642
g4042
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g3658
sg3633
g4019
sg3647
g3665
sg3642
g4026
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g4038
sg3633
g4034
sg3647
g4045
sg3642
g4042
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g3903
sg3633
g3899
sg3647
g3910
sg3642
g3907
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g3841
sg3633
g3837
sg3647
g3848
sg3642
g3845
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g3807
sg3633
g4111
sg3647
g3814
sg3642
g4118
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g4419
sg3633
g4415
sg3647
g4426
sg3642
g4423
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g3739
sg3633
g3735
sg3647
g3746
sg3642
g3743
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g4419
sg3633
g4415
sg3647
g4426
sg3642
g4423
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g3773
sg3633
g4510
sg3647
g3780
sg3642
g4517
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g3756
sg3633
g4553
sg3647
g3763
sg3642
g4560
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g3638
sg3633
g3871
sg3647
g3648
sg3642
g3878
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g4098
sg3633
g4320
sg3647
g4105
sg3642
g4327
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g3756
sg3633
g3752
sg3647
g3763
sg3642
g3760
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g3824
sg3633
g3820
sg3647
g3831
sg3642
g3828
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g4038
sg3633
g5458
sg3647
g4045
sg3642
g5465
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g3773
sg3633
g4510
sg3647
g3780
sg3642
g4517
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g4074
sg3633
g4064
sg3647
g4068
sg3642
g4072
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g3903
sg3633
g4936
sg3647
g3910
sg3642
g4943
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g3756
sg3633
g3752
sg3647
g3763
sg3642
g3760
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g3709
sg3633
g4238
sg3647
g3716
sg3642
g4245
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g4074
sg3633
g4064
sg3647
g4068
sg3642
g4072
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g3858
sg3633
g3854
sg3647
g3865
sg3642
g3862
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g3773
sg3633
g4510
sg3647
g3780
sg3642
g4517
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g3756
sg3633
g3752
sg3647
g3763
sg3642
g3760
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g4038
sg3633
g5458
sg3647
g4045
sg3642
g5465
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g3638
sg3633
g3871
sg3647
g3648
sg3642
g3878
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g4419
sg3633
g4713
sg3647
g4426
sg3642
g4720
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g3841
sg3633
g4348
sg3647
g3848
sg3642
g4355
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g3976
sg3633
g3972
sg3647
g3983
sg3642
g3980
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g4419
sg3633
g4713
sg3647
g4426
sg3642
g4720
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g3756
sg3633
g4553
sg3647
g3763
sg3642
g4560
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g4038
sg3633
g5458
sg3647
g4045
sg3642
g5465
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g3976
sg3633
g3972
sg3647
g3983
sg3642
g3980
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g3739
sg3633
g4659
sg3647
g3746
sg3642
g4666
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g3858
sg3633
g3944
sg3647
g3865
sg3642
g3951
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g4098
sg3633
g4320
sg3647
g4105
sg3642
g4327
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g3739
sg3633
g4659
sg3647
g3746
sg3642
g4666
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g3841
sg3633
g4348
sg3647
g3848
sg3642
g4355
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g4038
sg3633
g5458
sg3647
g4045
sg3642
g5465
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g3976
sg3633
g4210
sg3647
g3983
sg3642
g4217
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g4419
sg3633
g4415
sg3647
g4426
sg3642
g4423
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g4098
sg3633
g4094
sg3647
g4105
sg3642
g4102
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g3773
sg3633
g3769
sg3647
g3780
sg3642
g3777
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g3976
sg3633
g4210
sg3647
g3983
sg3642
g4217
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g4012
sg3633
g4538
sg3647
g4006
sg3642
g4545
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g3739
sg3633
g3735
sg3647
g3746
sg3642
g3743
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g4074
sg3633
g4180
sg3647
g4068
sg3642
g4187
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g4038
sg3633
g4034
sg3647
g4045
sg3642
g4042
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g3756
sg3633
g3752
sg3647
g3763
sg3642
g3760
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g4098
sg3633
g4094
sg3647
g4105
sg3642
g4102
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g4419
sg3633
g4713
sg3647
g4426
sg3642
g4720
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g3824
sg3633
g4305
sg3647
g3831
sg3642
g4312
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g4074
sg3633
g4064
sg3647
g4068
sg3642
g4072
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g3807
sg3633
g3803
sg3647
g3814
sg3642
g3811
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g4012
sg3633
g4538
sg3647
g4006
sg3642
g4545
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g4038
sg3633
g5458
sg3647
g4045
sg3642
g5465
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g3807
sg3633
g4111
sg3647
g3814
sg3642
g4118
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g3841
sg3633
g4348
sg3647
g3848
sg3642
g4355
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g3709
sg3633
g4238
sg3647
g3716
sg3642
g4245
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g4012
sg3633
g4538
sg3647
g4006
sg3642
g4545
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g3739
sg3633
g4659
sg3647
g3746
sg3642
g4666
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g3698
sg3633
g3929
sg3647
g3692
sg3642
g3936
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g3675
sg3633
g4126
sg3647
g3682
sg3642
g4133
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g4074
sg3633
g4180
sg3647
g4068
sg3642
g4187
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g3841
sg3633
g3837
sg3647
g3848
sg3642
g3845
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g3658
sg3633
g4019
sg3647
g3665
sg3642
g4026
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g3903
sg3633
g4936
sg3647
g3910
sg3642
g4943
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g4098
sg3633
g4094
sg3647
g4105
sg3642
g4102
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g4012
sg3633
g4002
sg3647
g4006
sg3642
g4010
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g3903
sg3633
g4936
sg3647
g3910
sg3642
g4943
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g3976
sg3633
g3972
sg3647
g3983
sg3642
g3980
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g3807
sg3633
g4111
sg3647
g3814
sg3642
g4118
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g4419
sg3633
g4713
sg3647
g4426
sg3642
g4720
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g3675
sg3633
g4126
sg3647
g3682
sg3642
g4133
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I82964816
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S'@\xe3\xd3\x1eh\xe3\xd3\x1e\x90\xe3\xd3\x1e\x90\xeb\xd2\x1e\x90\xe3\xd3\x1e\xb8\xe3\xd3\x1e \xf1\xd3\x1e\xe0\xe3\xd3\x1e\x08\xe4\xd3\x1eh\xe3\xd3\x1e@\xe3\xd3\x1e0\xe4\xd3\x1e\x90\xeb\xd2\x1e\xe0\xd1\xd3\x1eX\xe4\xd3\x1e \xf1\xd3\x1e\xe0\xd1\xd3\x1e\xc0\xeb\xd2\x1e@\xf1\xd3\x1e\x80\xe4\xd3\x1eX\xe4\xd3\x1eh\xe3\xd3\x1e\x18\xd2\xd3\x1e@\xe3\xd3\x1e\x10\xed\xd2\x1e0\xe4\xd3\x1e\x18\xd2\xd3\x1e\xc0\xeb\xd2\x1e \xec\xd2\x1e\xe0\xd1\xd3\x1e@\xf1\xd3\x1e\x90\xe3\xd3\x1e`\xf1\xd3\x1e\x90\xeb\xd2\x1e\x08\xe4\xd3\x1e@\xf1\xd3\x1ep\xe5\xd3\x1e@\xe3\xd3\x1eP\xd2\xd3\x1e\xb8\xe3\xd3\x1e\xe0\xe3\xd3\x1e \xf1\xd3\x1eP\xec\xd2\x1eh\xe3\xd3\x1e0\xe4\xd3\x1e \xf1\xd3\x1e@\xe3\xd3\x1e\x90\xeb\xd2\x1e\xb8\xe3\xd3\x1e\x08\xe4\xd3\x1eP\xec\xd2\x1e\x80\xe4\xd3\x1eP\xec\xd2\x1e\xa8\xe4\xd3\x1eX\xe4\xd3\x1e`\xf1\xd3\x1e\xf0\xeb\xd2\x1e\xe0\xe3\xd3\x1e\x80\xe4\xd3\x1e\x08\xe4\xd3\x1e\x18\xd2\xd3\x1e\xa0\xf1\xd3\x1e\x18\xd2\xd3\x1e\xb8\xe3\xd3\x1e@\xe3\xd3\x1e\xb8\xe3\xd3\x1e0\xe4\xd3\x1e\x90\xe3\xd3\x1e@\xe3\xd3\x1eh\xe3\xd3\x1e\x90\xe3\xd3\x1e \xec\xd2\x1eP\xec\xd2\x1e0\xd3\xd3\x1e\x90\xe3\xd3\x1e\x80\xe4\xd3\x1e\xa8\xe4\xd3\x1e \xec\xd2\x1e\x18\xd2\xd3\x1e`\xf1\xd3\x1e\x08\xe4\xd3\x1e\x90\xe3\xd3\x1e\xa0\xed\xd2\x1e\xe0\xd1\xd3\x1e\x98\xe5\xd3\x1e\xe0\xd1\xd3\x1e\xe0\xe3\xd3\x1e\x18\xd2\xd3\x1e\xa0\xed\xd2\x1e0\xe4\xd3\x1e\xc0\xeb\xd2\x1e\xf8\xe4\xd3\x1e\x90\xeb\xd2\x1e\xc0\xd2\xd3\x1e@\xe3\xd3\x1e@\xed\xd2\x1e\xc0\xeb\xd2\x1e\xe0\xd1\xd3\x1e@\xf1\xd3\x1e\xf0\xeb\xd2\x1e\xc0\xd2\xd3\x1e \xec\xd2\x1e@\xf1\xd3\x1eh\xe3\xd3\x1e\xe0\xd1\xd3\x1eX\xe4\xd3\x1e`\xf1\xd3\x1e\x18\xd2\xd3\x1e@\xed\xd2\x1e \xf1\xd3\x1e\xe0\xec\xd2\x1eh\xe3\xd3\x1e\x08\xe4\xd3\x1e0\xe4\xd3\x1e\xc0\xeb\xd2\x1e\xf0\xeb\xd2\x1e\x08\xe4\xd3\x1e\xe0\xd1\xd3\x1eP\xec\xd2\x1e\xf0\xeb\xd2\x1e \xec\xd2\x1e`\xf1\xd3\x1e\xa8\xe4\xd3\x1e0\xe4\xd3\x1e\xe0\xe3\xd3\x1e\x88\xd2\xd3\x1e\xb8\xe3\xd3\x1e\x80\xe4\xd3\x1e\xc0\xeb\xd2\x1eX\xe4\xd3\x1e@\xf1\xd3\x1e\x90\xeb\xd2\x1e`\xf1\xd3\x1eP\xec\xd2\x1e\xb0\xec\xd2\x1e\xc0\xeb\xd2\x1e\xe0\xe3\xd3\x1e\xb8\xe3\xd3\x1eP\xec\xd2\x1e\xc0\xeb\xd2\x1e\x08\xe4\xd3\x1e`\xf1\xd3\x1e\xe0\xe3\xd3\x1eh\xe3\xd3\x1e\x80\xe4\xd3\x1e\xe0\xe3\xd3\x1eP\xec\xd2\x1e\x90\xeb\xd2\x1e`\xf1\xd3\x1e \xf1\xd3\x1e\xb8\xe3\xd3\x1eP\xec\xd2\x1e\xb0\xec\xd2\x1e\xb8\xe3\xd3\x1e\xa0\xed\xd2\x1eh\xe3\xd3\x1e\x90\xe3\xd3\x1e \xec\xd2\x1ep\xed\xd2\x1e\x90\xeb\xd2\x1e@\xf1\xd3\x1e\x80\xf1\xd3\x1eX\xe4\xd3\x1e\xf0\xeb\xd2\x1e`\xf1\xd3\x1eX\xe4\xd3\x1e\x80\xe4\xd3\x1e\x18\xd2\xd3\x1e\xa8\xe4\xd3\x1e\x80\xf1\xd3\x1e \xf1\xd3\x1e \xec\xd2\x1e\xa8\xe4\xd3\x1e \xf1\xd3\x1e\xe0\xd1\xd3\x1e\x08\xe4\xd3\x1eX\xe4\xd3\x1e\x08\xe4\xd3\x1e\xc0\xeb\xd2\x1eX\xe4\xd3\x1e\xe0\xd1\xd3\x1e\x80\xec\xd2\x1e0\xe4\xd3\x1e@\xe3\xd3\x1e\xf0\xeb\xd2\x1e\xa8\xe4\xd3\x1eX\xe4\xd3\x1e@\xf1\xd3\x1e\xf0\xeb\xd2\x1e\x90\xeb\xd2\x1e0\xd3\xd3\x1e\x18\xd2\xd3\x1e\x80\xe4\xd3\x1e\xf0\xeb\xd2\x1e\x80\xe4\xd3\x1e`\xf1\xd3\x1e0\xe4\xd3\x1e \xec\xd2\x1e\xa8\xe4\xd3\x1e\xf0\xeb\xd2\x1e'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S'\xe0\x10X\r`\xf2\xd3\x1e\x00\xf3\xd3\x1e \xf3\xd3\x1e\xa0\xf3\xd3\x1e\xe0\xf1\xd3\x1e\xe0\xf3\xd3\x1e\x80\xf2\xd3\x1e\xc0\xf2\xd3\x1e \xf4\xd3\x1e\x00\xf4\xd3\x1e`\xf3\xd3\x1e`\xf4\xd3\x1e\x80\xf4\xd3\x1e\xe0\xf4\xd3\x1e\xc0\xf4\xd3\x1e\xe0\xf2\xd3\x1e\x00\xf5\xd3\x1e \xf5\xd3\x1e@\xf5\xd3\x1e`\xf5\xd3\x1e\x80\xf5\xd3\x1e\xe0\xf5\xd3\x1e\xc0\xf5\xd3\x1e \xf6\xd3\x1e\x00\xf6\xd3\x1e`\xf6\xd3\x1e@\xf6\xd3\x1e\xa0\xf6\xd3\x1e\x80\xf6\xd3\x1e\xe0\xf6\xd3\x1e\x00\xf7\xd3\x1e \xf2\xd3\x1e\xa0\xf5\xd3\x1e`\xf7\xd3\x1e\x80\xf7\xd3\x1e\xa0\xf7\xd3\x1e@\xf4\xd3\x1e\xc0\xf3\xd3\x1e\x00\xf8\xd3\x1e\xe0\xf7\xd3\x1e\xa0\xf4\xd3\x1e`\xf8\xd3\x1e@\xf8\xd3\x1e@\xf7\xd3\x1e\x80\xf8\xd3\x1e\xa0\xf8\xd3\x1e\xc0\xf8\xd3\x1e \xf9\xd3\x1e@\xf9\xd3\x1e\xc0\xf7\xd3\x1e \xf8\xd3\x1e\xa0\xf2\xd3\x1e\xc0\xf9\xd3\x1e\xa0\xf9\xd3\x1e@\xf2\xd3\x1e \xfa\xd3\x1e@\xfa\xd3\x1e`\xfa\xd3\x1e\x80\xfa\xd3\x1e`\xf9\xd3\x1e \xf7\xd3\x1e\xe0\xfa\xd3\x1e\xc0\xfa\xd3\x1e@\xf3\xd3\x1e@\xfb\xd3\x1e \xfb\xd3\x1e\x80\xfb\xd3\x1e\xa0\xfb\xd3\x1e\x80\xf9\xd3\x1e\x00\xfa\xd3\x1e\xc0\xfb\xd3\x1e\xe0\xfb\xd3\x1e\x00\xfc\xd3\x1e \xfc\xd3\x1e\x80\xfc\xd3\x1e`\xfc\xd3\x1e\x00\xfb\xd3\x1e\xe0\xfc\xd3\x1e\x00\xfd\xd3\x1e\xa0\xfa\xd3\x1e\x00\xf2\xd3\x1e`\xfd\xd3\x1e\x80\xfd\xd3\x1e@\xfc\xd3\x1e\x00\xf9\xd3\x1e\xe0\xfd\xd3\x1e\xc0\xfd\xd3\x1e \xfe\xd3\x1e\x00\xfe\xd3\x1e`\xfe\xd3\x1e\x80\xfe\xd3\x1e@\xfd\xd3\x1e\xc0\xf6\xd3\x1e\xe0\xfe\xd3\x1e\x00\xff\xd3\x1e`\xfb\xd3\x1e\xa0\xff\xd3\x1e@\xfe\xd3\x1e\xa0\xfe\xd3\x1e\xc0\xff\xd3\x1e@\xff\xd3\x1e\x80\xf3\xd3\x1e\xc0\xfe\xd3\x1e\xe0\xf9\xd3\x1e\xe0\xf8\xd3\x1e`\xff\xd3\x1e\xe0\xff\xd3\x1e \xff\xd3\x1e\xa0\xfd\xd3\x1e\x80\xff\xd3\x1e \xfd\xd3\x1e@\xc9\xea\x1e\xa0\x8c\xae\r P9\x1f@R9\x1f`P9\x1f\x80Q9\x1f Q9\x1f\x80P9\x1f\xe0Q9\x1f`R9\x1f\xc0Q9\x1f\x80R9\x1f\xa0R9\x1f\xe0R9\x1f\x00S9\x1f\x00Q9\x1f@S9\x1f`S9\x1f\xa0Q9\x1f\xa0P9\x1f\x80S9\x1f\xa0S9\x1f\xc0S9\x1f\xe0S9\x1f@T9\x1f T9\x1f S9\x1f\xa0T9\x1f\x80T9\x1f@P9\x1f\xc0T9\x1f\xe0T9\x1f@U9\x1f U9\x1f\xc0R9\x1f`U9\x1f\x80U9\x1f\xe0U9\x1f\x00V9\x1f`T9\x1f@V9\x1f V9\x1f\x00R9\x1f`V9\x1f\x80V9\x1f\xe0V9\x1f\xc0V9\x1f\xc0P9\x1f@W9\x1f`W9\x1f\xa0W9\x1f@Q9\x1f\xe0P9\x1f\xe0W9\x1f\x80W9\x1f\x00U9\x1f@X9\x1f X9\x1f\xc0W9\x1f`X9\x1f\xc0X9\x1f\xe0X9\x1f\x00Y9\x1f`Q9\x1f\xa0V9\x1f`Y9\x1f\x80Y9\x1f\x00W9\x1f\xa0U9\x1f\xa0Y9\x1f\x00Z9\x1f Z9\x1f\x00X9\x1f`Z9\x1f@Z9\x1f R9\x1f\x80Z9\x1f\xa0Z9\x1f\xc0Z9\x1f [9\x1f@[9\x1f\xa0X9\x1f W9\x1f`[9\x1f\x80[9\x1f\xe0[9\x1f\xc0[9\x1f\x80X9\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'\x11\xc8\x8c?\x0c\xca\xcc?\xd2\x10\x91?\x0c\x82H?Lu\xd7?S\x14\x91?\xe5\xa8\n@-\xff\x0f@\x12\xc9\xac?\xea\x86\x88?\xf09b?\x15\xef\x8e?L\rQ?\x9a\xaa\n@\x95Q\xf5?T/\xa2?c3s?\x1c0\x93?\xa4\xf1\x8e?\xafb\x86?\xba\xbb\x9b?\x7fc\x86?\xc2\x04Q?\x82\r\xb1?\xbf\x98\xd9?Wf&@\x8f\rQ?,\x0e\xb1?\xf9\xc9\x8c?\xa4"\xa2?4\xf0\xce?@\xb8\xdb?\x10\x86X@\xc4\x10\x91?\x81C\x84?\xc4\xf7\xae?yP\xb5?\xc42\xd3?\x982\x93?/\xee??\xb8\x11\x91?/\x95\xd9?\x0e\xcc\x8c?\x92S\x05@\x0c#\x82?\x9aO\x84?5\xeen?\r\xabj?\x02\xe6\xae?\x05A\xc4?\x01\x16\x11@erw?\xbf\x98\xd9?8\x87\xe8?$u7@\xa8\xbb\x0b@\xa8\xc9\\@}\xdc\r@\xd8\x0ea@K\xf6]?\xdbow?\xc6\x97\x99?s\x83\x08@\x8cJ\xb5?\xb5\xff\xdf?\xf0\x1a\x82?\xdddV@\x0f\xb6{?\x10\xfd\x9f?\xc6\xc6;?\x0bKf? \xb4;?\xb3\xfb\x9f?\xafT\xb5?6l\x06@\x8bf\x86?\xca"b?I\xecn?\xb8Zf?\xd1\xf9\xce?\xe0ef?\xa0\xb8\x9b?\x9dv\xd7?Y!\x82?\xd7\xb9\x0b@\x12af?\xdb\xc8\xec?\xc1\xe7.?\x13\xc9\xcc?\xc8e\xa6?5?D?10s?\'\xa9J@\xac\xee\xce?\xed1#@[d\x16@?\xfa\x7f?\xdc\x89H?\xc4\xa7\x8a?\xbf=\xf3?\x1d\xbb\xfb?\xee.3?b\x1e\xc2?\xd6 \xa2?\xea\xab\xca?O\xfe\xbf?Tww?s\xd1]?\x91^f?\xa4\xd2\x8c?\xadT\xb5?P\x1e\xa2?\xb7\xa9\xaa?\\1\xf3?\xd4\xb0\n@\x1b\x88\x08@\x8c!\x02@\x9b\x85\x88?\xea\x1e\xa2?\xa0\xb0\n@\xb5U\x95?P\x10\x11@\xf6\xa7\x8a?\xe6/\xb3?\xb5\xdd\xdd?c\x98\t@\x99\xe9.@\xea\xa8\x8a?\xe9\xea\xae?\xcf\xbb\x9b?\x98B\xa4?"\xdc\r@\xfd\x97\xd9?\xfc\xcb\x0c@\x81\xa0H?\x95s7?"\x11\xb1?)>$@A\x00\xc0?<\x888@\x952\xf3?\xf1\xdd\x9d?\x14U\xb5?E\xfb\x9f?\x9c\xd7\x8c?]v\x07@\x03\x19\x02@\xd12\xb3?pt\xd7?\xa5\xcd\x8c?;k\xb7?y1\x03@1.s?\x13\xa5*@y\xa4\xb9?5\xed\xae?tff?$\x00@?\x7fc\x86?\t\x8c\xc8?\x1b\x0e\xb1?\xfed\x16@\xb1v\xf7?\x82\x10\x01@\xfc\xf9\x8e?\x04\xdd\x9d?\xc7\x96\xb9?u\xa4\x8a?\x1e\x99\x99?Q,\xe2?\xde\x10\x91?\xe3u\x97?Kf\xa6?(\xab\xca?\x85\xbd\x9b?sD\x84?\x88\xef\x8e?\xf1\xdd\x9d?\x00CD?U\xb3\x8a?M\x89\xb7?=\x17\x82?(\xa8\x1a@u1\x13@`Ks?\xa3\x98\xb9?c\xa7\xaa?0"\x82?"\x85H@,\xe0]?yVU?\xc7\xf7\x7f?\xf4.\xd3?\x1b\x87\xa8?\x02[D?4v\x97?\xde\x87\xc8?\xcahf?\x89qw?\xc6\xcf\x8c?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S'\xa07\xd0\x04p\xe7T\x03\xc8\xc9\xea\x0c(\xc7\xea\x0cx\xc8\xea\x0c\xe0\xc6\xea\x0c8\xcc\xea\x0c\x98\xcf\xea\x0c@\xcd\xea\x0c\xf0\xce\xea\x0c\xa8\xc5\xea\x0ch\xcc\xea\x0cH\xce\xea\x0cX\xc1\xea\x0c\xf0\xc2\xea\x0c \xcf\xea\x0cp\xc7\xea\x0c\xd8\xce\xea\x0c`\xc5\xea\x0c8\xc9\xea\x0c\x90\xc8\xea\x0c\xd0\xc7\xea\x0c\x18\xce\xea\x0ch\xc9\xea\x0c0\xce\xea\x0c\xb8\xca\xea\x0cX\xcd\xea\x0cp\xc1\xea\x0c\x98\xc0\xea\x0c@\xc7\xea\x0c\xe8\xc7\xea\x0cx\xce\xea\x0c\xe8\xc1\xea\x0cP\xc9\xea\x0c\xc8\xcf\xea\x0c\xc0\xce\xea\x0c\x00\xbe\x1c\x05\xa8\xbb\x1c\x05\xe8\xb7\x1c\x058\xb9\x1c\x05 \xb6\x1c\x05\x00\xb5\x1c\x05\x90\xb8\x1c\x05@\xb1\x1c\x05\xe0\xbf\x1c\x05\xb8\xb7\x1c\x05\xb0\xb9\x1c\x05\x88\xb4\x1c\x05\xb0\xb0\x1c\x05\xd8\xbb\x1c\x050\xb5\x1c\x05\xd0\xba\x1c\x05\x08\xb3\x1c\x05`\xb2\x1c\x05\x98\xb0\x1c\x05\x88\xbd\x1c\x05\x10\xb7\x1c\x05P\xb3\x1c\x05\x80\xb9\x1c\x05\xb8\xb1\x1c\x05\xe0\xb0\x1c\x058\xb6\x1c\x05`\xb8\x1c\x05@\xb4\x1c\x05H\xb8\x1c\x05\xe0\xb3\x1c\x05\xc8\xb3\x1c\x05\x90\xb2\x1c\x05h\xb9\x1c\x05\xe0\xb6\x1c\x05 \xb0\x1c\x05\xb0\xb3\x1c\x05\x08\xb6\x1c\x05\x10\xb4\x1c\x05\xd0\xb7\x1c\x05p\xb4\x1c\x05P\xb9\x1c\x05\xc0\xb8\x1c\x05\xc0\xb2\x1c\x05h\xbf\x1c\x05\xe8\xb4\x1c\x05 \xbc\x1c\x05\xe8\xba\x1c\x05\xa0\xba\x1c\x05\xd0\xb1\x1c\x05\x98\xb3\x1c\x05h\xb0\x1c\x05\xf8\xb9\x1c\x05\xa8\xb5\x1c\x05@\xba\x1c\x05\xc8\xb6\x1c\x05\xe0\xb9\x1c\x05\xe8\xb1\x1c\x05h\xb3\x1c\x05\x90\xbe\x1c\x05p\xba\x1c\x05\xc8\xbf\x1c\x05 \xb9\x1c\x05X\xba\x1c\x05\x90\xbb\x1c\x05P\xb6\x1c\x05(\xba\x1c\x05\x18\xb5\x1c\x05 \xb3\x1c\x05\x80\xb3\x1c\x05\xb0\xbf\x1c\x05\xc8\xbc\x1c\x05`\xb5\x1c\x05\xb0\xbc\x1c\x05\xf0\xb8\x1c\x05\xa0\xb1\x1c\x05\xc0\xb5\x1c\x05\x08\xbc\x1c\x058\xb0\x1c\x05\x00\xbb\x1c\x05\x10\xbd\x1c\x05\xd8\xb5\x1c\x050\xbb\x1c\x05\xa0\xb4\x1c\x05(\xb4\x1c\x05\xd0\xb4\x1c\x05x\xb5\x1c\x05p\xb1\x1c\x05x\xb2\x1c\x05\xf0\xbb\x1c\x050\xbe\x1c\x05@\xbd\x1c\x05P\xbc\x1c\x05\xa0\xb7\x1c\x05\x90\xb5\x1c\x05\x80\xb0\x1c\x05x\xb8\x1c\x05\xd0\xbd\x1c\x05(\xb7\x1c\x05\xa8\xbe\x1c\x05\xa8\xb2\x1c\x05 \xbf\x1c\x05\xd8\xbe\x1c\x05\x80\xbc\x1c\x05\x10\xba\x1c\x05p\xbd\x1c\x05`\xbb\x1c\x05(\xbd\x1c\x05\x10\xb1\x1c\x05\x98\xb6\x1c\x050\xb2\x1c\x05\xc0\xbb\x1c\x05H\xb2\x1c\x05\xb0\xb6\x1c\x05\xd8\xb2\x1c\x05\x00\xb8\x1c\x05\xc0\xbe\x1c\x05\xf0\xb2\x1c\x05\xd8\xb8\x1c\x05\xb8\xbd\x1c\x05`\xbe\x1c\x05\xf8\xb6\x1c\x05x\xbb\x1c\x05h\xbc\x1c\x05\xa8\xb8\x1c\x05X\xbd\x1c\x05h\xb6\x1c\x05\x08\xbf\x1c\x05H\xbb\x1c\x05H\xb5\x1c\x05X\xb4\x1c\x05x\xbe\x1c\x05X\xb7\x1c\x05\xa0\xbd\x1c\x05\x88\xb7\x1c\x05P\xbf\x1c\x05\xf0\xb5\x1c\x05\x80\xbf\x1c\x05\x98\xb9\x1c\x05\xe8\xbd\x1c\x05\x08\xb9\x1c\x058\xbf\x1c\x05\x18\xbe\x1c\x05@\xb7\x1c\x05\xb8\xba\x1c\x05\xf8\xbc\x1c\x05H\xbe\x1c\x05\x88\xb1\x1c\x05\x18\xbb\x1c\x05\x98\xbc\x1c\x05\x80\xb6\x1c\x05\x18\xb8\x1c\x05\xf8\xb0\x1c\x05\xc8\xb9\x1c\x05\xf0\xbe\x1c\x058\xb3\x1c\x050\xb8\x1c\x058\xbc\x1c\x05\x88\xba\x1c\x05\x98\xbf\x1c\x05\xc8\xb0\x1c\x05\xe0\xbc\x1c\x05\xb8\xb4\x1c\x05 \xc3\xea\x0c@\xca\xea\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6413
sg6371
g6443
sg6385
g6420
sg6380
g6450
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6462
sg6371
g6458
sg6385
g6469
sg6380
g6466
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6479
sg6371
g6475
sg6385
g6486
sg6380
g6483
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6496
sg6371
g6492
sg6385
g6503
sg6380
g6500
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6513
sg6371
g6509
sg6385
g6520
sg6380
g6517
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6556
sg6371
g6552
sg6385
g6563
sg6380
g6560
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6430
sg6371
g6569
sg6385
g6437
sg6380
g6576
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6588
sg6371
g6584
sg6385
g6595
sg6380
g6592
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6605
sg6371
g6601
sg6385
g6612
sg6380
g6609
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6479
sg6371
g6475
sg6385
g6486
sg6380
g6483
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6588
sg6371
g6631
sg6385
g6595
sg6380
g6638
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6650
sg6371
g6646
sg6385
g6657
sg6380
g6654
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6667
sg6371
g6663
sg6385
g6674
sg6380
g6671
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6684
sg6371
g6680
sg6385
g6691
sg6380
g6688
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6605
sg6371
g6697
sg6385
g6612
sg6380
g6704
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6729
sg6371
g6725
sg6385
g6736
sg6380
g6733
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6376
sg6371
g6742
sg6385
g6386
sg6380
g6749
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6767
sg6371
g6757
sg6385
g6761
sg6380
g6765
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6556
sg6371
g6774
sg6385
g6563
sg6380
g6781
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6729
sg6371
g6789
sg6385
g6736
sg6380
g6796
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6650
sg6371
g6646
sg6385
g6657
sg6380
g6654
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6821
sg6371
g6817
sg6385
g6828
sg6380
g6825
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6588
sg6371
g6631
sg6385
g6595
sg6380
g6638
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6667
sg6371
g6663
sg6385
g6674
sg6380
g6671
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6877
sg6371
g6873
sg6385
g6884
sg6380
g6881
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6513
sg6371
g6903
sg6385
g6520
sg6380
g6910
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6667
sg6371
g6918
sg6385
g6674
sg6380
g6925
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6684
sg6371
g6933
sg6385
g6691
sg6380
g6940
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6376
sg6371
g6742
sg6385
g6386
sg6380
g6749
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6462
sg6371
g6974
sg6385
g6469
sg6380
g6981
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6496
sg6371
g6989
sg6385
g6503
sg6380
g6996
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g6479
sg6371
g6475
sg6385
g6486
sg6380
g6483
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g7021
sg6371
g7017
sg6385
g7028
sg6380
g7025
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g6396
sg6371
g7034
sg6385
g6403
sg6380
g7041
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g6556
sg6371
g6552
sg6385
g6563
sg6380
g6560
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g6479
sg6371
g7062
sg6385
g6486
sg6380
g7069
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6462
sg6371
g6974
sg6385
g6469
sg6380
g6981
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6513
sg6371
g6903
sg6385
g6520
sg6380
g6910
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g7021
sg6371
g7017
sg6385
g7028
sg6380
g7025
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6684
sg6371
g6933
sg6385
g6691
sg6380
g6940
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g7021
sg6371
g7155
sg6385
g7028
sg6380
g7162
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g7174
sg6371
g7170
sg6385
g7181
sg6380
g7178
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6605
sg6371
g6601
sg6385
g6612
sg6380
g6609
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6877
sg6371
g6873
sg6385
g6884
sg6380
g6881
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g6767
sg6371
g6757
sg6385
g6761
sg6380
g6765
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g6496
sg6371
g6989
sg6385
g6503
sg6380
g6996
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g6684
sg6371
g6680
sg6385
g6691
sg6380
g6688
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g6513
sg6371
g6509
sg6385
g6520
sg6380
g6517
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g6729
sg6371
g6789
sg6385
g6736
sg6380
g6796
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g6556
sg6371
g6774
sg6385
g6563
sg6380
g6781
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6729
sg6371
g6725
sg6385
g6736
sg6380
g6733
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g6462
sg6371
g6458
sg6385
g6469
sg6380
g6466
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g6376
sg6371
g6742
sg6385
g6386
sg6380
g6749
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g6462
sg6371
g6974
sg6385
g6469
sg6380
g6981
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6556
sg6371
g6552
sg6385
g6563
sg6380
g6560
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g6376
sg6371
g6742
sg6385
g6386
sg6380
g6749
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g6396
sg6371
g7034
sg6385
g6403
sg6380
g7041
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g6413
sg6371
g6443
sg6385
g6420
sg6380
g6450
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g6821
sg6371
g7408
sg6385
g6828
sg6380
g7415
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g7021
sg6371
g7155
sg6385
g7028
sg6380
g7162
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g6667
sg6371
g6663
sg6385
g6674
sg6380
g6671
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g6413
sg6371
g6443
sg6385
g6420
sg6380
g6450
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6684
sg6371
g6680
sg6385
g6691
sg6380
g6688
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g7174
sg6371
g7475
sg6385
g7181
sg6380
g7482
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6821
sg6371
g6817
sg6385
g6828
sg6380
g6825
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6729
sg6371
g6789
sg6385
g6736
sg6380
g6796
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6877
sg6371
g6873
sg6385
g6884
sg6380
g6881
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g6513
sg6371
g6509
sg6385
g6520
sg6380
g6517
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g7174
sg6371
g7170
sg6385
g7181
sg6380
g7178
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6588
sg6371
g6584
sg6385
g6595
sg6380
g6592
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6729
sg6371
g6725
sg6385
g6736
sg6380
g6733
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6588
sg6371
g6631
sg6385
g6595
sg6380
g6638
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g6496
sg6371
g6492
sg6385
g6503
sg6380
g6500
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g6729
sg6371
g6789
sg6385
g6736
sg6380
g6796
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g7174
sg6371
g7170
sg6385
g7181
sg6380
g7178
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g6556
sg6371
g6774
sg6385
g6563
sg6380
g6781
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g6650
sg6371
g7659
sg6385
g6657
sg6380
g7666
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6479
sg6371
g6475
sg6385
g6486
sg6380
g6483
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g6376
sg6371
g6742
sg6385
g6386
sg6380
g6749
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g6821
sg6371
g7408
sg6385
g6828
sg6380
g7415
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g6650
sg6371
g7659
sg6385
g6657
sg6380
g7666
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6588
sg6371
g6631
sg6385
g6595
sg6380
g6638
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6667
sg6371
g6918
sg6385
g6674
sg6380
g6925
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6767
sg6371
g6757
sg6385
g6761
sg6380
g6765
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g6479
sg6371
g7062
sg6385
g6486
sg6380
g7069
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g6821
sg6371
g6817
sg6385
g6828
sg6380
g6825
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g6667
sg6371
g6663
sg6385
g6674
sg6380
g6671
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g6588
sg6371
g6584
sg6385
g6595
sg6380
g6592
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g6605
sg6371
g6601
sg6385
g6612
sg6380
g6609
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g6877
sg6371
g7869
sg6385
g6884
sg6380
g7876
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6729
sg6371
g6789
sg6385
g6736
sg6380
g6796
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6821
sg6371
g7408
sg6385
g6828
sg6380
g7415
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g6479
sg6371
g7062
sg6385
g6486
sg6380
g7069
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g6650
sg6371
g7659
sg6385
g6657
sg6380
g7666
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g6396
sg6371
g7034
sg6385
g6403
sg6380
g7041
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g6513
sg6371
g6509
sg6385
g6520
sg6380
g6517
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g6556
sg6371
g6774
sg6385
g6563
sg6380
g6781
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6650
sg6371
g7659
sg6385
g6657
sg6380
g7666
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6767
sg6371
g6757
sg6385
g6761
sg6380
g6765
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g6513
sg6371
g6903
sg6385
g6520
sg6380
g6910
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6588
sg6371
g6631
sg6385
g6595
sg6380
g6638
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g7021
sg6371
g7155
sg6385
g7028
sg6380
g7162
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g6767
sg6371
g6757
sg6385
g6761
sg6380
g6765
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6821
sg6371
g6817
sg6385
g6828
sg6380
g6825
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g6877
sg6371
g7869
sg6385
g6884
sg6380
g7876
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g7174
sg6371
g7475
sg6385
g7181
sg6380
g7482
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g6556
sg6371
g6774
sg6385
g6563
sg6380
g6781
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g6496
sg6371
g6492
sg6385
g6503
sg6380
g6500
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6430
sg6371
g6569
sg6385
g6437
sg6380
g6576
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g6462
sg6371
g6458
sg6385
g6469
sg6380
g6466
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g6684
sg6371
g6680
sg6385
g6691
sg6380
g6688
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g6650
sg6371
g6646
sg6385
g6657
sg6380
g6654
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g6605
sg6371
g6601
sg6385
g6612
sg6380
g6609
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6667
sg6371
g6663
sg6385
g6674
sg6380
g6671
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g6430
sg6371
g6569
sg6385
g6437
sg6380
g6576
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g6877
sg6371
g7869
sg6385
g6884
sg6380
g7876
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g7021
sg6371
g7017
sg6385
g7028
sg6380
g7025
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g6496
sg6371
g6492
sg6385
g6503
sg6380
g6500
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6650
sg6371
g7659
sg6385
g6657
sg6380
g7666
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g6496
sg6371
g6492
sg6385
g6503
sg6380
g6500
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g6462
sg6371
g6458
sg6385
g6469
sg6380
g6466
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g7021
sg6371
g7017
sg6385
g7028
sg6380
g7025
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6650
sg6371
g6646
sg6385
g6657
sg6380
g6654
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g6513
sg6371
g6903
sg6385
g6520
sg6380
g6910
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g6877
sg6371
g6873
sg6385
g6884
sg6380
g6881
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g6496
sg6371
g6989
sg6385
g6503
sg6380
g6996
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6396
sg6371
g7034
sg6385
g6403
sg6380
g7041
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g6684
sg6371
g6933
sg6385
g6691
sg6380
g6940
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g6496
sg6371
g6989
sg6385
g6503
sg6380
g6996
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g7021
sg6371
g7017
sg6385
g7028
sg6380
g7025
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g6430
sg6371
g6569
sg6385
g6437
sg6380
g6576
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g6877
sg6371
g6873
sg6385
g6884
sg6380
g6881
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g6479
sg6371
g7062
sg6385
g6486
sg6380
g7069
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g6462
sg6371
g6458
sg6385
g6469
sg6380
g6466
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g7021
sg6371
g7155
sg6385
g7028
sg6380
g7162
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g6496
sg6371
g6989
sg6385
g6503
sg6380
g6996
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g6462
sg6371
g6974
sg6385
g6469
sg6380
g6981
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g7174
sg6371
g7475
sg6385
g7181
sg6380
g7482
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6396
sg6371
g7034
sg6385
g6403
sg6380
g7041
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g6413
sg6371
g6443
sg6385
g6420
sg6380
g6450
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6821
sg6371
g7408
sg6385
g6828
sg6380
g7415
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g7021
sg6371
g7155
sg6385
g7028
sg6380
g7162
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g6667
sg6371
g6918
sg6385
g6674
sg6380
g6925
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g6605
sg6371
g6697
sg6385
g6612
sg6380
g6704
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g6767
sg6371
g8612
sg6385
g6761
sg6380
g8619
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6877
sg6371
g7869
sg6385
g6884
sg6380
g7876
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6605
sg6371
g6601
sg6385
g6612
sg6380
g6609
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6684
sg6371
g6933
sg6385
g6691
sg6380
g6940
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g6729
sg6371
g6725
sg6385
g6736
sg6380
g6733
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g7174
sg6371
g7475
sg6385
g7181
sg6380
g7482
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g6413
sg6371
g6443
sg6385
g6420
sg6380
g6450
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g6479
sg6371
g6475
sg6385
g6486
sg6380
g6483
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6821
sg6371
g6817
sg6385
g6828
sg6380
g6825
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g7174
sg6371
g7475
sg6385
g7181
sg6380
g7482
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6479
sg6371
g7062
sg6385
g6486
sg6380
g7069
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g6588
sg6371
g6584
sg6385
g6595
sg6380
g6592
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6513
sg6371
g6903
sg6385
g6520
sg6380
g6910
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g6605
sg6371
g6697
sg6385
g6612
sg6380
g6704
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6513
sg6371
g6509
sg6385
g6520
sg6380
g6517
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6650
sg6371
g6646
sg6385
g6657
sg6380
g6654
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g6605
sg6371
g6697
sg6385
g6612
sg6380
g6704
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6588
sg6371
g6584
sg6385
g6595
sg6380
g6592
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6462
sg6371
g6974
sg6385
g6469
sg6380
g6981
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g6556
sg6371
g6552
sg6385
g6563
sg6380
g6560
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6767
sg6371
g8612
sg6385
g6761
sg6380
g8619
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g7174
sg6371
g7170
sg6385
g7181
sg6380
g7178
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6605
sg6371
g6697
sg6385
g6612
sg6380
g6704
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g6667
sg6371
g6918
sg6385
g6674
sg6380
g6925
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g6767
sg6371
g8612
sg6385
g6761
sg6380
g8619
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g6430
sg6371
g6569
sg6385
g6437
sg6380
g6576
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g6667
sg6371
g6918
sg6385
g6674
sg6380
g6925
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g6729
sg6371
g6725
sg6385
g6736
sg6380
g6733
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6684
sg6371
g6680
sg6385
g6691
sg6380
g6688
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g6767
sg6371
g8612
sg6385
g6761
sg6380
g8619
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6684
sg6371
g6933
sg6385
g6691
sg6380
g6940
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g6877
sg6371
g7869
sg6385
g6884
sg6380
g7876
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6556
sg6371
g6552
sg6385
g6563
sg6380
g6560
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g6821
sg6371
g7408
sg6385
g6828
sg6380
g7415
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g7174
sg6371
g7170
sg6385
g7181
sg6380
g7178
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6767
sg6371
g8612
sg6385
g6761
sg6380
g8619
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.