ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E16_infer_design1_2015_Jul_09_2018
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vright
p57
sVcontacts
p58
Vn
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xad\xc9\xda\xc5\x19\x05N@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_09_2018
p67
sVparticipant
p68
VE16
p69
sVglasses
p70
Vy
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F2.0339278780302266
sg14
S'space'
p89
sg59
g63
sg58
Vn
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp90
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F13.083158710418502
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P2\x00'
tbsg70
Vy
sa(dp96
g64
g65
sg20
F6.5170000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F0.29999999999999849
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS'%\x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p103
sg21
F1.8999999999999999
sg70
Vy
sa(dp104
g64
g65
sg20
F3.117
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F0.35999999999999943
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'\x12\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p110
sg21
F1.1000000000000001
sg70
Vy
sa(dp111
g64
g65
sg20
F1.7509999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F0.35999999999999943
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'\x11\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p117
sg21
F1
sg70
Vy
sa(dp118
g64
g65
sg20
F4.8010000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F0.71999999999999953
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'\x03\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V4-corn.png
p124
sg21
F1.3
sg70
Vy
sa(dp125
g64
g65
sg20
F2.2509999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F0.13999999999999851
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S'\x08\x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p131
sg21
F1.8999999999999999
sg70
Vy
sa(dp132
g64
g65
sg20
F4.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F0.97999999999999954
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S'#\x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p138
sg21
F1.3999999999999999
sg70
Vy
sa(dp139
g64
g65
sg20
F2.9169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F0.1399999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'\x14\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p145
sg21
F1.1000000000000001
sg70
Vy
sa(dp146
g64
g65
sg20
F2.1509999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F0.73999999999999932
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\x1c\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p152
sg21
F1.3999999999999999
sg70
Vy
sa(dp153
g64
g65
sg20
F3.0840000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F0.35999999999999877
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'\x1e\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p159
sg21
F1.8
sg70
Vy
sa(dp160
g64
g65
sg20
F2.0169999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F0.17999999999999894
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'\x0e\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p166
sg21
F1.3999999999999999
sg70
Vy
sa(dp167
g64
g65
sg20
F1.667
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F0.75999999999999956
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S'\x1b\x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p173
sg21
F1.2
sg70
Vy
sa(dp174
g64
g65
sg20
F3.1669999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F0.53999999999999915
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S'\x18\x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p180
sg21
F1.5
sg70
Vy
sa(dp181
g64
g65
sg20
F1.8839999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F0.87999999999999945
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\x0f\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p187
sg21
F1.5
sg70
Vy
sa(dp188
g64
g65
sg20
F1.4510000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F0.5799999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'\x15\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V29-beans.png
p194
sg21
F1.2
sg70
Vy
sa(dp195
g64
g65
sg20
F1.6839999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F0.75999999999999934
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'\x04\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p201
sg21
F1.6000000000000001
sg70
Vy
sa(dp202
g64
g65
sg20
F1.8009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F0.23999999999999935
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'&\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V50-polo.png
p208
sg21
F1.1000000000000001
sg70
Vy
sa(dp209
g64
g65
sg20
F2.8170000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F0.95999999999999908
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'\x17\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p215
sg21
F1.8999999999999999
sg70
Vy
sa(dp216
g64
g65
sg20
F1.2170000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F0.9399999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S' \x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p222
sg21
F1.6000000000000001
sg70
Vy
sa(dp223
g64
g65
sg20
F1.0009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F0.69999999999999973
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'\x1a\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V35-raisins.png
p229
sg21
F1.1000000000000001
sg70
Vy
sa(dp230
g64
g65
sg20
F1.6339999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F0.77999999999999936
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S'\x0c\x00\x00\x00'
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V18-mms.png
p236
sg21
F1.5
sg70
Vy
sa(dp237
g64
g65
sg20
F1.8839999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F0.81999999999999917
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'\x1f\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p243
sg21
F1.7
sg70
Vy
sa(dp244
g64
g65
sg20
F1.784
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F0.8199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'\x10\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V22-daim.png
p250
sg21
F1.6000000000000001
sg70
Vy
sa(dp251
g64
g65
sg20
F1.101
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F0.53999999999999959
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S"'\x00\x00\x00"
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V51-mars.png
p257
sg21
F1
sg70
Vy
sa(dp258
g64
g65
sg20
F1.3009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F1.0199999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S'\x00\x00\x00\x00'
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p264
sg21
F1.6000000000000001
sg70
Vy
sa(dp265
g64
g65
sg20
F2.2669999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F0.17999999999999938
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'\x02\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p271
sg21
F1.1000000000000001
sg70
Vy
sa(dp272
g64
g65
sg20
F2.4009999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F0.7599999999999989
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'\x0b\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p278
sg21
F2
sg70
Vy
sa(dp279
g64
g65
sg20
F1.9339999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F0.63999999999999879
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'\x13\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p285
sg21
F2
sg70
Vy
sa(dp286
g64
g65
sg20
F1.0840000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F0.69999999999999929
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'\t\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p292
sg21
F1.6000000000000001
sg70
Vy
sa(dp293
g64
g65
sg20
F1.2170000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F0.43999999999999928
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'\x1d\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V40-sardines.png
p299
sg21
F1.3
sg70
Vy
sa(dp300
g64
g65
sg20
F1.4670000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F0.63999999999999879
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'\r\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p306
sg21
F2
sg70
Vy
sa(dp307
g64
g65
sg20
F1.2010000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F0.31999999999999895
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'"\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p313
sg21
F1.3999999999999999
sg70
Vy
sa(dp314
g64
g65
sg20
F0.76700000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F0.51999999999999935
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'!\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V44-crunch.png
p320
sg21
F1.3
sg70
Vy
sa(dp321
g64
g65
sg20
F1.3169999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F0.57999999999999874
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S'$\x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V48-twix.png
p327
sg21
F2
sg70
Vy
sa(dp328
g64
g65
sg20
F0.88500000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F0.79999999999999916
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'\x16\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p334
sg21
F1.7
sg70
Vy
sa(dp335
g64
g65
sg20
F0.61699999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F0.59999999999999964
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S'\x05\x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p341
sg21
F1.1000000000000001
sg70
Vy
sa(dp342
g64
g65
sg20
F0.70099999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F0.87999999999999945
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S'\x06\x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V7-olives.png
p348
sg21
F1.3999999999999999
sg70
Vy
sa(dp349
g64
g65
sg20
F1.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F0.35999999999999854
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'\x07\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p355
sg21
F1.8999999999999999
sg70
Vy
sa(dp356
g64
g65
sg20
F0.86699999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F0.51999999999999957
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'\x01\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p362
sg21
F1.1000000000000001
sg70
Vy
sa(dp363
g64
g65
sg20
F0.73399999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F0.5799999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S'\x19\x00\x00\x00'
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p369
sg21
F1.2
sg70
Vy
sa(dp370
g64
g65
sg20
F0.71799999999999997
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F0.59999999999999942
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'\n\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p376
sg21
F1.3
sg70
Vy
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F4.1333637248462765
sg58
Vn
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vy
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p381
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'44-crunch.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'left'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F1.2000611251496593
sg27
F2.2509999999999999
sg70
Vy
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p390
sg26
F3
sg28
F3
sg59
g63
sg58
Vn
sg81
S'45-chewy_nougat_redo.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'left'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F1.3833450508827809
sg27
F0.95099999999999996
sg70
Vy
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'35-raisins.png'
p399
sg26
F4.9000000000000012
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'49-yorkie.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'right'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F3.9003346487806994
sg27
F0.88400000000000001
sg70
Vy
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p408
sg26
F5.0000000000000018
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'3-ellas_strawberries_apples.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'left'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F1.1500516883825185
sg27
F1.5669999999999999
sg70
Vy
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'22-daim.png'
p417
sg26
F3.5
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'7-olives.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'left'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F2.416824183659628
sg27
F1.0669999999999999
sg70
Vy
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'25-kitkat.png'
p426
sg26
F5.0000000000000018
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'31-hobnobs.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'right'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F2.1501300905074459
sg27
F1.2509999999999999
sg70
Vy
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'5-pineapple.png'
p435
sg26
F3
sg28
F3
sg59
g63
sg58
Vn
sg81
S'40-sardines.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'left'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F1.1500476970031741
sg27
F0.48399999999999999
sg70
Vy
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'49-yorkie.png'
p444
sg26
F3.8999999999999999
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'35-raisins.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'left'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F0.89997742018749705
sg27
F0.501
sg70
Vy
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'29-beans.png'
p453
sg26
F5.1000000000000005
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'46-pistachios.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'right'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F1.08339049560891
sg27
F0.51700000000000002
sg70
Vy
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'48-twix.png'
p462
sg26
F3
sg28
F3
sg59
g63
sg58
Vn
sg81
S'50-polo.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'left'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F0.66693579978164053
sg27
F0.53400000000000003
sg70
Vy
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p471
sg26
F5.0000000000000018
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'33-ambrosia_rice.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'right'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F0.86678224565548589
sg27
F0.55100000000000005
sg70
Vy
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p480
sg26
F4.3000000000000007
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'2-steamed_puddings.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'right'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F0.80011307012318866
sg27
F1.351
sg70
Vy
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p489
sg26
F3.7000000000000002
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'41-peanuts_redo.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'right'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F1.033375927072484
sg27
F0.501
sg70
Vy
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'18-mms.png'
p498
sg26
F3
sg28
F3
sg59
g63
sg58
Vn
sg81
S'43-mrporky_pork_crackles_redo.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'right'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F0.9668065360528999
sg27
F0.501
sg70
Vy
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p507
sg26
F1.9999999999999982
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'13-mccoys_steak_crisps.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'left'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F0.21670803448068909
sg27
F2.5339999999999998
sg70
Vy
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'40-sardines.png'
p516
sg26
F4.6000000000000005
sg28
F4
sg59
g63
sg58
Vn
sg81
S'5-pineapple.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'right'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F0.90002816774358507
sg27
F1.784
sg70
Vy
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'4-corn.png'
p525
sg26
F5.3000000000000007
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'10-bounty_redo.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'left'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F0.83338636167900404
sg27
F1.0009999999999999
sg70
Vy
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p534
sg26
F4.9000000000000004
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'21-nakd_banana_crunch.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'left'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F0.76672060733108083
sg27
F0.48399999999999999
sg70
Vy
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p543
sg26
F4.9000000000000004
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'38-maltesers.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'right'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F1.016573068787693
sg27
F0.83399999999999996
sg70
Vy
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p552
sg26
F3.7000000000000002
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'20-fruit_pastilles.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'left'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F0.96672813393524848
sg27
F0.90100000000000002
sg70
Vy
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p561
sg26
F1.4999999999999989
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'8-liquorice_catherine_wheels.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'right'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F0.70003660666407086
sg27
F0.90100000000000002
sg70
Vy
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p570
sg26
F1.9999999999999982
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'42-mrkipling_lemon_slices.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'left'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F0.88333478733693482
sg27
F0.95099999999999996
sg70
Vy
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p579
sg26
F1.6999999999999984
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'18-mms.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'left'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F1.8335388894483913
sg27
F1.284
sg70
Vy
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'51-mars.png'
p588
sg26
F3.3000000000000003
sg28
F3
sg59
g63
sg58
Vn
sg81
S'27-hartleys_raspberries_jelly.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'left'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F0.96672841903637163
sg27
F0.93400000000000005
sg70
Vy
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p597
sg26
F3.4000000000000004
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'4-corn.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'right'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F0.61671339433087269
sg27
F0.85099999999999998
sg70
Vy
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'31-hobnobs.png'
p606
sg26
F3.8000000000000003
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'25-kitkat.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'left'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F0.73339742350799497
sg27
F0.501
sg70
Vy
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'38-maltesers.png'
p615
sg26
F4.8000000000000007
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'6-sour_patch_kids.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'left'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F0.74988353720982559
sg27
F0.501
sg70
Vy
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'50-polo.png'
p624
sg26
F2.6999999999999993
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'48-twix.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'right'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F0.68337031063128961
sg27
F0.41699999999999998
sg70
Vy
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p633
sg26
F2.7999999999999994
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'36-fig_rolls.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'right'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F0.86673035769490525
sg27
F0.68400000000000005
sg70
Vy
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p642
sg26
F3.2999999999999994
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'23-crunchie_redo.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'left'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F0.68351742152299266
sg27
F1.0009999999999999
sg70
Vy
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'46-pistachios.png'
p651
sg26
F4.0000000000000009
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'29-beans.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'left'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F1.066658626885328
sg27
F0.70099999999999996
sg70
Vy
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p660
sg26
F3.7000000000000002
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'left'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F0.60006819559202995
sg27
F0.51800000000000002
sg70
Vy
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p669
sg26
F3.6000000000000001
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'1-treacle_cookies.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'right'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F0.633398506884987
sg27
F0.48399999999999999
sg70
Vy
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p678
sg26
F1.9999999999999982
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'30-spaghetti_hoops.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'left'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F1.4001727127542836
sg27
F0.78400000000000003
sg70
Vy
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p687
sg26
F2.3999999999999986
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'17-jacobs_mini_cheddars_redo.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'right'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F0.93341692425019573
sg27
F1.117
sg70
Vy
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'7-olives.png'
p696
sg26
F3.0999999999999992
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'22-daim.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'left'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F0.5334138451871695
sg27
F0.91800000000000004
sg70
Vy
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p705
sg26
F3.1000000000000001
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'16-skips_prawn.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'right'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F1.0499410130942124
sg27
F0.90100000000000002
sg70
Vy
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p714
sg26
F3
sg28
F3
sg59
g63
sg58
Vn
sg81
S'19-caramello_redo.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'left'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F0.93337187867291505
sg27
F0.86699999999999999
sg70
Vy
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p723
sg26
F4.0999999999999996
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'51-mars.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'right'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F0.68344899785006419
sg27
F0.55100000000000005
sg70
Vy
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'44-crunch.png'
p732
sg26
F4.2000000000000002
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'26-walkers_smoky_bacon.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'right'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F0.98339357467921218
sg27
F0.58399999999999996
sg70
Vy
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vn
sg59
g63
sg30
F237.42785636046756
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp741
g64
g65
sg56
g57
sg58
Vn
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F0.58348115698026959
sg66
g67
sg68
g69
sg70
Vy
sa(dp743
g64
g65
sg82
S'12-topic.png'
p744
sg83
S'12-topic.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'39-mackerel.png'
p749
sg33
g749
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\t\x14\x1c\x15\x05W0'
tRp754
sa(dp755
g64
g65
sg82
S'15-walnut_whip.png'
p756
sg83
S'28-maple_pecan.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'28-maple_pecan.png'
p761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\t\x14\x1c\x1b\r\x84\xf0'
tRp765
sa(dp766
g64
g65
sg82
S'53-cheestrings.png'
p767
sg83
S'47-picnic.png'
p768
sg56
g57
sS'practice_loop.thisN'
p769
I2
sS'practice_loop.thisTrialN'
p770
I2
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p771
I0
sg84
S'47-picnic.png'
p772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p773
sS'practice_loop.thisIndex'
p774
g60
(g99
S'\x02\x00\x00\x00'
tRp775
sg34
g753
(S'\x07\xdf\x07\t\x14\x1c#\x02\x9f\xe0'
tRp776
sa(dp777
g64
g65
sg82
S'11-snickers.png'
p778
sg83
S'11-snickers.png'
p779
sg56
g57
sS'practice_loop.thisN'
p780
I3
sS'practice_loop.thisTrialN'
p781
I3
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p782
I0
sg84
S'54-frubes_yogurt.png'
p783
sg33
g783
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p784
sS'practice_loop.thisIndex'
p785
g60
(g99
S'\x03\x00\x00\x00'
tRp786
sg34
g753
(S'\x07\xdf\x07\t\x14\x1c)\x01\t\xa0'
tRp787
sa(dp788
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p789
sg83
S'37-nakd_cashew_cookie.png'
p790
sg56
g57
sS'practice_loop.thisN'
p791
I4
sS'practice_loop.thisTrialN'
p792
I4
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p793
I0
sg84
S'9-yu_mango_pieces.png'
p794
sg33
g789
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p795
sS'practice_loop.thisIndex'
p796
g60
(g99
S'\x04\x00\x00\x00'
tRp797
sg34
g753
(S'\x07\xdf\x07\t\x14\x1c.\x05\xb1\x08'
tRp798
sa(dp799
g64
g65
sg82
S'32-hovis_crackers.png'
p800
sg83
S'32-hovis_crackers.png'
p801
sg56
g57
sS'practice_loop.thisN'
p802
I5
sS'practice_loop.thisTrialN'
p803
I5
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p804
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p805
sg33
g800
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p806
sS'practice_loop.thisIndex'
p807
g60
(g99
S'\x05\x00\x00\x00'
tRp808
sg34
g753
(S'\x07\xdf\x07\t\x14\x1c3\x07v('
tRp809
sa(dp810
g64
g65
sg82
g789
sg83
S'9-yu_mango_pieces.png'
p811
sg56
g57
sS'practice_loop.thisN'
p812
I6
sS'practice_loop.thisTrialN'
p813
I6
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p814
I0
sg84
g794
sg33
g794
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p815
sS'practice_loop.thisIndex'
p816
g60
(g99
S'\x06\x00\x00\x00'
tRp817
sg34
g753
(S'\x07\xdf\x07\t\x14\x1c9\x02Q\xc0'
tRp818
sa(dp819
g64
g65
sg82
S'52-aero_mousse.png'
p820
sg83
S'52-aero_mousse.png'
p821
sg56
g57
sS'practice_loop.thisN'
p822
I7
sS'practice_loop.thisTrialN'
p823
I7
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p824
I0
sg84
S'14-discos_salt_vinegar.png'
p825
sg33
g820
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p826
sS'practice_loop.thisIndex'
p827
g60
(g99
S'\x07\x00\x00\x00'
tRp828
sg34
g753
(S'\x07\xdf\x07\t\x14\x1d\x02\x073\xc0'
tRp829
sa(dp830
g64
g65
sg82
g800
sg83
S'24-food_doctor_apple_walnut_bar.png'
p831
sg56
g57
sS'practice_loop.thisN'
p832
I8
sS'practice_loop.thisTrialN'
p833
I8
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p834
I0
sg84
g805
sg33
g805
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p835
sS'practice_loop.thisIndex'
p836
g60
(g99
S'\x08\x00\x00\x00'
tRp837
sg34
g753
(S'\x07\xdf\x07\t\x14\x1d\x08\x0e\xe8h'
tRp838
sa(dp839
g64
g65
sg82
g744
sg83
S'39-mackerel.png'
p840
sg56
g57
sS'practice_loop.thisN'
p841
I9
sS'practice_loop.thisTrialN'
p842
I9
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p843
I0
sg84
g749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p844
sS'practice_loop.thisIndex'
p845
g60
(g99
S'\t\x00\x00\x00'
tRp846
sg34
g753
(S'\x07\xdf\x07\t\x14\x1d\x0f\x08\x8b\x80'
tRp847
sa(dp848
g64
g65
sg82
g778
sg83
S'54-frubes_yogurt.png'
p849
sg56
g57
sS'practice_loop.thisN'
p850
I10
sS'practice_loop.thisTrialN'
p851
I10
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p852
I0
sg84
g783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S'\x07\xdf\x07\t\x14\x1d\x16\x00\x84\xd0'
tRp856
sa(dp857
g64
g65
sg82
g756
sg83
S'15-walnut_whip.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S'\x07\xdf\x07\t\x14\x1d\x1c\t\xa8\xa8'
tRp865
sa(dp866
g64
g65
sg82
g767
sg83
S'53-cheestrings.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S'\x07\xdf\x07\t\x14\x1d#\x02\x1b\x10'
tRp874
sa(dp875
g64
g65
sg82
g820
sg83
S'14-discos_salt_vinegar.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g825
sg33
g820
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S'\x07\xdf\x07\t\x14\x1d)\t\x1c\x08'
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F0.60011438157380326
sg66
g67
sg68
g69
sg70
Vy
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vy
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'48-twix.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'left'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'48-twix.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'50-polo.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
S'50-polo.png'
p910
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vy
sS'block_loop.thisTrialN'
p912
I0
sg39
F1.1831855667041964
sg34
g753
(S'\x07\xdf\x07\t\x15\x01\x15\x07\x0c\xb0'
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'21-nakd_banana_crunch.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'right'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'21-nakd_banana_crunch.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'1-treacle_cookies.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p926
I0
sg909
S'1-treacle_cookies.png'
p927
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vy
sS'block_loop.thisTrialN'
p929
I0
sg39
F1.0333006610235316
sg34
g753
(S'\x07\xdf\x07\t\x15\x01\x1b\n90'
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'49-yorkie.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'left'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'49-yorkie.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'35-raisins.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p943
I0
sg909
S'35-raisins.png'
p944
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vy
sS'block_loop.thisTrialN'
p946
I0
sg39
F1.2666598813157179
sg34
g753
(S'\x07\xdf\x07\t\x15\x01!\x0bF\xb8'
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
S'16-skips_prawn.png'
p950
sS'block_loop.thisIndex'
p951
g889
sg38
S'right'
p952
sg59
g63
sS'trial_loop.thisN'
p953
I3
sg33
S'16-skips_prawn.png'
p954
sg64
g65
sS'trial_loop.thisIndex'
p955
g60
(g99
S'\x03\x00\x00\x00'
tRp956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p957
I0
sg904
S'42-mrkipling_lemon_slices.png'
p958
sS'block_loop.thisRepN'
p959
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p960
I0
sg909
S'42-mrkipling_lemon_slices.png'
p961
sg55
g11
sS'block_loop.thisTrial'
p962
Nsg70
Vy
sS'block_loop.thisTrialN'
p963
I0
sg39
F1.2665395696967607
sg34
g753
(S'\x07\xdf\x07\t\x15\x01(\x00\xa0('
tRp964
sa(dp965
S'trial_loop.thisTrialN'
p966
I4
sg895
S'7-olives.png'
p967
sS'block_loop.thisIndex'
p968
g889
sg38
S'left'
p969
sg59
g63
sS'trial_loop.thisN'
p970
I4
sg33
S'7-olives.png'
p971
sg64
g65
sS'trial_loop.thisIndex'
p972
g60
(g99
S'\x04\x00\x00\x00'
tRp973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p974
I0
sg904
S'22-daim.png'
p975
sS'block_loop.thisRepN'
p976
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p977
I0
sg909
S'22-daim.png'
p978
sg55
g11
sS'block_loop.thisTrial'
p979
Nsg70
Vy
sS'block_loop.thisTrialN'
p980
I0
sg39
F1.4499572066924884
sg34
g753
(S'\x07\xdf\x07\t\x15\x01.\x05?\xc0'
tRp981
sa(dp982
S'trial_loop.thisTrialN'
p983
I5
sg895
S'5-pineapple.png'
p984
sS'block_loop.thisIndex'
p985
g889
sg38
S'right'
p986
sg59
g63
sS'trial_loop.thisN'
p987
I5
sg33
S'5-pineapple.png'
p988
sg64
g65
sS'trial_loop.thisIndex'
p989
g60
(g99
S'\x05\x00\x00\x00'
tRp990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p991
I0
sg904
S'40-sardines.png'
p992
sS'block_loop.thisRepN'
p993
I0
sg907
S'40-sardines.png'
p994
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p995
I0
sg909
g988
sg55
g11
sS'block_loop.thisTrial'
p996
Nsg70
Vy
sS'block_loop.thisTrialN'
p997
I0
sg39
F1.4003403507522307
sg34
g753
(S'\x07\xdf\x07\t\x15\x014\x0c{P'
tRp998
sa(dp999
S'trial_loop.thisTrialN'
p1000
I6
sg895
S'13-mccoys_steak_crisps.png'
p1001
sS'block_loop.thisIndex'
p1002
g889
sg38
S'left'
p1003
sg59
g63
sS'trial_loop.thisN'
p1004
I6
sg33
S'3-ellas_strawberries_apples.png'
p1005
sg64
g65
sS'trial_loop.thisIndex'
p1006
g60
(g99
S'\x06\x00\x00\x00'
tRp1007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1008
I0
sg904
S'3-ellas_strawberries_apples.png'
p1009
sS'block_loop.thisRepN'
p1010
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1011
I0
sg909
S'13-mccoys_steak_crisps.png'
p1012
sg55
g11
sS'block_loop.thisTrial'
p1013
Nsg70
Vy
sS'block_loop.thisTrialN'
p1014
I0
sg39
F0.93336674689635402
sg34
g753
(S'\x07\xdf\x07\t\x15\x01;\x03\xf7\xa0'
tRp1015
sa(dp1016
S'trial_loop.thisTrialN'
p1017
I7
sg895
S'25-kitkat.png'
p1018
sS'block_loop.thisIndex'
p1019
g889
sg38
S'right'
p1020
sg59
g63
sS'trial_loop.thisN'
p1021
I7
sg33
S'25-kitkat.png'
p1022
sg64
g65
sS'trial_loop.thisIndex'
p1023
g60
(g99
S'\x07\x00\x00\x00'
tRp1024
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1025
I0
sg904
S'31-hobnobs.png'
p1026
sS'block_loop.thisRepN'
p1027
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1028
I0
sg909
S'31-hobnobs.png'
p1029
sg55
g11
sS'block_loop.thisTrial'
p1030
Nsg70
Vy
sS'block_loop.thisTrialN'
p1031
I0
sg39
F1.3832295859392616
sg34
g753
(S'\x07\xdf\x07\t\x15\x02\x05\x03[`'
tRp1032
sa(dp1033
S'trial_loop.thisTrialN'
p1034
I8
sg895
g1001
sS'block_loop.thisIndex'
p1035
g889
sg38
S'right'
p1036
sg59
g63
sS'trial_loop.thisN'
p1037
I8
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1038
g60
(g99
S'\x08\x00\x00\x00'
tRp1039
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1040
I0
sg904
g1009
sS'block_loop.thisRepN'
p1041
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1042
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1043
Nsg70
Vy
sS'block_loop.thisTrialN'
p1044
I0
sg39
F0.98334083142981399
sg34
g753
(S'\x07\xdf\x07\t\x15\x02\x0b\t\xa0\xd8'
tRp1045
sa(dp1046
S'trial_loop.thisTrialN'
p1047
I9
sg895
g950
sS'block_loop.thisIndex'
p1048
g889
sg38
S'left'
p1049
sg59
g63
sS'trial_loop.thisN'
p1050
I9
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p1051
g60
(g99
S'\t\x00\x00\x00'
tRp1052
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1053
I0
sg904
g958
sS'block_loop.thisRepN'
p1054
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1055
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1056
Nsg70
Vy
sS'block_loop.thisTrialN'
p1057
I0
sg39
F1.0331589670095127
sg34
g753
(S'\x07\xdf\x07\t\x15\x02\x11\t\xf6\xc8'
tRp1058
sa(dp1059
S'trial_loop.thisTrialN'
p1060
I10
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p1061
sS'block_loop.thisIndex'
p1062
g889
sg38
S'right'
p1063
sg59
g63
sS'trial_loop.thisN'
p1064
I10
sg33
S'36-fig_rolls.png'
p1065
sg64
g65
sS'trial_loop.thisIndex'
p1066
g60
(g99
S'\n\x00\x00\x00'
tRp1067
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1068
I0
sg904
S'36-fig_rolls.png'
p1069
sS'block_loop.thisRepN'
p1070
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1071
I0
sg909
S'34-hula_hoops_bbq_beef_redo.png'
p1072
sg55
g11
sS'block_loop.thisTrial'
p1073
Nsg70
Vy
sS'block_loop.thisTrialN'
p1074
I0
sg39
F1.3333416011955705
sg34
g753
(S'\x07\xdf\x07\t\x15\x02\x17\x0b\x00h'
tRp1075
sa(dp1076
S'trial_loop.thisTrialN'
p1077
I11
sg895
g933
sS'block_loop.thisIndex'
p1078
g889
sg38
S'left'
p1079
sg59
g63
sS'trial_loop.thisN'
p1080
I11
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1081
g60
(g99
S'\x0b\x00\x00\x00'
tRp1082
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1083
I0
sg904
g941
sS'block_loop.thisRepN'
p1084
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1085
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1086
Nsg70
Vy
sS'block_loop.thisTrialN'
p1087
I0
sg39
F1.1999801571364515
sg34
g753
(S'\x07\xdf\x07\t\x15\x02\x1e\x01O\xf0'
tRp1088
sa(dp1089
S'trial_loop.thisTrialN'
p1090
I12
sg895
S'8-liquorice_catherine_wheels.png'
p1091
sS'block_loop.thisIndex'
p1092
g889
sg38
S'left'
p1093
sg59
g63
sS'trial_loop.thisN'
p1094
I12
sg33
S'17-jacobs_mini_cheddars_redo.png'
p1095
sg64
g65
sS'trial_loop.thisIndex'
p1096
g60
(g99
S'\x0c\x00\x00\x00'
tRp1097
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1098
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p1099
sS'block_loop.thisRepN'
p1100
I0
sg907
g1095
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1101
I0
sg909
S'8-liquorice_catherine_wheels.png'
p1102
sg55
g11
sS'block_loop.thisTrial'
p1103
Nsg70
Vy
sS'block_loop.thisTrialN'
p1104
I0
sg39
F1.4332823576987721
sg34
g753
(S'\x07\xdf\x07\t\x15\x02$\x04\xf9p'
tRp1105
sa(dp1106
S'trial_loop.thisTrialN'
p1107
I13
sg895
S'23-crunchie_redo.png'
p1108
sS'block_loop.thisIndex'
p1109
g889
sg38
S'right'
p1110
sg59
g63
sS'trial_loop.thisN'
p1111
I13
sg33
S'33-ambrosia_rice.png'
p1112
sg64
g65
sS'trial_loop.thisIndex'
p1113
g60
(g99
S'\r\x00\x00\x00'
tRp1114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1115
I0
sg904
S'33-ambrosia_rice.png'
p1116
sS'block_loop.thisRepN'
p1117
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1118
I0
sg909
S'23-crunchie_redo.png'
p1119
sg55
g11
sS'block_loop.thisTrial'
p1120
Nsg70
Vy
sS'block_loop.thisTrialN'
p1121
I0
sg39
F1.033301516326901
sg34
g753
(S'\x07\xdf\x07\t\x15\x02*\x0b\xf6\x80'
tRp1122
sa(dp1123
S'trial_loop.thisTrialN'
p1124
I14
sg895
g950
sS'block_loop.thisIndex'
p1125
g889
sg38
S'left'
p1126
sg59
g63
sS'trial_loop.thisN'
p1127
I14
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p1128
g60
(g99
S'\x0e\x00\x00\x00'
tRp1129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1130
I0
sg904
g958
sS'block_loop.thisRepN'
p1131
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1132
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1133
Nsg70
Vy
sS'block_loop.thisTrialN'
p1134
I0
sg39
F1.1832328930831864
sg34
g753
(S'\x07\xdf\x07\t\x15\x020\r\x04\x08'
tRp1135
sa(dp1136
S'trial_loop.thisTrialN'
p1137
I15
sg895
S'36-fig_rolls.png'
p1138
sS'block_loop.thisIndex'
p1139
g889
sg38
S'left'
p1140
sg59
g63
sS'trial_loop.thisN'
p1141
I15
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p1142
g60
(g99
S'\x0f\x00\x00\x00'
tRp1143
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1144
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p1145
sS'block_loop.thisRepN'
p1146
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1147
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p1148
Nsg70
Vy
sS'block_loop.thisTrialN'
p1149
I0
sg39
F2.3999782754835906
sg34
g753
(S'\x07\xdf\x07\t\x15\x027\x01,\xc8'
tRp1150
sa(dp1151
S'trial_loop.thisTrialN'
p1152
I16
sg895
S'44-crunch.png'
p1153
sS'block_loop.thisIndex'
p1154
g889
sg38
S'right'
p1155
sg59
g63
sS'trial_loop.thisN'
p1156
I16
sg33
S'44-crunch.png'
p1157
sg64
g65
sS'trial_loop.thisIndex'
p1158
g60
(g99
S'\x10\x00\x00\x00'
tRp1159
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1160
I0
sg904
S'26-walkers_smoky_bacon.png'
p1161
sS'block_loop.thisRepN'
p1162
I0
sg907
g1157
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1163
I0
sg909
S'26-walkers_smoky_bacon.png'
p1164
sg55
g11
sS'block_loop.thisTrial'
p1165
Nsg70
Vy
sS'block_loop.thisTrialN'
p1166
I0
sg39
F1.2832243971424759
sg34
g753
(S'\x07\xdf\x07\t\x15\x03\x02\x07\xac\xd8'
tRp1167
sa(dp1168
S'trial_loop.thisTrialN'
p1169
I17
sg895
S'51-mars.png'
p1170
sS'block_loop.thisIndex'
p1171
g889
sg38
S'left'
p1172
sg59
g63
sS'trial_loop.thisN'
p1173
I17
sg33
S'51-mars.png'
p1174
sg64
g65
sS'trial_loop.thisIndex'
p1175
g60
(g99
S'\x11\x00\x00\x00'
tRp1176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1177
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p1178
sS'block_loop.thisRepN'
p1179
I0
sg907
g1174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1180
I0
sg909
S'27-hartleys_raspberries_jelly.png'
p1181
sg55
g11
sS'block_loop.thisTrial'
p1182
Nsg70
Vy
sS'block_loop.thisTrialN'
p1183
I0
sg39
F0.84979407325590728
sg34
g753
(S'\x07\xdf\x07\t\x15\x03\x08\x0c\x87\x08'
tRp1184
sa(dp1185
S'trial_loop.thisTrialN'
p1186
I18
sg895
S'17-jacobs_mini_cheddars_redo.png'
p1187
sS'block_loop.thisIndex'
p1188
g889
sg38
S'left'
p1189
sg59
g63
sS'trial_loop.thisN'
p1190
I18
sg33
g1102
sg64
g65
sS'trial_loop.thisIndex'
p1191
g60
(g99
S'\x12\x00\x00\x00'
tRp1192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1193
I0
sg904
S'8-liquorice_catherine_wheels.png'
p1194
sS'block_loop.thisRepN'
p1195
I0
sg907
g1095
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1196
I0
sg909
g1102
sg55
g11
sS'block_loop.thisTrial'
p1197
Nsg70
Vy
sS'block_loop.thisTrialN'
p1198
I0
sg39
F0.88327434642269509
sg34
g753
(S'\x07\xdf\x07\t\x15\x03\x0e\n\xb60'
tRp1199
sa(dp1200
S'trial_loop.thisTrialN'
p1201
I19
sg895
S'31-hobnobs.png'
p1202
sS'block_loop.thisIndex'
p1203
g889
sg38
S'left'
p1204
sg59
g63
sS'trial_loop.thisN'
p1205
I19
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1206
g60
(g99
S'\x13\x00\x00\x00'
tRp1207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1208
I0
sg904
S'25-kitkat.png'
p1209
sS'block_loop.thisRepN'
p1210
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1211
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1212
Nsg70
Vy
sS'block_loop.thisTrialN'
p1213
I0
sg39
F1.2499750538700027
sg34
g753
(S'\x07\xdf\x07\t\x15\x03\x14\tbX'
tRp1214
sa(dp1215
S'trial_loop.thisTrialN'
p1216
I20
sg895
S'42-mrkipling_lemon_slices.png'
p1217
sS'block_loop.thisIndex'
p1218
g889
sg38
S'left'
p1219
sg59
g63
sS'trial_loop.thisN'
p1220
I20
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1221
g60
(g99
S'\x14\x00\x00\x00'
tRp1222
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1223
I0
sg904
S'16-skips_prawn.png'
p1224
sS'block_loop.thisRepN'
p1225
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1226
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1227
Nsg70
Vy
sS'block_loop.thisTrialN'
p1228
I0
sg39
F0.80021770131861558
sg34
g753
(S'\x07\xdf\x07\t\x15\x03\x1a\r\xbf\x88'
tRp1229
sa(dp1230
S'trial_loop.thisTrialN'
p1231
I21
sg895
S'30-spaghetti_hoops.png'
p1232
sS'block_loop.thisIndex'
p1233
g889
sg38
S'left'
p1234
sg59
g63
sS'trial_loop.thisN'
p1235
I21
sg33
S'19-caramello_redo.png'
p1236
sg64
g65
sS'trial_loop.thisIndex'
p1237
g60
(g99
S'\x15\x00\x00\x00'
tRp1238
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1239
I0
sg904
S'19-caramello_redo.png'
p1240
sS'block_loop.thisRepN'
p1241
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1242
I0
sg909
S'30-spaghetti_hoops.png'
p1243
sg55
g11
sS'block_loop.thisTrial'
p1244
Nsg70
Vy
sS'block_loop.thisTrialN'
p1245
I0
sg39
F1.5665642592357472
sg34
g753
(S'\x07\xdf\x07\t\x15\x03 \x0b;\x00'
tRp1246
sa(dp1247
S'trial_loop.thisTrialN'
p1248
I22
sg895
g916
sS'block_loop.thisIndex'
p1249
g889
sg38
S'right'
p1250
sg59
g63
sS'trial_loop.thisN'
p1251
I22
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1252
g60
(g99
S'\x16\x00\x00\x00'
tRp1253
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1254
I0
sg904
g924
sS'block_loop.thisRepN'
p1255
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1256
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1257
Nsg70
Vy
sS'block_loop.thisTrialN'
p1258
I0
sg39
F0.79991891794634284
sg34
g753
(S"\x07\xdf\x07\t\x15\x03'\x05\x1c\x98"
tRp1259
sa(dp1260
S'trial_loop.thisTrialN'
p1261
I23
sg895
g1187
sS'block_loop.thisIndex'
p1262
g889
sg38
S'left'
p1263
sg59
g63
sS'trial_loop.thisN'
p1264
I23
sg33
g1095
sg64
g65
sS'trial_loop.thisIndex'
p1265
g60
(g99
S'\x17\x00\x00\x00'
tRp1266
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1267
I0
sg904
g1194
sS'block_loop.thisRepN'
p1268
I0
sg907
g1095
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1269
I0
sg909
g1102
sg55
g11
sS'block_loop.thisTrial'
p1270
Nsg70
Vy
sS'block_loop.thisTrialN'
p1271
I0
sg39
F1.3000406550709158
sg34
g753
(S'\x07\xdf\x07\t\x15\x03-\x02\x94('
tRp1272
sa(dp1273
S'trial_loop.thisTrialN'
p1274
I24
sg895
S'20-fruit_pastilles.png'
p1275
sS'block_loop.thisIndex'
p1276
g889
sg38
S'right'
p1277
sg59
g63
sS'trial_loop.thisN'
p1278
I24
sg33
S'2-steamed_puddings.png'
p1279
sg64
g65
sS'trial_loop.thisIndex'
p1280
g60
(g99
S'\x18\x00\x00\x00'
tRp1281
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1282
I0
sg904
S'2-steamed_puddings.png'
p1283
sS'block_loop.thisRepN'
p1284
I0
sg907
S'20-fruit_pastilles.png'
p1285
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1286
I0
sg909
g1279
sg55
g11
sS'block_loop.thisTrial'
p1287
Nsg70
Vy
sS'block_loop.thisTrialN'
p1288
I0
sg39
F1.2000018246326363
sg34
g753
(S'\x07\xdf\x07\t\x15\x033\x07\xac\xd8'
tRp1289
sa(dp1290
S'trial_loop.thisTrialN'
p1291
I25
sg895
g984
sS'block_loop.thisIndex'
p1292
g889
sg38
S'left'
p1293
sg59
g63
sS'trial_loop.thisN'
p1294
I25
sg33
g994
sg64
g65
sS'trial_loop.thisIndex'
p1295
g60
(g99
S'\x19\x00\x00\x00'
tRp1296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1297
I0
sg904
g992
sS'block_loop.thisRepN'
p1298
I0
sg907
g994
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1299
I0
sg909
g988
sg55
g11
sS'block_loop.thisTrial'
p1300
Nsg70
Vy
sS'block_loop.thisTrialN'
p1301
I0
sg39
F0.94999255892616929
sg34
g753
(S'\x07\xdf\x07\t\x15\x039\x0bVX'
tRp1302
sa(dp1303
S'trial_loop.thisTrialN'
p1304
I26
sg895
g916
sS'block_loop.thisIndex'
p1305
g889
sg38
S'left'
p1306
sg59
g63
sS'trial_loop.thisN'
p1307
I26
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1308
g60
(g99
S'\x1a\x00\x00\x00'
tRp1309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1310
I0
sg904
g924
sS'block_loop.thisRepN'
p1311
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1312
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1313
Nsg70
Vy
sS'block_loop.thisTrialN'
p1314
I0
sg39
F1.3666140374625684
sg34
g753
(S'\x07\xdf\x07\t\x15\x04\x03\n\xf0\xc8'
tRp1315
sa(dp1316
S'trial_loop.thisTrialN'
p1317
I27
sg895
S'4-corn.png'
p1318
sS'block_loop.thisIndex'
p1319
g889
sg38
S'left'
p1320
sg59
g63
sS'trial_loop.thisN'
p1321
I27
sg33
S'4-corn.png'
p1322
sg64
g65
sS'trial_loop.thisIndex'
p1323
g60
(g99
S'\x1b\x00\x00\x00'
tRp1324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1325
I0
sg904
S'10-bounty_redo.png'
p1326
sS'block_loop.thisRepN'
p1327
I0
sg907
g1322
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1328
I0
sg909
S'10-bounty_redo.png'
p1329
sg55
g11
sS'block_loop.thisTrial'
p1330
Nsg70
Vy
sS'block_loop.thisTrialN'
p1331
I0
sg39
F1.1499008712053183
sg34
g753
(S'\x07\xdf\x07\t\x15\x04\n\x01\xb9h'
tRp1332
sa(dp1333
S'trial_loop.thisTrialN'
p1334
I28
sg895
g1170
sS'block_loop.thisIndex'
p1335
g889
sg38
S'left'
p1336
sg59
g63
sS'trial_loop.thisN'
p1337
I28
sg33
g1174
sg64
g65
sS'trial_loop.thisIndex'
p1338
g60
(g99
S'\x1c\x00\x00\x00'
tRp1339
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1340
I0
sg904
g1178
sS'block_loop.thisRepN'
p1341
I0
sg907
g1174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1342
I0
sg909
g1181
sg55
g11
sS'block_loop.thisTrial'
p1343
Nsg70
Vy
sS'block_loop.thisTrialN'
p1344
I0
sg39
F0.89977186406758847
sg34
g753
(S'\x07\xdf\x07\t\x15\x04\x10\x04\xaf8'
tRp1345
sa(dp1346
S'trial_loop.thisTrialN'
p1347
I29
sg895
S'46-pistachios.png'
p1348
sS'block_loop.thisIndex'
p1349
g889
sg38
S'left'
p1350
sg59
g63
sS'trial_loop.thisN'
p1351
I29
sg33
S'29-beans.png'
p1352
sg64
g65
sS'trial_loop.thisIndex'
p1353
g60
(g99
S'\x1d\x00\x00\x00'
tRp1354
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1355
I0
sg904
S'29-beans.png'
p1356
sS'block_loop.thisRepN'
p1357
I0
sg907
g1352
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1358
I0
sg909
S'46-pistachios.png'
p1359
sg55
g11
sS'block_loop.thisTrial'
p1360
Nsg70
Vy
sS'block_loop.thisTrialN'
p1361
I0
sg39
F0.83324438255658606
sg34
g753
(S'\x07\xdf\x07\t\x15\x04\x16\x03\x95\xf8'
tRp1362
sa(dp1363
S'trial_loop.thisTrialN'
p1364
I30
sg895
g1318
sS'block_loop.thisIndex'
p1365
g889
sg38
S'left'
p1366
sg59
g63
sS'trial_loop.thisN'
p1367
I30
sg33
g1322
sg64
g65
sS'trial_loop.thisIndex'
p1368
g60
(g99
S'\x1e\x00\x00\x00'
tRp1369
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1370
I0
sg904
g1326
sS'block_loop.thisRepN'
p1371
I0
sg907
g1322
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1372
I0
sg909
g1329
sg55
g11
sS'block_loop.thisTrial'
p1373
Nsg70
Vy
sS'block_loop.thisTrialN'
p1374
I0
sg39
F0.70026981735281879
sg34
g753
(S'\x07\xdf\x07\t\x15\x04\x1c\x01\x86\xa0'
tRp1375
sa(dp1376
S'trial_loop.thisTrialN'
p1377
I31
sg895
g1202
sS'block_loop.thisIndex'
p1378
g889
sg38
S'right'
p1379
sg59
g63
sS'trial_loop.thisN'
p1380
I31
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1381
g60
(g99
S'\x1f\x00\x00\x00'
tRp1382
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1383
I0
sg904
g1209
sS'block_loop.thisRepN'
p1384
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1385
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1386
Nsg70
Vy
sS'block_loop.thisTrialN'
p1387
I0
sg39
F1.3333176529049524
sg34
g753
(S'\x07\xdf\x07\t\x15\x04!\x0c\xd5('
tRp1388
sa(dp1389
S'trial_loop.thisTrialN'
p1390
I32
sg895
S'10-bounty_redo.png'
p1391
sS'block_loop.thisIndex'
p1392
g889
sg38
S'right'
p1393
sg59
g63
sS'trial_loop.thisN'
p1394
I32
sg33
g1322
sg64
g65
sS'trial_loop.thisIndex'
p1395
g60
(g99
S' \x00\x00\x00'
tRp1396
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1397
I0
sg904
S'4-corn.png'
p1398
sS'block_loop.thisRepN'
p1399
I0
sg907
g1322
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1400
I0
sg909
g1329
sg55
g11
sS'block_loop.thisTrial'
p1401
Nsg70
Vy
sS'block_loop.thisTrialN'
p1402
I0
sg39
F0.88328261428250698
sg34
g753
(S'\x07\xdf\x07\t\x15\x04(\x03$\xb0'
tRp1403
sa(dp1404
S'trial_loop.thisTrialN'
p1405
I33
sg895
S'1-treacle_cookies.png'
p1406
sS'block_loop.thisIndex'
p1407
g889
sg38
S'right'
p1408
sg59
g63
sS'trial_loop.thisN'
p1409
I33
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p1410
g60
(g99
S'!\x00\x00\x00'
tRp1411
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1412
I0
sg904
S'21-nakd_banana_crunch.png'
p1413
sS'block_loop.thisRepN'
p1414
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1415
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1416
Nsg70
Vy
sS'block_loop.thisTrialN'
p1417
I0
sg39
F1.1165486073223292
sg34
g753
(S'\x07\xdf\x07\t\x15\x04.\x01\xcc\xf0'
tRp1418
sa(dp1419
S'trial_loop.thisTrialN'
p1420
I34
sg895
g1275
sS'block_loop.thisIndex'
p1421
g889
sg38
S'right'
p1422
sg59
g63
sS'trial_loop.thisN'
p1423
I34
sg33
g1279
sg64
g65
sS'trial_loop.thisIndex'
p1424
g60
(g99
S'"\x00\x00\x00'
tRp1425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1426
I0
sg904
g1283
sS'block_loop.thisRepN'
p1427
I0
sg907
g1285
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1428
I0
sg909
g1279
sg55
g11
sS'block_loop.thisTrial'
p1429
Nsg70
Vy
sS'block_loop.thisTrialN'
p1430
I0
sg39
F0.91653281285834964
sg34
g753
(S'\x07\xdf\x07\t\x15\x044\x04\x0b('
tRp1431
sa(dp1432
S'trial_loop.thisTrialN'
p1433
I35
sg895
g1391
sS'block_loop.thisIndex'
p1434
g889
sg38
S'right'
p1435
sg59
g63
sS'trial_loop.thisN'
p1436
I35
sg33
g1329
sg64
g65
sS'trial_loop.thisIndex'
p1437
g60
(g99
S'#\x00\x00\x00'
tRp1438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1439
I0
sg904
g1398
sS'block_loop.thisRepN'
p1440
I0
sg907
g1322
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1441
I0
sg909
g1329
sg55
g11
sS'block_loop.thisTrial'
p1442
Nsg70
Vy
sS'block_loop.thisTrialN'
p1443
I0
sg39
F0.76694041837617988
sg34
g753
(S'\x07\xdf\x07\t\x15\x04:\x03k\x00'
tRp1444
sa(dp1445
S'trial_loop.thisTrialN'
p1446
I36
sg895
g1406
sS'block_loop.thisIndex'
p1447
g889
sg38
S'right'
p1448
sg59
g63
sS'trial_loop.thisN'
p1449
I36
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1450
g60
(g99
S'$\x00\x00\x00'
tRp1451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1452
I0
sg904
g1413
sS'block_loop.thisRepN'
p1453
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1454
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1455
Nsg70
Vy
sS'block_loop.thisTrialN'
p1456
I0
sg39
F0.98333541455212981
sg34
g753
(S'\x07\xdf\x07\t\x15\x05\x04\x00.\xe0'
tRp1457
sa(dp1458
S'trial_loop.thisTrialN'
p1459
I37
sg895
S'29-beans.png'
p1460
sS'block_loop.thisIndex'
p1461
g889
sg38
S'right'
p1462
sg59
g63
sS'trial_loop.thisN'
p1463
I37
sg33
g1359
sg64
g65
sS'trial_loop.thisIndex'
p1464
g60
(g99
S'%\x00\x00\x00'
tRp1465
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1466
I0
sg904
S'46-pistachios.png'
p1467
sS'block_loop.thisRepN'
p1468
I0
sg907
g1352
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1469
I0
sg909
g1359
sg55
g11
sS'block_loop.thisTrial'
p1470
Nsg70
Vy
sS'block_loop.thisTrialN'
p1471
I0
sg39
F0.76662139300606214
sg34
g753
(S'\x07\xdf\x07\t\x15\x05\n\x00\x80\xe8'
tRp1472
sa(dp1473
S'trial_loop.thisTrialN'
p1474
I38
sg895
g1406
sS'block_loop.thisIndex'
p1475
g889
sg38
S'right'
p1476
sg59
g63
sS'trial_loop.thisN'
p1477
I38
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p1478
g60
(g99
S'&\x00\x00\x00'
tRp1479
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1480
I0
sg904
g1413
sS'block_loop.thisRepN'
p1481
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1482
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1483
Nsg70
Vy
sS'block_loop.thisTrialN'
p1484
I0
sg39
F0.8999414977588458
sg34
g753
(S'\x07\xdf\x07\t\x15\x05\x0f\x0c\xc1\xa0'
tRp1485
sa(dp1486
S'trial_loop.thisTrialN'
p1487
I39
sg895
g1460
sS'block_loop.thisIndex'
p1488
g889
sg38
S'right'
p1489
sg59
g63
sS'trial_loop.thisN'
p1490
I39
sg33
g1359
sg64
g65
sS'trial_loop.thisIndex'
p1491
g60
(g99
S"'\x00\x00\x00"
tRp1492
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1493
I0
sg904
g1467
sS'block_loop.thisRepN'
p1494
I0
sg907
g1352
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1495
I0
sg909
g1359
sg55
g11
sS'block_loop.thisTrial'
p1496
Nsg70
Vy
sS'block_loop.thisTrialN'
p1497
I0
sg39
F0.68323745465750108
sg34
g753
(S'\x07\xdf\x07\t\x15\x05\x15\x0b\xa8`'
tRp1498
sa(dp1499
S'trial_loop.thisTrialN'
p1500
I40
sg895
g1061
sS'block_loop.thisIndex'
p1501
g889
sg38
S'right'
p1502
sg59
g63
sS'trial_loop.thisN'
p1503
I40
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p1504
g60
(g99
S'(\x00\x00\x00'
tRp1505
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1506
I0
sg904
g1069
sS'block_loop.thisRepN'
p1507
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1508
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p1509
Nsg70
Vy
sS'block_loop.thisTrialN'
p1510
I0
sg39
F0.78334527897095541
sg34
g753
(S'\x07\xdf\x07\t\x15\x05\x1b\x07z\x10'
tRp1511
sa(dp1512
S'trial_loop.thisTrialN'
p1513
I41
sg895
g1108
sS'block_loop.thisIndex'
p1514
g889
sg38
S'right'
p1515
sg59
g63
sS'trial_loop.thisN'
p1516
I41
sg33
g1119
sg64
g65
sS'trial_loop.thisIndex'
p1517
g60
(g99
S')\x00\x00\x00'
tRp1518
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1519
I0
sg904
g1116
sS'block_loop.thisRepN'
p1520
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1521
I0
sg909
g1119
sg55
g11
sS'block_loop.thisTrial'
p1522
Nsg70
Vy
sS'block_loop.thisTrialN'
p1523
I0
sg39
F0.73360526041506091
sg34
g753
(S'\x07\xdf\x07\t\x15\x05!\x04\xb3 '
tRp1524
sa(dp1525
S'trial_loop.thisTrialN'
p1526
I42
sg895
g1061
sS'block_loop.thisIndex'
p1527
g889
sg38
S'right'
p1528
sg59
g63
sS'trial_loop.thisN'
p1529
I42
sg33
g1072
sg64
g65
sS'trial_loop.thisIndex'
p1530
g60
(g99
S'*\x00\x00\x00'
tRp1531
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1532
I0
sg904
g1069
sS'block_loop.thisRepN'
p1533
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1534
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p1535
Nsg70
Vy
sS'block_loop.thisTrialN'
p1536
I0
sg39
F0.66666866235755151
sg34
g753
(S"\x07\xdf\x07\t\x15\x05'\x00\xfd\xe8"
tRp1537
sa(dp1538
S'trial_loop.thisTrialN'
p1539
I43
sg895
S'18-mms.png'
p1540
sS'block_loop.thisIndex'
p1541
g889
sg38
S'left'
p1542
sg59
g63
sS'trial_loop.thisN'
p1543
I43
sg33
S'18-mms.png'
p1544
sg64
g65
sS'trial_loop.thisIndex'
p1545
g60
(g99
S'+\x00\x00\x00'
tRp1546
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1547
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1548
sS'block_loop.thisRepN'
p1549
I0
sg907
g1544
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1550
I0
sg909
S'43-mrporky_pork_crackles_redo.png'
p1551
sg55
g11
sS'block_loop.thisTrial'
p1552
Nsg70
Vy
sS'block_loop.thisTrialN'
p1553
I0
sg39
F2.3999608844678733
sg34
g753
(S'\x07\xdf\x07\t\x15\x05,\x0b\xcfp'
tRp1554
sa(dp1555
S'trial_loop.thisTrialN'
p1556
I44
sg895
g1187
sS'block_loop.thisIndex'
p1557
g889
sg38
S'left'
p1558
sg59
g63
sS'trial_loop.thisN'
p1559
I44
sg33
g1102
sg64
g65
sS'trial_loop.thisIndex'
p1560
g60
(g99
S',\x00\x00\x00'
tRp1561
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1562
I0
sg904
g1194
sS'block_loop.thisRepN'
p1563
I0
sg907
g1095
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1564
I0
sg909
g1102
sg55
g11
sS'block_loop.thisTrial'
p1565
Nsg70
Vy
sS'block_loop.thisTrialN'
p1566
I0
sg39
F1.1499861156989937
sg34
g753
(S'\x07\xdf\x07\t\x15\x054\x03\r@'
tRp1567
sa(dp1568
S'trial_loop.thisTrialN'
p1569
I45
sg895
S'2-steamed_puddings.png'
p1570
sS'block_loop.thisIndex'
p1571
g889
sg38
S'left'
p1572
sg59
g63
sS'trial_loop.thisN'
p1573
I45
sg33
g1285
sg64
g65
sS'trial_loop.thisIndex'
p1574
g60
(g99
S'-\x00\x00\x00'
tRp1575
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1576
I0
sg904
S'20-fruit_pastilles.png'
p1577
sS'block_loop.thisRepN'
p1578
I0
sg907
g1285
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1579
I0
sg909
g1279
sg55
g11
sS'block_loop.thisTrial'
p1580
Nsg70
Vy
sS'block_loop.thisTrialN'
p1581
I0
sg39
F0.99999600861337967
sg34
g753
(S'\x07\xdf\x07\t\x15\x05:\x05\xc4\x90'
tRp1582
sa(dp1583
S'trial_loop.thisTrialN'
p1584
I46
sg895
g1138
sS'block_loop.thisIndex'
p1585
g889
sg38
S'left'
p1586
sg59
g63
sS'trial_loop.thisN'
p1587
I46
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p1588
g60
(g99
S'.\x00\x00\x00'
tRp1589
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1590
I0
sg904
g1145
sS'block_loop.thisRepN'
p1591
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1592
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p1593
Nsg70
Vy
sS'block_loop.thisTrialN'
p1594
I0
sg39
F0.66669774241745472
sg34
g753
(S'\x07\xdf\x07\t\x15\x06\x04\x06U\x18'
tRp1595
sa(dp1596
S'trial_loop.thisTrialN'
p1597
I47
sg895
g1202
sS'block_loop.thisIndex'
p1598
g889
sg38
S'right'
p1599
sg59
g63
sS'trial_loop.thisN'
p1600
I47
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1601
g60
(g99
S'/\x00\x00\x00'
tRp1602
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1603
I0
sg904
g1209
sS'block_loop.thisRepN'
p1604
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1605
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1606
Nsg70
Vy
sS'block_loop.thisTrialN'
p1607
I0
sg39
F1.2333355571026914
sg34
g753
(S'\x07\xdf\x07\t\x15\x06\n\x01\xe4`'
tRp1608
sa(dp1609
S'trial_loop.thisTrialN'
p1610
I48
sg895
S'33-ambrosia_rice.png'
p1611
sS'block_loop.thisIndex'
p1612
g889
sg38
S'left'
p1613
sg59
g63
sS'trial_loop.thisN'
p1614
I48
sg33
g1119
sg64
g65
sS'trial_loop.thisIndex'
p1615
g60
(g99
S'0\x00\x00\x00'
tRp1616
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1617
I0
sg904
S'23-crunchie_redo.png'
p1618
sS'block_loop.thisRepN'
p1619
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1620
I0
sg909
g1119
sg55
g11
sS'block_loop.thisTrial'
p1621
Nsg70
Vy
sS'block_loop.thisTrialN'
p1622
I0
sg39
F0.98331317686097464
sg34
g753
(S'\x07\xdf\x07\t\x15\x06\x10\x05\xcc`'
tRp1623
sa(dp1624
S'trial_loop.thisTrialN'
p1625
I49
sg895
g1406
sS'block_loop.thisIndex'
p1626
g889
sg38
S'right'
p1627
sg59
g63
sS'trial_loop.thisN'
p1628
I49
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1629
g60
(g99
S'1\x00\x00\x00'
tRp1630
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1631
I0
sg904
g1413
sS'block_loop.thisRepN'
p1632
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1633
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1634
Nsg70
Vy
sS'block_loop.thisTrialN'
p1635
I0
sg39
F0.83328629205789184
sg34
g753
(S'\x07\xdf\x07\t\x15\x06\x16\x06"P'
tRp1636
sa(dp1637
S'trial_loop.thisTrialN'
p1638
I50
sg895
g967
sS'block_loop.thisIndex'
p1639
g889
sg38
S'right'
p1640
sg59
g63
sS'trial_loop.thisN'
p1641
I50
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p1642
g60
(g99
S'2\x00\x00\x00'
tRp1643
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1644
I0
sg904
g975
sS'block_loop.thisRepN'
p1645
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1646
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1647
Nsg70
Vy
sS'block_loop.thisTrialN'
p1648
I0
sg39
F1.6165970740912599
sg34
g753
(S'\x07\xdf\x07\t\x15\x06\x1c\x04\x12\xf8'
tRp1649
sa(dp1650
S'trial_loop.thisTrialN'
p1651
I51
sg895
g1611
sS'block_loop.thisIndex'
p1652
g889
sg38
S'right'
p1653
sg59
g63
sS'trial_loop.thisN'
p1654
I51
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p1655
g60
(g99
S'3\x00\x00\x00'
tRp1656
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1657
I0
sg904
g1618
sS'block_loop.thisRepN'
p1658
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1659
I0
sg909
g1119
sg55
g11
sS'block_loop.thisTrial'
p1660
Nsg70
Vy
sS'block_loop.thisTrialN'
p1661
I0
sg39
F0.76700998244632501
sg34
g753
(S'\x07\xdf\x07\t\x15\x06"\r\xeeh'
tRp1662
sa(dp1663
S'trial_loop.thisTrialN'
p1664
I52
sg895
g916
sS'block_loop.thisIndex'
p1665
g889
sg38
S'left'
p1666
sg59
g63
sS'trial_loop.thisN'
p1667
I52
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1668
g60
(g99
S'4\x00\x00\x00'
tRp1669
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1670
I0
sg904
g924
sS'block_loop.thisRepN'
p1671
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1672
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1673
Nsg70
Vy
sS'block_loop.thisTrialN'
p1674
I0
sg39
F1.0832385380417691
sg34
g753
(S'\x07\xdf\x07\t\x15\x06(\n\xec\xe0'
tRp1675
sa(dp1676
S'trial_loop.thisTrialN'
p1677
I53
sg895
S'3-ellas_strawberries_apples.png'
p1678
sS'block_loop.thisIndex'
p1679
g889
sg38
S'left'
p1680
sg59
g63
sS'trial_loop.thisN'
p1681
I53
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p1682
g60
(g99
S'5\x00\x00\x00'
tRp1683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1684
I0
sg904
S'13-mccoys_steak_crisps.png'
p1685
sS'block_loop.thisRepN'
p1686
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1687
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1688
Nsg70
Vy
sS'block_loop.thisTrialN'
p1689
I0
sg39
F0.96659242697933223
sg34
g753
(S'\x07\xdf\x07\t\x15\x06.\x0c\xae\x18'
tRp1690
sa(dp1691
S'trial_loop.thisTrialN'
p1692
I54
sg895
S'22-daim.png'
p1693
sS'block_loop.thisIndex'
p1694
g889
sg38
S'left'
p1695
sg59
g63
sS'trial_loop.thisN'
p1696
I54
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1697
g60
(g99
S'6\x00\x00\x00'
tRp1698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1699
I0
sg904
S'7-olives.png'
p1700
sS'block_loop.thisRepN'
p1701
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1702
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1703
Nsg70
Vy
sS'block_loop.thisTrialN'
p1704
I0
sg39
F1.2665338677252294
sg34
g753
(S'\x07\xdf\x07\t\x15\x064\x0c\xc5\x88'
tRp1705
sa(dp1706
S'trial_loop.thisTrialN'
p1707
I55
sg895
S'6-sour_patch_kids.png'
p1708
sS'block_loop.thisIndex'
p1709
g889
sg38
S'right'
p1710
sg59
g63
sS'trial_loop.thisN'
p1711
I55
sg33
S'38-maltesers.png'
p1712
sg64
g65
sS'trial_loop.thisIndex'
p1713
g60
(g99
S'7\x00\x00\x00'
tRp1714
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1715
I0
sg904
S'38-maltesers.png'
p1716
sS'block_loop.thisRepN'
p1717
I0
sg907
g1712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1718
I0
sg909
S'6-sour_patch_kids.png'
p1719
sg55
g11
sS'block_loop.thisTrial'
p1720
Nsg70
Vy
sS'block_loop.thisTrialN'
p1721
I0
sg39
F1.0496142900519772
sg34
g753
(S'\x07\xdf\x07\t\x15\x06;\x02"\xe0'
tRp1722
sa(dp1723
S'trial_loop.thisTrialN'
p1724
I56
sg895
g1348
sS'block_loop.thisIndex'
p1725
g889
sg38
S'right'
p1726
sg59
g63
sS'trial_loop.thisN'
p1727
I56
sg33
g1352
sg64
g65
sS'trial_loop.thisIndex'
p1728
g60
(g99
S'8\x00\x00\x00'
tRp1729
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1730
I0
sg904
g1356
sS'block_loop.thisRepN'
p1731
I0
sg907
g1352
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1732
I0
sg909
g1359
sg55
g11
sS'block_loop.thisTrial'
p1733
Nsg70
Vy
sS'block_loop.thisTrialN'
p1734
I0
sg39
F0.91674920271907467
sg34
g753
(S'\x07\xdf\x07\t\x15\x07\x05\x03k\x00'
tRp1735
sa(dp1736
S'trial_loop.thisTrialN'
p1737
I57
sg895
g896
sS'block_loop.thisIndex'
p1738
g889
sg38
S'left'
p1739
sg59
g63
sS'trial_loop.thisN'
p1740
I57
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1741
g60
(g99
S'9\x00\x00\x00'
tRp1742
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1743
I0
sg904
g905
sS'block_loop.thisRepN'
p1744
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1745
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1746
Nsg70
Vy
sS'block_loop.thisTrialN'
p1747
I0
sg39
F0.84994546062807785
sg34
g753
(S'\x07\xdf\x07\t\x15\x07\x0b\x02\x8cX'
tRp1748
sa(dp1749
S'trial_loop.thisTrialN'
p1750
I58
sg895
g1678
sS'block_loop.thisIndex'
p1751
g889
sg38
S'left'
p1752
sg59
g63
sS'trial_loop.thisN'
p1753
I58
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p1754
g60
(g99
S':\x00\x00\x00'
tRp1755
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1756
I0
sg904
g1685
sS'block_loop.thisRepN'
p1757
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1758
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1759
Nsg70
Vy
sS'block_loop.thisTrialN'
p1760
I0
sg39
F0.9499477984427358
sg34
g753
(S'\x07\xdf\x07\t\x15\x07\x11\x00\xbfh'
tRp1761
sa(dp1762
S'trial_loop.thisTrialN'
p1763
I59
sg895
S'19-caramello_redo.png'
p1764
sS'block_loop.thisIndex'
p1765
g889
sg38
S'right'
p1766
sg59
g63
sS'trial_loop.thisN'
p1767
I59
sg33
g1243
sg64
g65
sS'trial_loop.thisIndex'
p1768
g60
(g99
S';\x00\x00\x00'
tRp1769
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1770
I0
sg904
S'30-spaghetti_hoops.png'
p1771
sS'block_loop.thisRepN'
p1772
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1773
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p1774
Nsg70
Vy
sS'block_loop.thisTrialN'
p1775
I0
sg39
F1.8999720033098129
sg34
g753
(S'\x07\xdf\x07\t\x15\x07\x17\x00\x98X'
tRp1776
sa(dp1777
S'trial_loop.thisTrialN'
p1778
I60
sg895
g1018
sS'block_loop.thisIndex'
p1779
g889
sg38
S'left'
p1780
sg59
g63
sS'trial_loop.thisN'
p1781
I60
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1782
g60
(g99
S'<\x00\x00\x00'
tRp1783
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1784
I0
sg904
g1026
sS'block_loop.thisRepN'
p1785
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1786
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1787
Nsg70
Vy
sS'block_loop.thisTrialN'
p1788
I0
sg39
F1.1166640722658485
sg34
g753
(S'\x07\xdf\x07\t\x15\x07\x1d\x0e\xb9\x88'
tRp1789
sa(dp1790
S'trial_loop.thisTrialN'
p1791
I61
sg895
S'27-hartleys_raspberries_jelly.png'
p1792
sS'block_loop.thisIndex'
p1793
g889
sg38
S'right'
p1794
sg59
g63
sS'trial_loop.thisN'
p1795
I61
sg33
g1174
sg64
g65
sS'trial_loop.thisIndex'
p1796
g60
(g99
S'=\x00\x00\x00'
tRp1797
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1798
I0
sg904
S'51-mars.png'
p1799
sS'block_loop.thisRepN'
p1800
I0
sg907
g1174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1801
I0
sg909
g1181
sg55
g11
sS'block_loop.thisTrial'
p1802
Nsg70
Vy
sS'block_loop.thisTrialN'
p1803
I0
sg39
F0.91690828776336275
sg34
g753
(S'\x07\xdf\x07\t\x15\x07$\x01\xb5\x80'
tRp1804
sa(dp1805
S'trial_loop.thisTrialN'
p1806
I62
sg895
g1138
sS'block_loop.thisIndex'
p1807
g889
sg38
S'left'
p1808
sg59
g63
sS'trial_loop.thisN'
p1809
I62
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p1810
g60
(g99
S'>\x00\x00\x00'
tRp1811
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1812
I0
sg904
g1145
sS'block_loop.thisRepN'
p1813
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1814
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p1815
Nsg70
Vy
sS'block_loop.thisTrialN'
p1816
I0
sg39
F1.1999365370429587
sg34
g753
(S'\x07\xdf\x07\t\x15\x07*\x01\x15X'
tRp1817
sa(dp1818
S'trial_loop.thisTrialN'
p1819
I63
sg895
g1170
sS'block_loop.thisIndex'
p1820
g889
sg38
S'left'
p1821
sg59
g63
sS'trial_loop.thisN'
p1822
I63
sg33
g1174
sg64
g65
sS'trial_loop.thisIndex'
p1823
g60
(g99
S'?\x00\x00\x00'
tRp1824
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1825
I0
sg904
g1178
sS'block_loop.thisRepN'
p1826
I0
sg907
g1174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1827
I0
sg909
g1181
sg55
g11
sS'block_loop.thisTrial'
p1828
Nsg70
Vy
sS'block_loop.thisTrialN'
p1829
I0
sg39
F1.2164465990281315
sg34
g753
(S'\x07\xdf\x07\t\x15\x070\x04\x80X'
tRp1830
sa(dp1831
S'trial_loop.thisTrialN'
p1832
I64
sg895
S'38-maltesers.png'
p1833
sS'block_loop.thisIndex'
p1834
g889
sg38
S'left'
p1835
sg59
g63
sS'trial_loop.thisN'
p1836
I64
sg33
g1712
sg64
g65
sS'trial_loop.thisIndex'
p1837
g60
(g99
S'@\x00\x00\x00'
tRp1838
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1839
I0
sg904
S'6-sour_patch_kids.png'
p1840
sS'block_loop.thisRepN'
p1841
I0
sg907
g1712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1842
I0
sg909
g1719
sg55
g11
sS'block_loop.thisTrial'
p1843
Nsg70
Vy
sS'block_loop.thisTrialN'
p1844
I0
sg39
F0.89973508634284372
sg34
g753
(S'\x07\xdf\x07\t\x15\x076\x08hX'
tRp1845
sa(dp1846
S'trial_loop.thisTrialN'
p1847
I65
sg895
S'40-sardines.png'
p1848
sS'block_loop.thisIndex'
p1849
g889
sg38
S'right'
p1850
sg59
g63
sS'trial_loop.thisN'
p1851
I65
sg33
g994
sg64
g65
sS'trial_loop.thisIndex'
p1852
g60
(g99
S'A\x00\x00\x00'
tRp1853
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1854
I0
sg904
S'5-pineapple.png'
p1855
sS'block_loop.thisRepN'
p1856
I0
sg907
g994
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1857
I0
sg909
g988
sg55
g11
sS'block_loop.thisTrial'
p1858
Nsg70
Vy
sS'block_loop.thisTrialN'
p1859
I0
sg39
F0.96665828476398019
sg34
g753
(S'\x07\xdf\x07\t\x15\x08\x00\x07O\x18'
tRp1860
sa(dp1861
S'trial_loop.thisTrialN'
p1862
I66
sg895
g896
sS'block_loop.thisIndex'
p1863
g889
sg38
S'left'
p1864
sg59
g63
sS'trial_loop.thisN'
p1865
I66
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1866
g60
(g99
S'B\x00\x00\x00'
tRp1867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1868
I0
sg904
g905
sS'block_loop.thisRepN'
p1869
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1870
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1871
Nsg70
Vy
sS'block_loop.thisTrialN'
p1872
I0
sg39
F0.91705910494056297
sg34
g753
(S'\x07\xdf\x07\t\x15\x08\x06\x07f\x88'
tRp1873
sa(dp1874
S'trial_loop.thisTrialN'
p1875
I67
sg895
S'41-peanuts_redo.png'
p1876
sS'block_loop.thisIndex'
p1877
g889
sg38
S'left'
p1878
sg59
g63
sS'trial_loop.thisN'
p1879
I67
sg33
S'41-peanuts_redo.png'
p1880
sg64
g65
sS'trial_loop.thisIndex'
p1881
g60
(g99
S'C\x00\x00\x00'
tRp1882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1883
I0
sg904
S'45-chewy_nougat_redo.png'
p1884
sS'block_loop.thisRepN'
p1885
I0
sg907
g1880
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1886
I0
sg909
S'45-chewy_nougat_redo.png'
p1887
sg55
g11
sS'block_loop.thisTrial'
p1888
Nsg70
Vy
sS'block_loop.thisTrialN'
p1889
I0
sg39
F1.516635505387967
sg34
g753
(S'\x07\xdf\x07\t\x15\x08\x0c\x06\x8b\xc8'
tRp1890
sa(dp1891
S'trial_loop.thisTrialN'
p1892
I68
sg895
S'43-mrporky_pork_crackles_redo.png'
p1893
sS'block_loop.thisIndex'
p1894
g889
sg38
S'right'
p1895
sg59
g63
sS'trial_loop.thisN'
p1896
I68
sg33
g1551
sg64
g65
sS'trial_loop.thisIndex'
p1897
g60
(g99
S'D\x00\x00\x00'
tRp1898
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1899
I0
sg904
S'18-mms.png'
p1900
sS'block_loop.thisRepN'
p1901
I0
sg907
g1544
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1902
I0
sg909
g1551
sg55
g11
sS'block_loop.thisTrial'
p1903
Nsg70
Vy
sS'block_loop.thisTrialN'
p1904
I0
sg39
F0.76660685297247255
sg34
g753
(S'\x07\xdf\x07\t\x15\x08\x12\x0e\xf8\x08'
tRp1905
sa(dp1906
S'trial_loop.thisTrialN'
p1907
I69
sg895
g1792
sS'block_loop.thisIndex'
p1908
g889
sg38
S'right'
p1909
sg59
g63
sS'trial_loop.thisN'
p1910
I69
sg33
g1181
sg64
g65
sS'trial_loop.thisIndex'
p1911
g60
(g99
S'E\x00\x00\x00'
tRp1912
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1913
I0
sg904
g1799
sS'block_loop.thisRepN'
p1914
I0
sg907
g1174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1915
I0
sg909
g1181
sg55
g11
sS'block_loop.thisTrial'
p1916
Nsg70
Vy
sS'block_loop.thisTrialN'
p1917
I0
sg39
F0.59993163334729616
sg34
g753
(S'\x07\xdf\x07\t\x15\x08\x18\x0b\xf6\x80'
tRp1918
sa(dp1919
S'trial_loop.thisTrialN'
p1920
I70
sg895
g1876
sS'block_loop.thisIndex'
p1921
g889
sg38
S'left'
p1922
sg59
g63
sS'trial_loop.thisN'
p1923
I70
sg33
g1887
sg64
g65
sS'trial_loop.thisIndex'
p1924
g60
(g99
S'F\x00\x00\x00'
tRp1925
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1926
I0
sg904
g1884
sS'block_loop.thisRepN'
p1927
I0
sg907
g1880
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1928
I0
sg909
g1887
sg55
g11
sS'block_loop.thisTrial'
p1929
Nsg70
Vy
sS'block_loop.thisTrialN'
p1930
I0
sg39
F1.116668348753592
sg34
g753
(S'\x07\xdf\x07\t\x15\x08\x1e\x06U\x18'
tRp1931
sa(dp1932
S'trial_loop.thisTrialN'
p1933
I71
sg895
g1153
sS'block_loop.thisIndex'
p1934
g889
sg38
S'right'
p1935
sg59
g63
sS'trial_loop.thisN'
p1936
I71
sg33
g1157
sg64
g65
sS'trial_loop.thisIndex'
p1937
g60
(g99
S'G\x00\x00\x00'
tRp1938
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1939
I0
sg904
g1161
sS'block_loop.thisRepN'
p1940
I0
sg907
g1157
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1941
I0
sg909
g1164
sg55
g11
sS'block_loop.thisTrial'
p1942
Nsg70
Vy
sS'block_loop.thisTrialN'
p1943
I0
sg39
F0.90030186243529897
sg34
g753
(S'\x07\xdf\x07\t\x15\x08$\x08\x93P'
tRp1944
sa(dp1945
S'trial_loop.thisTrialN'
p1946
I72
sg895
S'50-polo.png'
p1947
sS'block_loop.thisIndex'
p1948
g889
sg38
S'right'
p1949
sg59
g63
sS'trial_loop.thisN'
p1950
I72
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1951
g60
(g99
S'H\x00\x00\x00'
tRp1952
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1953
I0
sg904
S'48-twix.png'
p1954
sS'block_loop.thisRepN'
p1955
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1956
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1957
Nsg70
Vy
sS'block_loop.thisTrialN'
p1958
I0
sg39
F0.79998905221145833
sg34
g753
(S'\x07\xdf\x07\t\x15\x08*\x07\xb8\x90'
tRp1959
sa(dp1960
S'trial_loop.thisTrialN'
p1961
I73
sg895
S'45-chewy_nougat_redo.png'
p1962
sS'block_loop.thisIndex'
p1963
g889
sg38
S'right'
p1964
sg59
g63
sS'trial_loop.thisN'
p1965
I73
sg33
g1887
sg64
g65
sS'trial_loop.thisIndex'
p1966
g60
(g99
S'I\x00\x00\x00'
tRp1967
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1968
I0
sg904
S'41-peanuts_redo.png'
p1969
sS'block_loop.thisRepN'
p1970
I0
sg907
g1880
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1971
I0
sg909
g1887
sg55
g11
sS'block_loop.thisTrial'
p1972
Nsg70
Vy
sS'block_loop.thisTrialN'
p1973
I0
sg39
F1.0666229895577999
sg34
g753
(S'\x07\xdf\x07\t\x15\x080\x050 '
tRp1974
sa(dp1975
S'trial_loop.thisTrialN'
p1976
I74
sg895
g1217
sS'block_loop.thisIndex'
p1977
g889
sg38
S'left'
p1978
sg59
g63
sS'trial_loop.thisN'
p1979
I74
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1980
g60
(g99
S'J\x00\x00\x00'
tRp1981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1982
I0
sg904
g1224
sS'block_loop.thisRepN'
p1983
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1984
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1985
Nsg70
Vy
sS'block_loop.thisTrialN'
p1986
I0
sg39
F1.6164856005270849
sg34
g753
(S'\x07\xdf\x07\t\x15\x086\x06\xb6\xc0'
tRp1987
sa(dp1988
S'trial_loop.thisTrialN'
p1989
I75
sg895
g1275
sS'block_loop.thisIndex'
p1990
g889
sg38
S'right'
p1991
sg59
g63
sS'trial_loop.thisN'
p1992
I75
sg33
g1285
sg64
g65
sS'trial_loop.thisIndex'
p1993
g60
(g99
S'K\x00\x00\x00'
tRp1994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1995
I0
sg904
g1283
sS'block_loop.thisRepN'
p1996
I0
sg907
g1285
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1997
I0
sg909
g1279
sg55
g11
sS'block_loop.thisTrial'
p1998
Nsg70
Vy
sS'block_loop.thisTrialN'
p1999
I0
sg39
F0.88320820354419993
sg34
g753
(S'\x07\xdf\x07\t\x15\t\x01\x01L\x08'
tRp2000
sa(dp2001
S'trial_loop.thisTrialN'
p2002
I76
sg895
g1001
sS'block_loop.thisIndex'
p2003
g889
sg38
S'right'
p2004
sg59
g63
sS'trial_loop.thisN'
p2005
I76
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2006
g60
(g99
S'L\x00\x00\x00'
tRp2007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2008
I0
sg904
g1009
sS'block_loop.thisRepN'
p2009
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2010
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2011
Nsg70
Vy
sS'block_loop.thisTrialN'
p2012
I0
sg39
F1.083353432790318
sg34
g753
(S'\x07\xdf\x07\t\x15\t\x06\x0f:p'
tRp2013
sa(dp2014
S'trial_loop.thisTrialN'
p2015
I77
sg895
g1232
sS'block_loop.thisIndex'
p2016
g889
sg38
S'right'
p2017
sg59
g63
sS'trial_loop.thisN'
p2018
I77
sg33
g1243
sg64
g65
sS'trial_loop.thisIndex'
p2019
g60
(g99
S'M\x00\x00\x00'
tRp2020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2021
I0
sg904
g1240
sS'block_loop.thisRepN'
p2022
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2023
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p2024
Nsg70
Vy
sS'block_loop.thisTrialN'
p2025
I0
sg39
F1.6498780633191927
sg34
g753
(S'\x07\xdf\x07\t\x15\t\r\x01\xb9h'
tRp2026
sa(dp2027
S'trial_loop.thisTrialN'
p2028
I78
sg895
g1833
sS'block_loop.thisIndex'
p2029
g889
sg38
S'left'
p2030
sg59
g63
sS'trial_loop.thisN'
p2031
I78
sg33
g1712
sg64
g65
sS'trial_loop.thisIndex'
p2032
g60
(g99
S'N\x00\x00\x00'
tRp2033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2034
I0
sg904
g1840
sS'block_loop.thisRepN'
p2035
I0
sg907
g1712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2036
I0
sg909
g1719
sg55
g11
sS'block_loop.thisTrial'
p2037
Nsg70
Vy
sS'block_loop.thisTrialN'
p2038
I0
sg39
F0.88302231923444197
sg34
g753
(S'\x07\xdf\x07\t\x15\t\x13\x0cH\x88'
tRp2039
sa(dp2040
S'trial_loop.thisTrialN'
p2041
I79
sg895
S'26-walkers_smoky_bacon.png'
p2042
sS'block_loop.thisIndex'
p2043
g889
sg38
S'right'
p2044
sg59
g63
sS'trial_loop.thisN'
p2045
I79
sg33
g1157
sg64
g65
sS'trial_loop.thisIndex'
p2046
g60
(g99
S'O\x00\x00\x00'
tRp2047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2048
I0
sg904
S'44-crunch.png'
p2049
sS'block_loop.thisRepN'
p2050
I0
sg907
g1157
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2051
I0
sg909
g1164
sg55
g11
sS'block_loop.thisTrial'
p2052
Nsg70
Vy
sS'block_loop.thisTrialN'
p2053
I0
sg39
F1.1332351453675074
sg34
g753
(S'\x07\xdf\x07\t\x15\t\x19\n\xf4\xb0'
tRp2054
sa(dp2055
S'trial_loop.thisTrialN'
p2056
I80
sg895
g1962
sS'block_loop.thisIndex'
p2057
g889
sg38
S'right'
p2058
sg59
g63
sS'trial_loop.thisN'
p2059
I80
sg33
g1880
sg64
g65
sS'trial_loop.thisIndex'
p2060
g60
(g99
S'P\x00\x00\x00'
tRp2061
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2062
I0
sg904
g1969
sS'block_loop.thisRepN'
p2063
I0
sg907
g1880
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2064
I0
sg909
g1887
sg55
g11
sS'block_loop.thisTrial'
p2065
Nsg70
Vy
sS'block_loop.thisTrialN'
p2066
I0
sg39
F0.81659063085680827
sg34
g753
(S'\x07\xdf\x07\t\x15\t\x1f\rm\x80'
tRp2067
sa(dp2068
S'trial_loop.thisTrialN'
p2069
I81
sg895
g933
sS'block_loop.thisIndex'
p2070
g889
sg38
S'left'
p2071
sg59
g63
sS'trial_loop.thisN'
p2072
I81
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2073
g60
(g99
S'Q\x00\x00\x00'
tRp2074
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2075
I0
sg904
g941
sS'block_loop.thisRepN'
p2076
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2077
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2078
Nsg70
Vy
sS'block_loop.thisTrialN'
p2079
I0
sg39
F0.78374470215203473
sg34
g753
(S'\x07\xdf\x07\t\x15\t%\x0b#\x90'
tRp2080
sa(dp2081
S'trial_loop.thisTrialN'
p2082
I82
sg895
g1202
sS'block_loop.thisIndex'
p2083
g889
sg38
S'right'
p2084
sg59
g63
sS'trial_loop.thisN'
p2085
I82
sg33
g1029
sg64
g65
sS'trial_loop.thisIndex'
p2086
g60
(g99
S'R\x00\x00\x00'
tRp2087
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2088
I0
sg904
g1209
sS'block_loop.thisRepN'
p2089
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2090
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p2091
Nsg70
Vy
sS'block_loop.thisTrialN'
p2092
I0
sg39
F0.6999140142579563
sg34
g753
(S'\x07\xdf\x07\t\x15\t+\x08\\\xa0'
tRp2093
sa(dp2094
S'trial_loop.thisTrialN'
p2095
I83
sg895
g1611
sS'block_loop.thisIndex'
p2096
g889
sg38
S'right'
p2097
sg59
g63
sS'trial_loop.thisN'
p2098
I83
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p2099
g60
(g99
S'S\x00\x00\x00'
tRp2100
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2101
I0
sg904
g1618
sS'block_loop.thisRepN'
p2102
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2103
I0
sg909
g1119
sg55
g11
sS'block_loop.thisTrial'
p2104
Nsg70
Vy
sS'block_loop.thisTrialN'
p2105
I0
sg39
F1.4332521372489282
sg34
g753
(S'\x07\xdf\x07\t\x15\t1\x04h\xe8'
tRp2106
sa(dp2107
S'trial_loop.thisTrialN'
p2108
I84
sg895
g1947
sS'block_loop.thisIndex'
p2109
g889
sg38
S'right'
p2110
sg59
g63
sS'trial_loop.thisN'
p2111
I84
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2112
g60
(g99
S'T\x00\x00\x00'
tRp2113
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2114
I0
sg904
g1954
sS'block_loop.thisRepN'
p2115
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2116
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2117
Nsg70
Vy
sS'block_loop.thisTrialN'
p2118
I0
sg39
F0.60000518879678566
sg34
g753
(S'\x07\xdf\x07\t\x15\t7\x0bi\xe0'
tRp2119
sa(dp2120
S'trial_loop.thisTrialN'
p2121
I85
sg895
g1153
sS'block_loop.thisIndex'
p2122
g889
sg38
S'left'
p2123
sg59
g63
sS'trial_loop.thisN'
p2124
I85
sg33
g1164
sg64
g65
sS'trial_loop.thisIndex'
p2125
g60
(g99
S'U\x00\x00\x00'
tRp2126
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2127
I0
sg904
g1161
sS'block_loop.thisRepN'
p2128
I0
sg907
g1157
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2129
I0
sg909
g1164
sg55
g11
sS'block_loop.thisTrial'
p2130
Nsg70
Vy
sS'block_loop.thisTrialN'
p2131
I0
sg39
F1.1665805668744724
sg34
g753
(S'\x07\xdf\x07\t\x15\n\x01\x05\xc8x'
tRp2132
sa(dp2133
S'trial_loop.thisTrialN'
p2134
I86
sg895
g1570
sS'block_loop.thisIndex'
p2135
g889
sg38
S'left'
p2136
sg59
g63
sS'trial_loop.thisN'
p2137
I86
sg33
g1285
sg64
g65
sS'trial_loop.thisIndex'
p2138
g60
(g99
S'V\x00\x00\x00'
tRp2139
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2140
I0
sg904
g1577
sS'block_loop.thisRepN'
p2141
I0
sg907
g1285
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2142
I0
sg909
g1279
sg55
g11
sS'block_loop.thisTrial'
p2143
Nsg70
Vy
sS'block_loop.thisTrialN'
p2144
I0
sg39
F0.79991777754912619
sg34
g753
(S'\x07\xdf\x07\t\x15\n\x07\x08\xf8\xe0'
tRp2145
sa(dp2146
S'trial_loop.thisTrialN'
p2147
I87
sg895
g1611
sS'block_loop.thisIndex'
p2148
g889
sg38
S'left'
p2149
sg59
g63
sS'trial_loop.thisN'
p2150
I87
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p2151
g60
(g99
S'W\x00\x00\x00'
tRp2152
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2153
I0
sg904
g1618
sS'block_loop.thisRepN'
p2154
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2155
I0
sg909
g1119
sg55
g11
sS'block_loop.thisTrial'
p2156
Nsg70
Vy
sS'block_loop.thisTrialN'
p2157
I0
sg39
F0.89992097065987764
sg34
g753
(S'\x07\xdf\x07\t\x15\n\r\x06pp'
tRp2158
sa(dp2159
S'trial_loop.thisTrialN'
p2160
I88
sg895
g1187
sS'block_loop.thisIndex'
p2161
g889
sg38
S'left'
p2162
sg59
g63
sS'trial_loop.thisN'
p2163
I88
sg33
g1095
sg64
g65
sS'trial_loop.thisIndex'
p2164
g60
(g99
S'X\x00\x00\x00'
tRp2165
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2166
I0
sg904
g1194
sS'block_loop.thisRepN'
p2167
I0
sg907
g1095
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2168
I0
sg909
g1102
sg55
g11
sS'block_loop.thisTrial'
p2169
Nsg70
Vy
sS'block_loop.thisTrialN'
p2170
I0
sg39
F1.0833029703353532
sg34
g753
(S'\x07\xdf\x07\t\x15\n\x13\x05W0'
tRp2171
sa(dp2172
S'trial_loop.thisTrialN'
p2173
I89
sg895
g2042
sS'block_loop.thisIndex'
p2174
g889
sg38
S'left'
p2175
sg59
g63
sS'trial_loop.thisN'
p2176
I89
sg33
g1164
sg64
g65
sS'trial_loop.thisIndex'
p2177
g60
(g99
S'Y\x00\x00\x00'
tRp2178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2179
I0
sg904
g2049
sS'block_loop.thisRepN'
p2180
I0
sg907
g1157
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2181
I0
sg909
g1164
sg55
g11
sS'block_loop.thisTrial'
p2182
Nsg70
Vy
sS'block_loop.thisTrialN'
p2183
I0
sg39
F2.0497343165770872
sg34
g753
(S'\x07\xdf\x07\t\x15\n\x19\x07\x1cP'
tRp2184
sa(dp2185
S'trial_loop.thisTrialN'
p2186
I90
sg895
g1318
sS'block_loop.thisIndex'
p2187
g889
sg38
S'left'
p2188
sg59
g63
sS'trial_loop.thisN'
p2189
I90
sg33
g1322
sg64
g65
sS'trial_loop.thisIndex'
p2190
g60
(g99
S'Z\x00\x00\x00'
tRp2191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2192
I0
sg904
g1326
sS'block_loop.thisRepN'
p2193
I0
sg907
g1322
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2194
I0
sg909
g1329
sg55
g11
sS'block_loop.thisTrial'
p2195
Nsg70
Vy
sS'block_loop.thisTrialN'
p2196
I0
sg39
F0.71667980970960343
sg34
g753
(S'\x07\xdf\x07\t\x15\n \x08\\\xa0'
tRp2197
sa(dp2198
S'trial_loop.thisTrialN'
p2199
I91
sg895
g1876
sS'block_loop.thisIndex'
p2200
g889
sg38
S'left'
p2201
sg59
g63
sS'trial_loop.thisN'
p2202
I91
sg33
g1880
sg64
g65
sS'trial_loop.thisIndex'
p2203
g60
(g99
S'[\x00\x00\x00'
tRp2204
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2205
I0
sg904
g1884
sS'block_loop.thisRepN'
p2206
I0
sg907
g1880
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2207
I0
sg909
g1887
sg55
g11
sS'block_loop.thisTrial'
p2208
Nsg70
Vy
sS'block_loop.thisTrialN'
p2209
I0
sg39
F1.1836146401547012
sg34
g753
(S'\x07\xdf\x07\t\x15\n&\x04\xa7h'
tRp2210
sa(dp2211
S'trial_loop.thisTrialN'
p2212
I92
sg895
g1693
sS'block_loop.thisIndex'
p2213
g889
sg38
S'left'
p2214
sg59
g63
sS'trial_loop.thisN'
p2215
I92
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2216
g60
(g99
S'\\\x00\x00\x00'
tRp2217
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2218
I0
sg904
g1700
sS'block_loop.thisRepN'
p2219
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2220
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2221
Nsg70
Vy
sS'block_loop.thisTrialN'
p2222
I0
sg39
F0.983315457648132
sg34
g753
(S'\x07\xdf\x07\t\x15\n,\x07\xd3\xe8'
tRp2223
sa(dp2224
S'trial_loop.thisTrialN'
p2225
I93
sg895
g1187
sS'block_loop.thisIndex'
p2226
g889
sg38
S'left'
p2227
sg59
g63
sS'trial_loop.thisN'
p2228
I93
sg33
g1102
sg64
g65
sS'trial_loop.thisIndex'
p2229
g60
(g99
S']\x00\x00\x00'
tRp2230
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2231
I0
sg904
g1194
sS'block_loop.thisRepN'
p2232
I0
sg907
g1095
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2233
I0
sg909
g1102
sg55
g11
sS'block_loop.thisTrial'
p2234
Nsg70
Vy
sS'block_loop.thisTrialN'
p2235
I0
sg39
F0.89990129885700298
sg34
g753
(S'\x07\xdf\x07\t\x15\n2\x08)\xd8'
tRp2236
sa(dp2237
S'trial_loop.thisTrialN'
p2238
I94
sg895
g1406
sS'block_loop.thisIndex'
p2239
g889
sg38
S'right'
p2240
sg59
g63
sS'trial_loop.thisN'
p2241
I94
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p2242
g60
(g99
S'^\x00\x00\x00'
tRp2243
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2244
I0
sg904
g1413
sS'block_loop.thisRepN'
p2245
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2246
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2247
Nsg70
Vy
sS'block_loop.thisTrialN'
p2248
I0
sg39
F1.1166540938211256
sg34
g753
(S'\x07\xdf\x07\t\x15\n8\x07\x10\x98'
tRp2249
sa(dp2250
S'trial_loop.thisTrialN'
p2251
I95
sg895
g1170
sS'block_loop.thisIndex'
p2252
g889
sg38
S'left'
p2253
sg59
g63
sS'trial_loop.thisN'
p2254
I95
sg33
g1174
sg64
g65
sS'trial_loop.thisIndex'
p2255
g60
(g99
S'_\x00\x00\x00'
tRp2256
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2257
I0
sg904
g1178
sS'block_loop.thisRepN'
p2258
I0
sg907
g1174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2259
I0
sg909
g1181
sg55
g11
sS'block_loop.thisTrial'
p2260
Nsg70
Vy
sS'block_loop.thisTrialN'
p2261
I0
sg39
F0.73331132371822605
sg34
g753
(S'\x07\xdf\x07\t\x15\x0b\x02\tJ\xe8'
tRp2262
sa(dp2263
S'trial_loop.thisTrialN'
p2264
I96
sg895
g1764
sS'block_loop.thisIndex'
p2265
g889
sg38
S'left'
p2266
sg59
g63
sS'trial_loop.thisN'
p2267
I96
sg33
g1236
sg64
g65
sS'trial_loop.thisIndex'
p2268
g60
(g99
S'`\x00\x00\x00'
tRp2269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2270
I0
sg904
g1771
sS'block_loop.thisRepN'
p2271
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2272
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p2273
Nsg70
Vy
sS'block_loop.thisTrialN'
p2274
I0
sg39
F1.016488394488988
sg34
g753
(S'\x07\xdf\x07\t\x15\x0b\x08\x05\xd0H'
tRp2275
sa(dp2276
S'trial_loop.thisTrialN'
p2277
I97
sg895
g1876
sS'block_loop.thisIndex'
p2278
g889
sg38
S'left'
p2279
sg59
g63
sS'trial_loop.thisN'
p2280
I97
sg33
g1880
sg64
g65
sS'trial_loop.thisIndex'
p2281
g60
(g99
S'a\x00\x00\x00'
tRp2282
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2283
I0
sg904
g1884
sS'block_loop.thisRepN'
p2284
I0
sg907
g1880
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2285
I0
sg909
g1887
sg55
g11
sS'block_loop.thisTrial'
p2286
Nsg70
Vy
sS'block_loop.thisTrialN'
p2287
I0
sg39
F0.80000416244001826
sg34
g753
(S'\x07\xdf\x07\t\x15\x0b\x0e\x06\x9fP'
tRp2288
sa(dp2289
S'trial_loop.thisTrialN'
p2290
I98
sg895
g1391
sS'block_loop.thisIndex'
p2291
g889
sg38
S'right'
p2292
sg59
g63
sS'trial_loop.thisN'
p2293
I98
sg33
g1322
sg64
g65
sS'trial_loop.thisIndex'
p2294
g60
(g99
S'b\x00\x00\x00'
tRp2295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2296
I0
sg904
g1398
sS'block_loop.thisRepN'
p2297
I0
sg907
g1322
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2298
I0
sg909
g1329
sg55
g11
sS'block_loop.thisTrial'
p2299
Nsg70
Vy
sS'block_loop.thisTrialN'
p2300
I0
sg39
F0.81662455759942532
sg34
g753
(S'\x07\xdf\x07\t\x15\x0b\x14\x04\x1a\xc8'
tRp2301
sa(dp2302
S'trial_loop.thisTrialN'
p2303
I99
sg895
g1348
sS'block_loop.thisIndex'
p2304
g889
sg38
S'left'
p2305
sg59
g63
sS'trial_loop.thisN'
p2306
I99
sg33
g1352
sg64
g65
sS'trial_loop.thisIndex'
p2307
g60
(g99
S'c\x00\x00\x00'
tRp2308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2309
I0
sg904
g1356
sS'block_loop.thisRepN'
p2310
I0
sg907
g1352
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2311
I0
sg909
g1359
sg55
g11
sS'block_loop.thisTrial'
p2312
Nsg70
Vy
sS'block_loop.thisTrialN'
p2313
I0
sg39
F0.71664075120497728
sg34
g753
(S'\x07\xdf\x07\t\x15\x0b\x1a\x01\xd0\xd8'
tRp2314
sa(dp2315
S'trial_loop.thisTrialN'
p2316
I100
sg895
g1792
sS'block_loop.thisIndex'
p2317
g889
sg38
S'right'
p2318
sg59
g63
sS'trial_loop.thisN'
p2319
I100
sg33
g1174
sg64
g65
sS'trial_loop.thisIndex'
p2320
g60
(g99
S'd\x00\x00\x00'
tRp2321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2322
I0
sg904
g1799
sS'block_loop.thisRepN'
p2323
I0
sg907
g1174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2324
I0
sg909
g1181
sg55
g11
sS'block_loop.thisTrial'
p2325
Nsg70
Vy
sS'block_loop.thisTrialN'
p2326
I0
sg39
F0.65000721299293218
sg34
g753
(S'\x07\xdf\x07\t\x15\x0b\x1f\r\x1bx'
tRp2327
sa(dp2328
S'trial_loop.thisTrialN'
p2329
I101
sg895
g950
sS'block_loop.thisIndex'
p2330
g889
sg38
S'left'
p2331
sg59
g63
sS'trial_loop.thisN'
p2332
I101
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2333
g60
(g99
S'e\x00\x00\x00'
tRp2334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2335
I0
sg904
g958
sS'block_loop.thisRepN'
p2336
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2337
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2338
Nsg70
Vy
sS'block_loop.thisTrialN'
p2339
I0
sg39
F0.58305122823367128
sg34
g753
(S'\x07\xdf\x07\t\x15\x0b%\x08p('
tRp2340
sa(dp2341
S'trial_loop.thisTrialN'
p2342
I102
sg895
g1153
sS'block_loop.thisIndex'
p2343
g889
sg38
S'right'
p2344
sg59
g63
sS'trial_loop.thisN'
p2345
I102
sg33
g1164
sg64
g65
sS'trial_loop.thisIndex'
p2346
g60
(g99
S'f\x00\x00\x00'
tRp2347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2348
I0
sg904
g1161
sS'block_loop.thisRepN'
p2349
I0
sg907
g1157
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2350
I0
sg909
g1164
sg55
g11
sS'block_loop.thisTrial'
p2351
Nsg70
Vy
sS'block_loop.thisTrialN'
p2352
I0
sg39
F0.70002491761988495
sg34
g753
(S'\x07\xdf\x07\t\x15\x0b+\x02\x94('
tRp2353
sa(dp2354
S'trial_loop.thisTrialN'
p2355
I103
sg895
g1764
sS'block_loop.thisIndex'
p2356
g889
sg38
S'left'
p2357
sg59
g63
sS'trial_loop.thisN'
p2358
I103
sg33
g1236
sg64
g65
sS'trial_loop.thisIndex'
p2359
g60
(g99
S'g\x00\x00\x00'
tRp2360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2361
I0
sg904
g1771
sS'block_loop.thisRepN'
p2362
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2363
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p2364
Nsg70
Vy
sS'block_loop.thisTrialN'
p2365
I0
sg39
F1.6832944743873668
sg34
g753
(S'\x07\xdf\x07\t\x15\x0b0\r\xa8\x18'
tRp2366
sa(dp2367
S'trial_loop.thisTrialN'
p2368
I104
sg895
g1570
sS'block_loop.thisIndex'
p2369
g889
sg38
S'left'
p2370
sg59
g63
sS'trial_loop.thisN'
p2371
I104
sg33
g1285
sg64
g65
sS'trial_loop.thisIndex'
p2372
g60
(g99
S'h\x00\x00\x00'
tRp2373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2374
I0
sg904
g1577
sS'block_loop.thisRepN'
p2375
I0
sg907
g1285
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2376
I0
sg909
g1279
sg55
g11
sS'block_loop.thisTrial'
p2377
Nsg70
Vy
sS'block_loop.thisTrialN'
p2378
I0
sg39
F0.83329142383445287
sg34
g753
(S'\x07\xdf\x07\t\x15\x0b7\tn\x10'
tRp2379
sa(dp2380
S'trial_loop.thisTrialN'
p2381
I105
sg895
g1693
sS'block_loop.thisIndex'
p2382
g889
sg38
S'left'
p2383
sg59
g63
sS'trial_loop.thisN'
p2384
I105
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2385
g60
(g99
S'i\x00\x00\x00'
tRp2386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2387
I0
sg904
g1700
sS'block_loop.thisRepN'
p2388
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2389
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2390
Nsg70
Vy
sS'block_loop.thisTrialN'
p2391
I0
sg39
F1.2666490475749015
sg34
g753
(S'\x07\xdf\x07\t\x15\x0c\x01\x07b\xa0'
tRp2392
sa(dp2393
S'trial_loop.thisTrialN'
p2394
I106
sg895
g1091
sS'block_loop.thisIndex'
p2395
g889
sg38
S'right'
p2396
sg59
g63
sS'trial_loop.thisN'
p2397
I106
sg33
g1095
sg64
g65
sS'trial_loop.thisIndex'
p2398
g60
(g99
S'j\x00\x00\x00'
tRp2399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2400
I0
sg904
g1099
sS'block_loop.thisRepN'
p2401
I0
sg907
g1095
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2402
I0
sg909
g1102
sg55
g11
sS'block_loop.thisTrial'
p2403
Nsg70
Vy
sS'block_loop.thisTrialN'
p2404
I0
sg39
F1.2165848718723282
sg34
g753
(S'\x07\xdf\x07\t\x15\x0c\x07\x0b\xfeP'
tRp2405
sa(dp2406
S'trial_loop.thisTrialN'
p2407
I107
sg895
g967
sS'block_loop.thisIndex'
p2408
g889
sg38
S'right'
p2409
sg59
g63
sS'trial_loop.thisN'
p2410
I107
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2411
g60
(g99
S'k\x00\x00\x00'
tRp2412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2413
I0
sg904
g975
sS'block_loop.thisRepN'
p2414
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2415
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2416
Nsg70
Vy
sS'block_loop.thisTrialN'
p2417
I0
sg39
F0.66683744074543938
sg34
g753
(S'\x07\xdf\x07\t\x15\x0c\x0e\x00e\x90'
tRp2418
sa(dp2419
S'trial_loop.thisTrialN'
p2420
I108
sg895
g933
sS'block_loop.thisIndex'
p2421
g889
sg38
S'left'
p2422
sg59
g63
sS'trial_loop.thisN'
p2423
I108
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2424
g60
(g99
S'l\x00\x00\x00'
tRp2425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2426
I0
sg904
g941
sS'block_loop.thisRepN'
p2427
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2428
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2429
Nsg70
Vy
sS'block_loop.thisTrialN'
p2430
I0
sg39
F0.63331839416787261
sg34
g753
(S'\x07\xdf\x07\t\x15\x0c\x13\x0b;\x00'
tRp2431
sa(dp2432
S'trial_loop.thisTrialN'
p2433
I109
sg895
g1540
sS'block_loop.thisIndex'
p2434
g889
sg38
S'left'
p2435
sg59
g63
sS'trial_loop.thisN'
p2436
I109
sg33
g1551
sg64
g65
sS'trial_loop.thisIndex'
p2437
g60
(g99
S'm\x00\x00\x00'
tRp2438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2439
I0
sg904
g1548
sS'block_loop.thisRepN'
p2440
I0
sg907
g1544
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2441
I0
sg909
g1551
sg55
g11
sS'block_loop.thisTrial'
p2442
Nsg70
Vy
sS'block_loop.thisTrialN'
p2443
I0
sg39
F0.83334274158551125
sg34
g753
(S'\x07\xdf\x07\t\x15\x0c\x19\x06\x16\x98'
tRp2444
sa(dp2445
S'trial_loop.thisTrialN'
p2446
I110
sg895
g1833
sS'block_loop.thisIndex'
p2447
g889
sg38
S'left'
p2448
sg59
g63
sS'trial_loop.thisN'
p2449
I110
sg33
g1712
sg64
g65
sS'trial_loop.thisIndex'
p2450
g60
(g99
S'n\x00\x00\x00'
tRp2451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2452
I0
sg904
g1840
sS'block_loop.thisRepN'
p2453
I0
sg907
g1712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2454
I0
sg909
g1719
sg55
g11
sS'block_loop.thisTrial'
p2455
Nsg70
Vy
sS'block_loop.thisTrialN'
p2456
I0
sg39
F1.0164074264757801
sg34
g753
(S'\x07\xdf\x07\t\x15\x0c\x1f\x04\x07@'
tRp2457
sa(dp2458
S'trial_loop.thisTrialN'
p2459
I111
sg895
S'35-raisins.png'
p2460
sS'block_loop.thisIndex'
p2461
g889
sg38
S'right'
p2462
sg59
g63
sS'trial_loop.thisN'
p2463
I111
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2464
g60
(g99
S'o\x00\x00\x00'
tRp2465
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2466
I0
sg904
S'49-yorkie.png'
p2467
sS'block_loop.thisRepN'
p2468
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2469
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2470
Nsg70
Vy
sS'block_loop.thisTrialN'
p2471
I0
sg39
F0.8667571569676511
sg34
g753
(S'\x07\xdf\x07\t\x15\x0c%\x04\xd6H'
tRp2472
sa(dp2473
S'trial_loop.thisTrialN'
p2474
I112
sg895
g896
sS'block_loop.thisIndex'
p2475
g889
sg38
S'left'
p2476
sg59
g63
sS'trial_loop.thisN'
p2477
I112
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2478
g60
(g99
S'p\x00\x00\x00'
tRp2479
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2480
I0
sg904
g905
sS'block_loop.thisRepN'
p2481
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2482
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2483
Nsg70
Vy
sS'block_loop.thisTrialN'
p2484
I0
sg39
F0.96665543378185248
sg34
g753
(S'\x07\xdf\x07\t\x15\x0c+\x03C\xf0'
tRp2485
sa(dp2486
S'trial_loop.thisTrialN'
p2487
I113
sg895
g2042
sS'block_loop.thisIndex'
p2488
g889
sg38
S'left'
p2489
sg59
g63
sS'trial_loop.thisN'
p2490
I113
sg33
g1157
sg64
g65
sS'trial_loop.thisIndex'
p2491
g60
(g99
S'q\x00\x00\x00'
tRp2492
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2493
I0
sg904
g2049
sS'block_loop.thisRepN'
p2494
I0
sg907
g1157
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2495
I0
sg909
g1164
sg55
g11
sS'block_loop.thisTrial'
p2496
Nsg70
Vy
sS'block_loop.thisTrialN'
p2497
I0
sg39
F0.68337316161341732
sg34
g753
(S'\x07\xdf\x07\t\x15\x0c1\x03[`'
tRp2498
sa(dp2499
S'trial_loop.thisTrialN'
p2500
I114
sg895
g1018
sS'block_loop.thisIndex'
p2501
g889
sg38
S'left'
p2502
sg59
g63
sS'trial_loop.thisN'
p2503
I114
sg33
g1029
sg64
g65
sS'trial_loop.thisIndex'
p2504
g60
(g99
S'r\x00\x00\x00'
tRp2505
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2506
I0
sg904
g1026
sS'block_loop.thisRepN'
p2507
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2508
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p2509
Nsg70
Vy
sS'block_loop.thisTrialN'
p2510
I0
sg39
F1.4666297749063233
sg34
g753
(S'\x07\xdf\x07\t\x15\x0c6\x0e0\xd0'
tRp2511
sa(dp2512
S'trial_loop.thisTrialN'
p2513
I115
sg895
g1108
sS'block_loop.thisIndex'
p2514
g889
sg38
S'right'
p2515
sg59
g63
sS'trial_loop.thisN'
p2516
I115
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p2517
g60
(g99
S's\x00\x00\x00'
tRp2518
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2519
I0
sg904
g1116
sS'block_loop.thisRepN'
p2520
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2521
I0
sg909
g1119
sg55
g11
sS'block_loop.thisTrial'
p2522
Nsg70
Vy
sS'block_loop.thisTrialN'
p2523
I0
sg39
F1.1999935567728244
sg34
g753
(S'\x07\xdf\x07\t\x15\r\x01\x06\xa38'
tRp2524
sa(dp2525
S'trial_loop.thisTrialN'
p2526
I116
sg895
g1893
sS'block_loop.thisIndex'
p2527
g889
sg38
S'right'
p2528
sg59
g63
sS'trial_loop.thisN'
p2529
I116
sg33
g1544
sg64
g65
sS'trial_loop.thisIndex'
p2530
g60
(g99
S't\x00\x00\x00'
tRp2531
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2532
I0
sg904
g1900
sS'block_loop.thisRepN'
p2533
I0
sg907
g1544
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2534
I0
sg909
g1551
sg55
g11
sS'block_loop.thisTrial'
p2535
Nsg70
Vy
sS'block_loop.thisTrialN'
p2536
I0
sg39
F1.033243926402065
sg34
g753
(S'\x07\xdf\x07\t\x15\r\x07\n\x0e8'
tRp2537
sa(dp2538
S'trial_loop.thisTrialN'
p2539
I117
sg895
g1001
sS'block_loop.thisIndex'
p2540
g889
sg38
S'left'
p2541
sg59
g63
sS'trial_loop.thisN'
p2542
I117
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2543
g60
(g99
S'u\x00\x00\x00'
tRp2544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2545
I0
sg904
g1009
sS'block_loop.thisRepN'
p2546
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2547
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2548
Nsg70
Vy
sS'block_loop.thisTrialN'
p2549
I0
sg39
F1.0333522638829891
sg34
g753
(S'\x07\xdf\x07\t\x15\r\r\x0b\x1b\xc0'
tRp2550
sa(dp2551
S'trial_loop.thisTrialN'
p2552
I118
sg895
g1611
sS'block_loop.thisIndex'
p2553
g889
sg38
S'left'
p2554
sg59
g63
sS'trial_loop.thisN'
p2555
I118
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p2556
g60
(g99
S'v\x00\x00\x00'
tRp2557
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2558
I0
sg904
g1618
sS'block_loop.thisRepN'
p2559
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2560
I0
sg909
g1119
sg55
g11
sS'block_loop.thisTrial'
p2561
Nsg70
Vy
sS'block_loop.thisTrialN'
p2562
I0
sg39
F0.73368793901317986
sg34
g753
(S'\x07\xdf\x07\t\x15\r\x13\x0c%`'
tRp2563
sa(dp2564
S'trial_loop.thisTrialN'
p2565
I119
sg895
g1460
sS'block_loop.thisIndex'
p2566
g889
sg38
S'right'
p2567
sg59
g63
sS'trial_loop.thisN'
p2568
I119
sg33
g1352
sg64
g65
sS'trial_loop.thisIndex'
p2569
g60
(g99
S'w\x00\x00\x00'
tRp2570
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2571
I0
sg904
g1467
sS'block_loop.thisRepN'
p2572
I0
sg907
g1352
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2573
I0
sg909
g1359
sg55
g11
sS'block_loop.thisTrial'
p2574
Nsg70
Vy
sS'block_loop.thisTrialN'
p2575
I0
sg39
F0.90000222376693273
sg34
g753
(S'\x07\xdf\x07\t\x15\r\x19\x08\xaa\xc0'
tRp2576
sa(dp2577
S'trial_loop.thisTrialN'
p2578
I120
sg895
g2460
sS'block_loop.thisIndex'
p2579
g889
sg38
S'right'
p2580
sg59
g63
sS'trial_loop.thisN'
p2581
I120
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2582
g60
(g99
S'x\x00\x00\x00'
tRp2583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2584
I0
sg904
g2467
sS'block_loop.thisRepN'
p2585
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2586
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2587
Nsg70
Vy
sS'block_loop.thisTrialN'
p2588
I0
sg39
F0.61668089308659546
sg34
g753
(S'\x07\xdf\x07\t\x15\r\x1f\x07\x91\x80'
tRp2589
sa(dp2590
S'trial_loop.thisTrialN'
p2591
I121
sg895
g1708
sS'block_loop.thisIndex'
p2592
g889
sg38
S'right'
p2593
sg59
g63
sS'trial_loop.thisN'
p2594
I121
sg33
g1712
sg64
g65
sS'trial_loop.thisIndex'
p2595
g60
(g99
S'y\x00\x00\x00'
tRp2596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2597
I0
sg904
g1716
sS'block_loop.thisRepN'
p2598
I0
sg907
g1712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2599
I0
sg909
g1719
sg55
g11
sS'block_loop.thisTrial'
p2600
Nsg70
Vy
sS'block_loop.thisTrialN'
p2601
I0
sg39
F0.83297325376042863
sg34
g753
(S'\x07\xdf\x07\t\x15\r%\x02.\x98'
tRp2602
sa(dp2603
S'trial_loop.thisTrialN'
p2604
I122
sg895
g984
sS'block_loop.thisIndex'
p2605
g889
sg38
S'right'
p2606
sg59
g63
sS'trial_loop.thisN'
p2607
I122
sg33
g994
sg64
g65
sS'trial_loop.thisIndex'
p2608
g60
(g99
S'z\x00\x00\x00'
tRp2609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2610
I0
sg904
g992
sS'block_loop.thisRepN'
p2611
I0
sg907
g994
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2612
I0
sg909
g988
sg55
g11
sS'block_loop.thisTrial'
p2613
Nsg70
Vy
sS'block_loop.thisTrialN'
p2614
I0
sg39
F1.0496775819483446
sg34
g753
(S'\x07\xdf\x07\t\x15\r+\x00#('
tRp2615
sa(dp2616
S'trial_loop.thisTrialN'
p2617
I123
sg895
g1202
sS'block_loop.thisIndex'
p2618
g889
sg38
S'right'
p2619
sg59
g63
sS'trial_loop.thisN'
p2620
I123
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p2621
g60
(g99
S'{\x00\x00\x00'
tRp2622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2623
I0
sg904
g1209
sS'block_loop.thisRepN'
p2624
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2625
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p2626
Nsg70
Vy
sS'block_loop.thisTrialN'
p2627
I0
sg39
F0.81656782297068276
sg34
g753
(S'\x07\xdf\x07\t\x15\r1\x01kH'
tRp2628
sa(dp2629
S'trial_loop.thisTrialN'
p2630
I124
sg895
g1061
sS'block_loop.thisIndex'
p2631
g889
sg38
S'right'
p2632
sg59
g63
sS'trial_loop.thisN'
p2633
I124
sg33
g1072
sg64
g65
sS'trial_loop.thisIndex'
p2634
g60
(g99
S'|\x00\x00\x00'
tRp2635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2636
I0
sg904
g1069
sS'block_loop.thisRepN'
p2637
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2638
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p2639
Nsg70
Vy
sS'block_loop.thisTrialN'
p2640
I0
sg39
F0.73371502338704886
sg34
g753
(S'\x07\xdf\x07\t\x15\r6\x0ec\x98'
tRp2641
sa(dp2642
S'trial_loop.thisTrialN'
p2643
I125
sg895
g1893
sS'block_loop.thisIndex'
p2644
g889
sg38
S'right'
p2645
sg59
g63
sS'trial_loop.thisN'
p2646
I125
sg33
g1544
sg64
g65
sS'trial_loop.thisIndex'
p2647
g60
(g99
S'}\x00\x00\x00'
tRp2648
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2649
I0
sg904
g1900
sS'block_loop.thisRepN'
p2650
I0
sg907
g1544
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2651
I0
sg909
g1551
sg55
g11
sS'block_loop.thisTrial'
p2652
Nsg70
Vy
sS'block_loop.thisTrialN'
p2653
I0
sg39
F2.5333228987219627
sg34
g753
(S'\x07\xdf\x07\t\x15\x0e\x00\n\xe8\xf8'
tRp2654
sa(dp2655
S'trial_loop.thisTrialN'
p2656
I126
sg895
g2042
sS'block_loop.thisIndex'
p2657
g889
sg38
S'left'
p2658
sg59
g63
sS'trial_loop.thisN'
p2659
I126
sg33
g1157
sg64
g65
sS'trial_loop.thisIndex'
p2660
g60
(g99
S'~\x00\x00\x00'
tRp2661
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2662
I0
sg904
g2049
sS'block_loop.thisRepN'
p2663
I0
sg907
g1157
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2664
I0
sg909
g1164
sg55
g11
sS'block_loop.thisTrial'
p2665
Nsg70
Vy
sS'block_loop.thisTrialN'
p2666
I0
sg39
F0.61657426620513434
sg34
g753
(S'\x07\xdf\x07\t\x15\x0e\x08\x04I\xa8'
tRp2667
sa(dp2668
S'trial_loop.thisTrialN'
p2669
I127
sg895
g1091
sS'block_loop.thisIndex'
p2670
g889
sg38
S'left'
p2671
sg59
g63
sS'trial_loop.thisN'
p2672
I127
sg33
g1095
sg64
g65
sS'trial_loop.thisIndex'
p2673
g60
(g99
S'\x7f\x00\x00\x00'
tRp2674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2675
I0
sg904
g1099
sS'block_loop.thisRepN'
p2676
I0
sg907
g1095
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2677
I0
sg909
g1102
sg55
g11
sS'block_loop.thisTrial'
p2678
Nsg70
Vy
sS'block_loop.thisTrialN'
p2679
I0
sg39
F0.66656431625597179
sg34
g753
(S'\x07\xdf\x07\t\x15\x0e\r\x0e)\x00'
tRp2680
sa(dp2681
S'trial_loop.thisTrialN'
p2682
I128
sg895
g1962
sS'block_loop.thisIndex'
p2683
g889
sg38
S'left'
p2684
sg59
g63
sS'trial_loop.thisN'
p2685
I128
sg33
g1880
sg64
g65
sS'trial_loop.thisIndex'
p2686
g60
(g99
S'\x80\x00\x00\x00'
tRp2687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2688
I0
sg904
g1969
sS'block_loop.thisRepN'
p2689
I0
sg907
g1880
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2690
I0
sg909
g1887
sg55
g11
sS'block_loop.thisTrial'
p2691
Nsg70
Vy
sS'block_loop.thisTrialN'
p2692
I0
sg39
F0.66662504226405872
sg34
g753
(S'\x07\xdf\x07\t\x15\x0e\x13\t\xbc0'
tRp2693
sa(dp2694
S'trial_loop.thisTrialN'
p2695
I129
sg895
g2460
sS'block_loop.thisIndex'
p2696
g889
sg38
S'right'
p2697
sg59
g63
sS'trial_loop.thisN'
p2698
I129
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p2699
g60
(g99
S'\x81\x00\x00\x00'
tRp2700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2701
I0
sg904
g2467
sS'block_loop.thisRepN'
p2702
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2703
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2704
Nsg70
Vy
sS'block_loop.thisTrialN'
p2705
I0
sg39
F1.0504256807762431
sg34
g753
(S'\x07\xdf\x07\t\x15\x0e\x19\x05\x10\xe0'
tRp2706
sa(dp2707
S'trial_loop.thisTrialN'
p2708
I130
sg895
g1460
sS'block_loop.thisIndex'
p2709
g889
sg38
S'left'
p2710
sg59
g63
sS'trial_loop.thisN'
p2711
I130
sg33
g1352
sg64
g65
sS'trial_loop.thisIndex'
p2712
g60
(g99
S'\x82\x00\x00\x00'
tRp2713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2714
I0
sg904
g1467
sS'block_loop.thisRepN'
p2715
I0
sg907
g1352
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2716
I0
sg909
g1359
sg55
g11
sS'block_loop.thisTrial'
p2717
Nsg70
Vy
sS'block_loop.thisTrialN'
p2718
I0
sg39
F1.1332753442693502
sg34
g753
(S'\x07\xdf\x07\t\x15\x0e\x1f\x06Y\x00'
tRp2719
sa(dp2720
S'trial_loop.thisTrialN'
p2721
I131
sg895
g1678
sS'block_loop.thisIndex'
p2722
g889
sg38
S'right'
p2723
sg59
g63
sS'trial_loop.thisN'
p2724
I131
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2725
g60
(g99
S'\x83\x00\x00\x00'
tRp2726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2727
I0
sg904
g1685
sS'block_loop.thisRepN'
p2728
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2729
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2730
Nsg70
Vy
sS'block_loop.thisTrialN'
p2731
I0
sg39
F1.383316541025124
sg34
g753
(S'\x07\xdf\x07\t\x15\x0e%\x08\xd1\xd0'
tRp2732
sa(dp2733
S'trial_loop.thisTrialN'
p2734
I132
sg895
g1275
sS'block_loop.thisIndex'
p2735
g889
sg38
S'right'
p2736
sg59
g63
sS'trial_loop.thisN'
p2737
I132
sg33
g1285
sg64
g65
sS'trial_loop.thisIndex'
p2738
g60
(g99
S'\x84\x00\x00\x00'
tRp2739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2740
I0
sg904
g1283
sS'block_loop.thisRepN'
p2741
I0
sg907
g1285
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2742
I0
sg909
g1279
sg55
g11
sS'block_loop.thisTrial'
p2743
Nsg70
Vy
sS'block_loop.thisTrialN'
p2744
I0
sg39
F1.1833018869583611
sg34
g753
(S'\x07\xdf\x07\t\x15\x0e+\x0f\x17H'
tRp2745
sa(dp2746
S'trial_loop.thisTrialN'
p2747
I133
sg895
g1061
sS'block_loop.thisIndex'
p2748
g889
sg38
S'right'
p2749
sg59
g63
sS'trial_loop.thisN'
p2750
I133
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p2751
g60
(g99
S'\x85\x00\x00\x00'
tRp2752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2753
I0
sg904
g1069
sS'block_loop.thisRepN'
p2754
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2755
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p2756
Nsg70
Vy
sS'block_loop.thisTrialN'
p2757
I0
sg39
F1.1665894049365306
sg34
g753
(S'\x07\xdf\x07\t\x15\x0e2\x03C\xf0'
tRp2758
sa(dp2759
S'trial_loop.thisTrialN'
p2760
I134
sg895
g1275
sS'block_loop.thisIndex'
p2761
g889
sg38
S'left'
p2762
sg59
g63
sS'trial_loop.thisN'
p2763
I134
sg33
g1285
sg64
g65
sS'trial_loop.thisIndex'
p2764
g60
(g99
S'\x86\x00\x00\x00'
tRp2765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2766
I0
sg904
g1283
sS'block_loop.thisRepN'
p2767
I0
sg907
g1285
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2768
I0
sg909
g1279
sg55
g11
sS'block_loop.thisTrial'
p2769
Nsg70
Vy
sS'block_loop.thisTrialN'
p2770
I0
sg39
F1.2832286736229435
sg34
g753
(S'\x07\xdf\x07\t\x15\x0e8\x065\xd8'
tRp2771
sa(dp2772
S'trial_loop.thisTrialN'
p2773
I135
sg895
g1764
sS'block_loop.thisIndex'
p2774
g889
sg38
S'left'
p2775
sg59
g63
sS'trial_loop.thisN'
p2776
I135
sg33
g1236
sg64
g65
sS'trial_loop.thisIndex'
p2777
g60
(g99
S'\x87\x00\x00\x00'
tRp2778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2779
I0
sg904
g1771
sS'block_loop.thisRepN'
p2780
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2781
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p2782
Nsg70
Vy
sS'block_loop.thisTrialN'
p2783
I0
sg39
F0.91667023039917694
sg34
g753
(S'\x07\xdf\x07\t\x15\x0f\x02\x0b\x10\x08'
tRp2784
sa(dp2785
S'trial_loop.thisTrialN'
p2786
I136
sg895
g1460
sS'block_loop.thisIndex'
p2787
g889
sg38
S'right'
p2788
sg59
g63
sS'trial_loop.thisN'
p2789
I136
sg33
g1352
sg64
g65
sS'trial_loop.thisIndex'
p2790
g60
(g99
S'\x88\x00\x00\x00'
tRp2791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2792
I0
sg904
g1467
sS'block_loop.thisRepN'
p2793
I0
sg907
g1352
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2794
I0
sg909
g1359
sg55
g11
sS'block_loop.thisTrial'
p2795
Nsg70
Vy
sS'block_loop.thisTrialN'
p2796
I0
sg39
F2.5831843692940311
sg34
g753
(S'\x07\xdf\x07\t\x15\x0f\x08\no\xe0'
tRp2797
sa(dp2798
S'trial_loop.thisTrialN'
p2799
I137
sg895
g1540
sS'block_loop.thisIndex'
p2800
g889
sg38
S'right'
p2801
sg59
g63
sS'trial_loop.thisN'
p2802
I137
sg33
g1544
sg64
g65
sS'trial_loop.thisIndex'
p2803
g60
(g99
S'\x89\x00\x00\x00'
tRp2804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2805
I0
sg904
g1548
sS'block_loop.thisRepN'
p2806
I0
sg907
g1544
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2807
I0
sg909
g1551
sg55
g11
sS'block_loop.thisTrial'
p2808
Nsg70
Vy
sS'block_loop.thisTrialN'
p2809
I0
sg39
F1.8332503696292406
sg34
g753
(S'\x07\xdf\x07\t\x15\x0f\x10\x04\x88('
tRp2810
sa(dp2811
S'trial_loop.thisTrialN'
p2812
I138
sg895
g1708
sS'block_loop.thisIndex'
p2813
g889
sg38
S'right'
p2814
sg59
g63
sS'trial_loop.thisN'
p2815
I138
sg33
g1712
sg64
g65
sS'trial_loop.thisIndex'
p2816
g60
(g99
S'\x8a\x00\x00\x00'
tRp2817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2818
I0
sg904
g1716
sS'block_loop.thisRepN'
p2819
I0
sg907
g1712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2820
I0
sg909
g1719
sg55
g11
sS'block_loop.thisTrial'
p2821
Nsg70
Vy
sS'block_loop.thisTrialN'
p2822
I0
sg39
F1.2663186182471691
sg34
g753
(S'\x07\xdf\x07\t\x15\x0f\x17\x02t\xe8'
tRp2823
sa(dp2824
S'trial_loop.thisTrialN'
p2825
I139
sg895
g1764
sS'block_loop.thisIndex'
p2826
g889
sg38
S'left'
p2827
sg59
g63
sS'trial_loop.thisN'
p2828
I139
sg33
g1243
sg64
g65
sS'trial_loop.thisIndex'
p2829
g60
(g99
S'\x8b\x00\x00\x00'
tRp2830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2831
I0
sg904
g1771
sS'block_loop.thisRepN'
p2832
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2833
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p2834
Nsg70
Vy
sS'block_loop.thisTrialN'
p2835
I0
sg39
F0.71667040145985084
sg34
g753
(S'\x07\xdf\x07\t\x15\x0f\x1d\x07\x10\x98'
tRp2836
sa(dp2837
S'trial_loop.thisTrialN'
p2838
I140
sg895
g1108
sS'block_loop.thisIndex'
p2839
g889
sg38
S'left'
p2840
sg59
g63
sS'trial_loop.thisN'
p2841
I140
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p2842
g60
(g99
S'\x8c\x00\x00\x00'
tRp2843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2844
I0
sg904
g1116
sS'block_loop.thisRepN'
p2845
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2846
I0
sg909
g1119
sg55
g11
sS'block_loop.thisTrial'
p2847
Nsg70
Vy
sS'block_loop.thisTrialN'
p2848
I0
sg39
F1.2999938988941722
sg34
g753
(S'\x07\xdf\x07\t\x15\x0f#\x03[`'
tRp2849
sa(dp2850
S'trial_loop.thisTrialN'
p2851
I141
sg895
g1570
sS'block_loop.thisIndex'
p2852
g889
sg38
S'right'
p2853
sg59
g63
sS'trial_loop.thisN'
p2854
I141
sg33
g1285
sg64
g65
sS'trial_loop.thisIndex'
p2855
g60
(g99
S'\x8d\x00\x00\x00'
tRp2856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2857
I0
sg904
g1577
sS'block_loop.thisRepN'
p2858
I0
sg907
g1285
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2859
I0
sg909
g1279
sg55
g11
sS'block_loop.thisTrial'
p2860
Nsg70
Vy
sS'block_loop.thisTrialN'
p2861
I0
sg39
F1.1499906772733084
sg34
g753
(S'\x07\xdf\x07\t\x15\x0f)\x08p('
tRp2862
sa(dp2863
S'trial_loop.thisTrialN'
p2864
I142
sg895
g984
sS'block_loop.thisIndex'
p2865
g889
sg38
S'right'
p2866
sg59
g63
sS'trial_loop.thisN'
p2867
I142
sg33
g994
sg64
g65
sS'trial_loop.thisIndex'
p2868
g60
(g99
S'\x8e\x00\x00\x00'
tRp2869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2870
I0
sg904
g992
sS'block_loop.thisRepN'
p2871
I0
sg907
g994
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2872
I0
sg909
g988
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vy
sS'block_loop.thisTrialN'
p2874
I0
sg39
F0.90000051318202168
sg34
g753
(S"\x07\xdf\x07\t\x15\x0f/\x0b'x"
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g1018
sS'block_loop.thisIndex'
p2878
g889
sg38
S'left'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g1026
sS'block_loop.thisRepN'
p2884
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2885
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vy
sS'block_loop.thisTrialN'
p2887
I0
sg39
F1.016682831759681
sg34
g753
(S'\x07\xdf\x07\t\x15\x0f5\n\x0e8'
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g896
sS'block_loop.thisIndex'
p2891
g889
sg38
S'left'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g905
sS'block_loop.thisRepN'
p2897
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2898
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vy
sS'block_loop.thisTrialN'
p2900
I0
sg39
F1.0003575136870495
sg34
g753
(S'\x07\xdf\x07\t\x15\x0f;\n\xdd@'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g1318
sS'block_loop.thisIndex'
p2904
g889
sg38
S'left'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g1322
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g1326
sS'block_loop.thisRepN'
p2910
I0
sg907
g1322
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2911
I0
sg909
g1329
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vy
sS'block_loop.thisTrialN'
p2913
I0
sg39
F1.1166469663512544
sg34
g753
(S'\x07\xdf\x07\t\x15\x10\x05\x0bm\xc8'
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g1833
sS'block_loop.thisIndex'
p2917
g889
sg38
S'left'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g1712
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g1840
sS'block_loop.thisRepN'
p2923
I0
sg907
g1712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2924
I0
sg909
g1719
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vy
sS'block_loop.thisTrialN'
p2926
I0
sg39
F0.96638744106166996
sg34
g753
(S'\x07\xdf\x07\t\x15\x10\x0b\r\xac\x00'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g1893
sS'block_loop.thisIndex'
p2930
g889
sg38
S'right'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g1544
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g1900
sS'block_loop.thisRepN'
p2936
I0
sg907
g1544
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2937
I0
sg909
g1551
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vy
sS'block_loop.thisTrialN'
p2939
I0
sg39
F0.83334017569723073
sg34
g753
(S'\x07\xdf\x07\t\x15\x10\x11\r\xc3p'
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g1848
sS'block_loop.thisIndex'
p2943
g889
sg38
S'left'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g994
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g1855
sS'block_loop.thisRepN'
p2949
I0
sg907
g994
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2950
I0
sg909
g988
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vy
sS'block_loop.thisTrialN'
p2952
I0
sg39
F0.90001362770999549
sg34
g753
(S'\x07\xdf\x07\t\x15\x10\x17\x0b\xb4\x18'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g2460
sS'block_loop.thisIndex'
p2956
g889
sg38
S'right'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g2467
sS'block_loop.thisRepN'
p2962
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2963
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vy
sS'block_loop.thisTrialN'
p2965
I0
sg39
F0.7666436306972173
sg34
g753
(S'\x07\xdf\x07\t\x15\x10\x1d\n\x9a\xd8'
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g1848
sS'block_loop.thisIndex'
p2969
g889
sg38
S'left'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g994
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g1855
sS'block_loop.thisRepN'
p2975
I0
sg907
g994
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2976
I0
sg909
g988
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vy
sS'block_loop.thisTrialN'
p2978
I0
sg39
F0.70036389990127645
sg34
g753
(S'\x07\xdf\x07\t\x15\x10#\x07\x99P'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g1540
sS'block_loop.thisIndex'
p2982
g889
sg38
S'right'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g1544
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g1548
sS'block_loop.thisRepN'
p2988
I0
sg907
g1544
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2989
I0
sg909
g1551
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vy
sS'block_loop.thisTrialN'
p2991
I0
sg39
F1.283229528919037
sg34
g753
(S'\x07\xdf\x07\t\x15\x10)\x03k\x00'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g1947
sS'block_loop.thisIndex'
p2995
g889
sg38
S'right'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g1954
sS'block_loop.thisRepN'
p3001
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3002
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vy
sS'block_loop.thisTrialN'
p3004
I0
sg39
F0.9666688334182254
sg34
g753
(S'\x07\xdf\x07\t\x15\x10/\x08E0'
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g1232
sS'block_loop.thisIndex'
p3008
g889
sg38
S'right'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g1243
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g1240
sS'block_loop.thisRepN'
p3014
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3015
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vy
sS'block_loop.thisTrialN'
p3017
I0
sg39
F1.0832151599461213
sg34
g753
(S'\x07\xdf\x07\t\x15\x105\x08\\\xa0'
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g1091
sS'block_loop.thisIndex'
p3021
g889
sg38
S'right'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g1095
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g1099
sS'block_loop.thisRepN'
p3027
I0
sg907
g1095
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3028
I0
sg909
g1102
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vy
sS'block_loop.thisTrialN'
p3030
I0
sg39
F1.4832373406243278
sg34
g753
(S'\x07\xdf\x07\t\x15\x10;\n\x1d\xd8'
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g1693
sS'block_loop.thisIndex'
p3034
g889
sg38
S'right'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g1700
sS'block_loop.thisRepN'
p3040
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3041
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vy
sS'block_loop.thisTrialN'
p3043
I0
sg39
F0.58370923588518053
sg34
g753
(S'\x07\xdf\x07\t\x15\x11\x06\x02\xce\xc0'
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g1232
sS'block_loop.thisIndex'
p3047
g889
sg38
S'right'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g1236
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g1240
sS'block_loop.thisRepN'
p3053
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3054
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vy
sS'block_loop.thisTrialN'
p3056
I0
sg39
F1.2166692610626342
sg34
g753
(S'\x07\xdf\x07\t\x15\x11\x0b\x0c5\x00'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g1108
sS'block_loop.thisIndex'
p3060
g889
sg38
S'left'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g1116
sS'block_loop.thisRepN'
p3066
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3067
I0
sg909
g1119
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vy
sS'block_loop.thisTrialN'
p3069
I0
sg39
F1.0499036651672213
sg34
g753
(S'\x07\xdf\x07\t\x15\x11\x12\x00\x9c@'
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g1348
sS'block_loop.thisIndex'
p3073
g889
sg38
S'left'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g1352
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g1356
sS'block_loop.thisRepN'
p3079
I0
sg907
g1352
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3080
I0
sg909
g1359
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vy
sS'block_loop.thisTrialN'
p3082
I0
sg39
F1.2665432759822579
sg34
g753
(S'\x07\xdf\x07\t\x15\x11\x18\x01\xe4`'
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g1893
sS'block_loop.thisIndex'
p3086
g889
sg38
S'right'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g1551
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g1900
sS'block_loop.thisRepN'
p3092
I0
sg907
g1544
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3093
I0
sg909
g1551
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vy
sS'block_loop.thisTrialN'
p3095
I0
sg39
F0.7166806650129729
sg34
g753
(S'\x07\xdf\x07\t\x15\x11\x1e\x06\x80\x10'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g1001
sS'block_loop.thisIndex'
p3099
g889
sg38
S'left'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g1009
sS'block_loop.thisRepN'
p3105
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3106
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vy
sS'block_loop.thisTrialN'
p3108
I0
sg39
F1.0670252637282829
sg34
g753
(S'\x07\xdf\x07\t\x15\x11$\x02\xc6\xf0'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g984
sS'block_loop.thisIndex'
p3112
g889
sg38
S'right'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g994
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g992
sS'block_loop.thisRepN'
p3118
I0
sg907
g994
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3119
I0
sg909
g988
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vy
sS'block_loop.thisTrialN'
p3121
I0
sg39
F0.71666384419222595
sg34
g753
(S'\x07\xdf\x07\t\x15\x11*\x04M\x90'
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g1232
sS'block_loop.thisIndex'
p3125
g889
sg38
S'left'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g1236
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g1240
sS'block_loop.thisRepN'
p3131
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3132
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vy
sS'block_loop.thisTrialN'
p3134
I0
sg39
F1.1999975481521687
sg34
g753
(S'\x07\xdf\x07\t\x15\x110\x00Y\xd8'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g1693
sS'block_loop.thisIndex'
p3138
g889
sg38
S'right'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g1700
sS'block_loop.thisRepN'
p3144
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3145
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vy
sS'block_loop.thisTrialN'
p3147
I0
sg39
F0.68334322625014465
sg34
g753
(S'\x07\xdf\x07\t\x15\x116\x04\x03X'
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g2460
sS'block_loop.thisIndex'
p3151
g889
sg38
S'right'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g2467
sS'block_loop.thisRepN'
p3157
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3158
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vy
sS'block_loop.thisTrialN'
p3160
I0
sg39
F0.83332734625582816
sg34
g753
(S'\x07\xdf\x07\t\x15\x11;\x0e\xd4\xe0'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g1848
sS'block_loop.thisIndex'
p3164
g889
sg38
S'left'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g994
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g1855
sS'block_loop.thisRepN'
p3170
I0
sg907
g994
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3171
I0
sg909
g988
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vy
sS'block_loop.thisTrialN'
p3173
I0
sg39
F0.96661295408557635
sg34
g753
(S'\x07\xdf\x07\t\x15\x12\x05\x0c\xc9p'
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g916
sS'block_loop.thisIndex'
p3177
g889
sg38
S'left'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g924
sS'block_loop.thisRepN'
p3183
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3184
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vy
sS'block_loop.thisTrialN'
p3186
I0
sg39
F0.83369711919658585
sg34
g753
(S'\x07\xdf\x07\t\x15\x12\x0b\x0c\xe0\xe0'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g967
sS'block_loop.thisIndex'
p3190
g889
sg38
S'right'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g975
sS'block_loop.thisRepN'
p3196
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3197
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vy
sS'block_loop.thisTrialN'
p3199
I0
sg39
F0.98333741024543997
sg34
g753
(S'\x07\xdf\x07\t\x15\x12\x11\n\xd5p'
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g1318
sS'block_loop.thisIndex'
p3203
g889
sg38
S'left'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g1322
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1326
sS'block_loop.thisRepN'
p3209
I0
sg907
g1322
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3210
I0
sg909
g1329
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vy
sS'block_loop.thisTrialN'
p3212
I0
sg39
F1.0333266050074599
sg34
g753
(S"\x07\xdf\x07\t\x15\x12\x17\x0b'x"
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g1678
sS'block_loop.thisIndex'
p3216
g889
sg38
S'right'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g1685
sS'block_loop.thisRepN'
p3222
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3223
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vy
sS'block_loop.thisTrialN'
p3225
I0
sg39
F0.93334450919792289
sg34
g753
(S'\x07\xdf\x07\t\x15\x12\x1d\x0c5\x00'
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g1091
sS'block_loop.thisIndex'
p3229
g889
sg38
S'right'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g1095
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g1099
sS'block_loop.thisRepN'
p3235
I0
sg907
g1095
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3236
I0
sg909
g1102
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vy
sS'block_loop.thisTrialN'
p3238
I0
sg39
F1.283089260388806
sg34
g753
(S'\x07\xdf\x07\t\x15\x12#\x0b\x94\xd8'
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g1678
sS'block_loop.thisIndex'
p3242
g889
sg38
S'left'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g1685
sS'block_loop.thisRepN'
p3248
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3249
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vy
sS'block_loop.thisTrialN'
p3251
I0
sg39
F0.73359499686193885
sg34
g753
(S'\x07\xdf\x07\t\x15\x12*\x01,\xc8'
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g1833
sS'block_loop.thisIndex'
p3255
g889
sg38
S'left'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g1712
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g1840
sS'block_loop.thisRepN'
p3261
I0
sg907
g1712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3262
I0
sg909
g1719
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vy
sS'block_loop.thisTrialN'
p3264
I0
sg39
F0.6497175527838408
sg34
g753
(S'\x07\xdf\x07\t\x15\x12/\x0c\xf4h'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g1348
sS'block_loop.thisIndex'
p3268
g889
sg38
S'right'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g1352
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g1356
sS'block_loop.thisRepN'
p3274
I0
sg907
g1352
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3275
I0
sg909
g1359
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vy
sS'block_loop.thisTrialN'
p3277
I0
sg39
F0.83334103099332424
sg34
g753
(S'\x07\xdf\x07\t\x15\x125\x08\n\x98'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g1947
sS'block_loop.thisIndex'
p3281
g889
sg38
S'right'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g1954
sS'block_loop.thisRepN'
p3287
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3288
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vy
sS'block_loop.thisTrialN'
p3290
I0
sg39
F0.68332412464951631
sg34
g753
(S'\x07\xdf\x07\t\x15\x12;\x05\xff('
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g2042
sS'block_loop.thisIndex'
p3294
g889
sg38
S'left'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g1157
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g2049
sS'block_loop.thisRepN'
p3300
I0
sg907
g1157
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3301
I0
sg909
g1164
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vy
sS'block_loop.thisTrialN'
p3303
I0
sg39
F1.8498758965652087
sg34
g753
(S'\x07\xdf\x07\t\x15\x13\x05\x01\xcc\xf0'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g1708
sS'block_loop.thisIndex'
p3307
g889
sg38
S'right'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g1712
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g1716
sS'block_loop.thisRepN'
p3313
I0
sg907
g1712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3314
I0
sg909
g1719
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vy
sS'block_loop.thisTrialN'
p3316
I0
sg39
F0.78305162736796774
sg34
g753
(S'\x07\xdf\x07\t\x15\x13\x0b\x0f:p'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g1217
sS'block_loop.thisIndex'
p3320
g889
sg38
S'right'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g1224
sS'block_loop.thisRepN'
p3326
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3327
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vy
sS'block_loop.thisTrialN'
p3329
I0
sg39
F0.76659402353106998
sg34
g753
(S'\x07\xdf\x07\t\x15\x13\x11\x0cwh'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g1792
sS'block_loop.thisIndex'
p3333
g889
sg38
S'right'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g1174
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g1799
sS'block_loop.thisRepN'
p3339
I0
sg907
g1174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3340
I0
sg909
g1181
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vy
sS'block_loop.thisTrialN'
p3342
I0
sg39
F0.73335209282231517
sg34
g753
(S'\x07\xdf\x07\t\x15\x13\x17\t7`'
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g1153
sS'block_loop.thisIndex'
p3346
g889
sg38
S'right'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g1157
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g1161
sS'block_loop.thisRepN'
p3352
I0
sg907
g1157
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3353
I0
sg909
g1164
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vy
sS'block_loop.thisTrialN'
p3355
I0
sg39
F0.84992379313916899
sg34
g753
(S'\x07\xdf\x07\t\x15\x13\x1d\x05\xbc\xc0'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g1947
sS'block_loop.thisIndex'
p3359
g889
sg38
S'right'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g1954
sS'block_loop.thisRepN'
p3365
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3366
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vy
sS'block_loop.thisTrialN'
p3368
I0
sg39
F0.59991994430311024
sg34
g753
(S'\x07\xdf\x07\t\x15\x13#\x03\xeb\xe8'
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g1391
sS'block_loop.thisIndex'
p3372
g889
sg38
S'right'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g1329
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g1398
sS'block_loop.thisRepN'
p3378
I0
sg907
g1322
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3379
I0
sg909
g1329
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vy
sS'block_loop.thisTrialN'
p3381
I0
sg39
F0.73326827382697957
sg34
g753
(S'\x07\xdf\x07\t\x15\x13(\r\x90\xa8'
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g1217
sS'block_loop.thisIndex'
p3385
g889
sg38
S'right'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g1224
sS'block_loop.thisRepN'
p3391
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3392
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vy
sS'block_loop.thisTrialN'
p3394
I0
sg39
F0.84991267428267747
sg34
g753
(S'\x07\xdf\x07\t\x15\x13.\n\x16\x08'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g1848
sS'block_loop.thisIndex'
p3398
g889
sg38
S'right'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g1855
sS'block_loop.thisRepN'
p3404
I0
sg907
g994
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3405
I0
sg909
g988
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vy
sS'block_loop.thisTrialN'
p3407
I0
sg39
F0.61664668125740718
sg34
g753
(S'\x07\xdf\x07\t\x15\x134\x08E0'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g1170
sS'block_loop.thisIndex'
p3411
g889
sg38
S'left'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g1181
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g1178
sS'block_loop.thisRepN'
p3417
I0
sg907
g1174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3418
I0
sg909
g1181
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vy
sS'block_loop.thisTrialN'
p3420
I0
sg39
F0.74997106248338241
sg34
g753
(S'\x07\xdf\x07\t\x15\x13:\x02\xe60'
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g1570
sS'block_loop.thisIndex'
p3424
g889
sg38
S'left'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g1285
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g1577
sS'block_loop.thisRepN'
p3430
I0
sg907
g1285
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3431
I0
sg909
g1279
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vy
sS'block_loop.thisTrialN'
p3433
I0
sg39
F0.64999609414371662
sg34
g753
(S'\x07\xdf\x07\t\x15\x14\x03\x0e\xe8h'
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g1138
sS'block_loop.thisIndex'
p3437
g889
sg38
S'left'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g1145
sS'block_loop.thisRepN'
p3443
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3444
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vy
sS'block_loop.thisTrialN'
p3446
I0
sg39
F0.69995392805867596
sg34
g753
(S'\x07\xdf\x07\t\x15\x14\t\n\x02\x80'
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g1876
sS'block_loop.thisIndex'
p3450
g889
sg38
S'left'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g1880
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g1884
sS'block_loop.thisRepN'
p3456
I0
sg907
g1880
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3457
I0
sg909
g1887
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vy
sS'block_loop.thisTrialN'
p3459
I0
sg39
F0.84992949511070037
sg34
g753
(S'\x07\xdf\x07\t\x15\x14\x0f\x06\n\xe0'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g967
sS'block_loop.thisIndex'
p3463
g889
sg38
S'right'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g975
sS'block_loop.thisRepN'
p3469
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3470
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vy
sS'block_loop.thisTrialN'
p3472
I0
sg39
F0.83366604344337247
sg34
g753
(S'\x07\xdf\x07\t\x15\x14\x15\x04=\xf0'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g1962
sS'block_loop.thisIndex'
p3476
g889
sg38
S'right'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g1880
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g1969
sS'block_loop.thisRepN'
p3482
I0
sg907
g1880
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3483
I0
sg909
g1887
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vy
sS'block_loop.thisTrialN'
p3485
I0
sg39
F0.7665983000115375
sg34
g753
(S'\x07\xdf\x07\t\x15\x14\x1b\x02.\x98'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g1018
sS'block_loop.thisIndex'
p3489
g889
sg38
S'left'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g1026
sS'block_loop.thisRepN'
p3495
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3496
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vy
sS'block_loop.thisTrialN'
p3498
I0
sg39
F0.56657708867714973
sg34
g753
(S'\x07\xdf\x07\t\x15\x14 \x0eoP'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g1391
sS'block_loop.thisIndex'
p3502
g889
sg38
S'right'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g1322
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g1398
sS'block_loop.thisRepN'
p3508
I0
sg907
g1322
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3509
I0
sg909
g1329
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vy
sS'block_loop.thisTrialN'
p3511
I0
sg39
F0.70000039914157242
sg34
g753
(S'\x07\xdf\x07\t\x15\x14&\x08X\xb8'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g1962
sS'block_loop.thisIndex'
p3515
g889
sg38
S'right'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g1880
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g1969
sS'block_loop.thisRepN'
p3521
I0
sg907
g1880
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3522
I0
sg909
g1887
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vy
sS'block_loop.thisTrialN'
p3524
I0
sg39
F0.84995030730351573
sg34
g753
(S'\x07\xdf\x07\t\x15\x14,\x04&\x80'
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g933
sS'block_loop.thisIndex'
p3528
g889
sg38
S'left'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g941
sS'block_loop.thisRepN'
p3534
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3535
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vy
sS'block_loop.thisTrialN'
p3537
I0
sg39
F0.5665890628224588
sg34
g753
(S'\x07\xdf\x07\t\x15\x142\x02U\xa8'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g950
sS'block_loop.thisIndex'
p3541
g889
sg38
S'left'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g958
sS'block_loop.thisRepN'
p3547
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3548
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vy
sS'block_loop.thisTrialN'
p3550
I0
sg39
F0.83358564562513493
sg34
g753
(S'\x07\xdf\x07\t\x15\x147\x0b\x81P'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g1792
sS'block_loop.thisIndex'
p3554
g889
sg38
S'right'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g1181
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g1799
sS'block_loop.thisRepN'
p3560
I0
sg907
g1174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3561
I0
sg909
g1181
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vy
sS'block_loop.thisTrialN'
p3563
I0
sg39
F0.76668981667899061
sg34
g753
(S'\x07\xdf\x07\t\x15\x15\x01\t\xb0x'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g1217
sS'block_loop.thisIndex'
p3567
g889
sg38
S'right'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1224
sS'block_loop.thisRepN'
p3573
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3574
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vy
sS'block_loop.thisTrialN'
p3576
I0
sg39
F0.73317590187070891
sg34
g753
(S'\x07\xdf\x07\t\x15\x15\x07\x06pp'
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g1708
sS'block_loop.thisIndex'
p3580
g889
sg38
S'right'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g1712
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g1716
sS'block_loop.thisRepN'
p3586
I0
sg907
g1712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3587
I0
sg909
g1719
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vy
sS'block_loop.thisTrialN'
p3589
I0
sg39
F0.94971145167073701
sg34
g753
(S'\x07\xdf\x07\t\x15\x15\r\x02\xf5\xd0'
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g1138
sS'block_loop.thisIndex'
p3593
g889
sg38
S'left'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g1145
sS'block_loop.thisRepN'
p3599
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3600
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vy
sS'block_loop.thisTrialN'
p3602
I0
sg39
F0.50001054864696926
sg34
g753
(S'\x07\xdf\x07\t\x15\x15\x13\x02\x94('
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g1540
sS'block_loop.thisIndex'
p3606
g889
sg38
S'right'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g1544
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g1548
sS'block_loop.thisRepN'
p3612
I0
sg907
g1544
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3613
I0
sg909
g1551
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vy
sS'block_loop.thisTrialN'
p3615
I0
sg39
F1.2333463908507838
sg34
g753
(S'\x07\xdf\x07\t\x15\x15\x18\n\xc9\xb8'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F284.46025553960499
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vy
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vy
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'16-skips_prawn.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'left'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'16-skips_prawn.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'42-mrkipling_lemon_slices.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
S'42-mrkipling_lemon_slices.png'
p3648
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vy
sS'block_loop.thisTrialN'
p3650
I0
sg39
F0.61641318547481205
sg34
g753
(S'\x07\xdf\x07\t\x15\x1e.\x00ix'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'13-mccoys_steak_crisps.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'right'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'3-ellas_strawberries_apples.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'3-ellas_strawberries_apples.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3664
I1
sg3647
S'13-mccoys_steak_crisps.png'
p3665
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vy
sS'block_loop.thisTrialN'
p3667
I0
sg39
F1.3832481173449196
sg34
g753
(S'\x07\xdf\x07\t\x15\x1e3\nL\xb8'
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'8-liquorice_catherine_wheels.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'left'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3681
I1
sg3647
S'8-liquorice_catherine_wheels.png'
p3682
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vy
sS'block_loop.thisTrialN'
p3684
I0
sg39
F0.66667265373689588
sg34
g753
(S'\x07\xdf\x07\t\x15\x1e:\x01O\xf0'
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
S'3-ellas_strawberries_apples.png'
p3688
sS'block_loop.thisIndex'
p3689
g3627
sg38
S'left'
p3690
sg59
g63
sS'trial_loop.thisN'
p3691
I3
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p3692
g60
(g99
S'\x03\x00\x00\x00'
tRp3693
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3694
I0
sg3642
S'13-mccoys_steak_crisps.png'
p3695
sS'block_loop.thisRepN'
p3696
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3697
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p3698
Nsg70
Vy
sS'block_loop.thisTrialN'
p3699
I0
sg39
F0.81668043693207437
sg34
g753
(S'\x07\xdf\x07\t\x15\x1f\x03\x0b\xe6\xe0'
tRp3700
sa(dp3701
S'trial_loop.thisTrialN'
p3702
I4
sg3633
S'41-peanuts_redo.png'
p3703
sS'block_loop.thisIndex'
p3704
g3627
sg38
S'left'
p3705
sg59
g63
sS'trial_loop.thisN'
p3706
I4
sg33
S'41-peanuts_redo.png'
p3707
sg64
g65
sS'trial_loop.thisIndex'
p3708
g60
(g99
S'\x04\x00\x00\x00'
tRp3709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3710
I0
sg3642
S'45-chewy_nougat_redo.png'
p3711
sS'block_loop.thisRepN'
p3712
I1
sg3645
g3707
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3713
I1
sg3647
S'45-chewy_nougat_redo.png'
p3714
sg55
g11
sS'block_loop.thisTrial'
p3715
Nsg70
Vy
sS'block_loop.thisTrialN'
p3716
I0
sg39
F0.96668536913784919
sg34
g753
(S'\x07\xdf\x07\t\x15\x1f\t\t\x9c\xf0'
tRp3717
sa(dp3718
S'trial_loop.thisTrialN'
p3719
I5
sg3633
S'49-yorkie.png'
p3720
sS'block_loop.thisIndex'
p3721
g3627
sg38
S'left'
p3722
sg59
g63
sS'trial_loop.thisN'
p3723
I5
sg33
S'49-yorkie.png'
p3724
sg64
g65
sS'trial_loop.thisIndex'
p3725
g60
(g99
S'\x05\x00\x00\x00'
tRp3726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3727
I0
sg3642
S'35-raisins.png'
p3728
sS'block_loop.thisRepN'
p3729
I1
sg3645
g3724
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3730
I1
sg3647
S'35-raisins.png'
p3731
sg55
g11
sS'block_loop.thisTrial'
p3732
Nsg70
Vy
sS'block_loop.thisTrialN'
p3733
I0
sg39
F0.63356757036672207
sg34
g753
(S'\x07\xdf\x07\t\x15\x1f\x0f\t\xb4`'
tRp3734
sa(dp3735
S'trial_loop.thisTrialN'
p3736
I6
sg3633
S'36-fig_rolls.png'
p3737
sS'block_loop.thisIndex'
p3738
g3627
sg38
S'left'
p3739
sg59
g63
sS'trial_loop.thisN'
p3740
I6
sg33
S'36-fig_rolls.png'
p3741
sg64
g65
sS'trial_loop.thisIndex'
p3742
g60
(g99
S'\x06\x00\x00\x00'
tRp3743
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3744
I0
sg3642
S'34-hula_hoops_bbq_beef_redo.png'
p3745
sS'block_loop.thisRepN'
p3746
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3747
I1
sg3647
S'34-hula_hoops_bbq_beef_redo.png'
p3748
sg55
g11
sS'block_loop.thisTrial'
p3749
Nsg70
Vy
sS'block_loop.thisTrialN'
p3750
I0
sg39
F0.59871625786763616
sg34
g753
(S'\x07\xdf\x07\t\x15\x1f\x15\x04\x8f\xf8'
tRp3751
sa(dp3752
S'trial_loop.thisTrialN'
p3753
I7
sg3633
S'27-hartleys_raspberries_jelly.png'
p3754
sS'block_loop.thisIndex'
p3755
g3627
sg38
S'right'
p3756
sg59
g63
sS'trial_loop.thisN'
p3757
I7
sg33
S'27-hartleys_raspberries_jelly.png'
p3758
sg64
g65
sS'trial_loop.thisIndex'
p3759
g60
(g99
S'\x07\x00\x00\x00'
tRp3760
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3761
I0
sg3642
S'51-mars.png'
p3762
sS'block_loop.thisRepN'
p3763
I1
sg3645
S'51-mars.png'
p3764
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3765
I1
sg3647
g3758
sg55
g11
sS'block_loop.thisTrial'
p3766
Nsg70
Vy
sS'block_loop.thisTrialN'
p3767
I0
sg39
F0.74992772749828873
sg34
g753
(S'\x07\xdf\x07\t\x15\x1f\x1a\r\xf68'
tRp3768
sa(dp3769
S'trial_loop.thisTrialN'
p3770
I8
sg3633
S'42-mrkipling_lemon_slices.png'
p3771
sS'block_loop.thisIndex'
p3772
g3627
sg38
S'right'
p3773
sg59
g63
sS'trial_loop.thisN'
p3774
I8
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3775
g60
(g99
S'\x08\x00\x00\x00'
tRp3776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3777
I0
sg3642
S'16-skips_prawn.png'
p3778
sS'block_loop.thisRepN'
p3779
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3780
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3781
Nsg70
Vy
sS'block_loop.thisTrialN'
p3782
I0
sg39
F0.76657492192316568
sg34
g753
(S'\x07\xdf\x07\t\x15\x1f \n\xba\x18'
tRp3783
sa(dp3784
S'trial_loop.thisTrialN'
p3785
I9
sg3633
S'48-twix.png'
p3786
sS'block_loop.thisIndex'
p3787
g3627
sg38
S'left'
p3788
sg59
g63
sS'trial_loop.thisN'
p3789
I9
sg33
S'48-twix.png'
p3790
sg64
g65
sS'trial_loop.thisIndex'
p3791
g60
(g99
S'\t\x00\x00\x00'
tRp3792
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3793
I0
sg3642
S'50-polo.png'
p3794
sS'block_loop.thisRepN'
p3795
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3796
I1
sg3647
S'50-polo.png'
p3797
sg55
g11
sS'block_loop.thisTrial'
p3798
Nsg70
Vy
sS'block_loop.thisTrialN'
p3799
I0
sg39
F0.61667661660612794
sg34
g753
(S'\x07\xdf\x07\t\x15\x1f&\x07\xb8\x90'
tRp3800
sa(dp3801
S'trial_loop.thisTrialN'
p3802
I10
sg3633
S'21-nakd_banana_crunch.png'
p3803
sS'block_loop.thisIndex'
p3804
g3627
sg38
S'left'
p3805
sg59
g63
sS'trial_loop.thisN'
p3806
I10
sg33
S'1-treacle_cookies.png'
p3807
sg64
g65
sS'trial_loop.thisIndex'
p3808
g60
(g99
S'\n\x00\x00\x00'
tRp3809
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3810
I0
sg3642
S'1-treacle_cookies.png'
p3811
sS'block_loop.thisRepN'
p3812
I1
sg3645
S'21-nakd_banana_crunch.png'
p3813
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3814
I1
sg3647
g3807
sg55
g11
sS'block_loop.thisTrial'
p3815
Nsg70
Vy
sS'block_loop.thisTrialN'
p3816
I0
sg39
F1.0666549206071068
sg34
g753
(S'\x07\xdf\x07\t\x15\x1f,\x02U\xa8'
tRp3817
sa(dp3818
S'trial_loop.thisTrialN'
p3819
I11
sg3633
g3786
sS'block_loop.thisIndex'
p3820
g3627
sg38
S'left'
p3821
sg59
g63
sS'trial_loop.thisN'
p3822
I11
sg33
g3797
sg64
g65
sS'trial_loop.thisIndex'
p3823
g60
(g99
S'\x0b\x00\x00\x00'
tRp3824
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3825
I0
sg3642
g3794
sS'block_loop.thisRepN'
p3826
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3827
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p3828
Nsg70
Vy
sS'block_loop.thisTrialN'
p3829
I0
sg39
F0.71704530616989359
sg34
g753
(S'\x07\xdf\x07\t\x15\x1f2\x03\xdcH'
tRp3830
sa(dp3831
S'trial_loop.thisTrialN'
p3832
I12
sg3633
S'25-kitkat.png'
p3833
sS'block_loop.thisIndex'
p3834
g3627
sg38
S'left'
p3835
sg59
g63
sS'trial_loop.thisN'
p3836
I12
sg33
S'31-hobnobs.png'
p3837
sg64
g65
sS'trial_loop.thisIndex'
p3838
g60
(g99
S'\x0c\x00\x00\x00'
tRp3839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3840
I0
sg3642
S'31-hobnobs.png'
p3841
sS'block_loop.thisRepN'
p3842
I1
sg3645
S'25-kitkat.png'
p3843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3844
I1
sg3647
g3837
sg55
g11
sS'block_loop.thisTrial'
p3845
Nsg70
Vy
sS'block_loop.thisTrialN'
p3846
I0
sg39
F0.66666324548714329
sg34
g753
(S'\x07\xdf\x07\t\x15\x1f8\x00#('
tRp3847
sa(dp3848
S'trial_loop.thisTrialN'
p3849
I13
sg3633
S'5-pineapple.png'
p3850
sS'block_loop.thisIndex'
p3851
g3627
sg38
S'right'
p3852
sg59
g63
sS'trial_loop.thisN'
p3853
I13
sg33
S'5-pineapple.png'
p3854
sg64
g65
sS'trial_loop.thisIndex'
p3855
g60
(g99
S'\r\x00\x00\x00'
tRp3856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3857
I0
sg3642
S'40-sardines.png'
p3858
sS'block_loop.thisRepN'
p3859
I1
sg3645
S'40-sardines.png'
p3860
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3861
I1
sg3647
g3854
sg55
g11
sS'block_loop.thisTrial'
p3862
Nsg70
Vy
sS'block_loop.thisTrialN'
p3863
I0
sg39
F1.0166711427154951
sg34
g753
(S'\x07\xdf\x07\t\x15 \x01\n\xba\x18'
tRp3864
sa(dp3865
S'trial_loop.thisTrialN'
p3866
I14
sg3633
g3754
sS'block_loop.thisIndex'
p3867
g3627
sg38
S'right'
p3868
sg59
g63
sS'trial_loop.thisN'
p3869
I14
sg33
g3764
sg64
g65
sS'trial_loop.thisIndex'
p3870
g60
(g99
S'\x0e\x00\x00\x00'
tRp3871
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3872
I0
sg3642
g3762
sS'block_loop.thisRepN'
p3873
I1
sg3645
g3764
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3874
I1
sg3647
g3758
sg55
g11
sS'block_loop.thisTrial'
p3875
Nsg70
Vy
sS'block_loop.thisTrialN'
p3876
I0
sg39
F0.76666273230512161
sg34
g753
(S'\x07\xdf\x07\t\x15 \x07\x0b\x89 '
tRp3877
sa(dp3878
S'trial_loop.thisTrialN'
p3879
I15
sg3633
S'33-ambrosia_rice.png'
p3880
sS'block_loop.thisIndex'
p3881
g3627
sg38
S'left'
p3882
sg59
g63
sS'trial_loop.thisN'
p3883
I15
sg33
S'33-ambrosia_rice.png'
p3884
sg64
g65
sS'trial_loop.thisIndex'
p3885
g60
(g99
S'\x0f\x00\x00\x00'
tRp3886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3887
I0
sg3642
S'23-crunchie_redo.png'
p3888
sS'block_loop.thisRepN'
p3889
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3890
I1
sg3647
S'23-crunchie_redo.png'
p3891
sg55
g11
sS'block_loop.thisTrial'
p3892
Nsg70
Vy
sS'block_loop.thisTrialN'
p3893
I0
sg39
F0.48324959987075999
sg34
g753
(S'\x07\xdf\x07\t\x15 \r\x08\x87\x98'
tRp3894
sa(dp3895
S'trial_loop.thisTrialN'
p3896
I16
sg3633
S'19-caramello_redo.png'
p3897
sS'block_loop.thisIndex'
p3898
g3627
sg38
S'left'
p3899
sg59
g63
sS'trial_loop.thisN'
p3900
I16
sg33
S'30-spaghetti_hoops.png'
p3901
sg64
g65
sS'trial_loop.thisIndex'
p3902
g60
(g99
S'\x10\x00\x00\x00'
tRp3903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3904
I0
sg3642
S'30-spaghetti_hoops.png'
p3905
sS'block_loop.thisRepN'
p3906
I1
sg3645
S'19-caramello_redo.png'
p3907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3908
I1
sg3647
g3901
sg55
g11
sS'block_loop.thisTrial'
p3909
Nsg70
Vy
sS'block_loop.thisTrialN'
p3910
I0
sg39
F0.9498115212918492
sg34
g753
(S'\x07\xdf\x07\t\x15 \x13\x01\x01\xd0'
tRp3911
sa(dp3912
S'trial_loop.thisTrialN'
p3913
I17
sg3633
g3737
sS'block_loop.thisIndex'
p3914
g3627
sg38
S'left'
p3915
sg59
g63
sS'trial_loop.thisN'
p3916
I17
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p3917
g60
(g99
S'\x11\x00\x00\x00'
tRp3918
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3919
I0
sg3642
g3745
sS'block_loop.thisRepN'
p3920
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3921
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p3922
Nsg70
Vy
sS'block_loop.thisTrialN'
p3923
I0
sg39
F0.63334291264618514
sg34
g753
(S'\x07\xdf\x07\t\x15 \x19\x00\xda\xc0'
tRp3924
sa(dp3925
S'trial_loop.thisTrialN'
p3926
I18
sg3633
g3671
sS'block_loop.thisIndex'
p3927
g3627
sg38
S'right'
p3928
sg59
g63
sS'trial_loop.thisN'
p3929
I18
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p3930
g60
(g99
S'\x12\x00\x00\x00'
tRp3931
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3932
I0
sg3642
g3679
sS'block_loop.thisRepN'
p3933
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3934
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p3935
Nsg70
Vy
sS'block_loop.thisTrialN'
p3936
I0
sg39
F0.80049168111145264
sg34
g753
(S'\x07\xdf\x07\t\x15 \x1e\n\xf8\x98'
tRp3937
sa(dp3938
S'trial_loop.thisTrialN'
p3939
I19
sg3633
g3688
sS'block_loop.thisIndex'
p3940
g3627
sg38
S'left'
p3941
sg59
g63
sS'trial_loop.thisN'
p3942
I19
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p3943
g60
(g99
S'\x13\x00\x00\x00'
tRp3944
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3945
I0
sg3642
g3695
sS'block_loop.thisRepN'
p3946
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3947
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p3948
Nsg70
Vy
sS'block_loop.thisTrialN'
p3949
I0
sg39
F0.61668032289162511
sg34
g753
(S'\x07\xdf\x07\t\x15 $\x08t\x10'
tRp3950
sa(dp3951
S'trial_loop.thisTrialN'
p3952
I20
sg3633
S'38-maltesers.png'
p3953
sS'block_loop.thisIndex'
p3954
g3627
sg38
S'left'
p3955
sg59
g63
sS'trial_loop.thisN'
p3956
I20
sg33
S'38-maltesers.png'
p3957
sg64
g65
sS'trial_loop.thisIndex'
p3958
g60
(g99
S'\x14\x00\x00\x00'
tRp3959
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3960
I0
sg3642
S'6-sour_patch_kids.png'
p3961
sS'block_loop.thisRepN'
p3962
I1
sg3645
g3957
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3963
I1
sg3647
S'6-sour_patch_kids.png'
p3964
sg55
g11
sS'block_loop.thisTrial'
p3965
Nsg70
Vy
sS'block_loop.thisTrialN'
p3966
I0
sg39
F0.79970794495602604
sg34
g753
(S'\x07\xdf\x07\t\x15 *\x03\x11('
tRp3967
sa(dp3968
S'trial_loop.thisTrialN'
p3969
I21
sg3633
S'43-mrporky_pork_crackles_redo.png'
p3970
sS'block_loop.thisIndex'
p3971
g3627
sg38
S'right'
p3972
sg59
g63
sS'trial_loop.thisN'
p3973
I21
sg33
S'43-mrporky_pork_crackles_redo.png'
p3974
sg64
g65
sS'trial_loop.thisIndex'
p3975
g60
(g99
S'\x15\x00\x00\x00'
tRp3976
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3977
I0
sg3642
S'18-mms.png'
p3978
sS'block_loop.thisRepN'
p3979
I1
sg3645
S'18-mms.png'
p3980
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3981
I1
sg3647
g3974
sg55
g11
sS'block_loop.thisTrial'
p3982
Nsg70
Vy
sS'block_loop.thisTrialN'
p3983
I0
sg39
F0.71668750737444498
sg34
g753
(S'\x07\xdf\x07\t\x15 0\x00\x88\xb8'
tRp3984
sa(dp3985
S'trial_loop.thisTrialN'
p3986
I22
sg3633
S'22-daim.png'
p3987
sS'block_loop.thisIndex'
p3988
g3627
sg38
S'left'
p3989
sg59
g63
sS'trial_loop.thisN'
p3990
I22
sg33
S'22-daim.png'
p3991
sg64
g65
sS'trial_loop.thisIndex'
p3992
g60
(g99
S'\x16\x00\x00\x00'
tRp3993
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3994
I0
sg3642
S'7-olives.png'
p3995
sS'block_loop.thisRepN'
p3996
I1
sg3645
S'7-olives.png'
p3997
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3998
I1
sg3647
g3991
sg55
g11
sS'block_loop.thisTrial'
p3999
Nsg70
Vy
sS'block_loop.thisTrialN'
p4000
I0
sg39
F0.30000558793108212
sg34
g753
(S'\x07\xdf\x07\t\x15 5\x0c\x15\xc0'
tRp4001
sa(dp4002
S'trial_loop.thisTrialN'
p4003
I23
sg3633
S'4-corn.png'
p4004
sS'block_loop.thisIndex'
p4005
g3627
sg38
S'left'
p4006
sg59
g63
sS'trial_loop.thisN'
p4007
I23
sg33
S'4-corn.png'
p4008
sg64
g65
sS'trial_loop.thisIndex'
p4009
g60
(g99
S'\x17\x00\x00\x00'
tRp4010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4011
I0
sg3642
S'10-bounty_redo.png'
p4012
sS'block_loop.thisRepN'
p4013
I1
sg3645
g4008
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4014
I1
sg3647
S'10-bounty_redo.png'
p4015
sg55
g11
sS'block_loop.thisTrial'
p4016
Nsg70
Vy
sS'block_loop.thisTrialN'
p4017
I0
sg39
F0.41667906846123515
sg34
g753
(S'\x07\xdf\x07\t\x15 ;\x01\xf0\x18'
tRp4018
sa(dp4019
S'trial_loop.thisTrialN'
p4020
I24
sg3633
S'1-treacle_cookies.png'
p4021
sS'block_loop.thisIndex'
p4022
g3627
sg38
S'left'
p4023
sg59
g63
sS'trial_loop.thisN'
p4024
I24
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p4025
g60
(g99
S'\x18\x00\x00\x00'
tRp4026
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4027
I0
sg3642
S'21-nakd_banana_crunch.png'
p4028
sS'block_loop.thisRepN'
p4029
I1
sg3645
g3813
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4030
I1
sg3647
g3807
sg55
g11
sS'block_loop.thisTrial'
p4031
Nsg70
Vy
sS'block_loop.thisTrialN'
p4032
I0
sg39
F0.35001844588259701
sg34
g753
(S'\x07\xdf\x07\t\x15!\x04\x08\xb6x'
tRp4033
sa(dp4034
S'trial_loop.thisTrialN'
p4035
I25
sg3633
g3737
sS'block_loop.thisIndex'
p4036
g3627
sg38
S'left'
p4037
sg59
g63
sS'trial_loop.thisN'
p4038
I25
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p4039
g60
(g99
S'\x19\x00\x00\x00'
tRp4040
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4041
I0
sg3642
g3745
sS'block_loop.thisRepN'
p4042
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4043
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p4044
Nsg70
Vy
sS'block_loop.thisTrialN'
p4045
I0
sg39
F0.33331964859826257
sg34
g753
(S'\x07\xdf\x07\t\x15!\t\x0e\x8a\xa8'
tRp4046
sa(dp4047
S'trial_loop.thisTrialN'
p4048
I26
sg3633
S'6-sour_patch_kids.png'
p4049
sS'block_loop.thisIndex'
p4050
g3627
sg38
S'left'
p4051
sg59
g63
sS'trial_loop.thisN'
p4052
I26
sg33
g3957
sg64
g65
sS'trial_loop.thisIndex'
p4053
g60
(g99
S'\x1a\x00\x00\x00'
tRp4054
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4055
I0
sg3642
S'38-maltesers.png'
p4056
sS'block_loop.thisRepN'
p4057
I1
sg3645
g3957
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4058
I1
sg3647
g3964
sg55
g11
sS'block_loop.thisTrial'
p4059
Nsg70
Vy
sS'block_loop.thisTrialN'
p4060
I0
sg39
F0.032987337624945212
sg34
g753
(S'\x07\xdf\x07\t\x15!\x0f\x04\xe2\x00'
tRp4061
sa(dp4062
S'trial_loop.thisTrialN'
p4063
I27
sg3633
S'20-fruit_pastilles.png'
p4064
sS'block_loop.thisIndex'
p4065
g3627
sg38
S'right'
p4066
sg59
g63
sS'trial_loop.thisN'
p4067
I27
sg33
S'20-fruit_pastilles.png'
p4068
sg64
g65
sS'trial_loop.thisIndex'
p4069
g60
(g99
S'\x1b\x00\x00\x00'
tRp4070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4071
I0
sg3642
S'2-steamed_puddings.png'
p4072
sS'block_loop.thisRepN'
p4073
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4074
I1
sg3647
S'2-steamed_puddings.png'
p4075
sg55
g11
sS'block_loop.thisTrial'
p4076
Nsg70
Vy
sS'block_loop.thisTrialN'
p4077
I0
sg39
F0.68331329089414794
sg34
g753
(S'\x07\xdf\x07\t\x15!\x14\x05\xf3p'
tRp4078
sa(dp4079
S'trial_loop.thisTrialN'
p4080
I28
sg3633
S'26-walkers_smoky_bacon.png'
p4081
sS'block_loop.thisIndex'
p4082
g3627
sg38
S'right'
p4083
sg59
g63
sS'trial_loop.thisN'
p4084
I28
sg33
S'44-crunch.png'
p4085
sg64
g65
sS'trial_loop.thisIndex'
p4086
g60
(g99
S'\x1c\x00\x00\x00'
tRp4087
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4088
I0
sg3642
S'44-crunch.png'
p4089
sS'block_loop.thisRepN'
p4090
I1
sg3645
g4085
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4091
I1
sg3647
S'26-walkers_smoky_bacon.png'
p4092
sg55
g11
sS'block_loop.thisTrial'
p4093
Nsg70
Vy
sS'block_loop.thisTrialN'
p4094
I0
sg39
F0.28333016873511951
sg34
g753
(S'\x07\xdf\x07\t\x15!\x1a\x01\x82\xb8'
tRp4095
sa(dp4096
S'trial_loop.thisTrialN'
p4097
I29
sg3633
g3634
sS'block_loop.thisIndex'
p4098
g3627
sg38
S'left'
p4099
sg59
g63
sS'trial_loop.thisN'
p4100
I29
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p4101
g60
(g99
S'\x1d\x00\x00\x00'
tRp4102
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4103
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4104
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4105
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4106
Nsg70
Vy
sS'block_loop.thisTrialN'
p4107
I0
sg39
F0.58321886623161845
sg34
g753
(S'\x07\xdf\x07\t\x15!\x1f\x06d\xb8'
tRp4108
sa(dp4109
S'trial_loop.thisTrialN'
p4110
I30
sg3633
S'31-hobnobs.png'
p4111
sS'block_loop.thisIndex'
p4112
g3627
sg38
S'left'
p4113
sg59
g63
sS'trial_loop.thisN'
p4114
I30
sg33
g3843
sg64
g65
sS'trial_loop.thisIndex'
p4115
g60
(g99
S'\x1e\x00\x00\x00'
tRp4116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4117
I0
sg3642
S'25-kitkat.png'
p4118
sS'block_loop.thisRepN'
p4119
I1
sg3645
g3843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4120
I1
sg3647
g3837
sg55
g11
sS'block_loop.thisTrial'
p4121
Nsg70
Vy
sS'block_loop.thisTrialN'
p4122
I0
sg39
F0.51667342350265244
sg34
g753
(S'\x07\xdf\x07\t\x15!%\x00\x88\xb8'
tRp4123
sa(dp4124
S'trial_loop.thisTrialN'
p4125
I31
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p4126
sS'block_loop.thisIndex'
p4127
g3627
sg38
S'left'
p4128
sg59
g63
sS'trial_loop.thisN'
p4129
I31
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4130
g60
(g99
S'\x1f\x00\x00\x00'
tRp4131
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4132
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p4133
sS'block_loop.thisRepN'
p4134
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4135
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4136
Nsg70
Vy
sS'block_loop.thisTrialN'
p4137
I0
sg39
F1.0833306248969166
sg34
g753
(S'\x07\xdf\x07\t\x15!*\x08\xfc\xc8'
tRp4138
sa(dp4139
S'trial_loop.thisTrialN'
p4140
I32
sg3633
S'46-pistachios.png'
p4141
sS'block_loop.thisIndex'
p4142
g3627
sg38
S'left'
p4143
sg59
g63
sS'trial_loop.thisN'
p4144
I32
sg33
S'29-beans.png'
p4145
sg64
g65
sS'trial_loop.thisIndex'
p4146
g60
(g99
S' \x00\x00\x00'
tRp4147
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4148
I0
sg3642
S'29-beans.png'
p4149
sS'block_loop.thisRepN'
p4150
I1
sg3645
g4145
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4151
I1
sg3647
S'46-pistachios.png'
p4152
sg55
g11
sS'block_loop.thisTrial'
p4153
Nsg70
Vy
sS'block_loop.thisTrialN'
p4154
I0
sg39
F0.81672035074006999
sg34
g753
(S'\x07\xdf\x07\t\x15!0\n\xbe\x00'
tRp4155
sa(dp4156
S'trial_loop.thisTrialN'
p4157
I33
sg3633
S'10-bounty_redo.png'
p4158
sS'block_loop.thisIndex'
p4159
g3627
sg38
S'right'
p4160
sg59
g63
sS'trial_loop.thisN'
p4161
I33
sg33
g4008
sg64
g65
sS'trial_loop.thisIndex'
p4162
g60
(g99
S'!\x00\x00\x00'
tRp4163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4164
I0
sg3642
S'4-corn.png'
p4165
sS'block_loop.thisRepN'
p4166
I1
sg3645
g4008
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4167
I1
sg3647
g4015
sg55
g11
sS'block_loop.thisTrial'
p4168
Nsg70
Vy
sS'block_loop.thisTrialN'
p4169
I0
sg39
F0.64986580407276051
sg34
g753
(S'\x07\xdf\x07\t\x15!6\x08t\x10'
tRp4170
sa(dp4171
S'trial_loop.thisTrialN'
p4172
I34
sg3633
g3720
sS'block_loop.thisIndex'
p4173
g3627
sg38
S'left'
p4174
sg59
g63
sS'trial_loop.thisN'
p4175
I34
sg33
g3724
sg64
g65
sS'trial_loop.thisIndex'
p4176
g60
(g99
S'"\x00\x00\x00'
tRp4177
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4178
I0
sg3642
g3728
sS'block_loop.thisRepN'
p4179
I1
sg3645
g3724
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4180
I1
sg3647
g3731
sg55
g11
sS'block_loop.thisTrial'
p4181
Nsg70
Vy
sS'block_loop.thisTrialN'
p4182
I0
sg39
F0.63332808751874836
sg34
g753
(S'\x07\xdf\x07\t\x15"\x00\x03\x8a@'
tRp4183
sa(dp4184
S'trial_loop.thisTrialN'
p4185
I35
sg3633
S'50-polo.png'
p4186
sS'block_loop.thisIndex'
p4187
g3627
sg38
S'right'
p4188
sg59
g63
sS'trial_loop.thisN'
p4189
I35
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p4190
g60
(g99
S'#\x00\x00\x00'
tRp4191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4192
I0
sg3642
S'48-twix.png'
p4193
sS'block_loop.thisRepN'
p4194
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4195
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p4196
Nsg70
Vy
sS'block_loop.thisTrialN'
p4197
I0
sg39
F0.53366701277263928
sg34
g753
(S'\x07\xdf\x07\t\x15"\x05\r\xa8\x18'
tRp4198
sa(dp4199
S'trial_loop.thisTrialN'
p4200
I36
sg3633
g3737
sS'block_loop.thisIndex'
p4201
g3627
sg38
S'left'
p4202
sg59
g63
sS'trial_loop.thisN'
p4203
I36
sg33
g3748
sg64
g65
sS'trial_loop.thisIndex'
p4204
g60
(g99
S'$\x00\x00\x00'
tRp4205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4206
I0
sg3642
g3745
sS'block_loop.thisRepN'
p4207
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4208
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p4209
Nsg70
Vy
sS'block_loop.thisTrialN'
p4210
I0
sg39
F0.58324538040324114
sg34
g753
(S'\x07\xdf\x07\t\x15"\x0b\x07\x14\x80'
tRp4211
sa(dp4212
S'trial_loop.thisTrialN'
p4213
I37
sg3633
g3880
sS'block_loop.thisIndex'
p4214
g3627
sg38
S'left'
p4215
sg59
g63
sS'trial_loop.thisN'
p4216
I37
sg33
g3891
sg64
g65
sS'trial_loop.thisIndex'
p4217
g60
(g99
S'%\x00\x00\x00'
tRp4218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4219
I0
sg3642
g3888
sS'block_loop.thisRepN'
p4220
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4221
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p4222
Nsg70
Vy
sS'block_loop.thisTrialN'
p4223
I0
sg39
F0.53332603481248952
sg34
g753
(S'\x07\xdf\x07\t\x15"\x11\x018\x80'
tRp4224
sa(dp4225
S'trial_loop.thisTrialN'
p4226
I38
sg3633
S'7-olives.png'
p4227
sS'block_loop.thisIndex'
p4228
g3627
sg38
S'left'
p4229
sg59
g63
sS'trial_loop.thisN'
p4230
I38
sg33
g3991
sg64
g65
sS'trial_loop.thisIndex'
p4231
g60
(g99
S'&\x00\x00\x00'
tRp4232
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4233
I0
sg3642
S'22-daim.png'
p4234
sS'block_loop.thisRepN'
p4235
I1
sg3645
g3997
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4236
I1
sg3647
g3991
sg55
g11
sS'block_loop.thisTrial'
p4237
Nsg70
Vy
sS'block_loop.thisTrialN'
p4238
I0
sg39
F0.69998101243254496
sg34
g753
(S'\x07\xdf\x07\t\x15"\x16\t\xe7('
tRp4239
sa(dp4240
S'trial_loop.thisTrialN'
p4241
I39
sg3633
S'44-crunch.png'
p4242
sS'block_loop.thisIndex'
p4243
g3627
sg38
S'right'
p4244
sg59
g63
sS'trial_loop.thisN'
p4245
I39
sg33
g4085
sg64
g65
sS'trial_loop.thisIndex'
p4246
g60
(g99
S"'\x00\x00\x00"
tRp4247
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4248
I0
sg3642
S'26-walkers_smoky_bacon.png'
p4249
sS'block_loop.thisRepN'
p4250
I1
sg3645
g4085
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4251
I1
sg3647
g4092
sg55
g11
sS'block_loop.thisTrial'
p4252
Nsg70
Vy
sS'block_loop.thisTrialN'
p4253
I0
sg39
F1.3497647080948809
sg34
g753
(S'\x07\xdf\x07\t\x15"\x1c\x05\xf3p'
tRp4254
sa(dp4255
S'trial_loop.thisTrialN'
p4256
I40
sg3633
g3833
sS'block_loop.thisIndex'
p4257
g3627
sg38
S'right'
p4258
sg59
g63
sS'trial_loop.thisN'
p4259
I40
sg33
g3843
sg64
g65
sS'trial_loop.thisIndex'
p4260
g60
(g99
S'(\x00\x00\x00'
tRp4261
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4262
I0
sg3642
g3841
sS'block_loop.thisRepN'
p4263
I1
sg3645
g3843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4264
I1
sg3647
g3837
sg55
g11
sS'block_loop.thisTrial'
p4265
Nsg70
Vy
sS'block_loop.thisTrialN'
p4266
I0
sg39
F0.18320609381044051
sg34
g753
(S'\x07\xdf\x07\t\x15""\x0b\xc3\xb8'
tRp4267
sa(dp4268
S'trial_loop.thisTrialN'
p4269
I41
sg3633
S'2-steamed_puddings.png'
p4270
sS'block_loop.thisIndex'
p4271
g3627
sg38
S'left'
p4272
sg59
g63
sS'trial_loop.thisN'
p4273
I41
sg33
g4075
sg64
g65
sS'trial_loop.thisIndex'
p4274
g60
(g99
S')\x00\x00\x00'
tRp4275
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4276
I0
sg3642
S'20-fruit_pastilles.png'
p4277
sS'block_loop.thisRepN'
p4278
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4279
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p4280
Nsg70
Vy
sS'block_loop.thisTrialN'
p4281
I0
sg39
F0.66668206199392444
sg34
g753
(S'\x07\xdf\x07\t\x15"\'\x0e\xf8\x08'
tRp4282
sa(dp4283
S'trial_loop.thisTrialN'
p4284
I42
sg3633
g4242
sS'block_loop.thisIndex'
p4285
g3627
sg38
S'left'
p4286
sg59
g63
sS'trial_loop.thisN'
p4287
I42
sg33
g4085
sg64
g65
sS'trial_loop.thisIndex'
p4288
g60
(g99
S'*\x00\x00\x00'
tRp4289
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4290
I0
sg3642
g4249
sS'block_loop.thisRepN'
p4291
I1
sg3645
g4085
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4292
I1
sg3647
g4092
sg55
g11
sS'block_loop.thisTrial'
p4293
Nsg70
Vy
sS'block_loop.thisTrialN'
p4294
I0
sg39
F0.74991831924126018
sg34
g753
(S'\x07\xdf\x07\t\x15"-\n\x8b8'
tRp4295
sa(dp4296
S'trial_loop.thisTrialN'
p4297
I43
sg3633
g3803
sS'block_loop.thisIndex'
p4298
g3627
sg38
S'right'
p4299
sg59
g63
sS'trial_loop.thisN'
p4300
I43
sg33
g3813
sg64
g65
sS'trial_loop.thisIndex'
p4301
g60
(g99
S'+\x00\x00\x00'
tRp4302
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4303
I0
sg3642
g3811
sS'block_loop.thisRepN'
p4304
I1
sg3645
g3813
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4305
I1
sg3647
g3807
sg55
g11
sS'block_loop.thisTrial'
p4306
Nsg70
Vy
sS'block_loop.thisTrialN'
p4307
I0
sg39
F0.71686854500876507
sg34
g753
(S'\x07\xdf\x07\t\x15"3\x07\x10\x98'
tRp4308
sa(dp4309
S'trial_loop.thisTrialN'
p4310
I44
sg3633
g4111
sS'block_loop.thisIndex'
p4311
g3627
sg38
S'left'
p4312
sg59
g63
sS'trial_loop.thisN'
p4313
I44
sg33
g3843
sg64
g65
sS'trial_loop.thisIndex'
p4314
g60
(g99
S',\x00\x00\x00'
tRp4315
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4316
I0
sg3642
g4118
sS'block_loop.thisRepN'
p4317
I1
sg3645
g3843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4318
I1
sg3647
g3837
sg55
g11
sS'block_loop.thisTrial'
p4319
Nsg70
Vy
sS'block_loop.thisTrialN'
p4320
I0
sg39
F1.0497730899951421
sg34
g753
(S'\x07\xdf\x07\t\x15"9\x03Wx'
tRp4321
sa(dp4322
S'trial_loop.thisTrialN'
p4323
I45
sg3633
S'30-spaghetti_hoops.png'
p4324
sS'block_loop.thisIndex'
p4325
g3627
sg38
S'right'
p4326
sg59
g63
sS'trial_loop.thisN'
p4327
I45
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p4328
g60
(g99
S'-\x00\x00\x00'
tRp4329
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4330
I0
sg3642
S'19-caramello_redo.png'
p4331
sS'block_loop.thisRepN'
p4332
I1
sg3645
g3907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4333
I1
sg3647
g3901
sg55
g11
sS'block_loop.thisTrial'
p4334
Nsg70
Vy
sS'block_loop.thisTrialN'
p4335
I0
sg39
F1.1331228164999629
sg34
g753
(S'\x07\xdf\x07\t\x15#\x03\x04\x9f\x98'
tRp4336
sa(dp4337
S'trial_loop.thisTrialN'
p4338
I46
sg3633
g4081
sS'block_loop.thisIndex'
p4339
g3627
sg38
S'left'
p4340
sg59
g63
sS'trial_loop.thisN'
p4341
I46
sg33
g4085
sg64
g65
sS'trial_loop.thisIndex'
p4342
g60
(g99
S'.\x00\x00\x00'
tRp4343
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4344
I0
sg3642
g4089
sS'block_loop.thisRepN'
p4345
I1
sg3645
g4085
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4346
I1
sg3647
g4092
sg55
g11
sS'block_loop.thisTrial'
p4347
Nsg70
Vy
sS'block_loop.thisTrialN'
p4348
I0
sg39
F0.63325054068991449
sg34
g753
(S'\x07\xdf\x07\t\x15#\t\x07\x18h'
tRp4349
sa(dp4350
S'trial_loop.thisTrialN'
p4351
I47
sg3633
g3754
sS'block_loop.thisIndex'
p4352
g3627
sg38
S'right'
p4353
sg59
g63
sS'trial_loop.thisN'
p4354
I47
sg33
g3764
sg64
g65
sS'trial_loop.thisIndex'
p4355
g60
(g99
S'/\x00\x00\x00'
tRp4356
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4357
I0
sg3642
g3762
sS'block_loop.thisRepN'
p4358
I1
sg3645
g3764
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4359
I1
sg3647
g3758
sg55
g11
sS'block_loop.thisTrial'
p4360
Nsg70
Vy
sS'block_loop.thisTrialN'
p4361
I0
sg39
F0.66704499255865812
sg34
g753
(S'\x07\xdf\x07\t\x15#\x0f\x01\xf4\x00'
tRp4362
sa(dp4363
S'trial_loop.thisTrialN'
p4364
I48
sg3633
g4141
sS'block_loop.thisIndex'
p4365
g3627
sg38
S'right'
p4366
sg59
g63
sS'trial_loop.thisN'
p4367
I48
sg33
g4145
sg64
g65
sS'trial_loop.thisIndex'
p4368
g60
(g99
S'0\x00\x00\x00'
tRp4369
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4370
I0
sg3642
g4149
sS'block_loop.thisRepN'
p4371
I1
sg3645
g4145
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4372
I1
sg3647
g4152
sg55
g11
sS'block_loop.thisTrial'
p4373
Nsg70
Vy
sS'block_loop.thisTrialN'
p4374
I0
sg39
F0.95000624365638942
sg34
g753
(S'\x07\xdf\x07\t\x15#\x14\x0c\xc9p'
tRp4375
sa(dp4376
S'trial_loop.thisTrialN'
p4377
I49
sg3633
S'18-mms.png'
p4378
sS'block_loop.thisIndex'
p4379
g3627
sg38
S'right'
p4380
sg59
g63
sS'trial_loop.thisN'
p4381
I49
sg33
g3980
sg64
g65
sS'trial_loop.thisIndex'
p4382
g60
(g99
S'1\x00\x00\x00'
tRp4383
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4384
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p4385
sS'block_loop.thisRepN'
p4386
I1
sg3645
g3980
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4387
I1
sg3647
g3974
sg55
g11
sS'block_loop.thisTrial'
p4388
Nsg70
Vy
sS'block_loop.thisTrialN'
p4389
I0
sg39
F1.1000014825185644
sg34
g753
(S'\x07\xdf\x07\t\x15#\x1a\x0cc\xe0'
tRp4390
sa(dp4391
S'trial_loop.thisTrialN'
p4392
I50
sg3633
g4270
sS'block_loop.thisIndex'
p4393
g3627
sg38
S'left'
p4394
sg59
g63
sS'trial_loop.thisN'
p4395
I50
sg33
g4075
sg64
g65
sS'trial_loop.thisIndex'
p4396
g60
(g99
S'2\x00\x00\x00'
tRp4397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4398
I0
sg3642
g4277
sS'block_loop.thisRepN'
p4399
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4400
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p4401
Nsg70
Vy
sS'block_loop.thisTrialN'
p4402
I0
sg39
F0.8666650701125036
sg34
g753
(S'\x07\xdf\x07\t\x15# \x0e\xa2\x18'
tRp4403
sa(dp4404
S'trial_loop.thisTrialN'
p4405
I51
sg3633
g3897
sS'block_loop.thisIndex'
p4406
g3627
sg38
S'right'
p4407
sg59
g63
sS'trial_loop.thisN'
p4408
I51
sg33
g3907
sg64
g65
sS'trial_loop.thisIndex'
p4409
g60
(g99
S'3\x00\x00\x00'
tRp4410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4411
I0
sg3642
g3905
sS'block_loop.thisRepN'
p4412
I1
sg3645
g3907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4413
I1
sg3647
g3901
sg55
g11
sS'block_loop.thisTrial'
p4414
Nsg70
Vy
sS'block_loop.thisTrialN'
p4415
I0
sg39
F1.1165269398261444
sg34
g753
(S'\x07\xdf\x07\t\x15#&\r\x0f\xc0'
tRp4416
sa(dp4417
S'trial_loop.thisTrialN'
p4418
I52
sg3633
g3850
sS'block_loop.thisIndex'
p4419
g3627
sg38
S'left'
p4420
sg59
g63
sS'trial_loop.thisN'
p4421
I52
sg33
g3860
sg64
g65
sS'trial_loop.thisIndex'
p4422
g60
(g99
S'4\x00\x00\x00'
tRp4423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4424
I0
sg3642
g3858
sS'block_loop.thisRepN'
p4425
I1
sg3645
g3860
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4426
I1
sg3647
g3854
sg55
g11
sS'block_loop.thisTrial'
p4427
Nsg70
Vy
sS'block_loop.thisTrialN'
p4428
I0
sg39
F0.21655778749845922
sg34
g753
(S'\x07\xdf\x07\t\x15#-\x00\x07\xd0'
tRp4429
sa(dp4430
S'trial_loop.thisTrialN'
p4431
I53
sg3633
g3654
sS'block_loop.thisIndex'
p4432
g3627
sg38
S'right'
p4433
sg59
g63
sS'trial_loop.thisN'
p4434
I53
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4435
g60
(g99
S'5\x00\x00\x00'
tRp4436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4437
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4438
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4439
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4440
Nsg70
Vy
sS'block_loop.thisTrialN'
p4441
I0
sg39
F0.1164585161532159
sg34
g753
(S'\x07\xdf\x07\t\x15#2\x03\xf3\xb8'
tRp4442
sa(dp4443
S'trial_loop.thisTrialN'
p4444
I54
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p4445
sS'block_loop.thisIndex'
p4446
g3627
sg38
S'right'
p4447
sg59
g63
sS'trial_loop.thisN'
p4448
I54
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p4449
g60
(g99
S'6\x00\x00\x00'
tRp4450
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4451
I0
sg3642
S'36-fig_rolls.png'
p4452
sS'block_loop.thisRepN'
p4453
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4454
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p4455
Nsg70
Vy
sS'block_loop.thisTrialN'
p4456
I0
sg39
F2.2664745672009303
sg34
g753
(S'\x07\xdf\x07\t\x15#7\x065\xd8'
tRp4457
sa(dp4458
S'trial_loop.thisTrialN'
p4459
I55
sg3633
g4081
sS'block_loop.thisIndex'
p4460
g3627
sg38
S'right'
p4461
sg59
g63
sS'trial_loop.thisN'
p4462
I55
sg33
g4085
sg64
g65
sS'trial_loop.thisIndex'
p4463
g60
(g99
S'7\x00\x00\x00'
tRp4464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4465
I0
sg3642
g4089
sS'block_loop.thisRepN'
p4466
I1
sg3645
g4085
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4467
I1
sg3647
g4092
sg55
g11
sS'block_loop.thisTrial'
p4468
Nsg70
Vy
sS'block_loop.thisTrialN'
p4469
I0
sg39
F0.43322932934825076
sg34
g753
(S'\x07\xdf\x07\t\x15$\x02\n\xcd\xa0'
tRp4470
sa(dp4471
S'trial_loop.thisTrialN'
p4472
I56
sg3633
g4004
sS'block_loop.thisIndex'
p4473
g3627
sg38
S'right'
p4474
sg59
g63
sS'trial_loop.thisN'
p4475
I56
sg33
g4015
sg64
g65
sS'trial_loop.thisIndex'
p4476
g60
(g99
S'8\x00\x00\x00'
tRp4477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4478
I0
sg3642
g4012
sS'block_loop.thisRepN'
p4479
I1
sg3645
g4008
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4480
I1
sg3647
g4015
sg55
g11
sS'block_loop.thisTrial'
p4481
Nsg70
Vy
sS'block_loop.thisTrialN'
p4482
I0
sg39
F0.099827857447962742
sg34
g753
(S'\x07\xdf\x07\t\x15$\x08\x02\x90@'
tRp4483
sa(dp4484
S'trial_loop.thisTrialN'
p4485
I57
sg3633
g3897
sS'block_loop.thisIndex'
p4486
g3627
sg38
S'left'
p4487
sg59
g63
sS'trial_loop.thisN'
p4488
I57
sg33
g3907
sg64
g65
sS'trial_loop.thisIndex'
p4489
g60
(g99
S'9\x00\x00\x00'
tRp4490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4491
I0
sg3642
g3905
sS'block_loop.thisRepN'
p4492
I1
sg3645
g3907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4493
I1
sg3647
g3901
sg55
g11
sS'block_loop.thisTrial'
p4494
Nsg70
Vy
sS'block_loop.thisTrialN'
p4495
I0
sg39
F0.96670504094799981
sg34
g753
(S'\x07\xdf\x07\t\x15$\r\x04\x93\xe0'
tRp4496
sa(dp4497
S'trial_loop.thisTrialN'
p4498
I58
sg3633
g3720
sS'block_loop.thisIndex'
p4499
g3627
sg38
S'left'
p4500
sg59
g63
sS'trial_loop.thisN'
p4501
I58
sg33
g3724
sg64
g65
sS'trial_loop.thisIndex'
p4502
g60
(g99
S':\x00\x00\x00'
tRp4503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4504
I0
sg3642
g3728
sS'block_loop.thisRepN'
p4505
I1
sg3645
g3724
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4506
I1
sg3647
g3731
sg55
g11
sS'block_loop.thisTrial'
p4507
Nsg70
Vy
sS'block_loop.thisTrialN'
p4508
I0
sg39
F0.8836418385617435
sg34
g753
(S'\x07\xdf\x07\t\x15$\x13\x04\xabP'
tRp4509
sa(dp4510
S'trial_loop.thisTrialN'
p4511
I59
sg3633
g4270
sS'block_loop.thisIndex'
p4512
g3627
sg38
S'right'
p4513
sg59
g63
sS'trial_loop.thisN'
p4514
I59
sg33
g4068
sg64
g65
sS'trial_loop.thisIndex'
p4515
g60
(g99
S';\x00\x00\x00'
tRp4516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4517
I0
sg3642
g4277
sS'block_loop.thisRepN'
p4518
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4519
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p4520
Nsg70
Vy
sS'block_loop.thisTrialN'
p4521
I0
sg39
F0.83334587766876211
sg34
g753
(S'\x07\xdf\x07\t\x15$\x19\x03Wx'
tRp4522
sa(dp4523
S'trial_loop.thisTrialN'
p4524
I60
sg3633
g3654
sS'block_loop.thisIndex'
p4525
g3627
sg38
S'right'
p4526
sg59
g63
sS'trial_loop.thisN'
p4527
I60
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p4528
g60
(g99
S'<\x00\x00\x00'
tRp4529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4530
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4531
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4532
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4533
Nsg70
Vy
sS'block_loop.thisTrialN'
p4534
I0
sg39
F0.63322915829485282
sg34
g753
(S'\x07\xdf\x07\t\x15$\x1f\x01H '
tRp4535
sa(dp4536
S'trial_loop.thisTrialN'
p4537
I61
sg3633
g3970
sS'block_loop.thisIndex'
p4538
g3627
sg38
S'left'
p4539
sg59
g63
sS'trial_loop.thisN'
p4540
I61
sg33
g3974
sg64
g65
sS'trial_loop.thisIndex'
p4541
g60
(g99
S'=\x00\x00\x00'
tRp4542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4543
I0
sg3642
g3978
sS'block_loop.thisRepN'
p4544
I1
sg3645
g3980
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4545
I1
sg3647
g3974
sg55
g11
sS'block_loop.thisTrial'
p4546
Nsg70
Vy
sS'block_loop.thisTrialN'
p4547
I0
sg39
F0.8499905062126345
sg34
g753
(S'\x07\xdf\x07\t\x15$$\x0be\xf8'
tRp4548
sa(dp4549
S'trial_loop.thisTrialN'
p4550
I62
sg3633
g3833
sS'block_loop.thisIndex'
p4551
g3627
sg38
S'left'
p4552
sg59
g63
sS'trial_loop.thisN'
p4553
I62
sg33
g3843
sg64
g65
sS'trial_loop.thisIndex'
p4554
g60
(g99
S'>\x00\x00\x00'
tRp4555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4556
I0
sg3642
g3841
sS'block_loop.thisRepN'
p4557
I1
sg3645
g3843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4558
I1
sg3647
g3837
sg55
g11
sS'block_loop.thisTrial'
p4559
Nsg70
Vy
sS'block_loop.thisTrialN'
p4560
I0
sg39
F1.0333328771739616
sg34
g753
(S'\x07\xdf\x07\t\x15$*\t\x95 '
tRp4561
sa(dp4562
S'trial_loop.thisTrialN'
p4563
I63
sg3633
g4004
sS'block_loop.thisIndex'
p4564
g3627
sg38
S'left'
p4565
sg59
g63
sS'trial_loop.thisN'
p4566
I63
sg33
g4008
sg64
g65
sS'trial_loop.thisIndex'
p4567
g60
(g99
S'?\x00\x00\x00'
tRp4568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4569
I0
sg3642
g4012
sS'block_loop.thisRepN'
p4570
I1
sg3645
g4008
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4571
I1
sg3647
g4015
sg55
g11
sS'block_loop.thisTrial'
p4572
Nsg70
Vy
sS'block_loop.thisTrialN'
p4573
I0
sg39
F0.783281987067312
sg34
g753
(S'\x07\xdf\x07\t\x15$0\n\xa2\xa8'
tRp4574
sa(dp4575
S'trial_loop.thisTrialN'
p4576
I64
sg3633
g3703
sS'block_loop.thisIndex'
p4577
g3627
sg38
S'left'
p4578
sg59
g63
sS'trial_loop.thisN'
p4579
I64
sg33
g3707
sg64
g65
sS'trial_loop.thisIndex'
p4580
g60
(g99
S'@\x00\x00\x00'
tRp4581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4582
I0
sg3642
g3711
sS'block_loop.thisRepN'
p4583
I1
sg3645
g3707
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4584
I1
sg3647
g3714
sg55
g11
sS'block_loop.thisTrial'
p4585
Nsg70
Vy
sS'block_loop.thisTrialN'
p4586
I0
sg39
F0.79995027879340341
sg34
g753
(S'\x07\xdf\x07\t\x15$6\x07\xdf\xa0'
tRp4587
sa(dp4588
S'trial_loop.thisTrialN'
p4589
I65
sg3633
g4126
sS'block_loop.thisIndex'
p4590
g3627
sg38
S'left'
p4591
sg59
g63
sS'trial_loop.thisN'
p4592
I65
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p4593
g60
(g99
S'A\x00\x00\x00'
tRp4594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4595
I0
sg3642
g4133
sS'block_loop.thisRepN'
p4596
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4597
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4598
Nsg70
Vy
sS'block_loop.thisTrialN'
p4599
I0
sg39
F0.91665569037286332
sg34
g753
(S'\x07\xdf\x07\t\x15%\x00\x05W0'
tRp4600
sa(dp4601
S'trial_loop.thisTrialN'
p4602
I66
sg3633
g3703
sS'block_loop.thisIndex'
p4603
g3627
sg38
S'left'
p4604
sg59
g63
sS'trial_loop.thisN'
p4605
I66
sg33
g3707
sg64
g65
sS'trial_loop.thisIndex'
p4606
g60
(g99
S'B\x00\x00\x00'
tRp4607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4608
I0
sg3642
g3711
sS'block_loop.thisRepN'
p4609
I1
sg3645
g3707
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4610
I1
sg3647
g3714
sg55
g11
sS'block_loop.thisTrial'
p4611
Nsg70
Vy
sS'block_loop.thisTrialN'
p4612
I0
sg39
F0.58331209348398261
sg34
g753
(S'\x07\xdf\x07\t\x15%\x06\x04|p'
tRp4613
sa(dp4614
S'trial_loop.thisTrialN'
p4615
I67
sg3633
g3671
sS'block_loop.thisIndex'
p4616
g3627
sg38
S'left'
p4617
sg59
g63
sS'trial_loop.thisN'
p4618
I67
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4619
g60
(g99
S'C\x00\x00\x00'
tRp4620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4621
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4622
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4623
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4624
Nsg70
Vy
sS'block_loop.thisTrialN'
p4625
I0
sg39
F0.56658222045371076
sg34
g753
(S'\x07\xdf\x07\t\x15%\x0b\x0e\x1dH'
tRp4626
sa(dp4627
S'trial_loop.thisTrialN'
p4628
I68
sg3633
g3786
sS'block_loop.thisIndex'
p4629
g3627
sg38
S'left'
p4630
sg59
g63
sS'trial_loop.thisN'
p4631
I68
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p4632
g60
(g99
S'D\x00\x00\x00'
tRp4633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4634
I0
sg3642
g3794
sS'block_loop.thisRepN'
p4635
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4636
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p4637
Nsg70
Vy
sS'block_loop.thisTrialN'
p4638
I0
sg39
F0.61664411536912667
sg34
g753
(S'\x07\xdf\x07\t\x15%\x11\x07\xc80'
tRp4639
sa(dp4640
S'trial_loop.thisTrialN'
p4641
I69
sg3633
g4126
sS'block_loop.thisIndex'
p4642
g3627
sg38
S'left'
p4643
sg59
g63
sS'trial_loop.thisN'
p4644
I69
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4645
g60
(g99
S'E\x00\x00\x00'
tRp4646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4647
I0
sg3642
g4133
sS'block_loop.thisRepN'
p4648
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4649
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4650
Nsg70
Vy
sS'block_loop.thisTrialN'
p4651
I0
sg39
F0.76667185546102701
sg34
g753
(S'\x07\xdf\x07\t\x15%\x17\x02\xa3\xc8'
tRp4652
sa(dp4653
S'trial_loop.thisTrialN'
p4654
I70
sg3633
g3897
sS'block_loop.thisIndex'
p4655
g3627
sg38
S'right'
p4656
sg59
g63
sS'trial_loop.thisN'
p4657
I70
sg33
g3907
sg64
g65
sS'trial_loop.thisIndex'
p4658
g60
(g99
S'F\x00\x00\x00'
tRp4659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4660
I0
sg3642
g3905
sS'block_loop.thisRepN'
p4661
I1
sg3645
g3907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4662
I1
sg3647
g3901
sg55
g11
sS'block_loop.thisTrial'
p4663
Nsg70
Vy
sS'block_loop.thisTrialN'
p4664
I0
sg39
F1.6166617914859671
sg34
g753
(S'\x07\xdf\x07\t\x15%\x1c\x0e\xa9\xe8'
tRp4665
sa(dp4666
S'trial_loop.thisTrialN'
p4667
I71
sg3633
g3803
sS'block_loop.thisIndex'
p4668
g3627
sg38
S'right'
p4669
sg59
g63
sS'trial_loop.thisN'
p4670
I71
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p4671
g60
(g99
S'G\x00\x00\x00'
tRp4672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4673
I0
sg3642
g3811
sS'block_loop.thisRepN'
p4674
I1
sg3645
g3813
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4675
I1
sg3647
g3807
sg55
g11
sS'block_loop.thisTrial'
p4676
Nsg70
Vy
sS'block_loop.thisTrialN'
p4677
I0
sg39
F0.88323158163257176
sg34
g753
(S'\x07\xdf\x07\t\x15%#\t}\xb0'
tRp4678
sa(dp4679
S'trial_loop.thisTrialN'
p4680
I72
sg3633
g3703
sS'block_loop.thisIndex'
p4681
g3627
sg38
S'left'
p4682
sg59
g63
sS'trial_loop.thisN'
p4683
I72
sg33
g3707
sg64
g65
sS'trial_loop.thisIndex'
p4684
g60
(g99
S'H\x00\x00\x00'
tRp4685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4686
I0
sg3642
g3711
sS'block_loop.thisRepN'
p4687
I1
sg3645
g3707
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4688
I1
sg3647
g3714
sg55
g11
sS'block_loop.thisTrial'
p4689
Nsg70
Vy
sS'block_loop.thisTrialN'
p4690
I0
sg39
F0.75000841041037347
sg34
g753
(S'\x07\xdf\x07\t\x15%)\x08%\xf0'
tRp4691
sa(dp4692
S'trial_loop.thisTrialN'
p4693
I73
sg3633
S'35-raisins.png'
p4694
sS'block_loop.thisIndex'
p4695
g3627
sg38
S'right'
p4696
sg59
g63
sS'trial_loop.thisN'
p4697
I73
sg33
g3724
sg64
g65
sS'trial_loop.thisIndex'
p4698
g60
(g99
S'I\x00\x00\x00'
tRp4699
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4700
I0
sg3642
S'49-yorkie.png'
p4701
sS'block_loop.thisRepN'
p4702
I1
sg3645
g3724
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4703
I1
sg3647
g3731
sg55
g11
sS'block_loop.thisTrial'
p4704
Nsg70
Vy
sS'block_loop.thisTrialN'
p4705
I0
sg39
F0.65003714834892889
sg34
g753
(S'\x07\xdf\x07\t\x15%/\x04\xe9\xd0'
tRp4706
sa(dp4707
S'trial_loop.thisTrialN'
p4708
I74
sg3633
g3987
sS'block_loop.thisIndex'
p4709
g3627
sg38
S'right'
p4710
sg59
g63
sS'trial_loop.thisN'
p4711
I74
sg33
g3991
sg64
g65
sS'trial_loop.thisIndex'
p4712
g60
(g99
S'J\x00\x00\x00'
tRp4713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4714
I0
sg3642
g3995
sS'block_loop.thisRepN'
p4715
I1
sg3645
g3997
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4716
I1
sg3647
g3991
sg55
g11
sS'block_loop.thisTrial'
p4717
Nsg70
Vy
sS'block_loop.thisTrialN'
p4718
I0
sg39
F0.81669098557904363
sg34
g753
(S'\x07\xdf\x07\t\x15%5\x00\x00\x00'
tRp4719
sa(dp4720
S'trial_loop.thisTrialN'
p4721
I75
sg3633
g4064
sS'block_loop.thisIndex'
p4722
g3627
sg38
S'left'
p4723
sg59
g63
sS'trial_loop.thisN'
p4724
I75
sg33
g4075
sg64
g65
sS'trial_loop.thisIndex'
p4725
g60
(g99
S'K\x00\x00\x00'
tRp4726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4727
I0
sg3642
g4072
sS'block_loop.thisRepN'
p4728
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4729
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p4730
Nsg70
Vy
sS'block_loop.thisTrialN'
p4731
I0
sg39
F1.0664325436664512
sg34
g753
(S'\x07\xdf\x07\t\x15%:\x0c\xf8P'
tRp4732
sa(dp4733
S'trial_loop.thisTrialN'
p4734
I76
sg3633
g3880
sS'block_loop.thisIndex'
p4735
g3627
sg38
S'right'
p4736
sg59
g63
sS'trial_loop.thisN'
p4737
I76
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p4738
g60
(g99
S'L\x00\x00\x00'
tRp4739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4740
I0
sg3642
g3888
sS'block_loop.thisRepN'
p4741
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4742
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p4743
Nsg70
Vy
sS'block_loop.thisTrialN'
p4744
I0
sg39
F1.016564515826758
sg34
g753
(S'\x07\xdf\x07\t\x15&\x04\x0e~\xf0'
tRp4745
sa(dp4746
S'trial_loop.thisTrialN'
p4747
I77
sg3633
S'51-mars.png'
p4748
sS'block_loop.thisIndex'
p4749
g3627
sg38
S'left'
p4750
sg59
g63
sS'trial_loop.thisN'
p4751
I77
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p4752
g60
(g99
S'M\x00\x00\x00'
tRp4753
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4754
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p4755
sS'block_loop.thisRepN'
p4756
I1
sg3645
g3764
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4757
I1
sg3647
g3758
sg55
g11
sS'block_loop.thisTrial'
p4758
Nsg70
Vy
sS'block_loop.thisTrialN'
p4759
I0
sg39
F1.3999742841042462
sg34
g753
(S'\x07\xdf\x07\t\x15&\x0b\x00\x0b\xb8'
tRp4760
sa(dp4761
S'trial_loop.thisTrialN'
p4762
I78
sg3633
g4064
sS'block_loop.thisIndex'
p4763
g3627
sg38
S'left'
p4764
sg59
g63
sS'trial_loop.thisN'
p4765
I78
sg33
g4068
sg64
g65
sS'trial_loop.thisIndex'
p4766
g60
(g99
S'N\x00\x00\x00'
tRp4767
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4768
I0
sg3642
g4072
sS'block_loop.thisRepN'
p4769
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4770
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p4771
Nsg70
Vy
sS'block_loop.thisTrialN'
p4772
I0
sg39
F0.18332583524170332
sg34
g753
(S'\x07\xdf\x07\t\x15&\x11\x06\x8f\xb0'
tRp4773
sa(dp4774
S'trial_loop.thisTrialN'
p4775
I79
sg3633
g4081
sS'block_loop.thisIndex'
p4776
g3627
sg38
S'right'
p4777
sg59
g63
sS'trial_loop.thisN'
p4778
I79
sg33
g4092
sg64
g65
sS'trial_loop.thisIndex'
p4779
g60
(g99
S'O\x00\x00\x00'
tRp4780
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4781
I0
sg3642
g4089
sS'block_loop.thisRepN'
p4782
I1
sg3645
g4085
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4783
I1
sg3647
g4092
sg55
g11
sS'block_loop.thisTrial'
p4784
Nsg70
Vy
sS'block_loop.thisTrialN'
p4785
I0
sg39
F0.86667704425781267
sg34
g753
(S'\x07\xdf\x07\t\x15&\x16\n\x02\x80'
tRp4786
sa(dp4787
S'trial_loop.thisTrialN'
p4788
I80
sg3633
S'23-crunchie_redo.png'
p4789
sS'block_loop.thisIndex'
p4790
g3627
sg38
S'right'
p4791
sg59
g63
sS'trial_loop.thisN'
p4792
I80
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p4793
g60
(g99
S'P\x00\x00\x00'
tRp4794
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4795
I0
sg3642
S'33-ambrosia_rice.png'
p4796
sS'block_loop.thisRepN'
p4797
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4798
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p4799
Nsg70
Vy
sS'block_loop.thisTrialN'
p4800
I0
sg39
F0.40004669915651903
sg34
g753
(S'\x07\xdf\x07\t\x15&\x1c\x08p('
tRp4801
sa(dp4802
S'trial_loop.thisTrialN'
p4803
I81
sg3633
g4141
sS'block_loop.thisIndex'
p4804
g3627
sg38
S'left'
p4805
sg59
g63
sS'trial_loop.thisN'
p4806
I81
sg33
g4145
sg64
g65
sS'trial_loop.thisIndex'
p4807
g60
(g99
S'Q\x00\x00\x00'
tRp4808
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4809
I0
sg3642
g4149
sS'block_loop.thisRepN'
p4810
I1
sg3645
g4145
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4811
I1
sg3647
g4152
sg55
g11
sS'block_loop.thisTrial'
p4812
Nsg70
Vy
sS'block_loop.thisTrialN'
p4813
I0
sg39
F1.1831621886231005
sg34
g753
(S'\x07\xdf\x07\t\x15&!\x0e\xf8\x08'
tRp4814
sa(dp4815
S'trial_loop.thisTrialN'
p4816
I82
sg3633
g3688
sS'block_loop.thisIndex'
p4817
g3627
sg38
S'left'
p4818
sg59
g63
sS'trial_loop.thisN'
p4819
I82
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p4820
g60
(g99
S'R\x00\x00\x00'
tRp4821
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4822
I0
sg3642
g3695
sS'block_loop.thisRepN'
p4823
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4824
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4825
Nsg70
Vy
sS'block_loop.thisTrialN'
p4826
I0
sg39
F0.65005653505795635
sg34
g753
(S'\x07\xdf\x07\t\x15&(\x03$\xb0'
tRp4827
sa(dp4828
S'trial_loop.thisTrialN'
p4829
I83
sg3633
g4049
sS'block_loop.thisIndex'
p4830
g3627
sg38
S'right'
p4831
sg59
g63
sS'trial_loop.thisN'
p4832
I83
sg33
g3957
sg64
g65
sS'trial_loop.thisIndex'
p4833
g60
(g99
S'S\x00\x00\x00'
tRp4834
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4835
I0
sg3642
g4056
sS'block_loop.thisRepN'
p4836
I1
sg3645
g3957
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4837
I1
sg3647
g3964
sg55
g11
sS'block_loop.thisTrial'
p4838
Nsg70
Vy
sS'block_loop.thisTrialN'
p4839
I0
sg39
F1.3664415527819074
sg34
g753
(S'\x07\xdf\x07\t\x15&-\r} '
tRp4840
sa(dp4841
S'trial_loop.thisTrialN'
p4842
I84
sg3633
g3803
sS'block_loop.thisIndex'
p4843
g3627
sg38
S'right'
p4844
sg59
g63
sS'trial_loop.thisN'
p4845
I84
sg33
g3813
sg64
g65
sS'trial_loop.thisIndex'
p4846
g60
(g99
S'T\x00\x00\x00'
tRp4847
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4848
I0
sg3642
g3811
sS'block_loop.thisRepN'
p4849
I1
sg3645
g3813
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4850
I1
sg3647
g3807
sg55
g11
sS'block_loop.thisTrial'
p4851
Nsg70
Vy
sS'block_loop.thisTrialN'
p4852
I0
sg39
F0.7666154059334076
sg34
g753
(S'\x07\xdf\x07\t\x15&4\x04E\xc0'
tRp4853
sa(dp4854
S'trial_loop.thisTrialN'
p4855
I85
sg3633
g4158
sS'block_loop.thisIndex'
p4856
g3627
sg38
S'right'
p4857
sg59
g63
sS'trial_loop.thisN'
p4858
I85
sg33
g4008
sg64
g65
sS'trial_loop.thisIndex'
p4859
g60
(g99
S'U\x00\x00\x00'
tRp4860
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4861
I0
sg3642
g4165
sS'block_loop.thisRepN'
p4862
I1
sg3645
g4008
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4863
I1
sg3647
g4015
sg55
g11
sS'block_loop.thisTrial'
p4864
Nsg70
Vy
sS'block_loop.thisTrialN'
p4865
I0
sg39
F1.7333227276612888
sg34
g753
(S'\x07\xdf\x07\t\x15&:\x01H '
tRp4866
sa(dp4867
S'trial_loop.thisTrialN'
p4868
I86
sg3633
g4064
sS'block_loop.thisIndex'
p4869
g3627
sg38
S'left'
p4870
sg59
g63
sS'trial_loop.thisN'
p4871
I86
sg33
g4075
sg64
g65
sS'trial_loop.thisIndex'
p4872
g60
(g99
S'V\x00\x00\x00'
tRp4873
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4874
I0
sg3642
g4072
sS'block_loop.thisRepN'
p4875
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4876
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p4877
Nsg70
Vy
sS'block_loop.thisTrialN'
p4878
I0
sg39
F0.63342274026945233
sg34
g753
(S"\x07\xdf\x07\t\x15'\x04\r\x07\xf0"
tRp4879
sa(dp4880
S'trial_loop.thisTrialN'
p4881
I87
sg3633
g4445
sS'block_loop.thisIndex'
p4882
g3627
sg38
S'left'
p4883
sg59
g63
sS'trial_loop.thisN'
p4884
I87
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p4885
g60
(g99
S'W\x00\x00\x00'
tRp4886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4887
I0
sg3642
g4452
sS'block_loop.thisRepN'
p4888
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4889
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p4890
Nsg70
Vy
sS'block_loop.thisTrialN'
p4891
I0
sg39
F0.21665956771175843
sg34
g753
(S"\x07\xdf\x07\t\x15'\n\x07\xe3\x88"
tRp4892
sa(dp4893
S'trial_loop.thisTrialN'
p4894
I88
sg3633
g4111
sS'block_loop.thisIndex'
p4895
g3627
sg38
S'left'
p4896
sg59
g63
sS'trial_loop.thisN'
p4897
I88
sg33
g3837
sg64
g65
sS'trial_loop.thisIndex'
p4898
g60
(g99
S'X\x00\x00\x00'
tRp4899
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4900
I0
sg3642
g4118
sS'block_loop.thisRepN'
p4901
I1
sg3645
g3843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4902
I1
sg3647
g3837
sg55
g11
sS'block_loop.thisTrial'
p4903
Nsg70
Vy
sS'block_loop.thisTrialN'
p4904
I0
sg39
F0.69978115828416776
sg34
g753
(S"\x07\xdf\x07\t\x15'\x0f\x0b\xcfp"
tRp4905
sa(dp4906
S'trial_loop.thisTrialN'
p4907
I89
sg3633
g3754
sS'block_loop.thisIndex'
p4908
g3627
sg38
S'right'
p4909
sg59
g63
sS'trial_loop.thisN'
p4910
I89
sg33
g3764
sg64
g65
sS'trial_loop.thisIndex'
p4911
g60
(g99
S'Y\x00\x00\x00'
tRp4912
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4913
I0
sg3642
g3762
sS'block_loop.thisRepN'
p4914
I1
sg3645
g3764
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4915
I1
sg3647
g3758
sg55
g11
sS'block_loop.thisTrial'
p4916
Nsg70
Vy
sS'block_loop.thisTrialN'
p4917
I0
sg39
F0.63316558129008627
sg34
g753
(S"\x07\xdf\x07\t\x15'\x15\x07\x9d8"
tRp4918
sa(dp4919
S'trial_loop.thisTrialN'
p4920
I90
sg3633
g4227
sS'block_loop.thisIndex'
p4921
g3627
sg38
S'right'
p4922
sg59
g63
sS'trial_loop.thisN'
p4923
I90
sg33
g3997
sg64
g65
sS'trial_loop.thisIndex'
p4924
g60
(g99
S'Z\x00\x00\x00'
tRp4925
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4926
I0
sg3642
g4234
sS'block_loop.thisRepN'
p4927
I1
sg3645
g3997
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4928
I1
sg3647
g3991
sg55
g11
sS'block_loop.thisTrial'
p4929
Nsg70
Vy
sS'block_loop.thisTrialN'
p4930
I0
sg39
F0.61649757467239397
sg34
g753
(S"\x07\xdf\x07\t\x15'\x1b\x02x\xd0"
tRp4931
sa(dp4932
S'trial_loop.thisTrialN'
p4933
I91
sg3633
g4694
sS'block_loop.thisIndex'
p4934
g3627
sg38
S'right'
p4935
sg59
g63
sS'trial_loop.thisN'
p4936
I91
sg33
g3724
sg64
g65
sS'trial_loop.thisIndex'
p4937
g60
(g99
S'[\x00\x00\x00'
tRp4938
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4939
I0
sg3642
g4701
sS'block_loop.thisRepN'
p4940
I1
sg3645
g3724
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4941
I1
sg3647
g3731
sg55
g11
sS'block_loop.thisTrial'
p4942
Nsg70
Vy
sS'block_loop.thisTrialN'
p4943
I0
sg39
F0.61652636962389806
sg34
g753
(S"\x07\xdf\x07\t\x15' \x0c\x96\xa8"
tRp4944
sa(dp4945
S'trial_loop.thisTrialN'
p4946
I92
sg3633
g4158
sS'block_loop.thisIndex'
p4947
g3627
sg38
S'right'
p4948
sg59
g63
sS'trial_loop.thisN'
p4949
I92
sg33
g4015
sg64
g65
sS'trial_loop.thisIndex'
p4950
g60
(g99
S'\\\x00\x00\x00'
tRp4951
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4952
I0
sg3642
g4165
sS'block_loop.thisRepN'
p4953
I1
sg3645
g4008
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4954
I1
sg3647
g4015
sg55
g11
sS'block_loop.thisTrial'
p4955
Nsg70
Vy
sS'block_loop.thisTrialN'
p4956
I0
sg39
F0.7332582953677047
sg34
g753
(S"\x07\xdf\x07\t\x15'&\x073\xc0"
tRp4957
sa(dp4958
S'trial_loop.thisTrialN'
p4959
I93
sg3633
S'45-chewy_nougat_redo.png'
p4960
sS'block_loop.thisIndex'
p4961
g3627
sg38
S'right'
p4962
sg59
g63
sS'trial_loop.thisN'
p4963
I93
sg33
g3707
sg64
g65
sS'trial_loop.thisIndex'
p4964
g60
(g99
S']\x00\x00\x00'
tRp4965
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4966
I0
sg3642
S'41-peanuts_redo.png'
p4967
sS'block_loop.thisRepN'
p4968
I1
sg3645
g3707
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4969
I1
sg3647
g3714
sg55
g11
sS'block_loop.thisTrial'
p4970
Nsg70
Vy
sS'block_loop.thisTrialN'
p4971
I0
sg39
F0.60000176761241164
sg34
g753
(S"\x07\xdf\x07\t\x15',\x03z\xa0"
tRp4972
sa(dp4973
S'trial_loop.thisTrialN'
p4974
I94
sg3633
g4158
sS'block_loop.thisIndex'
p4975
g3627
sg38
S'right'
p4976
sg59
g63
sS'trial_loop.thisN'
p4977
I94
sg33
g4015
sg64
g65
sS'trial_loop.thisIndex'
p4978
g60
(g99
S'^\x00\x00\x00'
tRp4979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4980
I0
sg3642
g4165
sS'block_loop.thisRepN'
p4981
I1
sg3645
g4008
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4982
I1
sg3647
g4015
sg55
g11
sS'block_loop.thisTrial'
p4983
Nsg70
Vy
sS'block_loop.thisTrialN'
p4984
I0
sg39
F0.55001428344257874
sg34
g753
(S"\x07\xdf\x07\t\x15'1\r\x1f`"
tRp4985
sa(dp4986
S'trial_loop.thisTrialN'
p4987
I95
sg3633
g4378
sS'block_loop.thisIndex'
p4988
g3627
sg38
S'right'
p4989
sg59
g63
sS'trial_loop.thisN'
p4990
I95
sg33
g3980
sg64
g65
sS'trial_loop.thisIndex'
p4991
g60
(g99
S'_\x00\x00\x00'
tRp4992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4993
I0
sg3642
g4385
sS'block_loop.thisRepN'
p4994
I1
sg3645
g3980
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4995
I1
sg3647
g3974
sg55
g11
sS'block_loop.thisTrial'
p4996
Nsg70
Vy
sS'block_loop.thisTrialN'
p4997
I0
sg39
F1.2166481637614197
sg34
g753
(S"\x07\xdf\x07\t\x15'7\x06\xcaH"
tRp4998
sa(dp4999
S'trial_loop.thisTrialN'
p5000
I96
sg3633
g4748
sS'block_loop.thisIndex'
p5001
g3627
sg38
S'left'
p5002
sg59
g63
sS'trial_loop.thisN'
p5003
I96
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p5004
g60
(g99
S'`\x00\x00\x00'
tRp5005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5006
I0
sg3642
g4755
sS'block_loop.thisRepN'
p5007
I1
sg3645
g3764
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5008
I1
sg3647
g3758
sg55
g11
sS'block_loop.thisTrial'
p5009
Nsg70
Vy
sS'block_loop.thisTrialN'
p5010
I0
sg39
F1.5331572564173257
sg34
g753
(S'\x07\xdf\x07\t\x15(\x01\n\xae`'
tRp5011
sa(dp5012
S'trial_loop.thisTrialN'
p5013
I97
sg3633
g4789
sS'block_loop.thisIndex'
p5014
g3627
sg38
S'left'
p5015
sg59
g63
sS'trial_loop.thisN'
p5016
I97
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p5017
g60
(g99
S'a\x00\x00\x00'
tRp5018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5019
I0
sg3642
g4796
sS'block_loop.thisRepN'
p5020
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5021
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p5022
Nsg70
Vy
sS'block_loop.thisTrialN'
p5023
I0
sg39
F0.81668214752426138
sg34
g753
(S'\x07\xdf\x07\t\x15(\x08\x04\x16\xe0'
tRp5024
sa(dp5025
S'trial_loop.thisTrialN'
p5026
I98
sg3633
g4049
sS'block_loop.thisIndex'
p5027
g3627
sg38
S'right'
p5028
sg59
g63
sS'trial_loop.thisN'
p5029
I98
sg33
g3957
sg64
g65
sS'trial_loop.thisIndex'
p5030
g60
(g99
S'b\x00\x00\x00'
tRp5031
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5032
I0
sg3642
g4056
sS'block_loop.thisRepN'
p5033
I1
sg3645
g3957
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5034
I1
sg3647
g3964
sg55
g11
sS'block_loop.thisTrial'
p5035
Nsg70
Vy
sS'block_loop.thisTrialN'
p5036
I0
sg39
F0.79957679958897643
sg34
g753
(S'\x07\xdf\x07\t\x15(\x0e\x01\xcc\xf0'
tRp5037
sa(dp5038
S'trial_loop.thisTrialN'
p5039
I99
sg3633
S'29-beans.png'
p5040
sS'block_loop.thisIndex'
p5041
g3627
sg38
S'left'
p5042
sg59
g63
sS'trial_loop.thisN'
p5043
I99
sg33
g4145
sg64
g65
sS'trial_loop.thisIndex'
p5044
g60
(g99
S'c\x00\x00\x00'
tRp5045
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5046
I0
sg3642
S'46-pistachios.png'
p5047
sS'block_loop.thisRepN'
p5048
I1
sg3645
g4145
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5049
I1
sg3647
g4152
sg55
g11
sS'block_loop.thisTrial'
p5050
Nsg70
Vy
sS'block_loop.thisTrialN'
p5051
I0
sg39
F0.83316227415343747
sg34
g753
(S'\x07\xdf\x07\t\x15(\x13\x0e\x86\xc0'
tRp5052
sa(dp5053
S'trial_loop.thisTrialN'
p5054
I100
sg3633
g3786
sS'block_loop.thisIndex'
p5055
g3627
sg38
S'left'
p5056
sg59
g63
sS'trial_loop.thisN'
p5057
I100
sg33
g3797
sg64
g65
sS'trial_loop.thisIndex'
p5058
g60
(g99
S'd\x00\x00\x00'
tRp5059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5060
I0
sg3642
g3794
sS'block_loop.thisRepN'
p5061
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5062
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5063
Nsg70
Vy
sS'block_loop.thisTrialN'
p5064
I0
sg39
F0.76666558328724932
sg34
g753
(S'\x07\xdf\x07\t\x15(\x19\x0c{P'
tRp5065
sa(dp5066
S'trial_loop.thisTrialN'
p5067
I101
sg3633
g4748
sS'block_loop.thisIndex'
p5068
g3627
sg38
S'left'
p5069
sg59
g63
sS'trial_loop.thisN'
p5070
I101
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p5071
g60
(g99
S'e\x00\x00\x00'
tRp5072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5073
I0
sg3642
g4755
sS'block_loop.thisRepN'
p5074
I1
sg3645
g3764
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5075
I1
sg3647
g3758
sg55
g11
sS'block_loop.thisTrial'
p5076
Nsg70
Vy
sS'block_loop.thisTrialN'
p5077
I0
sg39
F0.58367730483587366
sg34
g753
(S'\x07\xdf\x07\t\x15(\x1f\ty\xc8'
tRp5078
sa(dp5079
S'trial_loop.thisTrialN'
p5080
I102
sg3633
g3880
sS'block_loop.thisIndex'
p5081
g3627
sg38
S'left'
p5082
sg59
g63
sS'trial_loop.thisN'
p5083
I102
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p5084
g60
(g99
S'f\x00\x00\x00'
tRp5085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5086
I0
sg3642
g3888
sS'block_loop.thisRepN'
p5087
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5088
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p5089
Nsg70
Vy
sS'block_loop.thisTrialN'
p5090
I0
sg39
F0.35001046311663231
sg34
g753
(S'\x07\xdf\x07\t\x15(%\x03\x9d\xc8'
tRp5091
sa(dp5092
S'trial_loop.thisTrialN'
p5093
I103
sg3633
g4242
sS'block_loop.thisIndex'
p5094
g3627
sg38
S'left'
p5095
sg59
g63
sS'trial_loop.thisN'
p5096
I103
sg33
g4085
sg64
g65
sS'trial_loop.thisIndex'
p5097
g60
(g99
S'g\x00\x00\x00'
tRp5098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5099
I0
sg3642
g4249
sS'block_loop.thisRepN'
p5100
I1
sg3645
g4085
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5101
I1
sg3647
g4092
sg55
g11
sS'block_loop.thisTrial'
p5102
Nsg70
Vy
sS'block_loop.thisTrialN'
p5103
I0
sg39
F0.63333635537856026
sg34
g753
(S'\x07\xdf\x07\t\x15(*\tq\xf8'
tRp5104
sa(dp5105
S'trial_loop.thisTrialN'
p5106
I104
sg3633
g3771
sS'block_loop.thisIndex'
p5107
g3627
sg38
S'left'
p5108
sg59
g63
sS'trial_loop.thisN'
p5109
I104
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5110
g60
(g99
S'h\x00\x00\x00'
tRp5111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5112
I0
sg3642
g3778
sS'block_loop.thisRepN'
p5113
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5114
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5115
Nsg70
Vy
sS'block_loop.thisTrialN'
p5116
I0
sg39
F0.81651450952631421
sg34
g753
(S'\x07\xdf\x07\t\x15(0\x04M\x90'
tRp5117
sa(dp5118
S'trial_loop.thisTrialN'
p5119
I105
sg3633
g4960
sS'block_loop.thisIndex'
p5120
g3627
sg38
S'right'
p5121
sg59
g63
sS'trial_loop.thisN'
p5122
I105
sg33
g3707
sg64
g65
sS'trial_loop.thisIndex'
p5123
g60
(g99
S'i\x00\x00\x00'
tRp5124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5125
I0
sg3642
g4967
sS'block_loop.thisRepN'
p5126
I1
sg3645
g3707
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5127
I1
sg3647
g3714
sg55
g11
sS'block_loop.thisTrial'
p5128
Nsg70
Vy
sS'block_loop.thisTrialN'
p5129
I0
sg39
F0.61651781667023897
sg34
g753
(S'\x07\xdf\x07\t\x15(6\x02\x03\xa0'
tRp5130
sa(dp5131
S'trial_loop.thisTrialN'
p5132
I106
sg3633
g3987
sS'block_loop.thisIndex'
p5133
g3627
sg38
S'left'
p5134
sg59
g63
sS'trial_loop.thisN'
p5135
I106
sg33
g3997
sg64
g65
sS'trial_loop.thisIndex'
p5136
g60
(g99
S'j\x00\x00\x00'
tRp5137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5138
I0
sg3642
g3995
sS'block_loop.thisRepN'
p5139
I1
sg3645
g3997
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5140
I1
sg3647
g3991
sg55
g11
sS'block_loop.thisTrial'
p5141
Nsg70
Vy
sS'block_loop.thisTrialN'
p5142
I0
sg39
F0.033204867882886901
sg34
g753
(S'\x07\xdf\x07\t\x15(;\x0b\xe2\xf8'
tRp5143
sa(dp5144
S'trial_loop.thisTrialN'
p5145
I107
sg3633
g3688
sS'block_loop.thisIndex'
p5146
g3627
sg38
S'left'
p5147
sg59
g63
sS'trial_loop.thisN'
p5148
I107
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5149
g60
(g99
S'k\x00\x00\x00'
tRp5150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5151
I0
sg3642
g3695
sS'block_loop.thisRepN'
p5152
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5153
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5154
Nsg70
Vy
sS'block_loop.thisTrialN'
p5155
I0
sg39
F1.6831368148486945
sg34
g753
(S'\x07\xdf\x07\t\x15)\x04\x0c\xf4h'
tRp5156
sa(dp5157
S'trial_loop.thisTrialN'
p5158
I108
sg3633
g3880
sS'block_loop.thisIndex'
p5159
g3627
sg38
S'left'
p5160
sg59
g63
sS'trial_loop.thisN'
p5161
I108
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p5162
g60
(g99
S'l\x00\x00\x00'
tRp5163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5164
I0
sg3642
g3888
sS'block_loop.thisRepN'
p5165
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5166
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p5167
Nsg70
Vy
sS'block_loop.thisTrialN'
p5168
I0
sg39
F1.4831811761905556
sg34
g753
(S'\x07\xdf\x07\t\x15)\x0b\x08\xbeH'
tRp5169
sa(dp5170
S'trial_loop.thisTrialN'
p5171
I109
sg3633
g3688
sS'block_loop.thisIndex'
p5172
g3627
sg38
S'left'
p5173
sg59
g63
sS'trial_loop.thisN'
p5174
I109
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5175
g60
(g99
S'm\x00\x00\x00'
tRp5176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5177
I0
sg3642
g3695
sS'block_loop.thisRepN'
p5178
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5179
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5180
Nsg70
Vy
sS'block_loop.thisTrialN'
p5181
I0
sg39
F0.44979612596216612
sg34
g753
(S'\x07\xdf\x07\t\x15)\x12\x010\xb0'
tRp5182
sa(dp5183
S'trial_loop.thisTrialN'
p5184
I110
sg3633
g4242
sS'block_loop.thisIndex'
p5185
g3627
sg38
S'right'
p5186
sg59
g63
sS'trial_loop.thisN'
p5187
I110
sg33
g4085
sg64
g65
sS'trial_loop.thisIndex'
p5188
g60
(g99
S'n\x00\x00\x00'
tRp5189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5190
I0
sg3642
g4249
sS'block_loop.thisRepN'
p5191
I1
sg3645
g4085
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5192
I1
sg3647
g4092
sg55
g11
sS'block_loop.thisTrial'
p5193
Nsg70
Vy
sS'block_loop.thisTrialN'
p5194
I0
sg39
F0.63358296570368111
sg34
g753
(S'\x07\xdf\x07\t\x15)\x17\x08\xae\xa8'
tRp5195
sa(dp5196
S'trial_loop.thisTrialN'
p5197
I111
sg3633
g5040
sS'block_loop.thisIndex'
p5198
g3627
sg38
S'left'
p5199
sg59
g63
sS'trial_loop.thisN'
p5200
I111
sg33
g4145
sg64
g65
sS'trial_loop.thisIndex'
p5201
g60
(g99
S'o\x00\x00\x00'
tRp5202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5203
I0
sg3642
g5047
sS'block_loop.thisRepN'
p5204
I1
sg3645
g4145
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5205
I1
sg3647
g4152
sg55
g11
sS'block_loop.thisTrial'
p5206
Nsg70
Vy
sS'block_loop.thisTrialN'
p5207
I0
sg39
F1.0665240603339043
sg34
g753
(S'\x07\xdf\x07\t\x15)\x1d\x03\x8a@'
tRp5208
sa(dp5209
S'trial_loop.thisTrialN'
p5210
I112
sg3633
g4960
sS'block_loop.thisIndex'
p5211
g3627
sg38
S'right'
p5212
sg59
g63
sS'trial_loop.thisN'
p5213
I112
sg33
g3714
sg64
g65
sS'trial_loop.thisIndex'
p5214
g60
(g99
S'p\x00\x00\x00'
tRp5215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5216
I0
sg3642
g4967
sS'block_loop.thisRepN'
p5217
I1
sg3645
g3707
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5218
I1
sg3647
g3714
sg55
g11
sS'block_loop.thisTrial'
p5219
Nsg70
Vy
sS'block_loop.thisTrialN'
p5220
I0
sg39
F0.59977454399631824
sg34
g753
(S'\x07\xdf\x07\t\x15)#\x05\x10\xe0'
tRp5221
sa(dp5222
S'trial_loop.thisTrialN'
p5223
I113
sg3633
g3987
sS'block_loop.thisIndex'
p5224
g3627
sg38
S'left'
p5225
sg59
g63
sS'trial_loop.thisN'
p5226
I113
sg33
g3997
sg64
g65
sS'trial_loop.thisIndex'
p5227
g60
(g99
S'q\x00\x00\x00'
tRp5228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5229
I0
sg3642
g3995
sS'block_loop.thisRepN'
p5230
I1
sg3645
g3997
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5231
I1
sg3647
g3991
sg55
g11
sS'block_loop.thisTrial'
p5232
Nsg70
Vy
sS'block_loop.thisTrialN'
p5233
I0
sg39
F1.1998413140972843
sg34
g753
(S'\x07\xdf\x07\t\x15)(\x0e\xb1\xb8'
tRp5234
sa(dp5235
S'trial_loop.thisTrialN'
p5236
I114
sg3633
g4445
sS'block_loop.thisIndex'
p5237
g3627
sg38
S'right'
p5238
sg59
g63
sS'trial_loop.thisN'
p5239
I114
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p5240
g60
(g99
S'r\x00\x00\x00'
tRp5241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5242
I0
sg3642
g4452
sS'block_loop.thisRepN'
p5243
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5244
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p5245
Nsg70
Vy
sS'block_loop.thisTrialN'
p5246
I0
sg39
F0.84985052278352669
sg34
g753
(S'\x07\xdf\x07\t\x15)/\x03\x18\xf8'
tRp5247
sa(dp5248
S'trial_loop.thisTrialN'
p5249
I115
sg3633
g3671
sS'block_loop.thisIndex'
p5250
g3627
sg38
S'right'
p5251
sg59
g63
sS'trial_loop.thisN'
p5252
I115
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p5253
g60
(g99
S's\x00\x00\x00'
tRp5254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5255
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5256
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5257
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5258
Nsg70
Vy
sS'block_loop.thisTrialN'
p5259
I0
sg39
F0.23321096900326665
sg34
g753
(S'\x07\xdf\x07\t\x15)5\x01L\x08'
tRp5260
sa(dp5261
S'trial_loop.thisTrialN'
p5262
I116
sg3633
g4324
sS'block_loop.thisIndex'
p5263
g3627
sg38
S'right'
p5264
sg59
g63
sS'trial_loop.thisN'
p5265
I116
sg33
g3907
sg64
g65
sS'trial_loop.thisIndex'
p5266
g60
(g99
S't\x00\x00\x00'
tRp5267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5268
I0
sg3642
g4331
sS'block_loop.thisRepN'
p5269
I1
sg3645
g3907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5270
I1
sg3647
g3901
sg55
g11
sS'block_loop.thisTrial'
p5271
Nsg70
Vy
sS'block_loop.thisTrialN'
p5272
I0
sg39
F0.46649492324650055
sg34
g753
(S'\x07\xdf\x07\t\x15):\x057\xf0'
tRp5273
sa(dp5274
S'trial_loop.thisTrialN'
p5275
I117
sg3633
g3671
sS'block_loop.thisIndex'
p5276
g3627
sg38
S'right'
p5277
sg59
g63
sS'trial_loop.thisN'
p5278
I117
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5279
g60
(g99
S'u\x00\x00\x00'
tRp5280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5281
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5282
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5283
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5284
Nsg70
Vy
sS'block_loop.thisTrialN'
p5285
I0
sg39
F0.93316945863625733
sg34
g753
(S'\x07\xdf\x07\t\x15*\x03\x0c\xf4h'
tRp5286
sa(dp5287
S'trial_loop.thisTrialN'
p5288
I118
sg3633
g4789
sS'block_loop.thisIndex'
p5289
g3627
sg38
S'right'
p5290
sg59
g63
sS'trial_loop.thisN'
p5291
I118
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p5292
g60
(g99
S'v\x00\x00\x00'
tRp5293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5294
I0
sg3642
g4796
sS'block_loop.thisRepN'
p5295
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5296
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p5297
Nsg70
Vy
sS'block_loop.thisTrialN'
p5298
I0
sg39
F0.3831939486117335
sg34
g753
(S'\x07\xdf\x07\t\x15*\t\x0cT@'
tRp5299
sa(dp5300
S'trial_loop.thisTrialN'
p5301
I119
sg3633
g3850
sS'block_loop.thisIndex'
p5302
g3627
sg38
S'right'
p5303
sg59
g63
sS'trial_loop.thisN'
p5304
I119
sg33
g3860
sg64
g65
sS'trial_loop.thisIndex'
p5305
g60
(g99
S'w\x00\x00\x00'
tRp5306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5307
I0
sg3642
g3858
sS'block_loop.thisRepN'
p5308
I1
sg3645
g3860
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5309
I1
sg3647
g3854
sg55
g11
sS'block_loop.thisTrial'
p5310
Nsg70
Vy
sS'block_loop.thisTrialN'
p5311
I0
sg39
F0.4165513442712836
sg34
g753
(S'\x07\xdf\x07\t\x15*\x0f\x03\x9d\xc8'
tRp5312
sa(dp5313
S'trial_loop.thisTrialN'
p5314
I120
sg3633
g3771
sS'block_loop.thisIndex'
p5315
g3627
sg38
S'right'
p5316
sg59
g63
sS'trial_loop.thisN'
p5317
I120
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5318
g60
(g99
S'x\x00\x00\x00'
tRp5319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5320
I0
sg3642
g3778
sS'block_loop.thisRepN'
p5321
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5322
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5323
Nsg70
Vy
sS'block_loop.thisTrialN'
p5324
I0
sg39
F0.68307380804617424
sg34
g753
(S'\x07\xdf\x07\t\x15*\x14\nd('
tRp5325
sa(dp5326
S'trial_loop.thisTrialN'
p5327
I121
sg3633
g4270
sS'block_loop.thisIndex'
p5328
g3627
sg38
S'left'
p5329
sg59
g63
sS'trial_loop.thisN'
p5330
I121
sg33
g4068
sg64
g65
sS'trial_loop.thisIndex'
p5331
g60
(g99
S'y\x00\x00\x00'
tRp5332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5333
I0
sg3642
g4277
sS'block_loop.thisRepN'
p5334
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5335
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p5336
Nsg70
Vy
sS'block_loop.thisTrialN'
p5337
I0
sg39
F1.5498132889042608
sg34
g753
(S'\x07\xdf\x07\t\x15*\x1a\x05\xf7X'
tRp5338
sa(dp5339
S'trial_loop.thisTrialN'
p5340
I122
sg3633
g4324
sS'block_loop.thisIndex'
p5341
g3627
sg38
S'right'
p5342
sg59
g63
sS'trial_loop.thisN'
p5343
I122
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p5344
g60
(g99
S'z\x00\x00\x00'
tRp5345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5346
I0
sg3642
g4331
sS'block_loop.thisRepN'
p5347
I1
sg3645
g3907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5348
I1
sg3647
g3901
sg55
g11
sS'block_loop.thisTrial'
p5349
Nsg70
Vy
sS'block_loop.thisTrialN'
p5350
I0
sg39
F0.19988065771030961
sg34
g753
(S'\x07\xdf\x07\t\x15* \x0e\xdc\xb0'
tRp5351
sa(dp5352
S'trial_loop.thisTrialN'
p5353
I123
sg3633
g3833
sS'block_loop.thisIndex'
p5354
g3627
sg38
S'right'
p5355
sg59
g63
sS'trial_loop.thisN'
p5356
I123
sg33
g3843
sg64
g65
sS'trial_loop.thisIndex'
p5357
g60
(g99
S'{\x00\x00\x00'
tRp5358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5359
I0
sg3642
g3841
sS'block_loop.thisRepN'
p5360
I1
sg3645
g3843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5361
I1
sg3647
g3837
sg55
g11
sS'block_loop.thisTrial'
p5362
Nsg70
Vy
sS'block_loop.thisTrialN'
p5363
I0
sg39
F0.06653860036021797
sg34
g753
(S'\x07\xdf\x07\t\x15*&\x03G\xd8'
tRp5364
sa(dp5365
S'trial_loop.thisTrialN'
p5366
I124
sg3633
g3953
sS'block_loop.thisIndex'
p5367
g3627
sg38
S'left'
p5368
sg59
g63
sS'trial_loop.thisN'
p5369
I124
sg33
g3957
sg64
g65
sS'trial_loop.thisIndex'
p5370
g60
(g99
S'|\x00\x00\x00'
tRp5371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5372
I0
sg3642
g3961
sS'block_loop.thisRepN'
p5373
I1
sg3645
g3957
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5374
I1
sg3647
g3964
sg55
g11
sS'block_loop.thisTrial'
p5375
Nsg70
Vy
sS'block_loop.thisTrialN'
p5376
I0
sg39
F0.29961671338969609
sg34
g753
(S'\x07\xdf\x07\t\x15*+\x04\xd6H'
tRp5377
sa(dp5378
S'trial_loop.thisTrialN'
p5379
I125
sg3633
g3970
sS'block_loop.thisIndex'
p5380
g3627
sg38
S'left'
p5381
sg59
g63
sS'trial_loop.thisN'
p5382
I125
sg33
g3980
sg64
g65
sS'trial_loop.thisIndex'
p5383
g60
(g99
S'}\x00\x00\x00'
tRp5384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5385
I0
sg3642
g3978
sS'block_loop.thisRepN'
p5386
I1
sg3645
g3980
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5387
I1
sg3647
g3974
sg55
g11
sS'block_loop.thisTrial'
p5388
Nsg70
Vy
sS'block_loop.thisTrialN'
p5389
I0
sg39
F0.71652443095808849
sg34
g753
(S'\x07\xdf\x07\t\x15*0\t\xf2\xe0'
tRp5390
sa(dp5391
S'trial_loop.thisTrialN'
p5392
I126
sg3633
g3737
sS'block_loop.thisIndex'
p5393
g3627
sg38
S'left'
p5394
sg59
g63
sS'trial_loop.thisN'
p5395
I126
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p5396
g60
(g99
S'~\x00\x00\x00'
tRp5397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5398
I0
sg3642
g3745
sS'block_loop.thisRepN'
p5399
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5400
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p5401
Nsg70
Vy
sS'block_loop.thisTrialN'
p5402
I0
sg39
F0.53333401756390231
sg34
g753
(S'\x07\xdf\x07\t\x15*6\x05\xff('
tRp5403
sa(dp5404
S'trial_loop.thisTrialN'
p5405
I127
sg3633
g3970
sS'block_loop.thisIndex'
p5406
g3627
sg38
S'right'
p5407
sg59
g63
sS'trial_loop.thisN'
p5408
I127
sg33
g3980
sg64
g65
sS'trial_loop.thisIndex'
p5409
g60
(g99
S'\x7f\x00\x00\x00'
tRp5410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5411
I0
sg3642
g3978
sS'block_loop.thisRepN'
p5412
I1
sg3645
g3980
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5413
I1
sg3647
g3974
sg55
g11
sS'block_loop.thisTrial'
p5414
Nsg70
Vy
sS'block_loop.thisTrialN'
p5415
I0
sg39
F1.3166741647582967
sg34
g753
(S'\x07\xdf\x07\t\x15*;\x0e\xad\xd0'
tRp5416
sa(dp5417
S'trial_loop.thisTrialN'
p5418
I128
sg3633
g3654
sS'block_loop.thisIndex'
p5419
g3627
sg38
S'right'
p5420
sg59
g63
sS'trial_loop.thisN'
p5421
I128
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5422
g60
(g99
S'\x80\x00\x00\x00'
tRp5423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5424
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5425
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5426
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5427
Nsg70
Vy
sS'block_loop.thisTrialN'
p5428
I0
sg39
F0.73369877276854822
sg34
g753
(S'\x07\xdf\x07\t\x15+\x06\x04\xbe\xd8'
tRp5429
sa(dp5430
S'trial_loop.thisTrialN'
p5431
I129
sg3633
g3850
sS'block_loop.thisIndex'
p5432
g3627
sg38
S'left'
p5433
sg59
g63
sS'trial_loop.thisN'
p5434
I129
sg33
g3860
sg64
g65
sS'trial_loop.thisIndex'
p5435
g60
(g99
S'\x81\x00\x00\x00'
tRp5436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5437
I0
sg3642
g3858
sS'block_loop.thisRepN'
p5438
I1
sg3645
g3860
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5439
I1
sg3647
g3854
sg55
g11
sS'block_loop.thisTrial'
p5440
Nsg70
Vy
sS'block_loop.thisTrialN'
p5441
I0
sg39
F0.93326040510874009
sg34
g753
(S'\x07\xdf\x07\t\x15+\x0c\x01D8'
tRp5442
sa(dp5443
S'trial_loop.thisTrialN'
p5444
I130
sg3633
g3703
sS'block_loop.thisIndex'
p5445
g3627
sg38
S'right'
p5446
sg59
g63
sS'trial_loop.thisN'
p5447
I130
sg33
g3707
sg64
g65
sS'trial_loop.thisIndex'
p5448
g60
(g99
S'\x82\x00\x00\x00'
tRp5449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5450
I0
sg3642
g3711
sS'block_loop.thisRepN'
p5451
I1
sg3645
g3707
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5452
I1
sg3647
g3714
sg55
g11
sS'block_loop.thisTrial'
p5453
Nsg70
Vy
sS'block_loop.thisTrialN'
p5454
I0
sg39
F0.083320361343794502
sg34
g753
(S'\x07\xdf\x07\t\x15+\x12\x00\xa4\x10'
tRp5455
sa(dp5456
S'trial_loop.thisTrialN'
p5457
I131
sg3633
g4141
sS'block_loop.thisIndex'
p5458
g3627
sg38
S'right'
p5459
sg59
g63
sS'trial_loop.thisN'
p5460
I131
sg33
g4145
sg64
g65
sS'trial_loop.thisIndex'
p5461
g60
(g99
S'\x83\x00\x00\x00'
tRp5462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5463
I0
sg3642
g4149
sS'block_loop.thisRepN'
p5464
I1
sg3645
g4145
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5465
I1
sg3647
g4152
sg55
g11
sS'block_loop.thisTrial'
p5466
Nsg70
Vy
sS'block_loop.thisTrialN'
p5467
I0
sg39
F0.73363576596602798
sg34
g753
(S'\x07\xdf\x07\t\x15+\x17\x02m\x18'
tRp5468
sa(dp5469
S'trial_loop.thisTrialN'
p5470
I132
sg3633
g4378
sS'block_loop.thisIndex'
p5471
g3627
sg38
S'left'
p5472
sg59
g63
sS'trial_loop.thisN'
p5473
I132
sg33
g3980
sg64
g65
sS'trial_loop.thisIndex'
p5474
g60
(g99
S'\x84\x00\x00\x00'
tRp5475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5476
I0
sg3642
g4385
sS'block_loop.thisRepN'
p5477
I1
sg3645
g3980
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5478
I1
sg3647
g3974
sg55
g11
sS'block_loop.thisTrial'
p5479
Nsg70
Vy
sS'block_loop.thisTrialN'
p5480
I0
sg39
F1.3165179307106882
sg34
g753
(S'\x07\xdf\x07\t\x15+\x1c\x0e4\xb8'
tRp5481
sa(dp5482
S'trial_loop.thisTrialN'
p5483
I133
sg3633
g4158
sS'block_loop.thisIndex'
p5484
g3627
sg38
S'right'
p5485
sg59
g63
sS'trial_loop.thisN'
p5486
I133
sg33
g4008
sg64
g65
sS'trial_loop.thisIndex'
p5487
g60
(g99
S'\x85\x00\x00\x00'
tRp5488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5489
I0
sg3642
g4165
sS'block_loop.thisRepN'
p5490
I1
sg3645
g4008
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5491
I1
sg3647
g4015
sg55
g11
sS'block_loop.thisTrial'
p5492
Nsg70
Vy
sS'block_loop.thisTrialN'
p5493
I0
sg39
F0.56652349013165804
sg34
g753
(S'\x07\xdf\x07\t\x15+#\x04E\xc0'
tRp5494
sa(dp5495
S'trial_loop.thisTrialN'
p5496
I134
sg3633
g4445
sS'block_loop.thisIndex'
p5497
g3627
sg38
S'right'
p5498
sg59
g63
sS'trial_loop.thisN'
p5499
I134
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p5500
g60
(g99
S'\x86\x00\x00\x00'
tRp5501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5502
I0
sg3642
g4452
sS'block_loop.thisRepN'
p5503
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5504
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p5505
Nsg70
Vy
sS'block_loop.thisTrialN'
p5506
I0
sg39
F0.83317367809650023
sg34
g753
(S'\x07\xdf\x07\t\x15+(\rqh'
tRp5507
sa(dp5508
S'trial_loop.thisTrialN'
p5509
I135
sg3633
g4021
sS'block_loop.thisIndex'
p5510
g3627
sg38
S'right'
p5511
sg59
g63
sS'trial_loop.thisN'
p5512
I135
sg33
g3813
sg64
g65
sS'trial_loop.thisIndex'
p5513
g60
(g99
S'\x87\x00\x00\x00'
tRp5514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5515
I0
sg3642
g4028
sS'block_loop.thisRepN'
p5516
I1
sg3645
g3813
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5517
I1
sg3647
g3807
sg55
g11
sS'block_loop.thisTrial'
p5518
Nsg70
Vy
sS'block_loop.thisTrialN'
p5519
I0
sg39
F1.5164898199800518
sg34
g753
(S'\x07\xdf\x07\t\x15+.\x0bb\x10'
tRp5520
sa(dp5521
S'trial_loop.thisTrialN'
p5522
I136
sg3633
g4186
sS'block_loop.thisIndex'
p5523
g3627
sg38
S'right'
p5524
sg59
g63
sS'trial_loop.thisN'
p5525
I136
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p5526
g60
(g99
S'\x88\x00\x00\x00'
tRp5527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5528
I0
sg3642
g4193
sS'block_loop.thisRepN'
p5529
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5530
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5531
Nsg70
Vy
sS'block_loop.thisTrialN'
p5532
I0
sg39
F0.71658800795557909
sg34
g753
(S'\x07\xdf\x07\t\x15+5\x04\x8c\x10'
tRp5533
sa(dp5534
S'trial_loop.thisTrialN'
p5535
I137
sg3633
g3803
sS'block_loop.thisIndex'
p5536
g3627
sg38
S'left'
p5537
sg59
g63
sS'trial_loop.thisN'
p5538
I137
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p5539
g60
(g99
S'\x89\x00\x00\x00'
tRp5540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5541
I0
sg3642
g3811
sS'block_loop.thisRepN'
p5542
I1
sg3645
g3813
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5543
I1
sg3647
g3807
sg55
g11
sS'block_loop.thisTrial'
p5544
Nsg70
Vy
sS'block_loop.thisTrialN'
p5545
I0
sg39
F0.84998822542547714
sg34
g753
(S'\x07\xdf\x07\t\x15+;\x00\xd6\xd8'
tRp5546
sa(dp5547
S'trial_loop.thisTrialN'
p5548
I138
sg3633
g3850
sS'block_loop.thisIndex'
p5549
g3627
sg38
S'left'
p5550
sg59
g63
sS'trial_loop.thisN'
p5551
I138
sg33
g3860
sg64
g65
sS'trial_loop.thisIndex'
p5552
g60
(g99
S'\x8a\x00\x00\x00'
tRp5553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5554
I0
sg3642
g3858
sS'block_loop.thisRepN'
p5555
I1
sg3645
g3860
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5556
I1
sg3647
g3854
sg55
g11
sS'block_loop.thisTrial'
p5557
Nsg70
Vy
sS'block_loop.thisTrialN'
p5558
I0
sg39
F0.88334932737052441
sg34
g753
(S'\x07\xdf\x07\t\x15,\x04\x0eH@'
tRp5559
sa(dp5560
S'trial_loop.thisTrialN'
p5561
I139
sg3633
g4378
sS'block_loop.thisIndex'
p5562
g3627
sg38
S'left'
p5563
sg59
g63
sS'trial_loop.thisN'
p5564
I139
sg33
g3980
sg64
g65
sS'trial_loop.thisIndex'
p5565
g60
(g99
S'\x8b\x00\x00\x00'
tRp5566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5567
I0
sg3642
g4385
sS'block_loop.thisRepN'
p5568
I1
sg3645
g3980
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5569
I1
sg3647
g3974
sg55
g11
sS'block_loop.thisTrial'
p5570
Nsg70
Vy
sS'block_loop.thisTrialN'
p5571
I0
sg39
F0.63371468126570107
sg34
g753
(S'\x07\xdf\x07\t\x15,\n\x0c\xf0\x80'
tRp5572
sa(dp5573
S'trial_loop.thisTrialN'
p5574
I140
sg3633
g3953
sS'block_loop.thisIndex'
p5575
g3627
sg38
S'left'
p5576
sg59
g63
sS'trial_loop.thisN'
p5577
I140
sg33
g3957
sg64
g65
sS'trial_loop.thisIndex'
p5578
g60
(g99
S'\x8c\x00\x00\x00'
tRp5579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5580
I0
sg3642
g3961
sS'block_loop.thisRepN'
p5581
I1
sg3645
g3957
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5582
I1
sg3647
g3964
sg55
g11
sS'block_loop.thisTrial'
p5583
Nsg70
Vy
sS'block_loop.thisTrialN'
p5584
I0
sg39
F0.59969043989985948
sg34
g753
(S'\x07\xdf\x07\t\x15,\x10\x07\xcc\x18'
tRp5585
sa(dp5586
S'trial_loop.thisTrialN'
p5587
I141
sg3633
S'40-sardines.png'
p5588
sS'block_loop.thisIndex'
p5589
g3627
sg38
S'left'
p5590
sg59
g63
sS'trial_loop.thisN'
p5591
I141
sg33
g3860
sg64
g65
sS'trial_loop.thisIndex'
p5592
g60
(g99
S'\x8d\x00\x00\x00'
tRp5593
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5594
I0
sg3642
S'5-pineapple.png'
p5595
sS'block_loop.thisRepN'
p5596
I1
sg3645
g3860
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5597
I1
sg3647
g3854
sg55
g11
sS'block_loop.thisTrial'
p5598
Nsg70
Vy
sS'block_loop.thisTrialN'
p5599
I0
sg39
F0.74998417702590814
sg34
g753
(S'\x07\xdf\x07\t\x15,\x16\x02.\x98'
tRp5600
sa(dp5601
S'trial_loop.thisTrialN'
p5602
I142
sg3633
g3833
sS'block_loop.thisIndex'
p5603
g3627
sg38
S'left'
p5604
sg59
g63
sS'trial_loop.thisN'
p5605
I142
sg33
g3843
sg64
g65
sS'trial_loop.thisIndex'
p5606
g60
(g99
S'\x8e\x00\x00\x00'
tRp5607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5608
I0
sg3642
g3841
sS'block_loop.thisRepN'
p5609
I1
sg3645
g3843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5610
I1
sg3647
g3837
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vy
sS'block_loop.thisTrialN'
p5612
I0
sg39
F0.33334530747379176
sg34
g753
(S'\x07\xdf\x07\t\x15,\x1b\x0e0\xd0'
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g4378
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'left'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g3980
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g4385
sS'block_loop.thisRepN'
p5622
I1
sg3645
g3980
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5623
I1
sg3647
g3974
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vy
sS'block_loop.thisTrialN'
p5625
I0
sg39
F0.54997436963458313
sg34
g753
(S'\x07\xdf\x07\t\x15,!\x04\x88('
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g4227
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'left'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g3991
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g4234
sS'block_loop.thisRepN'
p5635
I1
sg3645
g3997
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5636
I1
sg3647
g3991
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vy
sS'block_loop.thisTrialN'
p5638
I0
sg39
F0.3000101495126728
sg34
g753
(S'\x07\xdf\x07\t\x15,&\ruP'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g4694
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'right'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g3731
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g4701
sS'block_loop.thisRepN'
p5648
I1
sg3645
g3724
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5649
I1
sg3647
g3731
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vy
sS'block_loop.thisTrialN'
p5651
I0
sg39
F0.16703843529103324
sg34
g753
(S'\x07\xdf\x07\t\x15,,\x03O\xa8'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g4227
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'right'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g3997
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g4234
sS'block_loop.thisRepN'
p5661
I1
sg3645
g3997
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5662
I1
sg3647
g3991
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vy
sS'block_loop.thisTrialN'
p5664
I0
sg39
F0.9665670532049262
sg34
g753
(S'\x07\xdf\x07\t\x15,1\x06I`'
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g4324
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'left'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g3907
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g4331
sS'block_loop.thisRepN'
p5674
I1
sg3645
g3907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5675
I1
sg3647
g3901
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vy
sS'block_loop.thisTrialN'
p5677
I0
sg39
F0.61658795093535446
sg34
g753
(S'\x07\xdf\x07\t\x15,7\x06`\xd0'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g3771
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'right'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g3778
sS'block_loop.thisRepN'
p5687
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5688
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vy
sS'block_loop.thisTrialN'
p5690
I0
sg39
F0.74981311785086291
sg34
g753
(S'\x07\xdf\x07\t\x15-\x01\x00\xfd\xe8'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g3970
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'right'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g3980
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g3978
sS'block_loop.thisRepN'
p5700
I1
sg3645
g3980
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5701
I1
sg3647
g3974
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vy
sS'block_loop.thisTrialN'
p5703
I0
sg39
F0.74992060002841754
sg34
g753
(S'\x07\xdf\x07\t\x15-\x06\r\x04\x08'
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g3720
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'left'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g3724
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g3728
sS'block_loop.thisRepN'
p5713
I1
sg3645
g3724
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5714
I1
sg3647
g3731
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vy
sS'block_loop.thisTrialN'
p5716
I0
sg39
F0.71660083739698166
sg34
g753
(S'\x07\xdf\x07\t\x15-\x0c\t\x89h'
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g4049
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'left'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g3957
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g4056
sS'block_loop.thisRepN'
p5726
I1
sg3645
g3957
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5727
I1
sg3647
g3964
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vy
sS'block_loop.thisTrialN'
p5729
I0
sg39
F0.56675071374775143
sg34
g753
(S'\x07\xdf\x07\t\x15-\x12\x05\xd0H'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g4324
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'left'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g3907
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g4331
sS'block_loop.thisRepN'
p5739
I1
sg3645
g3907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5740
I1
sg3647
g3901
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vy
sS'block_loop.thisTrialN'
p5742
I0
sg39
F1.2332691291230731
sg34
g753
(S'\x07\xdf\x07\t\x15-\x17\x0e\xf8\x08'
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g4049
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'right'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g3964
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g4056
sS'block_loop.thisRepN'
p5752
I1
sg3645
g3957
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5753
I1
sg3647
g3964
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vy
sS'block_loop.thisTrialN'
p5755
I0
sg39
F0.79965178052225383
sg34
g753
(S'\x07\xdf\x07\t\x15-\x1e\x03\xdcH'
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g5588
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'left'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g3860
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g5595
sS'block_loop.thisRepN'
p5765
I1
sg3645
g3860
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5766
I1
sg3647
g3854
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vy
sS'block_loop.thisTrialN'
p5768
I0
sg39
F0.8333148019228247
sg34
g753
(S'\x07\xdf\x07\t\x15-$\x01S\xd8'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g4186
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'right'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g3797
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g4193
sS'block_loop.thisRepN'
p5778
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5779
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vy
sS'block_loop.thisTrialN'
p5781
I0
sg39
F0.63324141752673313
sg34
g753
(S'\x07\xdf\x07\t\x15-)\x0e\x8a\xa8'
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g4081
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'left'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g4085
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g4089
sS'block_loop.thisRepN'
p5791
I1
sg3645
g4085
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5792
I1
sg3647
g4092
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vy
sS'block_loop.thisTrialN'
p5794
I0
sg39
F0.63337712448992534
sg34
g753
(S'\x07\xdf\x07\t\x15-/\tbX'
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g5588
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'right'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g3860
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g5595
sS'block_loop.thisRepN'
p5804
I1
sg3645
g3860
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5805
I1
sg3647
g3854
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vy
sS'block_loop.thisTrialN'
p5807
I0
sg39
F0.80034571060241433
sg34
g753
(S'\x07\xdf\x07\t\x15-5\x04=\xf0'
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g5040
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'left'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g4152
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g5047
sS'block_loop.thisRepN'
p5817
I1
sg3645
g4145
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5818
I1
sg3647
g4152
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vy
sS'block_loop.thisTrialN'
p5820
I0
sg39
F0.89992439184425166
sg34
g753
(S'\x07\xdf\x07\t\x15-;\x01\xb9h'
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g4186
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'right'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g4193
sS'block_loop.thisRepN'
p5830
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5831
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vy
sS'block_loop.thisTrialN'
p5833
I0
sg39
F0.69974609115161002
sg34
g753
(S'\x07\xdf\x07\t\x15.\x05\x00\xa0('
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g3754
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'right'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g3764
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g3762
sS'block_loop.thisRepN'
p5843
I1
sg3645
g3764
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5844
I1
sg3647
g3758
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vy
sS'block_loop.thisTrialN'
p5846
I0
sg39
F0.68324771821062313
sg34
g753
(S'\x07\xdf\x07\t\x15.\n\x0b\xea\xc8'
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g4004
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'left'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g4008
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g4012
sS'block_loop.thisRepN'
p5856
I1
sg3645
g4008
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5857
I1
sg3647
g4015
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vy
sS'block_loop.thisTrialN'
p5859
I0
sg39
F1.2332477467207354
sg34
g753
(S'\x07\xdf\x07\t\x15.\x10\x07}\xf8'
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g3634
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'left'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5869
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5870
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vy
sS'block_loop.thisTrialN'
p5872
I0
sg39
F0.64976658974774182
sg34
g753
(S'\x07\xdf\x07\t\x15.\x16\x0b\xa0\x90'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g4748
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'left'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g3764
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g4755
sS'block_loop.thisRepN'
p5882
I1
sg3645
g3764
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5883
I1
sg3647
g3758
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vy
sS'block_loop.thisTrialN'
p5885
I0
sg39
F0.61706634644360747
sg34
g753
(S'\x07\xdf\x07\t\x15.\x1c\x06\xba\xa8'
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g3953
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'left'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g3957
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g3961
sS'block_loop.thisRepN'
p5895
I1
sg3645
g3957
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5896
I1
sg3647
g3964
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vy
sS'block_loop.thisTrialN'
p5898
I0
sg39
F0.61640292191441404
sg34
g753
(S'\x07\xdf\x07\t\x15."\x01\x96@'
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g4694
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'right'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g3724
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g4701
sS'block_loop.thisRepN'
p5908
I1
sg3645
g3724
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5909
I1
sg3647
g3731
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vy
sS'block_loop.thisTrialN'
p5911
I0
sg39
F0.64999751964205643
sg34
g753
(S"\x07\xdf\x07\t\x15.'\x0bu\x98"
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g3654
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'right'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5921
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5922
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vy
sS'block_loop.thisTrialN'
p5924
I0
sg39
F0.76666558328724932
sg34
g753
(S'\x07\xdf\x07\t\x15.-\x06\x8b\xc8'
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g4111
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'right'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g3837
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g4118
sS'block_loop.thisRepN'
p5934
I1
sg3645
g3843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5935
I1
sg3647
g3837
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vy
sS'block_loop.thisTrialN'
p5937
I0
sg39
F0.65001063418458216
sg34
g753
(S'\x07\xdf\x07\t\x15.3\x03\x8a@'
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g5040
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'left'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g4145
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g5047
sS'block_loop.thisRepN'
p5947
I1
sg3645
g4145
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5948
I1
sg3647
g4152
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vy
sS'block_loop.thisTrialN'
p5950
I0
sg39
F0.79979147885751445
sg34
g753
(S'\x07\xdf\x07\t\x15.8\r\xe6\x98'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g4960
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'right'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g3714
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g4967
sS'block_loop.thisRepN'
p5960
I1
sg3645
g3707
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5961
I1
sg3647
g3714
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vy
sS'block_loop.thisTrialN'
p5963
I0
sg39
F0.6837252584300586
sg34
g753
(S'\x07\xdf\x07\t\x15/\x02\x0b^('
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g5588
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'left'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g5595
sS'block_loop.thisRepN'
p5973
I1
sg3645
g3860
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5974
I1
sg3647
g3854
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vy
sS'block_loop.thisTrialN'
p5976
I0
sg39
F0.73336093088437337
sg34
g753
(S'\x07\xdf\x07\t\x15/\x08\x06\xf1X'
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g4111
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'right'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g3843
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g4118
sS'block_loop.thisRepN'
p5986
I1
sg3645
g3843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5987
I1
sg3647
g3837
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vy
sS'block_loop.thisTrialN'
p5989
I0
sg39
F0.68321436167752836
sg34
g753
(S'\x07\xdf\x07\t\x15/\x0e\x03v\xb8'
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g4021
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'right'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g3813
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g4028
sS'block_loop.thisRepN'
p5999
I1
sg3645
g3813
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6000
I1
sg3647
g3807
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vy
sS'block_loop.thisTrialN'
p6002
I0
sg39
F0.80000729852326913
sg34
g753
(S'\x07\xdf\x07\t\x15/\x13\x0e\x86\xc0'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g5588
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'right'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g3860
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g5595
sS'block_loop.thisRepN'
p6012
I1
sg3645
g3860
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6013
I1
sg3647
g3854
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vy
sS'block_loop.thisTrialN'
p6015
I0
sg39
F0.71665101475082338
sg34
g753
(S'\x07\xdf\x07\t\x15/\x19\x0b\xfeP'
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g4064
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'right'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g4068
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g4072
sS'block_loop.thisRepN'
p6025
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6026
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vy
sS'block_loop.thisTrialN'
p6028
I0
sg39
F0.55003024895995623
sg34
g753
(S'\x07\xdf\x07\t\x15/\x1f\x08\n\x98'
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g4748
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'left'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g3764
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g4755
sS'block_loop.thisRepN'
p6038
I1
sg3645
g3764
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6039
I1
sg3647
g3758
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vy
sS'block_loop.thisTrialN'
p6041
I0
sg39
F0.28314685032091802
sg34
g753
(S'\x07\xdf\x07\t\x15/%\x01\xb5\x80'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g4021
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'right'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g3813
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g4028
sS'block_loop.thisRepN'
p6051
I1
sg3645
g3813
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6052
I1
sg3647
g3807
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vy
sS'block_loop.thisTrialN'
p6054
I0
sg39
F0.74998189623875078
sg34
g753
(S'\x07\xdf\x07\t\x15/*\x06\x97\x80'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g4445
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'right'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g4452
sS'block_loop.thisRepN'
p6064
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6065
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vy
sS'block_loop.thisTrialN'
p6067
I0
sg39
F0.68311628774245037
sg34
g753
(S'\x07\xdf\x07\t\x15/0\x03Wx'
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g5040
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'right'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g4145
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g5047
sS'block_loop.thisRepN'
p6077
I1
sg3645
g4145
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6078
I1
sg3647
g4152
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vy
sS'block_loop.thisTrialN'
p6080
I0
sg39
F0.69999811835441506
sg34
g753
(S'\x07\xdf\x07\t\x15/5\x0e,\xe8'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g4126
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'left'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g4133
sS'block_loop.thisRepN'
p6090
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6091
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vy
sS'block_loop.thisTrialN'
p6093
I0
sg39
F0.81658236300427234
sg34
g753
(S'\x07\xdf\x07\t\x15/;\n90'
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g4004
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'right'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g4008
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g4012
sS'block_loop.thisRepN'
p6103
I1
sg3645
g4008
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6104
I1
sg3647
g4015
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vy
sS'block_loop.thisTrialN'
p6106
I0
sg39
F1.0497927618052927
sg34
g753
(S'\x07\xdf\x07\t\x150\x05\x07\xef@'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g4694
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'left'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g3724
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g4701
sS'block_loop.thisRepN'
p6116
I1
sg3645
g3724
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6117
I1
sg3647
g3731
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vy
sS'block_loop.thisTrialN'
p6119
I0
sg39
F0.4664863702855655
sg34
g753
(S'\x07\xdf\x07\t\x150\x0b\x08\xf8\xe0'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g4960
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'left'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g3714
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g4967
sS'block_loop.thisRepN'
p6129
I1
sg3645
g3707
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6130
I1
sg3647
g3714
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vy
sS'block_loop.thisTrialN'
p6132
I0
sg39
F0.59997895971901016
sg34
g753
(S'\x07\xdf\x07\t\x150\x11\x01s\x18'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g4789
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'right'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g4796
sS'block_loop.thisRepN'
p6142
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6143
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vy
sS'block_loop.thisTrialN'
p6145
I0
sg39
F0.71666783557157032
sg34
g753
(S'\x07\xdf\x07\t\x150\x16\x0b\x13\xf0'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g3786
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'left'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g3794
sS'block_loop.thisRepN'
p6155
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6156
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vy
sS'block_loop.thisTrialN'
p6158
I0
sg39
F0.74962609314388828
sg34
g753
(S'\x07\xdf\x07\t\x150\x1c\x07^\xb8'
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g3953
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'left'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g3957
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g3961
sS'block_loop.thisRepN'
p6168
I1
sg3645
g3957
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6169
I1
sg3647
g3964
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vy
sS'block_loop.thisTrialN'
p6171
I0
sg39
F0.53300929022225318
sg34
g753
(S'\x07\xdf\x07\t\x150"\x03\xe4\x18'
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g4227
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'right'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g3997
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g4234
sS'block_loop.thisRepN'
p6181
I1
sg3645
g3997
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6182
I1
sg3647
g3991
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vy
sS'block_loop.thisTrialN'
p6184
I0
sg39
F0.74986215480748797
sg34
g753
(S"\x07\xdf\x07\t\x150'\x0c\x92\xc0"
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g4789
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'left'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g3891
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g4796
sS'block_loop.thisRepN'
p6194
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6195
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vy
sS'block_loop.thisTrialN'
p6197
I0
sg39
F0.94981807855947409
sg34
g753
(S'\x07\xdf\x07\t\x150-\tV\xa0'
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g4126
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'left'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g4133
sS'block_loop.thisRepN'
p6207
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6208
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vy
sS'block_loop.thisTrialN'
p6210
I0
sg39
F1.0498492113329121
sg34
g753
(S'\x07\xdf\x07\t\x1503\t/\x90'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g3634
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'left'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g3643
sS'block_loop.thisRepN'
p6220
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6221
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vy
sS'block_loop.thisTrialN'
p6223
I0
sg39
F0.23306556869647466
sg34
g753
(S'\x07\xdf\x07\t\x1509\nw\xb0'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g3987
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'left'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g3991
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g3995
sS'block_loop.thisRepN'
p6233
I1
sg3645
g3997
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6234
I1
sg3647
g3991
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vy
sS'block_loop.thisTrialN'
p6236
I0
sg39
F0.61659507839794969
sg34
g753
(S'\x07\xdf\x07\t\x151\x02\x0ec\x98'
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g4021
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'left'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g3813
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g4028
sS'block_loop.thisRepN'
p6246
I1
sg3645
g3813
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6247
I1
sg3647
g3807
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vy
sS'block_loop.thisTrialN'
p6249
I0
sg39
F0.7498498955683317
sg34
g753
(S'\x07\xdf\x07\t\x151\x08\t\x04\x98'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g3720
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'left'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g3724
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g3728
sS'block_loop.thisRepN'
p6259
I1
sg3645
g3724
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6260
I1
sg3647
g3731
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vy
sS'block_loop.thisTrialN'
p6262
I0
sg39
F0.58339676778268768
sg34
g753
(S'\x07\xdf\x07\t\x151\x0e\x05\xc4\x90'
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g4186
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'right'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g3797
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g4193
sS'block_loop.thisRepN'
p6272
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6273
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vy
sS'block_loop.thisTrialN'
p6275
I0
sg39
F0.99981468589248834
sg34
g753
(S'\x07\xdf\x07\t\x151\x13\x0f*\xd0'
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g3771
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'right'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g3778
sS'block_loop.thisRepN'
p6285
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6286
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vy
sS'block_loop.thisTrialN'
p6288
I0
sg39
F0.98310077837959398
sg34
g753
(S'\x07\xdf\x07\t\x151\x1a\x00y\x18'
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g4270
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'left'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g4068
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g4277
sS'block_loop.thisRepN'
p6298
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6299
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vy
sS'block_loop.thisTrialN'
p6301
I0
sg39
F0.74983307474758476
sg34
g753
(S'\x07\xdf\x07\t\x151 \x00\x90\x88'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g4242
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'right'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g4092
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g4249
sS'block_loop.thisRepN'
p6311
I1
sg3645
g4085
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6312
I1
sg3647
g4092
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vy
sS'block_loop.thisTrialN'
p6314
I0
sg39
F0.23319500347133726
sg34
g753
(S'\x07\xdf\x07\t\x151%\x0c\x96\xa8'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g4141
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'right'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g4145
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g4149
sS'block_loop.thisRepN'
p6324
I1
sg3645
g4145
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6325
I1
sg3647
g4152
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vy
sS'block_loop.thisTrialN'
p6327
I0
sg39
F0.83315828276681714
sg34
g753
(S'\x07\xdf\x07\t\x151+\x01~\xd0'
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g3634
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'left'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g3643
sS'block_loop.thisRepN'
p6337
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6338
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vy
sS'block_loop.thisTrialN'
p6340
I0
sg39
F0.59969414618535666
sg34
g753
(S'\x07\xdf\x07\t\x1510\x0e\xb1\xb8'
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g3897
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'right'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g3907
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g3905
sS'block_loop.thisRepN'
p6350
I1
sg3645
g3907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6351
I1
sg3647
g3901
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vy
sS'block_loop.thisTrialN'
p6353
I0
sg39
F0.39986281053279527
sg34
g753
(S'\x07\xdf\x07\t\x1516\t\x148'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F241.29474124163244
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vy
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vy
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'17-jacobs_mini_cheddars_redo.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'left'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'8-liquorice_catherine_wheels.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6384
I2
sS'img_wrong'
p6385
S'8-liquorice_catherine_wheels.png'
p6386
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vy
sS'block_loop.thisTrialN'
p6388
I0
sg39
F0.74985474224376958
sg34
g753
(S'\x07\xdf\x07\t\x16\t!\r\xa8\x18'
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'10-bounty_redo.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'right'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'4-corn.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'4-corn.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6402
I2
sg6385
S'10-bounty_redo.png'
p6403
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vy
sS'block_loop.thisTrialN'
p6405
I0
sg39
F1.0166309438063763
sg34
g753
(S"\x07\xdf\x07\t\x16\t'\n-x"
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'8-liquorice_catherine_wheels.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'right'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6413
g60
(g99
S'\x02\x00\x00\x00'
tRp6414
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6415
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p6416
sS'block_loop.thisRepN'
p6417
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6418
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6419
Nsg70
Vy
sS'block_loop.thisTrialN'
p6420
I0
sg39
F0.98331146626878763
sg34
g753
(S'\x07\xdf\x07\t\x16\t-\n\xfc\x80'
tRp6421
sa(dp6422
S'trial_loop.thisTrialN'
p6423
I3
sg6371
S'48-twix.png'
p6424
sS'block_loop.thisIndex'
p6425
g6365
sg38
S'left'
p6426
sg59
g63
sS'trial_loop.thisN'
p6427
I3
sg33
S'48-twix.png'
p6428
sg64
g65
sS'trial_loop.thisIndex'
p6429
g60
(g99
S'\x03\x00\x00\x00'
tRp6430
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6431
I0
sg6380
S'50-polo.png'
p6432
sS'block_loop.thisRepN'
p6433
I2
sg6383
g6428
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6434
I2
sg6385
S'50-polo.png'
p6435
sg55
g11
sS'block_loop.thisTrial'
p6436
Nsg70
Vy
sS'block_loop.thisTrialN'
p6437
I0
sg39
F0.96663433648791397
sg34
g753
(S'\x07\xdf\x07\t\x16\t3\x0bN\x88'
tRp6438
sa(dp6439
S'trial_loop.thisTrialN'
p6440
I4
sg6371
S'45-chewy_nougat_redo.png'
p6441
sS'block_loop.thisIndex'
p6442
g6365
sg38
S'right'
p6443
sg59
g63
sS'trial_loop.thisN'
p6444
I4
sg33
S'41-peanuts_redo.png'
p6445
sg64
g65
sS'trial_loop.thisIndex'
p6446
g60
(g99
S'\x04\x00\x00\x00'
tRp6447
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6448
I0
sg6380
S'41-peanuts_redo.png'
p6449
sS'block_loop.thisRepN'
p6450
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6451
I2
sg6385
S'45-chewy_nougat_redo.png'
p6452
sg55
g11
sS'block_loop.thisTrial'
p6453
Nsg70
Vy
sS'block_loop.thisTrialN'
p6454
I0
sg39
F0.79999846046121093
sg34
g753
(S'\x07\xdf\x07\t\x16\t9\x0b+`'
tRp6455
sa(dp6456
S'trial_loop.thisTrialN'
p6457
I5
sg6371
S'13-mccoys_steak_crisps.png'
p6458
sS'block_loop.thisIndex'
p6459
g6365
sg38
S'right'
p6460
sg59
g63
sS'trial_loop.thisN'
p6461
I5
sg33
S'3-ellas_strawberries_apples.png'
p6462
sg64
g65
sS'trial_loop.thisIndex'
p6463
g60
(g99
S'\x05\x00\x00\x00'
tRp6464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6465
I0
sg6380
S'3-ellas_strawberries_apples.png'
p6466
sS'block_loop.thisRepN'
p6467
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6468
I2
sg6385
S'13-mccoys_steak_crisps.png'
p6469
sg55
g11
sS'block_loop.thisTrial'
p6470
Nsg70
Vy
sS'block_loop.thisTrialN'
p6471
I0
sg39
F1.7500024233377189
sg34
g753
(S'\x07\xdf\x07\t\x16\n\x03\x08\xa2\xf0'
tRp6472
sa(dp6473
S'trial_loop.thisTrialN'
p6474
I6
sg6371
S'4-corn.png'
p6475
sS'block_loop.thisIndex'
p6476
g6365
sg38
S'left'
p6477
sg59
g63
sS'trial_loop.thisN'
p6478
I6
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6479
g60
(g99
S'\x06\x00\x00\x00'
tRp6480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6481
I0
sg6380
S'10-bounty_redo.png'
p6482
sS'block_loop.thisRepN'
p6483
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6484
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6485
Nsg70
Vy
sS'block_loop.thisTrialN'
p6486
I0
sg39
F0.91660494280949933
sg34
g753
(S'\x07\xdf\x07\t\x16\n\n\x05_\x00'
tRp6487
sa(dp6488
S'trial_loop.thisTrialN'
p6489
I7
sg6371
g6458
sS'block_loop.thisIndex'
p6490
g6365
sg38
S'right'
p6491
sg59
g63
sS'trial_loop.thisN'
p6492
I7
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p6493
g60
(g99
S'\x07\x00\x00\x00'
tRp6494
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6495
I0
sg6380
g6466
sS'block_loop.thisRepN'
p6496
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6497
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p6498
Nsg70
Vy
sS'block_loop.thisTrialN'
p6499
I0
sg39
F0.69998956538620405
sg34
g753
(S'\x07\xdf\x07\t\x16\n\x10\x04\x84@'
tRp6500
sa(dp6501
S'trial_loop.thisTrialN'
p6502
I8
sg6371
S'35-raisins.png'
p6503
sS'block_loop.thisIndex'
p6504
g6365
sg38
S'right'
p6505
sg59
g63
sS'trial_loop.thisN'
p6506
I8
sg33
S'49-yorkie.png'
p6507
sg64
g65
sS'trial_loop.thisIndex'
p6508
g60
(g99
S'\x08\x00\x00\x00'
tRp6509
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6510
I0
sg6380
S'49-yorkie.png'
p6511
sS'block_loop.thisRepN'
p6512
I2
sg6383
g6507
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6513
I2
sg6385
S'35-raisins.png'
p6514
sg55
g11
sS'block_loop.thisTrial'
p6515
Nsg70
Vy
sS'block_loop.thisTrialN'
p6516
I0
sg39
F0.76668611039349344
sg34
g753
(S'\x07\xdf\x07\t\x16\n\x16\x00\x8c\xa0'
tRp6517
sa(dp6518
S'trial_loop.thisTrialN'
p6519
I9
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p6520
sS'block_loop.thisIndex'
p6521
g6365
sg38
S'right'
p6522
sg59
g63
sS'trial_loop.thisN'
p6523
I9
sg33
S'36-fig_rolls.png'
p6524
sg64
g65
sS'trial_loop.thisIndex'
p6525
g60
(g99
S'\t\x00\x00\x00'
tRp6526
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6527
I0
sg6380
S'36-fig_rolls.png'
p6528
sS'block_loop.thisRepN'
p6529
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6530
I2
sg6385
S'34-hula_hoops_bbq_beef_redo.png'
p6531
sg55
g11
sS'block_loop.thisTrial'
p6532
Nsg70
Vy
sS'block_loop.thisTrialN'
p6533
I0
sg39
F0.9833334188660956
sg34
g753
(S'\x07\xdf\x07\t\x16\n\x1b\x0c\xd1@'
tRp6534
sa(dp6535
S'trial_loop.thisTrialN'
p6536
I10
sg6371
S'50-polo.png'
p6537
sS'block_loop.thisIndex'
p6538
g6365
sg38
S'right'
p6539
sg59
g63
sS'trial_loop.thisN'
p6540
I10
sg33
g6428
sg64
g65
sS'trial_loop.thisIndex'
p6541
g60
(g99
S'\n\x00\x00\x00'
tRp6542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6543
I0
sg6380
S'48-twix.png'
p6544
sS'block_loop.thisRepN'
p6545
I2
sg6383
g6428
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6546
I2
sg6385
g6435
sg55
g11
sS'block_loop.thisTrial'
p6547
Nsg70
Vy
sS'block_loop.thisTrialN'
p6548
I0
sg39
F0.91660123653127812
sg34
g753
(S'\x07\xdf\x07\t\x16\n!\x0c\xe8\xb0'
tRp6549
sa(dp6550
S'trial_loop.thisTrialN'
p6551
I11
sg6371
S'51-mars.png'
p6552
sS'block_loop.thisIndex'
p6553
g6365
sg38
S'left'
p6554
sg59
g63
sS'trial_loop.thisN'
p6555
I11
sg33
S'51-mars.png'
p6556
sg64
g65
sS'trial_loop.thisIndex'
p6557
g60
(g99
S'\x0b\x00\x00\x00'
tRp6558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6559
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p6560
sS'block_loop.thisRepN'
p6561
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6562
I2
sg6385
S'27-hartleys_raspberries_jelly.png'
p6563
sg55
g11
sS'block_loop.thisTrial'
p6564
Nsg70
Vy
sS'block_loop.thisTrialN'
p6565
I0
sg39
F0.95036489774793154
sg34
g753
(S"\x07\xdf\x07\t\x16\n'\x0cH\x88"
tRp6566
sa(dp6567
S'trial_loop.thisTrialN'
p6568
I12
sg6371
g6441
sS'block_loop.thisIndex'
p6569
g6365
sg38
S'right'
p6570
sg59
g63
sS'trial_loop.thisN'
p6571
I12
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p6572
g60
(g99
S'\x0c\x00\x00\x00'
tRp6573
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6574
I0
sg6380
g6449
sS'block_loop.thisRepN'
p6575
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6576
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p6577
Nsg70
Vy
sS'block_loop.thisTrialN'
p6578
I0
sg39
F0.93332797348557506
sg34
g753
(S'\x07\xdf\x07\t\x16\n-\x0b\xe6\xe0'
tRp6579
sa(dp6580
S'trial_loop.thisTrialN'
p6581
I13
sg6371
S'6-sour_patch_kids.png'
p6582
sS'block_loop.thisIndex'
p6583
g6365
sg38
S'right'
p6584
sg59
g63
sS'trial_loop.thisN'
p6585
I13
sg33
S'38-maltesers.png'
p6586
sg64
g65
sS'trial_loop.thisIndex'
p6587
g60
(g99
S'\r\x00\x00\x00'
tRp6588
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6589
I0
sg6380
S'38-maltesers.png'
p6590
sS'block_loop.thisRepN'
p6591
I2
sg6383
g6586
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6592
I2
sg6385
S'6-sour_patch_kids.png'
p6593
sg55
g11
sS'block_loop.thisTrial'
p6594
Nsg70
Vy
sS'block_loop.thisTrialN'
p6595
I0
sg39
F0.69968251416139537
sg34
g753
(S'\x07\xdf\x07\t\x16\n3\x0b\x81P'
tRp6596
sa(dp6597
S'trial_loop.thisTrialN'
p6598
I14
sg6371
S'36-fig_rolls.png'
p6599
sS'block_loop.thisIndex'
p6600
g6365
sg38
S'left'
p6601
sg59
g63
sS'trial_loop.thisN'
p6602
I14
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p6603
g60
(g99
S'\x0e\x00\x00\x00'
tRp6604
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6605
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p6606
sS'block_loop.thisRepN'
p6607
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6608
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p6609
Nsg70
Vy
sS'block_loop.thisTrialN'
p6610
I0
sg39
F0.59991281684051501
sg34
g753
(S'\x07\xdf\x07\t\x16\n9\x07S\x00'
tRp6611
sa(dp6612
S'trial_loop.thisTrialN'
p6613
I15
sg6371
S'7-olives.png'
p6614
sS'block_loop.thisIndex'
p6615
g6365
sg38
S'right'
p6616
sg59
g63
sS'trial_loop.thisN'
p6617
I15
sg33
S'22-daim.png'
p6618
sg64
g65
sS'trial_loop.thisIndex'
p6619
g60
(g99
S'\x0f\x00\x00\x00'
tRp6620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6621
I0
sg6380
S'22-daim.png'
p6622
sS'block_loop.thisRepN'
p6623
I2
sg6383
S'7-olives.png'
p6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6625
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p6626
Nsg70
Vy
sS'block_loop.thisTrialN'
p6627
I0
sg39
F0.75002779711212497
sg34
g753
(S'\x07\xdf\x07\t\x16\x0b\x03\x01\xb1\x98'
tRp6628
sa(dp6629
S'trial_loop.thisTrialN'
p6630
I16
sg6371
S'18-mms.png'
p6631
sS'block_loop.thisIndex'
p6632
g6365
sg38
S'left'
p6633
sg59
g63
sS'trial_loop.thisN'
p6634
I16
sg33
S'18-mms.png'
p6635
sg64
g65
sS'trial_loop.thisIndex'
p6636
g60
(g99
S'\x10\x00\x00\x00'
tRp6637
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6638
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p6639
sS'block_loop.thisRepN'
p6640
I2
sg6383
g6635
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6641
I2
sg6385
S'43-mrporky_pork_crackles_redo.png'
p6642
sg55
g11
sS'block_loop.thisTrial'
p6643
Nsg70
Vy
sS'block_loop.thisTrialN'
p6644
I0
sg39
F1.4166286059989943
sg34
g753
(S'\x07\xdf\x07\t\x16\x0b\x08\r\xb7\xb8'
tRp6645
sa(dp6646
S'trial_loop.thisTrialN'
p6647
I17
sg6371
g6372
sS'block_loop.thisIndex'
p6648
g6365
sg38
S'right'
p6649
sg59
g63
sS'trial_loop.thisN'
p6650
I17
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6651
g60
(g99
S'\x11\x00\x00\x00'
tRp6652
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6653
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6654
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6655
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6656
Nsg70
Vy
sS'block_loop.thisTrialN'
p6657
I0
sg39
F0.65036102040903643
sg34
g753
(S'\x07\xdf\x07\t\x16\x0b\x0f\x05r\x88'
tRp6658
sa(dp6659
S'trial_loop.thisTrialN'
p6660
I18
sg6371
S'19-caramello_redo.png'
p6661
sS'block_loop.thisIndex'
p6662
g6365
sg38
S'right'
p6663
sg59
g63
sS'trial_loop.thisN'
p6664
I18
sg33
S'19-caramello_redo.png'
p6665
sg64
g65
sS'trial_loop.thisIndex'
p6666
g60
(g99
S'\x12\x00\x00\x00'
tRp6667
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6668
I0
sg6380
S'30-spaghetti_hoops.png'
p6669
sS'block_loop.thisRepN'
p6670
I2
sg6383
g6665
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6671
I2
sg6385
S'30-spaghetti_hoops.png'
p6672
sg55
g11
sS'block_loop.thisTrial'
p6673
Nsg70
Vy
sS'block_loop.thisTrialN'
p6674
I0
sg39
F0.7833284581429325
sg34
g753
(S'\x07\xdf\x07\t\x16\x0b\x15\x00\x8c\xa0'
tRp6675
sa(dp6676
S'trial_loop.thisTrialN'
p6677
I19
sg6371
S'33-ambrosia_rice.png'
p6678
sS'block_loop.thisIndex'
p6679
g6365
sg38
S'left'
p6680
sg59
g63
sS'trial_loop.thisN'
p6681
I19
sg33
S'23-crunchie_redo.png'
p6682
sg64
g65
sS'trial_loop.thisIndex'
p6683
g60
(g99
S'\x13\x00\x00\x00'
tRp6684
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6685
I0
sg6380
S'23-crunchie_redo.png'
p6686
sS'block_loop.thisRepN'
p6687
I2
sg6383
S'33-ambrosia_rice.png'
p6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6689
I2
sg6385
g6682
sg55
g11
sS'block_loop.thisTrial'
p6690
Nsg70
Vy
sS'block_loop.thisTrialN'
p6691
I0
sg39
F0.69991059306630632
sg34
g753
(S'\x07\xdf\x07\t\x16\x0b\x1a\r\x0b\xd8'
tRp6692
sa(dp6693
S'trial_loop.thisTrialN'
p6694
I20
sg6371
S'40-sardines.png'
p6695
sS'block_loop.thisIndex'
p6696
g6365
sg38
S'left'
p6697
sg59
g63
sS'trial_loop.thisN'
p6698
I20
sg33
S'40-sardines.png'
p6699
sg64
g65
sS'trial_loop.thisIndex'
p6700
g60
(g99
S'\x14\x00\x00\x00'
tRp6701
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6702
I0
sg6380
S'5-pineapple.png'
p6703
sS'block_loop.thisRepN'
p6704
I2
sg6383
g6699
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6705
I2
sg6385
S'5-pineapple.png'
p6706
sg55
g11
sS'block_loop.thisTrial'
p6707
Nsg70
Vy
sS'block_loop.thisTrialN'
p6708
I0
sg39
F0.9333017444005236
sg34
g753
(S'\x07\xdf\x07\t\x16\x0b \x08\xd9\xa0'
tRp6709
sa(dp6710
S'trial_loop.thisTrialN'
p6711
I21
sg6371
g6409
sS'block_loop.thisIndex'
p6712
g6365
sg38
S'right'
p6713
sg59
g63
sS'trial_loop.thisN'
p6714
I21
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6715
g60
(g99
S'\x15\x00\x00\x00'
tRp6716
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6717
I0
sg6380
g6416
sS'block_loop.thisRepN'
p6718
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6719
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6720
Nsg70
Vy
sS'block_loop.thisTrialN'
p6721
I0
sg39
F1.3333110956446035
sg34
g753
(S'\x07\xdf\x07\t\x16\x0b&\x08w\xf8'
tRp6722
sa(dp6723
S'trial_loop.thisTrialN'
p6724
I22
sg6371
S'3-ellas_strawberries_apples.png'
p6725
sS'block_loop.thisIndex'
p6726
g6365
sg38
S'left'
p6727
sg59
g63
sS'trial_loop.thisN'
p6728
I22
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p6729
g60
(g99
S'\x16\x00\x00\x00'
tRp6730
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6731
I0
sg6380
S'13-mccoys_steak_crisps.png'
p6732
sS'block_loop.thisRepN'
p6733
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6734
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p6735
Nsg70
Vy
sS'block_loop.thisTrialN'
p6736
I0
sg39
F0.63326051914191339
sg34
g753
(S'\x07\xdf\x07\t\x16\x0b,\x0e\x05\xd8'
tRp6737
sa(dp6738
S'trial_loop.thisTrialN'
p6739
I23
sg6371
g6503
sS'block_loop.thisIndex'
p6740
g6365
sg38
S'right'
p6741
sg59
g63
sS'trial_loop.thisN'
p6742
I23
sg33
g6507
sg64
g65
sS'trial_loop.thisIndex'
p6743
g60
(g99
S'\x17\x00\x00\x00'
tRp6744
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6745
I0
sg6380
g6511
sS'block_loop.thisRepN'
p6746
I2
sg6383
g6507
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6747
I2
sg6385
g6514
sg55
g11
sS'block_loop.thisTrial'
p6748
Nsg70
Vy
sS'block_loop.thisTrialN'
p6749
I0
sg39
F0.79998734161927132
sg34
g753
(S'\x07\xdf\x07\t\x16\x0b2\x08\xe1p'
tRp6750
sa(dp6751
S'trial_loop.thisTrialN'
p6752
I24
sg6371
S'27-hartleys_raspberries_jelly.png'
p6753
sS'block_loop.thisIndex'
p6754
g6365
sg38
S'right'
p6755
sg59
g63
sS'trial_loop.thisN'
p6756
I24
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p6757
g60
(g99
S'\x18\x00\x00\x00'
tRp6758
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6759
I0
sg6380
S'51-mars.png'
p6760
sS'block_loop.thisRepN'
p6761
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6762
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p6763
Nsg70
Vy
sS'block_loop.thisTrialN'
p6764
I0
sg39
F0.59999692092969781
sg34
g753
(S'\x07\xdf\x07\t\x16\x0b8\x06\\\xe8'
tRp6765
sa(dp6766
S'trial_loop.thisTrialN'
p6767
I25
sg6371
S'16-skips_prawn.png'
p6768
sS'block_loop.thisIndex'
p6769
g6365
sg38
S'left'
p6770
sg59
g63
sS'trial_loop.thisN'
p6771
I25
sg33
S'16-skips_prawn.png'
p6772
sg64
g65
sS'trial_loop.thisIndex'
p6773
g60
(g99
S'\x19\x00\x00\x00'
tRp6774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6775
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p6776
sS'block_loop.thisRepN'
p6777
I2
sg6383
g6772
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6778
I2
sg6385
S'42-mrkipling_lemon_slices.png'
p6779
sg55
g11
sS'block_loop.thisTrial'
p6780
Nsg70
Vy
sS'block_loop.thisTrialN'
p6781
I0
sg39
F0.89995119110972155
sg34
g753
(S'\x07\xdf\x07\t\x16\x0c\x02\x00\xbb\x80'
tRp6782
sa(dp6783
S'trial_loop.thisTrialN'
p6784
I26
sg6371
S'1-treacle_cookies.png'
p6785
sS'block_loop.thisIndex'
p6786
g6365
sg38
S'right'
p6787
sg59
g63
sS'trial_loop.thisN'
p6788
I26
sg33
S'21-nakd_banana_crunch.png'
p6789
sg64
g65
sS'trial_loop.thisIndex'
p6790
g60
(g99
S'\x1a\x00\x00\x00'
tRp6791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6792
I0
sg6380
S'21-nakd_banana_crunch.png'
p6793
sS'block_loop.thisRepN'
p6794
I2
sg6383
g6789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6795
I2
sg6385
S'1-treacle_cookies.png'
p6796
sg55
g11
sS'block_loop.thisTrial'
p6797
Nsg70
Vy
sS'block_loop.thisTrialN'
p6798
I0
sg39
F0.68332612033555051
sg34
g753
(S'\x07\xdf\x07\t\x16\x0c\x07\x0e\xe4\x80'
tRp6799
sa(dp6800
S'trial_loop.thisTrialN'
p6801
I27
sg6371
g6537
sS'block_loop.thisIndex'
p6802
g6365
sg38
S'right'
p6803
sg59
g63
sS'trial_loop.thisN'
p6804
I27
sg33
g6428
sg64
g65
sS'trial_loop.thisIndex'
p6805
g60
(g99
S'\x1b\x00\x00\x00'
tRp6806
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6807
I0
sg6380
g6544
sS'block_loop.thisRepN'
p6808
I2
sg6383
g6428
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6809
I2
sg6385
g6435
sg55
g11
sS'block_loop.thisTrial'
p6810
Nsg70
Vy
sS'block_loop.thisTrialN'
p6811
I0
sg39
F0.73332671904790914
sg34
g753
(S'\x07\xdf\x07\t\x16\x0c\r\n\xb2H'
tRp6812
sa(dp6813
S'trial_loop.thisTrialN'
p6814
I28
sg6371
g6785
sS'block_loop.thisIndex'
p6815
g6365
sg38
S'right'
p6816
sg59
g63
sS'trial_loop.thisN'
p6817
I28
sg33
g6796
sg64
g65
sS'trial_loop.thisIndex'
p6818
g60
(g99
S'\x1c\x00\x00\x00'
tRp6819
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6820
I0
sg6380
g6793
sS'block_loop.thisRepN'
p6821
I2
sg6383
g6789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6822
I2
sg6385
g6796
sg55
g11
sS'block_loop.thisTrial'
p6823
Nsg70
Vy
sS'block_loop.thisTrialN'
p6824
I0
sg39
F0.66669460633420385
sg34
g753
(S'\x07\xdf\x07\t\x16\x0c\x13\x06\xfd\x10'
tRp6825
sa(dp6826
S'trial_loop.thisTrialN'
p6827
I29
sg6371
S'31-hobnobs.png'
p6828
sS'block_loop.thisIndex'
p6829
g6365
sg38
S'right'
p6830
sg59
g63
sS'trial_loop.thisN'
p6831
I29
sg33
S'25-kitkat.png'
p6832
sg64
g65
sS'trial_loop.thisIndex'
p6833
g60
(g99
S'\x1d\x00\x00\x00'
tRp6834
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6835
I0
sg6380
S'25-kitkat.png'
p6836
sS'block_loop.thisRepN'
p6837
I2
sg6383
g6832
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6838
I2
sg6385
S'31-hobnobs.png'
p6839
sg55
g11
sS'block_loop.thisTrial'
p6840
Nsg70
Vy
sS'block_loop.thisTrialN'
p6841
I0
sg39
F0.76658860666066175
sg34
g753
(S'\x07\xdf\x07\t\x16\x0c\x19\x02\x8cX'
tRp6842
sa(dp6843
S'trial_loop.thisTrialN'
p6844
I30
sg6371
S'29-beans.png'
p6845
sS'block_loop.thisIndex'
p6846
g6365
sg38
S'left'
p6847
sg59
g63
sS'trial_loop.thisN'
p6848
I30
sg33
S'29-beans.png'
p6849
sg64
g65
sS'trial_loop.thisIndex'
p6850
g60
(g99
S'\x1e\x00\x00\x00'
tRp6851
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6852
I0
sg6380
S'46-pistachios.png'
p6853
sS'block_loop.thisRepN'
p6854
I2
sg6383
g6849
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6855
I2
sg6385
S'46-pistachios.png'
p6856
sg55
g11
sS'block_loop.thisTrial'
p6857
Nsg70
Vy
sS'block_loop.thisTrialN'
p6858
I0
sg39
F1.1498786335068871
sg34
g753
(S'\x07\xdf\x07\t\x16\x0c\x1e\x0e\xd0\xf8'
tRp6859
sa(dp6860
S'trial_loop.thisTrialN'
p6861
I31
sg6371
g6725
sS'block_loop.thisIndex'
p6862
g6365
sg38
S'left'
p6863
sg59
g63
sS'trial_loop.thisN'
p6864
I31
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p6865
g60
(g99
S'\x1f\x00\x00\x00'
tRp6866
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6867
I0
sg6380
g6732
sS'block_loop.thisRepN'
p6868
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6869
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p6870
Nsg70
Vy
sS'block_loop.thisTrialN'
p6871
I0
sg39
F0.58327588596148416
sg34
g753
(S'\x07\xdf\x07\t\x16\x0c%\x02B '
tRp6872
sa(dp6873
S'trial_loop.thisTrialN'
p6874
I32
sg6371
S'49-yorkie.png'
p6875
sS'block_loop.thisIndex'
p6876
g6365
sg38
S'left'
p6877
sg59
g63
sS'trial_loop.thisN'
p6878
I32
sg33
g6507
sg64
g65
sS'trial_loop.thisIndex'
p6879
g60
(g99
S' \x00\x00\x00'
tRp6880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6881
I0
sg6380
S'35-raisins.png'
p6882
sS'block_loop.thisRepN'
p6883
I2
sg6383
g6507
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6884
I2
sg6385
g6514
sg55
g11
sS'block_loop.thisTrial'
p6885
Nsg70
Vy
sS'block_loop.thisTrialN'
p6886
I0
sg39
F0.64999381336383522
sg34
g753
(S'\x07\xdf\x07\t\x16\x0c*\x0b\xa8`'
tRp6887
sa(dp6888
S'trial_loop.thisTrialN'
p6889
I33
sg6371
g6441
sS'block_loop.thisIndex'
p6890
g6365
sg38
S'right'
p6891
sg59
g63
sS'trial_loop.thisN'
p6892
I33
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p6893
g60
(g99
S'!\x00\x00\x00'
tRp6894
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6895
I0
sg6380
g6449
sS'block_loop.thisRepN'
p6896
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6897
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p6898
Nsg70
Vy
sS'block_loop.thisTrialN'
p6899
I0
sg39
F0.89998084137187107
sg34
g753
(S'\x07\xdf\x07\t\x16\x0c0\x06\xc2x'
tRp6900
sa(dp6901
S'trial_loop.thisTrialN'
p6902
I34
sg6371
g6828
sS'block_loop.thisIndex'
p6903
g6365
sg38
S'right'
p6904
sg59
g63
sS'trial_loop.thisN'
p6905
I34
sg33
g6832
sg64
g65
sS'trial_loop.thisIndex'
p6906
g60
(g99
S'"\x00\x00\x00'
tRp6907
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6908
I0
sg6380
g6836
sS'block_loop.thisRepN'
p6909
I2
sg6383
g6832
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6910
I2
sg6385
g6839
sg55
g11
sS'block_loop.thisTrial'
p6911
Nsg70
Vy
sS'block_loop.thisTrialN'
p6912
I0
sg39
F0.65006708371220157
sg34
g753
(S'\x07\xdf\x07\t\x16\x0c6\x05\xe3\xd0'
tRp6913
sa(dp6914
S'trial_loop.thisTrialN'
p6915
I35
sg6371
S'5-pineapple.png'
p6916
sS'block_loop.thisIndex'
p6917
g6365
sg38
S'right'
p6918
sg59
g63
sS'trial_loop.thisN'
p6919
I35
sg33
g6706
sg64
g65
sS'trial_loop.thisIndex'
p6920
g60
(g99
S'#\x00\x00\x00'
tRp6921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6922
I0
sg6380
S'40-sardines.png'
p6923
sS'block_loop.thisRepN'
p6924
I2
sg6383
g6699
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6925
I2
sg6385
g6706
sg55
g11
sS'block_loop.thisTrial'
p6926
Nsg70
Vy
sS'block_loop.thisTrialN'
p6927
I0
sg39
F0.74993656555307098
sg34
g753
(S'\x07\xdf\x07\t\x16\r\x00\x00\xfd\xe8'
tRp6928
sa(dp6929
S'trial_loop.thisTrialN'
p6930
I36
sg6371
S'41-peanuts_redo.png'
p6931
sS'block_loop.thisIndex'
p6932
g6365
sg38
S'right'
p6933
sg59
g63
sS'trial_loop.thisN'
p6934
I36
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p6935
g60
(g99
S'$\x00\x00\x00'
tRp6936
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6937
I0
sg6380
S'45-chewy_nougat_redo.png'
p6938
sS'block_loop.thisRepN'
p6939
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6940
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p6941
Nsg70
Vy
sS'block_loop.thisTrialN'
p6942
I0
sg39
F0.53325504525128054
sg34
g753
(S'\x07\xdf\x07\t\x16\r\x05\r\x00 '
tRp6943
sa(dp6944
S'trial_loop.thisTrialN'
p6945
I37
sg6371
g6503
sS'block_loop.thisIndex'
p6946
g6365
sg38
S'right'
p6947
sg59
g63
sS'trial_loop.thisN'
p6948
I37
sg33
g6514
sg64
g65
sS'trial_loop.thisIndex'
p6949
g60
(g99
S'%\x00\x00\x00'
tRp6950
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6951
I0
sg6380
g6511
sS'block_loop.thisRepN'
p6952
I2
sg6383
g6507
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6953
I2
sg6385
g6514
sg55
g11
sS'block_loop.thisTrial'
p6954
Nsg70
Vy
sS'block_loop.thisTrialN'
p6955
I0
sg39
F0.58324481020827079
sg34
g753
(S'\x07\xdf\x07\t\x16\r\x0b\x06pp'
tRp6956
sa(dp6957
S'trial_loop.thisTrialN'
p6958
I38
sg6371
g6828
sS'block_loop.thisIndex'
p6959
g6365
sg38
S'right'
p6960
sg59
g63
sS'trial_loop.thisN'
p6961
I38
sg33
g6832
sg64
g65
sS'trial_loop.thisIndex'
p6962
g60
(g99
S'&\x00\x00\x00'
tRp6963
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6964
I0
sg6380
g6836
sS'block_loop.thisRepN'
p6965
I2
sg6383
g6832
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6966
I2
sg6385
g6839
sg55
g11
sS'block_loop.thisTrial'
p6967
Nsg70
Vy
sS'block_loop.thisTrialN'
p6968
I0
sg39
F0.74995709265931509
sg34
g753
(S'\x07\xdf\x07\t\x16\r\x11\x00\x94p'
tRp6969
sa(dp6970
S'trial_loop.thisTrialN'
p6971
I39
sg6371
g6661
sS'block_loop.thisIndex'
p6972
g6365
sg38
S'right'
p6973
sg59
g63
sS'trial_loop.thisN'
p6974
I39
sg33
g6665
sg64
g65
sS'trial_loop.thisIndex'
p6975
g60
(g99
S"'\x00\x00\x00"
tRp6976
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6977
I0
sg6380
g6669
sS'block_loop.thisRepN'
p6978
I2
sg6383
g6665
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6979
I2
sg6385
g6672
sg55
g11
sS'block_loop.thisTrial'
p6980
Nsg70
Vy
sS'block_loop.thisTrialN'
p6981
I0
sg39
F1.0832872899045469
sg34
g753
(S'\x07\xdf\x07\t\x16\r\x16\x0c\\\x10'
tRp6982
sa(dp6983
S'trial_loop.thisTrialN'
p6984
I40
sg6371
g6678
sS'block_loop.thisIndex'
p6985
g6365
sg38
S'left'
p6986
sg59
g63
sS'trial_loop.thisN'
p6987
I40
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p6988
g60
(g99
S'(\x00\x00\x00'
tRp6989
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6990
I0
sg6380
g6686
sS'block_loop.thisRepN'
p6991
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6992
I2
sg6385
g6682
sg55
g11
sS'block_loop.thisTrial'
p6993
Nsg70
Vy
sS'block_loop.thisTrialN'
p6994
I0
sg39
F1.2332830989544163
sg34
g753
(S'\x07\xdf\x07\t\x16\r\x1c\x0e\x1dH'
tRp6995
sa(dp6996
S'trial_loop.thisTrialN'
p6997
I41
sg6371
g6614
sS'block_loop.thisIndex'
p6998
g6365
sg38
S'right'
p6999
sg59
g63
sS'trial_loop.thisN'
p7000
I41
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p7001
g60
(g99
S')\x00\x00\x00'
tRp7002
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7003
I0
sg6380
g6622
sS'block_loop.thisRepN'
p7004
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7005
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p7006
Nsg70
Vy
sS'block_loop.thisTrialN'
p7007
I0
sg39
F0.7499491098933504
sg34
g753
(S'\x07\xdf\x07\t\x16\r#\x02\xfd\xa0'
tRp7008
sa(dp7009
S'trial_loop.thisTrialN'
p7010
I42
sg6371
S'43-mrporky_pork_crackles_redo.png'
p7011
sS'block_loop.thisIndex'
p7012
g6365
sg38
S'right'
p7013
sg59
g63
sS'trial_loop.thisN'
p7014
I42
sg33
g6635
sg64
g65
sS'trial_loop.thisIndex'
p7015
g60
(g99
S'*\x00\x00\x00'
tRp7016
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7017
I0
sg6380
S'18-mms.png'
p7018
sS'block_loop.thisRepN'
p7019
I2
sg6383
g6635
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7020
I2
sg6385
g6642
sg55
g11
sS'block_loop.thisTrial'
p7021
Nsg70
Vy
sS'block_loop.thisTrialN'
p7022
I0
sg39
F0.71659114403882995
sg34
g753
(S'\x07\xdf\x07\t\x16\r(\x0f\x03\xc0'
tRp7023
sa(dp7024
S'trial_loop.thisTrialN'
p7025
I43
sg6371
g6503
sS'block_loop.thisIndex'
p7026
g6365
sg38
S'right'
p7027
sg59
g63
sS'trial_loop.thisN'
p7028
I43
sg33
g6507
sg64
g65
sS'trial_loop.thisIndex'
p7029
g60
(g99
S'+\x00\x00\x00'
tRp7030
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7031
I0
sg6380
g6511
sS'block_loop.thisRepN'
p7032
I2
sg6383
g6507
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7033
I2
sg6385
g6514
sg55
g11
sS'block_loop.thisTrial'
p7034
Nsg70
Vy
sS'block_loop.thisTrialN'
p7035
I0
sg39
F0.56669084303575801
sg34
g753
(S'\x07\xdf\x07\t\x16\r.\x0b\x0c '
tRp7036
sa(dp7037
S'trial_loop.thisTrialN'
p7038
I44
sg6371
S'26-walkers_smoky_bacon.png'
p7039
sS'block_loop.thisIndex'
p7040
g6365
sg38
S'right'
p7041
sg59
g63
sS'trial_loop.thisN'
p7042
I44
sg33
S'26-walkers_smoky_bacon.png'
p7043
sg64
g65
sS'trial_loop.thisIndex'
p7044
g60
(g99
S',\x00\x00\x00'
tRp7045
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7046
I0
sg6380
S'44-crunch.png'
p7047
sS'block_loop.thisRepN'
p7048
I2
sg6383
S'44-crunch.png'
p7049
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7050
I2
sg6385
g7043
sg55
g11
sS'block_loop.thisTrial'
p7051
Nsg70
Vy
sS'block_loop.thisTrialN'
p7052
I0
sg39
F1.0333337324700551
sg34
g753
(S'\x07\xdf\x07\t\x16\r4\x04\xf5\x88'
tRp7053
sa(dp7054
S'trial_loop.thisTrialN'
p7055
I45
sg6371
g6441
sS'block_loop.thisIndex'
p7056
g6365
sg38
S'right'
p7057
sg59
g63
sS'trial_loop.thisN'
p7058
I45
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p7059
g60
(g99
S'-\x00\x00\x00'
tRp7060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7061
I0
sg6380
g6449
sS'block_loop.thisRepN'
p7062
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7063
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p7064
Nsg70
Vy
sS'block_loop.thisTrialN'
p7065
I0
sg39
F1.1003664087693323
sg34
g753
(S'\x07\xdf\x07\t\x16\r:\x05\xff('
tRp7066
sa(dp7067
S'trial_loop.thisTrialN'
p7068
I46
sg6371
S'44-crunch.png'
p7069
sS'block_loop.thisIndex'
p7070
g6365
sg38
S'right'
p7071
sg59
g63
sS'trial_loop.thisN'
p7072
I46
sg33
g7049
sg64
g65
sS'trial_loop.thisIndex'
p7073
g60
(g99
S'.\x00\x00\x00'
tRp7074
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7075
I0
sg6380
S'26-walkers_smoky_bacon.png'
p7076
sS'block_loop.thisRepN'
p7077
I2
sg6383
g7049
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7078
I2
sg6385
g7043
sg55
g11
sS'block_loop.thisTrial'
p7079
Nsg70
Vy
sS'block_loop.thisTrialN'
p7080
I0
sg39
F0.78316110524610849
sg34
g753
(S'\x07\xdf\x07\t\x16\x0e\x04\x07\xfe\xe0'
tRp7081
sa(dp7082
S'trial_loop.thisTrialN'
p7083
I47
sg6371
g6424
sS'block_loop.thisIndex'
p7084
g6365
sg38
S'left'
p7085
sg59
g63
sS'trial_loop.thisN'
p7086
I47
sg33
g6428
sg64
g65
sS'trial_loop.thisIndex'
p7087
g60
(g99
S'/\x00\x00\x00'
tRp7088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7089
I0
sg6380
g6432
sS'block_loop.thisRepN'
p7090
I2
sg6383
g6428
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7091
I2
sg6385
g6435
sg55
g11
sS'block_loop.thisTrial'
p7092
Nsg70
Vy
sS'block_loop.thisTrialN'
p7093
I0
sg39
F0.63317327896220377
sg34
g753
(S'\x07\xdf\x07\t\x16\x0e\n\x05;\xd8'
tRp7094
sa(dp7095
S'trial_loop.thisTrialN'
p7096
I48
sg6371
g6458
sS'block_loop.thisIndex'
p7097
g6365
sg38
S'left'
p7098
sg59
g63
sS'trial_loop.thisN'
p7099
I48
sg33
g6469
sg64
g65
sS'trial_loop.thisIndex'
p7100
g60
(g99
S'0\x00\x00\x00'
tRp7101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7102
I0
sg6380
g6466
sS'block_loop.thisRepN'
p7103
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7104
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p7105
Nsg70
Vy
sS'block_loop.thisTrialN'
p7106
I0
sg39
F0.55001399834145559
sg34
g753
(S'\x07\xdf\x07\t\x16\x0e\x10\x00R\x08'
tRp7107
sa(dp7108
S'trial_loop.thisTrialN'
p7109
I49
sg6371
g7011
sS'block_loop.thisIndex'
p7110
g6365
sg38
S'right'
p7111
sg59
g63
sS'trial_loop.thisN'
p7112
I49
sg33
g6642
sg64
g65
sS'trial_loop.thisIndex'
p7113
g60
(g99
S'1\x00\x00\x00'
tRp7114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7115
I0
sg6380
g7018
sS'block_loop.thisRepN'
p7116
I2
sg6383
g6635
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7117
I2
sg6385
g6642
sg55
g11
sS'block_loop.thisTrial'
p7118
Nsg70
Vy
sS'block_loop.thisTrialN'
p7119
I0
sg39
F0.7666062827775022
sg34
g753
(S'\x07\xdf\x07\t\x16\x0e\x15\t\x00\xb0'
tRp7120
sa(dp7121
S'trial_loop.thisTrialN'
p7122
I50
sg6371
S'30-spaghetti_hoops.png'
p7123
sS'block_loop.thisIndex'
p7124
g6365
sg38
S'right'
p7125
sg59
g63
sS'trial_loop.thisN'
p7126
I50
sg33
g6672
sg64
g65
sS'trial_loop.thisIndex'
p7127
g60
(g99
S'2\x00\x00\x00'
tRp7128
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7129
I0
sg6380
S'19-caramello_redo.png'
p7130
sS'block_loop.thisRepN'
p7131
I2
sg6383
g6665
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7132
I2
sg6385
g6672
sg55
g11
sS'block_loop.thisTrial'
p7133
Nsg70
Vy
sS'block_loop.thisTrialN'
p7134
I0
sg39
F0.71654581335315015
sg34
g753
(S'\x07\xdf\x07\t\x16\x0e\x1b\x06\x03\x10'
tRp7135
sa(dp7136
S'trial_loop.thisTrialN'
p7137
I51
sg6371
g6631
sS'block_loop.thisIndex'
p7138
g6365
sg38
S'left'
p7139
sg59
g63
sS'trial_loop.thisN'
p7140
I51
sg33
g6635
sg64
g65
sS'trial_loop.thisIndex'
p7141
g60
(g99
S'3\x00\x00\x00'
tRp7142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7143
I0
sg6380
g6639
sS'block_loop.thisRepN'
p7144
I2
sg6383
g6635
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7145
I2
sg6385
g6642
sg55
g11
sS'block_loop.thisTrial'
p7146
Nsg70
Vy
sS'block_loop.thisTrialN'
p7147
I0
sg39
F0.60023013161844574
sg34
g753
(S'\x07\xdf\x07\t\x16\x0e!\x02I\xf0'
tRp7148
sa(dp7149
S'trial_loop.thisTrialN'
p7150
I52
sg6371
g6725
sS'block_loop.thisIndex'
p7151
g6365
sg38
S'left'
p7152
sg59
g63
sS'trial_loop.thisN'
p7153
I52
sg33
g6469
sg64
g65
sS'trial_loop.thisIndex'
p7154
g60
(g99
S'4\x00\x00\x00'
tRp7155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7156
I0
sg6380
g6732
sS'block_loop.thisRepN'
p7157
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7158
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p7159
Nsg70
Vy
sS'block_loop.thisTrialN'
p7160
I0
sg39
F0.73323862356483005
sg34
g753
(S'\x07\xdf\x07\t\x16\x0e&\x0b\xee\xb0'
tRp7161
sa(dp7162
S'trial_loop.thisTrialN'
p7163
I53
sg6371
S'21-nakd_banana_crunch.png'
p7164
sS'block_loop.thisIndex'
p7165
g6365
sg38
S'left'
p7166
sg59
g63
sS'trial_loop.thisN'
p7167
I53
sg33
g6789
sg64
g65
sS'trial_loop.thisIndex'
p7168
g60
(g99
S'5\x00\x00\x00'
tRp7169
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7170
I0
sg6380
S'1-treacle_cookies.png'
p7171
sS'block_loop.thisRepN'
p7172
I2
sg6383
g6789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7173
I2
sg6385
g6796
sg55
g11
sS'block_loop.thisTrial'
p7174
Nsg70
Vy
sS'block_loop.thisTrialN'
p7175
I0
sg39
F0.8500084674305981
sg34
g753
(S'\x07\xdf\x07\t\x16\x0e,\x08t\x10'
tRp7176
sa(dp7177
S'trial_loop.thisTrialN'
p7178
I54
sg6371
g6828
sS'block_loop.thisIndex'
p7179
g6365
sg38
S'right'
p7180
sg59
g63
sS'trial_loop.thisN'
p7181
I54
sg33
g6832
sg64
g65
sS'trial_loop.thisIndex'
p7182
g60
(g99
S'6\x00\x00\x00'
tRp7183
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7184
I0
sg6380
g6836
sS'block_loop.thisRepN'
p7185
I2
sg6383
g6832
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7186
I2
sg6385
g6839
sg55
g11
sS'block_loop.thisTrial'
p7187
Nsg70
Vy
sS'block_loop.thisTrialN'
p7188
I0
sg39
F0.64990343709359877
sg34
g753
(S'\x07\xdf\x07\t\x16\x0e2\x06\xa38'
tRp7189
sa(dp7190
S'trial_loop.thisTrialN'
p7191
I55
sg6371
g6424
sS'block_loop.thisIndex'
p7192
g6365
sg38
S'left'
p7193
sg59
g63
sS'trial_loop.thisN'
p7194
I55
sg33
g6428
sg64
g65
sS'trial_loop.thisIndex'
p7195
g60
(g99
S'7\x00\x00\x00'
tRp7196
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7197
I0
sg6380
g6432
sS'block_loop.thisRepN'
p7198
I2
sg6383
g6428
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7199
I2
sg6385
g6435
sg55
g11
sS'block_loop.thisTrial'
p7200
Nsg70
Vy
sS'block_loop.thisTrialN'
p7201
I0
sg39
F0.74995509696600493
sg34
g753
(S'\x07\xdf\x07\t\x16\x0e8\x01\xb9h'
tRp7202
sa(dp7203
S'trial_loop.thisTrialN'
p7204
I56
sg6371
S'38-maltesers.png'
p7205
sS'block_loop.thisIndex'
p7206
g6365
sg38
S'left'
p7207
sg59
g63
sS'trial_loop.thisN'
p7208
I56
sg33
g6593
sg64
g65
sS'trial_loop.thisIndex'
p7209
g60
(g99
S'8\x00\x00\x00'
tRp7210
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7211
I0
sg6380
S'6-sour_patch_kids.png'
p7212
sS'block_loop.thisRepN'
p7213
I2
sg6383
g6586
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7214
I2
sg6385
g6593
sg55
g11
sS'block_loop.thisTrial'
p7215
Nsg70
Vy
sS'block_loop.thisTrialN'
p7216
I0
sg39
F0.54974657582351938
sg34
g753
(S'\x07\xdf\x07\t\x16\x0f\x01\r\xbf\x88'
tRp7217
sa(dp7218
S'trial_loop.thisTrialN'
p7219
I57
sg6371
g7039
sS'block_loop.thisIndex'
p7220
g6365
sg38
S'right'
p7221
sg59
g63
sS'trial_loop.thisN'
p7222
I57
sg33
g7049
sg64
g65
sS'trial_loop.thisIndex'
p7223
g60
(g99
S'9\x00\x00\x00'
tRp7224
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7225
I0
sg6380
g7047
sS'block_loop.thisRepN'
p7226
I2
sg6383
g7049
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7227
I2
sg6385
g7043
sg55
g11
sS'block_loop.thisTrial'
p7228
Nsg70
Vy
sS'block_loop.thisTrialN'
p7229
I0
sg39
F1.1669970959846978
sg34
g753
(S'\x07\xdf\x07\t\x16\x0f\x07\x07jp'
tRp7230
sa(dp7231
S'trial_loop.thisTrialN'
p7232
I58
sg6371
g6520
sS'block_loop.thisIndex'
p7233
g6365
sg38
S'right'
p7234
sg59
g63
sS'trial_loop.thisN'
p7235
I58
sg33
g6531
sg64
g65
sS'trial_loop.thisIndex'
p7236
g60
(g99
S':\x00\x00\x00'
tRp7237
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7238
I0
sg6380
g6528
sS'block_loop.thisRepN'
p7239
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7240
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p7241
Nsg70
Vy
sS'block_loop.thisTrialN'
p7242
I0
sg39
F0.95000139698095154
sg34
g753
(S'\x07\xdf\x07\t\x16\x0f\r\n\\X'
tRp7243
sa(dp7244
S'trial_loop.thisTrialN'
p7245
I59
sg6371
g6845
sS'block_loop.thisIndex'
p7246
g6365
sg38
S'left'
p7247
sg59
g63
sS'trial_loop.thisN'
p7248
I59
sg33
g6856
sg64
g65
sS'trial_loop.thisIndex'
p7249
g60
(g99
S';\x00\x00\x00'
tRp7250
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7251
I0
sg6380
g6853
sS'block_loop.thisRepN'
p7252
I2
sg6383
g6849
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7253
I2
sg6385
g6856
sg55
g11
sS'block_loop.thisTrial'
p7254
Nsg70
Vy
sS'block_loop.thisTrialN'
p7255
I0
sg39
F0.83332221448654309
sg34
g753
(S'\x07\xdf\x07\t\x16\x0f\x13\n5H'
tRp7256
sa(dp7257
S'trial_loop.thisTrialN'
p7258
I60
sg6371
g7164
sS'block_loop.thisIndex'
p7259
g6365
sg38
S'right'
p7260
sg59
g63
sS'trial_loop.thisN'
p7261
I60
sg33
g6796
sg64
g65
sS'trial_loop.thisIndex'
p7262
g60
(g99
S'<\x00\x00\x00'
tRp7263
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7264
I0
sg6380
g7171
sS'block_loop.thisRepN'
p7265
I2
sg6383
g6789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7266
I2
sg6385
g6796
sg55
g11
sS'block_loop.thisTrial'
p7267
Nsg70
Vy
sS'block_loop.thisTrialN'
p7268
I0
sg39
F0.64997898822912248
sg34
g753
(S'\x07\xdf\x07\t\x16\x0f\x19\x08)\xd8'
tRp7269
sa(dp7270
S'trial_loop.thisTrialN'
p7271
I61
sg6371
S'46-pistachios.png'
p7272
sS'block_loop.thisIndex'
p7273
g6365
sg38
S'right'
p7274
sg59
g63
sS'trial_loop.thisN'
p7275
I61
sg33
g6856
sg64
g65
sS'trial_loop.thisIndex'
p7276
g60
(g99
S'=\x00\x00\x00'
tRp7277
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7278
I0
sg6380
S'29-beans.png'
p7279
sS'block_loop.thisRepN'
p7280
I2
sg6383
g6849
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7281
I2
sg6385
g6856
sg55
g11
sS'block_loop.thisTrial'
p7282
Nsg70
Vy
sS'block_loop.thisTrialN'
p7283
I0
sg39
F0.68335092392226215
sg34
g753
(S'\x07\xdf\x07\t\x16\x0f\x1f\x03@\x08'
tRp7284
sa(dp7285
S'trial_loop.thisTrialN'
p7286
I62
sg6371
g6599
sS'block_loop.thisIndex'
p7287
g6365
sg38
S'left'
p7288
sg59
g63
sS'trial_loop.thisN'
p7289
I62
sg33
g6531
sg64
g65
sS'trial_loop.thisIndex'
p7290
g60
(g99
S'>\x00\x00\x00'
tRp7291
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7292
I0
sg6380
g6606
sS'block_loop.thisRepN'
p7293
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7294
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p7295
Nsg70
Vy
sS'block_loop.thisTrialN'
p7296
I0
sg39
F0.61667661660612794
sg34
g753
(S'\x07\xdf\x07\t\x16\x0f$\x0e\x15x'
tRp7297
sa(dp7298
S'trial_loop.thisTrialN'
p7299
I63
sg6371
g6695
sS'block_loop.thisIndex'
p7300
g6365
sg38
S'left'
p7301
sg59
g63
sS'trial_loop.thisN'
p7302
I63
sg33
g6699
sg64
g65
sS'trial_loop.thisIndex'
p7303
g60
(g99
S'?\x00\x00\x00'
tRp7304
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7305
I0
sg6380
g6703
sS'block_loop.thisRepN'
p7306
I2
sg6383
g6699
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7307
I2
sg6385
g6706
sg55
g11
sS'block_loop.thisTrial'
p7308
Nsg70
Vy
sS'block_loop.thisTrialN'
p7309
I0
sg39
F0.70004972119932063
sg34
g753
(S'\x07\xdf\x07\t\x16\x0f*\x08\xf1\x10'
tRp7310
sa(dp7311
S'trial_loop.thisTrialN'
p7312
I64
sg6371
g7272
sS'block_loop.thisIndex'
p7313
g6365
sg38
S'right'
p7314
sg59
g63
sS'trial_loop.thisN'
p7315
I64
sg33
g6849
sg64
g65
sS'trial_loop.thisIndex'
p7316
g60
(g99
S'@\x00\x00\x00'
tRp7317
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7318
I0
sg6380
g7279
sS'block_loop.thisRepN'
p7319
I2
sg6383
g6849
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7320
I2
sg6385
g6856
sg55
g11
sS'block_loop.thisTrial'
p7321
Nsg70
Vy
sS'block_loop.thisTrialN'
p7322
I0
sg39
F0.79993146229389822
sg34
g753
(S'\x07\xdf\x07\t\x16\x0f0\x04\xbe\xd8'
tRp7323
sa(dp7324
S'trial_loop.thisTrialN'
p7325
I65
sg6371
g7069
sS'block_loop.thisIndex'
p7326
g6365
sg38
S'left'
p7327
sg59
g63
sS'trial_loop.thisN'
p7328
I65
sg33
g7043
sg64
g65
sS'trial_loop.thisIndex'
p7329
g60
(g99
S'A\x00\x00\x00'
tRp7330
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7331
I0
sg6380
g7076
sS'block_loop.thisRepN'
p7332
I2
sg6383
g7049
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7333
I2
sg6385
g7043
sg55
g11
sS'block_loop.thisTrial'
p7334
Nsg70
Vy
sS'block_loop.thisTrialN'
p7335
I0
sg39
F0.6666478501574602
sg34
g753
(S'\x07\xdf\x07\t\x16\x0f6\x026h'
tRp7336
sa(dp7337
S'trial_loop.thisTrialN'
p7338
I66
sg6371
g6785
sS'block_loop.thisIndex'
p7339
g6365
sg38
S'right'
p7340
sg59
g63
sS'trial_loop.thisN'
p7341
I66
sg33
g6789
sg64
g65
sS'trial_loop.thisIndex'
p7342
g60
(g99
S'B\x00\x00\x00'
tRp7343
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7344
I0
sg6380
g6793
sS'block_loop.thisRepN'
p7345
I2
sg6383
g6789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7346
I2
sg6385
g6796
sg55
g11
sS'block_loop.thisTrial'
p7347
Nsg70
Vy
sS'block_loop.thisTrialN'
p7348
I0
sg39
F1.9999478269455722
sg34
g753
(S'\x07\xdf\x07\t\x16\x0f;\x0c\xcdX'
tRp7349
sa(dp7350
S'trial_loop.thisTrialN'
p7351
I67
sg6371
g6875
sS'block_loop.thisIndex'
p7352
g6365
sg38
S'left'
p7353
sg59
g63
sS'trial_loop.thisN'
p7354
I67
sg33
g6507
sg64
g65
sS'trial_loop.thisIndex'
p7355
g60
(g99
S'C\x00\x00\x00'
tRp7356
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7357
I0
sg6380
g6882
sS'block_loop.thisRepN'
p7358
I2
sg6383
g6507
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7359
I2
sg6385
g6514
sg55
g11
sS'block_loop.thisTrial'
p7360
Nsg70
Vy
sS'block_loop.thisTrialN'
p7361
I0
sg39
F0.73308153422112809
sg34
g753
(S'\x07\xdf\x07\t\x16\x10\x06\rY\xf8'
tRp7362
sa(dp7363
S'trial_loop.thisTrialN'
p7364
I68
sg6371
g6552
sS'block_loop.thisIndex'
p7365
g6365
sg38
S'left'
p7366
sg59
g63
sS'trial_loop.thisN'
p7367
I68
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p7368
g60
(g99
S'D\x00\x00\x00'
tRp7369
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7370
I0
sg6380
g6560
sS'block_loop.thisRepN'
p7371
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7372
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p7373
Nsg70
Vy
sS'block_loop.thisTrialN'
p7374
I0
sg39
F0.61695601326937322
sg34
g753
(S'\x07\xdf\x07\t\x16\x10\x0c\t\xdfX'
tRp7375
sa(dp7376
S'trial_loop.thisTrialN'
p7377
I69
sg6371
S'25-kitkat.png'
p7378
sS'block_loop.thisIndex'
p7379
g6365
sg38
S'left'
p7380
sg59
g63
sS'trial_loop.thisN'
p7381
I69
sg33
g6832
sg64
g65
sS'trial_loop.thisIndex'
p7382
g60
(g99
S'E\x00\x00\x00'
tRp7383
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7384
I0
sg6380
S'31-hobnobs.png'
p7385
sS'block_loop.thisRepN'
p7386
I2
sg6383
g6832
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7387
I2
sg6385
g6839
sg55
g11
sS'block_loop.thisTrial'
p7388
Nsg70
Vy
sS'block_loop.thisTrialN'
p7389
I0
sg39
F0.84994973710854538
sg34
g753
(S'\x07\xdf\x07\t\x16\x10\x12\x04|p'
tRp7390
sa(dp7391
S'trial_loop.thisTrialN'
p7392
I70
sg6371
S'42-mrkipling_lemon_slices.png'
p7393
sS'block_loop.thisIndex'
p7394
g6365
sg38
S'right'
p7395
sg59
g63
sS'trial_loop.thisN'
p7396
I70
sg33
g6772
sg64
g65
sS'trial_loop.thisIndex'
p7397
g60
(g99
S'F\x00\x00\x00'
tRp7398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7399
I0
sg6380
S'16-skips_prawn.png'
p7400
sS'block_loop.thisRepN'
p7401
I2
sg6383
g6772
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7402
I2
sg6385
g6779
sg55
g11
sS'block_loop.thisTrial'
p7403
Nsg70
Vy
sS'block_loop.thisTrialN'
p7404
I0
sg39
F1.5332028721968527
sg34
g753
(S'\x07\xdf\x07\t\x16\x10\x18\x02\xab\x98'
tRp7405
sa(dp7406
S'trial_loop.thisTrialN'
p7407
I71
sg6371
g6409
sS'block_loop.thisIndex'
p7408
g6365
sg38
S'left'
p7409
sg59
g63
sS'trial_loop.thisN'
p7410
I71
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7411
g60
(g99
S'G\x00\x00\x00'
tRp7412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7413
I0
sg6380
g6416
sS'block_loop.thisRepN'
p7414
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7415
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7416
Nsg70
Vy
sS'block_loop.thisTrialN'
p7417
I0
sg39
F0.58322228741599247
sg34
g753
(S'\x07\xdf\x07\t\x16\x10\x1e\x0bVX'
tRp7418
sa(dp7419
S'trial_loop.thisTrialN'
p7420
I72
sg6371
g6753
sS'block_loop.thisIndex'
p7421
g6365
sg38
S'right'
p7422
sg59
g63
sS'trial_loop.thisN'
p7423
I72
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p7424
g60
(g99
S'H\x00\x00\x00'
tRp7425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7426
I0
sg6380
g6760
sS'block_loop.thisRepN'
p7427
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7428
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p7429
Nsg70
Vy
sS'block_loop.thisTrialN'
p7430
I0
sg39
F0.7499308635815396
sg34
g753
(S'\x07\xdf\x07\t\x16\x10$\x05zX'
tRp7431
sa(dp7432
S'trial_loop.thisTrialN'
p7433
I73
sg6371
S'20-fruit_pastilles.png'
p7434
sS'block_loop.thisIndex'
p7435
g6365
sg38
S'left'
p7436
sg59
g63
sS'trial_loop.thisN'
p7437
I73
sg33
S'20-fruit_pastilles.png'
p7438
sg64
g65
sS'trial_loop.thisIndex'
p7439
g60
(g99
S'I\x00\x00\x00'
tRp7440
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7441
I0
sg6380
S'2-steamed_puddings.png'
p7442
sS'block_loop.thisRepN'
p7443
I2
sg6383
g7438
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7444
I2
sg6385
S'2-steamed_puddings.png'
p7445
sg55
g11
sS'block_loop.thisTrial'
p7446
Nsg70
Vy
sS'block_loop.thisTrialN'
p7447
I0
sg39
F1.0166275226220023
sg34
g753
(S'\x07\xdf\x07\t\x16\x10*\x02>8'
tRp7448
sa(dp7449
S'trial_loop.thisTrialN'
p7450
I74
sg6371
g6537
sS'block_loop.thisIndex'
p7451
g6365
sg38
S'right'
p7452
sg59
g63
sS'trial_loop.thisN'
p7453
I74
sg33
g6428
sg64
g65
sS'trial_loop.thisIndex'
p7454
g60
(g99
S'J\x00\x00\x00'
tRp7455
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7456
I0
sg6380
g6544
sS'block_loop.thisRepN'
p7457
I2
sg6383
g6428
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7458
I2
sg6385
g6435
sg55
g11
sS'block_loop.thisTrial'
p7459
Nsg70
Vy
sS'block_loop.thisTrialN'
p7460
I0
sg39
F0.81663795723579824
sg34
g753
(S'\x07\xdf\x07\t\x16\x100\x03\tX'
tRp7461
sa(dp7462
S'trial_loop.thisTrialN'
p7463
I75
sg6371
g6631
sS'block_loop.thisIndex'
p7464
g6365
sg38
S'left'
p7465
sg59
g63
sS'trial_loop.thisN'
p7466
I75
sg33
g6635
sg64
g65
sS'trial_loop.thisIndex'
p7467
g60
(g99
S'K\x00\x00\x00'
tRp7468
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7469
I0
sg6380
g6639
sS'block_loop.thisRepN'
p7470
I2
sg6383
g6635
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7471
I2
sg6385
g6642
sg55
g11
sS'block_loop.thisTrial'
p7472
Nsg70
Vy
sS'block_loop.thisTrialN'
p7473
I0
sg39
F0.58332264213822782
sg34
g753
(S'\x07\xdf\x07\t\x16\x106\x00\xc3P'
tRp7474
sa(dp7475
S'trial_loop.thisTrialN'
p7476
I76
sg6371
g6614
sS'block_loop.thisIndex'
p7477
g6365
sg38
S'right'
p7478
sg59
g63
sS'trial_loop.thisN'
p7479
I76
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p7480
g60
(g99
S'L\x00\x00\x00'
tRp7481
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7482
I0
sg6380
g6622
sS'block_loop.thisRepN'
p7483
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7484
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p7485
Nsg70
Vy
sS'block_loop.thisTrialN'
p7486
I0
sg39
F0.8665538816494518
sg34
g753
(S'\x07\xdf\x07\t\x16\x10;\n)\x90'
tRp7487
sa(dp7488
S'trial_loop.thisTrialN'
p7489
I77
sg6371
g6441
sS'block_loop.thisIndex'
p7490
g6365
sg38
S'right'
p7491
sg59
g63
sS'trial_loop.thisN'
p7492
I77
sg33
g6452
sg64
g65
sS'trial_loop.thisIndex'
p7493
g60
(g99
S'M\x00\x00\x00'
tRp7494
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7495
I0
sg6380
g6449
sS'block_loop.thisRepN'
p7496
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7497
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p7498
Nsg70
Vy
sS'block_loop.thisTrialN'
p7499
I0
sg39
F0.81658378849533619
sg34
g753
(S'\x07\xdf\x07\t\x16\x11\x05\x08\x93P'
tRp7500
sa(dp7501
S'trial_loop.thisTrialN'
p7502
I78
sg6371
g7123
sS'block_loop.thisIndex'
p7503
g6365
sg38
S'right'
p7504
sg59
g63
sS'trial_loop.thisN'
p7505
I78
sg33
g6665
sg64
g65
sS'trial_loop.thisIndex'
p7506
g60
(g99
S'N\x00\x00\x00'
tRp7507
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7508
I0
sg6380
g7130
sS'block_loop.thisRepN'
p7509
I2
sg6383
g6665
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7510
I2
sg6385
g6672
sg55
g11
sS'block_loop.thisTrial'
p7511
Nsg70
Vy
sS'block_loop.thisTrialN'
p7512
I0
sg39
F1.0664211397233885
sg34
g753
(S'\x07\xdf\x07\t\x16\x11\x0b\x06I`'
tRp7513
sa(dp7514
S'trial_loop.thisTrialN'
p7515
I79
sg6371
g7164
sS'block_loop.thisIndex'
p7516
g6365
sg38
S'left'
p7517
sg59
g63
sS'trial_loop.thisN'
p7518
I79
sg33
g6789
sg64
g65
sS'trial_loop.thisIndex'
p7519
g60
(g99
S'O\x00\x00\x00'
tRp7520
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7521
I0
sg6380
g7171
sS'block_loop.thisRepN'
p7522
I2
sg6383
g6789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7523
I2
sg6385
g6796
sg55
g11
sS'block_loop.thisTrial'
p7524
Nsg70
Vy
sS'block_loop.thisTrialN'
p7525
I0
sg39
F1.300035808388202
sg34
g753
(S'\x07\xdf\x07\t\x16\x11\x11\x07\xd0\x00'
tRp7526
sa(dp7527
S'trial_loop.thisTrialN'
p7528
I80
sg6371
g7039
sS'block_loop.thisIndex'
p7529
g6365
sg38
S'right'
p7530
sg59
g63
sS'trial_loop.thisN'
p7531
I80
sg33
g7049
sg64
g65
sS'trial_loop.thisIndex'
p7532
g60
(g99
S'P\x00\x00\x00'
tRp7533
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7534
I0
sg6380
g7047
sS'block_loop.thisRepN'
p7535
I2
sg6383
g7049
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7536
I2
sg6385
g7043
sg55
g11
sS'block_loop.thisTrial'
p7537
Nsg70
Vy
sS'block_loop.thisTrialN'
p7538
I0
sg39
F0.99998431957646972
sg34
g753
(S'\x07\xdf\x07\t\x16\x11\x17\x0c\xe8\xb0'
tRp7539
sa(dp7540
S'trial_loop.thisTrialN'
p7541
I81
sg6371
S'2-steamed_puddings.png'
p7542
sS'block_loop.thisIndex'
p7543
g6365
sg38
S'right'
p7544
sg59
g63
sS'trial_loop.thisN'
p7545
I81
sg33
g7438
sg64
g65
sS'trial_loop.thisIndex'
p7546
g60
(g99
S'Q\x00\x00\x00'
tRp7547
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7548
I0
sg6380
S'20-fruit_pastilles.png'
p7549
sS'block_loop.thisRepN'
p7550
I2
sg6383
g7438
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7551
I2
sg6385
g7445
sg55
g11
sS'block_loop.thisTrial'
p7552
Nsg70
Vy
sS'block_loop.thisTrialN'
p7553
I0
sg39
F1.1165759767900454
sg34
g753
(S'\x07\xdf\x07\t\x16\x11\x1d\ry8'
tRp7554
sa(dp7555
S'trial_loop.thisTrialN'
p7556
I82
sg6371
g7164
sS'block_loop.thisIndex'
p7557
g6365
sg38
S'left'
p7558
sg59
g63
sS'trial_loop.thisN'
p7559
I82
sg33
g6789
sg64
g65
sS'trial_loop.thisIndex'
p7560
g60
(g99
S'R\x00\x00\x00'
tRp7561
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7562
I0
sg6380
g7171
sS'block_loop.thisRepN'
p7563
I2
sg6383
g6789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7564
I2
sg6385
g6796
sg55
g11
sS'block_loop.thisTrial'
p7565
Nsg70
Vy
sS'block_loop.thisTrialN'
p7566
I0
sg39
F0.81665563335263869
sg34
g753
(S'\x07\xdf\x07\t\x16\x11$\x00qH'
tRp7567
sa(dp7568
S'trial_loop.thisTrialN'
p7569
I83
sg6371
g7205
sS'block_loop.thisIndex'
p7570
g6365
sg38
S'left'
p7571
sg59
g63
sS'trial_loop.thisN'
p7572
I83
sg33
g6586
sg64
g65
sS'trial_loop.thisIndex'
p7573
g60
(g99
S'S\x00\x00\x00'
tRp7574
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7575
I0
sg6380
g7212
sS'block_loop.thisRepN'
p7576
I2
sg6383
g6586
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7577
I2
sg6385
g6593
sg55
g11
sS'block_loop.thisTrial'
p7578
Nsg70
Vy
sS'block_loop.thisTrialN'
p7579
I0
sg39
F1.3164201418767334
sg34
g753
(S'\x07\xdf\x07\t\x16\x11)\ri\x98'
tRp7580
sa(dp7581
S'trial_loop.thisTrialN'
p7582
I84
sg6371
g6631
sS'block_loop.thisIndex'
p7583
g6365
sg38
S'left'
p7584
sg59
g63
sS'trial_loop.thisN'
p7585
I84
sg33
g6635
sg64
g65
sS'trial_loop.thisIndex'
p7586
g60
(g99
S'T\x00\x00\x00'
tRp7587
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7588
I0
sg6380
g6639
sS'block_loop.thisRepN'
p7589
I2
sg6383
g6635
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7590
I2
sg6385
g6642
sg55
g11
sS'block_loop.thisTrial'
p7591
Nsg70
Vy
sS'block_loop.thisTrialN'
p7592
I0
sg39
F1.3666781846550293
sg34
g753
(S'\x07\xdf\x07\t\x16\x110\x03z\xa0'
tRp7593
sa(dp7594
S'trial_loop.thisTrialN'
p7595
I85
sg6371
g6537
sS'block_loop.thisIndex'
p7596
g6365
sg38
S'right'
p7597
sg59
g63
sS'trial_loop.thisN'
p7598
I85
sg33
g6428
sg64
g65
sS'trial_loop.thisIndex'
p7599
g60
(g99
S'U\x00\x00\x00'
tRp7600
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7601
I0
sg6380
g6544
sS'block_loop.thisRepN'
p7602
I2
sg6383
g6428
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7603
I2
sg6385
g6435
sg55
g11
sS'block_loop.thisTrial'
p7604
Nsg70
Vy
sS'block_loop.thisTrialN'
p7605
I0
sg39
F0.98326128890766995
sg34
g753
(S'\x07\xdf\x07\t\x16\x116\t\x85\x80'
tRp7606
sa(dp7607
S'trial_loop.thisTrialN'
p7608
I86
sg6371
g7164
sS'block_loop.thisIndex'
p7609
g6365
sg38
S'left'
p7610
sg59
g63
sS'trial_loop.thisN'
p7611
I86
sg33
g6789
sg64
g65
sS'trial_loop.thisIndex'
p7612
g60
(g99
S'V\x00\x00\x00'
tRp7613
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7614
I0
sg6380
g7171
sS'block_loop.thisRepN'
p7615
I2
sg6383
g6789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7616
I2
sg6385
g6796
sg55
g11
sS'block_loop.thisTrial'
p7617
Nsg70
Vy
sS'block_loop.thisTrialN'
p7618
I0
sg39
F0.70000439052091679
sg34
g753
(S'\x07\xdf\x07\t\x16\x12\x00\t\xdbp'
tRp7619
sa(dp7620
S'trial_loop.thisTrialN'
p7621
I87
sg6371
g7011
sS'block_loop.thisIndex'
p7622
g6365
sg38
S'right'
p7623
sg59
g63
sS'trial_loop.thisN'
p7624
I87
sg33
g6635
sg64
g65
sS'trial_loop.thisIndex'
p7625
g60
(g99
S'W\x00\x00\x00'
tRp7626
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7627
I0
sg6380
g7018
sS'block_loop.thisRepN'
p7628
I2
sg6383
g6635
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7629
I2
sg6385
g6642
sg55
g11
sS'block_loop.thisTrial'
p7630
Nsg70
Vy
sS'block_loop.thisTrialN'
p7631
I0
sg39
F0.59992963765398599
sg34
g753
(S'\x07\xdf\x07\t\x16\x12\x06\x05\xa98'
tRp7632
sa(dp7633
S'trial_loop.thisTrialN'
p7634
I88
sg6371
g7123
sS'block_loop.thisIndex'
p7635
g6365
sg38
S'right'
p7636
sg59
g63
sS'trial_loop.thisN'
p7637
I88
sg33
g6672
sg64
g65
sS'trial_loop.thisIndex'
p7638
g60
(g99
S'X\x00\x00\x00'
tRp7639
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7640
I0
sg6380
g7130
sS'block_loop.thisRepN'
p7641
I2
sg6383
g6665
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7642
I2
sg6385
g6672
sg55
g11
sS'block_loop.thisTrial'
p7643
Nsg70
Vy
sS'block_loop.thisTrialN'
p7644
I0
sg39
F1.2998906931825331
sg34
g753
(S'\x07\xdf\x07\t\x16\x12\x0c\x00FP'
tRp7645
sa(dp7646
S'trial_loop.thisTrialN'
p7647
I89
sg6371
g6875
sS'block_loop.thisIndex'
p7648
g6365
sg38
S'left'
p7649
sg59
g63
sS'trial_loop.thisN'
p7650
I89
sg33
g6507
sg64
g65
sS'trial_loop.thisIndex'
p7651
g60
(g99
S'Y\x00\x00\x00'
tRp7652
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7653
I0
sg6380
g6882
sS'block_loop.thisRepN'
p7654
I2
sg6383
g6507
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7655
I2
sg6385
g6514
sg55
g11
sS'block_loop.thisTrial'
p7656
Nsg70
Vy
sS'block_loop.thisTrialN'
p7657
I0
sg39
F0.70000267992872978
sg34
g753
(S'\x07\xdf\x07\t\x16\x12\x12\x05_\x00'
tRp7658
sa(dp7659
S'trial_loop.thisTrialN'
p7660
I90
sg6371
g6631
sS'block_loop.thisIndex'
p7661
g6365
sg38
S'left'
p7662
sg59
g63
sS'trial_loop.thisN'
p7663
I90
sg33
g6635
sg64
g65
sS'trial_loop.thisIndex'
p7664
g60
(g99
S'Z\x00\x00\x00'
tRp7665
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7666
I0
sg6380
g6639
sS'block_loop.thisRepN'
p7667
I2
sg6383
g6635
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7668
I2
sg6385
g6642
sg55
g11
sS'block_loop.thisTrial'
p7669
Nsg70
Vy
sS'block_loop.thisTrialN'
p7670
I0
sg39
F0.61671738571021706
sg34
g753
(S'\x07\xdf\x07\t\x16\x12\x18\x01,\xc8'
tRp7671
sa(dp7672
S'trial_loop.thisTrialN'
p7673
I91
sg6371
g7434
sS'block_loop.thisIndex'
p7674
g6365
sg38
S'left'
p7675
sg59
g63
sS'trial_loop.thisN'
p7676
I91
sg33
g7438
sg64
g65
sS'trial_loop.thisIndex'
p7677
g60
(g99
S'[\x00\x00\x00'
tRp7678
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7679
I0
sg6380
g7442
sS'block_loop.thisRepN'
p7680
I2
sg6383
g7438
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7681
I2
sg6385
g7445
sg55
g11
sS'block_loop.thisTrial'
p7682
Nsg70
Vy
sS'block_loop.thisTrialN'
p7683
I0
sg39
F0.81668784949579276
sg34
g753
(S'\x07\xdf\x07\t\x16\x12\x1d\x0b\x0c '
tRp7684
sa(dp7685
S'trial_loop.thisTrialN'
p7686
I92
sg6371
g7393
sS'block_loop.thisIndex'
p7687
g6365
sg38
S'right'
p7688
sg59
g63
sS'trial_loop.thisN'
p7689
I92
sg33
g6772
sg64
g65
sS'trial_loop.thisIndex'
p7690
g60
(g99
S'\\\x00\x00\x00'
tRp7691
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7692
I0
sg6380
g7400
sS'block_loop.thisRepN'
p7693
I2
sg6383
g6772
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7694
I2
sg6385
g6779
sg55
g11
sS'block_loop.thisTrial'
p7695
Nsg70
Vy
sS'block_loop.thisTrialN'
p7696
I0
sg39
F0.86654989027010743
sg34
g753
(S'\x07\xdf\x07\t\x16\x12#\x08\xc20'
tRp7697
sa(dp7698
S'trial_loop.thisTrialN'
p7699
I93
sg6371
g6678
sS'block_loop.thisIndex'
p7700
g6365
sg38
S'left'
p7701
sg59
g63
sS'trial_loop.thisN'
p7702
I93
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p7703
g60
(g99
S']\x00\x00\x00'
tRp7704
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7705
I0
sg6380
g6686
sS'block_loop.thisRepN'
p7706
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7707
I2
sg6385
g6682
sg55
g11
sS'block_loop.thisTrial'
p7708
Nsg70
Vy
sS'block_loop.thisTrialN'
p7709
I0
sg39
F0.55002084071020363
sg34
g753
(S'\x07\xdf\x07\t\x16\x12)\x07/\xd8'
tRp7710
sa(dp7711
S'trial_loop.thisTrialN'
p7712
I94
sg6371
g6582
sS'block_loop.thisIndex'
p7713
g6365
sg38
S'right'
p7714
sg59
g63
sS'trial_loop.thisN'
p7715
I94
sg33
g6586
sg64
g65
sS'trial_loop.thisIndex'
p7716
g60
(g99
S'^\x00\x00\x00'
tRp7717
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7718
I0
sg6380
g6590
sS'block_loop.thisRepN'
p7719
I2
sg6383
g6586
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7720
I2
sg6385
g6593
sg55
g11
sS'block_loop.thisTrial'
p7721
Nsg70
Vy
sS'block_loop.thisTrialN'
p7722
I0
sg39
F0.88296330381854204
sg34
g753
(S'\x07\xdf\x07\t\x16\x12/\x00\xda\xc0'
tRp7723
sa(dp7724
S'trial_loop.thisTrialN'
p7725
I95
sg6371
g6599
sS'block_loop.thisIndex'
p7726
g6365
sg38
S'left'
p7727
sg59
g63
sS'trial_loop.thisN'
p7728
I95
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p7729
g60
(g99
S'_\x00\x00\x00'
tRp7730
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7731
I0
sg6380
g6606
sS'block_loop.thisRepN'
p7732
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7733
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p7734
Nsg70
Vy
sS'block_loop.thisTrialN'
p7735
I0
sg39
F0.59990454897342715
sg34
g753
(S'\x07\xdf\x07\t\x16\x124\x0f\x03\xc0'
tRp7736
sa(dp7737
S'trial_loop.thisTrialN'
p7738
I96
sg6371
g6458
sS'block_loop.thisIndex'
p7739
g6365
sg38
S'right'
p7740
sg59
g63
sS'trial_loop.thisN'
p7741
I96
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p7742
g60
(g99
S'`\x00\x00\x00'
tRp7743
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7744
I0
sg6380
g6466
sS'block_loop.thisRepN'
p7745
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7746
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p7747
Nsg70
Vy
sS'block_loop.thisTrialN'
p7748
I0
sg39
F0.65042402719700476
sg34
g753
(S'\x07\xdf\x07\t\x16\x12:\tf@'
tRp7749
sa(dp7750
S'trial_loop.thisTrialN'
p7751
I97
sg6371
g7393
sS'block_loop.thisIndex'
p7752
g6365
sg38
S'right'
p7753
sg59
g63
sS'trial_loop.thisN'
p7754
I97
sg33
g6772
sg64
g65
sS'trial_loop.thisIndex'
p7755
g60
(g99
S'a\x00\x00\x00'
tRp7756
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7757
I0
sg6380
g7400
sS'block_loop.thisRepN'
p7758
I2
sg6383
g6772
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7759
I2
sg6385
g6779
sg55
g11
sS'block_loop.thisTrial'
p7760
Nsg70
Vy
sS'block_loop.thisTrialN'
p7761
I0
sg39
F1.0497842088443576
sg34
g753
(S'\x07\xdf\x07\t\x16\x13\x04\x04|p'
tRp7762
sa(dp7763
S'trial_loop.thisTrialN'
p7764
I98
sg6371
g6725
sS'block_loop.thisIndex'
p7765
g6365
sg38
S'left'
p7766
sg59
g63
sS'trial_loop.thisN'
p7767
I98
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p7768
g60
(g99
S'b\x00\x00\x00'
tRp7769
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7770
I0
sg6380
g6732
sS'block_loop.thisRepN'
p7771
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7772
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p7773
Nsg70
Vy
sS'block_loop.thisTrialN'
p7774
I0
sg39
F0.58311423502891557
sg34
g753
(S'\x07\xdf\x07\t\x16\x13\n\x05\xc4\x90'
tRp7775
sa(dp7776
S'trial_loop.thisTrialN'
p7777
I99
sg6371
g6552
sS'block_loop.thisIndex'
p7778
g6365
sg38
S'left'
p7779
sg59
g63
sS'trial_loop.thisN'
p7780
I99
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p7781
g60
(g99
S'c\x00\x00\x00'
tRp7782
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7783
I0
sg6380
g6560
sS'block_loop.thisRepN'
p7784
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7785
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p7786
Nsg70
Vy
sS'block_loop.thisTrialN'
p7787
I0
sg39
F0.74988980937632732
sg34
g753
(S'\x07\xdf\x07\t\x16\x13\x0f\x0f*\xd0'
tRp7788
sa(dp7789
S'trial_loop.thisTrialN'
p7790
I100
sg6371
g6875
sS'block_loop.thisIndex'
p7791
g6365
sg38
S'left'
p7792
sg59
g63
sS'trial_loop.thisN'
p7793
I100
sg33
g6507
sg64
g65
sS'trial_loop.thisIndex'
p7794
g60
(g99
S'd\x00\x00\x00'
tRp7795
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7796
I0
sg6380
g6882
sS'block_loop.thisRepN'
p7797
I2
sg6383
g6507
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7798
I2
sg6385
g6514
sg55
g11
sS'block_loop.thisTrial'
p7799
Nsg70
Vy
sS'block_loop.thisTrialN'
p7800
I0
sg39
F0.64998811138502788
sg34
g753
(S'\x07\xdf\x07\t\x16\x13\x15\x0b\xee\xb0'
tRp7801
sa(dp7802
S'trial_loop.thisTrialN'
p7803
I101
sg6371
g6372
sS'block_loop.thisIndex'
p7804
g6365
sg38
S'left'
p7805
sg59
g63
sS'trial_loop.thisN'
p7806
I101
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7807
g60
(g99
S'e\x00\x00\x00'
tRp7808
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7809
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7810
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7811
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7812
Nsg70
Vy
sS'block_loop.thisTrialN'
p7813
I0
sg39
F1.1666709431447089
sg34
g753
(S'\x07\xdf\x07\t\x16\x13\x1b\x07\x04\xe0'
tRp7814
sa(dp7815
S'trial_loop.thisTrialN'
p7816
I102
sg6371
g6768
sS'block_loop.thisIndex'
p7817
g6365
sg38
S'left'
p7818
sg59
g63
sS'trial_loop.thisN'
p7819
I102
sg33
g6772
sg64
g65
sS'trial_loop.thisIndex'
p7820
g60
(g99
S'f\x00\x00\x00'
tRp7821
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7822
I0
sg6380
g6776
sS'block_loop.thisRepN'
p7823
I2
sg6383
g6772
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7824
I2
sg6385
g6779
sg55
g11
sS'block_loop.thisTrial'
p7825
Nsg70
Vy
sS'block_loop.thisTrialN'
p7826
I0
sg39
F1.0002716989984037
sg34
g753
(S'\x07\xdf\x07\t\x16\x13!\n5H'
tRp7827
sa(dp7828
S'trial_loop.thisTrialN'
p7829
I103
sg6371
S'22-daim.png'
p7830
sS'block_loop.thisIndex'
p7831
g6365
sg38
S'left'
p7832
sg59
g63
sS'trial_loop.thisN'
p7833
I103
sg33
g6618
sg64
g65
sS'trial_loop.thisIndex'
p7834
g60
(g99
S'g\x00\x00\x00'
tRp7835
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7836
I0
sg6380
S'7-olives.png'
p7837
sS'block_loop.thisRepN'
p7838
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7839
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p7840
Nsg70
Vy
sS'block_loop.thisTrialN'
p7841
I0
sg39
F1.0832371125434292
sg34
g753
(S"\x07\xdf\x07\t\x16\x13'\n\x8b8"
tRp7842
sa(dp7843
S'trial_loop.thisTrialN'
p7844
I104
sg6371
g6916
sS'block_loop.thisIndex'
p7845
g6365
sg38
S'right'
p7846
sg59
g63
sS'trial_loop.thisN'
p7847
I104
sg33
g6699
sg64
g65
sS'trial_loop.thisIndex'
p7848
g60
(g99
S'h\x00\x00\x00'
tRp7849
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7850
I0
sg6380
g6923
sS'block_loop.thisRepN'
p7851
I2
sg6383
g6699
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7852
I2
sg6385
g6706
sg55
g11
sS'block_loop.thisTrial'
p7853
Nsg70
Vy
sS'block_loop.thisTrialN'
p7854
I0
sg39
F0.84992692922241986
sg34
g753
(S'\x07\xdf\x07\t\x16\x13-\x0cLp'
tRp7855
sa(dp7856
S'trial_loop.thisTrialN'
p7857
I105
sg6371
g6424
sS'block_loop.thisIndex'
p7858
g6365
sg38
S'left'
p7859
sg59
g63
sS'trial_loop.thisN'
p7860
I105
sg33
g6435
sg64
g65
sS'trial_loop.thisIndex'
p7861
g60
(g99
S'i\x00\x00\x00'
tRp7862
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7863
I0
sg6380
g6432
sS'block_loop.thisRepN'
p7864
I2
sg6383
g6428
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7865
I2
sg6385
g6435
sg55
g11
sS'block_loop.thisTrial'
p7866
Nsg70
Vy
sS'block_loop.thisTrialN'
p7867
I0
sg39
F0.83329541521379724
sg34
g753
(S'\x07\xdf\x07\t\x16\x133\n{\x98'
tRp7868
sa(dp7869
S'trial_loop.thisTrialN'
p7870
I106
sg6371
g6392
sS'block_loop.thisIndex'
p7871
g6365
sg38
S'right'
p7872
sg59
g63
sS'trial_loop.thisN'
p7873
I106
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7874
g60
(g99
S'j\x00\x00\x00'
tRp7875
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7876
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7877
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7878
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7879
Nsg70
Vy
sS'block_loop.thisTrialN'
p7880
I0
sg39
F0.89990785611735191
sg34
g753
(S'\x07\xdf\x07\t\x16\x139\x08\xaa\xc0'
tRp7881
sa(dp7882
S'trial_loop.thisTrialN'
p7883
I107
sg6371
g6753
sS'block_loop.thisIndex'
p7884
g6365
sg38
S'right'
p7885
sg59
g63
sS'trial_loop.thisN'
p7886
I107
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p7887
g60
(g99
S'k\x00\x00\x00'
tRp7888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7889
I0
sg6380
g6760
sS'block_loop.thisRepN'
p7890
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7891
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p7892
Nsg70
Vy
sS'block_loop.thisTrialN'
p7893
I0
sg39
F1.0499364515126217
sg34
g753
(S'\x07\xdf\x07\t\x16\x14\x03\x07\x91\x80'
tRp7894
sa(dp7895
S'trial_loop.thisTrialN'
p7896
I108
sg6371
g6875
sS'block_loop.thisIndex'
p7897
g6365
sg38
S'left'
p7898
sg59
g63
sS'trial_loop.thisN'
p7899
I108
sg33
g6507
sg64
g65
sS'trial_loop.thisIndex'
p7900
g60
(g99
S'l\x00\x00\x00'
tRp7901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7902
I0
sg6380
g6882
sS'block_loop.thisRepN'
p7903
I2
sg6383
g6507
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7904
I2
sg6385
g6514
sg55
g11
sS'block_loop.thisTrial'
p7905
Nsg70
Vy
sS'block_loop.thisTrialN'
p7906
I0
sg39
F0.68334835802670568
sg34
g753
(S'\x07\xdf\x07\t\x16\x14\t\x08\xd9\xa0'
tRp7907
sa(dp7908
S'trial_loop.thisTrialN'
p7909
I109
sg6371
g7039
sS'block_loop.thisIndex'
p7910
g6365
sg38
S'right'
p7911
sg59
g63
sS'trial_loop.thisN'
p7912
I109
sg33
g7049
sg64
g65
sS'trial_loop.thisIndex'
p7913
g60
(g99
S'm\x00\x00\x00'
tRp7914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7915
I0
sg6380
g7047
sS'block_loop.thisRepN'
p7916
I2
sg6383
g7049
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7917
I2
sg6385
g7043
sg55
g11
sS'block_loop.thisTrial'
p7918
Nsg70
Vy
sS'block_loop.thisTrialN'
p7919
I0
sg39
F0.9832709822585457
sg34
g753
(S'\x07\xdf\x07\t\x16\x14\x0f\x04l\xd0'
tRp7920
sa(dp7921
S'trial_loop.thisTrialN'
p7922
I110
sg6371
g6614
sS'block_loop.thisIndex'
p7923
g6365
sg38
S'right'
p7924
sg59
g63
sS'trial_loop.thisN'
p7925
I110
sg33
g6618
sg64
g65
sS'trial_loop.thisIndex'
p7926
g60
(g99
S'n\x00\x00\x00'
tRp7927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7928
I0
sg6380
g6622
sS'block_loop.thisRepN'
p7929
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7930
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p7931
Nsg70
Vy
sS'block_loop.thisTrialN'
p7932
I0
sg39
F1.0332390797193511
sg34
g753
(S'\x07\xdf\x07\t\x16\x14\x15\x04\xbe\xd8'
tRp7933
sa(dp7934
S'trial_loop.thisTrialN'
p7935
I111
sg6371
g7272
sS'block_loop.thisIndex'
p7936
g6365
sg38
S'right'
p7937
sg59
g63
sS'trial_loop.thisN'
p7938
I111
sg33
g6849
sg64
g65
sS'trial_loop.thisIndex'
p7939
g60
(g99
S'o\x00\x00\x00'
tRp7940
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7941
I0
sg6380
g7279
sS'block_loop.thisRepN'
p7942
I2
sg6383
g6849
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7943
I2
sg6385
g6856
sg55
g11
sS'block_loop.thisTrial'
p7944
Nsg70
Vy
sS'block_loop.thisTrialN'
p7945
I0
sg39
F0.81667587535775965
sg34
g753
(S'\x07\xdf\x07\t\x16\x14\x1b\x05\xcc`'
tRp7946
sa(dp7947
S'trial_loop.thisTrialN'
p7948
I112
sg6371
g6695
sS'block_loop.thisIndex'
p7949
g6365
sg38
S'left'
p7950
sg59
g63
sS'trial_loop.thisN'
p7951
I112
sg33
g6706
sg64
g65
sS'trial_loop.thisIndex'
p7952
g60
(g99
S'p\x00\x00\x00'
tRp7953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7954
I0
sg6380
g6703
sS'block_loop.thisRepN'
p7955
I2
sg6383
g6699
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7956
I2
sg6385
g6706
sg55
g11
sS'block_loop.thisTrial'
p7957
Nsg70
Vy
sS'block_loop.thisTrialN'
p7958
I0
sg39
F0.73336150107934372
sg34
g753
(S'\x07\xdf\x07\t\x16\x14!\x03\x82p'
tRp7959
sa(dp7960
S'trial_loop.thisTrialN'
p7961
I113
sg6371
g6475
sS'block_loop.thisIndex'
p7962
g6365
sg38
S'left'
p7963
sg59
g63
sS'trial_loop.thisN'
p7964
I113
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7965
g60
(g99
S'q\x00\x00\x00'
tRp7966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7967
I0
sg6380
g6482
sS'block_loop.thisRepN'
p7968
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7969
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7970
Nsg70
Vy
sS'block_loop.thisTrialN'
p7971
I0
sg39
F0.94998942284291843
sg34
g753
(S"\x07\xdf\x07\t\x16\x14'\x00\x07\xd0"
tRp7972
sa(dp7973
S'trial_loop.thisTrialN'
p7974
I114
sg6371
g7393
sS'block_loop.thisIndex'
p7975
g6365
sg38
S'right'
p7976
sg59
g63
sS'trial_loop.thisN'
p7977
I114
sg33
g6772
sg64
g65
sS'trial_loop.thisIndex'
p7978
g60
(g99
S'r\x00\x00\x00'
tRp7979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7980
I0
sg6380
g7400
sS'block_loop.thisRepN'
p7981
I2
sg6383
g6772
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7982
I2
sg6385
g6779
sg55
g11
sS'block_loop.thisTrial'
p7983
Nsg70
Vy
sS'block_loop.thisTrialN'
p7984
I0
sg39
F0.64989716491982108
sg34
g753
(S'\x07\xdf\x07\t\x16\x14,\x0e\xe8h'
tRp7985
sa(dp7986
S'trial_loop.thisTrialN'
p7987
I115
sg6371
S'23-crunchie_redo.png'
p7988
sS'block_loop.thisIndex'
p7989
g6365
sg38
S'right'
p7990
sg59
g63
sS'trial_loop.thisN'
p7991
I115
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p7992
g60
(g99
S's\x00\x00\x00'
tRp7993
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7994
I0
sg6380
S'33-ambrosia_rice.png'
p7995
sS'block_loop.thisRepN'
p7996
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7997
I2
sg6385
g6682
sg55
g11
sS'block_loop.thisTrial'
p7998
Nsg70
Vy
sS'block_loop.thisTrialN'
p7999
I0
sg39
F0.71658002519689035
sg34
g753
(S'\x07\xdf\x07\t\x16\x142\t\xfe\x98'
tRp8000
sa(dp8001
S'trial_loop.thisTrialN'
p8002
I116
sg6371
g6475
sS'block_loop.thisIndex'
p8003
g6365
sg38
S'left'
p8004
sg59
g63
sS'trial_loop.thisN'
p8005
I116
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8006
g60
(g99
S't\x00\x00\x00'
tRp8007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8008
I0
sg6380
g6482
sS'block_loop.thisRepN'
p8009
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8010
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8011
Nsg70
Vy
sS'block_loop.thisTrialN'
p8012
I0
sg39
F0.53327842333965236
sg34
g753
(S'\x07\xdf\x07\t\x16\x148\x06I`'
tRp8013
sa(dp8014
S'trial_loop.thisTrialN'
p8015
I117
sg6371
g6424
sS'block_loop.thisIndex'
p8016
g6365
sg38
S'left'
p8017
sg59
g63
sS'trial_loop.thisN'
p8018
I117
sg33
g6428
sg64
g65
sS'trial_loop.thisIndex'
p8019
g60
(g99
S'u\x00\x00\x00'
tRp8020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8021
I0
sg6380
g6432
sS'block_loop.thisRepN'
p8022
I2
sg6383
g6428
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8023
I2
sg6385
g6435
sg55
g11
sS'block_loop.thisTrial'
p8024
Nsg70
Vy
sS'block_loop.thisTrialN'
p8025
I0
sg39
F0.68335035372001585
sg34
g753
(S'\x07\xdf\x07\t\x16\x15\x01\x0e\xf8\x08'
tRp8026
sa(dp8027
S'trial_loop.thisTrialN'
p8028
I118
sg6371
g7988
sS'block_loop.thisIndex'
p8029
g6365
sg38
S'right'
p8030
sg59
g63
sS'trial_loop.thisN'
p8031
I118
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p8032
g60
(g99
S'v\x00\x00\x00'
tRp8033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8034
I0
sg6380
g7995
sS'block_loop.thisRepN'
p8035
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8036
I2
sg6385
g6682
sg55
g11
sS'block_loop.thisTrial'
p8037
Nsg70
Vy
sS'block_loop.thisTrialN'
p8038
I0
sg39
F0.70000182463263627
sg34
g753
(S'\x07\xdf\x07\t\x16\x15\x07\n\x87P'
tRp8039
sa(dp8040
S'trial_loop.thisTrialN'
p8041
I119
sg6371
g6503
sS'block_loop.thisIndex'
p8042
g6365
sg38
S'right'
p8043
sg59
g63
sS'trial_loop.thisN'
p8044
I119
sg33
g6507
sg64
g65
sS'trial_loop.thisIndex'
p8045
g60
(g99
S'w\x00\x00\x00'
tRp8046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8047
I0
sg6380
g6511
sS'block_loop.thisRepN'
p8048
I2
sg6383
g6507
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8049
I2
sg6385
g6514
sg55
g11
sS'block_loop.thisTrial'
p8050
Nsg70
Vy
sS'block_loop.thisTrialN'
p8051
I0
sg39
F0.88373135953588644
sg34
g753
(S'\x07\xdf\x07\t\x16\x15\r\x06\x93\x98'
tRp8052
sa(dp8053
S'trial_loop.thisTrialN'
p8054
I120
sg6371
g7378
sS'block_loop.thisIndex'
p8055
g6365
sg38
S'left'
p8056
sg59
g63
sS'trial_loop.thisN'
p8057
I120
sg33
g6832
sg64
g65
sS'trial_loop.thisIndex'
p8058
g60
(g99
S'x\x00\x00\x00'
tRp8059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8060
I0
sg6380
g7385
sS'block_loop.thisRepN'
p8061
I2
sg6383
g6832
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8062
I2
sg6385
g6839
sg55
g11
sS'block_loop.thisTrial'
p8063
Nsg70
Vy
sS'block_loop.thisTrialN'
p8064
I0
sg39
F0.90001904458767967
sg34
g753
(S'\x07\xdf\x07\t\x16\x15\x13\x05?\xc0'
tRp8065
sa(dp8066
S'trial_loop.thisTrialN'
p8067
I121
sg6371
g7272
sS'block_loop.thisIndex'
p8068
g6365
sg38
S'right'
p8069
sg59
g63
sS'trial_loop.thisN'
p8070
I121
sg33
g6856
sg64
g65
sS'trial_loop.thisIndex'
p8071
g60
(g99
S'y\x00\x00\x00'
tRp8072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8073
I0
sg6380
g7279
sS'block_loop.thisRepN'
p8074
I2
sg6383
g6849
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8075
I2
sg6385
g6856
sg55
g11
sS'block_loop.thisTrial'
p8076
Nsg70
Vy
sS'block_loop.thisTrialN'
p8077
I0
sg39
F0.86662715199781815
sg34
g753
(S'\x07\xdf\x07\t\x16\x15\x19\x04&\x80'
tRp8078
sa(dp8079
S'trial_loop.thisTrialN'
p8080
I122
sg6371
g6392
sS'block_loop.thisIndex'
p8081
g6365
sg38
S'right'
p8082
sg59
g63
sS'trial_loop.thisN'
p8083
I122
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8084
g60
(g99
S'z\x00\x00\x00'
tRp8085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8086
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8087
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8088
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8089
Nsg70
Vy
sS'block_loop.thisTrialN'
p8090
I0
sg39
F0.6835425102035515
sg34
g753
(S'\x07\xdf\x07\t\x16\x15\x1f\x02\xce\xc0'
tRp8091
sa(dp8092
S'trial_loop.thisTrialN'
p8093
I123
sg6371
g7542
sS'block_loop.thisIndex'
p8094
g6365
sg38
S'right'
p8095
sg59
g63
sS'trial_loop.thisN'
p8096
I123
sg33
g7438
sg64
g65
sS'trial_loop.thisIndex'
p8097
g60
(g99
S'{\x00\x00\x00'
tRp8098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8099
I0
sg6380
g7549
sS'block_loop.thisRepN'
p8100
I2
sg6383
g7438
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8101
I2
sg6385
g7445
sg55
g11
sS'block_loop.thisTrial'
p8102
Nsg70
Vy
sS'block_loop.thisTrialN'
p8103
I0
sg39
F1.0499390174009022
sg34
g753
(S'\x07\xdf\x07\t\x16\x15$\r\xa40'
tRp8104
sa(dp8105
S'trial_loop.thisTrialN'
p8106
I124
sg6371
g6916
sS'block_loop.thisIndex'
p8107
g6365
sg38
S'right'
p8108
sg59
g63
sS'trial_loop.thisN'
p8109
I124
sg33
g6699
sg64
g65
sS'trial_loop.thisIndex'
p8110
g60
(g99
S'|\x00\x00\x00'
tRp8111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8112
I0
sg6380
g6923
sS'block_loop.thisRepN'
p8113
I2
sg6383
g6699
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8114
I2
sg6385
g6706
sg55
g11
sS'block_loop.thisTrial'
p8115
Nsg70
Vy
sS'block_loop.thisTrialN'
p8116
I0
sg39
F1.2999765078711789
sg34
g753
(S'\x07\xdf\x07\t\x16\x15*\x0e\xecP'
tRp8117
sa(dp8118
S'trial_loop.thisTrialN'
p8119
I125
sg6371
g6552
sS'block_loop.thisIndex'
p8120
g6365
sg38
S'left'
p8121
sg59
g63
sS'trial_loop.thisN'
p8122
I125
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p8123
g60
(g99
S'}\x00\x00\x00'
tRp8124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8125
I0
sg6380
g6560
sS'block_loop.thisRepN'
p8126
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8127
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p8128
Nsg70
Vy
sS'block_loop.thisTrialN'
p8129
I0
sg39
F0.63328104624815751
sg34
g753
(S'\x07\xdf\x07\t\x16\x151\x04\xbe\xd8'
tRp8130
sa(dp8131
S'trial_loop.thisTrialN'
p8132
I126
sg6371
g6695
sS'block_loop.thisIndex'
p8133
g6365
sg38
S'left'
p8134
sg59
g63
sS'trial_loop.thisN'
p8135
I126
sg33
g6699
sg64
g65
sS'trial_loop.thisIndex'
p8136
g60
(g99
S'~\x00\x00\x00'
tRp8137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8138
I0
sg6380
g6703
sS'block_loop.thisRepN'
p8139
I2
sg6383
g6699
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8140
I2
sg6385
g6706
sg55
g11
sS'block_loop.thisTrial'
p8141
Nsg70
Vy
sS'block_loop.thisTrialN'
p8142
I0
sg39
F0.65004741190205095
sg34
g753
(S'\x07\xdf\x07\t\x16\x156\x0e\xdc\xb0'
tRp8143
sa(dp8144
S'trial_loop.thisTrialN'
p8145
I127
sg6371
g6582
sS'block_loop.thisIndex'
p8146
g6365
sg38
S'right'
p8147
sg59
g63
sS'trial_loop.thisN'
p8148
I127
sg33
g6586
sg64
g65
sS'trial_loop.thisIndex'
p8149
g60
(g99
S'\x7f\x00\x00\x00'
tRp8150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8151
I0
sg6380
g6590
sS'block_loop.thisRepN'
p8152
I2
sg6383
g6586
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8153
I2
sg6385
g6593
sg55
g11
sS'block_loop.thisTrial'
p8154
Nsg70
Vy
sS'block_loop.thisTrialN'
p8155
I0
sg39
F0.78303936812881147
sg34
g753
(S'\x07\xdf\x07\t\x16\x16\x00\n1`'
tRp8156
sa(dp8157
S'trial_loop.thisTrialN'
p8158
I128
sg6371
g6845
sS'block_loop.thisIndex'
p8159
g6365
sg38
S'left'
p8160
sg59
g63
sS'trial_loop.thisN'
p8161
I128
sg33
g6849
sg64
g65
sS'trial_loop.thisIndex'
p8162
g60
(g99
S'\x80\x00\x00\x00'
tRp8163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8164
I0
sg6380
g6853
sS'block_loop.thisRepN'
p8165
I2
sg6383
g6849
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8166
I2
sg6385
g6856
sg55
g11
sS'block_loop.thisTrial'
p8167
Nsg70
Vy
sS'block_loop.thisTrialN'
p8168
I0
sg39
F0.94991900347667979
sg34
g753
(S'\x07\xdf\x07\t\x16\x16\x06\x07/\xd8'
tRp8169
sa(dp8170
S'trial_loop.thisTrialN'
p8171
I129
sg6371
g7988
sS'block_loop.thisIndex'
p8172
g6365
sg38
S'right'
p8173
sg59
g63
sS'trial_loop.thisN'
p8174
I129
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p8175
g60
(g99
S'\x81\x00\x00\x00'
tRp8176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8177
I0
sg6380
g7995
sS'block_loop.thisRepN'
p8178
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8179
I2
sg6385
g6682
sg55
g11
sS'block_loop.thisTrial'
p8180
Nsg70
Vy
sS'block_loop.thisTrialN'
p8181
I0
sg39
F0.66661877009755699
sg34
g753
(S'\x07\xdf\x07\t\x16\x16\x0c\x07\x0c\xb0'
tRp8182
sa(dp8183
S'trial_loop.thisTrialN'
p8184
I130
sg6371
g7205
sS'block_loop.thisIndex'
p8185
g6365
sg38
S'left'
p8186
sg59
g63
sS'trial_loop.thisN'
p8187
I130
sg33
g6586
sg64
g65
sS'trial_loop.thisIndex'
p8188
g60
(g99
S'\x82\x00\x00\x00'
tRp8189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8190
I0
sg6380
g7212
sS'block_loop.thisRepN'
p8191
I2
sg6383
g6586
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8192
I2
sg6385
g6593
sg55
g11
sS'block_loop.thisTrial'
p8193
Nsg70
Vy
sS'block_loop.thisTrialN'
p8194
I0
sg39
F0.51642738337977789
sg34
g753
(S'\x07\xdf\x07\t\x16\x16\x12\x02a`'
tRp8195
sa(dp8196
S'trial_loop.thisTrialN'
p8197
I131
sg6371
g7434
sS'block_loop.thisIndex'
p8198
g6365
sg38
S'left'
p8199
sg59
g63
sS'trial_loop.thisN'
p8200
I131
sg33
g7438
sg64
g65
sS'trial_loop.thisIndex'
p8201
g60
(g99
S'\x83\x00\x00\x00'
tRp8202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8203
I0
sg6380
g7442
sS'block_loop.thisRepN'
p8204
I2
sg6383
g7438
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8205
I2
sg6385
g7445
sg55
g11
sS'block_loop.thisTrial'
p8206
Nsg70
Vy
sS'block_loop.thisTrialN'
p8207
I0
sg39
F0.7999020971255959
sg34
g753
(S'\x07\xdf\x07\t\x16\x16\x17\n\xd1\x88'
tRp8208
sa(dp8209
S'trial_loop.thisTrialN'
p8210
I132
sg6371
g7069
sS'block_loop.thisIndex'
p8211
g6365
sg38
S'left'
p8212
sg59
g63
sS'trial_loop.thisN'
p8213
I132
sg33
g7049
sg64
g65
sS'trial_loop.thisIndex'
p8214
g60
(g99
S'\x84\x00\x00\x00'
tRp8215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8216
I0
sg6380
g7076
sS'block_loop.thisRepN'
p8217
I2
sg6383
g7049
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8218
I2
sg6385
g7043
sg55
g11
sS'block_loop.thisTrial'
p8219
Nsg70
Vy
sS'block_loop.thisTrialN'
p8220
I0
sg39
F0.96665486357960617
sg34
g753
(S'\x07\xdf\x07\t\x16\x16\x1d\x08M\x00'
tRp8221
sa(dp8222
S'trial_loop.thisTrialN'
p8223
I133
sg6371
g6372
sS'block_loop.thisIndex'
p8224
g6365
sg38
S'left'
p8225
sg59
g63
sS'trial_loop.thisN'
p8226
I133
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8227
g60
(g99
S'\x85\x00\x00\x00'
tRp8228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8229
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8230
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8231
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8232
Nsg70
Vy
sS'block_loop.thisTrialN'
p8233
I0
sg39
F0.59991452743270202
sg34
g753
(S'\x07\xdf\x07\t\x16\x16#\x08dp'
tRp8234
sa(dp8235
S'trial_loop.thisTrialN'
p8236
I134
sg6371
g7542
sS'block_loop.thisIndex'
p8237
g6365
sg38
S'right'
p8238
sg59
g63
sS'trial_loop.thisN'
p8239
I134
sg33
g7438
sg64
g65
sS'trial_loop.thisIndex'
p8240
g60
(g99
S'\x86\x00\x00\x00'
tRp8241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8242
I0
sg6380
g7549
sS'block_loop.thisRepN'
p8243
I2
sg6383
g7438
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8244
I2
sg6385
g7445
sg55
g11
sS'block_loop.thisTrial'
p8245
Nsg70
Vy
sS'block_loop.thisTrialN'
p8246
I0
sg39
F0.76660941886075307
sg34
g753
(S'\x07\xdf\x07\t\x16\x16)\x02\xc3\x08'
tRp8247
sa(dp8248
S'trial_loop.thisTrialN'
p8249
I135
sg6371
g7378
sS'block_loop.thisIndex'
p8250
g6365
sg38
S'left'
p8251
sg59
g63
sS'trial_loop.thisN'
p8252
I135
sg33
g6832
sg64
g65
sS'trial_loop.thisIndex'
p8253
g60
(g99
S'\x87\x00\x00\x00'
tRp8254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8255
I0
sg6380
g7385
sS'block_loop.thisRepN'
p8256
I2
sg6383
g6832
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8257
I2
sg6385
g6839
sg55
g11
sS'block_loop.thisTrial'
p8258
Nsg70
Vy
sS'block_loop.thisTrialN'
p8259
I0
sg39
F0.63331924945669016
sg34
g753
(S'\x07\xdf\x07\t\x16\x16.\x0e\xc9('
tRp8260
sa(dp8261
S'trial_loop.thisTrialN'
p8262
I136
sg6371
g7011
sS'block_loop.thisIndex'
p8263
g6365
sg38
S'right'
p8264
sg59
g63
sS'trial_loop.thisN'
p8265
I136
sg33
g6635
sg64
g65
sS'trial_loop.thisIndex'
p8266
g60
(g99
S'\x88\x00\x00\x00'
tRp8267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8268
I0
sg6380
g7018
sS'block_loop.thisRepN'
p8269
I2
sg6383
g6635
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8270
I2
sg6385
g6642
sg55
g11
sS'block_loop.thisTrial'
p8271
Nsg70
Vy
sS'block_loop.thisTrialN'
p8272
I0
sg39
F0.71666755047044717
sg34
g753
(S'\x07\xdf\x07\t\x16\x164\t\xdfX'
tRp8273
sa(dp8274
S'trial_loop.thisTrialN'
p8275
I137
sg6371
g6520
sS'block_loop.thisIndex'
p8276
g6365
sg38
S'right'
p8277
sg59
g63
sS'trial_loop.thisN'
p8278
I137
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p8279
g60
(g99
S'\x89\x00\x00\x00'
tRp8280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8281
I0
sg6380
g6528
sS'block_loop.thisRepN'
p8282
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8283
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p8284
Nsg70
Vy
sS'block_loop.thisTrialN'
p8285
I0
sg39
F0.68320837459759787
sg34
g753
(S'\x07\xdf\x07\t\x16\x16:\x05\xeb\xa0'
tRp8286
sa(dp8287
S'trial_loop.thisTrialN'
p8288
I138
sg6371
g7069
sS'block_loop.thisIndex'
p8289
g6365
sg38
S'left'
p8290
sg59
g63
sS'trial_loop.thisN'
p8291
I138
sg33
g7049
sg64
g65
sS'trial_loop.thisIndex'
p8292
g60
(g99
S'\x8a\x00\x00\x00'
tRp8293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8294
I0
sg6380
g7076
sS'block_loop.thisRepN'
p8295
I2
sg6383
g7049
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8296
I2
sg6385
g7043
sg55
g11
sS'block_loop.thisTrial'
p8297
Nsg70
Vy
sS'block_loop.thisTrialN'
p8298
I0
sg39
F0.61672451318008825
sg34
g753
(S'\x07\xdf\x07\t\x16\x17\x04\x01\xb9h'
tRp8299
sa(dp8300
S'trial_loop.thisTrialN'
p8301
I139
sg6371
g6931
sS'block_loop.thisIndex'
p8302
g6365
sg38
S'left'
p8303
sg59
g63
sS'trial_loop.thisN'
p8304
I139
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p8305
g60
(g99
S'\x8b\x00\x00\x00'
tRp8306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8307
I0
sg6380
g6938
sS'block_loop.thisRepN'
p8308
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8309
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p8310
Nsg70
Vy
sS'block_loop.thisTrialN'
p8311
I0
sg39
F0.9333450794001692
sg34
g753
(S'\x07\xdf\x07\t\x16\x17\t\x0b\x9c\xa8'
tRp8312
sa(dp8313
S'trial_loop.thisTrialN'
p8314
I140
sg6371
g7434
sS'block_loop.thisIndex'
p8315
g6365
sg38
S'right'
p8316
sg59
g63
sS'trial_loop.thisN'
p8317
I140
sg33
g7438
sg64
g65
sS'trial_loop.thisIndex'
p8318
g60
(g99
S'\x8c\x00\x00\x00'
tRp8319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8320
I0
sg6380
g7442
sS'block_loop.thisRepN'
p8321
I2
sg6383
g7438
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8322
I2
sg6385
g7445
sg55
g11
sS'block_loop.thisTrial'
p8323
Nsg70
Vy
sS'block_loop.thisTrialN'
p8324
I0
sg39
F0.81668898989300942
sg34
g753
(S'\x07\xdf\x07\t\x16\x17\x0f\n\xfc\x80'
tRp8325
sa(dp8326
S'trial_loop.thisTrialN'
p8327
I141
sg6371
g6409
sS'block_loop.thisIndex'
p8328
g6365
sg38
S'right'
p8329
sg59
g63
sS'trial_loop.thisN'
p8330
I141
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8331
g60
(g99
S'\x8d\x00\x00\x00'
tRp8332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8333
I0
sg6380
g6416
sS'block_loop.thisRepN'
p8334
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8335
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8336
Nsg70
Vy
sS'block_loop.thisTrialN'
p8337
I0
sg39
F0.80000045615452109
sg34
g753
(S'\x07\xdf\x07\t\x16\x17\x15\x08\xb2\x90'
tRp8338
sa(dp8339
S'trial_loop.thisTrialN'
p8340
I142
sg6371
g7830
sS'block_loop.thisIndex'
p8341
g6365
sg38
S'left'
p8342
sg59
g63
sS'trial_loop.thisN'
p8343
I142
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p8344
g60
(g99
S'\x8e\x00\x00\x00'
tRp8345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8346
I0
sg6380
g7837
sS'block_loop.thisRepN'
p8347
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8348
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p8349
Nsg70
Vy
sS'block_loop.thisTrialN'
p8350
I0
sg39
F1.1166515279328451
sg34
g753
(S'\x07\xdf\x07\t\x16\x17\x1b\x06* '
tRp8351
sa(dp8352
S'trial_loop.thisTrialN'
p8353
I143
sg6371
g6845
sS'block_loop.thisIndex'
p8354
g6365
sg38
S'left'
p8355
sg59
g63
sS'trial_loop.thisN'
p8356
I143
sg33
g6856
sg64
g65
sS'trial_loop.thisIndex'
p8357
g60
(g99
S'\x8f\x00\x00\x00'
tRp8358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8359
I0
sg6380
g6853
sS'block_loop.thisRepN'
p8360
I2
sg6383
g6849
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8361
I2
sg6385
g6856
sg55
g11
sS'block_loop.thisTrial'
p8362
Nsg70
Vy
sS'block_loop.thisTrialN'
p8363
I0
sg39
F0.89992581733531551
sg34
g753
(S'\x07\xdf\x07\t\x16\x17!\x08\xa2\xf0'
tRp8364
sa(dp8365
S'trial_loop.thisTrialN'
p8366
I144
sg6371
g6678
sS'block_loop.thisIndex'
p8367
g6365
sg38
S'left'
p8368
sg59
g63
sS'trial_loop.thisN'
p8369
I144
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p8370
g60
(g99
S'\x90\x00\x00\x00'
tRp8371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8372
I0
sg6380
g6686
sS'block_loop.thisRepN'
p8373
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8374
I2
sg6385
g6682
sg55
g11
sS'block_loop.thisTrial'
p8375
Nsg70
Vy
sS'block_loop.thisTrialN'
p8376
I0
sg39
F0.58335029669979122
sg34
g753
(S"\x07\xdf\x07\t\x16\x17'\x07\x89\xb0"
tRp8377
sa(dp8378
S'trial_loop.thisTrialN'
p8379
I145
sg6371
g6475
sS'block_loop.thisIndex'
p8380
g6365
sg38
S'left'
p8381
sg59
g63
sS'trial_loop.thisN'
p8382
I145
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8383
g60
(g99
S'\x91\x00\x00\x00'
tRp8384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8385
I0
sg6380
g6482
sS'block_loop.thisRepN'
p8386
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8387
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8388
Nsg70
Vy
sS'block_loop.thisTrialN'
p8389
I0
sg39
F0.83334502237266861
sg34
g753
(S'\x07\xdf\x07\t\x16\x17-\x01\xad\xb0'
tRp8390
sa(dp8391
S'trial_loop.thisTrialN'
p8392
I146
sg6371
g6768
sS'block_loop.thisIndex'
p8393
g6365
sg38
S'left'
p8394
sg59
g63
sS'trial_loop.thisN'
p8395
I146
sg33
g6772
sg64
g65
sS'trial_loop.thisIndex'
p8396
g60
(g99
S'\x92\x00\x00\x00'
tRp8397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8398
I0
sg6380
g6776
sS'block_loop.thisRepN'
p8399
I2
sg6383
g6772
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8400
I2
sg6385
g6779
sg55
g11
sS'block_loop.thisTrial'
p8401
Nsg70
Vy
sS'block_loop.thisTrialN'
p8402
I0
sg39
F0.68318927298969356
sg34
g753
(S'\x07\xdf\x07\t\x16\x172\x0e\xe4\x80'
tRp8403
sa(dp8404
S'trial_loop.thisTrialN'
p8405
I147
sg6371
g6661
sS'block_loop.thisIndex'
p8406
g6365
sg38
S'left'
p8407
sg59
g63
sS'trial_loop.thisN'
p8408
I147
sg33
g6665
sg64
g65
sS'trial_loop.thisIndex'
p8409
g60
(g99
S'\x93\x00\x00\x00'
tRp8410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8411
I0
sg6380
g6669
sS'block_loop.thisRepN'
p8412
I2
sg6383
g6665
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8413
I2
sg6385
g6672
sg55
g11
sS'block_loop.thisTrial'
p8414
Nsg70
Vy
sS'block_loop.thisTrialN'
p8415
I0
sg39
F0.73327711188176181
sg34
g753
(S'\x07\xdf\x07\t\x16\x178\ns\xc8'
tRp8416
sa(dp8417
S'trial_loop.thisTrialN'
p8418
I148
sg6371
g7830
sS'block_loop.thisIndex'
p8419
g6365
sg38
S'left'
p8420
sg59
g63
sS'trial_loop.thisN'
p8421
I148
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p8422
g60
(g99
S'\x94\x00\x00\x00'
tRp8423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8424
I0
sg6380
g7837
sS'block_loop.thisRepN'
p8425
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8426
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p8427
Nsg70
Vy
sS'block_loop.thisTrialN'
p8428
I0
sg39
F0.60038379977777367
sg34
g753
(S'\x07\xdf\x07\t\x16\x18\x02\x06\xf9('
tRp8429
sa(dp8430
S'trial_loop.thisTrialN'
p8431
I149
sg6371
g7378
sS'block_loop.thisIndex'
p8432
g6365
sg38
S'left'
p8433
sg59
g63
sS'trial_loop.thisN'
p8434
I149
sg33
g6832
sg64
g65
sS'trial_loop.thisIndex'
p8435
g60
(g99
S'\x95\x00\x00\x00'
tRp8436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8437
I0
sg6380
g7385
sS'block_loop.thisRepN'
p8438
I2
sg6383
g6832
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8439
I2
sg6385
g6839
sg55
g11
sS'block_loop.thisTrial'
p8440
Nsg70
Vy
sS'block_loop.thisTrialN'
p8441
I0
sg39
F0.5331119257316459
sg34
g753
(S'\x07\xdf\x07\t\x16\x18\x08\x01[\xa8'
tRp8442
sa(dp8443
S'trial_loop.thisTrialN'
p8444
I150
sg6371
g6931
sS'block_loop.thisIndex'
p8445
g6365
sg38
S'left'
p8446
sg59
g63
sS'trial_loop.thisN'
p8447
I150
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p8448
g60
(g99
S'\x96\x00\x00\x00'
tRp8449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8450
I0
sg6380
g6938
sS'block_loop.thisRepN'
p8451
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8452
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p8453
Nsg70
Vy
sS'block_loop.thisTrialN'
p8454
I0
sg39
F0.68333581369370222
sg34
g753
(S'\x07\xdf\x07\t\x16\x18\r\n\nP'
tRp8455
sa(dp8456
S'trial_loop.thisTrialN'
p8457
I151
sg6371
g7205
sS'block_loop.thisIndex'
p8458
g6365
sg38
S'left'
p8459
sg59
g63
sS'trial_loop.thisN'
p8460
I151
sg33
g6586
sg64
g65
sS'trial_loop.thisIndex'
p8461
g60
(g99
S'\x97\x00\x00\x00'
tRp8462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8463
I0
sg6380
g7212
sS'block_loop.thisRepN'
p8464
I2
sg6383
g6586
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8465
I2
sg6385
g6593
sg55
g11
sS'block_loop.thisTrial'
p8466
Nsg70
Vy
sS'block_loop.thisTrialN'
p8467
I0
sg39
F0.53306032287946437
sg34
g753
(S'\x07\xdf\x07\t\x16\x18\x13\x05\x9d\x80'
tRp8468
sa(dp8469
S'trial_loop.thisTrialN'
p8470
I152
sg6371
g6537
sS'block_loop.thisIndex'
p8471
g6365
sg38
S'right'
p8472
sg59
g63
sS'trial_loop.thisN'
p8473
I152
sg33
g6428
sg64
g65
sS'trial_loop.thisIndex'
p8474
g60
(g99
S'\x98\x00\x00\x00'
tRp8475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8476
I0
sg6380
g6544
sS'block_loop.thisRepN'
p8477
I2
sg6383
g6428
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8478
I2
sg6385
g6435
sg55
g11
sS'block_loop.thisTrial'
p8479
Nsg70
Vy
sS'block_loop.thisTrialN'
p8480
I0
sg39
F0.76658062390197301
sg34
g753
(S'\x07\xdf\x07\t\x16\x18\x18\x0eL('
tRp8481
sa(dp8482
S'trial_loop.thisTrialN'
p8483
I153
sg6371
g7542
sS'block_loop.thisIndex'
p8484
g6365
sg38
S'right'
p8485
sg59
g63
sS'trial_loop.thisN'
p8486
I153
sg33
g7438
sg64
g65
sS'trial_loop.thisIndex'
p8487
g60
(g99
S'\x99\x00\x00\x00'
tRp8488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8489
I0
sg6380
g7549
sS'block_loop.thisRepN'
p8490
I2
sg6383
g7438
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8491
I2
sg6385
g7445
sg55
g11
sS'block_loop.thisTrial'
p8492
Nsg70
Vy
sS'block_loop.thisTrialN'
p8493
I0
sg39
F0.74999158958962653
sg34
g753
(S'\x07\xdf\x07\t\x16\x18\x1e\x0bJ\xa0'
tRp8494
sa(dp8495
S'trial_loop.thisTrialN'
p8496
I154
sg6371
g6845
sS'block_loop.thisIndex'
p8497
g6365
sg38
S'left'
p8498
sg59
g63
sS'trial_loop.thisN'
p8499
I154
sg33
g6849
sg64
g65
sS'trial_loop.thisIndex'
p8500
g60
(g99
S'\x9a\x00\x00\x00'
tRp8501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8502
I0
sg6380
g6853
sS'block_loop.thisRepN'
p8503
I2
sg6383
g6849
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8504
I2
sg6385
g6856
sg55
g11
sS'block_loop.thisTrial'
p8505
Nsg70
Vy
sS'block_loop.thisTrialN'
p8506
I0
sg39
F2.1666438587781158
sg34
g753
(S'\x07\xdf\x07\t\x16\x18$\x08\x0e\x80'
tRp8507
sa(dp8508
S'trial_loop.thisTrialN'
p8509
I155
sg6371
g6916
sS'block_loop.thisIndex'
p8510
g6365
sg38
S'right'
p8511
sg59
g63
sS'trial_loop.thisN'
p8512
I155
sg33
g6699
sg64
g65
sS'trial_loop.thisIndex'
p8513
g60
(g99
S'\x9b\x00\x00\x00'
tRp8514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8515
I0
sg6380
g6923
sS'block_loop.thisRepN'
p8516
I2
sg6383
g6699
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8517
I2
sg6385
g6706
sg55
g11
sS'block_loop.thisTrial'
p8518
Nsg70
Vy
sS'block_loop.thisTrialN'
p8519
I0
sg39
F0.86663599005260039
sg34
g753
(S'\x07\xdf\x07\t\x16\x18+\n\xfc\x80'
tRp8520
sa(dp8521
S'trial_loop.thisTrialN'
p8522
I156
sg6371
g7123
sS'block_loop.thisIndex'
p8523
g6365
sg38
S'right'
p8524
sg59
g63
sS'trial_loop.thisN'
p8525
I156
sg33
g6665
sg64
g65
sS'trial_loop.thisIndex'
p8526
g60
(g99
S'\x9c\x00\x00\x00'
tRp8527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8528
I0
sg6380
g7130
sS'block_loop.thisRepN'
p8529
I2
sg6383
g6665
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8530
I2
sg6385
g6672
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vy
sS'block_loop.thisTrialN'
p8532
I0
sg39
F1.0332077188795665
sg34
g753
(S'\x07\xdf\x07\t\x16\x181\t\xa4\xc0'
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g6753
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'right'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g6760
sS'block_loop.thisRepN'
p8542
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8543
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vy
sS'block_loop.thisTrialN'
p8545
I0
sg39
F0.78326602154265856
sg34
g753
(S'\x07\xdf\x07\t\x16\x187\ns\xc8'
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g6392
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'right'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8556
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vy
sS'block_loop.thisTrialN'
p8558
I0
sg39
F0.73309094247815665
sg34
g753
(S'\x07\xdf\x07\t\x16\x19\x01\x07\xb0\xc0'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g7011
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'right'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g6635
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g7018
sS'block_loop.thisRepN'
p8568
I2
sg6383
g6635
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8569
I2
sg6385
g6642
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vy
sS'block_loop.thisTrialN'
p8571
I0
sg39
F0.68326254333805991
sg34
g753
(S'\x07\xdf\x07\t\x16\x19\x07\x046 '
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g7123
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'right'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g6665
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g7130
sS'block_loop.thisRepN'
p8581
I2
sg6383
g6665
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8582
I2
sg6385
g6672
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vy
sS'block_loop.thisTrialN'
p8584
I0
sg39
F0.70031201194797177
sg34
g753
(S'\x07\xdf\x07\t\x16\x19\x0c\x0f\x07\xa8'
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g7988
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'left'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g7995
sS'block_loop.thisRepN'
p8594
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8595
I2
sg6385
g6682
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vy
sS'block_loop.thisTrialN'
p8597
I0
sg39
F0.59978993932600133
sg34
g753
(S'\x07\xdf\x07\t\x16\x19\x12\x0b\x13\xf0'
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g6785
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'right'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g6789
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g6793
sS'block_loop.thisRepN'
p8607
I2
sg6383
g6789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8608
I2
sg6385
g6796
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vy
sS'block_loop.thisTrialN'
p8610
I0
sg39
F0.69996903829451185
sg34
g753
(S'\x07\xdf\x07\t\x16\x19\x18\x05vp'
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g6678
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'left'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g6686
sS'block_loop.thisRepN'
p8620
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8621
I2
sg6385
g6682
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vy
sS'block_loop.thisTrialN'
p8623
I0
sg39
F0.61667889740056125
sg34
g753
(S'\x07\xdf\x07\t\x16\x19\x1e\x01~\xd0'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g7039
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'right'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g7049
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g7047
sS'block_loop.thisRepN'
p8633
I2
sg6383
g7049
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8634
I2
sg6385
g7043
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vy
sS'block_loop.thisTrialN'
p8636
I0
sg39
F0.76662224830215564
sg34
g753
(S'\x07\xdf\x07\t\x16\x19#\x0bb\x10'
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g6916
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'right'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6699
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g6923
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6699
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8647
I2
sg6385
g6706
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vy
sS'block_loop.thisTrialN'
p8649
I0
sg39
F0.66667350904026534
sg34
g753
(S'\x07\xdf\x07\t\x16\x19)\x08`\x88'
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g6458
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'right'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g6466
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8660
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vy
sS'block_loop.thisTrialN'
p8662
I0
sg39
F0.6333340745914029
sg34
g753
(S'\x07\xdf\x07\t\x16\x19/\x03\xb58'
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g7272
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'right'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g6849
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g7279
sS'block_loop.thisRepN'
p8672
I2
sg6383
g6849
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8673
I2
sg6385
g6856
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vy
sS'block_loop.thisTrialN'
p8675
I0
sg39
F0.69997017867717659
sg34
g753
(S'\x07\xdf\x07\t\x16\x194\r\xd3\x10'
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g6785
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'right'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6789
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g6793
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8686
I2
sg6385
g6796
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vy
sS'block_loop.thisTrialN'
p8688
I0
sg39
F0.54999404143745778
sg34
g753
(S'\x07\xdf\x07\t\x16\x19:\t\xdbp'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g7830
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'left'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g6618
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g7837
sS'block_loop.thisRepN'
p8698
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8699
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vy
sS'block_loop.thisTrialN'
p8701
I0
sg39
F0.63335830797586823
sg34
g753
(S'\x07\xdf\x07\t\x16\x1a\x04\x03\x86X'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g6661
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'left'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g6665
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g6669
sS'block_loop.thisRepN'
p8711
I2
sg6383
g6665
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8712
I2
sg6385
g6672
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vy
sS'block_loop.thisTrialN'
p8714
I0
sg39
F0.63336201425408944
sg34
g753
(S'\x07\xdf\x07\t\x16\x1a\t\r\xa40'
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g6931
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'left'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g6938
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8725
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vy
sS'block_loop.thisTrialN'
p8727
I0
sg39
F0.80058490835654084
sg34
g753
(S'\x07\xdf\x07\t\x16\x1a\x0f\x08\x7f\xc8'
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g6392
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'right'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8737
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8738
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vy
sS'block_loop.thisTrialN'
p8740
I0
sg39
F1.1337300765953842
sg34
g753
(S'\x07\xdf\x07\t\x16\x1a\x15\x05\xf7X'
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g6372
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'left'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8751
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vy
sS'block_loop.thisTrialN'
p8753
I0
sg39
F1.0666455123428022
sg34
g753
(S'\x07\xdf\x07\t\x16\x1a\x1b\x08p('
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g7205
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'left'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g6586
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g7212
sS'block_loop.thisRepN'
p8763
I2
sg6383
g6586
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8764
I2
sg6385
g6593
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vy
sS'block_loop.thisTrialN'
p8766
I0
sg39
F0.53306402916496154
sg34
g753
(S'\x07\xdf\x07\t\x16\x1a!\t\xf6\xc8'
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g6599
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'left'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g6606
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8777
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vy
sS'block_loop.thisTrialN'
p8779
I0
sg39
F0.56666575434792321
sg34
g753
(S"\x07\xdf\x07\t\x16\x1a'\x03c0"
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g6475
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'left'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g6482
sS'block_loop.thisRepN'
p8789
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8790
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vy
sS'block_loop.thisTrialN'
p8792
I0
sg39
F1.2165877228544559
sg34
g753
(S'\x07\xdf\x07\t\x16\x1a,\x0c\x8e\xd8'
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g6753
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'right'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6563
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g6760
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8803
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vy
sS'block_loop.thisTrialN'
p8805
I0
sg39
F0.68325570097658783
sg34
g753
(S'\x07\xdf\x07\t\x16\x1a3\x010\xb0'
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g6661
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'left'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6665
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g6669
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6665
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8816
I2
sg6385
g6672
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vy
sS'block_loop.thisTrialN'
p8818
I0
sg39
F0.58371066137624439
sg34
g753
(S'\x07\xdf\x07\t\x16\x1a8\x0c\x06 '
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g6695
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'left'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g6699
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g6703
sS'block_loop.thisRepN'
p8828
I2
sg6383
g6699
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8829
I2
sg6385
g6706
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vy
sS'block_loop.thisTrialN'
p8831
I0
sg39
F0.71656862124655163
sg34
g753
(S'\x07\xdf\x07\t\x16\x1b\x02\x06* '
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g6828
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'right'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6832
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g6836
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6832
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8842
I2
sg6385
g6839
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vy
sS'block_loop.thisTrialN'
p8844
I0
sg39
F0.51643764693289995
sg34
g753
(S'\x07\xdf\x07\t\x16\x1b\x08\x02q\x00'
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g6582
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'right'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6593
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g6590
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6586
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8855
I2
sg6385
g6593
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vy
sS'block_loop.thisTrialN'
p8857
I0
sg39
F1.3662049209160614
sg34
g753
(S'\x07\xdf\x07\t\x16\x1b\r\n\xe5\x10'
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g7069
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'left'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g7043
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g7076
sS'block_loop.thisRepN'
p8867
I2
sg6383
g7049
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8868
I2
sg6385
g7043
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vy
sS'block_loop.thisTrialN'
p8870
I0
sg39
F0.59983954649214866
sg34
g753
(S'\x07\xdf\x07\t\x16\x1b\x14\x01\xad\xb0'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g6768
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'right'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g6772
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g6776
sS'block_loop.thisRepN'
p8880
I2
sg6383
g6772
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8881
I2
sg6385
g6779
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vy
sS'block_loop.thisTrialN'
p8883
I0
sg39
F1.4996920934790978
sg34
g753
(S'\x07\xdf\x07\t\x16\x1b\x19\x0bN\x88'
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g6582
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'right'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6586
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g6590
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6586
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8894
I2
sg6385
g6593
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vy
sS'block_loop.thisTrialN'
p8896
I0
sg39
F0.66628434939775616
sg34
g753
(S'\x07\xdf\x07\t\x16\x1b \x04=\xf0'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g6552
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'left'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6563
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g6560
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8907
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vy
sS'block_loop.thisTrialN'
p8909
I0
sg39
F0.63333207889809273
sg34
g753
(S'\x07\xdf\x07\t\x16\x1b%\x0e\xd4\xe0'
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g6931
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'left'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g6938
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8920
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vy
sS'block_loop.thisTrialN'
p8922
I0
sg39
F0.94981437228125287
sg34
g753
(S'\x07\xdf\x07\t\x16\x1b+\t\xb0x'
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g7542
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'right'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g7438
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g7549
sS'block_loop.thisRepN'
p8932
I2
sg6383
g7438
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8933
I2
sg6385
g7445
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vy
sS'block_loop.thisTrialN'
p8935
I0
sg39
F0.6498449918726692
sg34
g753
(S'\x07\xdf\x07\t\x16\x1b1\t\x89h'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g6409
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'left'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g6416
sS'block_loop.thisRepN'
p8945
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8946
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vy
sS'block_loop.thisTrialN'
p8948
I0
sg39
F0.44979612596944207
sg34
g753
(S'\x07\xdf\x07\t\x16\x1b7\x04\x9f\x98'
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g6614
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'right'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g6622
sS'block_loop.thisRepN'
p8958
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8959
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vy
sS'block_loop.thisTrialN'
p8961
I0
sg39
F1.3665079807688016
sg34
g753
(S'\x07\xdf\x07\t\x16\x1c\x00\x0c!x'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g6520
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'right'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g6528
sS'block_loop.thisRepN'
p8971
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8972
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vy
sS'block_loop.thisTrialN'
p8974
I0
sg39
F1.2831648115243297
sg34
g753
(S'\x07\xdf\x07\t\x16\x1c\x07\x02\xea\x18'
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g7393
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'right'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g6772
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g7400
sS'block_loop.thisRepN'
p8984
I2
sg6383
g6772
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8985
I2
sg6385
g6779
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vy
sS'block_loop.thisTrialN'
p8987
I0
sg39
F0.48321738371305401
sg34
g753
(S'\x07\xdf\x07\t\x16\x1c\r\x07\xc4H'
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g7830
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'left'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g7837
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8998
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vy
sS'block_loop.thisTrialN'
p9000
I0
sg39
F0.51667399370489875
sg34
g753
(S'\x07\xdf\x07\t\x16\x1c\x13\x00y\x18'
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g6599
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'left'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g6606
sS'block_loop.thisRepN'
p9010
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9011
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vy
sS'block_loop.thisTrialN'
p9013
I0
sg39
F1.0001106182680815
sg34
g753
(S'\x07\xdf\x07\t\x16\x1c\x18\x08\xae\xa8'
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g7378
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'left'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6832
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g7385
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6832
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9024
I2
sg6385
g6839
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vy
sS'block_loop.thisTrialN'
p9026
I0
sg39
F0.61700904161989456
sg34
g753
(S'\x07\xdf\x07\t\x16\x1c\x1e\t?0'
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g7434
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'left'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g7445
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g7442
sS'block_loop.thisRepN'
p9036
I2
sg6383
g7438
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9037
I2
sg6385
g7445
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vy
sS'block_loop.thisTrialN'
p9039
I0
sg39
F0.93322334228287218
sg34
g753
(S'\x07\xdf\x07\t\x16\x1c$\x03\xe00'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g7988
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'right'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g7995
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9050
I2
sg6385
g6682
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vy
sS'block_loop.thisTrialN'
p9052
I0
sg39
F0.74999786176340422
sg34
g753
(S'\x07\xdf\x07\t\x16\x1c*\x03z\xa0'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g6768
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'left'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g6772
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g6776
sS'block_loop.thisRepN'
p9062
I2
sg6383
g6772
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9063
I2
sg6385
g6779
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vy
sS'block_loop.thisTrialN'
p9065
I0
sg39
F0.63323001359094633
sg34
g753
(S'\x07\xdf\x07\t\x16\x1c0\x00\x00\x00'
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g6725
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'left'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g6732
sS'block_loop.thisRepN'
p9075
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9076
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vy
sS'block_loop.thisTrialN'
p9078
I0
sg39
F0.54999689241958549
sg34
g753
(S'\x07\xdf\x07\t\x16\x1c5\n\\X'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g6520
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'right'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g6528
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9089
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vy
sS'block_loop.thisTrialN'
p9091
I0
sg39
F0.66659795789746568
sg34
g753
(S'\x07\xdf\x07\t\x16\x1c;\x04\x07@'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vy
sa(dp9099
g64
g65
sg43
I139
sg56
g57
sg58
Vn
sg42
I461
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp9100
g64
g65
sg43
I139
sg55
g11
sg56
g57
sg45
F0.17999999999999999
sg42
I461
sg49
F0.01
sg58
Vn
sg59
g63
sg44
I01
sg48
I25
sg47
g625
sg51
F29.43
sg46
F0.57999999999999874
sg66
g67
sg68
g69
sg50
I0
sg70
Vy
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I79090000
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'\\\x8f\x82?\xb8\x1e\x05?\xecQ8>\xecQ8?\\\x8fB?\x9a\x99\x19?\xaeGa?\xecQ\xb8>)\\\x0f>333?\x9a\x99\x19?\\\x8fB?\x14\xaeG?\n\xd7#?\xecQ8>\xaeGa?\x85\xebQ?\xecQ\xb8>\xecQ\xb8>\n\xd7#?)\\\x0f>\xe1z\x14?\xcd\xccL?\x8f\xc2u?q=\n?\xe1z\x14?333?\\\x8fB?\xa4p=?\xaeG\xe1>\xecQ\xb8>\x85\xebQ?\xd7\xa3p?\xb8\x1e\x05?\n\xd7\xa3>H\xe1z?\xe1z\x14?\x9a\x99\x99>\x8f\xc2u>q=\n?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S'+\x87\xa6?\xb6\xf3]?\x87\x16\x11@\xcb\xa1\x99@P\x8d\xd7?\xb6\xf3\x1d?\xbct3?\xb6\xf3\xbd?b\x10\x10@\x83\xc0\x8a?\xd9\xce7?\xfc\xa9\x19@\xe9&\xd1?\xa8\xc6\xbb?\x87\x16\x01@\xe9&\xf1?\x1dZ\xe4?\xc5 \xe0?\xee|G@P\x8d\xf7?!\xb0:@^\xba\xb9?\\\x8fb?\xbaI4@!\xb0J@m\xe7;?\xc5 \x80?B`\xd5?\xfc\xa9\t@\xa8\xc6\x9b?B`E@\xe9&\xf1?\xa8\xc6\x9b?\x1dZD?^\xba\x99?\xee|\x8f@u\x93\xa8?D\x8b\xd0@+\x87\xe6?\x91\xed\x8c?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xb8A\x00\x00\x14B\x00\x00\xc0A\x00\x00@@\x00\x00`A\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x80@\x00\x00\xd8A\x00\x00\x1cB\x00\x00\xc8A\x00\x00\x98A\x00\x00\xe8A\x00\x00\x10A\x00\x00@A\x00\x00\xa8A\x00\x00\x00@\x00\x00\x80?\x00\x00\xd0A\x00\x00\xc0@\x00\x00PA\x00\x00\x04B\x00\x00\x80A\x00\x000A\x00\x00\x18B\x00\x00\x90A\x00\x00 A\x00\x00\xe0@\x00\x00\xe0A\x00\x00\x00A\x00\x00\xa0A\x00\x00\x88A\x00\x00\xf8A\x00\x00\xf0A\x00\x00\xa0@\x00\x00\x00B\x00\x00\x00\x00\x00\x00pA\x00\x00\xb0A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'\xcd\xcc\xcc?\xcd\xcc\x8c?\xcd\xcc\x8c?ff\xa6?\xcd\xcc\xcc?\xcd\xcc\x8c?33\xb3?33\xf3?33\xf3?\xcd\xcc\xcc?ff\xa6?\x00\x00\x00@\x00\x00\xc0?\x00\x00\x00@33\xb3?\x00\x00\xc0?\xcd\xcc\xcc?\x00\x00\x80?\xcd\xcc\x8c?\x00\x00\x00@\xcd\xcc\x8c?\x9a\x99\x99?\x9a\x99\xd9?33\xf3?\x00\x00\xc0?\x9a\x99\x99?\xcd\xcc\x8c?\x9a\x99\x99?33\xb3?ff\xa6?ff\xe6?\x9a\x99\xd9?\xcd\xcc\xcc?ff\xa6?33\xb3?33\xb3?\x00\x00\x00@33\xf3?\xcd\xcc\x8c?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S'%\x00\x00\x00\x12\x00\x00\x00\x11\x00\x00\x00\x03\x00\x00\x00\x08\x00\x00\x00#\x00\x00\x00\x14\x00\x00\x00\x1c\x00\x00\x00\x1e\x00\x00\x00\x0e\x00\x00\x00\x1b\x00\x00\x00\x18\x00\x00\x00\x0f\x00\x00\x00\x15\x00\x00\x00\x04\x00\x00\x00&\x00\x00\x00\x17\x00\x00\x00 \x00\x00\x00\x1a\x00\x00\x00\x0c\x00\x00\x00\x1f\x00\x00\x00\x10\x00\x00\x00\'\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x0b\x00\x00\x00\x13\x00\x00\x00\t\x00\x00\x00\x1d\x00\x00\x00\r\x00\x00\x00"\x00\x00\x00!\x00\x00\x00$\x00\x00\x00\x16\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x01\x00\x00\x00\x19\x00\x00\x00\n\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g264
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g362
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g271
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g124
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g201
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g341
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g348
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g355
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g131
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g292
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g376
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g278
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g236
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g306
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g166
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g187
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g250
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g117
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g110
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g285
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g145
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g194
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g334
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g215
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g180
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g369
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g229
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g173
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g152
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g299
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g159
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g243
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g222
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g320
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g313
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g138
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g327
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g103
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g208
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g257
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I79090000
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xc0@\x00\x00@@\xcd\xcc\x9c@\x00\x00\xa0@\x00\x00`@\x00\x00\xa0@\x00\x00@@\x9a\x99y@33\xa3@\x00\x00@@\x00\x00\xa0@\x9a\x99\x89@\xcd\xccl@\x00\x00@@\x00\x00\x00@33\x93@\x9a\x99\xa9@\xcd\xcc\x9c@\xcd\xcc\x9c@\xcd\xccl@\x00\x00\xc0?\x00\x00\x00@\x9a\x99\xd9?33S@\x9a\x99Y@33s@\x9a\x99\x99@\xcd\xcc,@333@33S@\x00\x00\x80@\xcd\xccl@fff@\x00\x00\x00@\x9a\x99\x19@ffF@ffF@\x00\x00@@33\x83@ff\x86@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S'\x9a\x9b\x99?s\x11\xb1?\x15\x9fy@\xe54\x93??\xad\x1a@\xbb\x9b\t@\xc34\x93?\xecdf?\x8a\xac\x8a?N\xbc*?q\xe5]?6\xd4L?\xaaE\x84?\xa2\x80w?\xb6\xe8]>?hf?\xcfXU?\xcdGD?\x11\x1f\x82?\x7f{w?\x9953?;"b?g\xb1\xea?\x83{w?\xee\xe0\x1d?\xef\xbf;?^\xf8??[\xf1.?\n\xe2]?\xff\xfa.?E\x88\x88?\x12\x9e\x19?h&"?\xdc8\xb3?i\xf4n?\xcf\x8d\x08?xd\x86?v\xf1n?\x83\xf6.?\xae\xbf{?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'ffF@\x00\x00@@33S@333@\x00\x00`@333@\x00\x00@@\x9a\x99y@33S@\x00\x00@@\xcd\xccL@\x00\x00`@\xcd\xccl@\x00\x00@@33\x83@\x00\x00\x80@\x9a\x999@33\x83@ff\x86@\xcd\xccl@\xcd\xccl@\x9a\x99y@ff\x86@\x00\x00@@\xcd\xccL@33S@ff\x86@33S@\xcd\xccl@33s@ffF@\xcd\xccl@fff@ff\x86@\x9a\x99y@ff\x86@ffF@\x00\x00@@33\x83@ff\x86@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\xe0\xc7.\r\x00a\xa6\x0c\xa0\xf5!\x05\x00+ \x05`+ \x05\xe0% \x05\xa0* \x05\xa0) \x05`* \x05\x80  \x05\x00( \x05 _/\r\x80a\xa6\x0c `\xa6\x0c\xc0`\xa6\x0c\xc0F\xa8\x0c\xe0) \x05\x00\xfd!\x05 \xfc!\x05@\xf4!\x05`\xf8!\x05`\xfd!\x05\x00\xfc!\x05 c\xa6\x0c\x80\xf7!\x05\xe0\xf5!\x05\x00\xfb!\x05\xa0Y/\r`\xc6.\r\x00\xc7.\r@\xc6.\r@\xca.\r@\xc7.\r\xa0\xcb.\r\x00\xca.\r\x80\xc4.\r\xc0\xc7.\r \xc6.\r`\xc9.\r\x80\xc7.\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'b\x10\x10@\xbcts?\xd3Mb?u\x93\xc8?u\x93\x88?\xc5 \xa0?\xd9\xce\xf7>\x89A\x00?\x1dZ\x04?9\xb4\x08?V\x0e\r?\x91\xed\xac?\x89A\x00?\x89A\x00?\x0e-"@\x1dZ\xe4?\xc5 \x80?\xd9\xce\xf7>\x06\x81U?\xf0\xa7f?\xf0\xa7f?\xbcts?\x1dZ\xa4?\xa0\x1ao?#\xdbY?\x89A\x00?\x89A\x00?\x06\x81\xd5>\xa0\x1a/?\xc5 \x80?\xbct3?\xa6\x9b\x04?\xd9\xce\xf7>9\xb4H?\xdb\xf9\x8e?\x0c\x02k?\xf0\xa7f?\xb6\xf3]?V\x0e\r?\x06\x81\x15?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I79090000
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S'X)b\r\x90(b\r\xb8(b\r\xe0vH\r\x80vH\r\xb0vH\r\x10wH\r\x08)b\rh\xaaa\rh(b\r\xe0(b\r\x90(b\r\xb8(b\r\x08)b\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S'8\xf6\xe3\x04X\xf7\xe3\x04\xe0\xf3\xe3\x04\xa8\xfe\xe3\x04H\xfe\xe3\x04\x90\xf8\xe3\x048`\xd8\x04@g\xd8\x04\xc0b\xd8\x04@a\xd8\x04\x98`\xd8\x04(g\xd8\x04\x90b\xd8\x04\xe0o\xd8\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g767
sg83
g768
sg84
g772
sg85
g773
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g778
sg83
g779
sg84
g783
sg85
g784
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g789
sg83
g790
sg84
g794
sg85
g795
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g800
sg83
g801
sg84
g805
sg85
g806
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g789
sg83
g811
sg84
g794
sg85
g815
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g820
sg83
g821
sg84
g825
sg85
g826
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g800
sg83
g831
sg84
g805
sg85
g835
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g744
sg83
g840
sg84
g749
sg85
g844
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g778
sg83
g849
sg84
g783
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g756
sg83
g858
sg84
g761
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g767
sg83
g867
sg84
g772
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g820
sg83
g876
sg84
g825
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I79090000
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I79090000
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S"\xa0\xa1-\rP&d\r@Hd\rhHd\r\x90Hd\r Jd\r8\xbfc\r\xe0Hd\r8\xbfc\r\xa8\xbfc\r\x08Id\r@Hd\rp\xbfc\r\x80&d\r\xa8\xbfc\r\x08Id\r0Id\r`\xa0-\rXPd\r\xe0Hd\rhHd\r\xb0&d\rP&d\rp\xbfc\r\x00(d\r\xb8Hd\rP&d\r\xa0\xa3-\r`\xa0-\rXId\r\xa0\xa3-\r\xe0Hd\r\xa0\xa3-\r\x10'd\r\x00(d\rpJd\rP&d\r\x98Jd\r\x10'd\r\x98Jd\r\x08Id\rp'd\r Pd\r\x80\xa0-\rXPd\r\xe0&d\r\x08Id\r\xe0Hd\rp'd\rP&d\r\xc0\xa6-\r\x80&d\rP&d\r@'d\r\x90Hd\r\x80Id\rXId\r\xa0\xa1-\r@'d\r\xd0'd\r\xe0Hd\r`\xa0-\r\x08Id\r`\xa0-\r\x80Id\r\xb8Hd\r\xa0\xa1-\r\xa8Id\r\xc8Pd\r\x90Pd\r`(d\r0Id\r\xa0\xa1-\r`(d\rhHd\r\xe0&d\r8\xbfc\r\xd0'd\r\x80Id\r0Id\r\xa8Id\r@Hd\rHJd\r\x80&d\r\xa0\xa1-\r\xa0'd\r\xe0&d\r\x80&d\rp\xbfc\r\xa0'd\r\xa0\xa3-\r\xa8Id\r\x90Hd\rXPd\r\x10'd\r`\xa0-\r\xb0&d\r\xa8Id\r\xa0\xa3-\rXId\r`\xa0-\rhHd\r\xa0'd\r\xb0&d\r\xe0&d\r\x90Hd\rp\xbfc\r\x90Hd\r@Hd\r\xc8Pd\r\x80Id\r@Hd\r\xa0\xa1-\r0Id\rHJd\r\x80&d\r\x80\xa0-\r8\xbfc\r\x80&d\rXId\r@Hd\r\x80Id\r\xb8Hd\r\xe0Hd\r Pd\r\x80\xa0-\r0Id\rp\xbfc\r\xa8Id\r\xf8Id\rXId\r8\xbfc\r\xe0&d\r\x08Id\r\xe0&d\r\xb0&d\rXId\r\x80\xa0-\r\x80Id\r\xd0'd\r\x80&d\r\xe0&d\r\xb8Hd\r\xe0Hd\r\xa0\xa1-\r\xa0\xa3-\r\x80Id\r\x80\xa0-\r\xb8Hd\r@Hd\r\xb8Hd\r\x80\xa0-\r\xa0\xa1-\r\xd0'd\rp\xbfc\r\x90Hd\r\xb0&d\r\x80&d\rXId\r\xc8Pd\r@'d\r\xb8Hd\r\xb0&d\r\x90Hd\r@Hd\r\xb8Hd\rP&d\r\xc0\xa6-\r\xa0\xa3-\r8\xbfc\rp\xbfc\r8\xbfc\r\x80Id\rXId\r\xa0\xa1-\r0Id\r\x80Id\rhHd\r`\xa0-\r0Id\r\xa0\xa1-\rpJd\rhHd\r Jd\r\x90Pd\r\xe0&d\r\x08Id\r\xa8Id\r\x90Hd\r\xa8Id\r\xe0Hd\r\xa0\xa3-\r\xa8Id\r\xf8Id\rhHd\r\x90Pd\r\xa8\xbfc\r\x80Id\r\x08Id\r\x80\xa0-\r"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S' \x18I\r\x80\x1aI\r\x00\x1bI\r\x00\x1aI\r\xe0\xfb!\x05@\x7f"\x05\x80\x81,\r``\xa6\x0c`\x1bI\r@\x1bI\r@\x1aI\r`\x18I\r\xa0\x1bI\r\x80\x1bI\r\xe0\x18I\r \x19I\r`\x1aI\r \x85,\r\x00\x1cI\r\xe0\x1bI\r \x1cI\r \x1bI\r\xe0\x1cI\r\xa0\x19I\r\xe0\x1aI\r\x80\x1cI\r`\x1dI\r \x1aI\r\xc0\x19I\r\xc0\x1aI\r\x00]/\r@[/\r\x00_/\r@]/\r@^/\r\x00Z/\r\xc0Z/\r\x00[/\r\xa0V/\r W/\r`U/\r\xe0V/\r\x80Y/\r`W/\r\x80^/\r@\\/\r@X/\r\x00^/\r\x00\\/\r\xc0[/\r\xc0U/\r\x80X/\r\x80\\/\r\xc0^/\r\x80V/\r\x00X/\r@P/\r\xc0X/\r\xa0P/\r@V/\r\x00V/\r@_/\r\xc0Y/\r\x80]/\r\x00Q/\r\xc0W/\r P/\r@Z/\r\xc0\\/\r\x80P/\r\xc0]/\r`P/\r\xe0P/\r\x00Y/\r\xc0P/\r`\xd6\xb6\x04\x80Z/\r@\xce.\r@\xc2.\r\xc0\xcb.\r`\xc3.\r`\xc2.\r\xe0\xce.\r\x00\xcf.\r\xe0\xca.\r\xc0\xce.\r\x80\xcf.\r\xa0\xcf.\r@\xc3.\r@Y/\r\xc0\xc2.\r`\xce.\r`\xc0.\r\x00\xc1.\r@\xc1.\r\x00\xc2.\r`\xc1.\r\x80\xc1.\r\xa0\xce.\r\xc0\xcf.\r \xc3.\r\xc0\xc1.\r\xc0\xc3.\r\x00\xc3.\r\xe0\xc3.\r \xc2.\r`\xcf.\r@\xc4.\r \xc4.\r\xe0\xcf.\r \xcf.\r\x80\xcc.\r\xa0\xc3.\r\xe0\xc2.\r\xe0\xcb.\r\x00\xc4.\r\xa0\xc2.\r@h\xa7\x0c\xe0\xc1.\r\xa0\xc1.\r \xce.\r\x80\xce.\r@\xcf.\r@\x8b,\r\x80\xc3.\r`D\xa8\x0c\x80\xf6!\x05\x80\xc2.\r\xc0\xff-\r\x00\xfe-\r\xa0\xff-\r\x80[/\r\x00h\xa7\x0c\xe0\xfe-\r@b\xa6\x0c\xa0\x1aI\r\xc0\x1cI\r\x00\x1dI\r`\x19I\r\xc0\x1dI\r`\x1cI\r \x1dI\r \x1eI\r`\x1eI\r\xe0\x19I\r@\x1dI\r\xa0\x1eI\r@\x1eI\r\xa0\x1dI\r\x00\x1fI\r\xe0\x1eI\r\xa0\x1fI\r\xa0\x1cI\r@\x1cI\r\xc0\x1eI\r\xe0\x1dI\r\x80\x1eI\r\x80\x1dI\r@\x1fI\r\xe0\x1fI\r \x1fI\r@\x18I\r`\x1fI\r\xc0\x1bI\r \xfe-\r\x80\xfe-\r\xc0\x1fI\r\xa0\xb1/\r B\xef\x1a\xa0@\xef\x1a \xc1.\r\x00A\xef\x1a`A\xef\x1a\xc0A\xef\x1a\xa0B\xef\x1a`@\xef\x1a\x80B\xef\x1a@@\xef\x1a@A\xef\x1a\xa0A\xef\x1a\xe0A\xef\x1a\x00C\xef\x1a\x80A\xef\x1a\xc0B\xef\x1a\x00D\xef\x1a\xa0C\xef\x1a`B\xef\x1a\x80C\xef\x1a@B\xef\x1a @\xef\x1a\xe0B\xef\x1a\x80D\xef\x1a A\xef\x1a\xe0@\xef\x1a@C\xef\x1a\xa0D\xef\x1a`\x16I\r\x80\x11I\r\x00\x16I\r\xc0\x11I\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'\xa0r\x97?2C\x84?\xe9!\xa2?\xf8\x1d\xa2?3\x98\xb9?Z>\xb3? \xf1n?\xab\r\xb1?:\xbc{?\x8e>\x84?\xf0\xaa\xaa?\xf3\x98\x99?\xccu\xb7?9C\x84?-t\x97?>\x99\x19@\xb2@\xa4?\x1b\x8cY?D\x1eb?/\xff\x9f?\x11\xdbL?-\x85\xc8?|\xc7L?\xbbg\xa6?\xa9\x99\x99?\xb62s?5\xed\xae?\xf4/\x93?sWf?\x81OU?\xe2D3?\'\xaa\xaa?\xcf\x1eb?\x11\xeb\x8e?\xe5\xa1j?5VD?\xdf\xbb{?MAD?\x91bf?\xa6\xe8.?Q\x89H?\x8e\xcd;?\xcc\xaa*?\xf6\x98\x19@\xbf2\x93?\xbd\xff\x7f?\xb4\xac*?\xf1\xdd\x9d?j\xba{?@RU?\xa7\xec\xce?\xc4ZD?\x8f\xa7\x8a?\x9arw?\xc8\x1d\xa2?\xc3Y\x86?\x13\xb0j?\x07\x96Y?\xc7/s?H2\xf3?\xd9\xee\x8e?\x80\xbaj?\x85\x97\x99?\x86\xb4\x9b?\nUf?\xebvw?c\xc4j?\x1d!\xc2?Y@D?\x1f\x95\x19?\xfd\xee\x8e?/zf?\x15\xccL?\x1a\x87\x88?\x00\xe9\xce?\xef\x19b?S\xab\x8a?4/\xd3?\xc0\rb?\xd9\r\x91?\x15\x0cQ?~\xa3H?\x91-3?\xcet\xb7?\xf1\x99\x19?\x83R\x95?i\xc7L?9af?\xac\xa9\x8a?\xd9.\x03@Tx7?\xaf\x80\x97?\x90\xba{?\xee_f?\x85\xee\x8e?J\xba;?K\x1c\x82?\x13\xcdL?O\x0eQ?\xc5u7?\xdff&?\xd8B\x15?\xd543?1v\xd7?\x96RU?\x8e!\xa2?\x0e\xb9\x9b?\xdc\xb5*?\'!"?\xf3UU?\xa3\x19\x82?\xcc\xe3]?\xbbvw?\x8b\xf1.?\x86\xba\xbb?d\x99\x99?VA\x84?\xe3D\x84?\xf9\xd2;?\x8cff?\xcd\xde\x1d?\xbc=U?\xd6[\x86?\x97\nQ?\xbf\xd4;?\xf6!"@\xd0\xd7\x1d?\xf6\xa3*?\xf0\xa7*?Yt\x86?+\x0f\x91?\x84\x10\xb1?pv\x97?\xcdR\x95?\xd6@\xa4?\xe6\xaaj?\xe5R%@\xf3\xa7\xea?\xba\x16\xa2?\xb6w7?3f\xa6?\xe52\x93?off?\xaa"\x82?\xb7\x0b\x80?J\xee\x8e?+ew?\xc8UU?Kgf?\xc2BD?\x0cK3?\xdd@\xa4?\x9cww?\xcb\xa6\x8a?\xb9\xda\xbd?\xf8m\x15?\xd1\xbb\x9b?>c\x86?\x17\x1e\xa2?bx7?I\x94\x88?Hw7?\x85\x99\x99?\x95\xef.?\xf1TU?\xf2sw?-mU?\x00\xbc{?\x0cD\x84?\xaa\xefn?E<\xa4?\xe2\xcc;?\xe4S&?\xd6UU?T\xee.?\xbc\xc8\xec?\x12vH?\x82?D?\xf6\xbc;?\x9b\x94Y?Z\x94\x19?x\xb7;?\xe1\x93Y?\x8f\xdc\x1d?\x1b\xfe??%f&?.03?\xfb\x94Y?#kU?\xc9?D?2\x0b\x11?:33?X\x96Y?\xfb\x0b\x11?\xdeeU?\xc9ED?j\xb1;?J s?\xb1\x00\x00?K\xde\x9d?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'(a\xd8\x04Xd\xd8\x04\x98\x86\x19\x05 \x83\x19\x05\x00\x82\x19\x05\xc8\x83\x19\x05x\x8e\x19\x058\x86\x19\x05\xe8\x8d\x19\x05\xa8\x82\x19\x05@\x8d\x19\x05 \x86\x19\x05x\x82\x19\x05\xc8\x89\x19\x05P\x83\x19\x05\x10\x8d\x19\x05\xb8\x87\x19\x05\xd0\x84\x19\x05X\x8a\x19\x05\xe0\x80\x19\x05`\x8e\x19\x05\xe0\x8c\x19\x05H\x8b\x19\x05\xd0\x8d\x19\x05\x00\x85\x19\x05\x88\x84\x19\x05X\x84\x19\x05p\x87\x19\x05\x88\x8a\x19\x05\xe8\x8a\x19\x058\xcc\x1a\x05\xa8\xc5\x1a\x05\x90\xce\x1a\x05X\xcd\x1a\x05\x08\xc9\x1a\x05x\xc2\x1a\x05\xa0\xca\x1a\x05\xe0\xc9\x1a\x05\xc8\xcc\x1a\x05\x80\xcc\x1a\x05\x00\xc8\x1a\x05p\xca\x1a\x05\xf0\xce\x1a\x05\xd8\xc5\x1a\x05P\xc0\x1a\x05\x10\xc1\x1a\x05X\xca\x1a\x05\x10\xca\x1a\x05\xc8\xc3\x1a\x05\xc0\xcb\x1a\x05 \xcc\x1a\x05\x18\xc5\x1a\x05`\xce\x1a\x05p\xc4\x1a\x05H\xc8\x1a\x05\xc8\xcf\x1a\x05(\xc1\x1a\x05\xd8\xc8\x1a\x05P\xc6\x1a\x05\x18\xce\x1a\x05h\xc6\x1a\x05\x00\xc2\x1a\x05\xd0\xc1\x1a\x05h\xcc\x1a\x05\x08\xcc\x1a\x05\xe8\xc7\x1a\x05`\xcb\x1a\x05\x98\xcf\x1a\x05\xe0\xc6\x1a\x05\xc8\xc6\x1a\x05\xb0\xc9\x1a\x05p\xc7\x1a\x05\xc0\xc8\x1a\x05\x90\xc5\x1a\x05(\xc4\x1a\x05\x10\xc4\x1a\x05H\xc5\x1a\x05\xa8\xc2\x1a\x05\xf8\xc6\x1a\x05@\xc4\x1a\x05\x00\xc5\x1a\x05 \xc3\x1a\x05\x80\xc0\x1a\x05\xc8\xc9\x1a\x05\xf0\xc2\x1a\x05\x90\xc2\x1a\x05\x88\xc4\x1a\x05\x90\xc8\x1a\x05(\xca\x1a\x05H\xcb\x1a\x05\x98\xc0\x1a\x05\x88\xcd\x1a\x05\xa0\xc4\x1a\x050\xc2\x1a\x05P\xcf\x1a\x05@\xc1\x1a\x05\xf8\xc9\x1a\x05X\xc7\x1a\x050\xc5\x1a\x05\xa0\xcd\x1a\x05h\xc3\x1a\x05\x80\xc3\x1a\x05\x98\xc3\x1a\x050\xcb\x1a\x05p\xcd\x1a\x05\xb0\xc0\x1a\x05x\xce\x1a\x05\x88\xc1\x1a\x058\xc6\x1a\x05p\xc1\x1a\x05\xd8\xc2\x1a\x058\xc0\x1a\x05\x90\xcb\x1a\x05\xb8\xc7\x1a\x05\xc0\xc5\x1a\x05\x18\xcb\x1a\x05`\xc5\x1a\x05X\xc4\x1a\x05 \xc0\x1a\x05\xb8\xc1\x1a\x05x\xc5\x1a\x05\xc0\xce\x1a\x050\xc8\x1a\x05\xe8\xc4\x1a\x05(\xc7\x1a\x05\x08\xcf\x1a\x05\xb0\xcf\x1a\x05P\xc3\x1a\x05\xa0\xc1\x1a\x05\xd8\xcb\x1a\x05\x18\xc8\x1a\x05\xe8\xc1\x1a\x05\xa0\xc7\x1a\x05\xf0\xc8\x1a\x05 \xc6\x1a\x05\x10\xc7\x1a\x05P\xcc\x1a\x05`\xc2\x1a\x05\x80\xc6\x1a\x05\xe0\xc0\x1a\x05H\xce\x1a\x058\xcf\x1a\x05\x80\xc9\x1a\x058\xc3\x1a\x05\xf8\xc3\x1a\x05X\xc1\x1a\x05\xb8\xcd\x1a\x05\xe8\xcd\x1a\x05\xb0\xcc\x1a\x05\xe0\xcf\x1a\x058\xc9\x1a\x05\x80\xcf\x1a\x05@\xcd\x1a\x05\xb0\xc6\x1a\x05\xd0\xca\x1a\x05(\xcd\x1a\x05\x98\xcc\x1a\x05\xd8\xce\x1a\x05 \xcf\x1a\x05x\xc8\x1a\x05\xf0\xcb\x1a\x05H\xc2\x1a\x05\xf0\xc5\x1a\x05\x88\xca\x1a\x05\xb8\xca\x1a\x05x\xcb\x1a\x05\xc0\xc2\x1a\x05\x08\xc3\x1a\x05\xb8\xc4\x1a\x05`\xc8\x1a\x05\xe0\xcc\x1a\x05\xa8\xcb\x1a\x05\xd0\xc4\x1a\x05\x98\xc9\x1a\x05h\xc9\x1a\x05@\xca\x1a\x05\xa8\xc8\x1a\x05h\xc0\x1a\x05P\xc9\x1a\x05\x18\xc2\x1a\x05\xc8\xc0\x1a\x05\x00\xcb\x1a\x05\xf8\xc0\x1a\x05\xf8\xcc\x1a\x05\x10\xcd\x1a\x05\x98\xc6\x1a\x05h\xcf\x1a\x05\xf0^U\x02@\xc7\x1a\x05\x08i\x1a\x05\x98\xf3\xe3\x04\xe0\xc3\x1a\x05\xa8\xce\x1a\x05\xd0\xcd\x1a\x050\xce\x1a\x05Xg\x1a\x05\x00n\x1a\x05(m\x1a\x05\x08f\x1a\x058f\x1a\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g994
sg895
g984
sg909
g988
sg904
g992
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g1065
sg895
g1061
sg909
g1072
sg904
g1069
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g1095
sg895
g1091
sg909
g1102
sg904
g1099
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g1112
sg895
g1108
sg909
g1119
sg904
g1116
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g1065
sg895
g1138
sg909
g1072
sg904
g1145
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g1157
sg895
g1153
sg909
g1164
sg904
g1161
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g1174
sg895
g1170
sg909
g1181
sg904
g1178
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g1095
sg895
g1187
sg909
g1102
sg904
g1194
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g1022
sg895
g1202
sg909
g1029
sg904
g1209
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g954
sg895
g1217
sg909
g961
sg904
g1224
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g1236
sg895
g1232
sg909
g1243
sg904
g1240
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g1095
sg895
g1187
sg909
g1102
sg904
g1194
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g1285
sg895
g1275
sg909
g1279
sg904
g1283
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g994
sg895
g984
sg909
g988
sg904
g992
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g1322
sg895
g1318
sg909
g1329
sg904
g1326
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g1174
sg895
g1170
sg909
g1181
sg904
g1178
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g1352
sg895
g1348
sg909
g1359
sg904
g1356
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g1322
sg895
g1318
sg909
g1329
sg904
g1326
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g1022
sg895
g1202
sg909
g1029
sg904
g1209
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g1322
sg895
g1391
sg909
g1329
sg904
g1398
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g920
sg895
g1406
sg909
g927
sg904
g1413
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g1285
sg895
g1275
sg909
g1279
sg904
g1283
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g1322
sg895
g1391
sg909
g1329
sg904
g1398
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g920
sg895
g1406
sg909
g927
sg904
g1413
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g1352
sg895
g1460
sg909
g1359
sg904
g1467
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g920
sg895
g1406
sg909
g927
sg904
g1413
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g1352
sg895
g1460
sg909
g1359
sg904
g1467
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g1065
sg895
g1061
sg909
g1072
sg904
g1069
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g1112
sg895
g1108
sg909
g1119
sg904
g1116
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g1065
sg895
g1061
sg909
g1072
sg904
g1069
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g1544
sg895
g1540
sg909
g1551
sg904
g1548
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g1095
sg895
g1187
sg909
g1102
sg904
g1194
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g1285
sg895
g1570
sg909
g1279
sg904
g1577
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g1065
sg895
g1138
sg909
g1072
sg904
g1145
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g1022
sg895
g1202
sg909
g1029
sg904
g1209
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g1112
sg895
g1611
sg909
g1119
sg904
g1618
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g920
sg895
g1406
sg909
g927
sg904
g1413
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g1112
sg895
g1611
sg909
g1119
sg904
g1618
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g1005
sg895
g1678
sg909
g1012
sg904
g1685
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g971
sg895
g1693
sg909
g978
sg904
g1700
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1712
sg895
g1708
sg909
g1719
sg904
g1716
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g1352
sg895
g1348
sg909
g1359
sg904
g1356
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g1005
sg895
g1678
sg909
g1012
sg904
g1685
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g1236
sg895
g1764
sg909
g1243
sg904
g1771
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g1174
sg895
g1792
sg909
g1181
sg904
g1799
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g1065
sg895
g1138
sg909
g1072
sg904
g1145
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g1174
sg895
g1170
sg909
g1181
sg904
g1178
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g1712
sg895
g1833
sg909
g1719
sg904
g1840
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g994
sg895
g1848
sg909
g988
sg904
g1855
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g1880
sg895
g1876
sg909
g1887
sg904
g1884
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g1544
sg895
g1893
sg909
g1551
sg904
g1900
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g1174
sg895
g1792
sg909
g1181
sg904
g1799
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g1880
sg895
g1876
sg909
g1887
sg904
g1884
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g1157
sg895
g1153
sg909
g1164
sg904
g1161
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g900
sg895
g1947
sg909
g910
sg904
g1954
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g1880
sg895
g1962
sg909
g1887
sg904
g1969
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g954
sg895
g1217
sg909
g961
sg904
g1224
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g1285
sg895
g1275
sg909
g1279
sg904
g1283
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g1236
sg895
g1232
sg909
g1243
sg904
g1240
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g1712
sg895
g1833
sg909
g1719
sg904
g1840
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g1157
sg895
g2042
sg909
g1164
sg904
g2049
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g1880
sg895
g1962
sg909
g1887
sg904
g1969
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g1022
sg895
g1202
sg909
g1029
sg904
g1209
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g1112
sg895
g1611
sg909
g1119
sg904
g1618
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g900
sg895
g1947
sg909
g910
sg904
g1954
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g1157
sg895
g1153
sg909
g1164
sg904
g1161
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g1285
sg895
g1570
sg909
g1279
sg904
g1577
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g1112
sg895
g1611
sg909
g1119
sg904
g1618
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g1095
sg895
g1187
sg909
g1102
sg904
g1194
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g1157
sg895
g2042
sg909
g1164
sg904
g2049
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g1322
sg895
g1318
sg909
g1329
sg904
g1326
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g1880
sg895
g1876
sg909
g1887
sg904
g1884
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g971
sg895
g1693
sg909
g978
sg904
g1700
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g1095
sg895
g1187
sg909
g1102
sg904
g1194
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g920
sg895
g1406
sg909
g927
sg904
g1413
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g1174
sg895
g1170
sg909
g1181
sg904
g1178
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g1236
sg895
g1764
sg909
g1243
sg904
g1771
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g1880
sg895
g1876
sg909
g1887
sg904
g1884
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g1322
sg895
g1391
sg909
g1329
sg904
g1398
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g1352
sg895
g1348
sg909
g1359
sg904
g1356
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g1174
sg895
g1792
sg909
g1181
sg904
g1799
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g1157
sg895
g1153
sg909
g1164
sg904
g1161
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g1236
sg895
g1764
sg909
g1243
sg904
g1771
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g1285
sg895
g1570
sg909
g1279
sg904
g1577
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g971
sg895
g1693
sg909
g978
sg904
g1700
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g1095
sg895
g1091
sg909
g1102
sg904
g1099
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g1544
sg895
g1540
sg909
g1551
sg904
g1548
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g1712
sg895
g1833
sg909
g1719
sg904
g1840
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g937
sg895
g2460
sg909
g944
sg904
g2467
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g1157
sg895
g2042
sg909
g1164
sg904
g2049
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g1112
sg895
g1108
sg909
g1119
sg904
g1116
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g1544
sg895
g1893
sg909
g1551
sg904
g1900
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g1112
sg895
g1611
sg909
g1119
sg904
g1618
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g1352
sg895
g1460
sg909
g1359
sg904
g1467
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g937
sg895
g2460
sg909
g944
sg904
g2467
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g1712
sg895
g1708
sg909
g1719
sg904
g1716
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g994
sg895
g984
sg909
g988
sg904
g992
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g1022
sg895
g1202
sg909
g1029
sg904
g1209
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g1065
sg895
g1061
sg909
g1072
sg904
g1069
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g1544
sg895
g1893
sg909
g1551
sg904
g1900
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g1157
sg895
g2042
sg909
g1164
sg904
g2049
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g1095
sg895
g1091
sg909
g1102
sg904
g1099
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g1880
sg895
g1962
sg909
g1887
sg904
g1969
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g937
sg895
g2460
sg909
g944
sg904
g2467
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g1352
sg895
g1460
sg909
g1359
sg904
g1467
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g1005
sg895
g1678
sg909
g1012
sg904
g1685
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g1285
sg895
g1275
sg909
g1279
sg904
g1283
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g1065
sg895
g1061
sg909
g1072
sg904
g1069
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1285
sg895
g1275
sg909
g1279
sg904
g1283
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g1236
sg895
g1764
sg909
g1243
sg904
g1771
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g1352
sg895
g1460
sg909
g1359
sg904
g1467
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g1544
sg895
g1540
sg909
g1551
sg904
g1548
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g1712
sg895
g1708
sg909
g1719
sg904
g1716
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g1236
sg895
g1764
sg909
g1243
sg904
g1771
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g1112
sg895
g1108
sg909
g1119
sg904
g1116
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g1285
sg895
g1570
sg909
g1279
sg904
g1577
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g994
sg895
g984
sg909
g988
sg904
g992
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g1322
sg895
g1318
sg909
g1329
sg904
g1326
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g1712
sg895
g1833
sg909
g1719
sg904
g1840
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g1544
sg895
g1893
sg909
g1551
sg904
g1900
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g994
sg895
g1848
sg909
g988
sg904
g1855
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g937
sg895
g2460
sg909
g944
sg904
g2467
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g994
sg895
g1848
sg909
g988
sg904
g1855
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g1544
sg895
g1540
sg909
g1551
sg904
g1548
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g900
sg895
g1947
sg909
g910
sg904
g1954
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g1236
sg895
g1232
sg909
g1243
sg904
g1240
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g1095
sg895
g1091
sg909
g1102
sg904
g1099
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g971
sg895
g1693
sg909
g978
sg904
g1700
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g1236
sg895
g1232
sg909
g1243
sg904
g1240
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g1112
sg895
g1108
sg909
g1119
sg904
g1116
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g1352
sg895
g1348
sg909
g1359
sg904
g1356
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g1544
sg895
g1893
sg909
g1551
sg904
g1900
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g994
sg895
g984
sg909
g988
sg904
g992
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g1236
sg895
g1232
sg909
g1243
sg904
g1240
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g971
sg895
g1693
sg909
g978
sg904
g1700
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g937
sg895
g2460
sg909
g944
sg904
g2467
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g994
sg895
g1848
sg909
g988
sg904
g1855
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g1322
sg895
g1318
sg909
g1329
sg904
g1326
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g1005
sg895
g1678
sg909
g1012
sg904
g1685
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g1095
sg895
g1091
sg909
g1102
sg904
g1099
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g1005
sg895
g1678
sg909
g1012
sg904
g1685
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g1712
sg895
g1833
sg909
g1719
sg904
g1840
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g1352
sg895
g1348
sg909
g1359
sg904
g1356
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g900
sg895
g1947
sg909
g910
sg904
g1954
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g1157
sg895
g2042
sg909
g1164
sg904
g2049
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g1712
sg895
g1708
sg909
g1719
sg904
g1716
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g954
sg895
g1217
sg909
g961
sg904
g1224
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g1174
sg895
g1792
sg909
g1181
sg904
g1799
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g1157
sg895
g1153
sg909
g1164
sg904
g1161
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g900
sg895
g1947
sg909
g910
sg904
g1954
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g1322
sg895
g1391
sg909
g1329
sg904
g1398
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g954
sg895
g1217
sg909
g961
sg904
g1224
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g994
sg895
g1848
sg909
g988
sg904
g1855
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g1174
sg895
g1170
sg909
g1181
sg904
g1178
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g1285
sg895
g1570
sg909
g1279
sg904
g1577
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g1065
sg895
g1138
sg909
g1072
sg904
g1145
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g1880
sg895
g1876
sg909
g1887
sg904
g1884
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g1880
sg895
g1962
sg909
g1887
sg904
g1969
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g1322
sg895
g1391
sg909
g1329
sg904
g1398
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g1880
sg895
g1962
sg909
g1887
sg904
g1969
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g1174
sg895
g1792
sg909
g1181
sg904
g1799
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g954
sg895
g1217
sg909
g961
sg904
g1224
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g1712
sg895
g1708
sg909
g1719
sg904
g1716
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g1065
sg895
g1138
sg909
g1072
sg904
g1145
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g1544
sg895
g1540
sg909
g1551
sg904
g1548
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I79090000
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S'\x88\x0b!\x050\xba!\x05h\xba!\x050\xba!\x05`\x0b!\x058\x0b!\x05\x10\x0b!\x05H\xbb!\x05\x88\x0b!\x05@-\xa7\x04`\x85!\x05\xa0(\xa7\x04\xa8\t!\x05X\t!\x05`-\xa7\x04p\x84!\x05\xc0\x85!\x05\x10\x0b!\x05h\xba!\x05\x00\x85!\x05\x98\n!\x05\x80\xbb!\x05\xc0(\xa7\x04\xe0(\xa7\x04`\x85!\x05\x10\x0b!\x05\x98\n!\x05\xd0\x84!\x05H\n!\x05\xa0\xba!\x05\xe8\n!\x05h\xba!\x05 \n!\x05\xe0(\xa7\x048\x0b!\x05@-\xa7\x04\x10\xbb!\x05\x90\x85!\x05\xc0(\xa7\x04H\n!\x05\xe8\n!\x05 \x86!\x05H\n!\x05@\x84!\x05\xe8\n!\x05\xc0\x85!\x05H\n!\x05`-\xa7\x04 \n!\x05 -\xa7\x04 \x86!\x05\xa0\x84!\x05\xc0\n!\x050\xba!\x05\x10\x0b!\x05H\n!\x050\t!\x05\xa0\x84!\x058\x0b!\x05\xd0\x84!\x05\x00\x85!\x05\x80\xbb!\x05\xe8\n!\x05\xe0(\xa7\x04`\x0b!\x05\xd8\xba!\x05`\x0b!\x05h\xba!\x05@-\xa7\x04h\xba!\x05\xa0\x84!\x05`\x85!\x05`\x0b!\x058\x0b!\x05\xc0(\xa7\x04 \x86!\x05p\x84!\x05H\xbb!\x05\xd0\x84!\x05P\x86!\x05p\x84!\x05 \n!\x05\x00\x85!\x05\x98\n!\x05@\x84!\x05\xe0(\xa7\x04 \x86!\x05\x10\x0b!\x05\xa8\t!\x05`-\xa7\x04p\n!\x058\x0b!\x050\t!\x05`\x0b!\x050\t!\x05 -\xa7\x04H\xbb!\x05p\x84!\x05\x98\n!\x05 \n!\x05\xa0(\xa7\x04H\xbb!\x05p\x84!\x05H\n!\x05\x88\x0b!\x05`\x0b!\x05p\n!\x050\xba!\x05p\x84!\x050\xba!\x05H\n!\x05 \n!\x050\x85!\x05p\n!\x05\x10\x0b!\x05\xd8\xba!\x05\xa0\x84!\x05h\xba!\x05p\x84!\x05\xc0\n!\x05\x88\x0b!\x05\xd0\x84!\x05\xc0\x85!\x05\xe8\n!\x05\x98\n!\x05 -\xa7\x04\x10\x0b!\x05 -\xa7\x040\xba!\x05\xc0\n!\x05`\x0b!\x05 \n!\x05 -\xa7\x04\xe0(\xa7\x04\x10\x0b!\x05@\x84!\x05@-\xa7\x04`\x85!\x05\xc0\n!\x05 -\xa7\x04\x98\n!\x05\xc0\n!\x05\xe8\n!\x05 -\xa7\x04\xc0(\xa7\x04\xd0\t!\x05p\n!\x05\xa0\x84!\x05\x88\x0b!\x05 -\xa7\x048\x0b!\x05\x98\n!\x05\xa0\x84!\x05\xf0\x85!\x05\xc0\n!\x05\xa0(\xa7\x04H\n!\x05\xc0\n!\x05\x08\t!\x05@-\xa7\x04`-\xa7\x04\xe0(\xa7\x04\x88\x0b!\x05`-\xa7\x04\x98\n!\x058\x0b!\x050\xba!\x05\xa8\t!\x05 \n!\x050\x85!\x05X\t!\x05\xe8\n!\x05@\x84!\x05\xc0\n!\x05\xd0\x84!\x05`-\xa7\x04@\x84!\x05\x10\x0b!\x05 \n!\x05\xd8\xba!\x05\xe0(\xa7\x048\x0b!\x050\x85!\x05p\x84!\x05@-\xa7\x04\x98\n!\x05p\n!\x05\x90\x85!\x05h\xba!\x05\x88\x0b!\x05\xc0(\xa7\x04@\x84!\x058\x0b!\x05\xa0(\xa7\x04\x88\x0b!\x05\xd0\x84!\x05P\x86!\x05 \n!\x05\x88\x0b!\x05\xa0\x84!\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S' G\xef\x1a\xc0E\xef\x1a\x80G\xef\x1a\xa0G\xef\x1a\x00H\xef\x1a`H\xef\x1a`F\xef\x1a@H\xef\x1a\xa0F\xef\x1a`G\xef\x1a\xe0G\xef\x1a\x80F\xef\x1a@F\xef\x1a\x00F\xef\x1a\xa0H\xef\x1a@I\xef\x1a\x00I\xef\x1a\x00G\xef\x1a F\xef\x1a@G\xef\x1a\xc0F\xef\x1a\x00E\xef\x1a\xe0E\xef\x1a\xe0I\xef\x1a\x80I\xef\x1a\xc0@\xef\x1a H\xef\x1a\x80H\xef\x1a@J\xef\x1a\xc0I\xef\x1a K\xef\x1a`I\xef\x1a\xe0J\xef\x1a\xc0G\xef\x1a\x00L\xef\x1a\x00J\xef\x1a\x80J\xef\x1a\xa0K\xef\x1a`K\xef\x1a\x80K\xef\x1a@K\xef\x1a\xa0J\xef\x1a\xc0J\xef\x1a`L\xef\x1a\xc0K\xef\x1a\xe0L\xef\x1a\xe0H\xef\x1a@L\xef\x1a@M\xef\x1a\xe0K\xef\x1a\xa0L\xef\x1a@N\xef\x1a`J\xef\x1a M\xef\x1a N\xef\x1a\xe0F\xef\x1a\xa0N\xef\x1a\x00O\xef\x1a\xe0M\xef\x1a\x80M\xef\x1a\xa0I\xef\x1a\x00M\xef\x1a\xe0N\xef\x1a`E\xef\x1a O\xef\x1a\x80L\xef\x1a\x80O\xef\x1a\xa0O\xef\x1a\xc0N\xef\x1a\x00N\xef\x1a\x80N\xef\x1a@O\xef\x1a L\xef\x1a\xc0M\xef\x1a`M\xef\x1a\x80\x1fI\r`N\xef\x1a\xc0L\xef\x1a\xc0O\xef\x1a\xc0H\xef\x1a`O\xef\x1a\xa0M\xef\x1a \x11I\r I\xef\x1a\xc00\x19\x1b 2\x19\x1b\xe01\x19\x1b@1\x19\x1b\x00K\xef\x1a`0\x19\x1b 3\x19\x1b\xc02\x19\x1b`3\x19\x1b\xa02\x19\x1b@3\x19\x1b\xc01\x19\x1b\xa01\x19\x1b 0\x19\x1b\x802\x19\x1b\xa03\x19\x1b\xe03\x19\x1b\xa00\x19\x1b 1\x19\x1b\x804\x19\x1b\xe00\x19\x1b\xe04\x19\x1b@2\x19\x1b\xc05\x19\x1b\x801\x19\x1b`2\x19\x1b@0\x19\x1b\x805\x19\x1b 5\x19\x1b\x001\x19\x1b`6\x19\x1b@4\x19\x1b\x005\x19\x1b\x007\x19\x1b`5\x19\x1b\x800\x19\x1b 7\x19\x1b\x803\x19\x1b\x006\x19\x1b@5\x19\x1b 6\x19\x1b\x004\x19\x1b\xc06\x19\x1b\xe05\x19\x1b`4\x19\x1b\xa06\x19\x1b`8\x19\x1b\xc03\x19\x1b\xe07\x19\x1b\x807\x19\x1b@7\x19\x1b`7\x19\x1b 8\x19\x1b\xc04\x19\x1b\xa04\x19\x1b@9\x19\x1b\xe06\x19\x1b@6\x19\x1b`9\x19\x1b\xc08\x19\x1b\x002\x19\x1b\xc09\x19\x1b\x008\x19\x1b@8\x19\x1b\xe08\x19\x1b\xa05\x19\x1b\xa0:\x19\x1b 9\x19\x1b ;\x19\x1b`1\x19\x1b\xc07\x19\x1b\x80:\x19\x1b\xa08\x19\x1b\x00;\x19\x1b\xe09\x19\x1b\x806\x19\x1b\x009\x19\x1b\xa07\x19\x1b\x80;\x19\x1b\xc0:\x19\x1b\xa0;\x19\x1b\x00:\x19\x1b 4\x19\x1b :\x19\x1b\xc0\x17I\r <\x19\x1b\x808\x19\x1b\xc0;\x19\x1b`:\x19\x1b =\x19\x1b\xa09\x19\x1b`<\x19\x1b@<\x19\x1b\xe0=\x19\x1b\xe0<\x19\x1b\xc0=\x19\x1b@;\x19\x1b\xa0<\x19\x1b\xa0>\x19\x1b@>\x19\x1b\x80<\x19\x1b\x809\x19\x1b\xc0>\x19\x1b\x80=\x19\x1b >\x19\x1b\x80>\x19\x1b ?\x19\x1b\xe0:\x19\x1b@=\x19\x1b`=\x19\x1b\xa0?\x19\x1b\xc0?\x19\x1b\xe0?\x19\x1b`;\x19\x1b\xe0;\x19\x1b@:\x19\x1b'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S'A\xcd\x1d?F\x0e\xb1?\x0f\xab*?\xf8\x11Q?\xb1xw?|1"?xE\x19?C\xfb??A>D?\x85\xde\x1d?&\x88\x88?H\x907?q\xaa*?H"\x82?\x02DD?~l\xf7>\xd9&s?\xc3""?\x06\xedL?\xc3\xde\x1d?\xa9\xb9L?\xd5x7?U\x9a\x99>\xf5V\xd5>\x9e5\xb3>\xdf\xa8\xaa>\xbb\x1d\x07=\x9f\xed.?\xa7\x10\x91>\xd5M\x15?\xb6D\x04?\x94\xaa\x8a?\x96\x14Q?\x9b]&?\xca!"?g\x9e\x08?\x92O\x15?\x0e\x88\x08?\xf513?\x17\xc5\xac?a\x9a;>\xad\xab*?\xa6\xfa??\xb2\x847?\xf7^\x86?+\n\x91?\xb5\x1c"?v\xc3*?\x9c3s?\xd9\xcc\x8c?\xc3\xdd]?[\xea\x8e?S\xc1]>\xcd\x81\xee=\xeb\r\x11@<\xd0\xdd>\x8cr\xcc=\xfbyw?Z6b?(VU?N\x1b"?\xfa\x98Y?@D\x84?+\x85H?\x8b\xc9L?\xf3\xa9j?\xf1S\x15?\x88\x0b\x11?d\xdc\x1d?\x9bDD?\xc6\xee\xce?w\x1bb?\x8d\x00@?\xd6h&?\xa9\x12Q?\xdd\x80\x88?\xc9\x1e\x82?[2\xb3?\xc5\xb9;>\x8c\xde]?\xec\xd2\xcc>\xdcq\x97?\x1bj&?\x8f\xe7\xae?\xe8@D?\x85\xdd\xdd?\xfe\'"?\x01\xdc]>\xdc$3?$\x17"?\xc9\xd2\x1d?\xac\xd4\x1d?\xd1\xb6;?\xb7\x99\x19?\xbc\xcd\x0c?!\xbb\x9b?\x7f>\xc4?\x15\x12Q?\x11\xb1L?\x1fJU?2DD?\xe0k\x15?\x924\xb3>U""?\x18\x07Q?\x1d\xd4\x1d?\xd4\x01\x08=\x07q\xd7?\xe1\xd8\xbd?\xaeK\xe6>~2"?\xdc\x83\x88?\xd3\x8a\x19?f\x94\x99?\xce\x8fY?\xdb\xcen>l\xd8\xee>2\xe4n?\xff1\xc4>8F\xd5>\xed\xdd.?H`\xc6?\x84\xadL>dE\x88=]g\x99>%n7?\x94\x88\x08?\xc7\x88\xa8?\xaf\xd3;?\'\xean?\xde\xa3\xaa=\x8e\xcf;?\xa9\x83\xa8?\xaf\x07\x11?\xdfJU?W\x1c\xc2?Pr7?\xd4\x98Y?.#b? ;"?P\x85\x19?\xf7\xfe??<\xac\xaa>\x1f\xcb\x0c?\xee\x9a\x99> \x0c+>\xf0pw?\xb5\xd8\x1d?\xc1\xf3??\xcc\xfa??\'s7?\x93\x16\x11?\xc3\xdb\x9d?\xfb\xb5L?\x1eTU?\x1c\x1c"?\x01%"?u\xe3L?raf?\x8f"3?S\xe9.?\x10\xdb\x9d?\x1aW&?\x0f\xf8\x1d?\x95\xcc\x1d?=f&?2DD?\x19g&?"\xbfL?\x9e\x08/?\x8b\xbd;?#\xe7.?G\xcdL?qv7?\xc8\xce\x0c?\xa0\xf8\x90>\xd0\xfe??\xb6\xe0.?\x1433?\x8b\x0bQ?\x9c_\x86?M\xd7\xee>9\x98\x19?\x8bw7?\x7f\xe7??Ls\x08?\xf7\xf6??G\'s?ua\x86?\xbe\xa8n>-\xd9\x1d?*\xf6??~Y\x15?\xdb\xf3\x7f?~\xac{?\x0f\xf5??\xac\xcan>\xdcIU?\x8e\x85\x19?\xd1\xba\xcc>'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S' i\x1a\x05\xd0j\x1a\x05\xf0b\xd8\x04\xe8g\xd8\x04\x80c\xd8\x04`k\xd8\x04\x10d\xd8\x04\xc0k\xd8\x04Hk\xd8\x04\x10m\xd8\x04\xc8l\xd8\x04\xa8h\xd8\x04\xf8c\xd8\x04\x80f\xd8\x04\xf0k\xd8\x04pg\xd8\x04\x98l\xd8\x04\xf8l\xd8\x04\xd8h\xd8\x04 `\xd8\x04xh\xd8\x04\x80`\xd8\x04Hn\xd8\x04\xe8a\xd8\x04He\xd8\x04hi\xd8\x04\x08o\xd8\x04\xd0g\xd8\x04\xe0i\xd8\x04ho\xd8\x04\x10g\xd8\x04xb\xd8\x04\x98o\xd8\x04\x90h\xd8\x04\xf8f\xd8\x04\xc0e\xd8\x04\x18k\xd8\x04\x08i\xd8\x04\x90e\xd8\x04\x00b\xd8\x04\xb0`\xd8\x04 l\xd8\x04\xc0h\xd8\x04\x98f\xd8\x04hc\xd8\x04@m\xd8\x04\x08c\xd8\x04\xd8n\xd8\x04\x90n\xd8\x04\x18b\xd8\x04Hb\xd8\x04\xb8j\xd8\x04\x18e\xd8\x04\x88m\xd8\x04\xd8e\xd8\x04\xf8`\xd8\x04\x88j\xd8\x04\xe0f\xd8\x04\x00e\xd8\x04\x98c\xd8\x048l\xd8\x04\xd0m\xd8\x04\xe8d\xd8\x04@d\xd8\x04\x88g\xd8\x04Xj\xd8\x04\xb0f\xd8\x04\xb8m\xd8\x04\x08f\xd8\x04\xa8e\xd8\x04\xc8`\xd8\x04\xf0h\xd8\x04\xe0l\xd8\x04pd\xd8\x04@j\xd8\x04 \xf3\xe3\x048\xf3\xe3\x04\xa8\xfb\xe3\x04\xb0\xf3\xe3\x04X\xf4\xe3\x040\xfb\xe3\x04\xd0\xf7\xe3\x04\xb0\xf6\xe3\x04`\xf8\xe3\x04P\xff\xe3\x04\xe0\xf9\xe3\x04\x90\xf5\xe3\x04 \xf6\xe3\x04\xb8\xf4\xe3\x04\x80\xf6\xe3\x04p\x07\xcb\x03\xa8\x02\xcb\x03`\x85\x19\x05\x90\x85\x19\x05\xd8\x88\x19\x05x\x88\x19\x05@\x87\x19\x05\xc0\x85\x19\x05(\x8d\x19\x05\xc0\x8e\x19\x058\x83\x19\x05h\x83\x19\x05p\x84\x19\x05\xe8\x87\x19\x05\x08\x83\x19\x05H\x85\x19\x05\x90\x82\x19\x050\x82\x19\x05\x98\x80\x19\x05\xc0\x82\x19\x05\xe8\x81\x19\x05\xa0\x81\x19\x05\xf8\x83\x19\x05\xf0\x85\x19\x05\x98\x89\x19\x05\xf0\x8b\x19\x05\xa8\x8b\x19\x05X\x8d\x19\x05(\x81\x19\x05h\x89\x19\x058\x89\x19\x05h\x80\x19\x05\xf8\x8c\x19\x05\xb0\x83\x19\x058\x80\x19\x05\x10\x87\x19\x05\x18\x85\x19\x05\x00\x88\x19\x05\xf8\x89\x19\x05P\x86\x19\x05P\x89\x19\x05@\x8a\x19\x05\x18\x8e\x19\x05\xb8\x8d\x19\x05\xd8\x8e\x19\x05@\x84\x19\x05\xd8\x85\x19\x058\x8f\x19\x05\xa0\x84\x19\x05\xf0\x8e\x19\x05\xb8\x81\x19\x05\x90\x88\x19\x05h\x8f\x19\x05P\x80\x19\x05\x08\x86\x19\x05\xe0\x8f\x19\x05\x98\x8f\x19\x05\xa0\x8a\x19\x050\x88\x19\x050\x8e\x19\x05\xb0\x86\x19\x05P\x8f\x19\x05X\x87\x19\x05\x80\x89\x19\x05\xa8\x8e\x19\x05\xc8i\xd8\x04\xa0g\xd8\x040h\xd8\x04\xb8g\xd8\x04\xa8n\xd8\x04\x10a\xd8\x04xk\xd8\x04\xa0j\xd8\x04\xc0n\xd8\x04Hh\xd8\x04\xa8b\xd8\x04\xa0d\xd8\x04\xd0d\xd8\x04\xb0c\xd8\x040k\xd8\x04hl\xd8\x04\x08l\xd8\x04`e\xd8\x04`b\xd8\x04\xf0e\xd8\x04\x00n\xd8\x04(m\xd8\x04\xe0c\xd8\x04 f\xd8\x04\xc8o\xd8\x04Xg\xd8\x04 o\xd8\x04pa\xd8\x04`n\xd8\x04(j\xd8\x04\xd8k\xd8\x04\x00k\xd8\x04\xb8d\xd8\x04Pl\xd8\x04Pf\xd8\x04\xb0o\xd8\x04\x10j\xd8\x04Po\xd8\x04\xa8k\xd8\x04\xb8a\xd8\x04\xf0n\xd8\x04xn\xd8\x04\x80l\xd8\x04\x98i\xd8\x04\x18h\xd8\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3658
sg3633
g3688
sg3647
g3665
sg3642
g3695
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3707
sg3633
g3703
sg3647
g3714
sg3642
g3711
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3724
sg3633
g3720
sg3647
g3731
sg3642
g3728
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3764
sg3633
g3754
sg3647
g3758
sg3642
g3762
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3638
sg3633
g3771
sg3647
g3648
sg3642
g3778
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3813
sg3633
g3803
sg3647
g3807
sg3642
g3811
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3843
sg3633
g3833
sg3647
g3837
sg3642
g3841
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3860
sg3633
g3850
sg3647
g3854
sg3642
g3858
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3764
sg3633
g3754
sg3647
g3758
sg3642
g3762
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3907
sg3633
g3897
sg3647
g3901
sg3642
g3905
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3658
sg3633
g3688
sg3647
g3665
sg3642
g3695
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3957
sg3633
g3953
sg3647
g3964
sg3642
g3961
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3980
sg3633
g3970
sg3647
g3974
sg3642
g3978
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3997
sg3633
g3987
sg3647
g3991
sg3642
g3995
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g4008
sg3633
g4004
sg3647
g4015
sg3642
g4012
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g3813
sg3633
g4021
sg3647
g3807
sg3642
g4028
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3957
sg3633
g4049
sg3647
g3964
sg3642
g4056
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g4068
sg3633
g4064
sg3647
g4075
sg3642
g4072
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g4085
sg3633
g4081
sg3647
g4092
sg3642
g4089
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g3843
sg3633
g4111
sg3647
g3837
sg3642
g4118
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g3675
sg3633
g4126
sg3647
g3682
sg3642
g4133
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g4145
sg3633
g4141
sg3647
g4152
sg3642
g4149
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g4008
sg3633
g4158
sg3647
g4015
sg3642
g4165
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g3724
sg3633
g3720
sg3647
g3731
sg3642
g3728
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g3790
sg3633
g4186
sg3647
g3797
sg3642
g4193
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g3997
sg3633
g4227
sg3647
g3991
sg3642
g4234
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g4085
sg3633
g4242
sg3647
g4092
sg3642
g4249
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g3843
sg3633
g3833
sg3647
g3837
sg3642
g3841
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g4068
sg3633
g4270
sg3647
g4075
sg3642
g4277
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g4085
sg3633
g4242
sg3647
g4092
sg3642
g4249
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g3813
sg3633
g3803
sg3647
g3807
sg3642
g3811
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g3843
sg3633
g4111
sg3647
g3837
sg3642
g4118
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g3907
sg3633
g4324
sg3647
g3901
sg3642
g4331
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g4085
sg3633
g4081
sg3647
g4092
sg3642
g4089
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g3764
sg3633
g3754
sg3647
g3758
sg3642
g3762
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g4145
sg3633
g4141
sg3647
g4152
sg3642
g4149
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g3980
sg3633
g4378
sg3647
g3974
sg3642
g4385
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g4068
sg3633
g4270
sg3647
g4075
sg3642
g4277
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g3907
sg3633
g3897
sg3647
g3901
sg3642
g3905
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g3860
sg3633
g3850
sg3647
g3854
sg3642
g3858
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g3741
sg3633
g4445
sg3647
g3748
sg3642
g4452
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g4085
sg3633
g4081
sg3647
g4092
sg3642
g4089
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g4008
sg3633
g4004
sg3647
g4015
sg3642
g4012
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g3907
sg3633
g3897
sg3647
g3901
sg3642
g3905
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g3724
sg3633
g3720
sg3647
g3731
sg3642
g3728
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g4068
sg3633
g4270
sg3647
g4075
sg3642
g4277
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g3980
sg3633
g3970
sg3647
g3974
sg3642
g3978
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g3843
sg3633
g3833
sg3647
g3837
sg3642
g3841
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g4008
sg3633
g4004
sg3647
g4015
sg3642
g4012
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g3707
sg3633
g3703
sg3647
g3714
sg3642
g3711
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g3675
sg3633
g4126
sg3647
g3682
sg3642
g4133
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g3707
sg3633
g3703
sg3647
g3714
sg3642
g3711
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g3675
sg3633
g4126
sg3647
g3682
sg3642
g4133
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g3907
sg3633
g3897
sg3647
g3901
sg3642
g3905
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g3813
sg3633
g3803
sg3647
g3807
sg3642
g3811
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g3707
sg3633
g3703
sg3647
g3714
sg3642
g3711
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g3724
sg3633
g4694
sg3647
g3731
sg3642
g4701
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g3997
sg3633
g3987
sg3647
g3991
sg3642
g3995
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g4068
sg3633
g4064
sg3647
g4075
sg3642
g4072
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g3764
sg3633
g4748
sg3647
g3758
sg3642
g4755
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g4068
sg3633
g4064
sg3647
g4075
sg3642
g4072
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g4085
sg3633
g4081
sg3647
g4092
sg3642
g4089
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g3884
sg3633
g4789
sg3647
g3891
sg3642
g4796
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g4145
sg3633
g4141
sg3647
g4152
sg3642
g4149
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g3658
sg3633
g3688
sg3647
g3665
sg3642
g3695
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g3957
sg3633
g4049
sg3647
g3964
sg3642
g4056
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g3813
sg3633
g3803
sg3647
g3807
sg3642
g3811
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g4008
sg3633
g4158
sg3647
g4015
sg3642
g4165
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g4068
sg3633
g4064
sg3647
g4075
sg3642
g4072
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g3741
sg3633
g4445
sg3647
g3748
sg3642
g4452
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g3843
sg3633
g4111
sg3647
g3837
sg3642
g4118
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g3764
sg3633
g3754
sg3647
g3758
sg3642
g3762
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g3997
sg3633
g4227
sg3647
g3991
sg3642
g4234
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g3724
sg3633
g4694
sg3647
g3731
sg3642
g4701
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g4008
sg3633
g4158
sg3647
g4015
sg3642
g4165
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g3707
sg3633
g4960
sg3647
g3714
sg3642
g4967
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g4008
sg3633
g4158
sg3647
g4015
sg3642
g4165
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g3980
sg3633
g4378
sg3647
g3974
sg3642
g4385
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g3764
sg3633
g4748
sg3647
g3758
sg3642
g4755
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g3884
sg3633
g4789
sg3647
g3891
sg3642
g4796
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g3957
sg3633
g4049
sg3647
g3964
sg3642
g4056
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g4145
sg3633
g5040
sg3647
g4152
sg3642
g5047
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g3764
sg3633
g4748
sg3647
g3758
sg3642
g4755
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g4085
sg3633
g4242
sg3647
g4092
sg3642
g4249
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g3638
sg3633
g3771
sg3647
g3648
sg3642
g3778
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g3707
sg3633
g4960
sg3647
g3714
sg3642
g4967
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g3997
sg3633
g3987
sg3647
g3991
sg3642
g3995
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g3658
sg3633
g3688
sg3647
g3665
sg3642
g3695
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g3658
sg3633
g3688
sg3647
g3665
sg3642
g3695
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g4085
sg3633
g4242
sg3647
g4092
sg3642
g4249
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g4145
sg3633
g5040
sg3647
g4152
sg3642
g5047
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g3707
sg3633
g4960
sg3647
g3714
sg3642
g4967
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g3997
sg3633
g3987
sg3647
g3991
sg3642
g3995
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g3741
sg3633
g4445
sg3647
g3748
sg3642
g4452
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g3907
sg3633
g4324
sg3647
g3901
sg3642
g4331
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g3884
sg3633
g4789
sg3647
g3891
sg3642
g4796
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g3860
sg3633
g3850
sg3647
g3854
sg3642
g3858
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g3638
sg3633
g3771
sg3647
g3648
sg3642
g3778
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g4068
sg3633
g4270
sg3647
g4075
sg3642
g4277
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g3907
sg3633
g4324
sg3647
g3901
sg3642
g4331
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g3843
sg3633
g3833
sg3647
g3837
sg3642
g3841
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g3957
sg3633
g3953
sg3647
g3964
sg3642
g3961
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g3980
sg3633
g3970
sg3647
g3974
sg3642
g3978
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g3980
sg3633
g3970
sg3647
g3974
sg3642
g3978
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g3860
sg3633
g3850
sg3647
g3854
sg3642
g3858
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g3707
sg3633
g3703
sg3647
g3714
sg3642
g3711
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g4145
sg3633
g4141
sg3647
g4152
sg3642
g4149
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g3980
sg3633
g4378
sg3647
g3974
sg3642
g4385
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g4008
sg3633
g4158
sg3647
g4015
sg3642
g4165
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g3741
sg3633
g4445
sg3647
g3748
sg3642
g4452
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g3813
sg3633
g4021
sg3647
g3807
sg3642
g4028
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g3790
sg3633
g4186
sg3647
g3797
sg3642
g4193
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g3813
sg3633
g3803
sg3647
g3807
sg3642
g3811
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g3860
sg3633
g3850
sg3647
g3854
sg3642
g3858
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g3980
sg3633
g4378
sg3647
g3974
sg3642
g4385
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g3957
sg3633
g3953
sg3647
g3964
sg3642
g3961
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g3860
sg3633
g5588
sg3647
g3854
sg3642
g5595
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g3843
sg3633
g3833
sg3647
g3837
sg3642
g3841
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g3980
sg3633
g4378
sg3647
g3974
sg3642
g4385
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g3997
sg3633
g4227
sg3647
g3991
sg3642
g4234
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g3724
sg3633
g4694
sg3647
g3731
sg3642
g4701
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g3997
sg3633
g4227
sg3647
g3991
sg3642
g4234
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g3907
sg3633
g4324
sg3647
g3901
sg3642
g4331
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g3638
sg3633
g3771
sg3647
g3648
sg3642
g3778
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g3980
sg3633
g3970
sg3647
g3974
sg3642
g3978
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g3724
sg3633
g3720
sg3647
g3731
sg3642
g3728
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g3957
sg3633
g4049
sg3647
g3964
sg3642
g4056
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g3907
sg3633
g4324
sg3647
g3901
sg3642
g4331
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g3957
sg3633
g4049
sg3647
g3964
sg3642
g4056
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g3860
sg3633
g5588
sg3647
g3854
sg3642
g5595
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g3790
sg3633
g4186
sg3647
g3797
sg3642
g4193
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g4085
sg3633
g4081
sg3647
g4092
sg3642
g4089
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g3860
sg3633
g5588
sg3647
g3854
sg3642
g5595
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g4145
sg3633
g5040
sg3647
g4152
sg3642
g5047
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g3790
sg3633
g4186
sg3647
g3797
sg3642
g4193
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g3764
sg3633
g3754
sg3647
g3758
sg3642
g3762
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g4008
sg3633
g4004
sg3647
g4015
sg3642
g4012
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g3764
sg3633
g4748
sg3647
g3758
sg3642
g4755
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g3957
sg3633
g3953
sg3647
g3964
sg3642
g3961
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g3724
sg3633
g4694
sg3647
g3731
sg3642
g4701
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g3843
sg3633
g4111
sg3647
g3837
sg3642
g4118
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g4145
sg3633
g5040
sg3647
g4152
sg3642
g5047
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g3707
sg3633
g4960
sg3647
g3714
sg3642
g4967
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g3860
sg3633
g5588
sg3647
g3854
sg3642
g5595
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g3843
sg3633
g4111
sg3647
g3837
sg3642
g4118
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g3813
sg3633
g4021
sg3647
g3807
sg3642
g4028
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g3860
sg3633
g5588
sg3647
g3854
sg3642
g5595
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g4068
sg3633
g4064
sg3647
g4075
sg3642
g4072
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g3764
sg3633
g4748
sg3647
g3758
sg3642
g4755
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g3813
sg3633
g4021
sg3647
g3807
sg3642
g4028
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g3741
sg3633
g4445
sg3647
g3748
sg3642
g4452
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g4145
sg3633
g5040
sg3647
g4152
sg3642
g5047
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g3675
sg3633
g4126
sg3647
g3682
sg3642
g4133
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g4008
sg3633
g4004
sg3647
g4015
sg3642
g4012
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g3724
sg3633
g4694
sg3647
g3731
sg3642
g4701
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g3707
sg3633
g4960
sg3647
g3714
sg3642
g4967
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g3884
sg3633
g4789
sg3647
g3891
sg3642
g4796
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g3957
sg3633
g3953
sg3647
g3964
sg3642
g3961
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g3997
sg3633
g4227
sg3647
g3991
sg3642
g4234
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g3884
sg3633
g4789
sg3647
g3891
sg3642
g4796
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g3675
sg3633
g4126
sg3647
g3682
sg3642
g4133
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g3997
sg3633
g3987
sg3647
g3991
sg3642
g3995
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g3813
sg3633
g4021
sg3647
g3807
sg3642
g4028
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g3724
sg3633
g3720
sg3647
g3731
sg3642
g3728
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g3790
sg3633
g4186
sg3647
g3797
sg3642
g4193
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g3638
sg3633
g3771
sg3647
g3648
sg3642
g3778
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g4068
sg3633
g4270
sg3647
g4075
sg3642
g4277
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g4085
sg3633
g4242
sg3647
g4092
sg3642
g4249
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g4145
sg3633
g4141
sg3647
g4152
sg3642
g4149
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g3907
sg3633
g3897
sg3647
g3901
sg3642
g3905
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I79090000
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S'\x00\x01?\x1b \xf1>\x1b\x00\x01?\x1b@\xf1>\x1b\xb0\x11?\x1b8\x01?\x1b \xf1>\x1b8\x01?\x1b\xd8\x11?\x1b\x00\x12?\x1b@\xf1>\x1b`\xf1>\x1b\xb0\x11?\x1b(\x12?\x1b\x00\x12?\x1b\xc0\xf1>\x1b\x80\xf1>\x1b\x00\x01?\x1b\x90\xeb=\x1b\x10\xed=\x1bx\x12?\x1b\x00\x01?\x1b8\x01?\x1b\xd8\x11?\x1b`\xf1>\x1b\xa0\x12?\x1b\xf0\xeb=\x1b@\xf1>\x1b@\xed=\x1b\xc8\x12?\x1b\xf0\x12?\x1b8\x01?\x1b\xd8\x11?\x1b\xb0\x11?\x1b\xc8\x12?\x1b\xb8\x13?\x1b\xb0\x11?\x1b\x90\x13?\x1b\xc8\x12?\x1b\x90\xeb=\x1b\xc0\xeb=\x1bP\x12?\x1b\x80\xf1>\x1b\xd8\x11?\x1bp\xed=\x1b\xb0\x11?\x1b\x18\x13?\x1b@\xf1>\x1b\x80\xec=\x1b\x18\x02?\x1b\xe0\xec=\x1b\x80\xf1>\x1b\x80\xec=\x1b\xf0\xeb=\x1b\xc8\x12?\x1b@\xf1>\x1b\xb0\xec=\x1b\x18\x13?\x1b\xa8\x01?\x1b\x08\x14?\x1b@\xed=\x1b\x08\x14?\x1b\xa8\x01?\x1bx\x12?\x1b\xf0\x12?\x1bp\xed=\x1b\xf0\xeb=\x1b\xd8\x11?\x1b`\xf1>\x1b\xc8\x12?\x1b\xa0\x12?\x1b\x00\x01?\x1b`\xf1>\x1b \xec=\x1b@\xf1>\x1b\x80\xf1>\x1bP\x12?\x1bP\xec=\x1b\x90\xeb=\x1b\xf0\xeb=\x1b\x18\x13?\x1b \xec=\x1b\xf0\xeb=\x1b(\x12?\x1b\x80\xf1>\x1b@\xf1>\x1b\xf0\xeb=\x1b\x80\xf1>\x1b\xe0\xec=\x1b\xd8\x11?\x1b\x80\xf1>\x1b \xec=\x1b\xa0\x12?\x1b\xc0\xeb=\x1b(\x12?\x1b\x00\x12?\x1b8\x01?\x1b\xa0\x12?\x1b8\x01?\x1b`\xf1>\x1b\xd8\x11?\x1b\x00\x01?\x1b\xa0\x12?\x1b\xc0\xf1>\x1bx\x12?\x1b\xa0\xf1>\x1b \xf1>\x1b`\xf1>\x1b\xd8\x11?\x1b\x18\x13?\x1b\xc0\xf1>\x1b\xf0\x12?\x1b\xb8\x13?\x1b \xf1>\x1b\xa0\x12?\x1b\xc0\xeb=\x1b \xf1>\x1b@\xf1>\x1b\xc0\xeb=\x1b\xd8\x11?\x1b\xc8\x12?\x1b\x08\x14?\x1b \xf1>\x1b \xec=\x1bx\x12?\x1b`\xf1>\x1bx\x12?\x1b(\x12?\x1b\xf0\x12?\x1b\xc0\xeb=\x1b(\x12?\x1b \xec=\x1b\x18\x13?\x1b\x00\x01?\x1b \xec=\x1b\xc8\x12?\x1b\x80\xf1>\x1b\x00\x12?\x1b\x18\x13?\x1b\xb0\x11?\x1b \xec=\x1b\x00\x01?\x1bP\x12?\x1b\x08\x14?\x1b\xc0\xeb=\x1b \xf1>\x1b\xa0\x12?\x1b\x90\xeb=\x1bP\x12?\x1b\xc8\x12?\x1b\xb0\x11?\x1b(\x12?\x1b@\xf1>\x1b \xec=\x1b\xf0\x12?\x1bx\x12?\x1b\x90\xeb=\x1b`\xf1>\x1b \xf1>\x1b\x80\xf1>\x1b\x90\xeb=\x1b\xc0\xeb=\x1b\xf0\xeb=\x1b\xc0\xeb=\x1b\x18\x13?\x1bx\x12?\x1b8\x01?\x1b\xf0\x12?\x1b\xf0\xeb=\x1b\xc0\xf1>\x1b\x90\xeb=\x1b\xb0\x11?\x1b \xf1>\x1bp\x01?\x1b(\x12?\x1b\x00\x12?\x1bh\x13?\x1b\xe0\x01?\x1b\x90\xeb=\x1bx\x12?\x1b\xc8\x12?\x1b\xb0\xec=\x1bp\xed=\x1b\xa0\x12?\x1b(\x12?\x1b\xe0\x01?\x1b\xb0\x11?\x1b \xec=\x1b\x00\x01?\x1bP\x12?\x1b\x00\x12?\x1b\xa0\x12?\x1bP\x12?\x1b\x00\x12?\x1b\xc8\x12?\x1b\xa0\xed=\x1b\xc0\xeb=\x1b\xa0\x12?\x1b8\x01?\x1b\x00\x12?\x1b'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S'\xe0O\xef\x1a`\xf2>\x1b\xe0\xf1>\x1b \xf3>\x1b\xa0\xf3>\x1b\x00\xf3>\x1b\xe0\xf3>\x1b\x80\xf2>\x1b\x00\xf4>\x1b@\xf4>\x1b`\xf4>\x1b\x80\xf4>\x1b\xa0\xf4>\x1b\xc0\xf4>\x1b\x80\xf3>\x1b\xa0\xf2>\x1b\xe0\xf4>\x1b\x00\xf5>\x1b`\xf5>\x1b@\xf5>\x1b\xa0\xf5>\x1b\x80\xf5>\x1b\xe0\xf5>\x1b\xc0\xf5>\x1b\x00\xf2>\x1b@\xf6>\x1b\xa0\xf6>\x1b \xf6>\x1b`\xf6>\x1b\xc0\xf2>\x1b`\xf3>\x1b\x00\xf7>\x1b\xe0\xf6>\x1b\x80\xf6>\x1b \xf7>\x1b@\xf7>\x1b\xa0\xf7>\x1b\x80\xf7>\x1b\xe0\xf7>\x1b\x00\xf8>\x1b@\xf2>\x1b`\xf8>\x1b\x00\xf6>\x1b\xe0\xf2>\x1b \xf5>\x1b\xc0\xf8>\x1b\xc0\xf6>\x1b@\xf8>\x1b \xf8>\x1b\x00\xf9>\x1b`\xf9>\x1b\xc0\xf3>\x1b \xfa>\x1b\xa0\xf8>\x1b \xf4>\x1b\x80\xf8>\x1b\xa0\xf9>\x1b\xc0\xfa>\x1b`\xfa>\x1b`\xf7>\x1b\x00\xfa>\x1b \xf2>\x1b\xa0\xfa>\x1b@\xf9>\x1b\x80\xfb>\x1b\xe0\xf8>\x1b\x00\xfb>\x1b@\xfa>\x1b@\xf3>\x1b\xc0\xf9>\x1b\xa0\xfb>\x1b\xc0\xf7>\x1b\x80\xf9>\x1b\xa0\xfc>\x1b \xf9>\x1b\x00\xfc>\x1b\x80\xfc>\x1b\x80\xfa>\x1b\x00=\x19\x1b\xe0\xfc>\x1b\xe0\xfa>\x1b@\xfc>\x1b@\xfb>\x1b`\xfc>\x1b\xa0\xfd>\x1b\xc0\xfc>\x1b@\xfd>\x1b\x80\xfe>\x1b \xfd>\x1b@\xfe>\x1b\xe0\xfb>\x1b\xe0\xfe>\x1b\x00\xfd>\x1b`\xfe>\x1b\x00\xff>\x1b \xfb>\x1b\xc0\xfd>\x1b\xe0\xf9>\x1b J\xef\x1a\x00\xfe>\x1b\xc0\xfe>\x1b\xe0\xff>\x1b \xfe>\x1b`\xfd>\x1b\xc0\xff>\x1b@\xff>\x1b\xa0\xfe>\x1b \xff>\x1b\x80\xfd>\x1b`\xff>\x1b`\xfb>\x1b\xa0\xff>\x1b\xe0\xfd>\x1b@?\x19\x1b \x92(\x1b\xa0\x90(\x1b`\x91(\x1b\x00\x91(\x1b@\x90(\x1b\xc0\x91(\x1b \x91(\x1b\xa0\x92(\x1b`\x92(\x1b\x80\x90(\x1b\xc0\x92(\x1b\x80\x92(\x1b\x00\x93(\x1b\xe0\x92(\x1b\xe0\x91(\x1b \x93(\x1b@\x93(\x1b`\x93(\x1b\x80\x93(\x1b\xa0\x93(\x1b\x00\x94(\x1b \x94(\x1b@\x91(\x1b\x80\x91(\x1b@\x94(\x1b`\x94(\x1b\x80\x94(\x1b@\x95(\x1b\xc0\x95(\x1b`\x95(\x1b\xc0\x94(\x1b\xe0\x95(\x1b\xa0\x91(\x1b\xc0\x90(\x1b\xa0\x94(\x1b\xc0\xfb>\x1b\xe0\x93(\x1b`\x96(\x1b\xa0\x95(\x1b\xc0\x93(\x1b\x00\x97(\x1b\x80\x95(\x1b\x00\x95(\x1b \x90(\x1b \x97(\x1b\x80\x97(\x1b`\x97(\x1b\xe0\x90(\x1b`\x90(\x1b\xe0\x97(\x1b\xe0\x94(\x1b \x95(\x1b\x80\x98(\x1b\xc0\x97(\x1b\xa0\x96(\x1b\xc0\x98(\x1b\xc0\x96(\x1b@\x97(\x1b\x00\x92(\x1b \x96(\x1b`\x99(\x1b@\x92(\x1b \x99(\x1b\x00\x98(\x1b\xe0\x99(\x1b\xe0\x96(\x1b\xa0\x99(\x1b\xe0\x98(\x1b \x98(\x1b@\x99(\x1b\xa0\x98(\x1b\x00\x96(\x1b`\x98(\x1b\x80\x9a(\x1b@\x9a(\x1b \x9a(\x1b@\x96(\x1b`\x9b(\x1b\xa0\x9b(\x1b\x80\x9b(\x1b\x00\x99(\x1b\x00\x9b(\x1b\x80\x96(\x1b\xe0\x9a(\x1b\xa0\x97(\x1b\x80\x9c(\x1b'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'{\xf6??\xf6 \x82?M\xba{?Yuw?\xb3\xccL?\x14\x00\xe0?\x9f\xa6j?\x8423?\x8aED?\xbd\xbb{?a\xa6j?\x1dKs?\x95\xeen?e\x1e3?\xe3\x93\x19?\xd2\x01@?\x16T\xb5?\x0f~&?7\x88H?W-3?\xdd\xecn?\xf0\xa9\xaa?]\x1d"?\xf8\xcbL?f\x99\x19?4cf?v\xee.?M\xbb;?\x7f\xac*?\'?D?9/\x93?\x92Q\x15?\xffe&?%ef?\xccj&?\xd8\xfb??g\x83\x08?\x88O\x15?0\xfd??(\xa9\x8a?8\xdc\x9d?\xaa\xfc??\x84r7?\xa7\x12\x11?HD\x84?\xce\xd8\x8c??}H?\xa5\x17"?\xb8\xcd\x0c?O@D?\x8co7?\xaf\xa8\x19?\x87\xb5;?(\x9aY?\x12`&?\x0f\xfd??1\xbc\x0c?)`\x95?K3s?\x9bTU?\x06e&?\x16\xf0.?\x85\xde\x1d?u63?O\xc8L?o\xa9*?J\xfe\xff?;\xab;?\xd4\xf0\x1d?N\x96Y?\xfe?\xc4?\x0eN\x15?x\xfb??\xda \x82?/\x0fQ?\xa2T\x15?z\xd6]?\xa3\x0bQ?}\x80\x88?\x93g\xa6?\xf9\xfe\x7f?\xf6\xeb\x8e?X\x10Q?u\x80\xa8?P\xef\xae?\x03\xb7{?}33?\xfd\x94\x19?\xd1b\xa6?`33?1\xe1\x1d?t\x12Q?7\xd6]?*\xce\x0c?\xe2\tb?X\x93\x19?0\x82&?T_\x86?\xf9F\x15?\xc7\xf8??\x9fe&?yU\x95?\xe7\x08\x80?\x84\xa7\x8a?\xd0\x94Y?\xd9RU?\\`f?Qd\x86?\xeb\xef.?\xa6\xb7{?.A\x84?\xac\x11Q?\x94\xbd;?\x822s?\xa9_&?\xcaq7?\xef\x84\x08?\x0c\xf0.?R33?8<b?\xa6gf?G\xdb]?\xa4\xfc.?gd\x86?\xa1e\xa6?\xb5\x1e"?\x82i&?EuH?\xe4-s?\x87\xa7*?\x964\x04?b\xc6L?\xb1vw?\x00\x94\x19?\x84@D?6!"?\x86w7?\xbe\xe6.?\xa8\xe1\x1d?\xb4\xefn?\x88\x12Q?\xd4\xccL?p\xee\x8e?\x8aaf?rV\x15?\x19VU?~\xe5.?\x0c\xb8;?\xc1\xb2\x19?\x06z\x08?\x19\xef.?\xa4v\x08?\xa1>D?s\xff??K\xaa\n@\xdb\xdb]?\'@\x84?\x1f\x84H?\xd9\xab;?K\xea.?\xa6G3?\xd5\x8b\x19?,13?\xab\xde\x1d?[AD?\x1d\xab*?/""??13?i\xcc\x0c?\xc5#"?\x03$"?"\xf3L?\x11\x1e\x91?\xd7\x87\x88?\xe2v\x08?\x02\x11\x11?&\xb9\x9b?\xd8\xe9.?\x10n\x15?\x0bq7?B5\x04?\xce\xdf\xae?\x16\x8f\x19?\xe9\xf5\xbf?\x9c\x91*?\r""?\t\'s?>\\&?\xaeK\xe6>\xbc\xe9\xae?\xbf>\xa4?Eh\xf7>\xbfD\x04?\xa0\x03\x80?N\xf4\x1d?\xba\xe7n?\xdc\xff??]\x1b"?\x99\xcc\x0c?*\xa6*?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S'\xa8\x88\x19\x05\xe8\x84\x19\x05P\xb0\xd0\x0c\x08\xbf\xd0\x0c\xd8\xbe\xd0\x0c\xa0\xbd\xd0\x0c\xe8\xb7\xd0\x0c\xf0\xbe\xd0\x0c@\xbd\xd0\x0cX\xbd\xd0\x0c\x00\xbe\xd0\x0c`\xbe\xd0\x0c\x90\xb8\xd0\x0c\xe0\xb6\xd0\x0c\x10\xbd\xd0\x0c\x98\xbc\xd0\x0c\xd8\xbb\xd0\x0c\xb0\xb3\xd0\x0c\xf8\xb6\xd0\x0c\xe0\xbc\xd0\x0c\xe0\xb9\xd0\x0c\xb0\xb9\xd0\x0c\xc0\xb5\xd0\x0cP\xb9\xd0\x0c\x08\xb9\xd0\x0c\xa8\xb5\xd0\x0c\xe8\xb1\xd0\x0c\x18\xb8\xd0\x0ch\xb9\xd0\x0c\xb8\xba\xd0\x0c\x98\xb0\xd0\x0cp\xb7\xd0\x0c@\xb7\xd0\x0c\xe0\xbf\xd0\x0c\x98\xbf\xd0\x0c\xf8\xb9\xd0\x0cx\xbe\xd0\x0cp\xc4\xfc\x04\x00\xce\xfc\x04\x10\xc7\xfc\x04P\xc9\xfc\x04\x08\xc3\xfc\x048\xc6\xfc\x04\xe0\xc0\xfc\x04\x00\xc5\xfc\x04X\xc7\xfc\x04\xe0\xcf\xfc\x04\xe0\xc9\xfc\x04\x08\xcc\xfc\x04h\xc0\xfc\x04@\xc7\xfc\x04x\xc8\xfc\x040\xc8\xfc\x04 \xc3\xfc\x04\xe0\xc3\xfc\x04\x98\xc0\xfc\x04p\xca\xfc\x04@\xc4\xfc\x04\xa8\xc8\xfc\x04h\xc3\xfc\x04X\xc1\xfc\x04\xc0\xc2\xfc\x04`\xc5\xfc\x04\x80\xc0\xfc\x04P\xc6\xfc\x04P\xcc\xfc\x04`\xc8\xfc\x04\xc8\xc3\xfc\x04x\xc2\xfc\x04\xd8\xcb\xfc\x04\x98\xc3\xfc\x04 \xc6\xfc\x04\x90\xc2\xfc\x04\xa0\xcd\xfc\x040\xc5\xfc\x04\xd8\xc8\xfc\x04\xa0\xc4\xfc\x04\xb0\xc3\xfc\x04\xd0\xc1\xfc\x04\x88\xca\xfc\x04\xd8\xc5\xfc\x04\x00\xcb\xfc\x04\x18\xcb\xfc\x04\x18\xc5\xfc\x04\xc0\xcb\xfc\x04\x90\xc8\xfc\x04\xb8\xc4\xfc\x04\xa0\xca\xfc\x04\xd0\xc4\xfc\x04\xb0\xc0\xfc\x04\x80\xc3\xfc\x04\xf8\xc6\xfc\x04\xe8\xc7\xfc\x04\xd0\xcd\xfc\x04\x10\xca\xfc\x04\x88\xc1\xfc\x04\x90\xcb\xfc\x04h\xc6\xfc\x04h\xc9\xfc\x04\xd0\xca\xfc\x040\xcb\xfc\x04\xe8\xc1\xfc\x048\xc9\xfc\x04 \xc0\xfc\x04\xc0\xc5\xfc\x04H\xc5\xfc\x04`\xcb\xfc\x04\xe0\xcc\xfc\x04\x10\xc4\xfc\x04\xc8\xcc\xfc\x04\x00\xc8\xfc\x04h\xcf\xfc\x04\xf0\xc5\xfc\x040\xce\xfc\x04\xc8\xcf\xfc\x048\xcc\xfc\x04\x08\xc9\xfc\x04\xf8\xc0\xfc\x04(\xca\xfc\x04(\xcd\xfc\x04\x98\xc9\xfc\x04X\xc4\xfc\x04\xb0\xc6\xfc\x04\xb0\xcf\xfc\x04\xa0\xc1\xfc\x04\x88\xcd\xfc\x04p\xcd\xfc\x04 \xcc\xfc\x04`\xc2\xfc\x04\xd0\xc7\xfc\x04\x00\xc2\xfc\x04\xf8\xc3\xfc\x04\x88\xc4\xfc\x04\xb8\xc1\xfc\x04`\xce\xfc\x04\xf8\xcc\xfc\x04@\xca\xfc\x04\xa8\xc2\xfc\x04\xd8\xce\xfc\x04\xa8\xce\xfc\x04\x90\xce\xfc\x048\xc0\xfc\x04\xb0\xc9\xfc\x04\xf0\xcb\xfc\x04\x18\xc8\xfc\x04(\xc1\xfc\x04@\xcd\xfc\x04\xf8\xc9\xfc\x04\x08\xcf\xfc\x04H\xce\xfc\x04X\xca\xfc\x04\xf0\xce\xfc\x04\x90\xc5\xfc\x04\xb8\xcd\xfc\x04P\xc3\xfc\x04\xf0\xc2\xfc\x04\xb0\xcc\xfc\x04h\xcc\xfc\x04\x98\xcc\xfc\x04\x80\xcf\xfc\x04\xc8\xc6\xfc\x04\xa8\xcb\xfc\x04H\xc2\xfc\x04 \xc9\xfc\x04\x98\xc6\xfc\x04\xa8\xc5\xfc\x04\x80\xc9\xfc\x04\xe8\xc4\xfc\x04\xc0\xce\xfc\x048\xcf\xfc\x04\xf0\xc8\xfc\x04x\xcb\xfc\x048\xc3\xfc\x04P\xcf\xfc\x04\x18\xce\xfc\x04\x80\xc6\xfc\x04\x98\xcf\xfc\x04\xb8\xca\xfc\x04\xe8\xcd\xfc\x04 \xcf\xfc\x04\xc0\xc8\xfc\x04\xe0\xc6\xfc\x04\xb8\xc7\xfc\x04x\xc5\xfc\x04\xc8\xc9\xfc\x04X\xcd\xfc\x04\x08\xc6\xfc\x04\x10\xcd\xfc\x04H\xc8\xfc\x04\xd8\xc2\xfc\x04(\xc7\xfc\x04\x88\xc7\xfc\x04\xc8\xc0\xfc\x04\xe8\xca\xfc\x04p\xc7\xfc\x04\x80\xcc\xfc\x04\x10\xc1\xfc\x04x\xce\xfc\x04H\xcb\xfc\x04\x10\xba\xd0\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6376
sg6371
g6409
sg6385
g6386
sg6380
g6416
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6428
sg6371
g6424
sg6385
g6435
sg6380
g6432
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6445
sg6371
g6441
sg6385
g6452
sg6380
g6449
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6462
sg6371
g6458
sg6385
g6469
sg6380
g6466
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6396
sg6371
g6475
sg6385
g6403
sg6380
g6482
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6462
sg6371
g6458
sg6385
g6469
sg6380
g6466
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6507
sg6371
g6503
sg6385
g6514
sg6380
g6511
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6524
sg6371
g6520
sg6385
g6531
sg6380
g6528
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6428
sg6371
g6537
sg6385
g6435
sg6380
g6544
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6556
sg6371
g6552
sg6385
g6563
sg6380
g6560
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6445
sg6371
g6441
sg6385
g6452
sg6380
g6449
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6586
sg6371
g6582
sg6385
g6593
sg6380
g6590
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6524
sg6371
g6599
sg6385
g6531
sg6380
g6606
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6624
sg6371
g6614
sg6385
g6618
sg6380
g6622
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6635
sg6371
g6631
sg6385
g6642
sg6380
g6639
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6665
sg6371
g6661
sg6385
g6672
sg6380
g6669
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6688
sg6371
g6678
sg6385
g6682
sg6380
g6686
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6699
sg6371
g6695
sg6385
g6706
sg6380
g6703
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6376
sg6371
g6409
sg6385
g6386
sg6380
g6416
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6462
sg6371
g6725
sg6385
g6469
sg6380
g6732
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6507
sg6371
g6503
sg6385
g6514
sg6380
g6511
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6556
sg6371
g6753
sg6385
g6563
sg6380
g6760
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6772
sg6371
g6768
sg6385
g6779
sg6380
g6776
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6789
sg6371
g6785
sg6385
g6796
sg6380
g6793
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6428
sg6371
g6537
sg6385
g6435
sg6380
g6544
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6789
sg6371
g6785
sg6385
g6796
sg6380
g6793
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6832
sg6371
g6828
sg6385
g6839
sg6380
g6836
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6849
sg6371
g6845
sg6385
g6856
sg6380
g6853
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6462
sg6371
g6725
sg6385
g6469
sg6380
g6732
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6507
sg6371
g6875
sg6385
g6514
sg6380
g6882
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6445
sg6371
g6441
sg6385
g6452
sg6380
g6449
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6832
sg6371
g6828
sg6385
g6839
sg6380
g6836
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6699
sg6371
g6916
sg6385
g6706
sg6380
g6923
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6445
sg6371
g6931
sg6385
g6452
sg6380
g6938
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6507
sg6371
g6503
sg6385
g6514
sg6380
g6511
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6832
sg6371
g6828
sg6385
g6839
sg6380
g6836
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6665
sg6371
g6661
sg6385
g6672
sg6380
g6669
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6688
sg6371
g6678
sg6385
g6682
sg6380
g6686
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g6624
sg6371
g6614
sg6385
g6618
sg6380
g6622
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g6635
sg6371
g7011
sg6385
g6642
sg6380
g7018
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g6507
sg6371
g6503
sg6385
g6514
sg6380
g6511
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g7049
sg6371
g7039
sg6385
g7043
sg6380
g7047
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g6445
sg6371
g6441
sg6385
g6452
sg6380
g6449
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g7049
sg6371
g7069
sg6385
g7043
sg6380
g7076
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g6428
sg6371
g6424
sg6385
g6435
sg6380
g6432
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6462
sg6371
g6458
sg6385
g6469
sg6380
g6466
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6635
sg6371
g7011
sg6385
g6642
sg6380
g7018
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g6665
sg6371
g7123
sg6385
g6672
sg6380
g7130
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6635
sg6371
g6631
sg6385
g6642
sg6380
g6639
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6462
sg6371
g6725
sg6385
g6469
sg6380
g6732
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6789
sg6371
g7164
sg6385
g6796
sg6380
g7171
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6832
sg6371
g6828
sg6385
g6839
sg6380
g6836
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6428
sg6371
g6424
sg6385
g6435
sg6380
g6432
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g6586
sg6371
g7205
sg6385
g6593
sg6380
g7212
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g7049
sg6371
g7039
sg6385
g7043
sg6380
g7047
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g6524
sg6371
g6520
sg6385
g6531
sg6380
g6528
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g6849
sg6371
g6845
sg6385
g6856
sg6380
g6853
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g6789
sg6371
g7164
sg6385
g6796
sg6380
g7171
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g6849
sg6371
g7272
sg6385
g6856
sg6380
g7279
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6524
sg6371
g6599
sg6385
g6531
sg6380
g6606
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g6699
sg6371
g6695
sg6385
g6706
sg6380
g6703
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g6849
sg6371
g7272
sg6385
g6856
sg6380
g7279
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g7049
sg6371
g7069
sg6385
g7043
sg6380
g7076
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6789
sg6371
g6785
sg6385
g6796
sg6380
g6793
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6507
sg6371
g6875
sg6385
g6514
sg6380
g6882
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g6556
sg6371
g6552
sg6385
g6563
sg6380
g6560
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g6832
sg6371
g7378
sg6385
g6839
sg6380
g7385
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g6772
sg6371
g7393
sg6385
g6779
sg6380
g7400
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g6376
sg6371
g6409
sg6385
g6386
sg6380
g6416
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g6556
sg6371
g6753
sg6385
g6563
sg6380
g6760
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g7438
sg6371
g7434
sg6385
g7445
sg6380
g7442
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g6428
sg6371
g6537
sg6385
g6435
sg6380
g6544
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6635
sg6371
g6631
sg6385
g6642
sg6380
g6639
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g6624
sg6371
g6614
sg6385
g6618
sg6380
g6622
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6445
sg6371
g6441
sg6385
g6452
sg6380
g6449
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6665
sg6371
g7123
sg6385
g6672
sg6380
g7130
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6789
sg6371
g7164
sg6385
g6796
sg6380
g7171
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g7049
sg6371
g7039
sg6385
g7043
sg6380
g7047
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g7438
sg6371
g7542
sg6385
g7445
sg6380
g7549
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g6789
sg6371
g7164
sg6385
g6796
sg6380
g7171
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6586
sg6371
g7205
sg6385
g6593
sg6380
g7212
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6635
sg6371
g6631
sg6385
g6642
sg6380
g6639
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6428
sg6371
g6537
sg6385
g6435
sg6380
g6544
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g6789
sg6371
g7164
sg6385
g6796
sg6380
g7171
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g6635
sg6371
g7011
sg6385
g6642
sg6380
g7018
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6665
sg6371
g7123
sg6385
g6672
sg6380
g7130
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g6507
sg6371
g6875
sg6385
g6514
sg6380
g6882
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g6635
sg6371
g6631
sg6385
g6642
sg6380
g6639
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g7438
sg6371
g7434
sg6385
g7445
sg6380
g7442
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g6772
sg6371
g7393
sg6385
g6779
sg6380
g7400
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6688
sg6371
g6678
sg6385
g6682
sg6380
g6686
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g6586
sg6371
g6582
sg6385
g6593
sg6380
g6590
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g6524
sg6371
g6599
sg6385
g6531
sg6380
g6606
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g6462
sg6371
g6458
sg6385
g6469
sg6380
g6466
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6772
sg6371
g7393
sg6385
g6779
sg6380
g7400
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6462
sg6371
g6725
sg6385
g6469
sg6380
g6732
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6556
sg6371
g6552
sg6385
g6563
sg6380
g6560
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g6507
sg6371
g6875
sg6385
g6514
sg6380
g6882
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g6772
sg6371
g6768
sg6385
g6779
sg6380
g6776
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6624
sg6371
g7830
sg6385
g6618
sg6380
g7837
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g6699
sg6371
g6916
sg6385
g6706
sg6380
g6923
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g6428
sg6371
g6424
sg6385
g6435
sg6380
g6432
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6556
sg6371
g6753
sg6385
g6563
sg6380
g6760
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6507
sg6371
g6875
sg6385
g6514
sg6380
g6882
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g7049
sg6371
g7039
sg6385
g7043
sg6380
g7047
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g6624
sg6371
g6614
sg6385
g6618
sg6380
g6622
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g6849
sg6371
g7272
sg6385
g6856
sg6380
g7279
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g6699
sg6371
g6695
sg6385
g6706
sg6380
g6703
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g6396
sg6371
g6475
sg6385
g6403
sg6380
g6482
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6772
sg6371
g7393
sg6385
g6779
sg6380
g7400
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6688
sg6371
g7988
sg6385
g6682
sg6380
g7995
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g6396
sg6371
g6475
sg6385
g6403
sg6380
g6482
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6428
sg6371
g6424
sg6385
g6435
sg6380
g6432
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6688
sg6371
g7988
sg6385
g6682
sg6380
g7995
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g6507
sg6371
g6503
sg6385
g6514
sg6380
g6511
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6832
sg6371
g7378
sg6385
g6839
sg6380
g7385
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g6849
sg6371
g7272
sg6385
g6856
sg6380
g7279
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g7438
sg6371
g7542
sg6385
g7445
sg6380
g7549
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g6699
sg6371
g6916
sg6385
g6706
sg6380
g6923
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6556
sg6371
g6552
sg6385
g6563
sg6380
g6560
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g6699
sg6371
g6695
sg6385
g6706
sg6380
g6703
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g6586
sg6371
g6582
sg6385
g6593
sg6380
g6590
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g6849
sg6371
g6845
sg6385
g6856
sg6380
g6853
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g6688
sg6371
g7988
sg6385
g6682
sg6380
g7995
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6586
sg6371
g7205
sg6385
g6593
sg6380
g7212
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g7438
sg6371
g7434
sg6385
g7445
sg6380
g7442
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g7049
sg6371
g7069
sg6385
g7043
sg6380
g7076
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g7438
sg6371
g7542
sg6385
g7445
sg6380
g7549
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6832
sg6371
g7378
sg6385
g6839
sg6380
g7385
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g6635
sg6371
g7011
sg6385
g6642
sg6380
g7018
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g6524
sg6371
g6520
sg6385
g6531
sg6380
g6528
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g7049
sg6371
g7069
sg6385
g7043
sg6380
g7076
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6445
sg6371
g6931
sg6385
g6452
sg6380
g6938
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g7438
sg6371
g7434
sg6385
g7445
sg6380
g7442
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g6376
sg6371
g6409
sg6385
g6386
sg6380
g6416
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g6624
sg6371
g7830
sg6385
g6618
sg6380
g7837
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6849
sg6371
g6845
sg6385
g6856
sg6380
g6853
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g6688
sg6371
g6678
sg6385
g6682
sg6380
g6686
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g6396
sg6371
g6475
sg6385
g6403
sg6380
g6482
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g6772
sg6371
g6768
sg6385
g6779
sg6380
g6776
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g6665
sg6371
g6661
sg6385
g6672
sg6380
g6669
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g6624
sg6371
g7830
sg6385
g6618
sg6380
g7837
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g6832
sg6371
g7378
sg6385
g6839
sg6380
g7385
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g6445
sg6371
g6931
sg6385
g6452
sg6380
g6938
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g6586
sg6371
g7205
sg6385
g6593
sg6380
g7212
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g6428
sg6371
g6537
sg6385
g6435
sg6380
g6544
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g7438
sg6371
g7542
sg6385
g7445
sg6380
g7549
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6849
sg6371
g6845
sg6385
g6856
sg6380
g6853
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6699
sg6371
g6916
sg6385
g6706
sg6380
g6923
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g6665
sg6371
g7123
sg6385
g6672
sg6380
g7130
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6556
sg6371
g6753
sg6385
g6563
sg6380
g6760
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g6635
sg6371
g7011
sg6385
g6642
sg6380
g7018
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g6665
sg6371
g7123
sg6385
g6672
sg6380
g7130
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g6688
sg6371
g7988
sg6385
g6682
sg6380
g7995
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g6789
sg6371
g6785
sg6385
g6796
sg6380
g6793
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g6688
sg6371
g6678
sg6385
g6682
sg6380
g6686
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g7049
sg6371
g7039
sg6385
g7043
sg6380
g7047
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6699
sg6371
g6916
sg6385
g6706
sg6380
g6923
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6462
sg6371
g6458
sg6385
g6469
sg6380
g6466
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g6849
sg6371
g7272
sg6385
g6856
sg6380
g7279
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6789
sg6371
g6785
sg6385
g6796
sg6380
g6793
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g6624
sg6371
g7830
sg6385
g6618
sg6380
g7837
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g6665
sg6371
g6661
sg6385
g6672
sg6380
g6669
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6445
sg6371
g6931
sg6385
g6452
sg6380
g6938
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g6586
sg6371
g7205
sg6385
g6593
sg6380
g7212
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6524
sg6371
g6599
sg6385
g6531
sg6380
g6606
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g6396
sg6371
g6475
sg6385
g6403
sg6380
g6482
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6556
sg6371
g6753
sg6385
g6563
sg6380
g6760
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6665
sg6371
g6661
sg6385
g6672
sg6380
g6669
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g6699
sg6371
g6695
sg6385
g6706
sg6380
g6703
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6832
sg6371
g6828
sg6385
g6839
sg6380
g6836
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6586
sg6371
g6582
sg6385
g6593
sg6380
g6590
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g7049
sg6371
g7069
sg6385
g7043
sg6380
g7076
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g6772
sg6371
g6768
sg6385
g6779
sg6380
g6776
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6586
sg6371
g6582
sg6385
g6593
sg6380
g6590
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6556
sg6371
g6552
sg6385
g6563
sg6380
g6560
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6445
sg6371
g6931
sg6385
g6452
sg6380
g6938
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g7438
sg6371
g7542
sg6385
g7445
sg6380
g7549
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g6376
sg6371
g6409
sg6385
g6386
sg6380
g6416
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g6624
sg6371
g6614
sg6385
g6618
sg6380
g6622
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g6524
sg6371
g6520
sg6385
g6531
sg6380
g6528
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g6772
sg6371
g7393
sg6385
g6779
sg6380
g7400
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6624
sg6371
g7830
sg6385
g6618
sg6380
g7837
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g6524
sg6371
g6599
sg6385
g6531
sg6380
g6606
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6832
sg6371
g7378
sg6385
g6839
sg6380
g7385
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g7438
sg6371
g7434
sg6385
g7445
sg6380
g7442
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6688
sg6371
g7988
sg6385
g6682
sg6380
g7995
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g6772
sg6371
g6768
sg6385
g6779
sg6380
g6776
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g6462
sg6371
g6725
sg6385
g6469
sg6380
g6732
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6524
sg6371
g6520
sg6385
g6531
sg6380
g6528
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.